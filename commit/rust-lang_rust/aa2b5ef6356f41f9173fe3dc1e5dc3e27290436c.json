{"sha": "aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "node_id": "C_kwDOAAsO6NoAKGFhMmI1ZWY2MzU2ZjQxZjkxNzNmZTNkYzFlNWRjM2UyNzI5MDQzNmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-18T18:59:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T09:03:33Z"}, "message": "Count number of lifetime parameters in a separate pass.", "tree": {"sha": "4033b08b6f75f4355b4e1b8248b883c3b9abc77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4033b08b6f75f4355b4e1b8248b883c3b9abc77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "html_url": "https://github.com/rust-lang/rust/commit/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "url": "https://api.github.com/repos/rust-lang/rust/commits/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "html_url": "https://github.com/rust-lang/rust/commit/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "2f6ac4020bc6584814065a3b15423b864d49d0a9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "patch": "@@ -1006,7 +1006,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         match item.kind {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. })\n             | ItemKind::Fn(box Fn { ref generics, .. }) => {\n-                self.compute_num_lifetime_params(item.id, generics);\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -1015,7 +1014,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::Enum(_, ref generics)\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics) => {\n-                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_adt(item, generics);\n             }\n \n@@ -1026,12 +1024,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 items: ref impl_items,\n                 ..\n             }) => {\n-                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n             ItemKind::Trait(box Trait { ref generics, ref bounds, ref items, .. }) => {\n-                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let def = this.r.local_def_id(item.id).to_def_id();\n@@ -1083,7 +1079,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let def = this.r.local_def_id(item.id).to_def_id();\n@@ -2576,20 +2571,51 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+}\n \n-    fn compute_num_lifetime_params(&mut self, id: NodeId, generics: &Generics) {\n-        let def_id = self.r.local_def_id(id);\n-        let count = generics\n-            .params\n-            .iter()\n-            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n-            .count();\n-        self.r.item_generics_num_lifetimes.insert(def_id, count);\n+struct LifetimeCountVisitor<'a, 'b> {\n+    r: &'b mut Resolver<'a>,\n+}\n+\n+/// Walks the whole crate in DFS order, visiting each item, counting the declared number of\n+/// lifetime generic parameters.\n+impl<'ast> Visitor<'ast> for LifetimeCountVisitor<'_, '_> {\n+    fn visit_item(&mut self, item: &'ast Item) {\n+        match &item.kind {\n+            ItemKind::TyAlias(box TyAlias { ref generics, .. })\n+            | ItemKind::Fn(box Fn { ref generics, .. })\n+            | ItemKind::Enum(_, ref generics)\n+            | ItemKind::Struct(_, ref generics)\n+            | ItemKind::Union(_, ref generics)\n+            | ItemKind::Impl(box Impl { ref generics, .. })\n+            | ItemKind::Trait(box Trait { ref generics, .. })\n+            | ItemKind::TraitAlias(ref generics, _) => {\n+                let def_id = self.r.local_def_id(item.id);\n+                let count = generics\n+                    .params\n+                    .iter()\n+                    .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n+                    .count();\n+                self.r.item_generics_num_lifetimes.insert(def_id, count);\n+            }\n+\n+            ItemKind::Mod(..)\n+            | ItemKind::ForeignMod(..)\n+            | ItemKind::Static(..)\n+            | ItemKind::Const(..)\n+            | ItemKind::Use(..)\n+            | ItemKind::ExternCrate(..)\n+            | ItemKind::MacroDef(..)\n+            | ItemKind::GlobalAsm(..)\n+            | ItemKind::MacCall(..) => {}\n+        }\n+        visit::walk_item(self, item)\n     }\n }\n \n impl<'a> Resolver<'a> {\n     pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {\n+        visit::walk_crate(&mut LifetimeCountVisitor { r: self }, krate);\n         let mut late_resolution_visitor = LateResolutionVisitor::new(self);\n         visit::walk_crate(&mut late_resolution_visitor, krate);\n         for (id, span) in late_resolution_visitor.diagnostic_metadata.unused_labels.iter() {"}]}