{"sha": "eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWIwZjZhYjc4ODZiZjg5YjFjYzAwZGJjNTI0OGJmZDYyZWEyMWQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-21T11:24:24Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-21T15:53:00Z"}, "message": "Move `sys_common::rwlock::StaticRWLock` etc. to `sys::unix::rwlock`", "tree": {"sha": "a64196cb6dead69eb0ba2b3adcd01933020c81a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a64196cb6dead69eb0ba2b3adcd01933020c81a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "html_url": "https://github.com/rust-lang/rust/commit/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62652865b6029b4776a7c03efa13a37b15c9b953", "url": "https://api.github.com/repos/rust-lang/rust/commits/62652865b6029b4776a7c03efa13a37b15c9b953", "html_url": "https://github.com/rust-lang/rust/commit/62652865b6029b4776a7c03efa13a37b15c9b953"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "2b2211feaf1c8f0f365d3b9c981007f574e7db00", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "patch": "@@ -21,8 +21,8 @@ use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n+use crate::sys::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n-use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};"}, {"sha": "d97d9d712fc93a383450b3f270fb5bdfb5a662e7", "filename": "library/std/src/sys/unix/rwlock.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs?ref=eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "patch": "@@ -139,3 +139,55 @@ impl RWLock {\n         }\n     }\n }\n+\n+pub struct StaticRWLock(RWLock);\n+\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n+}\n+\n+pub struct RWLockWriteGuard(&'static RWLock);\n+\n+impl Drop for RWLockWriteGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.write_unlock() }\n+    }\n+}"}, {"sha": "3705d641a1be646ab38436b8aaed032a6ef3e312", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=eb9b0f6ab7886bf89b1cc00dbc5248bfd62ea21d", "patch": "@@ -86,62 +86,3 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n-\n-// the cfg annotations only exist due to dead code warnings. the code itself is portable\n-#[cfg(unix)]\n-pub struct StaticRWLock(RWLock);\n-\n-#[cfg(unix)]\n-impl StaticRWLock {\n-    pub const fn new() -> StaticRWLock {\n-        StaticRWLock(RWLock::new())\n-    }\n-\n-    /// Acquires shared access to the underlying lock, blocking the current\n-    /// thread to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.read();\n-        }\n-        RWLockReadGuard(&self.0)\n-    }\n-\n-    /// Acquires write access to the underlying lock, blocking the current thread\n-    /// to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.write();\n-        }\n-        RWLockWriteGuard(&self.0)\n-    }\n-}\n-\n-#[cfg(unix)]\n-pub struct RWLockReadGuard(&'static RWLock);\n-\n-#[cfg(unix)]\n-impl Drop for RWLockReadGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.read_unlock() }\n-    }\n-}\n-\n-#[cfg(unix)]\n-pub struct RWLockWriteGuard(&'static RWLock);\n-\n-#[cfg(unix)]\n-impl Drop for RWLockWriteGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.write_unlock() }\n-    }\n-}"}]}