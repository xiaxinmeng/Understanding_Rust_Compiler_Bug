{"sha": "d617551a6a3830a5324898f2046b97aad8c6067a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTc1NTFhNmEzODMwYTUzMjQ4OThmMjA0NmI5N2FhZDhjNjA2N2E=", "commit": {"author": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-01T13:49:46Z"}, "committer": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-03T16:12:29Z"}, "message": "Expanded lint documentation", "tree": {"sha": "98324c47dd289d5b36b42d244a9e8463460b178c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98324c47dd289d5b36b42d244a9e8463460b178c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d617551a6a3830a5324898f2046b97aad8c6067a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d617551a6a3830a5324898f2046b97aad8c6067a", "html_url": "https://github.com/rust-lang/rust/commit/d617551a6a3830a5324898f2046b97aad8c6067a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d617551a6a3830a5324898f2046b97aad8c6067a/comments", "author": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92ecc53691f3edd67526dca423a2b4083d12a221", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ecc53691f3edd67526dca423a2b4083d12a221", "html_url": "https://github.com/rust-lang/rust/commit/92ecc53691f3edd67526dca423a2b4083d12a221"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "9fa5860ba300defee40578f8faca33e2a8f45ea1", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d617551a6a3830a5324898f2046b97aad8c6067a/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d617551a6a3830a5324898f2046b97aad8c6067a/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=d617551a6a3830a5324898f2046b97aad8c6067a", "patch": "@@ -14,6 +14,22 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for patterns that aren't exact representations of the types\n     /// they are applied to.\n     ///\n+    /// To satisfy this lint, you will have to adjust either the expression that is matched\n+    /// against or the pattern itself, as well as the bindings that are introduced by the\n+    /// adjusted patterns. For matching you will have to either dereference the expression\n+    /// with the `*` operator, or amend the patterns to explicitly match against `&<pattern>`\n+    /// or `&mut <pattern>` depending on the reference mutability. For the bindings you need\n+    /// to use the inverse. You can leave them as plain bindings if you wish for the value\n+    /// to be copied, but you must use `ref mut <variable>` or `ref <variable>` to construct\n+    /// a reference into the matched structure.\n+    ///\n+    /// If you are looking for a way to learn about ownership semantics in more detail, it\n+    /// is recommended to look at IDE options available to you to highlight types, lifetimes\n+    /// and reference semantics in your code. The available tooling would expose these things\n+    /// in a general way even outside of the various pattern matching mechanics. Of course\n+    /// this lint can still be used to highlight areas of interest and ensure a good understanding\n+    /// of ownership semantics.\n+    ///\n     /// **Why is this bad?** It isn't bad in general. But in some contexts it can be desirable\n     /// because it increases ownership hints in the code, and will guard against some changes\n     /// in ownership.\n@@ -22,6 +38,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     ///\n+    /// This example shows the basic adjustments necessary to satisfy the lint. Note how\n+    /// the matched expression is explicitly dereferenced with `*` and the `inner` variable\n+    /// is bound to a shared borrow via `ref inner`.\n+    ///\n     /// ```rust,ignore\n     /// // Bad\n     /// let value = &Some(Box::new(23));\n@@ -37,6 +57,25 @@ declare_clippy_lint! {\n     ///     None => println!(\"none\"),\n     /// }\n     /// ```\n+    ///\n+    /// The following example demonstrates one of the advantages of the more verbose style.\n+    /// Note how the second version uses `ref mut a` to explicitly declare `a` a shared mutable\n+    /// borrow, while `b` is simply taken by value. This ensures that the loop body cannot\n+    /// accidentally modify the wrong part of the structure.\n+    ///\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// let mut values = vec![(2, 3), (3, 4)];\n+    /// for (a, b) in &mut values {\n+    ///     *a += *b;\n+    /// }\n+    ///\n+    /// // Good\n+    /// let mut values = vec![(2, 3), (3, 4)];\n+    /// for &mut (ref mut a, b) in &mut values {\n+    ///     *a += b;\n+    /// }\n+    /// ```\n     pub PATTERN_TYPE_MISMATCH,\n     restriction,\n     \"type of pattern does not match the expression type\""}]}