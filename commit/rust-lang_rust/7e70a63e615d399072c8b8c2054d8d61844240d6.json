{"sha": "7e70a63e615d399072c8b8c2054d8d61844240d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzBhNjNlNjE1ZDM5OTA3MmM4YjhjMjA1NGQ4ZDYxODQ0MjQwZDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-01T23:37:47Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-27T18:38:32Z"}, "message": "Throw errors when doc comments are added where they're unused", "tree": {"sha": "76a4b583f95a93d982f11f668e08b8cccf837fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a4b583f95a93d982f11f668e08b8cccf837fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e70a63e615d399072c8b8c2054d8d61844240d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70a63e615d399072c8b8c2054d8d61844240d6", "html_url": "https://github.com/rust-lang/rust/commit/7e70a63e615d399072c8b8c2054d8d61844240d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e70a63e615d399072c8b8c2054d8d61844240d6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0565653eecd7d667dbb28bb5d3008e783950892a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0565653eecd7d667dbb28bb5d3008e783950892a", "html_url": "https://github.com/rust-lang/rust/commit/0565653eecd7d667dbb28bb5d3008e783950892a"}], "stats": {"total": 118, "additions": 111, "deletions": 7}, "files": [{"sha": "1b14caad3c83c0a5b0db044a78d7bb9e76855746", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -1679,7 +1679,7 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n-    /// An`extern crate` item, with optional original crate name,\n+    /// An `extern crate` item, with optional original crate name,\n     ///\n     /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ItemExternCrate(Option<Name>),"}, {"sha": "047f4b979d9841dc4a1c4889ac19d07f2870476b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -2131,14 +2131,14 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Ok(self.mk_expr(span, ExprKind::Tup(es), attrs))\n                 }\n-            },\n+            }\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(lo, BlockCheckMode::Default, attrs);\n-            },\n-            token::BinOp(token::Or) |  token::OrOr => {\n+            }\n+            token::BinOp(token::Or) | token::OrOr => {\n                 let lo = self.span;\n                 return self.parse_lambda_expr(lo, CaptureBy::Ref, attrs);\n-            },\n+            }\n             token::OpenDelim(token::Bracket) => {\n                 self.bump();\n \n@@ -2387,7 +2387,6 @@ impl<'a> Parser<'a> {\n     pub fn parse_block_expr(&mut self, lo: Span, blk_mode: BlockCheckMode,\n                             outer_attrs: ThinVec<Attribute>)\n                             -> PResult<'a, P<Expr>> {\n-\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n         let mut attrs = outer_attrs;\n@@ -2421,6 +2420,12 @@ impl<'a> Parser<'a> {\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n+                if if let Some(ref doc) = expr.attrs.iter().find(|x| x.is_sugared_doc) {\n+                    self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+                    true\n+                } else { false } {\n+                    return expr;\n+                }\n                 match expr.node {\n                     ExprKind::If(..) | ExprKind::IfLet(..) => {\n                         if !expr.attrs.is_empty() {\n@@ -3105,6 +3110,9 @@ impl<'a> Parser<'a> {\n \n     // `else` token already eaten\n     pub fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        if self.prev_token_kind == PrevTokenKind::DocComment {\n+            return Err(self.span_fatal_err(self.span, Error::UselessDocComment));\n+        }\n         if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr(ThinVec::new());\n         } else {\n@@ -3118,6 +3126,9 @@ impl<'a> Parser<'a> {\n                           span_lo: Span,\n                           mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n \n         let pat = self.parse_pat()?;\n         self.expect_keyword(keywords::In)?;\n@@ -3133,6 +3144,9 @@ impl<'a> Parser<'a> {\n     pub fn parse_while_expr(&mut self, opt_ident: Option<ast::SpannedIdent>,\n                             span_lo: Span,\n                             mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         if self.token.is_keyword(keywords::Let) {\n             return self.parse_while_let_expr(opt_ident, span_lo, attrs);\n         }\n@@ -3161,6 +3175,9 @@ impl<'a> Parser<'a> {\n     pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::SpannedIdent>,\n                            span_lo: Span,\n                            mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n@@ -3171,13 +3188,19 @@ impl<'a> Parser<'a> {\n     pub fn parse_catch_expr(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n         -> PResult<'a, P<Expr>>\n     {\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         Ok(self.mk_expr(span_lo.to(body.span), ExprKind::Catch(body), attrs))\n     }\n \n     // `match` token already eaten\n     fn parse_match_expr(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         let match_span = self.prev_span;\n         let lo = self.prev_span;\n         let discriminant = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL,\n@@ -3215,6 +3238,9 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtArm, |x| x);\n \n         let attrs = self.parse_outer_attributes()?;\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(keywords::If) {\n             Some(self.parse_expr()?)\n@@ -3669,6 +3695,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a local variable declaration\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n+        if let Some(doc) = attrs.iter().find(|x| x.is_sugared_doc) {\n+            self.span_fatal_err(doc.span, Error::UselessDocComment).emit();\n+        }\n         let lo = self.span;\n         let pat = self.parse_pat()?;\n \n@@ -4158,6 +4187,8 @@ impl<'a> Parser<'a> {\n                 stmts.push(stmt);\n             } else if self.token == token::Eof {\n                 break;\n+            } else if let token::DocComment(_) = self.token {\n+                return Err(self.span_fatal_err(self.span, Error::UselessDocComment));\n             } else {\n                 // Found only `;` or `}`.\n                 continue;"}, {"sha": "d406f59d0a2ce817b1e769e999456ec96963e3cc", "filename": "src/test/compile-fail/issue-34222.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fissue-34222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fissue-34222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34222.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -13,6 +13,6 @@\n \n #[rustc_error]\n fn main() { //~ ERROR compilation successful\n-    /// crash\n+    // crash\n     let x = 0;\n }"}, {"sha": "a32988aff12405dd7feeacf00c13b8f1e50e16a6", "filename": "src/test/compile-fail/useless_comment.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo3() -> i32 {\n+    let mut x = 12;\n+    /// z //~ ERROR E0585\n+    while x < 1 {\n+        /// x //~ ERROR E0585\n+        //~^ ERROR attributes on non-item statements and expressions are experimental\n+        x += 1;\n+    }\n+    /// d //~ ERROR E0585\n+    return x;\n+}\n+\n+fn main() {\n+    /// e //~ ERROR E0585\n+    foo3();\n+}"}, {"sha": "52ac7b6a76944e0e94353e5441e60fba420b6db1", "filename": "src/test/compile-fail/useless_comment2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment2.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() {\n+    /// a //~ ERROR E0585\n+    let x = 12;\n+\n+    /// b //~ ERROR E0585\n+    match x {\n+        /// c //~ ERROR E0585\n+        1 => {},\n+        _ => {}\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+}\n\\ No newline at end of file"}, {"sha": "c26031b5eb647df05cd0882b681a067de7fcc312", "filename": "src/test/compile-fail/useless_comment3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70a63e615d399072c8b8c2054d8d61844240d6/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment3.rs?ref=7e70a63e615d399072c8b8c2054d8d61844240d6", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() {\n+    let x = 13;\n+    /// x //~ ERROR E0585\n+    if x == 12 {\n+        /// y\n+        println!(\"hello\");\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+}"}]}