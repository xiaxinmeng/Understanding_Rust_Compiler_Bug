{"sha": "deedd2888175224b48b00eec4c74f0ab8625eb1e", "node_id": "C_kwDOAAsO6NoAKGRlZWRkMjg4ODE3NTIyNGI0OGIwMGVlYzRjNzRmMGFiODYyNWViMWU", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-08-05T00:11:36Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-08-05T00:46:32Z"}, "message": "Fix the mxcsr builtins", "tree": {"sha": "62d3b13b9a867f243105f779dda61a024bc7be5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62d3b13b9a867f243105f779dda61a024bc7be5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deedd2888175224b48b00eec4c74f0ab8625eb1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deedd2888175224b48b00eec4c74f0ab8625eb1e", "html_url": "https://github.com/rust-lang/rust/commit/deedd2888175224b48b00eec4c74f0ab8625eb1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deedd2888175224b48b00eec4c74f0ab8625eb1e/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a227994b5399d2ff236f116c4f62e10268ab1f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a227994b5399d2ff236f116c4f62e10268ab1f73", "html_url": "https://github.com/rust-lang/rust/commit/a227994b5399d2ff236f116c4f62e10268ab1f73"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "bcbaad39044dcee3148878153ed97825b29f1157", "filename": "src/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deedd2888175224b48b00eec4c74f0ab8625eb1e/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deedd2888175224b48b00eec4c74f0ab8625eb1e/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=deedd2888175224b48b00eec4c74f0ab8625eb1e", "patch": "@@ -279,6 +279,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         let gcc_func = func_ptr.get_type().dyncast_function_ptr_type().expect(\"function ptr\");\n         let func_name = format!(\"{:?}\", func_ptr);\n         let previous_arg_count = args.len();\n+        let orig_args = args;\n         let args = llvm::adjust_intrinsic_arguments(&self, gcc_func, args.into(), &func_name);\n         let args_adjusted = args.len() != previous_arg_count;\n         let args = self.check_ptr_call(\"call\", func_ptr, &*args);\n@@ -292,7 +293,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         if return_type != void_type {\n             unsafe { RETURN_VALUE_COUNT += 1 };\n             let return_value = self.cx.context.new_call_through_ptr(None, func_ptr, &args);\n-            let return_value = llvm::adjust_intrinsic_return_value(&self, return_value, &func_name, &args, args_adjusted);\n+            let return_value = llvm::adjust_intrinsic_return_value(&self, return_value, &func_name, &args, args_adjusted, orig_args);\n             let result = current_func.new_local(None, return_value.get_type(), &format!(\"ptrReturnValue{}\", unsafe { RETURN_VALUE_COUNT }));\n             self.block.add_assignment(None, result, return_value);\n             result.to_rvalue()"}, {"sha": "20f500e34e90a607d0c99eb8a709fee59a43fb35", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/deedd2888175224b48b00eec4c74f0ab8625eb1e/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deedd2888175224b48b00eec4c74f0ab8625eb1e/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=deedd2888175224b48b00eec4c74f0ab8625eb1e", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n \n use gccjit::{Function, FunctionPtrType, RValue, ToRValue, UnaryOp};\n+use rustc_codegen_ssa::traits::BuilderMethods;\n \n use crate::{context::CodegenCx, builder::Builder};\n \n@@ -277,14 +278,23 @@ pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc\n                 *arg3 = builder.context.new_unary_op(None, UnaryOp::Minus, arg3.get_type(), *arg3);\n                 args = new_args.into();\n             },\n+            \"__builtin_ia32_ldmxcsr\" => {\n+                // The builtin __builtin_ia32_ldmxcsr takes an integer value while llvm.x86.sse.ldmxcsr takes a pointer,\n+                // so dereference the pointer.\n+                let mut new_args = args.to_vec();\n+                let uint_ptr_type = builder.uint_type.make_pointer();\n+                let arg1 = builder.context.new_cast(None, args[0], uint_ptr_type);\n+                new_args[0] = arg1.dereference(None).to_rvalue();\n+                args = new_args.into();\n+            },\n             _ => (),\n         }\n     }\n \n     args\n }\n \n-pub fn adjust_intrinsic_return_value<'a, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc, 'tcx>, mut return_value: RValue<'gcc>, func_name: &str, args: &[RValue<'gcc>], args_adjusted: bool) -> RValue<'gcc> {\n+pub fn adjust_intrinsic_return_value<'a, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc, 'tcx>, mut return_value: RValue<'gcc>, func_name: &str, args: &[RValue<'gcc>], args_adjusted: bool, orig_args: &[RValue<'gcc>]) -> RValue<'gcc> {\n     match func_name {\n         \"__builtin_ia32_vfmaddss3_round\" | \"__builtin_ia32_vfmaddsd3_round\" => {\n             #[cfg(feature=\"master\")]\n@@ -306,6 +316,18 @@ pub fn adjust_intrinsic_return_value<'a, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc,\n                 return_value = builder.context.new_struct_constructor(None, struct_type.as_type(), None, &[return_value, last_arg.dereference(None).to_rvalue()]);\n             }\n         },\n+        \"__builtin_ia32_stmxcsr\" => {\n+            // The builtin __builtin_ia32_stmxcsr returns a value while llvm.x86.sse.stmxcsr writes\n+            // the result in its pointer argument.\n+            // We removed the argument since __builtin_ia32_stmxcsr takes no arguments, so we need\n+            // to get back the original argument to get the pointer we need to write the result to.\n+            let uint_ptr_type = builder.uint_type.make_pointer();\n+            let ptr = builder.context.new_cast(None, orig_args[0], uint_ptr_type);\n+            builder.llbb().add_assignment(None, ptr.dereference(None), return_value);\n+            // The return value was assigned to the result pointer above. In order to not call the\n+            // builtin twice, we overwrite the return value with a dummy value.\n+            return_value = builder.context.new_rvalue_zero(builder.int_type);\n+        },\n         _ => (),\n     }\n "}]}