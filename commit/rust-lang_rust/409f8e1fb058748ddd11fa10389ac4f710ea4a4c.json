{"sha": "409f8e1fb058748ddd11fa10389ac4f710ea4a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWY4ZTFmYjA1ODc0OGRkZDExZmExMDM4OWFjNGY3MTBlYTRhNGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-09T09:04:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-09T09:04:47Z"}, "message": "Remove hard-coded auto-import during completion\n\nWe now have a real auto-import system, so we can do a proper thing.", "tree": {"sha": "3ae0d0f473551933267ce2549f414d3ea81c4bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae0d0f473551933267ce2549f414d3ea81c4bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409f8e1fb058748ddd11fa10389ac4f710ea4a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409f8e1fb058748ddd11fa10389ac4f710ea4a4c", "html_url": "https://github.com/rust-lang/rust/commit/409f8e1fb058748ddd11fa10389ac4f710ea4a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409f8e1fb058748ddd11fa10389ac4f710ea4a4c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "html_url": "https://github.com/rust-lang/rust/commit/27964cc9e71519ce8e2e0f8bdac76869882f7d8a"}], "stats": {"total": 131, "additions": 3, "deletions": 128}, "files": [{"sha": "e2ee86dd15dd2c555d954834bdd2418f6881a10c", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 3, "deletions": 128, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/409f8e1fb058748ddd11fa10389ac4f710ea4a4c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f8e1fb058748ddd11fa10389ac4f710ea4a4c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=409f8e1fb058748ddd11fa10389ac4f710ea4a4c", "patch": "@@ -1,12 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_assists::insert_use_statement;\n-use ra_syntax::{ast, AstNode, SmolStr};\n-use ra_text_edit::TextEditBuilder;\n-use rustc_hash::FxHashMap;\n-\n-use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n-use hir::{ModPath, PathKind};\n+use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n@@ -16,133 +10,14 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     ctx.analyzer.process_all_names(ctx.db, &mut |name, res| {\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n-\n-    // auto-import\n-    // We fetch ident from the original file, because we need to pre-filter auto-imports\n-    if ast::NameRef::cast(ctx.token.parent()).is_some() {\n-        let import_resolver = ImportResolver::new();\n-        let import_names = import_resolver.all_names(ctx.token.text());\n-        import_names.into_iter().for_each(|(name, path)| {\n-            let edit = {\n-                let mut builder = TextEditBuilder::default();\n-                builder.replace(ctx.source_range(), name.to_string());\n-                insert_use_statement(&ctx.token.parent(), &ctx.token.parent(), &path, &mut builder);\n-                builder.finish()\n-            };\n-\n-            // Hack: copied this check form conv.rs beacause auto import can produce edits\n-            // that invalidate assert in conv_with.\n-            if edit\n-                .as_atoms()\n-                .iter()\n-                .filter(|atom| !ctx.source_range().is_subrange(&atom.delete))\n-                .all(|atom| ctx.source_range().intersection(&atom.delete).is_none())\n-            {\n-                CompletionItem::new(\n-                    CompletionKind::Reference,\n-                    ctx.source_range(),\n-                    build_import_label(&name, &path),\n-                )\n-                .text_edit(edit)\n-                .add_to(acc);\n-            }\n-        });\n-    }\n-}\n-\n-fn build_import_label(name: &str, path: &ModPath) -> String {\n-    let mut buf = String::with_capacity(64);\n-    buf.push_str(name);\n-    buf.push_str(\" (\");\n-    buf.push_str(&path.to_string());\n-    buf.push_str(\")\");\n-    buf\n-}\n-\n-#[derive(Debug, Clone, Default)]\n-pub(crate) struct ImportResolver {\n-    // todo: use fst crate or something like that\n-    dummy_names: Vec<(SmolStr, ModPath)>,\n-}\n-\n-impl ImportResolver {\n-    pub(crate) fn new() -> Self {\n-        use hir::name;\n-\n-        let dummy_names = vec![\n-            (\n-                SmolStr::new(\"fmt\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![fmt]] },\n-            ),\n-            (\n-                SmolStr::new(\"io\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![io]] },\n-            ),\n-            (\n-                SmolStr::new(\"iter\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![iter]] },\n-            ),\n-            (\n-                SmolStr::new(\"hash\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![hash]] },\n-            ),\n-            (\n-                SmolStr::new(\"Debug\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![name![std], name![fmt], name![Debug]],\n-                },\n-            ),\n-            (\n-                SmolStr::new(\"Display\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![name![std], name![fmt], name![Display]],\n-                },\n-            ),\n-            (\n-                SmolStr::new(\"Hash\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![name![std], name![hash], name![Hash]],\n-                },\n-            ),\n-            (\n-                SmolStr::new(\"Hasher\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![name![std], name![hash], name![Hasher]],\n-                },\n-            ),\n-            (\n-                SmolStr::new(\"Iterator\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![name![std], name![iter], name![Iterator]],\n-                },\n-            ),\n-        ];\n-\n-        ImportResolver { dummy_names }\n-    }\n-\n-    // Returns a map of importable items filtered by name.\n-    // The map associates item name with its full path.\n-    // todo: should return Resolutions\n-    pub(crate) fn all_names(&self, name: &str) -> FxHashMap<SmolStr, ModPath> {\n-        if name.len() > 1 {\n-            self.dummy_names.iter().filter(|(n, _)| n.contains(name)).cloned().collect()\n-        } else {\n-            FxHashMap::default()\n-        }\n-    }\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n \n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+\n     fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)\n     }"}]}