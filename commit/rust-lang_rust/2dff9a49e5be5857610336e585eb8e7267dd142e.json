{"sha": "2dff9a49e5be5857610336e585eb8e7267dd142e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZmY5YTQ5ZTViZTU4NTc2MTAzMzZlNTg1ZWI4ZTcyNjdkZDE0MmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T14:45:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:37Z"}, "message": "stop using the `closure_kinds` query / table for anything\n\nClosure Kind is now extracted from the closure substs exclusively.", "tree": {"sha": "420514091c98b9fdae3c2d8c2331a2178e669095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420514091c98b9fdae3c2d8c2331a2178e669095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dff9a49e5be5857610336e585eb8e7267dd142e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dff9a49e5be5857610336e585eb8e7267dd142e", "html_url": "https://github.com/rust-lang/rust/commit/2dff9a49e5be5857610336e585eb8e7267dd142e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dff9a49e5be5857610336e585eb8e7267dd142e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716f75b1b84e6f615b4ab80965dfa9a2fc566a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/716f75b1b84e6f615b4ab80965dfa9a2fc566a31", "html_url": "https://github.com/rust-lang/rust/commit/716f75b1b84e6f615b4ab80965dfa9a2fc566a31"}], "stats": {"total": 216, "additions": 107, "deletions": 109}, "files": [{"sha": "905e45bf9f03d6d4a0db90af39a898704ac03fc1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -1463,26 +1463,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         !traits::type_known_to_meet_bound(self, param_env, ty, copy_def_id, span)\n     }\n \n+    /// Obtains the latest type of the given closure; this may be a\n+    /// closure in the current function, in which case its\n+    /// `ClosureKind` may not yet be known.\n     pub fn closure_kind(&self,\n-                        def_id: DefId)\n+                        closure_def_id: DefId,\n+                        closure_substs: ty::ClosureSubsts<'tcx>)\n                         -> Option<ty::ClosureKind>\n     {\n-        if let Some(tables) = self.in_progress_tables {\n-            if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let hir_id = self.tcx.hir.node_to_hir_id(id);\n-                return tables.borrow()\n-                             .closure_kinds()\n-                             .get(hir_id)\n-                             .cloned()\n-                             .map(|(kind, _)| kind);\n-            }\n-        }\n-\n-        // During typeck, ALL closures are local. But afterwards,\n-        // during trans, we see closure ids from other traits.\n-        // That may require loading the closure data out of the\n-        // cstore.\n-        Some(self.tcx.closure_kind(def_id))\n+        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+        let closure_kind_ty = self.shallow_resolve(&closure_kind_ty);\n+        closure_kind_ty.to_opt_closure_kind()\n     }\n \n     /// Obtain the signature of a function or closure."}, {"sha": "a41a809307149f2c8e03dc14b81111b1c790b0c2", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -750,10 +750,19 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         let kind = match self.node_ty(fn_hir_id)?.sty {\n             ty::TyGenerator(..) => ty::ClosureKind::FnOnce,\n-            ty::TyClosure(..) => {\n-                match self.tables.closure_kinds().get(fn_hir_id) {\n-                    Some(&(kind, _)) => kind,\n-                    None => span_bug!(span, \"missing closure kind\"),\n+            ty::TyClosure(closure_def_id, closure_substs) => {\n+                match self.infcx {\n+                    // During upvar inference we may not know the\n+                    // closure kind, just use `Fn`.\n+                    Some(infcx) =>\n+                        infcx.closure_kind(closure_def_id, closure_substs)\n+                             .unwrap_or(ty::ClosureKind::Fn),\n+\n+                    None =>\n+                        self.tcx.global_tcx()\n+                                .lift(&closure_substs)\n+                                .expect(\"no inference cx, but inference variables in closure ty\")\n+                                .closure_kind(closure_def_id, self.tcx.global_tcx())\n                 }\n             }\n             ref t => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", t),"}, {"sha": "ccea981b78e04a94f32f6b69234225589da9a5e8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -643,8 +643,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                             violations)\n                     }\n \n-                    ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n-                        let found_kind = self.closure_kind(closure_def_id).unwrap();\n+                    ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n+                        let found_kind = self.closure_kind(closure_def_id, closure_substs).unwrap();\n                         let closure_span = self.tcx.hir.span_if_local(closure_def_id).unwrap();\n                         let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n                         let mut err = struct_span_err!("}, {"sha": "6b681322c9bf57f04d656589f0e4dbe16732986e", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -439,7 +439,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         }\n \n         ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n-            match closure_substs.opt_closure_kind(closure_def_id, selcx.tcx()) {\n+            match selcx.infcx().closure_kind(closure_def_id, closure_substs) {\n                 Some(closure_kind) => {\n                     if closure_kind.extends(kind) {\n                         Ok(Some(vec![]))"}, {"sha": "fba894d528e81ca019ca99bbd75a28fb2848dd45", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -719,7 +719,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n-                match closure_substs.opt_closure_kind(closure_def_id, self.tcx()) {\n+                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n                             EvaluatedToOk\n@@ -1593,10 +1593,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         match obligation.self_ty().skip_binder().sty {\n-            ty::TyClosure(closure_def_id, _) => {\n+            ty::TyClosure(closure_def_id, closure_substs) => {\n                 debug!(\"assemble_unboxed_candidates: kind={:?} obligation={:?}\",\n                        kind, obligation);\n-                match self.infcx.closure_kind(closure_def_id) {\n+                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n                     Some(closure_kind) => {\n                         debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                         if closure_kind.extends(kind) {"}, {"sha": "70636f8b6fe9b452dd627d49bb0fa1d4f297d8a5", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -189,7 +189,7 @@ fn resolve_closure<'a, 'tcx>(\n                    requested_kind: ty::ClosureKind)\n -> Instance<'tcx>\n {\n-    let actual_kind = tcx.closure_kind(def_id);\n+    let actual_kind = substs.closure_kind(def_id, tcx);\n \n     match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n         Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),"}, {"sha": "e20db5e38071d11dd50bb8db1a444315221f74f6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -290,26 +290,19 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         upvar_kinds.iter().map(|t| t.as_type().expect(\"upvar should be type\"))\n     }\n \n-    /// Returns the closure kind for this closure; may return `None`\n-    /// if inference has not yet completed.\n-    pub fn opt_closure_kind(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>)\n-                            -> Option<ty::ClosureKind> {\n-        let closure_kind_ty = self.closure_kind_ty(def_id, tcx);\n-        closure_kind_ty.to_opt_closure_kind()\n-    }\n-\n-    /// Returns the closure kind for this closure; may return `None`\n-    /// if inference has not yet completed.\n+    /// Returns the closure kind for this closure; may return a type\n+    /// variable during inference.\n     pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {\n     /// Returns the closure kind for this closure; only usable outside\n-    /// of an inference context.\n+    /// of an inference context, because in that context we know that\n+    /// there are no type variables.\n     pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> ty::ClosureKind {\n-        self.opt_closure_kind(def_id, tcx).unwrap()\n+        self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n }\n \n@@ -1514,6 +1507,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             TyInfer(_) => None,\n \n+            TyError => Some(ty::ClosureKind::Fn),\n+\n             _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n         }\n     }"}, {"sha": "c4966c012c70cb3c2725fc524ec01583f4c95a5b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -248,14 +248,18 @@ pub fn closure_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     let closure_expr_hir_id = tcx.hir.node_to_hir_id(closure_expr_id);\n     let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_hir_id);\n \n-    let closure_def_id = tcx.hir.local_def_id(closure_expr_id);\n+    let (closure_def_id, closure_substs) = match closure_ty.sty {\n+        ty::TyClosure(closure_def_id, closure_substs) => (closure_def_id, closure_substs),\n+        _ => bug!(\"closure expr does not have closure type: {:?}\", closure_ty)\n+    };\n+\n     let region = ty::ReFree(ty::FreeRegion {\n         scope: closure_def_id,\n         bound_region: ty::BoundRegion::BrEnv,\n     });\n     let region = tcx.mk_region(region);\n \n-    match tcx.closure_kind(closure_def_id) {\n+    match closure_substs.closure_kind_ty(closure_def_id, tcx).to_opt_closure_kind().unwrap() {\n         ty::ClosureKind::Fn =>\n             tcx.mk_ref(region,\n                        ty::TypeAndMut { ty: closure_ty,"}, {"sha": "7309b05d5a05ad3312c085392b12a3fcb718cbee", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -511,7 +511,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             let sig = tcx.fn_sig(def_id).subst(tcx, substs.substs);\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n-            let env_ty = match tcx.closure_kind(def_id) {\n+            let env_ty = match substs.closure_kind(def_id, tcx) {\n                 ty::ClosureKind::Fn => tcx.mk_imm_ref(tcx.mk_region(env_region), ty),\n                 ty::ClosureKind::FnMut => tcx.mk_mut_ref(tcx.mk_region(env_region), ty),\n                 ty::ClosureKind::FnOnce => ty,"}, {"sha": "1f8d273d8fbcd00caee6d19b8dd3ca2b0f252391", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -86,7 +86,7 @@ pub fn resolve_closure<'a, 'tcx> (\n     requested_kind: ty::ClosureKind)\n     -> Instance<'tcx>\n {\n-    let actual_kind = tcx.closure_kind(def_id);\n+    let actual_kind = substs.closure_kind(def_id, tcx);\n \n     match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n         Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),"}, {"sha": "8f409b687526bc1fdb872ec1f9774230567c2ae7", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // Check whether this is a call to a closure where we\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n-                if self.closure_kind(def_id).is_none() {\n+                if self.closure_kind(def_id, substs).is_none() {\n                     let closure_ty = self.fn_sig(def_id).subst(self.tcx, substs.substs);\n                     let fn_sig = self.replace_late_bound_regions_with_fresh_var(call_expr.span,\n                                                                    infer::FnCall,\n@@ -122,6 +122,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         adjustments,\n                         fn_sig,\n                         closure_def_id: def_id,\n+                        closure_substs: substs,\n                     });\n                     return Some(CallStep::DeferredClosure(fn_sig));\n                 }\n@@ -336,6 +337,7 @@ pub struct DeferredCallResolution<'gcx: 'tcx, 'tcx> {\n     adjustments: Vec<Adjustment<'tcx>>,\n     fn_sig: ty::FnSig<'tcx>,\n     closure_def_id: DefId,\n+    closure_substs: ty::ClosureSubsts<'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> DeferredCallResolution<'gcx, 'tcx> {\n@@ -344,7 +346,7 @@ impl<'a, 'gcx, 'tcx> DeferredCallResolution<'gcx, 'tcx> {\n \n         // we should not be invoked until the closure kind has been\n         // determined by upvar inference\n-        assert!(fcx.closure_kind(self.closure_def_id).is_some());\n+        assert!(fcx.closure_kind(self.closure_def_id, self.closure_substs).is_some());\n \n         // We may now know enough to figure out fn vs fnmut etc.\n         match fcx.try_overloaded_call_traits(self.call_expr,"}, {"sha": "5eda205c26d50c50e219b23a73a5af20d542a9f4", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -107,6 +107,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n         if let Some(interior) = interior {\n+            self.demand_eqtype(expr.span,\n+                               ty::ClosureKind::FnOnce.to_ty(self.tcx),\n+                               substs.closure_kind_ty(expr_def_id, self.tcx));\n             return self.tcx.mk_generator(expr_def_id, substs, interior);\n         }\n \n@@ -135,15 +138,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             opt_kind\n         );\n \n-        {\n-            let mut tables = self.tables.borrow_mut();\n-            tables.closure_tys_mut().insert(expr.hir_id, sig);\n-            match opt_kind {\n-                Some(kind) => {\n-                    tables.closure_kinds_mut().insert(expr.hir_id, (kind, None));\n-                }\n-                None => {}\n-            }\n+        self.tables.borrow_mut().closure_tys_mut().insert(expr.hir_id, sig);\n+        if let Some(kind) = opt_kind {\n+            self.tables.borrow_mut().closure_kinds_mut().insert(expr.hir_id, (kind, None));\n+            self.demand_eqtype(expr.span,\n+                               kind.to_ty(self.tcx),\n+                               substs.closure_kind_ty(expr_def_id, self.tcx));\n         }\n \n         closure_type"}, {"sha": "048f53f298806fb587603603341fd8e2af6c706b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 50, "deletions": 53, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -46,7 +46,6 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::TypeFoldable;\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -158,40 +157,58 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        {\n-            let body_owner_def_id = self.tcx.hir.body_owner_def_id(body.id());\n-            let region_scope_tree = &self.tcx.region_scope_tree(body_owner_def_id);\n-            let mut delegate = InferBorrowKind {\n-                fcx: self,\n-                adjust_closure_kinds: FxHashMap(),\n-                adjust_upvar_captures: ty::UpvarCaptureMap::default(),\n-            };\n-            euv::ExprUseVisitor::with_infer(\n-                &mut delegate,\n-                &self.infcx,\n-                self.param_env,\n-                region_scope_tree,\n-                &self.tables.borrow(),\n-            ).consume_body(body);\n-\n-            // Write the adjusted values back into the main tables.\n-            if infer_kind {\n-                if let Some(kind) = delegate\n-                    .adjust_closure_kinds\n-                    .remove(&closure_def_id.to_local())\n-                {\n-                    self.tables\n-                        .borrow_mut()\n-                        .closure_kinds_mut()\n-                        .insert(closure_hir_id, kind);\n-                }\n+        // Extract the type of the closure.\n+        let (def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n+            ty::TyClosure(def_id, substs) | ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n+            ref t => {\n+                span_bug!(\n+                    span,\n+                    \"type of closure expr {:?} is not a closure {:?}\",\n+                    closure_node_id,\n+                    t\n+                );\n+            }\n+        };\n+\n+        let body_owner_def_id = self.tcx.hir.body_owner_def_id(body.id());\n+        let region_scope_tree = &self.tcx.region_scope_tree(body_owner_def_id);\n+        let mut delegate = InferBorrowKind {\n+            fcx: self,\n+            adjust_closure_kinds: FxHashMap(),\n+            adjust_upvar_captures: ty::UpvarCaptureMap::default(),\n+        };\n+        euv::ExprUseVisitor::with_infer(\n+            &mut delegate,\n+            &self.infcx,\n+            self.param_env,\n+            region_scope_tree,\n+            &self.tables.borrow(),\n+        ).consume_body(body);\n+\n+        // Write the adjusted values back into the main tables.\n+        if infer_kind {\n+            let opt_adjusted = delegate.adjust_closure_kinds.remove(&closure_def_id.to_local());\n+            let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.tcx);\n+            if let Some((kind, origin)) = opt_adjusted {\n+                self.tables\n+                    .borrow_mut()\n+                    .closure_kinds_mut()\n+                    .insert(closure_hir_id, (kind, origin));\n+\n+                self.demand_eqtype(span, kind.to_ty(self.tcx), closure_kind_ty);\n+            } else {\n+                // If there are only reads, or no upvars, then the\n+                // default of `Fn` will never *have* to be adjusted, so there will be\n+                // no entry in the map.\n+                self.demand_eqtype(span, ty::ClosureKind::Fn.to_ty(self.tcx), closure_kind_ty);\n             }\n-            self.tables\n-                .borrow_mut()\n-                .upvar_capture_map\n-                .extend(delegate.adjust_upvar_captures);\n         }\n \n+        self.tables\n+            .borrow_mut()\n+            .upvar_capture_map\n+            .extend(delegate.adjust_upvar_captures);\n+\n         // Now that we've analyzed the closure, we know how each\n         // variable is borrowed, and we know what traits the closure\n         // implements (Fn vs FnMut etc). We now have some updates to do\n@@ -204,27 +221,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // C, then the type would have infinite size (and the\n         // inference algorithm will reject it).\n \n-        // Extract the type variables UV0...UVn.\n-        let (def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n-            ty::TyClosure(def_id, substs) | ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n-            ref t => {\n-                span_bug!(\n-                    span,\n-                    \"type of closure expr {:?} is not a closure {:?}\",\n-                    closure_node_id,\n-                    t\n-                );\n-            }\n-        };\n-\n-        // Equate the type variable representing the closure kind.\n-        let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.tcx);\n-        if closure_kind_ty.needs_infer() {\n-            let final_closure_kind = self.tables.borrow().closure_kinds()[closure_hir_id].0;\n-            self.demand_eqtype(span, final_closure_kind.to_ty(self.tcx), closure_kind_ty);\n-        }\n-\n-        // Equate the type variables with the actual types.\n+        // Equate the type variables for the upvars with the actual types.\n         let final_upvar_tys = self.final_upvar_tys(closure_node_id);\n         debug!(\n             \"analyze_closure: id={:?} closure_substs={:?} final_upvar_tys={:?}\","}, {"sha": "1c534ebbd4350df425263279749196d4de581255", "filename": "src/test/compile-fail/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dff9a49e5be5857610336e585eb8e7267dd142e/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs?ref=2dff9a49e5be5857610336e585eb8e7267dd142e", "patch": "@@ -19,7 +19,6 @@ struct A (B);\n \n impl A {\n     pub fn matches<F: Fn()>(&self, f: &F) {\n-        //~^ ERROR reached the recursion limit while instantiating `A::matches::<[closure\n         let &A(ref term) = self;\n         term.matches(f);\n     }\n@@ -59,6 +58,7 @@ struct D (Box<A>);\n \n impl D {\n     pub fn matches<F: Fn()>(&self, f: &F) {\n+        //~^ ERROR reached the type-length limit while instantiating `D::matches::<[closure\n         let &D(ref a) = self;\n         a.matches(f)\n     }"}]}