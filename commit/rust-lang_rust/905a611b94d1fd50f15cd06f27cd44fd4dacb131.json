{"sha": "905a611b94d1fd50f15cd06f27cd44fd4dacb131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNWE2MTFiOTRkMWZkNTBmMTVjZDA2ZjI3Y2Q0NGZkNGRhY2IxMzE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-11T19:58:01Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-11T19:58:01Z"}, "message": "Switch to a specific feature", "tree": {"sha": "d6afe2713779741d006498e3a732137b95811932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6afe2713779741d006498e3a732137b95811932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/905a611b94d1fd50f15cd06f27cd44fd4dacb131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/905a611b94d1fd50f15cd06f27cd44fd4dacb131", "html_url": "https://github.com/rust-lang/rust/commit/905a611b94d1fd50f15cd06f27cd44fd4dacb131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/905a611b94d1fd50f15cd06f27cd44fd4dacb131/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4181d43c4b05c55a53a6d52f94723bc58de0b7ab", "html_url": "https://github.com/rust-lang/rust/commit/4181d43c4b05c55a53a6d52f94723bc58de0b7ab"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "07f029cc15e2f219172350e7a6c15484f32271df", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/905a611b94d1fd50f15cd06f27cd44fd4dacb131/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905a611b94d1fd50f15cd06f27cd44fd4dacb131/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=905a611b94d1fd50f15cd06f27cd44fd4dacb131", "patch": "@@ -72,7 +72,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n \n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn field(mut self, name: &str, value: &fmt::Debug) -> DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n@@ -95,7 +95,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n \n     /// Consumes the `DebugStruct`, finishing output and returning any error\n     /// encountered.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn finish(mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n@@ -135,7 +135,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n \n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn field(mut self, value: &fmt::Debug) -> DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.has_fields {\n@@ -158,7 +158,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n \n     /// Consumes the `DebugTuple`, finishing output and returning any error\n     /// encountered.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn finish(mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n@@ -198,7 +198,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n@@ -221,8 +221,8 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n \n     /// Consumes the `DebugSet`, finishing output and returning any error\n     /// encountered.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn finish(self) -> fmt::Result {\n         self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\",\n@@ -259,7 +259,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> Deb\n \n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n@@ -283,8 +283,8 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n \n     /// Consumes the `DebugMap`, finishing output and returning any error\n     /// encountered.\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn finish(self) -> fmt::Result {\n         self.result.and_then(|_| {\n             let end = match (self.has_fields, self.is_pretty()) {\n                 (false, _) => \"}\","}, {"sha": "536bce0d05f0ba0781ab2b093e0ecac1fb199a14", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/905a611b94d1fd50f15cd06f27cd44fd4dacb131/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905a611b94d1fd50f15cd06f27cd44fd4dacb131/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=905a611b94d1fd50f15cd06f27cd44fd4dacb131", "patch": "@@ -23,6 +23,7 @@\n #![feature(hash)]\n #![feature(io)]\n #![feature(collections)]\n+#![feature(debug_builders)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}]}