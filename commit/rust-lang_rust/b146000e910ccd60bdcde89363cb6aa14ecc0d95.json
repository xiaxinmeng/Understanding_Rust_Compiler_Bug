{"sha": "b146000e910ccd60bdcde89363cb6aa14ecc0d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDYwMDBlOTEwY2NkNjBiZGNkZTg5MzYzY2I2YWExNGVjYzBkOTU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-08T00:07:07Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-08T01:26:12Z"}, "message": "EXTREMELY hacky fix\n\nThis runs _just_ enough of typeck that later queries don't panic.\nBecause this is in the same part of the compiler that errors on `impl\nTrait`, this special-cases impl Trait for rustdoc and no one else.\nEverything is fine.", "tree": {"sha": "7aa4c164df16a23932fef59d1b5367136ce08143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa4c164df16a23932fef59d1b5367136ce08143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b146000e910ccd60bdcde89363cb6aa14ecc0d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b146000e910ccd60bdcde89363cb6aa14ecc0d95", "html_url": "https://github.com/rust-lang/rust/commit/b146000e910ccd60bdcde89363cb6aa14ecc0d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b146000e910ccd60bdcde89363cb6aa14ecc0d95/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5be70ea4c3ec4544cdeb80e3138832e15815f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5be70ea4c3ec4544cdeb80e3138832e15815f9", "html_url": "https://github.com/rust-lang/rust/commit/0f5be70ea4c3ec4544cdeb80e3138832e15815f9"}], "stats": {"total": 89, "additions": 64, "deletions": 25}, "files": [{"sha": "1f418fe7f7ff2b0eba7de343c9b9648bd27deee7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -787,9 +787,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     // FIXME: This is some serious pessimization intended to workaround deficiencies\n                     // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n                     // reachable if they are returned via `impl Trait`, even from private functions.\n-                    let exist_level = cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));\n+                    let exist_level =\n+                        cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));\n                     self.reach(item.hir_id, exist_level).generics().predicates().ty();\n-\n                 }\n             }\n             // Visit everything."}, {"sha": "9169b5aa58a1faf2f57ad8ec42b94257c6221f6f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -1967,10 +1967,16 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             check_union(tcx, it.hir_id, it.span);\n         }\n         hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-            let def_id = tcx.hir().local_def_id(it.hir_id);\n-\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            check_opaque(tcx, def_id, substs, it.span, &origin);\n+            // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n+            // `async-std` (and `pub async fn` in general).\n+            // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n+            // See https://github.com/rust-lang/rust/issues/75100\n+            if !tcx.sess.opts.actually_rustdoc {\n+                let def_id = tcx.hir().local_def_id(it.hir_id);\n+\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                check_opaque(tcx, def_id, substs, it.span, &origin);\n+            }\n         }\n         hir::ItemKind::TyAlias(..) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);"}, {"sha": "bea0f1e1f08454c26b559773e59d5646d00d6fae", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -356,6 +356,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n         tcx.sess.time(\"wf_checking\", || check::check_wf_new(tcx));\n     })?;\n \n+    // NOTE: This is copy/pasted in librustdoc/core.rs and should be kept in sync.\n     tcx.sess.time(\"item_types_checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n             tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));"}, {"sha": "b13acaae1bf234048cfd2858a33a01312808486d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -449,6 +449,23 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n             global_ctxt.enter(|tcx| {\n+                // Certain queries assume that some checks were run elsewhere\n+                // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n+                // so type-check everything other than function bodies in this crate before running lints.\n+\n+                // NOTE: this does not call `tcx.analysis()` so that we won't\n+                // typeck function bodies or run the default rustc lints.\n+                // (see `override_queries` in the `config`)\n+\n+                // HACK(jynelson) this calls an _extremely_ limited subset of `typeck`\n+                // and might break if queries change their assumptions in the future.\n+\n+                // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n+                tcx.sess.time(\"item_types_checking\", || {\n+                    for &module in tcx.hir().krate().modules.keys() {\n+                        tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+                    }\n+                });\n                 tcx.sess.abort_if_errors();\n                 sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);"}, {"sha": "b3a7ee563130edd75c29a96d36163fdfcb8952b7", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -0,0 +1,7 @@\n+fn f() -> impl Sized {\n+    enum E {\n+    //~^ ERROR recursive type `f::E` has infinite size\n+        V(E),\n+    }\n+    unimplemented!()\n+}"}, {"sha": "ec1bb786fe5adcaf46461055161cba3cfbdde2e1", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `f::E` has infinite size\n+  --> $DIR/infinite-recursive-type-impl-trait.rs:2:5\n+   |\n+LL |     enum E {\n+   |     ^^^^^^ recursive type has infinite size\n+LL |\n+LL |         V(E),\n+   |           - recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `f::E` representable\n+   |\n+LL |         V(Box<E>),\n+   |           ^^^^ ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "897445f200cb701d57d6a70e45454e1aa09179b8", "filename": "src/test/rustdoc-ui/infinite-recursive-type.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr?ref=b146000e910ccd60bdcde89363cb6aa14ecc0d95", "patch": "@@ -1,26 +1,17 @@\n-error: internal compiler error[E0391]: cycle detected when computing `Sized` constraints for `E`\n+error[E0072]: recursive type `E` has infinite size\n   --> $DIR/infinite-recursive-type.rs:1:1\n    |\n LL | enum E {\n-   | ^^^^^^\n+   | ^^^^^^ recursive type has infinite size\n+LL |\n+LL |     V(E),\n+   |       - recursive without indirection\n    |\n-   = note: ...which again requires computing `Sized` constraints for `E`, completing the cycle\n-   = note: cycle used when evaluating trait selection obligation `E: std::convert::From<E>`\n-\n-error: internal compiler error: TyKind::Error constructed but no error reported\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E` representable\n    |\n-   = note: delayed at /home/joshua/rustc/src/librustc_session/session.rs:436:27\n-\n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:366:17\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-\n-error: internal compiler error: unexpected panic\n-\n-note: the compiler unexpectedly panicked. this is a bug.\n-\n-note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n-\n-note: rustc 1.47.0-dev running on x86_64-unknown-linux-gnu\n+LL |     V(Box<E>),\n+   |       ^^^^ ^\n \n-note: compiler flags: -Z threads=1 -Z ui-testing -Z deduplicate-diagnostics=no -Z unstable-options -C debuginfo=0\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0072`."}]}