{"sha": "545b92f46d98bf5c812343315025bfb92f37837f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NWI5MmY0NmQ5OGJmNWM4MTIzNDMzMTUwMjViZmI5MmYzNzgzN2Y=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-28T15:25:09Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:43:14Z"}, "message": "Avoid printing output when in dry run mode", "tree": {"sha": "921c05bb91a5f0c83f05bd4d17783c4eb0df94fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/921c05bb91a5f0c83f05bd4d17783c4eb0df94fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545b92f46d98bf5c812343315025bfb92f37837f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545b92f46d98bf5c812343315025bfb92f37837f", "html_url": "https://github.com/rust-lang/rust/commit/545b92f46d98bf5c812343315025bfb92f37837f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545b92f46d98bf5c812343315025bfb92f37837f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a727447f5927ac0a186af4504f8a11014f42b1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a727447f5927ac0a186af4504f8a11014f42b1da", "html_url": "https://github.com/rust-lang/rust/commit/a727447f5927ac0a186af4504f8a11014f42b1da"}], "stats": {"total": 199, "additions": 105, "deletions": 94}, "files": [{"sha": "da57881202d17af8b09a92210d2edb3eb1c82ef5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -77,7 +77,7 @@ impl Step for Std {\n                 compiler: from,\n                 target,\n             });\n-            println!(\"Uplifting stage1 std ({} -> {})\", from.host, target);\n+            builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", from.host, target));\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the musl startup objects.\n@@ -105,8 +105,8 @@ impl Step for Std {\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n-        println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n-                &compiler.host, target);\n+        build.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n+                &compiler.host, target));\n         run_cargo(build,\n                   &mut cargo,\n                   &libstd_stamp(build, compiler, target),\n@@ -213,12 +213,12 @@ impl Step for StdLink {\n         let compiler = self.compiler;\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n-        println!(\"Copying stage{} std from stage{} ({} -> {} / {})\",\n+        build.info(&format!(\"Copying stage{} std from stage{} ({} -> {} / {})\",\n                 target_compiler.stage,\n                 compiler.stage,\n                 &compiler.host,\n                 target_compiler.host,\n-                target);\n+                target));\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         add_to_sysroot(&build, &libdir, &libstd_stamp(build, compiler, target));\n \n@@ -352,7 +352,7 @@ impl Step for Test {\n                 compiler: builder.compiler(1, build.build),\n                 target,\n             });\n-            println!(\"Uplifting stage1 test ({} -> {})\", &build.build, target);\n+            build.info(&format!(\"Uplifting stage1 test ({} -> {})\", &build.build, target));\n             builder.ensure(TestLink {\n                 compiler: builder.compiler(1, build.build),\n                 target_compiler: compiler,\n@@ -367,8 +367,8 @@ impl Step for Test {\n         test_cargo(build, &compiler, target, &mut cargo);\n \n         let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n-        println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n-                &compiler.host, target);\n+        build.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n+                &compiler.host, target));\n         run_cargo(build,\n                   &mut cargo,\n                   &libtest_stamp(build, compiler, target),\n@@ -414,12 +414,12 @@ impl Step for TestLink {\n         let compiler = self.compiler;\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n-        println!(\"Copying stage{} test from stage{} ({} -> {} / {})\",\n+        build.info(&format!(\"Copying stage{} test from stage{} ({} -> {} / {})\",\n                 target_compiler.stage,\n                 compiler.stage,\n                 &compiler.host,\n                 target_compiler.host,\n-                target);\n+                target));\n         add_to_sysroot(&build, &builder.sysroot_libdir(target_compiler, target),\n                     &libtest_stamp(build, compiler, target));\n         builder.ensure(tool::CleanTools {\n@@ -469,7 +469,7 @@ impl Step for Rustc {\n                 compiler: builder.compiler(1, build.build),\n                 target,\n             });\n-            println!(\"Uplifting stage1 rustc ({} -> {})\", &build.build, target);\n+            build.info(&format!(\"Uplifting stage1 rustc ({} -> {})\", &build.build, target));\n             builder.ensure(RustcLink {\n                 compiler: builder.compiler(1, build.build),\n                 target_compiler: compiler,\n@@ -491,8 +491,8 @@ impl Step for Rustc {\n         rustc_cargo(build, &mut cargo);\n \n         let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n-        println!(\"Building stage{} compiler artifacts ({} -> {})\",\n-                 compiler.stage, &compiler.host, target);\n+        build.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n+                 compiler.stage, &compiler.host, target));\n         run_cargo(build,\n                   &mut cargo,\n                   &librustc_stamp(build, compiler, target),\n@@ -569,12 +569,12 @@ impl Step for RustcLink {\n         let compiler = self.compiler;\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n-        println!(\"Copying stage{} rustc from stage{} ({} -> {} / {})\",\n+        build.info(&format!(\"Copying stage{} rustc from stage{} ({} -> {} / {})\",\n                  target_compiler.stage,\n                  compiler.stage,\n                  &compiler.host,\n                  target_compiler.host,\n-                 target);\n+                 target));\n         add_to_sysroot(&build, &builder.sysroot_libdir(target_compiler, target),\n                        &librustc_stamp(build, compiler, target));\n         builder.ensure(tool::CleanTools {\n@@ -648,8 +648,8 @@ impl Step for CodegenBackend {\n                     features.push_str(\" emscripten\");\n                 }\n \n-                println!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n-                         compiler.stage, &compiler.host, target, self.backend);\n+                build.info(&format!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n+                         compiler.stage, &compiler.host, target, self.backend));\n \n                 // Pass down configuration from the LLVM build into the build of\n                 // librustc_llvm and librustc_trans.\n@@ -933,7 +933,7 @@ impl Step for Assemble {\n \n         let stage = target_compiler.stage;\n         let host = target_compiler.host;\n-        println!(\"Assembling stage{} compiler ({})\", stage, host);\n+        build.info(&format!(\"Assembling stage{} compiler ({})\", stage, host));\n \n         // Link in all dylibs to the libdir\n         let sysroot = builder.sysroot(target_compiler);\n@@ -1186,7 +1186,7 @@ pub fn stream_cargo(\n     // Make sure Cargo actually succeeded after we read all of its stdout.\n     let status = t!(child.wait());\n     if !status.success() {\n-        println!(\"command did not execute successfully: {:?}\\n\\\n+        eprintln!(\"command did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\",\n                  cargo,\n                  status);"}, {"sha": "774f4e6e8bf2579cfe484bde6afa3a910fcd31da", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -89,9 +89,9 @@ impl Step for Docs {\n \n         let name = pkgname(build, \"rust-docs\");\n \n-        println!(\"Dist docs ({})\", host);\n+        build.info(&format!(\"Dist docs ({})\", host));\n         if !build.config.docs {\n-            println!(\"\\tskipping - docs disabled\");\n+            build.info(&format!(\"\\tskipping - docs disabled\"));\n             return distdir(build).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -152,9 +152,9 @@ impl Step for RustcDocs {\n \n         let name = pkgname(build, \"rustc-docs\");\n \n-        println!(\"Dist compiler docs ({})\", host);\n+        build.info(&format!(\"Dist compiler docs ({})\", host));\n         if !build.config.compiler_docs {\n-            println!(\"\\tskipping - compiler docs disabled\");\n+            build.info(&format!(\"\\tskipping - compiler docs disabled\"));\n             return distdir(build).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -343,7 +343,7 @@ impl Step for Mingw {\n             return None;\n         }\n \n-        println!(\"Dist mingw ({})\", host);\n+        build.info(&format!(\"Dist mingw ({})\", host));\n         let name = pkgname(build, \"rust-mingw\");\n         let image = tmpdir(build).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -398,7 +398,7 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        println!(\"Dist rustc stage{} ({})\", compiler.stage, compiler.host);\n+        build.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, compiler.host));\n         let name = pkgname(build, \"rustc\");\n         let image = tmpdir(build).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -627,12 +627,12 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(build, \"rust-std\");\n-        println!(\"Dist std stage{} ({} -> {})\", compiler.stage, &compiler.host, target);\n+        build.info(&format!(\"Dist std stage{} ({} -> {})\", compiler.stage, &compiler.host, target));\n \n         // The only true set of target libraries came from the build triple, so\n         // let's reduce redundant work by only producing archives from that host.\n         if compiler.host != build.build {\n-            println!(\"\\tskipping, not a build host\");\n+            build.info(&format!(\"\\tskipping, not a build host\"));\n             return distdir(build).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -704,11 +704,11 @@ impl Step for Analysis {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(build.config.extended);\n-        println!(\"Dist analysis\");\n+        build.info(&format!(\"Dist analysis\"));\n         let name = pkgname(build, \"rust-analysis\");\n \n         if &compiler.host != build.build {\n-            println!(\"\\tskipping, not a build host\");\n+            build.info(&format!(\"\\tskipping, not a build host\"));\n             return distdir(build).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -730,7 +730,7 @@ impl Step for Analysis {\n         let image_src = src.join(\"save-analysis\");\n         let dst = image.join(\"lib/rustlib\").join(target).join(\"analysis\");\n         t!(fs::create_dir_all(&dst));\n-        println!(\"image_src: {:?}, dst: {:?}\", image_src, dst);\n+        build.info(&format!(\"image_src: {:?}, dst: {:?}\", image_src, dst));\n         build.cp_r(&image_src, &dst);\n \n         let mut cmd = rust_installer(builder);\n@@ -813,7 +813,7 @@ impl Step for Src {\n     /// Creates the `rust-src` installer component\n     fn run(self, builder: &Builder) -> PathBuf {\n         let build = builder.build;\n-        println!(\"Dist src\");\n+        build.info(&format!(\"Dist src\"));\n \n         let name = pkgname(build, \"rust-src\");\n         let image = tmpdir(build).join(format!(\"{}-image\", name));\n@@ -908,7 +908,7 @@ impl Step for PlainSourceTarball {\n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder) -> PathBuf {\n         let build = builder.build;\n-        println!(\"Create plain source tarball\");\n+        build.info(&format!(\"Create plain source tarball\"));\n \n         // Make sure that the root folder of tarball has the correct name\n         let plain_name = format!(\"{}-src\", pkgname(build, \"rustc\"));\n@@ -985,7 +985,7 @@ impl Step for PlainSourceTarball {\n         if let Some(dir) = tarball.parent() {\n             build.create_dir(&dir);\n         }\n-        println!(\"running installer\");\n+        build.info(&format!(\"running installer\"));\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"tarball\")\n            .arg(\"--input\").arg(&plain_name)\n@@ -1042,7 +1042,7 @@ impl Step for Cargo {\n         let stage = self.stage;\n         let target = self.target;\n \n-        println!(\"Dist cargo stage{} ({})\", stage, target);\n+        build.info(&format!(\"Dist cargo stage{} ({})\", stage, target));\n         let src = build.src.join(\"src/tools/cargo\");\n         let etc = src.join(\"src/etc\");\n         let release_num = build.release_num(\"cargo\");\n@@ -1130,7 +1130,7 @@ impl Step for Rls {\n         let target = self.target;\n         assert!(build.config.extended);\n \n-        println!(\"Dist RLS stage{} ({})\", stage, target);\n+        build.info(&format!(\"Dist RLS stage{} ({})\", stage, target));\n         let src = build.src.join(\"src/tools/rls\");\n         let release_num = build.release_num(\"rls\");\n         let name = pkgname(build, \"rls\");\n@@ -1210,7 +1210,7 @@ impl Step for Rustfmt {\n         let stage = self.stage;\n         let target = self.target;\n \n-        println!(\"Dist Rustfmt stage{} ({})\", stage, target);\n+        build.info(&format!(\"Dist Rustfmt stage{} ({})\", stage, target));\n         let src = build.src.join(\"src/tools/rustfmt\");\n         let release_num = build.release_num(\"rustfmt\");\n         let name = pkgname(build, \"rustfmt\");\n@@ -1297,7 +1297,7 @@ impl Step for Extended {\n         let stage = self.stage;\n         let target = self.target;\n \n-        println!(\"Dist extended stage{} ({})\", stage, target);\n+        build.info(&format!(\"Dist extended stage{} ({})\", stage, target));\n \n         let rustc_installer = builder.ensure(Rustc {\n             compiler: builder.compiler(stage, target),"}, {"sha": "f07c3e707574b4e4a051fc6e9b1f9e0950b82917", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -169,7 +169,7 @@ impl Step for CargoBook {\n \n         let out = out.join(name);\n \n-        println!(\"Cargo Book ({}) - {}\", target, name);\n+        build.info(&format!(\"Cargo Book ({}) - {}\", target, name));\n \n         let _ = fs::remove_dir_all(&out);\n \n@@ -215,7 +215,7 @@ impl Step for RustbookSrc {\n         if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n             return\n         }\n-        println!(\"Rustbook ({}) - {}\", target, name);\n+        build.info(&format!(\"Rustbook ({}) - {}\", target, name));\n         let _ = fs::remove_dir_all(&out);\n         build.run(rustbook_cmd\n                        .arg(\"build\")\n@@ -283,11 +283,11 @@ impl Step for TheBook {\n \n         // build the index page\n         let index = format!(\"{}/index.md\", name);\n-        println!(\"Documenting book index ({})\", target);\n+        build.info(&format!(\"Documenting book index ({})\", target));\n         invoke_rustdoc(builder, compiler, target, &index);\n \n         // build the redirect pages\n-        println!(\"Documenting book redirect pages ({})\", target);\n+        build.info(&format!(\"Documenting book redirect pages ({})\", target));\n         for file in t!(fs::read_dir(build.src.join(\"src/doc/book/redirects\"))) {\n             let file = t!(file);\n             let path = file.path();\n@@ -360,7 +360,7 @@ impl Step for Standalone {\n         let build = builder.build;\n         let target = self.target;\n         let compiler = self.compiler;\n-        println!(\"Documenting standalone ({})\", target);\n+        build.info(&format!(\"Documenting standalone ({})\", target));\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n@@ -451,7 +451,7 @@ impl Step for Std {\n         let build = builder.build;\n         let stage = self.stage;\n         let target = self.target;\n-        println!(\"Documenting stage{} std ({})\", stage, target);\n+        build.info(&format!(\"Documenting stage{} std ({})\", stage, target));\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n@@ -532,7 +532,7 @@ impl Step for Test {\n         let build = builder.build;\n         let stage = self.stage;\n         let target = self.target;\n-        println!(\"Documenting stage{} test ({})\", stage, target);\n+        build.info(&format!(\"Documenting stage{} test ({})\", stage, target));\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n@@ -598,7 +598,7 @@ impl Step for WhitelistedRustc {\n         let build = builder.build;\n         let stage = self.stage;\n         let target = self.target;\n-        println!(\"Documenting stage{} whitelisted compiler ({})\", stage, target);\n+        build.info(&format!(\"Documenting stage{} whitelisted compiler ({})\", stage, target));\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n@@ -670,7 +670,7 @@ impl Step for Rustc {\n         let build = builder.build;\n         let stage = self.stage;\n         let target = self.target;\n-        println!(\"Documenting stage{} compiler ({})\", stage, target);\n+        build.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n         let out = build.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n@@ -682,7 +682,7 @@ impl Step for Rustc {\n         };\n \n         if !build.config.compiler_docs {\n-            println!(\"\\tskipping - compiler docs disabled\");\n+            build.info(&format!(\"\\tskipping - compiler docs disabled\"));\n             return;\n         }\n \n@@ -761,7 +761,7 @@ impl Step for ErrorIndex {\n         let build = builder.build;\n         let target = self.target;\n \n-        println!(\"Documenting error index ({})\", target);\n+        build.info(&format!(\"Documenting error index ({})\", target));\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let mut index = builder.tool_cmd(Tool::ErrorIndex);\n@@ -806,7 +806,7 @@ impl Step for UnstableBookGen {\n             target,\n         });\n \n-        println!(\"Generating unstable book md files ({})\", target);\n+        build.info(&format!(\"Generating unstable book md files ({})\", target));\n         let out = build.md_doc_out(target).join(\"unstable-book\");\n         build.create_dir(&out);\n         build.remove_dir(&out);"}, {"sha": "4b05cac1ce6979123e0637c5169c9dd2a4b9dff4", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -63,7 +63,7 @@ fn install_sh(\n     host: Option<Interned<String>>\n ) {\n     let build = builder.build;\n-    println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+    build.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n \n     let prefix_default = PathBuf::from(\"/usr/local\");\n     let sysconfdir_default = PathBuf::from(\"/etc\");\n@@ -212,15 +212,16 @@ install!((self, builder, _config),\n             Self::should_install(builder) {\n             install_rls(builder, self.stage, self.target);\n         } else {\n-            println!(\"skipping Install RLS stage{} ({})\", self.stage, self.target);\n+            builder.info(&format!(\"skipping Install RLS stage{} ({})\", self.stage, self.target));\n         }\n     };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n             install_rustfmt(builder, self.stage, self.target);\n         } else {\n-            println!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target);\n+            builder.info(\n+                &format!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target));\n         }\n     };\n     Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {"}, {"sha": "c677d78d07b1fce6aabf235a6d83c766ae06c3e5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -667,6 +667,11 @@ impl Build {\n         }\n     }\n \n+    fn info(&self, msg: &str) {\n+        if self.config.dry_run { return; }\n+        println!(\"{}\", msg);\n+    }\n+\n     /// Returns the number of parallel jobs that have been configured for this\n     /// build.\n     fn jobs(&self) -> u32 {\n@@ -974,7 +979,7 @@ impl Build {\n     pub fn fold_output<D, F>(&self, name: F) -> Option<OutputFolder>\n         where D: Into<String>, F: FnOnce() -> D\n     {\n-        if self.ci_env == CiEnv::Travis {\n+        if !self.config.dry_run && self.ci_env == CiEnv::Travis {\n             Some(OutputFolder::new(name().into()))\n         } else {\n             None"}, {"sha": "c92d5c6f7ca497420163ed58a6a7fc375014112b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -106,8 +106,8 @@ impl Step for Llvm {\n \n         let _folder = build.fold_output(|| \"llvm\");\n         let descriptor = if emscripten { \"Emscripten \" } else { \"\" };\n-        println!(\"Building {}LLVM for {}\", descriptor, target);\n-        let _time = util::timeit();\n+        build.info(&format!(\"Building {}LLVM for {}\", descriptor, target));\n+        let _time = util::timeit(&build);\n         t!(fs::create_dir_all(&out_dir));\n \n         // http://llvm.org/docs/CMake.html\n@@ -359,8 +359,8 @@ impl Step for Lld {\n         }\n \n         let _folder = build.fold_output(|| \"lld\");\n-        println!(\"Building LLD for {}\", target);\n-        let _time = util::timeit();\n+        build.info(&format!(\"Building LLD for {}\", target));\n+        let _time = util::timeit(&build);\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cmake::Config::new(build.src.join(\"src/tools/lld\"));\n@@ -409,7 +409,7 @@ impl Step for TestHelpers {\n         }\n \n         let _folder = build.fold_output(|| \"build_test_helpers\");\n-        println!(\"Building test helpers\");\n+        build.info(&format!(\"Building test helpers\"));\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();\n \n@@ -605,11 +605,11 @@ impl Step for Openssl {\n             configure.arg(\"no-asm\");\n         }\n         configure.current_dir(&obj);\n-        println!(\"Configuring openssl for {}\", target);\n+        build.info(&format!(\"Configuring openssl for {}\", target));\n         build.run_quiet(&mut configure);\n-        println!(\"Building openssl for {}\", target);\n+        build.info(&format!(\"Building openssl for {}\", target));\n         build.run_quiet(Command::new(\"make\").arg(\"-j1\").current_dir(&obj));\n-        println!(\"Installing openssl for {}\", target);\n+        build.info(&format!(\"Installing openssl for {}\", target));\n         build.run_quiet(Command::new(\"make\").arg(\"install\").arg(\"-j1\").current_dir(&obj));\n \n         let mut f = t!(File::create(&stamp));"}, {"sha": "39740a83b0d0a804d267fa33eb7fbfc948a94e3c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -109,11 +109,11 @@ impl Step for Linkcheck {\n         let build = builder.build;\n         let host = self.host;\n \n-        println!(\"Linkcheck ({})\", host);\n+        build.info(&format!(\"Linkcheck ({})\", host));\n \n         builder.default_doc(None);\n \n-        let _time = util::timeit();\n+        let _time = util::timeit(&build);\n         try_run(build, builder.tool_cmd(Tool::Linkchecker)\n                               .arg(build.out.join(host).join(\"doc\")));\n     }\n@@ -164,7 +164,7 @@ impl Step for Cargotest {\n         let out_dir = build.out.join(\"ct\");\n         t!(fs::create_dir_all(&out_dir));\n \n-        let _time = util::timeit();\n+        let _time = util::timeit(&build);\n         let mut cmd = builder.tool_cmd(Tool::CargoTest);\n         try_run(build, cmd.arg(&build.initial_cargo)\n                           .arg(&out_dir)\n@@ -509,7 +509,7 @@ impl Step for RustdocJS {\n             });\n             builder.run(&mut command);\n         } else {\n-            println!(\"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\");\n+            builder.info(&format!(\"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\"));\n         }\n     }\n }\n@@ -541,7 +541,7 @@ impl Step for Tidy {\n         }\n \n         let _folder = build.fold_output(|| \"tidy\");\n-        println!(\"tidy check\");\n+        builder.info(&format!(\"tidy check\"));\n         try_run(build, &mut cmd);\n     }\n \n@@ -948,7 +948,8 @@ impl Step for Compiletest {\n             }\n         }\n         if suite == \"run-make-fulldeps\" && !build.config.llvm_enabled {\n-            println!(\"Ignoring run-make test suite as they generally don't work without LLVM\");\n+            builder.info(\n+                &format!(\"Ignoring run-make test suite as they generally don't work without LLVM\"));\n             return;\n         }\n \n@@ -1002,9 +1003,9 @@ impl Step for Compiletest {\n         build.ci_env.force_coloring_in_ci(&mut cmd);\n \n         let _folder = build.fold_output(|| format!(\"test_{}\", suite));\n-        println!(\"Check compiletest suite={} mode={} ({} -> {})\",\n-                 suite, mode, &compiler.host, target);\n-        let _time = util::timeit();\n+        builder.info(&format!(\"Check compiletest suite={} mode={} ({} -> {})\",\n+                 suite, mode, &compiler.host, target));\n+        let _time = util::timeit(&build);\n         try_run(build, &mut cmd);\n     }\n }\n@@ -1039,7 +1040,7 @@ impl Step for DocTest {\n         // Do a breadth-first traversal of the `src/doc` directory and just run\n         // tests for all files that end in `*.md`\n         let mut stack = vec![build.src.join(self.path)];\n-        let _time = util::timeit();\n+        let _time = util::timeit(&build);\n         let _folder = build.fold_output(|| format!(\"test_{}\", self.name));\n \n         let mut files = Vec::new();\n@@ -1167,8 +1168,8 @@ impl Step for ErrorIndex {\n \n \n         let _folder = build.fold_output(|| \"test_error_index\");\n-        println!(\"Testing error-index stage{}\", compiler.stage);\n-        let _time = util::timeit();\n+        build.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n+        let _time = util::timeit(&build);\n         build.run(&mut tool);\n         markdown_test(builder, compiler, &output);\n     }\n@@ -1183,7 +1184,7 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) -> bool\n         return true;\n     }\n \n-    println!(\"doc tests for: {}\", markdown.display());\n+    build.info(&format!(\"doc tests for: {}\", markdown.display()));\n     let mut cmd = builder.rustdoc_cmd(compiler.host);\n     build.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n@@ -1453,8 +1454,8 @@ impl Step for Crate {\n             // The javascript shim implements the syscall interface so that test\n             // output can be correctly reported.\n             if !build.config.wasm_syscall {\n-                println!(\"Libstd was built without `wasm_syscall` feature enabled: \\\n-                          test output may not be visible.\");\n+                build.info(&format!(\"Libstd was built without `wasm_syscall` feature enabled: \\\n+                          test output may not be visible.\"));\n             }\n \n             // On the wasm32-unknown-unknown target we're using LTO which is\n@@ -1476,9 +1477,9 @@ impl Step for Crate {\n         let _folder = build.fold_output(|| {\n             format!(\"{}_stage{}-{}\", test_kind.subcommand(), compiler.stage, krate)\n         });\n-        println!(\"{} {} stage{} ({} -> {})\", test_kind, krate, compiler.stage,\n-                &compiler.host, target);\n-        let _time = util::timeit();\n+        build.info(&format!(\"{} {} stage{} ({} -> {})\", test_kind, krate, compiler.stage,\n+                &compiler.host, target));\n+        let _time = util::timeit(&build);\n         try_run(build, &mut cargo);\n     }\n }\n@@ -1543,9 +1544,9 @@ impl Step for CrateRustdoc {\n         let _folder = build.fold_output(|| {\n             format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage)\n         });\n-        println!(\"{} rustdoc stage{} ({} -> {})\", test_kind, compiler.stage,\n-                &compiler.host, target);\n-        let _time = util::timeit();\n+        build.info(&format!(\"{} rustdoc stage{} ({} -> {})\", test_kind, compiler.stage,\n+                &compiler.host, target));\n+        let _time = util::timeit(&build);\n \n         try_run(build, &mut cargo);\n     }\n@@ -1592,7 +1593,7 @@ impl Step for RemoteCopyLibs {\n \n         builder.ensure(compile::Test { compiler, target });\n \n-        println!(\"REMOTE copy libs to emulator ({})\", target);\n+        build.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n         t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n         let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n@@ -1640,7 +1641,7 @@ impl Step for Distcheck {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n \n-        println!(\"Distcheck\");\n+        build.info(&format!(\"Distcheck\"));\n         let dir = build.out.join(\"tmp\").join(\"distcheck\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));\n@@ -1664,7 +1665,7 @@ impl Step for Distcheck {\n                          .current_dir(&dir));\n \n         // Now make sure that rust-src has all of libstd's dependencies\n-        println!(\"Distcheck rust-src\");\n+        build.info(&format!(\"Distcheck rust-src\"));\n         let dir = build.out.join(\"tmp\").join(\"distcheck-src\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));"}, {"sha": "93b6153fcb2f8c58c2758f3a6284e54e5867df83", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -116,7 +116,7 @@ impl Step for ToolBuild {\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n         let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n-        println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n+        build.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(build, &mut cargo, &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n@@ -427,7 +427,8 @@ impl Step for Rustdoc {\n              .env(\"RUSTC_DEBUGINFO_LINES\", builder.config.rust_debuginfo_lines.to_string());\n \n         let _folder = build.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n-        println!(\"Building rustdoc for stage{} ({})\", target_compiler.stage, target_compiler.host);\n+        build.info(&format!(\"Building rustdoc for stage{} ({})\",\n+            target_compiler.stage, target_compiler.host));\n         build.run(&mut cargo);\n \n         // Cargo adds a number of paths to the dylib search path on windows, which results in"}, {"sha": "f8c7032369890b8472a66083dee9ae9b467d6abe", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b92f46d98bf5c812343315025bfb92f37837f/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=545b92f46d98bf5c812343315025bfb92f37837f", "patch": "@@ -22,6 +22,7 @@ use std::process::Command;\n use std::time::{SystemTime, Instant};\n \n use config::Config;\n+use Build;\n \n /// Returns the `name` as the filename of a static library for `target`.\n pub fn staticlib(name: &str, target: &str) -> String {\n@@ -100,19 +101,21 @@ pub fn push_exe_path(mut buf: PathBuf, components: &[&str]) -> PathBuf {\n     buf\n }\n \n-pub struct TimeIt(Instant);\n+pub struct TimeIt(bool, Instant);\n \n /// Returns an RAII structure that prints out how long it took to drop.\n-pub fn timeit() -> TimeIt {\n-    TimeIt(Instant::now())\n+pub fn timeit(build: &Build) -> TimeIt {\n+    TimeIt(build.config.dry_run, Instant::now())\n }\n \n impl Drop for TimeIt {\n     fn drop(&mut self) {\n-        let time = self.0.elapsed();\n-        println!(\"\\tfinished in {}.{:03}\",\n-                 time.as_secs(),\n-                 time.subsec_nanos() / 1_000_000);\n+        let time = self.1.elapsed();\n+        if !self.0 {\n+            println!(\"\\tfinished in {}.{:03}\",\n+                    time.as_secs(),\n+                    time.subsec_nanos() / 1_000_000);\n+        }\n     }\n }\n "}]}