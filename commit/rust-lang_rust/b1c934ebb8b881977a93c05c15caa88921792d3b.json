{"sha": "b1c934ebb8b881977a93c05c15caa88921792d3b", "node_id": "C_kwDOAAsO6NoAKGIxYzkzNGViYjhiODgxOTc3YTkzYzA1YzE1Y2FhODg5MjE3OTJkM2I", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T05:13:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T06:32:42Z"}, "message": "Remove unnecessary sigils around `Ident::as_str()` calls.", "tree": {"sha": "181fbc5557c36965dedd37bb2931a06e6deb8647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181fbc5557c36965dedd37bb2931a06e6deb8647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c934ebb8b881977a93c05c15caa88921792d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c934ebb8b881977a93c05c15caa88921792d3b", "html_url": "https://github.com/rust-lang/rust/commit/b1c934ebb8b881977a93c05c15caa88921792d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c934ebb8b881977a93c05c15caa88921792d3b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056d48a2c97860b2cce936f310331e606076fa01", "url": "https://api.github.com/repos/rust-lang/rust/commits/056d48a2c97860b2cce936f310331e606076fa01", "html_url": "https://github.com/rust-lang/rust/commit/056d48a2c97860b2cce936f310331e606076fa01"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "3c3ea2bfd3591fa3dee9beab824508882c1c8fb4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -580,8 +580,7 @@ impl<'a> AstValidator<'a> {\n \n     /// An item in `extern { ... }` cannot use non-ascii identifier.\n     fn check_foreign_item_ascii_only(&self, ident: Ident) {\n-        let symbol_str = ident.as_str();\n-        if !symbol_str.is_ascii() {\n+        if !ident.as_str().is_ascii() {\n             let n = 83942;\n             self.err_handler()\n                 .struct_span_err("}, {"sha": "ff9d90128f7d0897f339486c6f18c2eed552d4ce", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -1922,7 +1922,7 @@ enum VariantInfo<'a, 'tcx> {\n impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n-            VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n+            VariantInfo::Adt(variant) => f(variant.ident.as_str()),\n             VariantInfo::Generator { variant_index, .. } => {\n                 f(&GeneratorSubsts::variant_name(*variant_index))\n             }"}, {"sha": "e9532dbe2cecad601031d8dfa21ee888ad4ee817", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -103,10 +103,10 @@ crate fn mod_dir_path(\n             if let DirOwnership::Owned { relative } = &mut dir_ownership {\n                 if let Some(ident) = relative.take() {\n                     // Remove the relative offset.\n-                    dir_path.push(&*ident.as_str());\n+                    dir_path.push(ident.as_str());\n                 }\n             }\n-            dir_path.push(&*ident.as_str());\n+            dir_path.push(ident.as_str());\n \n             (dir_path, dir_ownership)\n         }"}, {"sha": "0028f8a79466eba1a4a9dd75c7aa83e459fef14a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -2444,7 +2444,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             CtorKind::Fictive => {\n                                 let mut struct_fmt = fmt.debug_struct(&name);\n                                 for (field, place) in iter::zip(&variant_def.fields, places) {\n-                                    struct_fmt.field(&field.ident.as_str(), place);\n+                                    struct_fmt.field(field.ident.as_str(), place);\n                                 }\n                                 struct_fmt.finish()\n                             }"}, {"sha": "babfa8015af6c359f7b93addc9d16261e47d69c9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -1185,7 +1185,7 @@ impl<'a> Resolver<'a> {\n                 (\"\", \" from prelude\")\n             } else if b.is_extern_crate()\n                 && !b.is_import()\n-                && self.session.opts.externs.get(&ident.as_str()).is_some()\n+                && self.session.opts.externs.get(ident.as_str()).is_some()\n             {\n                 (\"\", \" passed with `--extern`\")\n             } else if add_built_in {"}, {"sha": "f765e7bf1c0265bd2374a83e3479edb9f9ae49b0", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -231,7 +231,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         let is_assoc_fn = self.self_type_is_available(span);\n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n-        if [\"this\", \"my\"].contains(&&*item_str.as_str()) && is_assoc_fn {\n+        if [\"this\", \"my\"].contains(&item_str.as_str()) && is_assoc_fn {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n@@ -1372,7 +1372,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn likely_rust_type(path: &[Segment]) -> Option<Symbol> {\n         let name = path[path.len() - 1].ident.as_str();\n         // Common Java types\n-        Some(match &*name {\n+        Some(match name {\n             \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n             \"short\" => sym::i16,\n             \"boolean\" => sym::bool,"}, {"sha": "52685ec697ce8a8ca53545a3ce7150d4b38143f0", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -105,7 +105,7 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n                 path_str.push_str(\"::\");\n             }\n             if segment.ident.name != kw::PathRoot {\n-                path_str.push_str(&segment.ident.as_str())\n+                path_str.push_str(segment.ident.as_str())\n             }\n         }\n         Symbol::intern(&path_str)"}, {"sha": "2d805f6836e67327cea313d5b9caeab3d960ce48", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -616,7 +616,7 @@ impl<'hir> Sig for hir::Generics<'hir> {\n             if let hir::GenericParamKind::Const { .. } = param.kind {\n                 param_text.push_str(\"const \");\n             }\n-            param_text.push_str(&param.name.ident().as_str());\n+            param_text.push_str(param.name.ident().as_str());\n             defs.push(SigElement {\n                 id: id_from_hir_id(param.hir_id, scx),\n                 start: offset + text.len(),"}, {"sha": "a4ae70003160bd24c31853af41c06fc69b74cc1c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -560,7 +560,7 @@ impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                     ty::ExistentialPredicate::Projection(projection) => {\n                         let name = cx.tcx.associated_item(projection.item_def_id).ident;\n                         cx.push(\"p\");\n-                        cx.push_ident(&name.as_str());\n+                        cx.push_ident(name.as_str());\n                         cx = projection.ty.print(cx)?;\n                     }\n                     ty::ExistentialPredicate::AutoTrait(def_id) => {"}, {"sha": "5615a08369dffc9af3c4921be94303065b6e3e3a", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -1908,7 +1908,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        let dist = lev_distance(&*name.as_str(), &x.ident.as_str());\n+                        let dist = lev_distance(name.as_str(), x.ident.as_str());\n                         x.kind.namespace() == Namespace::ValueNS && dist > 0 && dist <= max_dist\n                     })\n                     .copied()"}, {"sha": "7d1ee932b96863e7c3bd6ce3ea13a241ec29e3e8", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -167,7 +167,7 @@ crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n             s.push_str(\"::\");\n         }\n         if seg.ident.name != kw::PathRoot {\n-            s.push_str(&seg.ident.as_str());\n+            s.push_str(seg.ident.as_str());\n         }\n     }\n     s"}, {"sha": "98ba8b12256562733b41e8d2bab6a63adc9da338", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -21,7 +21,7 @@ declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n \n impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n-        match &*it.ident.as_str() {\n+        match it.ident.as_str() {\n             \"lintme\" => cx.lint(TEST_LINT, |lint| {\n                 lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n             }),"}, {"sha": "50dd0d84fda518f0d3d4663c694187f8e0d55128", "filename": "src/tools/clippy/clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n             if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n-                let suggested_fn = match (method_path.ident.as_str().as_ref(), divisor) {\n+                let suggested_fn = match (method_path.ident.as_str(), divisor) {\n                     (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n                     (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n                     _ => return,"}, {"sha": "f21ec9a876ff4be2ec455305ea44a0e2c5ef1f51", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -599,7 +599,7 @@ fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>\n             return method_name_a.as_str() == method_name_b.as_str() &&\n                 args_a.len() == args_b.len() &&\n                 (\n-                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    [\"ln\", \"log2\", \"log10\"].contains(&method_name_a.as_str()) ||\n                     method_name_a.as_str() == \"log\" && args_a.len() == 2 && eq_expr_value(cx, &args_a[1], &args_b[1])\n                 );\n         }"}, {"sha": "b03445b8cd6b08df5008424ec994f9e15a46266f", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -659,7 +659,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n-        let method_name = &*method.ident.as_str();\n+        let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),"}, {"sha": "dbf103143d93cc7dc3f4e76cd3e1712d44aa9844", "filename": "src/tools/clippy/clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::MethodCall(segment, _, [receiver], _)\n-                if self.case_altered(&*segment.ident.as_str(), receiver) => {},\n+                if self.case_altered(segment.ident.as_str(), receiver) => {},\n             _ => walk_expr(self, ex),\n         }\n     }"}, {"sha": "4ca1b3f01671c9e6f51b32f30dc44e9b3028374a", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -1127,7 +1127,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             if let CommonPrefixSearcher::Path(path_prefix) = path_prefix {\n                 let mut s = String::new();\n                 for seg in path_prefix {\n-                    s.push_str(&seg.ident.as_str());\n+                    s.push_str(seg.ident.as_str());\n                     s.push_str(\"::\");\n                 }\n                 s"}, {"sha": "4307cbf00507a1fcb130f83793770af35a4c334d", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -81,7 +81,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n         if args.is_empty();\n         if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n-            match &*segment.ident.as_str() {\n+            match segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),\n                 \"min_value\" => return Some(MinMax::Min),\n                 _ => {}"}, {"sha": "f2d84381887999c75bf33e70c1169826c23e5ebb", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -1999,8 +1999,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 from_iter_instead_of_collect::check(cx, expr, args, func);\n             },\n             hir::ExprKind::MethodCall(method_call, ref method_span, args, _) => {\n-                or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n-                expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n+                or_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n+                expect_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n                 clone_on_copy::check(cx, expr, method_call.ident.name, args);\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);"}, {"sha": "e57f5f6f6ed8af206ec0d7567449fdabe07f1837", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -140,7 +140,7 @@ fn parse_iter_usage(\n             let did = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n             let iter_id = cx.tcx.get_diagnostic_item(sym::Iterator)?;\n \n-            match (&*name.ident.as_str(), args) {\n+            match (name.ident.as_str(), args) {\n                 (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                     if reverse {\n                         (IterUsageKind::Second, e.span)\n@@ -298,7 +298,7 @@ fn check_iter(\n                 if let Some(did) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n                 if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 then {\n-                    match (&*name.ident.as_str(), args) {\n+                    match (name.ident.as_str(), args) {\n                         (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                             return true;\n                         },"}, {"sha": "22834cf61ee038224db9e08d897bd65d67a7e14d", "filename": "src/tools/clippy/clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n+                check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),\n         }"}, {"sha": "0931fec149ebfe557ec6edef687b93671e981cc0", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n             if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n-            if symbol==\"as_deref\" || symbol==\"as_deref_mut\";\n+            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n             if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n             then{\n                 span_lint_and_sugg("}, {"sha": "1b9285c2298df7f48e5ae9f9fe1da0a942a1c7df", "filename": "src/tools/clippy/clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -82,7 +82,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                 _ => Argument::Unknown,\n             };\n \n-            match &*path.ident.as_str() {\n+            match path.ident.as_str() {\n                 \"create\" => {\n                     options.push((OpenOption::Create, argument_option));\n                 },"}, {"sha": "398e2c200de3ca777db90fcf9295a8c06217f6a8", "filename": "src/tools/clippy/clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n                     let mut seen_str = None;\n                     let mut seen_string = None;\n                     for item in items {\n-                        match &*item.ident.as_str() {\n+                        match item.ident.as_str() {\n                             \"visit_str\" => seen_str = Some(item.span),\n                             \"visit_string\" => seen_string = Some(item.span),\n                             _ => {},"}, {"sha": "f930fc9c55ba248e6200abca60f9766d5895749d", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_map_error(cx, arg_0, expr);\n                 },\n@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     let mut call = call;\n     while let hir::ExprKind::MethodCall(path, _, args, _) = call.kind {\n-        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+        if matches!(path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n             call = &args[0];\n         } else {\n             break;\n@@ -82,7 +82,7 @@ fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<\n \n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n-        let symbol = &*path.ident.as_str();\n+        let symbol = path.ident.as_str();\n         let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n         let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);\n "}, {"sha": "01a5691223bfc6ef4db924e6424432aa37970eb2", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -158,7 +158,7 @@ fn collect_unwrap_info<'tcx>(\n             if let Some(local_id) = path_to_local(&args[0]);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n-            if is_relevant_option_call(cx, ty, &name) || is_relevant_result_call(cx, ty, &name);\n+            if is_relevant_option_call(cx, ty, name) || is_relevant_result_call(cx, ty, name);\n             then {\n                 assert!(args.len() == 1);\n                 let unwrappable = match name.as_ref() {"}, {"sha": "0c62161e53d437372e120404b5862f8aa03f4d73", "filename": "src/tools/clippy/clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -79,7 +79,7 @@ fn correct_ident(ident: &str) -> String {\n \n fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n-    let ident = &ident.as_str();\n+    let ident = ident.as_str();\n     let corrected = correct_ident(ident);\n     // warn if we have pure-uppercase idents\n     // assume that two-letter words are some kind of valid abbreviation like FP for false positive"}, {"sha": "abd8a3623703b2f14ea8232a8e9eaa0fc69d128c", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if is_trait_method(cx, e, sym::Into) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {"}, {"sha": "b7dd6b06ff8276adfdec82a2d58641606b229941", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -616,10 +616,10 @@ impl<'a> FmtVisitor<'a> {\n                 (TyAlias(lty), TyAlias(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n                 (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n@@ -1029,7 +1029,7 @@ pub(crate) fn format_trait(\n         if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n-                .span_after(item.span, &item.ident.as_str());\n+                .span_after(item.span, item.ident.as_str());\n             let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {"}, {"sha": "9d438a80d942f8aca16f74f7412a01e23ca1d11e", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -467,10 +467,10 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n-                    self.directory.path.push(&*ident.as_str());\n+                    self.directory.path.push(ident.as_str());\n                 }\n             }\n-            self.directory.path.push(&*id.as_str());\n+            self.directory.path.push(id.as_str());\n         }\n     }\n "}, {"sha": "13bfc92507d0a9d5d676cc0c50874f6923d16c95", "filename": "src/tools/rustfmt/src/reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c934ebb8b881977a93c05c15caa88921792d3b/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs?ref=b1c934ebb8b881977a93c05c15caa88921792d3b", "patch": "@@ -26,7 +26,7 @@ use crate::visitor::FmtVisitor;\n fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.kind, &b.kind) {\n         (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n-            a.ident.as_str().cmp(&b.ident.as_str())\n+            a.ident.as_str().cmp(b.ident.as_str())\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n@@ -44,7 +44,7 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n+                (Some(..), Some(..)) => a.ident.as_str().cmp(b.ident.as_str()),\n             }\n         }\n         _ => unreachable!(),"}]}