{"sha": "77030b7825796461f10ee5dd774caa46ad09c64a", "node_id": "C_kwDOAAsO6NoAKDc3MDMwYjc4MjU3OTY0NjFmMTBlZTVkZDc3NGNhYTQ2YWQwOWM2NGE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-10T15:09:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-10T15:09:31Z"}, "message": "Rollup merge of #96717 - BoxyUwU:gats_const_param_types_mismatch_err, r=lcnr\n\nHandle mismatched generic param kinds in trait impls betterly\n\n- Check that generic params on a generic associated type are the same as in the trait definition\n- Check that const generics are not used in place of type generics (and the other way round too)\n\nr? `@lcnr`", "tree": {"sha": "c4a71c0ae51752fc956c59013aecbca08c022bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4a71c0ae51752fc956c59013aecbca08c022bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77030b7825796461f10ee5dd774caa46ad09c64a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJieoArCRBK7hj4Ov3rIwAASToIACNu3P4NuymPPO61c1HXvyLe\n0f5jZUrqWYNwqw11OSUbvz8usz5OOcFL6luj2ZgJvbRuSB0P7/FPjwueRggeG6GK\n79mwSPtDQzM6F9eA/C39lLWiKQr/tWmlzErJMGhXke/e8tORLaRnbZPKcAuZI1qG\n3OslPwkMNpxWnnp76BMwgSbYIdCYcRE3T0f65QDEveFnYpQCRiPvVX34qV5q1DQH\nvObOE4YenzV123zzXgdPAcoJsCLkt4wmj6N7pVs1x+55ksHeQ+8pEva4dBkTzrlb\n/cKPxZ9NANl9wZvCUnV2ZoN6tLxhSHOvnqKOHhkNlL/l070l3PVMoL8+unHD3EU=\n=VsW5\n-----END PGP SIGNATURE-----\n", "payload": "tree c4a71c0ae51752fc956c59013aecbca08c022bc7\nparent c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3\nparent e4b8ed5aff7d25aa21c4c4d6bba8850c6dcaaaac\nauthor Yuki Okushi <jtitor@2k36.org> 1652195371 +0900\ncommitter GitHub <noreply@github.com> 1652195371 +0900\n\nRollup merge of #96717 - BoxyUwU:gats_const_param_types_mismatch_err, r=lcnr\n\nHandle mismatched generic param kinds in trait impls betterly\n\n- Check that generic params on a generic associated type are the same as in the trait definition\n- Check that const generics are not used in place of type generics (and the other way round too)\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77030b7825796461f10ee5dd774caa46ad09c64a", "html_url": "https://github.com/rust-lang/rust/commit/77030b7825796461f10ee5dd774caa46ad09c64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77030b7825796461f10ee5dd774caa46ad09c64a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3", "html_url": "https://github.com/rust-lang/rust/commit/c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3"}, {"sha": "e4b8ed5aff7d25aa21c4c4d6bba8850c6dcaaaac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b8ed5aff7d25aa21c4c4d6bba8850c6dcaaaac", "html_url": "https://github.com/rust-lang/rust/commit/e4b8ed5aff7d25aa21c4c4d6bba8850c6dcaaaac"}], "stats": {"total": 334, "additions": 268, "deletions": 66}, "files": [{"sha": "a83924d4636c59f4f57791c2eb4107591a0dccf4", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 116, "deletions": 51, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -7,10 +7,10 @@ use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::util;\n-use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -48,6 +48,10 @@ crate fn compare_impl_method<'tcx>(\n         return;\n     }\n \n+    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m) {\n+        return;\n+    }\n+\n     if let Err(_) =\n         compare_number_of_method_arguments(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n@@ -62,10 +66,6 @@ crate fn compare_impl_method<'tcx>(\n     {\n         return;\n     }\n-\n-    if let Err(_) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n-        return;\n-    }\n }\n \n fn compare_predicate_entailment<'tcx>(\n@@ -579,6 +579,27 @@ fn compare_self_type<'tcx>(\n     Ok(())\n }\n \n+/// Checks that the number of generics on a given assoc item in a trait impl is the same\n+/// as the number of generics on the respective assoc item in the trait definition.\n+///\n+/// For example this code emits the errors in the following code:\n+/// ```\n+/// trait Trait {\n+///     fn foo();\n+///     type Assoc<T>;\n+/// }\n+///\n+/// impl Trait for () {\n+///     fn foo<T>() {}\n+///     //~^ error\n+///     type Assoc = u32;\n+///     //~^ error\n+/// }\n+/// ```\n+///\n+/// Notably this does not error on `foo<T>` implemented as `foo<const N: u8>` or\n+/// `foo<const N: u8>` implemented as `foo<const N: u32>`. This is handled in\n+/// [`compare_generic_param_kinds`]. This function also does not handle lifetime parameters\n fn compare_number_of_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_: &ty::AssocItem,\n@@ -589,6 +610,15 @@ fn compare_number_of_generics<'tcx>(\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n     let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n \n+    // This avoids us erroring on `foo<T>` implemented as `foo<const N: u8>` as this is implemented\n+    // in `compare_generic_param_kinds` which will give a nicer error message than something like:\n+    // \"expected 1 type parameter, found 0 type parameters\"\n+    if (trait_own_counts.types + trait_own_counts.consts)\n+        == (impl_own_counts.types + impl_own_counts.consts)\n+    {\n+        return Ok(());\n+    }\n+\n     let matchings = [\n         (\"type\", trait_own_counts.types, impl_own_counts.types),\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),\n@@ -914,60 +944,93 @@ fn compare_synthetic_generics<'tcx>(\n     if let Some(reported) = error_found { Err(reported) } else { Ok(()) }\n }\n \n-fn compare_const_param_types<'tcx>(\n+/// Checks that all parameters in the generics of a given assoc item in a trait impl have\n+/// the same kind as the respective generic parameter in the trait def.\n+///\n+/// For example all 4 errors in the following code are emitted here:\n+/// ```\n+/// trait Foo {\n+///     fn foo<const N: u8>();\n+///     type bar<const N: u8>;\n+///     fn baz<const N: u32>();\n+///     type blah<T>;\n+/// }\n+///\n+/// impl Foo for () {\n+///     fn foo<const N: u64>() {}\n+///     //~^ error\n+///     type bar<const N: u64> {}\n+///     //~^ error\n+///     fn baz<T>() {}\n+///     //~^ error\n+///     type blah<const N: i64> = u32;\n+///     //~^ error\n+/// }\n+/// ```\n+///\n+/// This function does not handle lifetime parameters\n+fn compare_generic_param_kinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_m: &ty::AssocItem,\n-    trait_m: &ty::AssocItem,\n-    trait_item_span: Option<Span>,\n+    impl_item: &ty::AssocItem,\n+    trait_item: &ty::AssocItem,\n ) -> Result<(), ErrorGuaranteed> {\n-    let const_params_of = |def_id| {\n-        tcx.generics_of(def_id).params.iter().filter_map(|param| match param.kind {\n-            GenericParamDefKind::Const { .. } => Some(param.def_id),\n-            _ => None,\n+    assert_eq!(impl_item.kind, trait_item.kind);\n+\n+    let ty_const_params_of = |def_id| {\n+        tcx.generics_of(def_id).params.iter().filter(|param| {\n+            matches!(\n+                param.kind,\n+                GenericParamDefKind::Const { .. } | GenericParamDefKind::Type { .. }\n+            )\n         })\n     };\n-    let const_params_impl = const_params_of(impl_m.def_id);\n-    let const_params_trait = const_params_of(trait_m.def_id);\n-\n-    for (const_param_impl, const_param_trait) in iter::zip(const_params_impl, const_params_trait) {\n-        let impl_ty = tcx.type_of(const_param_impl);\n-        let trait_ty = tcx.type_of(const_param_trait);\n-        if impl_ty != trait_ty {\n-            let (impl_span, impl_ident) = match tcx.hir().get_if_local(const_param_impl) {\n-                Some(hir::Node::GenericParam(hir::GenericParam { span, name, .. })) => (\n-                    span,\n-                    match name {\n-                        hir::ParamName::Plain(ident) => Some(ident),\n-                        _ => None,\n-                    },\n-                ),\n-                other => bug!(\n-                    \"expected GenericParam, found {:?}\",\n-                    other.map_or_else(|| \"nothing\".to_string(), |n| format!(\"{:?}\", n))\n-                ),\n-            };\n-            let trait_span = match tcx.hir().get_if_local(const_param_trait) {\n-                Some(hir::Node::GenericParam(hir::GenericParam { span, .. })) => Some(span),\n-                _ => None,\n-            };\n+\n+    for (param_impl, param_trait) in\n+        iter::zip(ty_const_params_of(impl_item.def_id), ty_const_params_of(trait_item.def_id))\n+    {\n+        use GenericParamDefKind::*;\n+        if match (&param_impl.kind, &param_trait.kind) {\n+            (Const { .. }, Const { .. })\n+                if tcx.type_of(param_impl.def_id) != tcx.type_of(param_trait.def_id) =>\n+            {\n+                true\n+            }\n+            (Const { .. }, Type { .. }) | (Type { .. }, Const { .. }) => true,\n+            // this is exhaustive so that anyone adding new generic param kinds knows\n+            // to make sure this error is reported for them.\n+            (Const { .. }, Const { .. }) | (Type { .. }, Type { .. }) => false,\n+            (Lifetime { .. }, _) | (_, Lifetime { .. }) => unreachable!(),\n+        } {\n+            let param_impl_span = tcx.def_span(param_impl.def_id);\n+            let param_trait_span = tcx.def_span(param_trait.def_id);\n+\n             let mut err = struct_span_err!(\n                 tcx.sess,\n-                *impl_span,\n+                param_impl_span,\n                 E0053,\n-                \"method `{}` has an incompatible const parameter type for trait\",\n-                trait_m.name\n-            );\n-            err.span_note(\n-                trait_span.map_or_else(|| trait_item_span.unwrap_or(*impl_span), |span| *span),\n-                &format!(\n-                    \"the const parameter{} has type `{}`, but the declaration \\\n-                              in trait `{}` has type `{}`\",\n-                    &impl_ident.map_or_else(|| \"\".to_string(), |ident| format!(\" `{ident}`\")),\n-                    impl_ty,\n-                    tcx.def_path_str(trait_m.def_id),\n-                    trait_ty\n-                ),\n+                \"{} `{}` has an incompatible generic parameter for trait `{}`\",\n+                assoc_item_kind_str(&impl_item),\n+                trait_item.name,\n+                &tcx.def_path_str(tcx.parent(trait_item.def_id))\n             );\n+\n+            let make_param_message = |prefix: &str, param: &ty::GenericParamDef| match param.kind {\n+                Const { .. } => {\n+                    format!(\"{} const parameter of type `{}`\", prefix, tcx.type_of(param.def_id))\n+                }\n+                Type { .. } => format!(\"{} type parameter\", prefix),\n+                Lifetime { .. } => unreachable!(),\n+            };\n+\n+            let trait_header_span = tcx.def_ident_span(tcx.parent(trait_item.def_id)).unwrap();\n+            err.span_label(trait_header_span, \"\");\n+            err.span_label(param_trait_span, make_param_message(\"expected\", param_trait));\n+\n+            let impl_header_span =\n+                tcx.sess.source_map().guess_head_span(tcx.def_span(tcx.parent(impl_item.def_id)));\n+            err.span_label(impl_header_span, \"\");\n+            err.span_label(param_impl_span, make_param_message(\"found\", param_impl));\n+\n             let reported = err.emit();\n             return Err(reported);\n         }\n@@ -1095,6 +1158,8 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorGuaranteed> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n+        compare_generic_param_kinds(tcx, impl_ty, trait_ty)?;\n+\n         let sp = tcx.def_span(impl_ty.def_id);\n         compare_type_predicate_entailment(tcx, impl_ty, sp, trait_ty, impl_trait_ref)?;\n "}, {"sha": "5c9323261a973622d2bcaa4da320a13d948bf5f5", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -0,0 +1,41 @@\n+trait Trait {\n+    fn foo<U>() {}\n+}\n+impl Trait for () {\n+    fn foo<const M: u64>() {}\n+    //~^ error: method `foo` has an incompatible generic parameter for trait\n+}\n+\n+trait Other {\n+    fn bar<const M: u8>() {}\n+}\n+impl Other for () {\n+    fn bar<T>() {}\n+    //~^ error: method `bar` has an incompatible generic parameter for trait\n+}\n+\n+trait Uwu {\n+    fn baz<const N: u32>() {}\n+}\n+impl Uwu for () {\n+    fn baz<const N: i32>() {}\n+    //~^ error: method `baz` has an incompatible generic parameter for trait\n+}\n+\n+trait Aaaaaa {\n+    fn bbbb<const N: u32, T>() {}\n+}\n+impl Aaaaaa for () {\n+    fn bbbb<T, const N: u32>() {}\n+    //~^ error: method `bbbb` has an incompatible generic parameter for trait\n+}\n+\n+trait Names {\n+    fn abcd<T, const N: u32>() {}\n+}\n+impl Names for () {\n+    fn abcd<const N: u32, T>() {}\n+    //~^ error: method `abcd` has an incompatible generic parameter for trait\n+}\n+\n+fn main() {}"}, {"sha": "3455f2c8ea97b3db709d7ae345242ecf40798e92", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -0,0 +1,68 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Trait`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n+   |\n+LL | trait Trait {\n+   |       -----\n+LL |     fn foo<U>() {}\n+   |            - expected type parameter\n+LL | }\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     fn foo<const M: u64>() {}\n+   |            ^^^^^^^^^^^^ found const parameter of type `u64`\n+\n+error[E0053]: method `bar` has an incompatible generic parameter for trait `Other`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n+   |\n+LL | trait Other {\n+   |       -----\n+LL |     fn bar<const M: u8>() {}\n+   |            ----------- expected const parameter of type `u8`\n+LL | }\n+LL | impl Other for () {\n+   | -----------------\n+LL |     fn bar<T>() {}\n+   |            ^ found type parameter\n+\n+error[E0053]: method `baz` has an incompatible generic parameter for trait `Uwu`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:21:12\n+   |\n+LL | trait Uwu {\n+   |       ---\n+LL |     fn baz<const N: u32>() {}\n+   |            ------------ expected const parameter of type `u32`\n+LL | }\n+LL | impl Uwu for () {\n+   | ---------------\n+LL |     fn baz<const N: i32>() {}\n+   |            ^^^^^^^^^^^^ found const parameter of type `i32`\n+\n+error[E0053]: method `bbbb` has an incompatible generic parameter for trait `Aaaaaa`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:29:13\n+   |\n+LL | trait Aaaaaa {\n+   |       ------\n+LL |     fn bbbb<const N: u32, T>() {}\n+   |             ------------ expected const parameter of type `u32`\n+LL | }\n+LL | impl Aaaaaa for () {\n+   | ------------------\n+LL |     fn bbbb<T, const N: u32>() {}\n+   |             ^ found type parameter\n+\n+error[E0053]: method `abcd` has an incompatible generic parameter for trait `Names`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:37:13\n+   |\n+LL | trait Names {\n+   |       -----\n+LL |     fn abcd<T, const N: u32>() {}\n+   |             - expected type parameter\n+LL | }\n+LL | impl Names for () {\n+   | -----------------\n+LL |     fn abcd<const N: u32, T>() {}\n+   |             ^^^^^^^^^^^^ found const parameter of type `u32`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "ae4bd943fd415d1414731414603902c6bfb62967", "filename": "src/test/ui/const-generics/issues/issue-86820.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -1,6 +1,6 @@\n // Regression test for the ICE described in #86820.\n \n-#![allow(unused,dead_code)]\n+#![allow(unused, dead_code)]\n use std::ops::BitAnd;\n \n const C: fn() = || is_set();\n@@ -9,13 +9,12 @@ fn is_set() {\n }\n \n trait Bits {\n-    fn bit<const I : u8>(self) -> bool;\n-    //~^ NOTE: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+    fn bit<const I: u8>(self) -> bool;\n }\n \n impl Bits for u8 {\n-    fn bit<const I : usize>(self) -> bool {\n-    //~^ ERROR: method `bit` has an incompatible const parameter type for trait [E0053]\n+    fn bit<const I: usize>(self) -> bool {\n+        //~^ ERROR: method `bit` has an incompatible generic parameter for trait `Bits` [E0053]\n         let i = 1 << I;\n         let mask = u8::from(i);\n         mask & self == mask"}, {"sha": "3a9cd957f35e7a65c3e1959d7a5ce878fa59ac09", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -1,14 +1,15 @@\n-error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:12\n+error[E0053]: method `bit` has an incompatible generic parameter for trait `Bits`\n+  --> $DIR/issue-86820.rs:16:12\n    |\n-LL |     fn bit<const I : usize>(self) -> bool {\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:12\n-   |\n-LL |     fn bit<const I : u8>(self) -> bool;\n-   |            ^^^^^^^^^^^^\n+LL | trait Bits {\n+   |       ----\n+LL |     fn bit<const I: u8>(self) -> bool;\n+   |            ----------- expected const parameter of type `u8`\n+...\n+LL | impl Bits for u8 {\n+   | ----------------\n+LL |     fn bit<const I: usize>(self) -> bool {\n+   |            ^^^^^^^^^^^^^^ found const parameter of type `usize`\n \n error: aborting due to previous error\n "}, {"sha": "6bed8e3aff9754832a89037db7becddd51d6f8d6", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Foo<const N: u8>;\n+}\n+\n+impl Trait for () {\n+    type Foo<const N: u64> = u32;\n+    //~^ error: type `Foo` has an incompatible generic parameter for trait\n+}\n+\n+fn main() {}"}, {"sha": "89c993dee5e694c270b23bc0a000bab3742308b9", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77030b7825796461f10ee5dd774caa46ad09c64a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=77030b7825796461f10ee5dd774caa46ad09c64a", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: type `Foo` has an incompatible generic parameter for trait `Trait`\n+  --> $DIR/const_params_have_right_type.rs:8:14\n+   |\n+LL | trait Trait {\n+   |       -----\n+LL |     type Foo<const N: u8>;\n+   |              ----------- expected const parameter of type `u8`\n+...\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     type Foo<const N: u64> = u32;\n+   |              ^^^^^^^^^^^^ found const parameter of type `u64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}]}