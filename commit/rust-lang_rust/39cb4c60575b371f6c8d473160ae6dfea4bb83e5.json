{"sha": "39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Y2I0YzYwNTc1YjM3MWY2YzhkNDczMTYwYWU2ZGZlYTRiYjgzZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-16T01:12:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-16T01:12:00Z"}, "message": "Auto merge of #46757 - michaelwoerister:revert-46562, r=eddyb\n\nincr.comp.: Revert hashing optimization that caused regression.\n\nThis PR reverts part of #46562 which caused [a regression in the crossbeam rust-icci](https://travis-ci.org/rust-icci/crossbeam/builds/316574774) test. I don't know what the problem is exactly yet. Fortunately, the problematic part is also the less important one, so reverting should not have much impact on performance.\n\nr? @eddyb", "tree": {"sha": "0df900fc073d17a8920a0d17f06f6bf4b9e92578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df900fc073d17a8920a0d17f06f6bf4b9e92578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "html_url": "https://github.com/rust-lang/rust/commit/39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abab7633d353fb3853cb406e053a57c8db0af709", "url": "https://api.github.com/repos/rust-lang/rust/commits/abab7633d353fb3853cb406e053a57c8db0af709", "html_url": "https://github.com/rust-lang/rust/commit/abab7633d353fb3853cb406e053a57c8db0af709"}, {"sha": "c7e5b703cd5c4926b477fe1ded13df42d31a62da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e5b703cd5c4926b477fe1ded13df42d31a62da", "html_url": "https://github.com/rust-lang/rust/commit/c7e5b703cd5c4926b477fe1ded13df42d31a62da"}], "stats": {"total": 67, "additions": 24, "deletions": 43}, "files": [{"sha": "7099b9511292a02d260a28ed909d9388ed7866dd", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -341,7 +341,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Span {\n         std_hash::Hash::hash(&TAG_VALID_SPAN, hasher);\n         // We truncate the stable_id hash and line and col numbers. The chances\n         // of causing a collision this way should be minimal.\n-        std_hash::Hash::hash(&(file_lo.stable_id.0 as u64), hasher);\n+        std_hash::Hash::hash(&file_lo.name, hasher);\n \n         let col = (col_lo.0 as u64) & 0xFF;\n         let line = ((line_lo as u64) & 0xFF_FF_FF) << 8;"}, {"sha": "c25aa10eb1e73d45052e426a9d325ece5b18ae67", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -394,8 +394,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n             // Do not hash the source as it is not encoded\n             src: _,\n             src_hash,\n-            // The stable id is just a hash of other fields\n-            stable_id: _,\n             external_src: _,\n             start_pos,\n             end_pos: _,"}, {"sha": "079b518efd8981b49dc64c9e487e55529338028f", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -176,7 +176,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 let index = FileMapIndex(index as u32);\n                 let file_ptr: *const FileMap = &**file as *const _;\n                 file_to_file_index.insert(file_ptr, index);\n-                file_index_to_stable_id.insert(index, file.stable_id);\n+                file_index_to_stable_id.insert(index, StableFilemapId::new(&file));\n             }\n \n             (file_to_file_index, file_index_to_stable_id)"}, {"sha": "49a017535ffd14ff12f8b21b354b7ba81cc1a9cc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -1124,7 +1124,6 @@ impl<'a, 'tcx> CrateMetadata {\n             let syntax_pos::FileMap { name,\n                                       name_was_remapped,\n                                       src_hash,\n-                                      stable_id,\n                                       start_pos,\n                                       end_pos,\n                                       lines,\n@@ -1156,7 +1155,6 @@ impl<'a, 'tcx> CrateMetadata {\n                                                                    name_was_remapped,\n                                                                    self.cnum.as_u32(),\n                                                                    src_hash,\n-                                                                   stable_id,\n                                                                    source_length,\n                                                                    lines,\n                                                                    multibyte_chars,"}, {"sha": "2c91d60ce9d5922eadf3d037dd5a44f369cf828e", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -23,7 +23,9 @@ pub use syntax_pos::hygiene::{ExpnFormat, ExpnInfo, NameAndSpan};\n pub use self::ExpnFormat::*;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::StableHasher;\n use std::cell::{RefCell, Ref};\n+use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n \n@@ -100,6 +102,24 @@ impl FileLoader for RealFileLoader {\n     }\n }\n \n+// This is a FileMap identifier that is used to correlate FileMaps between\n+// subsequent compilation sessions (which is something we need to do during\n+// incremental compilation).\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+pub struct StableFilemapId(u128);\n+\n+impl StableFilemapId {\n+    pub fn new(filemap: &FileMap) -> StableFilemapId {\n+        let mut hasher = StableHasher::new();\n+\n+        filemap.name.hash(&mut hasher);\n+        filemap.name_was_remapped.hash(&mut hasher);\n+        filemap.unmapped_path.hash(&mut hasher);\n+\n+        StableFilemapId(hasher.finish())\n+    }\n+}\n+\n // _____________________________________________________________________________\n // CodeMap\n //\n@@ -197,7 +217,7 @@ impl CodeMap {\n \n         self.stable_id_to_filemap\n             .borrow_mut()\n-            .insert(filemap.stable_id, filemap.clone());\n+            .insert(StableFilemapId::new(&filemap), filemap.clone());\n \n         filemap\n     }\n@@ -226,7 +246,6 @@ impl CodeMap {\n                                 name_was_remapped: bool,\n                                 crate_of_origin: u32,\n                                 src_hash: u128,\n-                                stable_id: StableFilemapId,\n                                 source_len: usize,\n                                 mut file_local_lines: Vec<BytePos>,\n                                 mut file_local_multibyte_chars: Vec<MultiByteChar>,\n@@ -257,7 +276,6 @@ impl CodeMap {\n             crate_of_origin,\n             src: None,\n             src_hash,\n-            stable_id,\n             external_src: RefCell::new(ExternalSource::AbsentOk),\n             start_pos,\n             end_pos,\n@@ -270,7 +288,7 @@ impl CodeMap {\n \n         self.stable_id_to_filemap\n             .borrow_mut()\n-            .insert(stable_id, filemap.clone());\n+            .insert(StableFilemapId::new(&filemap), filemap.clone());\n \n         filemap\n     }"}, {"sha": "8d5d7c81c0ea421ba7788ec3524bb52682de7f5c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb4c60575b371f6c8d473160ae6dfea4bb83e5/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=39cb4c60575b371f6c8d473160ae6dfea4bb83e5", "patch": "@@ -678,8 +678,6 @@ pub struct FileMap {\n     pub src: Option<Rc<String>>,\n     /// The source code's hash\n     pub src_hash: u128,\n-    /// The stable id used during incr. comp.\n-    pub stable_id: StableFilemapId,\n     /// The external source code (used for external crates, which will have a `None`\n     /// value as `self.src`.\n     pub external_src: RefCell<ExternalSource>,\n@@ -695,34 +693,12 @@ pub struct FileMap {\n     pub non_narrow_chars: RefCell<Vec<NonNarrowChar>>,\n }\n \n-// This is a FileMap identifier that is used to correlate FileMaps between\n-// subsequent compilation sessions (which is something we need to do during\n-// incremental compilation).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n-pub struct StableFilemapId(pub u128);\n-\n-impl StableFilemapId {\n-    pub fn new(name: &FileName,\n-               name_was_remapped: bool,\n-               unmapped_path: &FileName)\n-               -> StableFilemapId {\n-        use std::hash::Hash;\n-\n-        let mut hasher = StableHasher::new();\n-        name.hash(&mut hasher);\n-        name_was_remapped.hash(&mut hasher);\n-        unmapped_path.hash(&mut hasher);\n-        StableFilemapId(hasher.finish())\n-    }\n-}\n-\n impl Encodable for FileMap {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_struct(\"FileMap\", 8, |s| {\n             s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n             s.emit_struct_field(\"name_was_remapped\", 1, |s| self.name_was_remapped.encode(s))?;\n             s.emit_struct_field(\"src_hash\", 2, |s| self.src_hash.encode(s))?;\n-            s.emit_struct_field(\"stable_id\", 3, |s| self.stable_id.encode(s))?;\n             s.emit_struct_field(\"start_pos\", 4, |s| self.start_pos.encode(s))?;\n             s.emit_struct_field(\"end_pos\", 5, |s| self.end_pos.encode(s))?;\n             s.emit_struct_field(\"lines\", 6, |s| {\n@@ -790,8 +766,6 @@ impl Decodable for FileMap {\n                 d.read_struct_field(\"name_was_remapped\", 1, |d| Decodable::decode(d))?;\n             let src_hash: u128 =\n                 d.read_struct_field(\"src_hash\", 2, |d| Decodable::decode(d))?;\n-            let stable_id: StableFilemapId =\n-                d.read_struct_field(\"stable_id\", 3, |d| Decodable::decode(d))?;\n             let start_pos: BytePos =\n                 d.read_struct_field(\"start_pos\", 4, |d| Decodable::decode(d))?;\n             let end_pos: BytePos = d.read_struct_field(\"end_pos\", 5, |d| Decodable::decode(d))?;\n@@ -839,7 +813,6 @@ impl Decodable for FileMap {\n                 end_pos,\n                 src: None,\n                 src_hash,\n-                stable_id,\n                 external_src: RefCell::new(ExternalSource::AbsentOk),\n                 lines: RefCell::new(lines),\n                 multibyte_chars: RefCell::new(multibyte_chars),\n@@ -866,11 +839,6 @@ impl FileMap {\n         let mut hasher: StableHasher<u128> = StableHasher::new();\n         hasher.write(src.as_bytes());\n         let src_hash = hasher.finish();\n-\n-        let stable_id = StableFilemapId::new(&name,\n-                                             name_was_remapped,\n-                                             &unmapped_path);\n-\n         let end_pos = start_pos.to_usize() + src.len();\n \n         FileMap {\n@@ -880,7 +848,6 @@ impl FileMap {\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n             src_hash,\n-            stable_id,\n             external_src: RefCell::new(ExternalSource::Unneeded),\n             start_pos,\n             end_pos: Pos::from_usize(end_pos),"}]}