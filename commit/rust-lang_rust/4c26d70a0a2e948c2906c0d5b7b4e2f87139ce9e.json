{"sha": "4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjZkNzBhMGEyZTk0OGMyOTA2YzBkNWI3YjRlMmY4NzEzOWNlOWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-17T17:05:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-17T19:02:36Z"}, "message": "new debug flag, new test", "tree": {"sha": "0dea33c9f0817d61f4c84d5e83af9431d2c68abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dea33c9f0817d61f4c84d5e83af9431d2c68abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "html_url": "https://github.com/rust-lang/rust/commit/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b549f9f147b18eaeb3a4c185e45ccd8ae310b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b549f9f147b18eaeb3a4c185e45ccd8ae310b09", "html_url": "https://github.com/rust-lang/rust/commit/6b549f9f147b18eaeb3a4c185e45ccd8ae310b09"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "178ea996ace372afc221b2a80276702aeeb89eba", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -400,6 +400,7 @@ fn build_session_options(match: getopts::match,\n     let sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n     let target_opt = getopts::opt_maybe_str(match, \"target\");\n     let mut no_asm_comments = getopts::opt_present(match, \"no-asm-comments\");\n+    let debug_rustc = getopts::opt_present(match, \"debug-rustc\");\n     alt output_type {\n       // unless we're emitting huamn-readable assembly, omit comments.\n       link::output_type_llvm_assembly | link::output_type_assembly {}\n@@ -453,7 +454,8 @@ fn build_session_options(match: getopts::match,\n           test: test,\n           parse_only: parse_only,\n           no_trans: no_trans,\n-          no_asm_comments: no_asm_comments};\n+          no_asm_comments: no_asm_comments,\n+          debug_rustc: debug_rustc};\n     ret sopts;\n }\n \n@@ -531,7 +533,7 @@ fn opts() -> [getopts::opt] {\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"no-asm-comments\"),\n-         optflag(\"enforce-mut-vars\")];\n+         optflag(\"debug-rustc\")];\n }\n \n type output_filenames = @{out_filename: str, obj_filename:str};"}, {"sha": "216bda92fe8fd4de1dbaf0bfa90a370286975860", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -63,6 +63,8 @@ Options:\n                        (default: host triple)\n                        (see http://sources.redhat.com/autobook/autobook/\n                        autobook_17.html for detail)\n+    --debug-rustc      enables different output that helps in debugging rustc,\n+                       but may be less clear for normal use\n \n     -W <foo>           enable warning <foo>\n     -W no-<foo>        disable warning <foo>"}, {"sha": "005c951c1c7b6cfdfda6a65c028da7adafeade47", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -45,7 +45,8 @@ type options =\n      test: bool,\n      parse_only: bool,\n      no_trans: bool,\n-     no_asm_comments: bool};\n+     no_asm_comments: bool,\n+     debug_rustc: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "c3c816ca4b96448f649ee83a93768c622110d682", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -640,7 +640,7 @@ fn _UndefReturn(cx: block, Fn: ValueRef) -> ValueRef {\n \n fn add_span_comment(bcx: block, sp: span, text: str) {\n     let ccx = bcx.ccx();\n-    if (!ccx.sess.opts.no_asm_comments) {\n+    if !ccx.sess.opts.no_asm_comments {\n         let s = text + \" (\" + codemap::span_to_str(sp, ccx.sess.codemap)\n             + \")\";\n         log(debug, s);"}, {"sha": "95b5969169bef34477c7da47acb4551c9b5f0dfe", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -50,11 +50,13 @@ fn region_to_str(cx: ctxt, region: region) -> str {\n       re_scope(node_id) { #fmt[\"&%s\", re_scope_id_to_str(cx, node_id)] }\n       re_bound(br) { bound_region_to_str(cx, br) }\n       re_free(id, br) {\n-        // For debugging, this version is sometimes helpful:\n-        //  #fmt[\"{%d} %s\", id, bound_region_to_str(cx, br)]\n-\n-        // But this version is what the user expects to see:\n-        bound_region_to_str(cx, br)\n+        if cx.sess.opts.debug_rustc {\n+            // For debugging, this version is sometimes helpful:\n+            #fmt[\"{%d} %s\", id, bound_region_to_str(cx, br)]\n+        } else {\n+            // But this version is what the user expects to see:\n+            bound_region_to_str(cx, br)\n+        }\n       }\n \n       // These two should not be seen by end-users (very often, anyhow):"}, {"sha": "71716ea059e533fa9781d8f490ffd29e73fd758d", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -148,6 +148,7 @@ fn build_session() -> (session::session, @mut bool) {\n         parse_only: false,\n         no_trans: false,\n         no_asm_comments: false,\n+        debug_rustc: false,\n     };\n \n     let codemap = codemap::new_codemap();"}, {"sha": "31a642c69fdb4a1a1f3bc7910db7e2694d6ffc68", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=4c26d70a0a2e948c2906c0d5b7b4e2f87139ce9e", "patch": "@@ -0,0 +1,41 @@\n+// xfail-test\n+\n+fn with<T>(t: T, f: fn(T)) { f(t) }\n+\n+fn nested(x: &x.int) {  // (1)\n+    with(\n+        fn&(x: &x.int, // Refers to the region `x` at (1)\n+            y: &y.int, // A fresh region `y` (2)\n+            z: fn(x: &x.int, // Refers to `x` at (1)\n+                  y: &y.int, // Refers to `y` at (2)\n+                  z: &z.int) -> &z.int) // A fresh region `z` (3)\n+            -> &x.int {\n+\n+            if false { ret z(x, x, x); } //! ERROR mismatched types: expected `&y.int` but found `&x.int`\n+            if false { ret z(x, x, y); } //! ERROR mismatched types: expected `&y.int` but found `&x.int`\n+                                        //!^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(x, y, x); }\n+            if false { ret z(x, y, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, x, x); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //!^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+            if false { ret z(y, x, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //!^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n+                                       //!^^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, y, x); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(y, y, y); } //! ERROR mismatched types: expected `&x.int` but found `&y.int`\n+                                        //!^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            fail;\n+        }\n+    ) {|f|\n+\n+        let a: &x.int = f(x, x) { |_x, _y, z| z };\n+        let b: &x.int = f(x, a) { |_x, _y, z| z };\n+        let c: &x.int = f(a, a) { |_x, _y, z| z };\n+\n+        let d: &x.int = f(x, x) { |_x, _y, z| z };\n+        let e: &x.int = f(x, &a) { |_x, _y, z| z };\n+        let f: &x.int = f(&a, &a) { |_x, _y, z| z };\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}