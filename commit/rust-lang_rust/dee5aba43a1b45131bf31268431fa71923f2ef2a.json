{"sha": "dee5aba43a1b45131bf31268431fa71923f2ef2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTVhYmE0M2ExYjQ1MTMxYmYzMTI2ODQzMWZhNzE5MjNmMmVmMmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-12T13:18:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T13:18:30Z"}, "message": "Merge #7644\n\n7644: Primitive completion r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7642\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "9a43e69bd5591d7e436fe236668d6769f5d500ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a43e69bd5591d7e436fe236668d6769f5d500ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee5aba43a1b45131bf31268431fa71923f2ef2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJoAmCRBK7hj4Ov3rIwAAdHIIAGLq8lcsiaeGU6rx7Z+61WVx\nOLJ0yamTLTw/FEwDK1hpueBMtVUbsp9JbK5E5H1vSKUc32Zx/k2trodSj0CrdRW5\nYF/oY5JeUHazROMGJxWMrtWjzyUy3ful39i4cCDVi6jCu8hMyqDaoVjgH42x/2js\nfRpwupjq24JDP6Bpo/wQHUzHl1xSiM17doL0A6xGr8og3lPzvsadkjiABLaVgaHx\nnCYpYXja0vqJ663/dmyDuz0BvdaU6uhq2jNEXtCdWfIkJhi3h+v86FNZ3eImgcsp\nv+JieZDpdoVHUBaHdfwG+hgpoLNYAbRi9zk93XoFqwNaNYpJ7fqD3RylNFw5z2w=\n=h3rO\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a43e69bd5591d7e436fe236668d6769f5d500ea\nparent a044ac980cca07913e64a7c5fab53f7fe7cecb81\nparent e938d769d922feb374967d5b695e3b3baa70a566\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613135910 +0000\ncommitter GitHub <noreply@github.com> 1613135910 +0000\n\nMerge #7644\n\n7644: Primitive completion r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7642\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee5aba43a1b45131bf31268431fa71923f2ef2a", "html_url": "https://github.com/rust-lang/rust/commit/dee5aba43a1b45131bf31268431fa71923f2ef2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee5aba43a1b45131bf31268431fa71923f2ef2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a044ac980cca07913e64a7c5fab53f7fe7cecb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a044ac980cca07913e64a7c5fab53f7fe7cecb81", "html_url": "https://github.com/rust-lang/rust/commit/a044ac980cca07913e64a7c5fab53f7fe7cecb81"}, {"sha": "e938d769d922feb374967d5b695e3b3baa70a566", "url": "https://api.github.com/repos/rust-lang/rust/commits/e938d769d922feb374967d5b695e3b3baa70a566", "html_url": "https://github.com/rust-lang/rust/commit/e938d769d922feb374967d5b695e3b3baa70a566"}], "stats": {"total": 118, "additions": 89, "deletions": 29}, "files": [{"sha": "2afa6979efc12cd840ec9477fef1b5e6dc8f5bb2", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -50,7 +50,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             }\n         }\n         PathResolution::Def(def @ hir::ModuleDef::Adt(_))\n-        | PathResolution::Def(def @ hir::ModuleDef::TypeAlias(_)) => {\n+        | PathResolution::Def(def @ hir::ModuleDef::TypeAlias(_))\n+        | PathResolution::Def(def @ hir::ModuleDef::BuiltinType(_)) => {\n             if let hir::ModuleDef::Adt(Adt::Enum(e)) = def {\n                 for variant in e.variants(ctx.db) {\n                     acc.add_enum_variant(ctx, variant, None);\n@@ -59,6 +60,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             let ty = match def {\n                 hir::ModuleDef::Adt(adt) => adt.ty(ctx.db),\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n+                hir::ModuleDef::BuiltinType(builtin) => {\n+                    let module = match ctx.scope.module() {\n+                        Some(it) => it,\n+                        None => return,\n+                    };\n+                    builtin.ty(ctx.db, module)\n+                }\n                 _ => unreachable!(),\n             };\n \n@@ -780,4 +788,28 @@ impl Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_primitive_assoc_const() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib deps:core\n+fn f() {\n+    u8::$0\n+}\n+\n+//- /core.rs crate:core\n+#[lang = \"u8\"]\n+impl u8 {\n+    pub const MAX: Self = 255;\n+\n+    pub fn func(self) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                ct MAX     pub const MAX: Self = 255;\n+                me func(\u2026) -> ()\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "35b532602164bbf2f316e5557445455b0175c807", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -6,7 +6,6 @@ use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use either::Either;\n use hir_def::{\n     adt::{ReprKind, StructKind, VariantData},\n-    builtin_type::BuiltinType,\n     expr::{BindingAnnotation, LabelId, Pat, PatId},\n     import_map,\n     item_tree::ItemTreeNode,\n@@ -245,7 +244,7 @@ impl ModuleDef {\n             ModuleDef::Const(it) => it.name(db),\n             ModuleDef::Static(it) => it.name(db),\n \n-            ModuleDef::BuiltinType(it) => Some(it.as_name()),\n+            ModuleDef::BuiltinType(it) => Some(it.name()),\n         }\n     }\n \n@@ -994,6 +993,23 @@ impl HasVisibility for TypeAlias {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct BuiltinType {\n+    pub(crate) inner: hir_def::builtin_type::BuiltinType,\n+}\n+\n+impl BuiltinType {\n+    pub fn ty(self, db: &dyn HirDatabase, module: Module) -> Type {\n+        let resolver = module.id.resolver(db.upcast());\n+        Type::new_with_resolver(db, &resolver, Ty::builtin(self.inner))\n+            .expect(\"crate not present in resolver\")\n+    }\n+\n+    pub fn name(self) -> Name {\n+        self.inner.as_name()\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) id: MacroDefId,"}, {"sha": "b5814da1137bfbab3a4142c7e0483f68a9de957c", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -11,8 +11,9 @@ use hir_def::{\n };\n \n use crate::{\n-    code_model::GenericParam, Adt, AssocItem, DefWithBody, Field, GenericDef, Label, Local,\n-    MacroDef, ModuleDef, Variant, VariantDef,\n+    code_model::{BuiltinType, GenericParam},\n+    Adt, AssocItem, DefWithBody, Field, GenericDef, Label, Local, MacroDef, ModuleDef, Variant,\n+    VariantDef,\n };\n \n macro_rules! from_id {\n@@ -111,7 +112,7 @@ impl From<ModuleDefId> for ModuleDef {\n             ModuleDefId::StaticId(it) => ModuleDef::Static(it.into()),\n             ModuleDefId::TraitId(it) => ModuleDef::Trait(it.into()),\n             ModuleDefId::TypeAliasId(it) => ModuleDef::TypeAlias(it.into()),\n-            ModuleDefId::BuiltinType(it) => ModuleDef::BuiltinType(it),\n+            ModuleDefId::BuiltinType(it) => ModuleDef::BuiltinType(it.into()),\n         }\n     }\n }\n@@ -127,7 +128,7 @@ impl From<ModuleDef> for ModuleDefId {\n             ModuleDef::Static(it) => ModuleDefId::StaticId(it.into()),\n             ModuleDef::Trait(it) => ModuleDefId::TraitId(it.into()),\n             ModuleDef::TypeAlias(it) => ModuleDefId::TypeAliasId(it.into()),\n-            ModuleDef::BuiltinType(it) => ModuleDefId::BuiltinType(it),\n+            ModuleDef::BuiltinType(it) => ModuleDefId::BuiltinType(it.into()),\n         }\n     }\n }\n@@ -274,3 +275,15 @@ impl From<ModuleDef> for ItemInNs {\n         }\n     }\n }\n+\n+impl From<hir_def::builtin_type::BuiltinType> for BuiltinType {\n+    fn from(inner: hir_def::builtin_type::BuiltinType) -> Self {\n+        Self { inner }\n+    }\n+}\n+\n+impl From<BuiltinType> for hir_def::builtin_type::BuiltinType {\n+    fn from(it: BuiltinType) -> Self {\n+        it.inner\n+    }\n+}"}, {"sha": "59292d5a2f17b9e8568d9e36c67044cf263e28c1", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -49,7 +49,7 @@ impl PathResolution {\n         match self {\n             PathResolution::Def(ModuleDef::Adt(adt)) => Some(TypeNs::AdtId((*adt).into())),\n             PathResolution::Def(ModuleDef::BuiltinType(builtin)) => {\n-                Some(TypeNs::BuiltinType(*builtin))\n+                Some(TypeNs::BuiltinType((*builtin).into()))\n             }\n             PathResolution::Def(ModuleDef::Const(_))\n             | PathResolution::Def(ModuleDef::Variant(_))"}, {"sha": "dc21f6051a513322a4d17d55fa039e86fdd20ebc", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -28,8 +28,9 @@ use syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, Const, Field, Function, Local, MacroDef,\n-    ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Variant,\n+    code_model::BuiltinType, db::HirDatabase, semantics::PathResolution, Adt, Const, Field,\n+    Function, Local, MacroDef, ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n+    Variant,\n };\n use base_db::CrateId;\n \n@@ -479,7 +480,7 @@ fn resolve_hir_path_(\n             }\n             TypeNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n-            TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n+            TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n         })\n     };\n@@ -555,7 +556,7 @@ fn resolve_hir_path_qualifier(\n         TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => PathResolution::Def(Adt::from(it).into()),\n         TypeNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n         TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n-        TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n+        TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n         TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n     })\n }"}, {"sha": "e85f85e49e03c60839b8b807a70afe431d61442f", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -361,6 +361,7 @@ impl Resolver {\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {\n+        // FIXME: can this ever be `None`?\n         self.module_scope().map(|t| t.0.krate())\n     }\n "}, {"sha": "50d24867494a1c2182b79181eb3d025dbedde0fa", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -27,6 +27,7 @@ use std::{iter, mem, ops::Deref, sync::Arc};\n \n use base_db::{salsa, CrateId};\n use hir_def::{\n+    builtin_type::BuiltinType,\n     expr::ExprId,\n     type_ref::{Mutability, Rawness},\n     AdtId, AssocContainerId, DefWithBodyId, FunctionId, GenericDefId, HasModule, LifetimeParamId,\n@@ -738,6 +739,15 @@ impl Ty {\n             Substs(sig.params_and_return),\n         )\n     }\n+    pub fn builtin(builtin: BuiltinType) -> Self {\n+        Ty::simple(match builtin {\n+            BuiltinType::Char => TypeCtor::Char,\n+            BuiltinType::Bool => TypeCtor::Bool,\n+            BuiltinType::Str => TypeCtor::Str,\n+            BuiltinType::Int(t) => TypeCtor::Int(IntTy::from(t).into()),\n+            BuiltinType::Float(t) => TypeCtor::Float(FloatTy::from(t).into()),\n+        })\n+    }\n \n     pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n         match self {"}, {"sha": "f9dc832bd25a094423f5efc13de46f2eb626e6bd", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -27,7 +27,6 @@ use test_utils::mark;\n \n use crate::{\n     db::HirDatabase,\n-    primitive::{FloatTy, IntTy},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         make_mut_slice, variant_data,\n@@ -1051,17 +1050,6 @@ fn type_for_static(db: &dyn HirDatabase, def: StaticId) -> Binders<Ty> {\n     Binders::new(0, Ty::from_hir(&ctx, &data.type_ref))\n }\n \n-/// Build the declared type of a static.\n-fn type_for_builtin(def: BuiltinType) -> Ty {\n-    Ty::simple(match def {\n-        BuiltinType::Char => TypeCtor::Char,\n-        BuiltinType::Bool => TypeCtor::Bool,\n-        BuiltinType::Str => TypeCtor::Str,\n-        BuiltinType::Int(t) => TypeCtor::Int(IntTy::from(t).into()),\n-        BuiltinType::Float(t) => TypeCtor::Float(FloatTy::from(t).into()),\n-    })\n-}\n-\n fn fn_sig_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> PolyFnSig {\n     let struct_data = db.struct_data(def);\n     let fields = struct_data.variant_data.fields();\n@@ -1186,7 +1174,7 @@ impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for V\n /// namespace.\n pub(crate) fn ty_query(db: &dyn HirDatabase, def: TyDefId) -> Binders<Ty> {\n     match def {\n-        TyDefId::BuiltinType(it) => Binders::new(0, type_for_builtin(it)),\n+        TyDefId::BuiltinType(it) => Binders::new(0, Ty::builtin(it)),\n         TyDefId::AdtId(it) => type_for_adt(db, it),\n         TyDefId::TypeAliasId(it) => type_for_type_alias(db, it),\n     }"}, {"sha": "f94adec9bb06e9445aa675def3bb0759dc0b2985", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -9,8 +9,7 @@ use url::Url;\n \n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    Adt, AsAssocItem, AsName, AssocItem, AssocItemContainer, Crate, Field, HasAttrs, ItemInNs,\n-    ModuleDef,\n+    Adt, AsAssocItem, AssocItem, AssocItemContainer, Crate, Field, HasAttrs, ItemInNs, ModuleDef,\n };\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n@@ -429,7 +428,7 @@ fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<S\n         ModuleDef::Module(_) => \"index.html\".to_string(),\n         ModuleDef::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n         ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n-        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.as_name()),\n+        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.name()),\n         ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n         ModuleDef::Variant(ev) => {\n             format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))"}, {"sha": "00745238afd206b398c5a362b869d966414383ad", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee5aba43a1b45131bf31268431fa71923f2ef2a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=dee5aba43a1b45131bf31268431fa71923f2ef2a", "patch": "@@ -334,7 +334,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n-            ModuleDef::BuiltinType(it) => Some(Markup::fenced_block(&it)),\n+            ModuleDef::BuiltinType(it) => Some(Markup::fenced_block(&it.name())),\n         },\n         Definition::Local(it) => Some(Markup::fenced_block(&it.ty(db).display(db))),\n         Definition::SelfType(impl_def) => {"}]}