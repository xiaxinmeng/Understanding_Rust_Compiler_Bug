{"sha": "971a2718402dcf73c969490f51473b438f328dd9", "node_id": "C_kwDOAAsO6NoAKDk3MWEyNzE4NDAyZGNmNzNjOTY5NDkwZjUxNDczYjQzOGYzMjhkZDk", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-09-22T08:00:09Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-10-13T01:06:47Z"}, "message": "use `ControlFlow` in \"extract function\" assist", "tree": {"sha": "2a62989b202a085f834cc94ad64b3b86c480b167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a62989b202a085f834cc94ad64b3b86c480b167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971a2718402dcf73c969490f51473b438f328dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971a2718402dcf73c969490f51473b438f328dd9", "html_url": "https://github.com/rust-lang/rust/commit/971a2718402dcf73c969490f51473b438f328dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971a2718402dcf73c969490f51473b438f328dd9/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137ac67f5dd10d8a5e83e9eeb7600993e9886c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/137ac67f5dd10d8a5e83e9eeb7600993e9886c8a", "html_url": "https://github.com/rust-lang/rust/commit/137ac67f5dd10d8a5e83e9eeb7600993e9886c8a"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "59f0a786afd5f6722131212ac06a1f182d3fff28", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/971a2718402dcf73c969490f51473b438f328dd9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971a2718402dcf73c969490f51473b438f328dd9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=971a2718402dcf73c969490f51473b438f328dd9", "patch": "@@ -1184,7 +1184,18 @@ impl FlowHandler {\n                 let action = action.make_result_handler(None);\n                 let stmt = make::expr_stmt(action);\n                 let block = make::block_expr(iter::once(stmt.into()), None);\n-                let condition = make::condition(call_expr, None);\n+                let controlflow_break_path = make::path_from_text(\"ControlFlow::Break\");\n+                let tuple_pat = make::tuple_pat(iter::empty());\n+                let condition = make::condition(\n+                    call_expr,\n+                    Some(\n+                        make::tuple_struct_pat(\n+                            controlflow_break_path,\n+                            iter::once(tuple_pat.into()),\n+                        )\n+                        .into(),\n+                    ),\n+                );\n                 make::expr_if(condition, block, None)\n             }\n             FlowHandler::IfOption { action } => {\n@@ -1326,7 +1337,7 @@ impl Function {\n                     .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n-            FlowHandler::If { .. } => make::ext::ty_bool(),\n+            FlowHandler::If { .. } => make::ty(\"ControlFlow<()>\"),\n             FlowHandler::IfOption { action } => {\n                 let handler_ty = action\n                     .expr_ty(ctx)\n@@ -1461,8 +1472,11 @@ fn make_body(\n             })\n         }\n         FlowHandler::If { .. } => {\n-            let lit_false = make::expr_literal(\"false\");\n-            with_tail_expr(block, lit_false.into())\n+            let controlflow_continue = make::expr_call(\n+                make::expr_path(make::path_from_text(\"ControlFlow::Continue\")),\n+                make::arg_list(iter::once(make::expr_unit())),\n+            );\n+            with_tail_expr(block, controlflow_continue.into())\n         }\n         FlowHandler::IfOption { .. } => {\n             let none = make::expr_path(make::ext::ident_path(\"None\"));\n@@ -1638,7 +1652,10 @@ fn update_external_control_flow(handler: &FlowHandler, syntax: &SyntaxNode) {\n fn make_rewritten_flow(handler: &FlowHandler, arg_expr: Option<ast::Expr>) -> Option<ast::Expr> {\n     let value = match handler {\n         FlowHandler::None | FlowHandler::Try { .. } => return None,\n-        FlowHandler::If { .. } => make::expr_literal(\"true\").into(),\n+        FlowHandler::If { .. } => make::expr_call(\n+            make::expr_path(make::path_from_text(\"ControlFlow::Break\")),\n+            make::arg_list(iter::once(make::expr_unit())),\n+        ),\n         FlowHandler::IfOption { .. } => {\n             let expr = arg_expr.unwrap_or_else(|| make::expr_tuple(Vec::new()));\n             let args = make::arg_list(iter::once(expr));\n@@ -3284,18 +3301,18 @@ fn foo() {\n fn foo() {\n     loop {\n         let mut n = 1;\n-        if fun_name(&mut n) {\n+        if let ControlFlow::Break(()) = fun_name(&mut n) {\n             break;\n         }\n         let h = 1 + n;\n     }\n }\n \n-fn $0fun_name(n: &mut i32) -> bool {\n+fn $0fun_name(n: &mut i32) -> ControlFlow<()> {\n     let m = *n + 1;\n-    return true;\n+    return ControlFlow::Break(());\n     *n += m;\n-    false\n+    ControlFlow::Continue(())\n }\n \"#,\n         );\n@@ -3321,19 +3338,19 @@ fn foo() {\n fn foo() {\n     loop {\n         let mut n = 1;\n-        if fun_name(n) {\n+        if let ControlFlow::Break(()) = fun_name(n) {\n             break;\n         }\n         let h = 1;\n     }\n }\n \n-fn $0fun_name(n: i32) -> bool {\n+fn $0fun_name(n: i32) -> ControlFlow<()> {\n     let m = n + 1;\n     if m == 42 {\n-        return true;\n+        return ControlFlow::Break(());\n     }\n-    false\n+    ControlFlow::Continue(())\n }\n \"#,\n         );"}]}