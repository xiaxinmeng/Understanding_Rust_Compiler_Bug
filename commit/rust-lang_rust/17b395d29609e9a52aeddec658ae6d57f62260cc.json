{"sha": "17b395d29609e9a52aeddec658ae6d57f62260cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjM5NWQyOTYwOWU5YTUyYWVkZGVjNjU4YWU2ZDU3ZjYyMjYwY2M=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-05T18:11:42Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T20:15:32Z"}, "message": "Use `TypeVisitor::BreakTy` in `structural_match::Search`", "tree": {"sha": "7e30d28a861279ac64583c481e5a3514202c8ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e30d28a861279ac64583c481e5a3514202c8ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b395d29609e9a52aeddec658ae6d57f62260cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b395d29609e9a52aeddec658ae6d57f62260cc", "html_url": "https://github.com/rust-lang/rust/commit/17b395d29609e9a52aeddec658ae6d57f62260cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b395d29609e9a52aeddec658ae6d57f62260cc/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f3119103b79df190324e8d72a5827e4d0cd52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f3119103b79df190324e8d72a5827e4d0cd52d", "html_url": "https://github.com/rust-lang/rust/commit/e0f3119103b79df190324e8d72a5827e4d0cd52d"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "3d20a8d5cf336be07e4efca3b70ace80d7806f52", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/17b395d29609e9a52aeddec658ae6d57f62260cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b395d29609e9a52aeddec658ae6d57f62260cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=17b395d29609e9a52aeddec658ae6d57f62260cc", "patch": "@@ -55,9 +55,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n     // FIXME: we should instead pass in an `infcx` from the outside.\n     tcx.infer_ctxt().enter(|infcx| {\n-        let mut search = Search { infcx, span, found: None, seen: FxHashSet::default() };\n-        ty.visit_with(&mut search);\n-        search.found\n+        ty.visit_with(&mut Search { infcx, span, seen: FxHashSet::default() }).break_value()\n     })\n }\n \n@@ -116,9 +114,6 @@ struct Search<'a, 'tcx> {\n \n     infcx: InferCtxt<'a, 'tcx>,\n \n-    /// Records first ADT that does not implement a structural-match trait.\n-    found: Option<NonStructuralMatchTy<'tcx>>,\n-\n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n@@ -135,38 +130,33 @@ impl Search<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n+    type BreakTy = NonStructuralMatchTy<'tcx>;\n+\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"Search visiting ty: {:?}\", ty);\n \n         let (adt_def, substs) = match *ty.kind() {\n             ty::Adt(adt_def, substs) => (adt_def, substs),\n             ty::Param(_) => {\n-                self.found = Some(NonStructuralMatchTy::Param);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Param);\n             }\n             ty::Dynamic(..) => {\n-                self.found = Some(NonStructuralMatchTy::Dynamic);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Dynamic);\n             }\n             ty::Foreign(_) => {\n-                self.found = Some(NonStructuralMatchTy::Foreign);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Foreign);\n             }\n             ty::Opaque(..) => {\n-                self.found = Some(NonStructuralMatchTy::Opaque);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Opaque);\n             }\n             ty::Projection(..) => {\n-                self.found = Some(NonStructuralMatchTy::Projection);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Projection);\n             }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                self.found = Some(NonStructuralMatchTy::Generator);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Generator);\n             }\n             ty::Closure(..) => {\n-                self.found = Some(NonStructuralMatchTy::Closure);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n@@ -206,8 +196,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n                 // First check all contained types and then tell the caller to continue searching.\n-                ty.super_visit_with(self);\n-                return ControlFlow::CONTINUE;\n+                return ty.super_visit_with(self);\n             }\n             ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n@@ -227,8 +216,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         if !self.type_marked_structural(ty) {\n             debug!(\"Search found ty: {:?}\", ty);\n-            self.found = Some(NonStructuralMatchTy::Adt(&adt_def));\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(NonStructuralMatchTy::Adt(&adt_def));\n         }\n \n         // structural-match does not care about the\n@@ -244,20 +232,11 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         // even though we skip super_visit_with, we must recur on\n         // fields of ADT.\n         let tcx = self.tcx();\n-        for field_ty in adt_def.all_fields().map(|field| field.ty(tcx, substs)) {\n+        adt_def.all_fields().map(|field| field.ty(tcx, substs)).try_for_each(|field_ty| {\n             let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n-\n-            if ty.visit_with(self).is_break() {\n-                // found an ADT without structural-match; halt visiting!\n-                assert!(self.found.is_some());\n-                return ControlFlow::BREAK;\n-            }\n-        }\n-\n-        // Even though we do not want to recur on substs, we do\n-        // want our caller to continue its own search.\n-        ControlFlow::CONTINUE\n+            ty.visit_with(self)\n+        })\n     }\n }\n "}]}