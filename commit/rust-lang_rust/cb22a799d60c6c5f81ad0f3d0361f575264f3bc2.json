{"sha": "cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjJhNzk5ZDYwYzZjNWY4MWFkMGYzZDAzNjFmNTc1MjY0ZjNiYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-18T12:44:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-18T12:44:24Z"}, "message": "Add Loc2IdMap", "tree": {"sha": "738b06fae809d32f76776d27c71fa869f5dd2544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/738b06fae809d32f76776d27c71fa869f5dd2544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "html_url": "https://github.com/rust-lang/rust/commit/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d8558cd5fe20a351496c39dbb8e15aa028803c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d8558cd5fe20a351496c39dbb8e15aa028803c", "html_url": "https://github.com/rust-lang/rust/commit/f1d8558cd5fe20a351496c39dbb8e15aa028803c"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "c6ed5107cb4b1f93da7b5e0a429b4fcb4dd10403", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -600,6 +600,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b4a1a09b522c9fb0654ff174609573545254bf34", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -11,6 +11,7 @@ rayon = \"1.0.2\"\n fst = \"0.3.1\"\n salsa = \"0.8.0\"\n rustc-hash = \"1.0\"\n+parking_lot = \"0.6.4\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "baf6d915a1fb838e328d94fd6389cf205f28632d", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -1,5 +1,7 @@\n use std::sync::Arc;\n \n+use parking_lot::Mutex;\n+\n use ra_editor::LineIndex;\n use ra_syntax::{SourceFileNode, SyntaxNode};\n use salsa::{self, Database};\n@@ -9,15 +11,19 @@ use crate::{\n     descriptors::{\n         DescriptorDatabase, FnScopesQuery, FnSyntaxQuery, ModuleScopeQuery, ModuleTreeQuery,\n         SubmodulesQuery,\n+        module::{ModuleSource, ModuleId},\n     },\n+    input::SourceRootId,\n     symbol_index::SymbolIndex,\n     syntax_ptr::SyntaxPtr,\n+    loc2id::Loc2IdMap,\n     Cancelable, Canceled, FileId,\n };\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n+    loc2id: Arc<Mutex<Loc2IdMap<(SourceRootId, ModuleSource), ModuleId>>>,\n }\n \n impl salsa::Database for RootDatabase {\n@@ -30,6 +36,7 @@ impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: Default::default(),\n+            loc2id: Default::default(),\n         };\n         db.query_mut(crate::input::SourceRootQuery)\n             .set(crate::input::WORKSPACE, Default::default());\n@@ -53,6 +60,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n+            loc2id: Arc::clone(&self.loc2id),\n         })\n     }\n }"}, {"sha": "055a56b54de2e7ec7fe318d85744e24fa3cca0bc", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -58,6 +58,15 @@ enum ModuleSourceNode {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n pub(crate) struct ModuleId(u32);\n \n+impl crate::loc2id::NumericId for ModuleId {\n+    fn from_u32(id: u32) -> Self {\n+        ModuleId(id)\n+    }\n+    fn to_u32(self) -> u32 {\n+        self.0\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub(crate) struct LinkId(u32);\n "}, {"sha": "eccda84a7f23e2387e94508ba7a54fd750b16e70", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -10,6 +10,7 @@ extern crate rustc_hash;\n extern crate salsa;\n \n mod db;\n+mod loc2id;\n mod input;\n mod imp;\n mod completion;"}, {"sha": "a53ce834857730f2061974223d31b18290f25f63", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "patch": "@@ -0,0 +1,64 @@\n+use std::hash::Hash;\n+\n+use rustc_hash::FxHashMap;\n+\n+/// There are two principle ways to refer to things:\n+///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n+///   - by their numeric id (module `ModuleId(42)`)\n+///\n+/// The first one is more powerful (you can actually find the thing in question\n+/// by id), but the second one is so much more compact.\n+///\n+/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n+/// bidirectional mapping between positional and numeric ids, we can use compact\n+/// representation wich still allows us to get the actual item\n+#[derive(Debug)]\n+pub(crate) struct Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    loc2id: FxHashMap<L, ID>,\n+    id2loc: FxHashMap<ID, L>,\n+}\n+\n+impl<L, ID> Default for Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    fn default() -> Self {\n+        Loc2IdMap {\n+            loc2id: FxHashMap::default(),\n+            id2loc: FxHashMap::default(),\n+        }\n+    }\n+}\n+\n+impl<L, ID> Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    pub fn loc2id(&mut self, loc: &L) -> ID {\n+        match self.loc2id.get(loc) {\n+            Some(id) => return id.clone(),\n+            None => (),\n+        }\n+        let id = self.loc2id.len();\n+        assert!(id < u32::max_value() as usize);\n+        let id = ID::from_u32(id as u32);\n+        self.loc2id.insert(loc.clone(), id.clone());\n+        self.id2loc.insert(id.clone(), loc.clone());\n+        id\n+    }\n+\n+    pub fn id2loc(&self, id: &ID) -> L {\n+        self.id2loc[id].clone()\n+    }\n+}\n+\n+pub(crate) trait NumericId: Clone + Eq + Hash {\n+    fn from_u32(id: u32) -> Self;\n+    fn to_u32(self) -> u32;\n+}"}]}