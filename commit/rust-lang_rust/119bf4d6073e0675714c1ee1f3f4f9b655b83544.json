{"sha": "119bf4d6073e0675714c1ee1f3f4f9b655b83544", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOWJmNGQ2MDczZTA2NzU3MTRjMWVlMWYzZjRmOWI2NTViODM1NDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-09T06:51:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:33:46Z"}, "message": "forward build-time env vars to binary, and test that we do", "tree": {"sha": "64b8a1c4cd6d7eab7a8a45f3fa3a004befadb63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b8a1c4cd6d7eab7a8a45f3fa3a004befadb63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119bf4d6073e0675714c1ee1f3f4f9b655b83544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119bf4d6073e0675714c1ee1f3f4f9b655b83544", "html_url": "https://github.com/rust-lang/rust/commit/119bf4d6073e0675714c1ee1f3f4f9b655b83544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119bf4d6073e0675714c1ee1f3f4f9b655b83544/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f58b3eabf641151c7a02aadf8a2911ad24f281", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f58b3eabf641151c7a02aadf8a2911ad24f281", "html_url": "https://github.com/rust-lang/rust/commit/10f58b3eabf641151c7a02aadf8a2911ad24f281"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "7ae3c7fe6cfdee61576bff82b03d1aab3d073f54", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -375,6 +375,16 @@ path = \"lib.rs\"\n }\n \n fn phase_cargo_miri(mut args: env::Args) {\n+    // Check for version and help flags even when invoked as `cargo-miri`.\n+    if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n+        show_help();\n+        return;\n+    }\n+    if has_arg_flag(\"--version\") || has_arg_flag(\"-V\") {\n+        show_version();\n+        return;\n+    }\n+\n     // Require a subcommand before any flags.\n     // We cannot know which of those flags take arguments and which do not,\n     // so we cannot detect subcommands later.\n@@ -570,6 +580,13 @@ fn phase_cargo_runner(binary: &str, binary_args: env::Args) {\n     let info: CrateRunInfo = serde_json::from_reader(file)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n \n+    // Set missing env vars.\n+    for (name, val) in info.env {\n+        if env::var_os(&name).is_none() {\n+            env::set_var(name, val);\n+        }\n+    }\n+\n     let mut cmd = miri();\n     // Forward rustc arguments. We need to patch \"--extern\" filenames because\n     // we forced a check-only build without cargo knowing about that: replace `.rlib` suffix by `.rmeta`.\n@@ -613,16 +630,6 @@ fn phase_cargo_runner(binary: &str, binary_args: env::Args) {\n }\n \n fn main() {\n-    // Check for version and help flags even when invoked as `cargo-miri`.\n-    if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n-        show_help();\n-        return;\n-    }\n-    if has_arg_flag(\"--version\") || has_arg_flag(\"-V\") {\n-        show_version();\n-        return;\n-    }\n-\n     // Rustc does not support non-UTF-8 arguments so we make no attempt either.\n     // (We do support non-UTF-8 environment variables though.)\n     let mut args = std::env::args();"}, {"sha": "1eb18fe88768a258571ebd9d284a3ee1fac29c1d", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -4,7 +4,7 @@ running 1 test\n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n \n-running 7 tests\n-.i.....\n-test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n+running 8 tests\n+..i.....\n+test result: ok. 7 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n "}, {"sha": "d426bdf6db63254f06e1183777a466460e3749c1", "filename": "test-cargo-miri/test.stdout.ref2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -7,5 +7,5 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n running 1 test\n test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 7 filtered out\n "}, {"sha": "bc4a7c47e9f510f3c252d04263f8daf6c82df6f5", "filename": "test-cargo-miri/test.stdout.ref3", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref3", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref3", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref3?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -7,5 +7,5 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n running 1 test\n test num_cpus ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 7 filtered out\n "}, {"sha": "32bbcf9bf275b8cefc82b27b4a4fab0c96827aa2", "filename": "test-cargo-miri/test.stdout.ref4", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref4", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftest.stdout.ref4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref4?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -1,5 +1,6 @@\n \n-running 7 tests\n+running 8 tests\n+test cargo_env ... ok\n test do_panic ... ok\n test does_not_work_on_miri ... ignored\n test entropy_rng ... ok\n@@ -8,5 +9,5 @@ test num_cpus ... ok\n test simple1 ... ok\n test simple2 ... ok\n \n-test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n+test result: ok. 7 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n "}, {"sha": "35e05368803a6e5002809c1e9bbf6b389ef6312e", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119bf4d6073e0675714c1ee1f3f4f9b655b83544/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=119bf4d6073e0675714c1ee1f3f4f9b655b83544", "patch": "@@ -42,6 +42,12 @@ fn num_cpus() {\n     assert_eq!(num_cpus::get(), 1);\n }\n \n+#[test]\n+fn cargo_env() {\n+    assert_eq!(env!(\"CARGO_PKG_NAME\"), \"cargo-miri-test\");\n+    env!(\"CARGO_BIN_EXE_cargo-miri-test\"); // Asserts that this exists.\n+}\n+\n #[test]\n #[should_panic(expected=\"Explicit panic\")]\n fn do_panic() { // In large, friendly letters :)"}]}