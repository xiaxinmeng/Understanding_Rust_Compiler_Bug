{"sha": "c871637e4374a7c59d39a70487a7ac46d3efa89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzE2MzdlNDM3NGE3YzU5ZDM5YTcwNDg3YTdhYzQ2ZDNlZmE4OWE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-29T00:33:59Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-29T04:47:47Z"}, "message": "Remove `resolver.record_resolution()`.", "tree": {"sha": "77cb10ac393e36dfa70e02fcc47a79d90a48e2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cb10ac393e36dfa70e02fcc47a79d90a48e2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c871637e4374a7c59d39a70487a7ac46d3efa89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c871637e4374a7c59d39a70487a7ac46d3efa89a", "html_url": "https://github.com/rust-lang/rust/commit/c871637e4374a7c59d39a70487a7ac46d3efa89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c871637e4374a7c59d39a70487a7ac46d3efa89a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe525dd1c49510246e8b68f1a33156f817f1292", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe525dd1c49510246e8b68f1a33156f817f1292", "html_url": "https://github.com/rust-lang/rust/commit/8fe525dd1c49510246e8b68f1a33156f817f1292"}], "stats": {"total": 39, "additions": 6, "deletions": 33}, "files": [{"sha": "e5a61908e0f563886310bb03b4da74e05746c379", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c871637e4374a7c59d39a70487a7ac46d3efa89a", "patch": "@@ -82,9 +82,6 @@ pub trait Resolver {\n     // Obtain the resolution for a node id\n     fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution>;\n \n-    // Record the resolution of a path or binding generated by the lowerer when expanding.\n-    fn record_resolution(&mut self, id: NodeId, def: Def);\n-\n     // We must keep the set of definitions up to date as we add nodes that weren't in the AST.\n     // This should only return `None` during testing.\n     fn definitions(&mut self) -> &mut Definitions;\n@@ -351,12 +348,7 @@ impl<'a> LoweringContext<'a> {\n             // Otherwise, the base path is an implicit `Self` type path,\n             // e.g. `Vec` in `Vec::new` or `<I as Iterator>::Item` in\n             // `<I as Iterator>::Item::default`.\n-            let ty = self.ty(p.span, hir::TyPath(hir::QPath::Resolved(qself, path)));\n-\n-            // Associate that innermost path type with the base Def.\n-            self.resolver.record_resolution(ty.id, resolution.base_def);\n-\n-            ty\n+            self.ty(p.span, hir::TyPath(hir::QPath::Resolved(qself, path)))\n         };\n \n         // Anything after the base path are associated \"extensions\",\n@@ -1902,10 +1894,8 @@ impl<'a> LoweringContext<'a> {\n             def: def,\n             segments: hir_vec![hir::PathSegment::from_name(id)],\n         })));\n-        let expr = self.expr(span, expr_path, ThinVec::new());\n-        self.resolver.record_resolution(expr.id, def);\n \n-        expr\n+        self.expr(span, expr_path, ThinVec::new())\n     }\n \n     fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {\n@@ -1918,10 +1908,7 @@ impl<'a> LoweringContext<'a> {\n                      attrs: ThinVec<Attribute>)\n                      -> hir::Expr {\n         let path = self.std_path(span, components, true);\n-        let def = path.def;\n-        let expr = self.expr(span, hir::ExprPath(hir::QPath::Resolved(None, P(path))), attrs);\n-        self.resolver.record_resolution(expr.id, def);\n-        expr\n+        self.expr(span, hir::ExprPath(hir::QPath::Resolved(None, P(path))), attrs)\n     }\n \n     fn expr_match(&mut self,\n@@ -1948,11 +1935,8 @@ impl<'a> LoweringContext<'a> {\n                        e: Option<P<hir::Expr>>,\n                        attrs: ThinVec<Attribute>) -> hir::Expr {\n         let path = self.std_path(span, components, false);\n-        let def = path.def;\n         let qpath = hir::QPath::Resolved(None, P(path));\n-        let expr = self.expr(span, hir::ExprStruct(qpath, fields, e), attrs);\n-        self.resolver.record_resolution(expr.id, def);\n-        expr\n+        self.expr(span, hir::ExprStruct(qpath, fields, e), attrs)\n     }\n \n     fn expr(&mut self, span: Span, node: hir::Expr_, attrs: ThinVec<Attribute>) -> hir::Expr {\n@@ -2021,16 +2005,13 @@ impl<'a> LoweringContext<'a> {\n                     subpats: hir::HirVec<P<hir::Pat>>)\n                     -> P<hir::Pat> {\n         let path = self.std_path(span, components, true);\n-        let def = path.def;\n         let qpath = hir::QPath::Resolved(None, P(path));\n         let pt = if subpats.is_empty() {\n             hir::PatKind::Path(qpath)\n         } else {\n             hir::PatKind::TupleStruct(qpath, subpats, None)\n         };\n-        let pat = self.pat(span, pt);\n-        self.resolver.record_resolution(pat.id, def);\n-        pat\n+        self.pat(span, pt)\n     }\n \n     fn pat_ident(&mut self, span: Span, name: Name) -> P<hir::Pat> {\n@@ -2047,7 +2028,6 @@ impl<'a> LoweringContext<'a> {\n             let def_index = defs.create_def_with_parent(parent_def, id, def_path_data);\n             DefId::local(def_index)\n         };\n-        self.resolver.record_resolution(id, Def::Local(def_id));\n \n         P(hir::Pat {\n             id: id,"}, {"sha": "bee79103b41853b6b5191b296342477dad323212", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c871637e4374a7c59d39a70487a7ac46d3efa89a", "patch": "@@ -10,7 +10,6 @@\n \n use rustc::hir;\n use rustc::hir::{map as hir_map, FreevarMap, TraitMap};\n-use rustc::hir::def::DefMap;\n use rustc::hir::lowering::lower_crate;\n use rustc_data_structures::blake2b::Blake2bHasher;\n use rustc_data_structures::fmt_wrap::FmtWrap;\n@@ -63,7 +62,6 @@ use derive_registrar;\n \n #[derive(Clone)]\n pub struct Resolutions {\n-    pub def_map: DefMap,\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n@@ -794,7 +792,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n             hir_ty_to_ty: NodeMap(),\n         },\n         resolutions: Resolutions {\n-            def_map: resolver.def_map,\n             freevars: resolver.freevars,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,"}, {"sha": "e1200149dcc41c6c9563fe189bb8100cab8191a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c871637e4374a7c59d39a70487a7ac46d3efa89a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c871637e4374a7c59d39a70487a7ac46d3efa89a", "patch": "@@ -1050,7 +1050,7 @@ pub struct Resolver<'a> {\n     // The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n \n-    pub def_map: DefMap,\n+    def_map: DefMap,\n     pub freevars: FreevarMap,\n     freevars_seen: NodeMap<NodeMap<usize>>,\n     pub export_map: ExportMap,\n@@ -1183,10 +1183,6 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         self.def_map.get(&id).cloned()\n     }\n \n-    fn record_resolution(&mut self, id: NodeId, def: Def) {\n-        self.def_map.insert(id, PathResolution::new(def));\n-    }\n-\n     fn definitions(&mut self) -> &mut Definitions {\n         &mut self.definitions\n     }"}]}