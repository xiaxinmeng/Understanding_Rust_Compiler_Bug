{"sha": "9e08ce7190dd63afc3e5a12f89134c760566513a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMDhjZTcxOTBkZDYzYWZjM2U1YTEyZjg5MTM0Yzc2MDU2NjUxM2E=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:26:52Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved InPlaceDrop into in_place_drop.rs", "tree": {"sha": "c4fb66820c9b9f782c3466860cb01263eef98fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4fb66820c9b9f782c3466860cb01263eef98fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e08ce7190dd63afc3e5a12f89134c760566513a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e08ce7190dd63afc3e5a12f89134c760566513a", "html_url": "https://github.com/rust-lang/rust/commit/9e08ce7190dd63afc3e5a12f89134c760566513a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e08ce7190dd63afc3e5a12f89134c760566513a/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f3fc5aedc9636ea580d8241746e06db6031270", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f3fc5aedc9636ea580d8241746e06db6031270", "html_url": "https://github.com/rust-lang/rust/commit/a3f3fc5aedc9636ea580d8241746e06db6031270"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "3a0ecc529c0063e6953d4d944afcce5c1f9b5aff", "filename": "library/alloc/src/vec/in_place_drop.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e08ce7190dd63afc3e5a12f89134c760566513a/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e08ce7190dd63afc3e5a12f89134c760566513a/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs?ref=9e08ce7190dd63afc3e5a12f89134c760566513a", "patch": "@@ -0,0 +1,24 @@\n+use core::ptr::{self};\n+use core::slice::{self};\n+\n+// A helper struct for in-place iteration that drops the destination slice of iteration,\n+// i.e. the head. The source slice (the tail) is dropped by IntoIter.\n+pub (super) struct InPlaceDrop<T> {\n+    pub (super) inner: *mut T,\n+    pub (super) dst: *mut T,\n+}\n+\n+impl<T> InPlaceDrop<T> {\n+    fn len(&self) -> usize {\n+        unsafe { self.dst.offset_from(self.inner) as usize }\n+    }\n+}\n+\n+impl<T> Drop for InPlaceDrop<T> {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe {\n+            ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n+        }\n+    }\n+}"}, {"sha": "08a920a9c60724740542f18e022c3c6211456cab", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e08ce7190dd63afc3e5a12f89134c760566513a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e08ce7190dd63afc3e5a12f89134c760566513a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9e08ce7190dd63afc3e5a12f89134c760566513a", "patch": "@@ -113,6 +113,10 @@ use self::set_len_on_drop::SetLenOnDrop;\n \n mod set_len_on_drop;\n \n+use self::in_place_drop::InPlaceDrop;\n+\n+mod in_place_drop;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -2233,28 +2237,6 @@ where\n     }\n }\n \n-// A helper struct for in-place iteration that drops the destination slice of iteration,\n-// i.e. the head. The source slice (the tail) is dropped by IntoIter.\n-struct InPlaceDrop<T> {\n-    inner: *mut T,\n-    dst: *mut T,\n-}\n-\n-impl<T> InPlaceDrop<T> {\n-    fn len(&self) -> usize {\n-        unsafe { self.dst.offset_from(self.inner) as usize }\n-    }\n-}\n-\n-impl<T> Drop for InPlaceDrop<T> {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n-        }\n-    }\n-}\n-\n impl<T> SpecFromIter<T, IntoIter<T>> for Vec<T> {\n     fn from_iter(iterator: IntoIter<T>) -> Self {\n         // A common case is passing a vector into a function which immediately"}]}