{"sha": "fe0e7c3cba6c8742f4e29920f4e7a52f88284a42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGU3YzNjYmE2Yzg3NDJmNGUyOTkyMGY0ZTdhNTJmODgyODRhNDI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-02T17:40:58Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-26T23:20:00Z"}, "message": "Update `framework` module docs", "tree": {"sha": "a5c6487808ef238fb52a62d70ec5c6f6e09c2c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c6487808ef238fb52a62d70ec5c6f6e09c2c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42", "html_url": "https://github.com/rust-lang/rust/commit/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7108cea14ee1517898cbfcb71f59706f30a4cf18", "url": "https://api.github.com/repos/rust-lang/rust/commits/7108cea14ee1517898cbfcb71f59706f30a4cf18", "html_url": "https://github.com/rust-lang/rust/commit/7108cea14ee1517898cbfcb71f59706f30a4cf18"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "8556be7e740623ab05e6297ce684ad4116f0ab57", "filename": "src/librustc_mir/dataflow/framework/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0e7c3cba6c8742f4e29920f4e7a52f88284a42/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs?ref=fe0e7c3cba6c8742f4e29920f4e7a52f88284a42", "patch": "@@ -1,26 +1,25 @@\n //! A framework that can express both [gen-kill] and generic dataflow problems.\n //!\n-//! There is another interface for dataflow in the compiler in `librustc_mir/dataflow/mod.rs`. The\n-//! interface in this module will eventually [replace that one][design-meeting].\n+//! To actually use this framework, you must implement either the `Analysis` or the\n+//! `GenKillAnalysis` trait. If your transfer function can be expressed with only gen/kill\n+//! operations, prefer `GenKillAnalysis` since it will run faster while iterating to fixpoint. The\n+//! `impls` module contains several examples of gen/kill dataflow analyses.\n //!\n-//! To actually use this framework, you must implement either the `Analysis` or the `GenKillAnalysis`\n-//! trait. If your transfer function can be expressed with only gen/kill operations, prefer\n-//! `GenKillAnalysis` since it will run faster while iterating to fixpoint. Create an `Engine` using\n-//! the appropriate constructor and call `iterate_to_fixpoint`. You can use a `ResultsCursor` to\n-//! inspect the fixpoint solution to your dataflow problem.\n+//! Create an `Engine` for your analysis using the `into_engine` method on the `Analysis` trait,\n+//! then call `iterate_to_fixpoint`. From there, you can use a `ResultsCursor` to inspect the\n+//! fixpoint solution to your dataflow problem, or implement the `ResultsVisitor` interface and use\n+//! `visit_results`. The following example uses the `ResultsCursor` approach.\n //!\n //! ```ignore(cross-crate-imports)\n-//! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>, did: DefId) {\n-//!     let analysis = MyAnalysis::new();\n-//!\n-//!     // If `MyAnalysis` implements `GenKillAnalysis`.\n-//!     let results = Engine::new_gen_kill(tcx, body, did, analysis).iterate_to_fixpoint();\n+//! use rustc_mir::dataflow::Analysis; // Makes `into_engine` available.\n //!\n-//!     // If `MyAnalysis` implements `Analysis`.\n-//!     // let results = Engine::new_generic(tcx, body, did, analysis).iterate_to_fixpoint();\n-//!\n-//!     let mut cursor = ResultsCursor::new(body, results);\n+//! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>, did: DefId) {\n+//!     let analysis = MyAnalysis::new()\n+//!         .into_engine(tcx, body, did)\n+//!         .iterate_to_fixpoint()\n+//!         .into_results_cursor(body);\n //!\n+//!     // Print the dataflow state *after* each statement in the start block.\n //!     for (_, statement_index) in body.block_data[START_BLOCK].statements.iter_enumerated() {\n //!         cursor.seek_after(Location { block: START_BLOCK, statement_index });\n //!         let state = cursor.get();\n@@ -30,7 +29,6 @@\n //! ```\n //!\n //! [gen-kill]: https://en.wikipedia.org/wiki/Data-flow_analysis#Bit_vector_problems\n-//! [design-meeting]https://github.com/rust-lang/compiler-team/issues/202\n \n use std::io;\n "}]}