{"sha": "16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "node_id": "C_kwDOAAsO6NoAKDE2YzFhOWRkN2NkNDk3YjA1MGJjOTU3Y2RmYTU0ZjhkM2Q2ZTk3ZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-23T09:16:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-23T09:16:32Z"}, "message": "Auto merge of #93220 - matthiaskrgr:rollup-9bkrlk0, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #90666 (Stabilize arc_new_cyclic)\n - #91122 (impl Not for !)\n - #93068 (Fix spacing for `\u00b7` between stability and source)\n - #93103 (Tweak `expr.await` desugaring `Span`)\n - #93113 (Unify search input and buttons size)\n - #93168 (update uclibc instructions for new toolchain, add link from platforms doc)\n - #93185 (rustdoc: Make some `pub` items crate-private)\n - #93196 (Remove dead code from build_helper)\n\nFailed merges:\n\n - #93188 (rustdoc: fix bump down typing search on Safari)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cd9ddef8fcb8d502aea788b7981b559ed5ee1d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9ddef8fcb8d502aea788b7981b559ed5ee1d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "html_url": "https://github.com/rust-lang/rust/commit/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13e8dd41d44a73664943169d5b7fe39b22c449f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13e8dd41d44a73664943169d5b7fe39b22c449f", "html_url": "https://github.com/rust-lang/rust/commit/d13e8dd41d44a73664943169d5b7fe39b22c449f"}, {"sha": "1a935a52be89f5b80b287a7c08a77b5dc1efaaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a935a52be89f5b80b287a7c08a77b5dc1efaaeb", "html_url": "https://github.com/rust-lang/rust/commit/1a935a52be89f5b80b287a7c08a77b5dc1efaaeb"}], "stats": {"total": 378, "additions": 191, "deletions": 187}, "files": [{"sha": "17bc8d7591b406e766d4a7bb4fe2a4a2bf745273", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -625,18 +625,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     }\n     /// }\n     /// ```\n-    fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n-        let dot_await_span = expr.span.shrink_to_hi().to(await_span);\n+    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let full_span = expr.span.to(dot_await_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 let mut err = struct_span_err!(\n                     self.sess,\n-                    await_span,\n+                    dot_await_span,\n                     E0728,\n                     \"`await` is only allowed inside `async` functions and blocks\"\n                 );\n-                err.span_label(await_span, \"only allowed inside `async` functions and blocks\");\n+                err.span_label(dot_await_span, \"only allowed inside `async` functions and blocks\");\n                 if let Some(item_sp) = self.current_item {\n                     err.span_label(item_sp, \"this is not `async`\");\n                 }\n@@ -646,7 +646,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            full_span,\n             self.allow_gen_future.clone(),\n         );\n         let expr = self.lower_expr_mut(expr);\n@@ -699,9 +699,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n             let x_ident = Ident::with_dummy_span(sym::result);\n-            let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n-            let x_expr = self.expr_ident(span, x_ident, x_pat_hid);\n-            let ready_field = self.single_pat_field(span, x_pat);\n+            let (x_pat, x_pat_hid) = self.pat_ident(gen_future_span, x_ident);\n+            let x_expr = self.expr_ident(gen_future_span, x_ident, x_pat_hid);\n+            let ready_field = self.single_pat_field(gen_future_span, x_pat);\n             let ready_pat = self.pat_lang_item_variant(\n                 span,\n                 hir::LangItem::PollReady,\n@@ -711,7 +711,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(span, expr_break, ThinVec::new()))\n+                this.arena.alloc(this.expr(gen_future_span, expr_break, ThinVec::new()))\n             });\n             self.arm(ready_pat, break_x)\n         };\n@@ -783,7 +783,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n         let into_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            dot_await_span,\n             self.allow_into_future.clone(),\n         );\n         let into_future_expr = self.expr_call_lang_item_fn("}, {"sha": "78bf28c843c7d385d4a720316c8543351600164b", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -374,33 +374,51 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a\n+    /// weak reference to the constructing `Rc<T>`.\n+    ///\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\n+    /// returns, calling [`upgrade`] on the weak reference inside `data_fn` will\n+    /// fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// struct Gadget {\n-    ///     self_weak: Weak<Self>,\n-    ///     // ... more fields\n+    ///     me: Weak<Gadget>,\n     /// }\n+    ///\n     /// impl Gadget {\n-    ///     pub fn new() -> Rc<Self> {\n-    ///         Rc::new_cyclic(|self_weak| {\n-    ///             Gadget { self_weak: self_weak.clone(), /* ... */ }\n-    ///         })\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Rc<Self> {\n+    ///         Rc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Rc<Self> {\n+    ///         self.me.upgrade().unwrap()\n     ///     }\n     /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n-    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]\n+    pub fn new_cyclic<F>(data_fn: F) -> Rc<T>\n+    where\n+        F: FnOnce(&Weak<T>) -> T,\n+    {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n         let uninit_ptr: NonNull<_> = Box::leak(box RcBox {"}, {"sha": "64f21d087da39d5d083d2c00efc5669160957b3e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -351,30 +351,51 @@ impl<T> Arc<T> {\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n-    /// Constructs a new `Arc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Arc<T>` using a closure `data_fn` that has access to\n+    /// a weak reference to the constructing `Arc<T>`.\n     ///\n-    /// # Examples\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Arc<T>` is not fully-constructed until\n+    /// `Arc<T>::new_cyclic` returns, calling [`upgrade`] on the weak\n+    /// reference inside `data_fn` will fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n+    ///\n+    /// # Example\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n-    ///\n     /// use std::sync::{Arc, Weak};\n     ///\n-    /// struct Foo {\n-    ///     me: Weak<Foo>,\n+    /// struct Gadget {\n+    ///     me: Weak<Gadget>,\n     /// }\n     ///\n-    /// let foo = Arc::new_cyclic(|me| Foo {\n-    ///     me: me.clone(),\n-    /// });\n+    /// impl Gadget {\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Arc<Self> {\n+    ///         Arc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Arc<Self> {\n+    ///         self.me.upgrade().unwrap()\n+    ///     }\n+    /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n-    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Arc<T> {\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]\n+    pub fn new_cyclic<F>(data_fn: F) -> Arc<T>\n+    where\n+        F: FnOnce(&Weak<T>) -> T,\n+    {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n         let uninit_ptr: NonNull<_> = Box::leak(box ArcInner {"}, {"sha": "7c664226fc2566d88a8ef47d431e10f1496a49cf", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -68,6 +68,17 @@ macro_rules! not_impl {\n \n not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n+#[stable(feature = \"not_never\", since = \"1.60.0\")]\n+#[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+impl const Not for ! {\n+    type Output = !;\n+\n+    #[inline]\n+    fn not(self) -> ! {\n+        match self {}\n+    }\n+}\n+\n /// The bitwise AND operator `&`.\n ///\n /// Note that `Rhs` is `Self` by default, but this is not mandatory."}, {"sha": "0c81cba35b3dfac7e66b92353bd1c375e5654761", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -232,3 +232,9 @@ fn deref_on_ref() {\n     let y = deref(&mut x);\n     assert_eq!(y, 4);\n }\n+\n+#[test]\n+#[allow(unreachable_code)]\n+fn test_not_never() {\n+    if !return () {}\n+}"}, {"sha": "28e95d81bb7e4cee4a791232466a244726dd1121", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -55,12 +55,6 @@ pub fn restore_library_path() {\n     }\n }\n \n-/// Run the command, printing what we are running.\n-pub fn run_verbose(cmd: &mut Command) {\n-    println!(\"running: {:?}\", cmd);\n-    run(cmd);\n-}\n-\n pub fn run(cmd: &mut Command) {\n     if !try_run(cmd) {\n         std::process::exit(1);\n@@ -108,16 +102,6 @@ pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     output.status.success()\n }\n \n-pub fn gnu_target(target: &str) -> &str {\n-    match target {\n-        \"i686-pc-windows-msvc\" => \"i686-pc-win32\",\n-        \"x86_64-pc-windows-msvc\" => \"x86_64-pc-win32\",\n-        \"i686-pc-windows-gnu\" => \"i686-w64-mingw32\",\n-        \"x86_64-pc-windows-gnu\" => \"x86_64-w64-mingw32\",\n-        s => s,\n-    }\n-}\n-\n pub fn make(host: &str) -> PathBuf {\n     if host.contains(\"dragonfly\")\n         || host.contains(\"freebsd\")"}, {"sha": "7898d2722cb1f6668eac62573df68dbffbe83bf7", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -15,6 +15,7 @@\n - [Platform Support](platform-support.md)\n     - [Template for target-specific documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n+    - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)"}, {"sha": "d0ce5cb994bb15c11a0930c0addcefdbbbeaa9a1", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -220,7 +220,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n-`armv7-unknown-linux-uclibceabihf` | \u2713 | ? | ARMv7 Linux uClibc\n+[`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux uClibc\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |"}, {"sha": "1f029406367a2f348a9a516e8750391566cf6408", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -18,7 +18,7 @@ This target is cross compiled, and requires a cross toolchain.  You can find sui\n \n Compiling rust for this target has been tested on `x86_64` linux hosts.  Other host types have not been tested, but may work, if you can find a suitable cross compilation toolchain for them.\n \n-If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2020.08-1.tar.bz2), and unpack it into a directory.\n+If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2021.11-1.tar.bz2), and unpack it into a directory.\n \n ### Configure rust\n "}, {"sha": "0c0787c6b2f7fa1422228fcd49fac8cb3ce9bf39", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -429,7 +429,7 @@ impl Item {\n \n     /// Convenience wrapper around [`Self::from_def_id_and_parts`] which converts\n     /// `hir_id` to a [`DefId`]\n-    pub fn from_hir_id_and_parts(\n+    crate fn from_hir_id_and_parts(\n         hir_id: hir::HirId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -438,7 +438,7 @@ impl Item {\n         Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name, kind, cx)\n     }\n \n-    pub fn from_def_id_and_parts(\n+    crate fn from_def_id_and_parts(\n         def_id: DefId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -456,7 +456,7 @@ impl Item {\n         )\n     }\n \n-    pub fn from_def_id_and_attrs_and_parts(\n+    crate fn from_def_id_and_attrs_and_parts(\n         def_id: DefId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -984,26 +984,26 @@ crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n crate struct ItemLink {\n     /// The original link written in the markdown\n-    pub(crate) link: String,\n+    crate link: String,\n     /// The link text displayed in the HTML.\n     ///\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n-    pub(crate) link_text: String,\n-    pub(crate) did: DefId,\n+    crate link_text: String,\n+    crate did: DefId,\n     /// The url fragment to append to the link\n-    pub(crate) fragment: Option<UrlFragment>,\n+    crate fragment: Option<UrlFragment>,\n }\n \n pub struct RenderedLink {\n     /// The text the link was original written as.\n     ///\n     /// This could potentially include disambiguators and backticks.\n-    pub(crate) original_text: String,\n+    crate original_text: String,\n     /// The text to display in the HTML\n-    pub(crate) new_text: String,\n+    crate new_text: String,\n     /// The URL to put in the `href`\n-    pub(crate) href: String,\n+    crate href: String,\n }\n \n /// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,"}, {"sha": "d9f6a9d02cab5656a68b1716fdabe3c810a25381", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -33,8 +33,8 @@ use crate::passes::{self, Condition::*};\n crate use rustc_session::config::{DebuggingOptions, Input, Options};\n \n crate struct ResolverCaches {\n-    pub all_traits: Option<Vec<DefId>>,\n-    pub all_trait_impls: Option<Vec<DefId>>,\n+    crate all_traits: Option<Vec<DefId>>,\n+    crate all_trait_impls: Option<Vec<DefId>>,\n }\n \n crate struct DocContext<'tcx> {"}, {"sha": "c3edefc469864eb47e70c537f389d5728f9d7cb9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -175,7 +175,7 @@ crate struct StylePath {\n }\n \n impl StylePath {\n-    pub fn basename(&self) -> Result<String, Error> {\n+    crate fn basename(&self) -> Result<String, Error> {\n         Ok(try_none!(try_none!(self.path.file_stem(), &self.path).to_str(), &self.path).to_string())\n     }\n }"}, {"sha": "fc03a64fcd642622bb73e80c13973ca964958805", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 19, "deletions": 65, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -896,11 +896,11 @@ table,\n \n .search-container {\n \tposition: relative;\n-\tmax-width: 960px;\n+\tdisplay: flex;\n+\theight: 34px;\n }\n-.search-container > div {\n-\tdisplay: inline-flex;\n-\twidth: calc(100% - 63px);\n+.search-container > * {\n+\theight: 100%;\n }\n .search-results-title {\n \tdisplay: inline;\n@@ -931,10 +931,8 @@ table,\n \tbackground-position: calc(100% - 1px) 56%;\n \tbackground-image: /* AUTOREPLACE: */url(\"down-arrow.svg\");\n }\n-.search-container > .top-button {\n-\tposition: absolute;\n-\tright: 0;\n-\ttop: 10px;\n+.search-container {\n+\tmargin-top: 4px;\n }\n .search-input {\n \t/* Override Normalize.css: it has a rule that sets\n@@ -947,23 +945,14 @@ table,\n \t-moz-box-sizing: border-box !important;\n \tbox-sizing: border-box !important;\n \toutline: none;\n-\tborder: none;\n-\tborder-radius: 1px;\n-\tmargin-top: 5px;\n-\tpadding: 10px 16px;\n+\tborder: 1px solid;\n+\tborder-radius: 2px;\n+\tpadding: 5px 8px;\n \tfont-size: 1.0625rem;\n \ttransition: border-color 300ms ease;\n-\ttransition: border-radius 300ms ease-in-out;\n-\ttransition: box-shadow 300ms ease-in-out;\n \twidth: 100%;\n }\n \n-.search-input:focus {\n-\tborder-radius: 2px;\n-\tborder: 0;\n-\toutline: 0;\n-}\n-\n .search-results {\n \tdisplay: none;\n \tpadding-bottom: 2em;\n@@ -1199,7 +1188,6 @@ a.test-arrow:hover{\n .out-of-band > span.since {\n \tposition: initial;\n \tfont-size: 1.25rem;\n-\tmargin-right: 5px;\n }\n \n h3.variant {\n@@ -1437,43 +1425,36 @@ pre.rust {\n \n .theme-picker {\n \tposition: absolute;\n-\tleft: -34px;\n-\ttop: 9px;\n+\tleft: -38px;\n+\ttop: 4px;\n }\n \n .theme-picker button {\n \toutline: none;\n }\n \n #settings-menu, #help-button {\n-\tposition: absolute;\n-\ttop: 10px;\n-}\n-\n-#settings-menu {\n-\tright: 0;\n+\tmargin-left: 4px;\n \toutline: none;\n }\n \n+#theme-picker, #copy-path {\n+\theight: 34px;\n+}\n #theme-picker, #settings-menu, #help-button, #copy-path {\n-\tpadding: 4px;\n-\t/* Rare exception to specifying font sizes in rem. Since these are acting\n-\t   as icons, it's okay to specify their sizes in pixels. */\n-\tfont-size: 16px;\n-\twidth: 27px;\n-\theight: 29px;\n+\tpadding: 5px;\n+\twidth: 33px;\n \tborder: 1px solid;\n-\tborder-radius: 3px;\n+\tborder-radius: 2px;\n \tcursor: pointer;\n }\n \n #help-button {\n-\tright: 30px;\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;\n \t/* Rare exception to specifying font sizes in rem. Since this is acting\n \t   as an icon, it's okay to specify their sizes in pixels. */\n-\tfont-size: 16px;\n+\tfont-size: 20px;\n \tpadding-top: 2px;\n }\n \n@@ -1910,10 +1891,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tdisplay: none !important;\n \t}\n \n-\t.theme-picker {\n-\t\tz-index: 1;\n-\t}\n-\n \t.notable-traits {\n \t\tposition: absolute;\n \t\tleft: -22px;\n@@ -2000,10 +1977,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\twidth: 100%;\n \t}\n \n-\t.search-container > div {\n-\t\twidth: calc(100% - 32px);\n-\t}\n-\n \t/* Display an alternating layout on tablets and phones */\n \t.search-results > a {\n \t\tborder-bottom: 1px solid #aaa9;\n@@ -2048,30 +2021,11 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\twidth: 50%;\n \t}\n \n-\t.search-container > div {\n-\t\tdisplay: block;\n-\t\twidth: calc(100% - 37px);\n-\t}\n-\n \t#crate-search {\n \t\tborder-radius: 4px;\n \t\tborder: 0;\n \t}\n \n-\t#theme-picker, #settings-menu {\n-\t\tpadding: 5px;\n-\t\twidth: 31px;\n-\t\theight: 31px;\n-\t}\n-\n-\t#theme-picker {\n-\t\tmargin-top: -2px;\n-\t}\n-\n-\t#settings-menu {\n-\t\ttop: 7px;\n-\t}\n-\n \t.docblock {\n \t\tmargin-left: 12px;\n \t}"}, {"sha": "b217d0e27f3fc5ebac478d11fef02b80cfcba901", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -233,22 +233,14 @@ details.undocumented > summary::before {\n \tfilter: invert(100%);\n }\n \n-#crate-search {\n-\tcolor: #c5c5c5;\n+#crate-search, .search-input {\n \tbackground-color: #141920;\n-\tbox-shadow: 0 0 0 1px #424c57,0 0 0 2px transparent;\n \tborder-color: #424c57;\n+\tcolor: #c5c5c5;\n }\n \n .search-input {\n \tcolor: #ffffff;\n-\tbackground-color: #141920;\n-\tbox-shadow: 0 0 0 1px #424c57,0 0 0 2px transparent;\n-\ttransition: box-shadow 150ms ease-in-out;\n-}\n-\n-#crate-search+.search-input:focus {\n-\tbox-shadow: 0 0 0 1px #148099,0 0 0 2px transparent;\n }\n \n .module-item .stab,"}, {"sha": "ead1e08386e8fa591bc41ae5c01ed0e916bfa9e1", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -194,27 +194,20 @@ details.undocumented > summary::before {\n \tfilter: invert(100%);\n }\n \n-#crate-search {\n+#crate-search, .search-input {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;\n \tborder-color: #000;\n-\tbox-shadow: 0 0 0 1px #000, 0 0 0 2px transparent;\n }\n \n .search-input {\n-\tcolor: #111;\n-\tbackground-color: #f0f0f0;\n-\tbox-shadow: 0 0 0 1px #000, 0 0 0 2px transparent;\n+\tborder-color: #e0e0e0;\n }\n \n .search-input:focus {\n \tborder-color: #008dfd;\n }\n \n-#crate-search + .search-input:focus {\n-\tbox-shadow: 0 0 8px 4px #078dd8;\n-}\n-\n .module-item .stab,\n .import-item .stab {\n \tcolor: #ddd;"}, {"sha": "cd77b80cd385f2eb8708e72758565ddd9ed39c4a", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -186,27 +186,16 @@ details.undocumented > summary::before {\n \tcolor: #999;\n }\n \n-#crate-search {\n+#crate-search, .search-input {\n \tcolor: #555;\n \tbackground-color: white;\n \tborder-color: #e0e0e0;\n-\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n-}\n-\n-.search-input {\n-\tcolor: #555;\n-\tbackground-color: white;\n-\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n }\n \n .search-input:focus {\n \tborder-color: #66afe9;\n }\n \n-#crate-search + .search-input:focus {\n-\tbox-shadow: 0 0 8px #078dd8;\n-}\n-\n .module-item .stab,\n .import-item .stab {\n \tcolor: #000;"}, {"sha": "3325515bef6067e79ba260d710ee565ce539df44", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -110,25 +110,23 @@ <h2 class=\"location\"></h2>\n                 <nav class=\"sub\"> {#- -#}\n                     <div class=\"theme-picker hidden\"> {#- -#}\n                         <button id=\"theme-picker\" aria-label=\"Pick another theme!\" aria-haspopup=\"menu\" title=\"themes\"> {#- -#}\n-                            <img width=\"18\" height=\"18\" alt=\"Pick another theme!\" {# -#}\n+                            <img width=\"22\" height=\"22\" alt=\"Pick another theme!\" {# -#}\n                              src=\"{{static_root_path|safe}}brush{{page.resource_suffix}}.svg\"> {#- -#}\n                         </button> {#- -#}\n                         <div id=\"theme-choices\" role=\"menu\"></div> {#- -#}\n                     </div> {#- -#}\n                     <form class=\"search-form\"> {#- -#}\n                         <div class=\"search-container\"> {#- -#}\n-                            <div>\n-                                <input {# -#}\n-                                    class=\"search-input\" {# -#}\n-                                    name=\"search\" {# -#}\n-                                    autocomplete=\"off\" {# -#}\n-                                    spellcheck=\"false\" {# -#}\n-                                    placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n-                                    type=\"search\"> {#- -#}\n-                            </div> {#- -#}\n+                            <input {# -#}\n+                                class=\"search-input\" {# -#}\n+                                name=\"search\" {# -#}\n+                                autocomplete=\"off\" {# -#}\n+                                spellcheck=\"false\" {# -#}\n+                                placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n+                                type=\"search\"> {#- -#}\n                             <button type=\"button\" id=\"help-button\" title=\"help\">?</button> {#- -#}\n                             <a id=\"settings-menu\" href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n-                                <img width=\"18\" height=\"18\" alt=\"Change settings\" {# -#}\n+                                <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n                                      src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n                             </a> {#- -#}\n                         </div> {#- -#}"}, {"sha": "1fa84e1c31f7010c5972e8c108b7baa654a958c6", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -16,7 +16,7 @@ <h1 class=\"fqn\"> {#- -#}\n     </h1> {#- -#}\n     <span class=\"out-of-band\"> {#- -#}\n         {% if !stability_since_raw.is_empty() %}\n-        {{- stability_since_raw|safe -}} \u00b7 {# -#}\n+        {{- stability_since_raw|safe }} \u00b7 {# -#}\n         {% endif %}\n         {%- match src_href -%}\n             {%- when Some with (href) -%}"}, {"sha": "e82ab122481d421c2b7a8aed98e488e30ff4b966", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -362,7 +362,7 @@ struct DiagnosticInfo<'a> {\n \n #[derive(Clone, Debug, Hash)]\n struct CachedLink {\n-    pub res: (Res, Option<UrlFragment>),\n+    res: (Res, Option<UrlFragment>),\n }\n \n struct LinkCollector<'a, 'tcx> {"}, {"sha": "8d23ca918012b8e2293604f4f888d858afdf9761", "filename": "src/test/rustdoc/source-version-separator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -1,10 +1,9 @@\n #![stable(feature = \"bar\", since = \"1.0\")]\n #![crate_name = \"foo\"]\n-\n #![feature(staged_api)]\n \n // @has foo/trait.Bar.html\n-// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0\u00b7 source \u00b7 '\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n #[stable(feature = \"bar\", since = \"1.0\")]\n pub trait Bar {\n     // @has - '//div[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n@@ -15,7 +14,7 @@ pub trait Bar {\n // @has - '//div[@id=\"implementors-list\"]//*[@class=\"rightside\"]' '4.0 \u00b7 source'\n \n // @has foo/struct.Foo.html\n-// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0\u00b7 source \u00b7 '\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n #[stable(feature = \"baz\", since = \"1.0\")]\n pub struct Foo;\n "}, {"sha": "1f1e1184dcc022e8991968208970709e1be3fde3", "filename": "src/test/ui/async-await/proper-span-for-type-error.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    Ok(a().await) //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "00ccde1bf99628bf9f7d9ad8d65f1feffcfc8a6c", "filename": "src/test/ui/async-await/proper-span-for-type-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    a().await //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "611dc0407bf96daa4e7fc1f1e08fb6a0359d5de2", "filename": "src/test/ui/async-await/proper-span-for-type-error.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/proper-span-for-type-error.rs:8:5\n+   |\n+LL |     a().await\n+   |     ^^^^^^^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), i32>`\n+           found unit type `()`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     Ok(a().await)\n+   |     +++         +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "190c7447dccbe3ffaa1d7453165227da4d3c6406", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -5,8 +5,8 @@\n #![deny(unreachable_code)]\n \n fn foo() {\n-    let x: ! = ! { return; }; //~ ERROR unreachable\n-    //~| ERROR cannot apply unary operator `!` to type `!`\n+    let x: ! = * { return; }; //~ ERROR unreachable\n+    //~| ERROR type `!` cannot be dereferenced\n }\n \n fn main() { }"}, {"sha": "0a763087c6f13c6cdd2b9f52abe76ad8d9a2f2cd", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=16c1a9dd7cd497b050bc957cdfa54f8d3d6e97f2", "patch": "@@ -1,13 +1,13 @@\n-error[E0600]: cannot apply unary operator `!` to type `!`\n+error[E0614]: type `!` cannot be dereferenced\n   --> $DIR/expr_unary.rs:8:16\n    |\n-LL |     let x: ! = ! { return; };\n-   |                ^^^^^^^^^^^^^ cannot apply unary operator `!`\n+LL |     let x: ! = * { return; };\n+   |                ^^^^^^^^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_unary.rs:8:16\n    |\n-LL |     let x: ! = ! { return; };\n+LL |     let x: ! = * { return; };\n    |                ^^^^------^^^\n    |                |   |\n    |                |   any code following this expression is unreachable\n@@ -21,4 +21,4 @@ LL | #![deny(unreachable_code)]\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0600`.\n+For more information about this error, try `rustc --explain E0614`."}]}