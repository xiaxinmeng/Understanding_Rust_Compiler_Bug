{"sha": "ccba72e660a6b1e183e7d96d1e51d5e4952ba053", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYmE3MmU2NjBhNmIxZTE4M2U3ZDk2ZDFlNTFkNWU0OTUyYmEwNTM=", "commit": {"author": {"name": "Nathan Kleyn", "email": "nathan@nathankleyn.com", "date": "2016-01-19T21:54:11Z"}, "committer": {"name": "Nathan Kleyn", "email": "nathan@nathankleyn.com", "date": "2016-01-19T21:54:11Z"}, "message": "Add examples of the Entry API to the HashMap documentation.\n\nResponding to [a thread of discussion on the Rust\nsubreddit](https://www.reddit.com/r/rust/comments/3racik/mutable_lifetimes_are_too_long_when_matching_an/),\nit was identified that the presence of the Entry API is not duly\npublicised. This commit aims to add some reasonable examples of\ncommon usages of this API to the main example secion of the `HashMap`\ndocumentation.\n\nThis is part of issue #29348.", "tree": {"sha": "a6e87703f433cab13659d82163f38c82007f0646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e87703f433cab13659d82163f38c82007f0646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccba72e660a6b1e183e7d96d1e51d5e4952ba053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccba72e660a6b1e183e7d96d1e51d5e4952ba053", "html_url": "https://github.com/rust-lang/rust/commit/ccba72e660a6b1e183e7d96d1e51d5e4952ba053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccba72e660a6b1e183e7d96d1e51d5e4952ba053/comments", "author": {"login": "nathankleyn", "id": 220826, "node_id": "MDQ6VXNlcjIyMDgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/220826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathankleyn", "html_url": "https://github.com/nathankleyn", "followers_url": "https://api.github.com/users/nathankleyn/followers", "following_url": "https://api.github.com/users/nathankleyn/following{/other_user}", "gists_url": "https://api.github.com/users/nathankleyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathankleyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathankleyn/subscriptions", "organizations_url": "https://api.github.com/users/nathankleyn/orgs", "repos_url": "https://api.github.com/users/nathankleyn/repos", "events_url": "https://api.github.com/users/nathankleyn/events{/privacy}", "received_events_url": "https://api.github.com/users/nathankleyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathankleyn", "id": 220826, "node_id": "MDQ6VXNlcjIyMDgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/220826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathankleyn", "html_url": "https://github.com/nathankleyn", "followers_url": "https://api.github.com/users/nathankleyn/followers", "following_url": "https://api.github.com/users/nathankleyn/following{/other_user}", "gists_url": "https://api.github.com/users/nathankleyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathankleyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathankleyn/subscriptions", "organizations_url": "https://api.github.com/users/nathankleyn/orgs", "repos_url": "https://api.github.com/users/nathankleyn/repos", "events_url": "https://api.github.com/users/nathankleyn/events{/privacy}", "received_events_url": "https://api.github.com/users/nathankleyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84157dbd4c7420e3e5b4dd22e4ff244889aa6275", "url": "https://api.github.com/repos/rust-lang/rust/commits/84157dbd4c7420e3e5b4dd22e4ff244889aa6275", "html_url": "https://github.com/rust-lang/rust/commit/84157dbd4c7420e3e5b4dd22e4ff244889aa6275"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "43bf86a00399c8da07108937e10afdf3da3a2fd9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ccba72e660a6b1e183e7d96d1e51d5e4952ba053/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccba72e660a6b1e183e7d96d1e51d5e4952ba053/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=ccba72e660a6b1e183e7d96d1e51d5e4952ba053", "patch": "@@ -272,6 +272,35 @@ fn test_resize_policy() {\n /// }\n /// ```\n ///\n+/// `HashMap` also implements an [`Entry API`](#method.entry), which allows\n+/// for more complex methods of getting, setting, updating and removing keys and\n+/// their values:\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `HashMap<&str, u8>` in this example).\n+/// let mut player_stats = HashMap::new();\n+///\n+/// fn random_stat_buff() -> u8 {\n+///   // could actually return some random value here - let's just return\n+///   // some fixed value for now\n+///   42\n+/// }\n+///\n+/// // insert a key only if it doesn't already exist\n+/// player_stats.entry(\"health\").or_insert(100);\n+///\n+/// // insert a key using a function that provides a new value only if it\n+/// // doesn't already exist\n+/// player_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n+///\n+/// // update a key, guarding against the key possibly not being set\n+/// let stat = player_stats.entry(\"attack\").or_insert(100);\n+/// *stat += random_stat_buff();\n+/// ```\n+///\n /// The easiest way to use `HashMap` with a custom type as key is to derive `Eq` and `Hash`.\n /// We must also derive `PartialEq`.\n ///"}]}