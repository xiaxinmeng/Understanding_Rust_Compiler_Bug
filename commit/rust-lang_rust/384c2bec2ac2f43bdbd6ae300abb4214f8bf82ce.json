{"sha": "384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NGMyYmVjMmFjMmY0M2JkYmQ2YWUzMDBhYmI0MjE0ZjhiZjgyY2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-18T07:05:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T07:05:58Z"}, "message": "Merge pull request #453 from RalfJung/zst\n\nZST pointers and pointer equality", "tree": {"sha": "be41cdef75be07b30ee56f2f090b2acb097d6b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be41cdef75be07b30ee56f2f090b2acb097d6b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboKPWCRBK7hj4Ov3rIwAAdHIIAIMXAeodCv0Zuyta0MEQAq5d\ncTF2Dz1DKOiYyVsPjHWliftGJemeDVKUrTE87GA6KgmK35XXvCKOcRg//WrGXjao\nn5X0KSpiWLkkHZmo2ABMkExTPLh6f69coVw7QZj33UNMb6eEFih0EXeKsWgexTvt\nHUWGFyzih/KJj2QjhLt6lrHiIvdbGxpDeT2x5QjPe/yj/ORJpUqkJGlLFzRNlzNc\n1UxI/Ce6vo2IpknGktSg3Lwl2hGQz1bKs/P656oh5N5ftdqM9j2XSQNMLOuA42pg\nUwpkDbUavSGO/IED+VgHYUP2Vf58s6QBSJgc9VbLP0kYvXXUOTCt2yrQVgLinrU=\n=kHIw\n-----END PGP SIGNATURE-----\n", "payload": "tree be41cdef75be07b30ee56f2f090b2acb097d6b5e\nparent cf44c366403bca55d6c83449a7ed1e076889438b\nparent 83ae0530a71ad21b13cb9a1acd3ce14e8d6688d4\nauthor Ralf Jung <post@ralfj.de> 1537254358 +0200\ncommitter GitHub <noreply@github.com> 1537254358 +0200\n\nMerge pull request #453 from RalfJung/zst\n\nZST pointers and pointer equality"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "html_url": "https://github.com/rust-lang/rust/commit/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf44c366403bca55d6c83449a7ed1e076889438b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf44c366403bca55d6c83449a7ed1e076889438b", "html_url": "https://github.com/rust-lang/rust/commit/cf44c366403bca55d6c83449a7ed1e076889438b"}, {"sha": "83ae0530a71ad21b13cb9a1acd3ce14e8d6688d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ae0530a71ad21b13cb9a1acd3ce14e8d6688d4", "html_url": "https://github.com/rust-lang/rust/commit/83ae0530a71ad21b13cb9a1acd3ce14e8d6688d4"}], "stats": {"total": 191, "additions": 150, "deletions": 41}, "files": [{"sha": "48282503c50790f0072bd2952974681ed49688c6", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -1 +1 @@\n-nightly-2018-09-17\n+nightly-2018-09-18"}, {"sha": "4e0fcd4f511ffcfec52716a911840842cb01ca23", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -46,7 +46,7 @@ pub enum MemoryKind {\n     C,\n     /// Part of env var emulation\n     Env,\n-    // mutable statics\n+    /// mutable statics\n     MutStatic,\n }\n "}, {"sha": "cf416c44c11fd41507621f8ae603a047a8488b53", "filename": "src/operator.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -152,18 +152,50 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             (Scalar::Ptr(ptr), Scalar::Bits { bits, size }) |\n             (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n+                let bits = bits as u64;\n+                let (alloc_size, alloc_align) = self.memory.get_size_and_align(ptr.alloc_id)?;\n \n+                // Case I: Comparing with NULL\n                 if bits == 0 {\n-                    // Nothing equals 0, not even dangling pointers. Ideally we would\n-                    // require them to be in-bounds of their (possilby dead) allocation,\n-                    // but with the allocation gonew e cannot check that.\n-                    false\n-                } else {\n-                    // Live pointers cannot equal an integer, but again do not\n-                    // allow comparing dead pointers.\n-                    self.memory.check_bounds(ptr, false)?;\n-                    false\n+                    // Test if the ptr is in-bounds. Then it cannot be NULL.\n+                    if ptr.offset <= alloc_size {\n+                        return Ok(false);\n+                    }\n+                }\n+                // Case II: Alignment gives it away\n+                if ptr.offset.bytes() % alloc_align.abi() == 0 {\n+                    // The offset maintains the allocation alignment, so we know `base+offset`\n+                    // is aligned by `alloc_align`.\n+                    // FIXME: We could be even more general, e.g. offset 2 into a 4-aligned\n+                    // allocation cannot equal 3.\n+                    if bits % alloc_align.abi() != 0 {\n+                        // The integer is *not* aligned. So they cannot be equal.\n+                        return Ok(false);\n+                    }\n                 }\n+                // Case III: The integer is too big, and the allocation goes on a bit\n+                // without wrapping around the address space.\n+                {\n+                    // Compute the highest address at which this allocation could live.\n+                    // Substract one more, because it must be possible to add the size\n+                    // to the base address without overflowing -- IOW, the very last address\n+                    // of the address space is never dereferencable (but it can be in-bounds, i.e.,\n+                    // one-past-the-end).\n+                    let max_base_addr =\n+                        ((1u128 << self.pointer_size().bits())\n+                         - u128::from(alloc_size.bytes())\n+                         - 1\n+                        ) as u64;\n+                    if let Some(max_addr) = max_base_addr.checked_add(ptr.offset.bytes()) {\n+                        if bits > max_addr {\n+                            // The integer is too big, this cannot possibly be equal\n+                            return Ok(false)\n+                        }\n+                    }\n+                }\n+\n+                // None of the supported cases.\n+                return err!(InvalidPointerMath);\n             }\n         })\n     }"}, {"sha": "d9f5ad4c696e161541b39c749cf7f3d56cf4af3a", "filename": "tests/compile-fail/maybe_null_pointer_deref_zst.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    // This pointer *could* be NULL so we cannot load from it, not even at ZST\n+    let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *const ();\n+    let _x: () = unsafe { *ptr }; //~ ERROR outside bounds\n+}"}, {"sha": "ef46a469c3ad158512bb31881b73d9e16f6110b0", "filename": "tests/compile-fail/maybe_null_pointer_write_zst.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    // This pointer *could* be NULL so we cannot load from it, not even at ZST.\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+    let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n+    unsafe { *ptr = zst_val; } //~ ERROR outside bounds\n+}"}, {"sha": "a8b23368616ea4301fb9e9ff676bcafb4764f13a", "filename": "tests/compile-fail/null_pointer_deref_zst.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    panic!(\"this should never print: {:?}\", x);\n+}"}, {"sha": "affb040bdedfa16410b5e6cb2d8e5428ef197ba2", "filename": "tests/compile-fail/null_pointer_write.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+}"}, {"sha": "433c69dbb032b646ba702865737df65a62f27a3c", "filename": "tests/compile-fail/null_pointer_write_zst.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+}"}, {"sha": "d05996a13d562fa26aa7977516b73c202031ec01", "filename": "tests/compile-fail/ptr_eq_dangling.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_dangling.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32; // soon-to-be dangling\n+    drop(b);\n+    let b = Box::new(0);\n+    let y = &*b as *const i32; // different allocation\n+    // We cannot compare these even though both are inbounds -- they *could* be\n+    // equal if memory was reused.\n+    assert!(x != y); //~ ERROR dangling pointer\n+}"}, {"sha": "10d5fbd517a3c7e8c7384e55dcf3dec26b8801d1", "filename": "tests/compile-fail/ptr_eq_integer.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_integer.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,8 @@\n+use std::mem;\n+\n+fn main() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32;\n+    // We cannot compare this with a non-NULL integer. After all, these *could* be equal (with the right base address).\n+    assert!(x != mem::align_of::<i32>() as *const i32); //~ ERROR invalid arithmetic on pointers\n+}"}, {"sha": "af4eed8d4e32ddb1acfa43e1e8e1305a7109504b", "filename": "tests/compile-fail/ptr_eq_out_of_bounds.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let b = Box::new(0);\n+    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n+    let b = Box::new(0);\n+    let y = &*b as *const i32; // different allocation\n+    // We cannot compare these even though both allocations are live -- they *could* be\n+    // equal (with the right base addresses).\n+    assert!(x != y); //~ ERROR outside bounds\n+}"}, {"sha": "3b7b51fc19954f50394f787b587b6b01836b88bb", "filename": "tests/compile-fail/ptr_eq_out_of_bounds_null.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let b = Box::new(0);\n+    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n+    // We cannot compare this with NULL. After all, this *could* be NULL (with the right base address).\n+    assert!(x != std::ptr::null()); //~ ERROR invalid arithmetic on pointers\n+}"}, {"sha": "ab79a64b56e2aa409accb767863eab6ba4e5ce9e", "filename": "tests/run-pass-fullmir/loop-break-value.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass-fullmir%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass-fullmir%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Floop-break-value.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -61,7 +61,9 @@ pub fn main() {\n             break Default::default()\n         };\n     };\n-    assert_eq!(trait_unified_2, [\"\"]);\n+    // compare lengths; ptr comparison is not deterministic\n+    assert_eq!(trait_unified_2.len(), 1);\n+    assert_eq!(trait_unified_2[0].len(), 0);\n \n     let trait_unified_3 = loop {\n         break if false {"}, {"sha": "ebae26996b7b1fd0e639e168e9cae6b8ab2ff992", "filename": "tests/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// FIXME: remove the next line when https://github.com/rust-lang/rust/issues/43358 is resolved\n-// compile-flags: -Zmir-opt-level=0\n-\n // Check that you can cast between different pointers to trait objects\n // whose vtable have the same kind (both lengths, or both trait pointers).\n "}, {"sha": "e100ad5f4692eea7443b2e3b147d8150e77b5613", "filename": "tests/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconst-vec-of-fns.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n /*!\n  * Try to double-check that static fns have the right size (with or\n  * without dummy env ptr, as appropriate) by iterating a size-2 array."}, {"sha": "137d84c256bef8f758b6f032daf85b237bf85180", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -10,8 +10,6 @@\n \n // Test that overloaded calls work with zero arity closures\n \n-// pretty-expanded FIXME #23616\n-\n fn main() {\n     let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n "}, {"sha": "2b26791328df611b04961851144db368422b2df3", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -1,3 +1,5 @@\n+use std::usize;\n+\n fn one_line_ref() -> i16 {\n     *&1\n }\n@@ -44,8 +46,8 @@ fn match_ref_mut() -> i8 {\n }\n \n fn dangling_pointer() -> *const i32 {\n-    let b = Box::new(42);\n-    &*b as *const i32\n+    let b = Box::new((42, 42)); // make it bigger than the alignment, so that there is some \"room\" after this pointer\n+    &b.0 as *const i32\n }\n \n fn main() {\n@@ -55,7 +57,30 @@ fn main() {\n     assert_eq!(basic_ref_mut_var(), 3);\n     assert_eq!(tuple_ref_mut(), (10, 22));\n     assert_eq!(match_ref_mut(), 42);\n-    // FIXME: improve this test... how?\n+\n+    // Compare even dangling pointers with NULL, and with others in the same allocation, including\n+    // out-of-bounds.\n     assert!(dangling_pointer() != std::ptr::null());\n     assert!(match dangling_pointer() as usize { 0 => false, _ => true });\n+    let dangling = dangling_pointer();\n+    assert!(dangling == dangling);\n+    assert!(dangling.wrapping_add(1) != dangling);\n+    assert!(dangling.wrapping_sub(1) != dangling);\n+\n+    // Compare pointer with BIG integers\n+    let dangling = dangling as usize;\n+    assert!(dangling != usize::MAX);\n+    assert!(dangling != usize::MAX - 1);\n+    assert!(dangling != usize::MAX - 2);\n+    assert!(dangling != usize::MAX - 3); // this is even 4-aligned, but it still cannot be equal because of the extra \"room\" after this pointer\n+    assert_eq!((usize::MAX - 3) % 4, 0); // just to be sure we got this right\n+\n+    // Compare pointer with unaligned integers\n+    assert!(dangling != 1usize);\n+    assert!(dangling != 2usize);\n+    assert!(dangling != 3usize);\n+    // 4 is a possible choice! So we cannot compare with that.\n+    assert!(dangling != 5usize);\n+    assert!(dangling != 6usize);\n+    assert!(dangling != 7usize);\n }"}, {"sha": "96f1217a254ed2b89fa78fcba3312d7e40298a0a", "filename": "tests/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -22,8 +22,6 @@\n // doing region-folding, when really all clients of the region-folding\n // case only want to see FREE lifetime variables, not bound ones.\n \n-// pretty-expanded FIXME #23616\n-\n #![allow(unused_features)]\n #![feature(box_syntax)]\n "}, {"sha": "66f0c84e23c1a2d4064e12c507ca2485297278b2", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a class with only sendable fields can be sent\n \n-// pretty-expanded FIXME #23616\n-\n use std::sync::mpsc::channel;\n \n #[allow(dead_code)]"}, {"sha": "c3bae4062fc29565adf97af389313054dc57de42", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=384c2bec2ac2f43bdbd6ae300abb4214f8bf82ce", "patch": "@@ -11,8 +11,23 @@ fn use_zst() -> A {\n }\n \n fn main() {\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+\n     assert_eq!(zst_ret(), A);\n     assert_eq!(use_zst(), A);\n-    let x = 42 as *mut ();\n-    unsafe { *x = (); }\n+    let x = 42 as *mut [u8; 0];\n+    // reading and writing is okay\n+    unsafe { *x = zst_val; }\n+    unsafe { let _y = *x; }\n+\n+    // We should even be able to use \"true\" pointers for ZST when the allocation has been\n+    // removed already.  The box is for a non-ZST to make sure there actually is an allocation.\n+    let mut x_box = Box::new(((), 1u8));\n+    let x = &mut x_box.0 as *mut _ as *mut [u8; 0];\n+    drop(x_box);\n+    // reading and writing is okay\n+    unsafe { *x = zst_val; }\n+    unsafe { let _y = *x; }\n }"}, {"sha": "c2d7b88ea0757f99435e400cbe2fd1dc6d688d97", "filename": "tests/run-pass/zst2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf44c366403bca55d6c83449a7ed1e076889438b/tests%2Frun-pass%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf44c366403bca55d6c83449a7ed1e076889438b/tests%2Frun-pass%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst2.rs?ref=cf44c366403bca55d6c83449a7ed1e076889438b", "patch": "@@ -1,12 +0,0 @@\n-#![allow(dead_code)]\n-\n-#[derive(Debug)]\n-struct A;\n-\n-fn main() {\n-    // can't use assert_eq, b/c that will try to print the pointer addresses with full MIR enabled\n-\n-    // FIXME: Test disabled for now, see <https://github.com/solson/miri/issues/131>.\n-    //assert!(&A as *const A as *const () == &() as *const _);\n-    //assert!(&A as *const A == &A as *const A);\n-}"}]}