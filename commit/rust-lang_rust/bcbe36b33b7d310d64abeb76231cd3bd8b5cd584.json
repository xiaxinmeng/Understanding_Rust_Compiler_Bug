{"sha": "bcbe36b33b7d310d64abeb76231cd3bd8b5cd584", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYmUzNmIzM2I3ZDMxMGQ2NGFiZWI3NjIzMWNkM2JkOGI1Y2Q1ODQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-13T13:10:03Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-13T13:13:35Z"}, "message": "Make sure simplify_type simplifies all pointer types\n\nThis is needed to prevent infinite recursion when computing\nthe shape of an enum type that contains pointers to itself.\n\nCloses #1821", "tree": {"sha": "892003b2141beb409b578d53c56d143d0d992cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892003b2141beb409b578d53c56d143d0d992cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584", "html_url": "https://github.com/rust-lang/rust/commit/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8309d50ff4ead4dd58b8f3c8388d5668e2e0d152", "url": "https://api.github.com/repos/rust-lang/rust/commits/8309d50ff4ead4dd58b8f3c8388d5668e2e0d152", "html_url": "https://github.com/rust-lang/rust/commit/8309d50ff4ead4dd58b8f3c8388d5668e2e0d152"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "2ab8990ff983d153d4e91d074cf68c4aad98f1a2", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcbe36b33b7d310d64abeb76231cd3bd8b5cd584/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=bcbe36b33b7d310d64abeb76231cd3bd8b5cd584", "patch": "@@ -666,7 +666,8 @@ fn static_size_of_enum(cx: @crate_ctxt, t: ty::t)\n         let max_size = 0u;\n         let variants = ty::enum_variants(cx.tcx, tid);\n         for variant: ty::variant_info in *variants {\n-            let tup_ty = simplify_type(cx, ty::mk_tup(cx.tcx, variant.args));\n+            let tup_ty = simplify_type(cx.tcx,\n+                                       ty::mk_tup(cx.tcx, variant.args));\n             // Perform any type parameter substitutions.\n \n             tup_ty = ty::substitute_type_params(cx.tcx, subtys, tup_ty);\n@@ -776,29 +777,26 @@ fn dynamic_metrics(cx: @block_ctxt, t: ty::t) -> metrics {\n // to have (a) the same size as the type that was passed in; (b) to be non-\n // recursive. This is done by replacing all boxes in a type with boxed unit\n // types.\n-fn simplify_type(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n-    fn simplifier(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n+// This should reduce all pointers to some simple pointer type, to\n+// ensure that we don't recurse endlessly when computing the size of a\n+// nominal type that has pointers to itself in it.\n+fn simplify_type(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n+    fn nilptr(tcx: ty::ctxt) -> ty::t {\n+        ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx), mut: ast::imm})\n+    }\n+    fn simplifier(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n         alt ty::get(typ).struct {\n-          ty::ty_box(_) | ty::ty_opaque_box {\n-            ret ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx));\n-          }\n-          ty::ty_uniq(_) {\n-            ret ty::mk_imm_uniq(ccx.tcx, ty::mk_nil(ccx.tcx));\n-          }\n-          ty::ty_fn(_) {\n-            ret ty::mk_tup(ccx.tcx,\n-                           [ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx)),\n-                            ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx))]);\n-          }\n+          ty::ty_box(_) | ty::ty_opaque_box | ty::ty_uniq(_) | ty::ty_vec(_) |\n+          ty::ty_ptr(_) { nilptr(tcx) }\n+          ty::ty_fn(_) { ty::mk_tup(tcx, [nilptr(tcx), nilptr(tcx)]) }\n           ty::ty_res(_, sub, tps) {\n-            let sub1 = ty::substitute_type_params(ccx.tcx, tps, sub);\n-            ret ty::mk_tup(ccx.tcx,\n-                           [ty::mk_int(ccx.tcx), simplify_type(ccx, sub1)]);\n+            let sub1 = ty::substitute_type_params(tcx, tps, sub);\n+            ty::mk_tup(tcx, [ty::mk_int(tcx), simplify_type(tcx, sub1)])\n           }\n-          _ { ret typ; }\n+          _ { typ }\n         }\n     }\n-    ret ty::fold_ty(ccx.tcx, ty::fm_general(bind simplifier(ccx, _)), typ);\n+    ty::fold_ty(tcx, ty::fm_general(bind simplifier(tcx, _)), typ)\n }\n \n // Given a tag type `ty`, returns the offset of the payload."}]}