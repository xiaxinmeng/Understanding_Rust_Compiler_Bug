{"sha": "36e3d64c3e6030d661d48bf881ed2fef58170be6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZTNkNjRjM2U2MDMwZDY2MWQ0OGJmODgxZWQyZmVmNTgxNzBiZTY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-12T18:05:03Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-12T20:50:45Z"}, "message": "Fix a lot of the handling of default methods and type parameters. Closes #4099, #4102.", "tree": {"sha": "2a32ee9a97f3173df86b3c13c677ade6095e345f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a32ee9a97f3173df86b3c13c677ade6095e345f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e3d64c3e6030d661d48bf881ed2fef58170be6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e3d64c3e6030d661d48bf881ed2fef58170be6", "html_url": "https://github.com/rust-lang/rust/commit/36e3d64c3e6030d661d48bf881ed2fef58170be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e3d64c3e6030d661d48bf881ed2fef58170be6/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5835158170cd4cb0abc0518de37d67b3f887ad2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5835158170cd4cb0abc0518de37d67b3f887ad2e", "html_url": "https://github.com/rust-lang/rust/commit/5835158170cd4cb0abc0518de37d67b3f887ad2e"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "b5a298464d7b8e7083567a9e53f6185388b51fe3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=36e3d64c3e6030d661d48bf881ed2fef58170be6", "patch": "@@ -506,9 +506,11 @@ pub fn get_res_dtor(ccx: @CrateContext,\n             did\n         };\n         assert_eq!(did.crate, ast::local_crate);\n+        let tsubsts = ty::substs { self_r: None, self_ty: None,\n+                                  tps: /*bad*/ substs.to_owned() };\n         let (val, _) = monomorphize::monomorphic_fn(ccx,\n                                                     did,\n-                                                    substs,\n+                                                    &tsubsts,\n                                                     None,\n                                                     None,\n                                                     None);"}, {"sha": "52df3abfbb5b074abc17d568f323b7b4957ff7db", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=36e3d64c3e6030d661d48bf881ed2fef58170be6", "patch": "@@ -41,6 +41,7 @@ use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::type_of;\n use middle::ty;\n+use middle::subst::Subst;\n use middle::typeck;\n use util::ppaux::Repr;\n \n@@ -230,11 +231,75 @@ pub fn trans_fn_ref_with_vtables(\n     // Polytype of the function item (may have type params)\n     let fn_tpt = ty::lookup_item_type(tcx, def_id);\n \n-    // Modify the def_id if this is a default method; we want to be\n-    // monomorphizing the trait's code.\n-    let (def_id, opt_impl_did) = match tcx.provided_method_sources.find(&def_id) {\n-        None => (def_id, None),\n-        Some(source) => (source.method_id, Some(source.impl_id))\n+    let substs = ty::substs { self_r: None, self_ty: None,\n+                              tps: /*bad*/ type_params.to_owned() };\n+\n+\n+    // We need to do a bunch of special handling for default methods.\n+    // We need to modify the def_id and our substs in order to monomorphize\n+    // the function.\n+    let (def_id, opt_impl_did, substs) = match tcx.provided_method_sources.find(&def_id) {\n+        None => (def_id, None, substs),\n+        Some(source) => {\n+            // There are two relevant substitutions when compiling\n+            // default methods. First, there is the substitution for\n+            // the type parameters of the impl we are using and the\n+            // method we are calling. This substitution is the substs\n+            // argument we already have.\n+            // In order to compile a default method, though, we need\n+            // to consider another substitution: the substitution for\n+            // the type parameters on trait; the impl we are using\n+            // implements the trait at some particular type\n+            // parameters, and we need to substitute for those first.\n+            // So, what we need to do is find this substitution and\n+            // compose it with the one we already have.\n+\n+            // In order to find the substitution for the trait params,\n+            // we look up the impl in the ast map, find its trait_ref\n+            // id, then look up its trait ref. I feel like there\n+            // should be a better way.\n+            let map_node = session::expect(\n+                ccx.sess,\n+                ccx.tcx.items.find_copy(&source.impl_id.node),\n+                || fmt!(\"couldn't find node while monomorphizing \\\n+                         default method: %?\", source.impl_id.node));\n+            let item = match map_node {\n+                ast_map::node_item(item, _) => item,\n+                _ => ccx.tcx.sess.bug(\"Not an item\")\n+            };\n+            let ast_trait_ref = match copy item.node {\n+                ast::item_impl(_, Some(tr), _, _) => tr,\n+                _ => ccx.tcx.sess.bug(\"Not an impl with trait_ref\")\n+            };\n+            let trait_ref = ccx.tcx.trait_refs.get(&ast_trait_ref.ref_id);\n+\n+            // The substs from the trait_ref only substitues for the\n+            // trait parameters. Our substitution also needs to be\n+            // able to substitute for the actual method type\n+            // params. To do this, we figure out how many method\n+            // parameters there are and pad out the substitution with\n+            // substitution for the variables.\n+            let item_ty = ty::lookup_item_type(tcx, source.method_id);\n+            let num_params = item_ty.generics.type_param_defs.len() -\n+                trait_ref.substs.tps.len();\n+            let id_subst = do vec::from_fn(num_params) |i| {\n+                ty::mk_param(tcx, i, ast::def_id {crate: 0, node: 0})\n+            };\n+            // Merge the two substitions together now.\n+            let first_subst = ty::substs {tps: trait_ref.substs.tps + id_subst,\n+                                          .. trait_ref.substs};\n+\n+            // And compose them.\n+            let new_substs = first_subst.subst(tcx, &substs);\n+            debug!(\"trans_fn_with_vtables - default method: \\\n+                    substs = %s, id_subst = %s, trait_subst = %s, \\\n+                    first_subst = %s, new_subst = %s\",\n+                   substs.repr(tcx),\n+                   id_subst.repr(tcx), trait_ref.substs.repr(tcx),\n+                   first_subst.repr(tcx), new_substs.repr(tcx));\n+\n+            (source.method_id, Some(source.impl_id), new_substs)\n+        }\n     };\n \n     // Check whether this fn has an inlined copy and, if so, redirect\n@@ -279,7 +344,7 @@ pub fn trans_fn_ref_with_vtables(\n         assert_eq!(def_id.crate, ast::local_crate);\n \n         let mut (val, must_cast) =\n-            monomorphize::monomorphic_fn(ccx, def_id, type_params,\n+            monomorphize::monomorphic_fn(ccx, def_id, &substs,\n                                          vtables, opt_impl_did, Some(ref_id));\n         if must_cast && ref_id != 0 {\n             // Monotype of the REFERENCE to the function (type params"}, {"sha": "35ff3a56df4e745265a333507269923e0f2dbbf7", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=36e3d64c3e6030d661d48bf881ed2fef58170be6", "patch": "@@ -43,7 +43,7 @@ use syntax::abi::AbiSet;\n \n pub fn monomorphic_fn(ccx: @CrateContext,\n                       fn_id: ast::def_id,\n-                      real_substs: &[ty::t],\n+                      real_substs: &ty::substs,\n                       vtables: Option<typeck::vtable_res>,\n                       impl_did_opt: Option<ast::def_id>,\n                       ref_id: Option<ast::node_id>)\n@@ -61,17 +61,17 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n            impl_did_opt.repr(ccx.tcx),\n            ref_id);\n \n-    assert!(real_substs.all(|t| !ty::type_needs_infer(*t)));\n+    assert!(real_substs.tps.all(|t| !ty::type_needs_infer(*t)));\n     let _icx = ccx.insn_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n-    let substs = vec::map(real_substs, |t| {\n+    let substs = vec::map(real_substs.tps, |t| {\n         match normalize_for_monomorphization(ccx.tcx, *t) {\n           Some(t) => { must_cast = true; t }\n           None => *t\n         }\n     });\n \n-    for real_substs.each() |s| { assert!(!ty::type_has_params(*s)); }\n+    for real_substs.tps.each() |s| { assert!(!ty::type_has_params(*s)); }\n     for substs.each() |s| { assert!(!ty::type_has_params(*s)); }\n     let param_uses = type_use::type_uses_for(ccx, fn_id, substs.len());\n     let hash_id = make_mono_id(ccx, fn_id, substs, vtables, impl_did_opt,\n@@ -145,17 +145,8 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n       ast_map::node_struct_ctor(_, i, pt) => (pt, i.ident, i.span)\n     };\n \n-    // Look up the impl type if we're translating a default method.\n-    // XXX: Generics.\n-    let impl_ty_opt;\n-    match impl_did_opt {\n-        None => impl_ty_opt = None,\n-        Some(impl_did) => {\n-            impl_ty_opt = Some(ty::lookup_item_type(ccx.tcx, impl_did).ty);\n-        }\n-    }\n-\n-    let mono_ty = ty::subst_tps(ccx.tcx, substs, impl_ty_opt, llitem_ty);\n+    let mono_ty = ty::subst_tps(ccx.tcx, substs,\n+                                real_substs.self_ty, llitem_ty);\n     let llfty = type_of_fn_from_ty(ccx, mono_ty);\n \n     ccx.stats.n_monos += 1;\n@@ -186,7 +177,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         tys: substs,\n         vtables: vtables,\n         type_param_defs: tpt.generics.type_param_defs,\n-        self_ty: impl_ty_opt\n+        self_ty: real_substs.self_ty\n     });\n \n     let lldecl = match map_node {"}, {"sha": "adabafc082a0c2d71adf74f03e2c3c4c19cddefd", "filename": "src/test/run-pass/trait-default-method-bound-subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs?ref=36e3d64c3e6030d661d48bf881ed2fef58170be6", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+#[allow(default_methods)];\n \n trait A<T> {\n-    fn g<U>(x: T, y: U) -> (T, U) { (x, y) }\n+    fn g<U>(&self, x: T, y: U) -> (T, U) { (x, y) }\n }\n \n impl A<int> for int { }"}, {"sha": "dee9782d5ae707e29e79c95982b335c062c75b5d", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3d64c3e6030d661d48bf881ed2fef58170be6/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=36e3d64c3e6030d661d48bf881ed2fef58170be6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+#[allow(default_methods)];\n \n trait A<T> {\n     fn g(&self, x: T) -> T { x }"}]}