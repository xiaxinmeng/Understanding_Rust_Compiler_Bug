{"sha": "3d230af80b01ebe62d27de8436832d0e7ab9ed94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjMwYWY4MGIwMWViZTYyZDI3ZGU4NDM2ODMyZDBlN2FiOWVkOTQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-09-27T22:47:41Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-10-05T02:50:53Z"}, "message": "Move newtype_index to rustc_data_structures", "tree": {"sha": "9ccd8e970d32be3baa66a3cd8c687e7dedb3198a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ccd8e970d32be3baa66a3cd8c687e7dedb3198a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d230af80b01ebe62d27de8436832d0e7ab9ed94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d230af80b01ebe62d27de8436832d0e7ab9ed94", "html_url": "https://github.com/rust-lang/rust/commit/3d230af80b01ebe62d27de8436832d0e7ab9ed94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d230af80b01ebe62d27de8436832d0e7ab9ed94/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5cef21569115d41171114ec07bb144a3875afc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cef21569115d41171114ec07bb144a3875afc3", "html_url": "https://github.com/rust-lang/rust/commit/f5cef21569115d41171114ec07bb144a3875afc3"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "3322142c9cf28c3b0e1e9c94e879b21988dd756d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3d230af80b01ebe62d27de8436832d0e7ab9ed94", "patch": "@@ -71,7 +71,7 @@ extern crate graphviz;\n extern crate libc;\n extern crate owning_ref;\n extern crate rustc_back;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n extern crate serialize;\n extern crate rustc_const_math;\n extern crate rustc_errors as errors;"}, {"sha": "b909269e1538e554f4a1479584ad98b4d4d1eb26", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3d230af80b01ebe62d27de8436832d0e7ab9ed94", "patch": "@@ -43,30 +43,6 @@ pub mod visit;\n pub mod transform;\n pub mod traversal;\n \n-macro_rules! newtype_index {\n-    ($name:ident, $debug_name:expr) => (\n-        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-         RustcEncodable, RustcDecodable)]\n-        pub struct $name(u32);\n-\n-        impl Idx for $name {\n-            fn new(value: usize) -> Self {\n-                assert!(value < (u32::MAX) as usize);\n-                $name(value as u32)\n-            }\n-            fn index(self) -> usize {\n-                self.0 as usize\n-            }\n-        }\n-\n-        impl Debug for $name {\n-            fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n-                write!(fmt, \"{}{}\", $debug_name, self.0)\n-            }\n-        }\n-    )\n-}\n-\n /// Types for locals\n type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n "}, {"sha": "7674018075cc592df6ccbc86c4e14aa59ac34626", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d230af80b01ebe62d27de8436832d0e7ab9ed94/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=3d230af80b01ebe62d27de8436832d0e7ab9ed94", "patch": "@@ -38,6 +38,31 @@ impl Idx for u32 {\n     fn index(self) -> usize { self as usize }\n }\n \n+#[macro_export]\n+macro_rules! newtype_index {\n+    ($name:ident, $debug_name:expr) => (\n+        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n+         RustcEncodable, RustcDecodable)]\n+        pub struct $name(u32);\n+\n+        impl Idx for $name {\n+            fn new(value: usize) -> Self {\n+                assert!(value < (u32::MAX) as usize);\n+                $name(value as u32)\n+            }\n+            fn index(self) -> usize {\n+                self.0 as usize\n+            }\n+        }\n+\n+        impl Debug for $name {\n+            fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+                write!(fmt, \"{}{}\", $debug_name, self.0)\n+            }\n+        }\n+    )\n+}\n+\n #[derive(Clone, PartialEq, Eq)]\n pub struct IndexVec<I: Idx, T> {\n     pub raw: Vec<T>,"}]}