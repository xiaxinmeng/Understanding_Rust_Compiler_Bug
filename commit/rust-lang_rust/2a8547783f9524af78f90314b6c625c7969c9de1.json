{"sha": "2a8547783f9524af78f90314b6c625c7969c9de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODU0Nzc4M2Y5NTI0YWY3OGY5MDMxNGI2YzYyNWM3OTY5YzlkZTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:59Z"}, "message": "rollup merge of #20194: nick29581/dst-syntax\n\nPart of #19607.\n\nr? @nikomatsakis", "tree": {"sha": "c6b0627c02e834119a4c02e060ca2d3208293e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b0627c02e834119a4c02e060ca2d3208293e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8547783f9524af78f90314b6c625c7969c9de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8547783f9524af78f90314b6c625c7969c9de1", "html_url": "https://github.com/rust-lang/rust/commit/2a8547783f9524af78f90314b6c625c7969c9de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8547783f9524af78f90314b6c625c7969c9de1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f424fd1bf22e3c65a7c130c2e57f047c850c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f424fd1bf22e3c65a7c130c2e57f047c850c2d", "html_url": "https://github.com/rust-lang/rust/commit/28f424fd1bf22e3c65a7c130c2e57f047c850c2d"}, {"sha": "c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "html_url": "https://github.com/rust-lang/rust/commit/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd"}], "stats": {"total": 464, "additions": 242, "deletions": 222}, "files": [{"sha": "35c29f646e4a01b1917cff23aa3c3214b298b6b6", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1782,9 +1782,9 @@ impl LintPass for Stability {\n         if self.is_internal(cx, item.span) { return }\n \n         match item.node {\n-            ast::ItemTrait(_, _, _, ref supertraits, _) => {\n+            ast::ItemTrait(_, _, ref supertraits, _) => {\n                 for t in supertraits.iter() {\n-                    if let ast::TraitTyParamBound(ref t) = *t {\n+                    if let ast::TraitTyParamBound(ref t, _) = *t {\n                         let id = ty::trait_ref_to_def_id(cx.tcx, &t.trait_ref);\n                         self.lint(cx, id, t.trait_ref.path.span);\n                     }"}, {"sha": "2a670b308b6b213d364c9e1014dd87b4babf39fb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1308,7 +1308,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             }\n         }\n       }\n-      ast::ItemTrait(_, _, _, _, ref ms) => {\n+      ast::ItemTrait(_, _, _, ref ms) => {\n         add_to_index(item, rbml_w, index);\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);"}, {"sha": "3d3eac7b6ed9fe1d38e5aa3c4617bcf62b3fa5f5", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1043,7 +1043,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 ident: ty_param.ident,\n                 id: ty_param.id,\n                 bounds: bounds,\n-                unbound: ty_param.unbound.clone(),\n                 default: ty_param.default.clone(),\n                 span: ty_param.span,\n             }\n@@ -1063,7 +1062,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     // be passing down a map.\n                     ast::RegionTyParamBound(lt)\n                 }\n-                &ast::TraitTyParamBound(ref poly_tr) => {\n+                &ast::TraitTyParamBound(ref poly_tr, modifier) => {\n                     let tr = &poly_tr.trait_ref;\n                     let last_seg = tr.path.segments.last().unwrap();\n                     let mut insert = Vec::new();\n@@ -1087,7 +1086,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             path: new_path,\n                             ref_id: tr.ref_id,\n                         }\n-                    })\n+                    }, modifier)\n                 }\n             }\n         })"}, {"sha": "730da26eda3dccc50f2fd722ffc334596191d193", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -122,7 +122,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n             // method to the root. In this case, if the trait is private, then\n             // parent all the methods to the trait to indicate that they're\n             // private.\n-            ast::ItemTrait(_, _, _, _, ref methods) if item.vis != ast::Public => {\n+            ast::ItemTrait(_, _, _, ref methods) if item.vis != ast::Public => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -328,7 +328,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             // Default methods on traits are all public so long as the trait\n             // is public\n-            ast::ItemTrait(_, _, _, _, ref methods) if public_first => {\n+            ast::ItemTrait(_, _, _, ref methods) if public_first => {\n                 for method in methods.iter() {\n                     match *method {\n                         ast::ProvidedMethod(ref m) => {\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemTrait(_, _, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -1242,7 +1242,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n \n             ast::ItemStruct(ref def, _) => check_struct(&**def),\n \n-            ast::ItemTrait(_, _, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::RequiredMethod(..) => {}\n@@ -1306,7 +1306,7 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn check_ty_param_bound(&self,\n                             ty_param_bound: &ast::TyParamBound) {\n-        if let ast::TraitTyParamBound(ref trait_ref) = *ty_param_bound {\n+        if let ast::TraitTyParamBound(ref trait_ref, _) = *ty_param_bound {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(trait_ref.trait_ref.ref_id) {\n                     let span = trait_ref.trait_ref.path.span;\n@@ -1349,7 +1349,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // namespace (the contents have their own privacies).\n             ast::ItemForeignMod(_) => {}\n \n-            ast::ItemTrait(_, _, _, ref bounds, _) => {\n+            ast::ItemTrait(_, _, ref bounds, _) => {\n                 if !self.trait_is_public(item.id) {\n                     return\n                 }"}, {"sha": "4feafff3b9211bb1ed823a84906d5b715e9017df", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 ast::ItemTy(_, ref generics) |\n                 ast::ItemEnum(_, ref generics) |\n                 ast::ItemStruct(_, ref generics) |\n-                ast::ItemTrait(_, ref generics, _, _, _) |\n+                ast::ItemTrait(_, ref generics, _, _) |\n                 ast::ItemImpl(_, ref generics, _, _, _) => {\n                     // These kinds of items have only early bound lifetime parameters.\n                     let lifetimes = &generics.lifetimes;\n@@ -232,7 +232,9 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         }\n     }\n \n-    fn visit_poly_trait_ref(&mut self, trait_ref: &ast::PolyTraitRef) {\n+    fn visit_poly_trait_ref(&mut self, trait_ref:\n+                            &ast::PolyTraitRef,\n+                            _modifier: &ast::TraitBoundModifier) {\n         debug!(\"visit_poly_trait_ref trait_ref={}\", trait_ref);\n \n         self.with(LateScope(&trait_ref.bound_lifetimes, self.scope), |old_scope, this| {"}, {"sha": "617be82701a093d6fd3a1f71e0d1915ab61265c6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -4740,7 +4740,7 @@ pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n         match cx.map.find(id.node) {\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    ItemTrait(_, _, _, _, ref ms) => {\n+                    ItemTrait(_, _, _, ref ms) => {\n                         let (_, p) =\n                             ast_util::split_trait_methods(ms[]);\n                         p.iter()"}, {"sha": "8e3eb4bf853bb2ed613c47c074372a1a18cb418d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1493,7 +1493,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             ItemImpl(_, _, Some(_), _, _) => parent,\n \n-            ItemTrait(_, _, _, _, ref items) => {\n+            ItemTrait(_, _, _, ref items) => {\n                 let name_bindings =\n                     self.add_child(name,\n                                    parent.clone(),\n@@ -4093,7 +4093,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                             impl_items[]);\n             }\n \n-            ItemTrait(_, ref generics, ref unbound, ref bounds, ref trait_items) => {\n+            ItemTrait(_, ref generics, ref bounds, ref trait_items) => {\n                 // Create a new rib for the self type.\n                 let mut self_type_rib = Rib::new(ItemRibKind);\n \n@@ -4114,13 +4114,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     this.resolve_type_parameter_bounds(item.id, bounds,\n                                                        TraitDerivation);\n \n-                    match *unbound {\n-                        Some(ref tpb) => {\n-                            this.resolve_trait_reference(item.id, tpb, TraitDerivation);\n-                        }\n-                        None => {}\n-                    }\n-\n                     for trait_item in (*trait_items).iter() {\n                         // Create a new rib for the trait_item-specific type\n                         // parameters.\n@@ -4368,12 +4361,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             self.resolve_type_parameter_bound(type_parameter.id, bound,\n                                               TraitBoundingTypeParameter);\n         }\n-        match &type_parameter.unbound {\n-            &Some(ref unbound) =>\n-                self.resolve_trait_reference(\n-                    type_parameter.id, unbound, TraitBoundingTypeParameter),\n-            &None => {}\n-        }\n         match type_parameter.default {\n             Some(ref ty) => self.resolve_type(&**ty),\n             None => {}\n@@ -4395,7 +4382,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     type_parameter_bound: &TyParamBound,\n                                     reference_type: TraitReferenceType) {\n         match *type_parameter_bound {\n-            TraitTyParamBound(ref tref) => {\n+            TraitTyParamBound(ref tref, _) => {\n                 self.resolve_poly_trait_reference(id, tref, reference_type)\n             }\n             RegionTyParamBound(..) => {}"}, {"sha": "08f5dee717a9c51c488f448cea36935a195fd757", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -710,7 +710,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         // super-traits\n         for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n-                ast::TraitTyParamBound(ref trait_ref) => {\n+                ast::TraitTyParamBound(ref trait_ref, _) => {\n                     trait_ref\n                 }\n                 ast::RegionTyParamBound(..) => {\n@@ -1052,7 +1052,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                   &**typ,\n                                   impl_items)\n             }\n-            ast::ItemTrait(_, ref generics, _, ref trait_refs, ref methods) =>\n+            ast::ItemTrait(_, ref generics, ref trait_refs, ref methods) =>\n                 self.process_trait(item, generics, trait_refs, methods),\n             ast::ItemMod(ref m) => self.process_mod(item, m),\n             ast::ItemTy(ref ty, ref ty_params) => {\n@@ -1076,7 +1076,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n     fn visit_generics(&mut self, generics: &ast::Generics) {\n         for param in generics.ty_params.iter() {\n             for bound in param.bounds.iter() {\n-                if let ast::TraitTyParamBound(ref trait_ref) = *bound {\n+                if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n                     self.process_trait_ref(&trait_ref.trait_ref, None);\n                 }\n             }"}, {"sha": "c8a084584b5e2b186d89c2dda71217374ee29d68", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1626,7 +1626,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n     let mut trait_def_ids = DefIdMap::new();\n     for ast_bound in ast_bounds.iter() {\n         match *ast_bound {\n-            ast::TraitTyParamBound(ref b) => {\n+            ast::TraitTyParamBound(ref b, ast::TraitBoundModifier::None) => {\n                 match ::lookup_def_tcx(tcx, b.trait_ref.path.span, b.trait_ref.ref_id) {\n                     def::DefTrait(trait_did) => {\n                         match trait_def_ids.get(&trait_did) {\n@@ -1664,6 +1664,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n                 }\n                 trait_bounds.push(b);\n             }\n+            ast::TraitTyParamBound(_, ast::TraitBoundModifier::Maybe) => {}\n             ast::RegionTyParamBound(ref l) => {\n                 region_bounds.push(l);\n             }"}, {"sha": "c8c8211f29253ce3a5671f133a64e1b82503eaee", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -673,7 +673,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         }\n \n       }\n-      ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n+      ast::ItemTrait(_, _, _, ref trait_methods) => {\n         let trait_def = ty::lookup_trait_def(ccx.tcx, local_def(it.id));\n         for trait_method in trait_methods.iter() {\n             match *trait_method {"}, {"sha": "8d07f1e4355031c2c32f8d2c7b519bcd18faed1e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -259,7 +259,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    trait_def: &ty::TraitDef<'tcx>) {\n     let tcx = ccx.tcx;\n     if let ast_map::NodeItem(item) = tcx.map.get(trait_id) {\n-        if let ast::ItemTrait(_, _, _, _, ref trait_items) = item.node {\n+        if let ast::ItemTrait(_, _, _, ref trait_items) = item.node {\n             // For each method, construct a suitable ty::Method and\n             // store it into the `tcx.impl_or_trait_items` table:\n             for trait_item in trait_items.iter() {\n@@ -627,11 +627,6 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n                 ast::RegionTyParamBound(..) => { }\n             }\n         }\n-\n-        match ty_param.unbound {\n-            Some(_) => { warn = true; }\n-            None => { }\n-        }\n     }\n \n     if warn {\n@@ -1146,7 +1141,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                                AllowEqConstraints::DontAllow);\n             }\n         },\n-        ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n+        ast::ItemTrait(_, _, _, ref trait_methods) => {\n             let trait_def = trait_def_of_item(ccx, it);\n \n             debug!(\"trait_def: ident={} trait_def={}\",\n@@ -1338,13 +1333,12 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         return def.clone();\n     }\n \n-    let (unsafety, generics, unbound, bounds, items) = match it.node {\n+    let (unsafety, generics, bounds, items) = match it.node {\n         ast::ItemTrait(unsafety,\n                        ref generics,\n-                       ref unbound,\n                        ref supertraits,\n                        ref items) => {\n-            (unsafety, generics, unbound, supertraits, items.as_slice())\n+            (unsafety, generics, supertraits, items.as_slice())\n         }\n         ref s => {\n             tcx.sess.span_bug(\n@@ -1367,7 +1361,6 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                 token::SELF_KEYWORD_NAME,\n                                 self_param_ty,\n                                 bounds.as_slice(),\n-                                unbound,\n                                 it.span);\n \n     let substs = mk_item_substs(ccx, &ty_generics);\n@@ -1683,29 +1676,37 @@ fn ty_generics_for_fn_or_method<'tcx,AC>(\n                 create_type_parameters_for_associated_types)\n }\n \n-// Add the Sized bound, unless the type parameter is marked as `Sized?`.\n+// Add the Sized bound, unless the type parameter is marked as `?Sized`.\n fn add_unsized_bound<'tcx,AC>(this: &AC,\n-                              unbound: &Option<ast::TraitRef>,\n                               bounds: &mut ty::BuiltinBounds,\n-                              desc: &str,\n+                              ast_bounds: &[ast::TyParamBound],\n                               span: Span)\n                               where AC: AstConv<'tcx> {\n+    // Try to find an unbound in bounds.\n+    let mut unbound = None;\n+    for ab in ast_bounds.iter() {\n+        if let &ast::TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = ab  {\n+            if unbound.is_none() {\n+                assert!(ptr.bound_lifetimes.is_empty());\n+                unbound = Some(ptr.trait_ref.clone());\n+            } else {\n+                this.tcx().sess.span_err(span, \"type parameter has more than one relaxed default \\\n+                                                bound, only one is supported\");\n+            }\n+        }\n+    }\n+\n     let kind_id = this.tcx().lang_items.require(SizedTraitLangItem);\n     match unbound {\n-        &Some(ref tpb) => {\n+        Some(ref tpb) => {\n             // FIXME(#8559) currently requires the unbound to be built-in.\n             let trait_def_id = ty::trait_ref_to_def_id(this.tcx(), tpb);\n             match kind_id {\n                 Ok(kind_id) if trait_def_id != kind_id => {\n                     this.tcx().sess.span_warn(span,\n-                                              format!(\"default bound relaxed \\\n-                                                       for a {}, but this \\\n-                                                       does nothing because \\\n-                                                       the given bound is not \\\n-                                                       a default. \\\n-                                                       Only `Sized?` is \\\n-                                                       supported\",\n-                                                      desc)[]);\n+                                              \"default bound relaxed for a type parameter, but \\\n+                                               this does nothing because the given bound is not \\\n+                                               a default. Only `?Sized` is supported\");\n                     ty::try_add_builtin_trait(this.tcx(),\n                                               kind_id,\n                                               bounds);\n@@ -1717,7 +1718,7 @@ fn add_unsized_bound<'tcx,AC>(this: &AC,\n             ty::try_add_builtin_trait(this.tcx(), kind_id.unwrap(), bounds);\n         }\n         // No lang item for Sized, so we can't add it as a bound.\n-        &None => {}\n+        None => {}\n     }\n }\n \n@@ -1807,7 +1808,7 @@ fn ty_generics<'tcx,AC>(this: &AC,\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &ast::TyParamBound::TraitTyParamBound(ref poly_trait_ref) => {\n+                        &ast::TyParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n                             let trait_ref = astconv::instantiate_poly_trait_ref(\n                                 this,\n                                 &ExplicitRscope,\n@@ -1880,7 +1881,7 @@ fn ty_generics<'tcx,AC>(this: &AC,\n             for bound in param.bounds.iter() {\n                 // In the above example, `ast_trait_ref` is `Iterator`.\n                 let ast_trait_ref = match *bound {\n-                    ast::TraitTyParamBound(ref r) => r,\n+                    ast::TraitTyParamBound(ref r, _) => r,\n                     ast::RegionTyParamBound(..) => { continue; }\n                 };\n \n@@ -1978,7 +1979,6 @@ fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n                                 param.ident.name,\n                                 param_ty,\n                                 param.bounds[],\n-                                &param.unbound,\n                                 param.span);\n     let default = match param.default {\n         None => None,\n@@ -2023,7 +2023,6 @@ fn compute_bounds<'tcx,AC>(this: &AC,\n                            name_of_bounded_thing: ast::Name,\n                            param_ty: ty::ParamTy,\n                            ast_bounds: &[ast::TyParamBound],\n-                           unbound: &Option<ast::TraitRef>,\n                            span: Span)\n                            -> ty::ParamBounds<'tcx>\n                            where AC: AstConv<'tcx> {\n@@ -2032,11 +2031,9 @@ fn compute_bounds<'tcx,AC>(this: &AC,\n                                              param_ty,\n                                              ast_bounds);\n \n-\n     add_unsized_bound(this,\n-                      unbound,\n                       &mut param_bounds.builtin_bounds,\n-                      \"type parameter\",\n+                      ast_bounds,\n                       span);\n \n     check_bounds_compatible(this.tcx(),"}, {"sha": "30869186ba5e9ef7f67cd184c7cbcae15500d00b", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -353,7 +353,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n         match item.node {\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemTrait(_, ref generics, _, _, _) => {\n+            ast::ItemTrait(_, ref generics, _, _) => {\n                 for (i, p) in generics.lifetimes.iter().enumerate() {\n                     let id = p.lifetime.id;\n                     self.add_inferred(item.id, RegionParam, TypeSpace, i, id);"}, {"sha": "3eda39f54a997e8a036a280d024bf73c92bed2bf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -163,13 +163,12 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n         }\n     });\n     let trait_def = ty::lookup_trait_def(tcx, did);\n-    let (bounds, default_unbound) = trait_def.bounds.clean(cx);\n+    let bounds = trait_def.bounds.clean(cx);\n     clean::Trait {\n         unsafety: def.unsafety,\n         generics: (&def.generics, subst::TypeSpace).clean(cx),\n         items: items.collect(),\n         bounds: bounds,\n-        default_unbound: default_unbound\n     }\n }\n \n@@ -328,7 +327,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             derived: clean::detect_derived(attrs.as_slice()),\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n-                    clean::TraitBound(polyt) => polyt.trait_,\n+                    clean::TraitBound(polyt, _) => polyt.trait_,\n                     clean::RegionBound(..) => unreachable!(),\n                 }\n             }),"}, {"sha": "b7845f23be2983ea92eb219cf8b6a5f37b39065b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -458,8 +458,6 @@ pub struct TyParam {\n     pub did: ast::DefId,\n     pub bounds: Vec<TyParamBound>,\n     pub default: Option<Type>,\n-    /// An optional default bound on the parameter which is unbound, like `Sized?`\n-    pub default_unbound: Option<Type>\n }\n \n impl Clean<TyParam> for ast::TyParam {\n@@ -469,7 +467,6 @@ impl Clean<TyParam> for ast::TyParam {\n             did: ast::DefId { krate: ast::LOCAL_CRATE, node: self.id },\n             bounds: self.bounds.clean(cx),\n             default: self.default.clean(cx),\n-            default_unbound: self.unbound.clean(cx)\n         }\n     }\n }\n@@ -478,28 +475,27 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.name.clean(cx));\n-        let (bounds, default_unbound) = self.bounds.clean(cx);\n+        let bounds = self.bounds.clean(cx);\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n             bounds: bounds,\n             default: self.default.clean(cx),\n-            default_unbound: default_unbound\n         }\n     }\n }\n \n #[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n-    TraitBound(PolyTrait)\n+    TraitBound(PolyTrait, ast::TraitBoundModifier)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n             ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n-            ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n+            ast::TraitTyParamBound(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n }\n@@ -600,7 +596,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 did: did,\n             },\n             lifetimes: vec![]\n-        })\n+        }, ast::TraitBoundModifier::None)\n     }\n }\n \n@@ -648,37 +644,20 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath { path: path, typarams: None, did: self.def_id, },\n             lifetimes: late_bounds\n-        })\n+        }, ast::TraitBoundModifier::None)\n     }\n }\n \n-// Returns (bounds, default_unbound)\n-impl<'tcx> Clean<(Vec<TyParamBound>, Option<Type>)> for ty::ParamBounds<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> (Vec<TyParamBound>, Option<Type>) {\n+impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n         let mut v = Vec::new();\n-        let mut has_sized_bound = false;\n-        for b in self.builtin_bounds.iter() {\n-            if b != ty::BoundSized {\n-                v.push(b.clean(cx));\n-            } else {\n-                has_sized_bound = true;\n-            }\n-        }\n         for t in self.trait_bounds.iter() {\n             v.push(t.clean(cx));\n         }\n         for r in self.region_bounds.iter().filter_map(|r| r.clean(cx)) {\n             v.push(RegionBound(r));\n         }\n-        if has_sized_bound {\n-            (v, None)\n-        } else {\n-            let ty = match ty::BoundSized.clean(cx) {\n-                TraitBound(polyt) => polyt.trait_,\n-                _ => unreachable!()\n-            };\n-            (v, Some(ty))\n-        }\n+        v\n     }\n }\n \n@@ -689,7 +668,7 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n         v.extend(self.types.iter().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             lifetimes: vec![]\n-        })));\n+        }, ast::TraitBoundModifier::None)));\n         if v.len() > 0 {Some(v)} else {None}\n     }\n }\n@@ -1047,8 +1026,6 @@ pub struct Trait {\n     pub items: Vec<TraitMethod>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n-    /// An optional default bound not required for `Self`, like `Sized?`\n-    pub default_unbound: Option<Type>\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -1065,7 +1042,6 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n-                default_unbound: self.default_unbound.clean(cx)\n             }),\n         }\n     }\n@@ -2412,7 +2388,6 @@ impl Clean<Item> for ty::AssociatedType {\n                 },\n                 bounds: vec![],\n                 default: None,\n-                default_unbound: None\n             }),\n             visibility: None,\n             def_id: self.def_id,"}, {"sha": "251ce5aefeb717429c5542d5d2ac10a0e7ae12b0", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -178,7 +178,6 @@ pub struct Trait {\n     pub whence: Span,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n-    pub default_unbound: Option<ast::TraitRef> // FIXME(tomjakubowski)\n }\n \n pub struct Impl {"}, {"sha": "f20a74f937b75442160bf14183004c89b79a823b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -97,9 +97,6 @@ impl fmt::Show for clean::Generics {\n                 if i > 0 {\n                     try!(f.write(\", \".as_bytes()))\n                 }\n-                if let Some(ref unbound) = tp.default_unbound {\n-                    try!(write!(f, \"{}? \", unbound));\n-                };\n                 try!(f.write(tp.name.as_bytes()));\n \n                 if tp.bounds.len() > 0 {\n@@ -182,8 +179,12 @@ impl fmt::Show for clean::TyParamBound {\n             clean::RegionBound(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n-            clean::TraitBound(ref ty) => {\n-                write!(f, \"{}\", *ty)\n+            clean::TraitBound(ref ty, modifier) => {\n+                let modifier_str = match modifier {\n+                    ast::TraitBoundModifier::None => \"\",\n+                    ast::TraitBoundModifier::Maybe => \"?\",\n+                };\n+                write!(f, \"{}{}\", modifier_str, *ty)\n             }\n         }\n     }\n@@ -458,12 +459,15 @@ impl fmt::Show for clean::Type {\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n                                     clean::RegionBound(..) => {}\n-                                    clean::TraitBound(ref t) => {\n+                                    clean::TraitBound(ref t, modifier) => {\n                                         if ret.len() == 0 {\n                                             ret.push_str(\": \");\n                                         } else {\n                                             ret.push_str(\" + \");\n                                         }\n+                                        if modifier == ast::TraitBoundModifier::Maybe {\n+                                            ret.push_str(\"?\");\n+                                        }\n                                         ret.push_str(format!(\"{}\",\n                                                              *t).as_slice());\n                                     }"}, {"sha": "bfb03cb2589c2a3366ed6b48d7b3805c50abb5c5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -1679,9 +1679,6 @@ fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Trait) -> fmt::Result {\n     let mut bounds = String::new();\n-    if let Some(ref ty) = t.default_unbound {\n-        bounds.push_str(format!(\" for {}?\", ty).as_slice());\n-    }\n     if t.bounds.len() > 0 {\n         if bounds.len() > 0 {\n             bounds.push(' ');"}, {"sha": "e71711aa8d6e77d80efdb56cf74d6e0aec444f1f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            ast::ItemTrait(unsafety, ref gen, ref def_ub, ref b, ref items) => {\n+            ast::ItemTrait(unsafety, ref gen, ref b, ref items) => {\n                 let t = Trait {\n                     unsafety: unsafety,\n                     name: name,\n@@ -334,7 +334,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n-                    default_unbound: def_ub.clone()\n                 };\n                 om.traits.push(t);\n             },"}, {"sha": "f253943943dcce0334a0cfbf39f335be377a5d78", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -371,18 +371,25 @@ pub const DUMMY_NODE_ID: NodeId = -1;\n /// detects Copy, Send and Sync.\n #[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TyParamBound {\n-    TraitTyParamBound(PolyTraitRef),\n+    TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n     RegionTyParamBound(Lifetime)\n }\n \n+/// A modifier on a bound, currently this is only used for `?Sized`, where the\n+/// modifier is `Maybe`. Negative bounds should also be handled here.\n+#[deriving(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+pub enum TraitBoundModifier {\n+    None,\n+    Maybe,\n+}\n+\n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n #[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n     pub bounds: TyParamBounds,\n-    pub unbound: Option<TraitRef>,\n     pub default: Option<P<Ty>>,\n     pub span: Span\n }\n@@ -1488,7 +1495,7 @@ pub struct PolyTraitRef {\n     pub bound_lifetimes: Vec<LifetimeDef>,\n \n     /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`\n-    pub trait_ref: TraitRef\n+    pub trait_ref: TraitRef,\n }\n \n #[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n@@ -1577,8 +1584,6 @@ pub enum Item_ {\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety,\n               Generics,\n-              Option<TraitRef>, // (optional) default bound not required for Self.\n-                                // Currently, only Sized makes sense here.\n               TyParamBounds,\n               Vec<TraitItem>),\n     ItemImpl(Unsafety,"}, {"sha": "5a4f5731be50d9267c4ab672682f4f8cbc47b9ca", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -780,9 +780,9 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     None => {}\n                 }\n             }\n-            ItemTrait(_, _, _, ref bounds, ref trait_items) => {\n+            ItemTrait(_, _, ref bounds, ref trait_items) => {\n                 for b in bounds.iter() {\n-                    if let TraitTyParamBound(ref t) = *b {\n+                    if let TraitTyParamBound(ref t, TraitBoundModifier::None) = *b {\n                         self.insert(t.trait_ref.ref_id, NodeItem(i));\n                     }\n                 }"}, {"sha": "94a3784291d0bc595f56482a40a5c380a09f7de9", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -139,11 +139,11 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                                        .collect();\n             ast::ItemImpl(u, a, b, c, impl_items)\n         }\n-        ast::ItemTrait(u, a, b, c, methods) => {\n+        ast::ItemTrait(u, a, b, methods) => {\n             let methods = methods.into_iter()\n                                  .filter(|m| trait_method_in_cfg(cx, m))\n                                  .collect();\n-            ast::ItemTrait(u, a, b, c, methods)\n+            ast::ItemTrait(u, a, b, methods)\n         }\n         ast::ItemStruct(def, generics) => {\n             ast::ItemStruct(fold_struct(cx, def), generics)"}, {"sha": "239af1889090983b654ce639a698084142a21a60", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -68,7 +68,6 @@ pub trait AstBuilder {\n                span: Span,\n                id: ast::Ident,\n                bounds: OwnedSlice<ast::TyParamBound>,\n-               unbound: Option<ast::TraitRef>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n@@ -414,13 +413,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                span: Span,\n                id: ast::Ident,\n                bounds: OwnedSlice<ast::TyParamBound>,\n-               unbound: Option<ast::TraitRef>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n-            unbound: unbound,\n             default: default,\n             span: span\n         }\n@@ -455,7 +452,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound {\n-        ast::TraitTyParamBound(self.poly_trait_ref(path))\n+        ast::TraitTyParamBound(self.poly_trait_ref(path), ast::TraitBoundModifier::None)\n     }\n \n     fn lifetime(&self, span: Span, name: ast::Name) -> ast::Lifetime {"}, {"sha": "3c8d74c14ee6393a8b918cd8ed2f7f586cc2f2ff", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -58,10 +58,10 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n-            bounds: vec!((\"__D\", None, vec!(Path::new_(\n+            bounds: vec!((\"__D\", vec!(Path::new_(\n                             vec!(krate, \"Decoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n-                         (\"__E\", None, vec!()))\n+                         (\"__E\", vec!()))\n         },\n         methods: vec!(\n             MethodDef {"}, {"sha": "5829f34bccc5dac280e2223700933e197f986b61", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -134,10 +134,10 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n-            bounds: vec!((\"__S\", None, vec!(Path::new_(\n+            bounds: vec!((\"__S\", vec!(Path::new_(\n                             vec!(krate, \"Encoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n-                         (\"__E\", None, vec!()))\n+                         (\"__E\", vec!()))\n         },\n         methods: vec!(\n             MethodDef {"}, {"sha": "e4e31139d82f48925941cf6da93dc5f4bcb79c81", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -417,7 +417,6 @@ impl<'a> TraitDef<'a> {\n             cx.typaram(self.span,\n                        ty_param.ident,\n                        OwnedSlice::from_vec(bounds),\n-                       ty_param.unbound.clone(),\n                        None)\n         }));\n "}, {"sha": "95bdd8b9ffd2fb71116d47dfeb1efd5400c028da", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -189,15 +189,19 @@ impl<'a> Ty<'a> {\n }\n \n \n-fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str,\n-               bounds: &[Path], unbound: Option<ast::TraitRef>,\n-               self_ident: Ident, self_generics: &Generics) -> ast::TyParam {\n+fn mk_ty_param(cx: &ExtCtxt,\n+               span: Span,\n+               name: &str,\n+               bounds: &[Path],\n+               self_ident: Ident,\n+               self_generics: &Generics)\n+               -> ast::TyParam {\n     let bounds =\n         bounds.iter().map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n             cx.typarambound(path)\n         }).collect();\n-    cx.typaram(span, cx.ident_of(name), bounds, unbound, None)\n+    cx.typaram(span, cx.ident_of(name), bounds, None)\n }\n \n fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>)\n@@ -216,7 +220,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>)\n #[deriving(Clone)]\n pub struct LifetimeBounds<'a> {\n     pub lifetimes: Vec<(&'a str, Vec<&'a str>)>,\n-    pub bounds: Vec<(&'a str, Option<ast::TraitRef>, Vec<Path<'a>>)>,\n+    pub bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n }\n \n impl<'a> LifetimeBounds<'a> {\n@@ -239,12 +243,11 @@ impl<'a> LifetimeBounds<'a> {\n         }).collect();\n         let ty_params = self.bounds.iter().map(|t| {\n             match t {\n-                &(ref name, ref unbound, ref bounds) => {\n+                &(ref name, ref bounds) => {\n                     mk_ty_param(cx,\n                                 span,\n                                 *name,\n                                 bounds.as_slice(),\n-                                unbound.clone(),\n                                 self_ty,\n                                 self_generics)\n                 }"}, {"sha": "72e3b45dc91b7b8217619deea64da07cc1f63c0a", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                     vec!(box Literal(Path::new_local(\"__S\"))), true),\n          LifetimeBounds {\n              lifetimes: Vec::new(),\n-             bounds: vec!((\"__S\", None,\n+             bounds: vec!((\"__S\",\n                            vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n          },\n          Path::new_local(\"__S\"))"}, {"sha": "1ddf5b2a5c31eef8106680a72b9491e4143ba059", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -36,7 +36,6 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                                  None,\n                                   vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n                 },\n                 explicit_self: None,"}, {"sha": "4f0169e31f2293ff65c26e55a845a8d80b612813", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -736,18 +736,17 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n                                    -> TyParamBound\n                                    where T: Folder {\n     match tpb {\n-        TraitTyParamBound(ty) => TraitTyParamBound(fld.fold_poly_trait_ref(ty)),\n+        TraitTyParamBound(ty, modifier) => TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier),\n         RegionTyParamBound(lifetime) => RegionTyParamBound(fld.fold_lifetime(lifetime)),\n     }\n }\n \n pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n-    let TyParam {id, ident, bounds, unbound, default, span} = tp;\n+    let TyParam {id, ident, bounds, default, span} = tp;\n     TyParam {\n         id: fld.new_id(id),\n         ident: ident,\n         bounds: fld.fold_bounds(bounds),\n-        unbound: unbound.map(|x| fld.fold_trait_ref(x)),\n         default: default.map(|x| fld.fold_ty(x)),\n         span: span\n     }\n@@ -1043,7 +1042,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                      folder.fold_ty(ty),\n                      new_impl_items)\n         }\n-        ItemTrait(unsafety, generics, unbound, bounds, methods) => {\n+        ItemTrait(unsafety, generics, bounds, methods) => {\n             let bounds = folder.fold_bounds(bounds);\n             let methods = methods.into_iter().flat_map(|method| {\n                 let r = match method {\n@@ -1073,7 +1072,6 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             }).collect();\n             ItemTrait(unsafety,\n                       folder.fold_generics(generics),\n-                      unbound,\n                       bounds,\n                       methods)\n         }"}, {"sha": "fd64511cc041a27e85713dc70721bc3b76345caa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 74, "deletions": 21, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -15,7 +15,7 @@ use self::ItemOrViewItem::*;\n \n use abi;\n use ast::{AssociatedType, BareFnTy, ClosureTy};\n-use ast::{RegionTyParamBound, TraitTyParamBound};\n+use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{ProvidedMethod, Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n@@ -117,6 +117,13 @@ pub enum PathParsingMode {\n     LifetimeAndTypesWithColons,\n }\n \n+/// How to parse a bound, whether to allow bound modifiers such as `?`.\n+#[deriving(Copy, PartialEq)]\n+pub enum BoundParsingMode {\n+    Bare,\n+    Modified,\n+}\n+\n enum ItemOrViewItem {\n     /// Indicates a failure to parse any kind of item. The attributes are\n     /// returned.\n@@ -1087,12 +1094,12 @@ impl<'a> Parser<'a> {\n             let poly_trait_ref = ast::PolyTraitRef { bound_lifetimes: lifetime_defs,\n                                                      trait_ref: trait_ref };\n             let other_bounds = if self.eat(&token::BinOp(token::Plus)) {\n-                self.parse_ty_param_bounds()\n+                self.parse_ty_param_bounds(BoundParsingMode::Bare)\n             } else {\n                 OwnedSlice::empty()\n             };\n             let all_bounds =\n-                Some(TraitTyParamBound(poly_trait_ref)).into_iter()\n+                Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n                 .chain(other_bounds.into_vec().into_iter())\n                 .collect();\n             ast::TyPolyTraitRef(all_bounds)\n@@ -1165,7 +1172,7 @@ impl<'a> Parser<'a> {\n         // To be helpful, parse the proc as ever\n         let _ = self.parse_legacy_lifetime_defs(lifetime_defs);\n         let _ = self.parse_fn_args(false, false);\n-        let _ = self.parse_colon_then_ty_param_bounds();\n+        let _ = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n         let _ = self.parse_ret_ty();\n \n         self.obsolete(proc_span, ObsoleteProcType);\n@@ -1255,7 +1262,7 @@ impl<'a> Parser<'a> {\n             inputs\n         };\n \n-        let bounds = self.parse_colon_then_ty_param_bounds();\n+        let bounds = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n \n         let output = self.parse_ret_ty();\n         let decl = P(FnDecl {\n@@ -1481,7 +1488,7 @@ impl<'a> Parser<'a> {\n             return lhs;\n         }\n \n-        let bounds = self.parse_ty_param_bounds();\n+        let bounds = self.parse_ty_param_bounds(BoundParsingMode::Bare);\n \n         // In type grammar, `+` is treated like a binary operator,\n         // and hence both L and R side are required.\n@@ -4029,28 +4036,35 @@ impl<'a> Parser<'a> {\n \n     // Parses a sequence of bounds if a `:` is found,\n     // otherwise returns empty list.\n-    fn parse_colon_then_ty_param_bounds(&mut self)\n+    fn parse_colon_then_ty_param_bounds(&mut self,\n+                                        mode: BoundParsingMode)\n                                         -> OwnedSlice<TyParamBound>\n     {\n         if !self.eat(&token::Colon) {\n             OwnedSlice::empty()\n         } else {\n-            self.parse_ty_param_bounds()\n+            self.parse_ty_param_bounds(mode)\n         }\n     }\n \n     // matches bounds    = ( boundseq )?\n     // where   boundseq  = ( polybound + boundseq ) | polybound\n     // and     polybound = ( 'for' '<' 'region '>' )? bound\n     // and     bound     = 'region | trait_ref\n-    // NB: The None/Some distinction is important for issue #7264.\n-    fn parse_ty_param_bounds(&mut self)\n+    fn parse_ty_param_bounds(&mut self,\n+                             mode: BoundParsingMode)\n                              -> OwnedSlice<TyParamBound>\n     {\n         let mut result = vec!();\n         loop {\n+            let question_span = self.span;\n+            let ate_question = self.eat(&token::Question);\n             match self.token {\n                 token::Lifetime(lifetime) => {\n+                    if ate_question {\n+                        self.span_err(question_span,\n+                                      \"`?` may only modify trait bounds, not lifetime bounds\");\n+                    }\n                     result.push(RegionTyParamBound(ast::Lifetime {\n                         id: ast::DUMMY_NODE_ID,\n                         span: self.span,\n@@ -4060,7 +4074,18 @@ impl<'a> Parser<'a> {\n                 }\n                 token::ModSep | token::Ident(..) => {\n                     let poly_trait_ref = self.parse_poly_trait_ref();\n-                    result.push(TraitTyParamBound(poly_trait_ref))\n+                    let modifier = if ate_question {\n+                        if mode == BoundParsingMode::Modified {\n+                            TraitBoundModifier::Maybe\n+                        } else {\n+                            self.span_err(question_span,\n+                                          \"unexpected `?`\");\n+                            TraitBoundModifier::None\n+                        }\n+                    } else {\n+                        TraitBoundModifier::None\n+                    };\n+                    result.push(TraitTyParamBound(poly_trait_ref, modifier))\n                 }\n                 _ => break,\n             }\n@@ -4089,13 +4114,14 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Matches typaram = (unbound`?`)? IDENT optbounds ( EQ ty )?\n+    /// Matches typaram = (unbound `?`)? IDENT (`?` unbound)? optbounds ( EQ ty )?\n     fn parse_ty_param(&mut self) -> TyParam {\n         // This is a bit hacky. Currently we are only interested in a single\n         // unbound, and it may only be `Sized`. To avoid backtracking and other\n         // complications, we parse an ident, then check for `?`. If we find it,\n         // we use the ident as the unbound, otherwise, we use it as the name of\n-        // type param.\n+        // type param. Even worse, for now, we need to check for `?` before or\n+        // after the bound.\n         let mut span = self.span;\n         let mut ident = self.parse_ident();\n         let mut unbound = None;\n@@ -4106,7 +4132,14 @@ impl<'a> Parser<'a> {\n             ident = self.parse_ident();\n         }\n \n-        let bounds = self.parse_colon_then_ty_param_bounds();\n+        let mut bounds = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Modified);\n+        if let Some(unbound) = unbound {\n+            let mut bounds_as_vec = bounds.into_vec();\n+            bounds_as_vec.push(TraitTyParamBound(PolyTraitRef { bound_lifetimes: vec![],\n+                                                                trait_ref: unbound },\n+                                                 TraitBoundModifier::Maybe));\n+            bounds = OwnedSlice::from_vec(bounds_as_vec);\n+        };\n \n         let default = if self.check(&token::Eq) {\n             self.bump();\n@@ -4118,7 +4151,6 @@ impl<'a> Parser<'a> {\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n-            unbound: unbound,\n             default: default,\n             span: span,\n         }\n@@ -4260,7 +4292,7 @@ impl<'a> Parser<'a> {\n                     let bounded_ty = self.parse_ty();\n \n                     if self.eat(&token::Colon) {\n-                        let bounds = self.parse_ty_param_bounds();\n+                        let bounds = self.parse_ty_param_bounds(BoundParsingMode::Bare);\n                         let hi = self.span.hi;\n                         let span = mk_sp(lo, hi);\n \n@@ -4747,15 +4779,23 @@ impl<'a> Parser<'a> {\n     fn parse_item_trait(&mut self, unsafety: Unsafety) -> ItemInfo {\n         let ident = self.parse_ident();\n         let mut tps = self.parse_generics();\n-        let sized = self.parse_for_sized();\n+        let unbound = self.parse_for_sized();\n \n         // Parse supertrait bounds.\n-        let bounds = self.parse_colon_then_ty_param_bounds();\n+        let mut bounds = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n+\n+        if let Some(unbound) = unbound {\n+            let mut bounds_as_vec = bounds.into_vec();\n+            bounds_as_vec.push(TraitTyParamBound(PolyTraitRef { bound_lifetimes: vec![],\n+                                                                trait_ref: unbound },\n+                                                 TraitBoundModifier::Maybe));\n+            bounds = OwnedSlice::from_vec(bounds_as_vec);\n+        };\n \n         self.parse_where_clause(&mut tps);\n \n         let meths = self.parse_trait_items();\n-        (ident, ItemTrait(unsafety, tps, sized, bounds, meths), None)\n+        (ident, ItemTrait(unsafety, tps, bounds, meths), None)\n     }\n \n     fn parse_impl_items(&mut self) -> (Vec<ImplItem>, Vec<Attribute>) {\n@@ -4974,12 +5014,25 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_for_sized(&mut self) -> Option<ast::TraitRef> {\n+        // FIXME, this should really use TraitBoundModifier, but it will get\n+        // re-jigged shortly in any case, so leaving the hacky version for now.\n         if self.eat_keyword(keywords::For) {\n             let span = self.span;\n+            let mut ate_question = false;\n+            if self.eat(&token::Question) {\n+                ate_question = true;\n+            }\n             let ident = self.parse_ident();\n-            if !self.eat(&token::Question) {\n+            if self.eat(&token::Question) {\n+                if ate_question {\n+                    self.span_err(span,\n+                        \"unexpected `?`\");\n+                }\n+                ate_question = true;\n+            }\n+            if !ate_question {\n                 self.span_err(span,\n-                    \"expected 'Sized?' after `for` in trait item\");\n+                    \"expected `?Sized` after `for` in trait item\");\n                 return None;\n             }\n             let tref = Parser::trait_ref_from_ident(ident, span);"}, {"sha": "02a03285d3b86df9e5a7d8909d77edf40688bef6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use abi;\n use ast::{mod, FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n-use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound};\n+use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n use ast::{UnboxedClosureKind};\n use ast_util;\n@@ -958,20 +958,25 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose(item.span));\n             }\n-            ast::ItemTrait(unsafety, ref generics, ref unbound, ref bounds, ref methods) => {\n+            ast::ItemTrait(unsafety, ref generics, ref bounds, ref methods) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_visibility(item.vis));\n                 try!(self.print_unsafety(unsafety));\n                 try!(self.word_nbsp(\"trait\"));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n-                if let &Some(ref tref) = unbound {\n-                    try!(space(&mut self.s));\n-                    try!(self.word_space(\"for\"));\n-                    try!(self.print_trait_ref(tref));\n-                    try!(word(&mut self.s, \"?\"));\n+                let bounds: Vec<_> = bounds.iter().map(|b| b.clone()).collect();\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                for b in bounds.into_iter() {\n+                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = b {\n+                        try!(space(&mut self.s));\n+                        try!(self.word_space(\"for ?\"));\n+                        try!(self.print_trait_ref(&ptr.trait_ref));\n+                    } else {\n+                        real_bounds.push(b);\n+                    }\n                 }\n-                try!(self.print_bounds(\":\", bounds[]));\n+                try!(self.print_bounds(\":\", real_bounds[]));\n                 try!(self.print_where_clause(generics));\n                 try!(word(&mut self.s, \" \"));\n                 try!(self.bopen());\n@@ -2345,7 +2350,11 @@ impl<'a> State<'a> {\n                 }\n \n                 try!(match *bound {\n-                    TraitTyParamBound(ref tref) => {\n+                    TraitTyParamBound(ref tref, TraitBoundModifier::None) => {\n+                        self.print_poly_trait_ref(tref)\n+                    }\n+                    TraitTyParamBound(ref tref, TraitBoundModifier::Maybe) => {\n+                        try!(word(&mut self.s, \"?\"));\n                         self.print_poly_trait_ref(tref)\n                     }\n                     RegionTyParamBound(ref lt) => {\n@@ -2412,10 +2421,6 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_ty_param(&mut self, param: &ast::TyParam) -> IoResult<()> {\n-        if let Some(ref tref) = param.unbound {\n-            try!(self.print_trait_ref(tref));\n-            try!(self.word_space(\"?\"));\n-        }\n         try!(self.print_ident(param.ident));\n         try!(self.print_bounds(\":\", param.bounds[]));\n         match param.default {"}, {"sha": "1cd21ccac7a0ef41b7d757b3ee2cb51b65333c0f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -85,8 +85,8 @@ pub trait Visitor<'v> {\n     fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n         walk_ty_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef) {\n-        walk_poly_trait_ref(self, t)\n+    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n+        walk_poly_trait_ref(self, t, m)\n     }\n     fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident, _: &'v Generics, _: NodeId) {\n         walk_struct_def(self, s)\n@@ -244,7 +244,8 @@ pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,\n /// Like with walk_method_helper this doesn't correspond to a method\n /// in Visitor, and so it gets a _helper suffix.\n pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,\n-                                         trait_ref: &'v PolyTraitRef)\n+                                  trait_ref: &'v PolyTraitRef,\n+                                  _modifier: &'v TraitBoundModifier)\n     where V: Visitor<'v>\n {\n     walk_lifetime_decls_helper(visitor, &trait_ref.bound_lifetimes);\n@@ -324,7 +325,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                                      generics,\n                                      item.id)\n         }\n-        ItemTrait(_, ref generics, _, ref bounds, ref methods) => {\n+        ItemTrait(_, ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n             walk_ty_param_bounds_helper(visitor, bounds);\n             for method in methods.iter() {\n@@ -558,8 +559,8 @@ pub fn walk_ty_param_bounds_helper<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                bound: &'v TyParamBound) {\n     match *bound {\n-        TraitTyParamBound(ref typ) => {\n-            visitor.visit_poly_trait_ref(typ);\n+        TraitTyParamBound(ref typ, ref modifier) => {\n+            visitor.visit_poly_trait_ref(typ, modifier);\n         }\n         RegionTyParamBound(ref lifetime) => {\n             visitor.visit_lifetime_bound(lifetime);"}, {"sha": "d3d2e3581aaf7e08ac4f9f7008ea0b2a7c17966d", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -23,7 +23,7 @@ impl Trait for A {\n     }\n }\n \n-struct Foo<Sized? T> {\n+struct Foo<T: ?Sized> {\n     f: T\n }\n "}, {"sha": "47547bb7e5a27958859a5a4ad068f41cc448f56c", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -10,7 +10,7 @@\n \n // As dst-struct.rs, but the unsized field is the only field in the struct.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     ptr: T\n }\n "}, {"sha": "fb536904ac80f4d197d483fb632f72890d1e1a1e", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,\n     ptr: T"}, {"sha": "abe55d78ac69a4bb00f9b7f99b7d4ead00694929", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,\n     ptr: T"}, {"sha": "3a63e63355cd09b0eda51acee61a0bd6dd8d7f28", "filename": "src/test/run-pass/issue-15155.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15155.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -22,7 +22,7 @@ struct IndirectBlah { x: Box<IndirectTraitWithSend> }\n impl TraitWithSend for IndirectBlah {}\n impl IndirectTraitWithSend for IndirectBlah {}\n \n-fn test_trait<Sized? T: Send>() { println!(\"got here!\") }\n+fn test_trait<T: Send + ?Sized>() { println!(\"got here!\") }\n \n fn main() {\n     test_trait::<TraitWithSend>();"}, {"sha": "092bcf661a76a2b5e2ecd7a4cef68790f0fd4196", "filename": "src/test/run-pass/issue-17361.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fissue-17361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fissue-17361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17361.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -11,6 +11,6 @@\n // Test that astconv doesn't forget about mutability of &mut str\n \n fn main() {\n-    fn foo<Sized? T>(_: &mut T) {}\n+    fn foo<T: ?Sized>(_: &mut T) {}\n     let _f: fn(&mut str) = foo;\n }"}, {"sha": "4e4fb75b428cc84f055a3a59a953b86f9771b488", "filename": "src/test/run-pass/method-recursive-blanket-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -16,7 +16,7 @@\n use std::kinds::Sized;\n \n // Note: this must be generic for the problem to show up\n-trait Foo<A> for Sized? {\n+trait Foo<A> for ?Sized {\n     fn foo(&self);\n }\n "}, {"sha": "07b9fac66554e0730ba063c5fe9f924ce4e07539", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -10,21 +10,22 @@\n //\n // ignore-lexer-test FIXME #15879\n \n-// Test syntax checks for `Sized?` syntax.\n+// Test syntax checks for `?Sized` syntax.\n \n-trait T1 for Sized? {}\n-pub trait T2 for Sized? {}\n-trait T3<X: T1> for Sized?: T2 {}\n-trait T4<Sized? X> {}\n-trait T5<Sized? X, Y> {}\n-trait T6<Y, Sized? X> {}\n-trait T7<Sized? X, Sized? Y> {}\n-trait T8<Sized? X: T2> {}\n-struct S1<Sized? X>;\n-enum E<Sized? X> {}\n-impl <Sized? X> T1 for S1<X> {}\n-fn f<Sized? X>() {}\n-type TT<Sized? T> = T;\n+trait T1 for ?Sized {}\n+pub trait T2 for ?Sized {}\n+trait T3<X: T1> for ?Sized: T2 {}\n+trait T4<X: ?Sized> {}\n+trait T5<X: ?Sized, Y> {}\n+trait T6<Y, X: ?Sized> {}\n+trait T7<X: ?Sized, Y: ?Sized> {}\n+trait T8<X: ?Sized+T2> {}\n+trait T9<X: T2 + ?Sized> {}\n+struct S1<X: ?Sized>;\n+enum E<X: ?Sized> {}\n+impl <X: ?Sized> T1 for S1<X> {}\n+fn f<X: ?Sized>() {}\n+type TT<T: ?Sized> = T;\n \n pub fn main() {\n }"}, {"sha": "8d2c99d4414c9921bf2110f15c86ac1a7ba3ceaf", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8547783f9524af78f90314b6c625c7969c9de1/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=2a8547783f9524af78f90314b6c625c7969c9de1", "patch": "@@ -13,7 +13,7 @@\n // Test sized-ness checking in substitution.\n \n // Unbounded.\n-fn f1<Sized? X>(x: &X) {\n+fn f1<X: ?Sized>(x: &X) {\n     f1::<X>(x);\n }\n fn f2<X>(x: &X) {\n@@ -22,8 +22,8 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for Sized? {}\n-fn f3<Sized? X: T>(x: &X) {\n+trait T for ?Sized {}\n+fn f3<X: T+?Sized>(x: &X) {\n     f3::<X>(x);\n }\n fn f4<X: T>(x: &X) {\n@@ -32,7 +32,7 @@ fn f4<X: T>(x: &X) {\n }\n \n // Self type.\n-trait T2 for Sized? {\n+trait T2 for ?Sized {\n     fn f() -> Box<Self>;\n }\n struct S;\n@@ -41,22 +41,22 @@ impl T2 for S {\n         box S\n     }\n }\n-fn f5<Sized? X: T2>(x: &X) {\n+fn f5<X: ?Sized+T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n fn f6<X: T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n \n-trait T3 for Sized? {\n+trait T3 for ?Sized {\n     fn f() -> Box<Self>;\n }\n impl T3 for S {\n     fn f() -> Box<S> {\n         box S\n     }\n }\n-fn f7<Sized? X: T3>(x: &X) {\n+fn f7<X: ?Sized+T3>(x: &X) {\n     // This is valid, but the unsized bound on X is irrelevant because any type\n     // which implements T3 must have statically known size.\n     let _: Box<X> = T3::f();\n@@ -66,7 +66,7 @@ trait T4<X> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T5<Sized? X> {\n+trait T5<X: ?Sized> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n@@ -76,21 +76,21 @@ trait T6<X: T> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T7<Sized? X: T> {\n+trait T7<X: ?Sized+T> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n \n // The last field in a struct or variant may be unsized\n-struct S2<Sized? X> {\n+struct S2<X: ?Sized> {\n     f: X,\n }\n-struct S3<Sized? X> {\n+struct S3<X: ?Sized> {\n     f1: int,\n     f2: X,\n }\n-enum E<Sized? X> {\n+enum E<X: ?Sized> {\n     V1(X),\n     V2{x: X},\n     V3(int, X),"}]}