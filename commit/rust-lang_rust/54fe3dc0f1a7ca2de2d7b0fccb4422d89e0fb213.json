{"sha": "54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "node_id": "C_kwDOAAsO6NoAKDU0ZmUzZGMwZjFhN2NhMmRlMmQ3YjBmY2NiNDQyMmQ4OWUwZmIyMTM", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-27T00:12:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-27T00:19:45Z"}, "message": "Fix `if` in #11561", "tree": {"sha": "fe945283beac1642ec3661936e707115f805d006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe945283beac1642ec3661936e707115f805d006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "html_url": "https://github.com/rust-lang/rust/commit/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b86baa709282a07e6678744a31b0d18e51a60504", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86baa709282a07e6678744a31b0d18e51a60504", "html_url": "https://github.com/rust-lang/rust/commit/b86baa709282a07e6678744a31b0d18e51a60504"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "ae3a3c93931d9290ddc296c5c40c3df989c0d4f8", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "patch": "@@ -49,25 +49,81 @@ impl From<ast::IfExpr> for ElseBranch {\n \n impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n-        self.blocks().next()\n+        self.children_after_condition().next()\n     }\n \n     pub fn else_branch(&self) -> Option<ElseBranch> {\n-        let res = match self.blocks().nth(1) {\n+        let res = match self.children_after_condition().nth(1) {\n             Some(block) => ElseBranch::Block(block),\n             None => {\n-                let elif: ast::IfExpr = support::child(self.syntax())?;\n+                let elif = self.children_after_condition().next()?;\n                 ElseBranch::IfExpr(elif)\n             }\n         };\n         Some(res)\n     }\n \n-    pub fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n-        support::children(self.syntax())\n+    fn children_after_condition<N: AstNode>(&self) -> impl Iterator<Item = N> {\n+        self.syntax().children().skip(1).filter_map(N::cast)\n     }\n }\n \n+#[test]\n+fn if_block_condition() {\n+    let parse = ast::SourceFile::parse(\n+        r#\"\n+        fn test() {\n+            if { true } { \"if\" }\n+            else if { false } { \"first elif\" }\n+            else if true { \"second elif\" }\n+            else if (true) { \"third elif\" }\n+            else { \"else\" }\n+        }\n+        \"#,\n+    );\n+    let if_ = parse.tree().syntax().descendants().find_map(ast::IfExpr::cast).unwrap();\n+    assert_eq!(if_.then_branch().unwrap().syntax().text(), r#\"{ \"if\" }\"#);\n+    let elif = match if_.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"first elif\" }\"#);\n+    let elif = match elif.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"second elif\" }\"#);\n+    let elif = match elif.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"third elif\" }\"#);\n+    let else_ = match elif.else_branch().unwrap() {\n+        ElseBranch::Block(else_) => else_,\n+        ElseBranch::IfExpr(_) => panic!(\"should be `else`\"),\n+    };\n+    assert_eq!(else_.syntax().text(), r#\"{ \"else\" }\"#);\n+}\n+\n+#[test]\n+fn if_condition_with_if_inside() {\n+    let parse = ast::SourceFile::parse(\n+        r#\"\n+        fn test() {\n+            if if true { true } else { false } { \"if\" }\n+            else { \"else\" }\n+        }\n+        \"#,\n+    );\n+    let if_ = parse.tree().syntax().descendants().find_map(ast::IfExpr::cast).unwrap();\n+    assert_eq!(if_.then_branch().unwrap().syntax().text(), r#\"{ \"if\" }\"#);\n+    let else_ = match if_.else_branch().unwrap() {\n+        ElseBranch::Block(else_) => else_,\n+        ElseBranch::IfExpr(_) => panic!(\"should be `else`\"),\n+    };\n+    assert_eq!(else_.syntax().text(), r#\"{ \"else\" }\"#);\n+}\n+\n impl ast::PrefixExpr {\n     pub fn op_kind(&self) -> Option<UnaryOp> {\n         let res = match self.op_token()?.kind() {"}]}