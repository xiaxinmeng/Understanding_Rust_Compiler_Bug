{"sha": "cccc3109ffc61a742bcaa9241e457ceadb96ce95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2MzMTA5ZmZjNjFhNzQyYmNhYTkyNDFlNDU3Y2VhZGI5NmNlOTU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-14T18:26:34Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-14T18:26:34Z"}, "message": "lint: use `transparent_newtype_field` to avoid ICE\n\nThis commit re-uses the `transparent_newtype_field` function instead of\nmanually calling `is_zst` on normalized fields to determine which field\nin a transparent type is the non-zero-sized field, thus avoiding an ICE.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "699b9bf6e4ebb96f67960fa49a2b3557954df400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/699b9bf6e4ebb96f67960fa49a2b3557954df400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccc3109ffc61a742bcaa9241e457ceadb96ce95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8N+RsACgkQJZLnbIc4\nH9nCPxAAj5W6XZ7UhIfIFNCEmNC3gB5KnMtJp5WTNwscQhbhgp98AnpIwRc84acJ\nURmM5SS7HYr0lZGRdghRkeRr1agmpI3G2LgJaTRLItLNtQEA1c40baLBba2hxqES\npy+OuIks+MleXtucAk+EAIJGLf/fCcahFNo5IUe6KULnX6XEH0UI2PJL6C7Vkl7A\nVHhgS328n4qfCWh9FRkNBRCn6DROyJTf147gShCODPHcr/16kWkmEc+sCYc2Iof4\nKmHciysyqAUQUg76YRM/ZJK413fXqAo02CXjFR1SKeqpZNR8Z3xQQxZPNLSUvzyu\nTE4CA4iRSTWeoBCx9RoqDbhs661dq1RHoaqmNpAM5M2qUHnB1NiCnmPEdFKAaDcZ\nSrl7XKZtdWpMiXMqZCz1D9t01AZMYuqkFMgQp2N12qKhGvo4CM1fNj9jU6aLNn+v\nsa+x0Z0ciwybkbno/tehYIvrDrmMbAmHCWqUZz+QIxJtf3sTYg6jiba8X7969St3\n2UZ92LByddh9v7aER5lQ3qBJ3N4+FQfZBOVb8FxbDLwR4j+EeaOs52PSaN8+pztP\nleezzIV/e9R/B8y3aEha23plg0Fbs54J1RH4vbHrcK1lAeIs5h3kDbohFkIhaP5F\nSAkNf20wyMxR327zVf70zVXaoE8lvS0uSBaBkiuFSyNS5WDxPlw=\n=ql7o\n-----END PGP SIGNATURE-----", "payload": "tree 699b9bf6e4ebb96f67960fa49a2b3557954df400\nparent c724b67e1b474262917a5154d74e7072267593fe\nauthor David Wood <david@davidtw.co> 1594751194 +0100\ncommitter David Wood <david@davidtw.co> 1594751194 +0100\n\nlint: use `transparent_newtype_field` to avoid ICE\n\nThis commit re-uses the `transparent_newtype_field` function instead of\nmanually calling `is_zst` on normalized fields to determine which field\nin a transparent type is the non-zero-sized field, thus avoiding an ICE.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccc3109ffc61a742bcaa9241e457ceadb96ce95", "html_url": "https://github.com/rust-lang/rust/commit/cccc3109ffc61a742bcaa9241e457ceadb96ce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccc3109ffc61a742bcaa9241e457ceadb96ce95/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c724b67e1b474262917a5154d74e7072267593fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c724b67e1b474262917a5154d74e7072267593fe", "html_url": "https://github.com/rust-lang/rust/commit/c724b67e1b474262917a5154d74e7072267593fe"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "46741fcf2ba0c290864bc6aa1b4a39890cd0fc22", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cccc3109ffc61a742bcaa9241e457ceadb96ce95/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc3109ffc61a742bcaa9241e457ceadb96ce95/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cccc3109ffc61a742bcaa9241e457ceadb96ce95", "patch": "@@ -531,23 +531,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.kind {\n             ty::FnPtr(_) => true,\n             ty::Ref(..) => true,\n-            ty::Adt(field_def, substs) if field_def.repr.transparent() && !field_def.is_union() => {\n-                for field in field_def.all_fields() {\n-                    let field_ty = self.cx.tcx.normalize_erasing_regions(\n-                        self.cx.param_env,\n-                        field.ty(self.cx.tcx, substs),\n-                    );\n-                    if field_ty.is_zst(self.cx.tcx, field.did) {\n-                        continue;\n-                    }\n+            ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n+                let guaranteed_nonnull_optimization = self\n+                    .cx\n+                    .tcx\n+                    .get_attrs(def.did)\n+                    .iter()\n+                    .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed));\n+\n+                if guaranteed_nonnull_optimization {\n+                    return true;\n+                }\n \n-                    let attrs = self.cx.tcx.get_attrs(field_def.did);\n-                    if attrs\n-                        .iter()\n-                        .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed))\n-                        || self.ty_is_known_nonnull(field_ty)\n-                    {\n-                        return true;\n+                for variant in &def.variants {\n+                    if let Some(field) = variant.transparent_newtype_field(self.cx.tcx) {\n+                        if self.ty_is_known_nonnull(field.ty(self.cx.tcx, substs)) {\n+                            return true;\n+                        }\n                     }\n                 }\n "}, {"sha": "293ffd5c28e1089cee0a40805786a13f408251a9", "filename": "src/test/ui/lint/lint-ctypes-73747.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cccc3109ffc61a742bcaa9241e457ceadb96ce95/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc3109ffc61a742bcaa9241e457ceadb96ce95/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs?ref=cccc3109ffc61a742bcaa9241e457ceadb96ce95", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#[repr(transparent)]\n+struct NonNullRawComPtr<T: ComInterface> {\n+    inner: std::ptr::NonNull<<T as ComInterface>::VTable>,\n+}\n+\n+trait ComInterface {\n+    type VTable;\n+}\n+\n+extern \"C\" fn invoke<T: ComInterface>(_: Option<NonNullRawComPtr<T>>) {}\n+\n+fn main() {}"}]}