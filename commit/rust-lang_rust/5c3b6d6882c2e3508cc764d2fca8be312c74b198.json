{"sha": "5c3b6d6882c2e3508cc764d2fca8be312c74b198", "node_id": "C_kwDOAAsO6NoAKDVjM2I2ZDY4ODJjMmUzNTA4Y2M3NjRkMmZjYThiZTMxMmM3NGIxOTg", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-29T22:39:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T22:39:54Z"}, "message": "Rollup merge of #99888 - nnethercote:streamline-visitors, r=cjgillot\n\nStreamline lint checking\n\nThe early (AST) and late (HIR) lint checkers have a number of functions that aren't used by rustc or clippy. Might as well remove them -- it's not like there's a canonical API here, as shown by the ad hoc use of `check_foo`/`check_foo_post` combinations.\n\nr? `@cjgillot`", "tree": {"sha": "df767b65208aedb9a6e877b0faaedce7c5a4bca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df767b65208aedb9a6e877b0faaedce7c5a4bca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3b6d6882c2e3508cc764d2fca8be312c74b198", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5GG6CRBK7hj4Ov3rIwAAmF8IALBQF5ivUyoWs6oCPOuiW+cC\nG5RH75xGt3A/JH8E38rHPyaAOGTj5VJsEzHi5REgpFs7cnRTmpLE87CQSXZ/hpK0\ncZ2DsvLq0XNMOI+TpHtslvtZV5zToLVkMt5unSKgF55lw8wjPCDlUsZXj7Jp3+WL\nWFctCttlCkWCOKNMfjiG1G4zOnHrN1MmWjwLLpw75RHL6BVxVuvS1zykz10foMsD\nG3XcEqbyodoGABHmXfjzdoG2DwCZZtfsJYSrcMiZCQfGj39m6YvAQ4KX/ioReG7Z\nsARaW5EIoqFn1fw8c3Yvqd37o4RJON0r/ZbD/TBDwif3b2JeTDPnRkfkd7a2up4=\n=gKqv\n-----END PGP SIGNATURE-----\n", "payload": "tree df767b65208aedb9a6e877b0faaedce7c5a4bca4\nparent c1a5c11c574493759fc07f77072350c7d79c134a\nparent 74e9a29f6e96f63035aed3026374921c1ba57c00\nauthor Yuki Okushi <jtitor@2k36.org> 1659134394 +0900\ncommitter GitHub <noreply@github.com> 1659134394 +0900\n\nRollup merge of #99888 - nnethercote:streamline-visitors, r=cjgillot\n\nStreamline lint checking\n\nThe early (AST) and late (HIR) lint checkers have a number of functions that aren't used by rustc or clippy. Might as well remove them -- it's not like there's a canonical API here, as shown by the ad hoc use of `check_foo`/`check_foo_post` combinations.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3b6d6882c2e3508cc764d2fca8be312c74b198", "html_url": "https://github.com/rust-lang/rust/commit/5c3b6d6882c2e3508cc764d2fca8be312c74b198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3b6d6882c2e3508cc764d2fca8be312c74b198/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a5c11c574493759fc07f77072350c7d79c134a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5c11c574493759fc07f77072350c7d79c134a", "html_url": "https://github.com/rust-lang/rust/commit/c1a5c11c574493759fc07f77072350c7d79c134a"}, {"sha": "74e9a29f6e96f63035aed3026374921c1ba57c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e9a29f6e96f63035aed3026374921c1ba57c00", "html_url": "https://github.com/rust-lang/rust/commit/74e9a29f6e96f63035aed3026374921c1ba57c00"}], "stats": {"total": 94, "additions": 6, "deletions": 88}, "files": [{"sha": "d9594b323dd0d0f7c092b7126fa44134116e063f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -15,7 +15,7 @@\n \n use crate::ast::*;\n \n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -109,12 +109,7 @@ pub enum LifetimeCtxt {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'ast>: Sized {\n-    fn visit_name(&mut self, _span: Span, _name: Symbol) {\n-        // Nothing to do.\n-    }\n-    fn visit_ident(&mut self, ident: Ident) {\n-        walk_ident(self, ident);\n-    }\n+    fn visit_ident(&mut self, _ident: Ident) {}\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) {\n         walk_foreign_item(self, i)\n     }\n@@ -267,10 +262,6 @@ macro_rules! walk_list {\n     }\n }\n \n-pub fn walk_ident<'a, V: Visitor<'a>>(visitor: &mut V, ident: Ident) {\n-    visitor.visit_name(ident.span, ident.name);\n-}\n-\n pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {\n     walk_list!(visitor, visit_item, &krate.items);\n     walk_list!(visitor, visit_attribute, &krate.attrs);\n@@ -315,11 +306,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);\n     match item.kind {\n-        ItemKind::ExternCrate(orig_name) => {\n-            if let Some(orig_name) = orig_name {\n-                visitor.visit_name(item.span, orig_name);\n-            }\n-        }\n+        ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(ref use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n         ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(_, ref typ, ref expr) => {\n             visitor.visit_ty(typ);"}, {"sha": "9c7369c83e2da57f8cf2bca9c4cc15862dc5065d", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -16,9 +16,8 @@ impl NodeCounter {\n }\n \n impl<'ast> Visitor<'ast> for NodeCounter {\n-    fn visit_ident(&mut self, ident: Ident) {\n+    fn visit_ident(&mut self, _ident: Ident) {\n         self.count += 1;\n-        walk_ident(self, ident);\n     }\n     fn visit_foreign_item(&mut self, i: &ForeignItem) {\n         self.count += 1;"}, {"sha": "d13711c3ab59851636b0449dfa2fd3fee538ecf8", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -90,9 +90,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_early_pass!(cx, check_foreign_item, it);\n             ast_visit::walk_foreign_item(cx, it);\n-            run_early_pass!(cx, check_foreign_item_post, it);\n         })\n     }\n \n@@ -104,7 +102,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_anon_const(&mut self, c: &'a ast::AnonConst) {\n-        run_early_pass!(self, check_anon_const, c);\n         self.check_id(c.id);\n         ast_visit::walk_anon_const(self, c);\n     }\n@@ -154,22 +151,17 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n                 self.check_id(closure_id);\n             }\n         }\n-\n-        run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a ast::VariantData) {\n-        run_early_pass!(self, check_struct_def, s);\n         if let Some(ctor_hir_id) = s.ctor_id() {\n             self.check_id(ctor_hir_id);\n         }\n         ast_visit::walk_struct_def(self, s);\n-        run_early_pass!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'a ast::FieldDef) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_early_pass!(cx, check_field_def, s);\n             ast_visit::walk_field_def(cx, s);\n         })\n     }\n@@ -178,7 +170,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n             run_early_pass!(cx, check_variant, v);\n             ast_visit::walk_variant(cx, v);\n-            run_early_pass!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -203,7 +194,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n-        run_early_pass!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n@@ -214,8 +204,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n-        run_early_pass!(self, check_expr_post, e);\n-\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n@@ -242,7 +230,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        run_early_pass!(self, check_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n@@ -256,23 +243,19 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast_visit::AssocCtxt::Trait => {\n                 run_early_pass!(cx, check_trait_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_trait_item_post, item);\n             }\n             ast_visit::AssocCtxt::Impl => {\n                 run_early_pass!(cx, check_impl_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_impl_item_post, item);\n             }\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n-        run_early_pass!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }\n \n     fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {\n-        run_early_pass!(self, check_path, p, id);\n         self.check_id(id);\n         ast_visit::walk_path(self, p);\n     }"}, {"sha": "a329b37519d98a04ec661f9c194918b0c8614b5b", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -81,7 +81,6 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         lint_callback!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n-        lint_callback!(self, check_mod_post, m, s, n);\n     }\n }\n \n@@ -118,7 +117,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         self.with_lint_attrs(param.hir_id, |cx| {\n-            lint_callback!(cx, check_param, param);\n             hir_visit::walk_param(cx, param);\n         });\n     }\n@@ -151,7 +149,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n-                lint_callback!(cx, check_foreign_item_post, it);\n             });\n         })\n     }\n@@ -193,7 +190,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         let body = self.context.tcx.hir().body(body_id);\n         lint_callback!(self, check_fn, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n-        lint_callback!(self, check_fn_post, fk, decl, body, span, id);\n         self.context.enclosing_body = old_enclosing_body;\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n@@ -208,7 +204,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     ) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n-        lint_callback!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n@@ -227,7 +222,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            lint_callback!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -237,14 +231,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n-        lint_callback!(self, check_infer, inf);\n         hir_visit::walk_inf(self, inf);\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: Symbol) {\n-        lint_callback!(self, check_name, sp, name);\n-    }\n-\n     fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         if !self.context.only_module {\n             self.process_mod(m, s, n);\n@@ -280,7 +269,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate<'tcx>) {\n-        lint_callback!(self, check_where_predicate, p);\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n@@ -300,7 +288,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(trait_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n-                lint_callback!(cx, check_trait_item_post, trait_item);\n             });\n         });\n         self.context.generics = generics;\n@@ -320,7 +307,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-        lint_callback!(self, check_lifetime, lt);\n         hir_visit::walk_lifetime(self, lt);\n     }\n "}, {"sha": "ae2088fbeb6f632e73955463fccca23e0cfd9e1a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -75,7 +75,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n };\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;"}, {"sha": "cb7bd407ed4c8670168f71f30a270de693004f9e", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3b6d6882c2e3508cc764d2fca8be312c74b198/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=5c3b6d6882c2e3508cc764d2fca8be312c74b198", "patch": "@@ -5,23 +5,19 @@ use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n     ($macro:path, $args:tt, [$hir:tt]) => (\n         $macro!($args, [$hir], [\n-            fn check_param(a: &$hir hir::Param<$hir>);\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n-            fn check_name(a: Span, b: Symbol);\n             fn check_crate();\n             fn check_crate_post();\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n-            fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n-            fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n             fn check_local(a: &$hir hir::Local<$hir>);\n@@ -33,35 +29,21 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n-            fn check_infer(a: &$hir hir::InferArg);\n-            fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n                 a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n-            fn check_fn_post(\n-                a: rustc_hir::intravisit::FnKind<$hir>,\n-                b: &$hir hir::FnDecl<$hir>,\n-                c: &$hir hir::Body<$hir>,\n-                d: Span,\n-                e: hir::HirId\n-            );\n             fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n-            fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n             fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n-            fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n             fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_variant_post(a: &$hir hir::Variant<$hir>);\n-            fn check_lifetime(a: &$hir hir::Lifetime);\n             fn check_path(a: &$hir hir::Path<$hir>, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n \n@@ -161,44 +143,25 @@ macro_rules! early_lint_methods {\n             fn check_ident(a: Ident);\n             fn check_crate(a: &ast::Crate);\n             fn check_crate_post(a: &ast::Crate);\n-            fn check_foreign_item(a: &ast::ForeignItem);\n-            fn check_foreign_item_post(a: &ast::ForeignItem);\n             fn check_item(a: &ast::Item);\n             fn check_item_post(a: &ast::Item);\n             fn check_local(a: &ast::Local);\n             fn check_block(a: &ast::Block);\n-            fn check_block_post(a: &ast::Block);\n             fn check_stmt(a: &ast::Stmt);\n             fn check_arm(a: &ast::Arm);\n             fn check_pat(a: &ast::Pat);\n-            fn check_anon_const(a: &ast::AnonConst);\n             fn check_pat_post(a: &ast::Pat);\n             fn check_expr(a: &ast::Expr);\n-            fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_where_predicate(a: &ast::WherePredicate);\n             fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n                                     b: &ast::TraitBoundModifier);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n-            fn check_fn_post(\n-                a: rustc_ast::visit::FnKind<'_>,\n-                c: Span,\n-                d: ast::NodeId\n-            );\n             fn check_trait_item(a: &ast::AssocItem);\n-            fn check_trait_item_post(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);\n-            fn check_impl_item_post(a: &ast::AssocItem);\n-            fn check_struct_def(a: &ast::VariantData);\n-            fn check_struct_def_post(a: &ast::VariantData);\n-            fn check_field_def(a: &ast::FieldDef);\n             fn check_variant(a: &ast::Variant);\n-            fn check_variant_post(a: &ast::Variant);\n-            fn check_lifetime(a: &ast::Lifetime);\n-            fn check_path(a: &ast::Path, b: ast::NodeId);\n             fn check_attribute(a: &ast::Attribute);\n             fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n             fn check_mac(a: &ast::MacCall);"}]}