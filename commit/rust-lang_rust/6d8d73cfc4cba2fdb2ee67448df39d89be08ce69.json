{"sha": "6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGQ3M2NmYzRjYmEyZmRiMmVlNjc0NDhkZjM5ZDg5YmUwOGNlNjk=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-05-21T05:31:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-21T22:45:40Z"}, "message": "Add AtomicUint newtype", "tree": {"sha": "b5aef70cde6068fd2c928f5c09df894ef548c1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aef70cde6068fd2c928f5c09df894ef548c1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "html_url": "https://github.com/rust-lang/rust/commit/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "807269041437411df49a9a893c86310283d6eb91", "url": "https://api.github.com/repos/rust-lang/rust/commits/807269041437411df49a9a893c86310283d6eb91", "html_url": "https://github.com/rust-lang/rust/commit/807269041437411df49a9a893c86310283d6eb91"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "7c228ff564778352df363bc75df0325b68f4515f", "filename": "src/libcore/unstable/sync.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69/src%2Flibcore%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69/src%2Flibcore%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fsync.rs?ref=6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "patch": "@@ -205,6 +205,26 @@ extern {\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n+/* *********************************************************************/\n+\n+//FIXME: #5042 This should be replaced by proper atomic type\n+pub struct AtomicUint(uint);\n+pub impl AtomicUint {\n+    fn load(&self) -> uint {\n+        unsafe { intrinsics::atomic_load(cast::transmute(self)) as uint }\n+    }\n+    fn store(&mut self, val:uint) {\n+        unsafe { intrinsics::atomic_store(cast::transmute(self), val as int); }\n+    }\n+    fn add(&mut self, val:int) -> uint {\n+        unsafe { intrinsics::atomic_xadd(cast::transmute(self), val as int) as uint }\n+    }\n+    fn cas(&self, old:uint, new:uint) -> uint {\n+        unsafe { intrinsics::atomic_cxchg(cast::transmute(self), old as int, new as int) as uint }\n+    }\n+}\n+\n+\n #[cfg(test)]\n mod tests {\n     use comm;"}]}