{"sha": "0f536431f54efe572a2be0c7c082e79c2fe62f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTM2NDMxZjU0ZWZlNTcyYTJiZTBjN2MwODJlNzljMmZlNjJmNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-09T01:11:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-09T01:11:45Z"}, "message": "Auto merge of #28888 - arielb1:variant-ctor, r=eddyb\n\nthis makes the code cleaner, and is a complement to the cleanup on the\r\nHIR side.\r\n\r\nr? @eddyb", "tree": {"sha": "26ec4ba40652adb6a999cf4cd6613cadf113414c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ec4ba40652adb6a999cf4cd6613cadf113414c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f536431f54efe572a2be0c7c082e79c2fe62f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f536431f54efe572a2be0c7c082e79c2fe62f4a", "html_url": "https://github.com/rust-lang/rust/commit/0f536431f54efe572a2be0c7c082e79c2fe62f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f536431f54efe572a2be0c7c082e79c2fe62f4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0cae14f6627e2ad2b50998755eeb818aad750ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cae14f6627e2ad2b50998755eeb818aad750ca", "html_url": "https://github.com/rust-lang/rust/commit/d0cae14f6627e2ad2b50998755eeb818aad750ca"}, {"sha": "8afa1762f01be8855db823cdc1b3b1c3c3b3dcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afa1762f01be8855db823cdc1b3b1c3c3b3dcf9", "html_url": "https://github.com/rust-lang/rust/commit/8afa1762f01be8855db823cdc1b3b1c3c3b3dcf9"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "0780252fc887b8b3c83b1bcbc8a221fd524dad20", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=0f536431f54efe572a2be0c7c082e79c2fe62f4a", "patch": "@@ -388,7 +388,6 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                 did: did,\n                 name: item_name(intr, item),\n                 fields: get_variant_fields(intr, cdata, item, tcx),\n-                ctor_id: did,\n                 disr_val: disr\n             }\n         }).collect()\n@@ -417,13 +416,11 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n                                 did: DefId,\n-                                ctor_id: DefId,\n                                 tcx: &ty::ctxt<'tcx>) -> ty::VariantDefData<'tcx, 'tcx> {\n         ty::VariantDefData {\n             did: did,\n             name: item_name(intr, doc),\n             fields: get_variant_fields(intr, cdata, doc, tcx),\n-            ctor_id: ctor_id,\n             disr_val: 0\n         }\n     }\n@@ -440,7 +437,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                 reader::maybe_get_doc(doc, tag_items_data_item_struct_ctor).\n                 map_or(did, |ctor_doc| translated_def_id(cdata, ctor_doc));\n             (ty::AdtKind::Struct,\n-             vec![get_struct_variant(intr, cdata, doc, did, ctor_did, tcx)])\n+             vec![get_struct_variant(intr, cdata, doc, ctor_did, tcx)])\n         }\n         _ => tcx.sess.bug(\n             &format!(\"get_adt_def called on a non-ADT {:?} - {:?}\","}, {"sha": "160be3fa7ff458587b2c68335d7295b772576f07", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0f536431f54efe572a2be0c7c082e79c2fe62f4a", "patch": "@@ -1312,14 +1312,17 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n                 for (i_variant, orig_variant) in\n                     def.variants.iter().zip(orig_def.variants.iter())\n                 {\n+                    debug!(\"astencode: copying variant {:?} => {:?}\",\n+                           orig_variant.did, i_variant.node.id);\n                     copy_item_type(dcx, i_variant.node.id, orig_variant.did);\n                 }\n             }\n             hir::ItemStruct(ref def, _) => {\n                 if let Some(ctor_id) = def.ctor_id {\n                     let ctor_did = dcx.tcx.lookup_adt_def(orig_did)\n-                        .struct_variant().ctor_id;\n-                    debug!(\"copying ctor {:?}\", ctor_did);\n+                        .struct_variant().did;\n+                    debug!(\"astencode: copying ctor {:?} => {:?}\", ctor_did,\n+                           ctor_id);\n                     copy_item_type(dcx, ctor_id, ctor_did);\n                 }\n             }"}, {"sha": "4ffb519900356ab0687aeb73907c9407c9fb8afd", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=0f536431f54efe572a2be0c7c082e79c2fe62f4a", "patch": "@@ -1470,13 +1470,12 @@ pub type VariantDefMaster<'tcx> = &'tcx VariantDefData<'tcx, 'tcx>;\n pub type FieldDefMaster<'tcx> = &'tcx FieldDefData<'tcx, 'tcx>;\n \n pub struct VariantDefData<'tcx, 'container: 'tcx> {\n+    /// The variant's DefId. If this is a tuple-like struct,\n+    /// this is the DefId of the struct's ctor.\n     pub did: DefId,\n     pub name: Name, // struct's name if this is a struct\n     pub disr_val: Disr,\n     pub fields: Vec<FieldDefData<'tcx, 'container>>,\n-    /// The DefId of the variant's ctor (unless the variant is a\n-    /// tuple-like struct variant, this is just the variant's def-id).\n-    pub ctor_id: DefId\n }\n \n pub struct FieldDefData<'tcx, 'container: 'tcx> {"}, {"sha": "69d170602303bab99afe0669e5b0cd1052874163", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f536431f54efe572a2be0c7c082e79c2fe62f4a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0f536431f54efe572a2be0c7c082e79c2fe62f4a", "patch": "@@ -1102,8 +1102,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                 did: DefId,\n                                 name: ast::Name,\n                                 disr_val: ty::Disr,\n-                                def: &hir::StructDef,\n-                                ctor_id: DefId) -> ty::VariantDefData<'tcx, 'tcx> {\n+                                def: &hir::StructDef) -> ty::VariantDefData<'tcx, 'tcx> {\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields.iter().map(|f| {\n         let fid = tcx.map.local_def_id(f.node.id);\n@@ -1130,8 +1129,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n         did: did,\n         name: name,\n         disr_val: disr_val,\n-        fields: fields,\n-        ctor_id: ctor_id\n+        fields: fields\n     }\n }\n \n@@ -1147,7 +1145,7 @@ fn convert_struct_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n     tcx.intern_adt_def(\n         did,\n         ty::AdtKind::Struct,\n-        vec![convert_struct_variant(tcx, did, it.name, 0, def, ctor_id)]\n+        vec![convert_struct_variant(tcx, ctor_id, it.name, 0, def)]\n     )\n }\n \n@@ -1237,12 +1235,11 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                             special_idents::unnamed_field.name,\n                             hir::Visibility::Public\n                         )\n-                    }).collect(),\n-                    ctor_id: did\n+                    }).collect()\n                 }\n             }\n             hir::StructVariantKind(ref def) => {\n-                convert_struct_variant(tcx, did, name, disr, &def, did)\n+                convert_struct_variant(tcx, did, name, disr, &def)\n             }\n         }\n     }"}]}