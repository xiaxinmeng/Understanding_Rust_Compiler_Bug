{"sha": "1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGE1OTFiM2E1OTYzYTBhYjExYTM1ZGM1MjVhZDlkNDZmNjEyZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T19:45:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T19:45:55Z"}, "message": "Auto merge of #87640 - JohnTitor:rollup-yq24nq5, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86072 (Cross compiling rustc_llvm on Darwin requires zlib.)\n - #87385 (Make `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default)\n - #87547 (Add missing examples for NonNull)\n - #87557 (Fix issue with autofix for ambiguous associated function from Rust 2021 prelude when struct is generic)\n - #87559 (Tweak borrowing suggestion in `for` loop)\n - #87596 (Add warning when whitespace is not skipped after an escaped newline)\n - #87606 (Add some TAIT-related regression tests)\n - #87609 (Add docs about performance and `Iterator::map` to `[T; N]::map`)\n - #87616 (Fix missing word in rustdoc book)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3449b9d74d07046723a5559f38fcdaf24ed783f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3449b9d74d07046723a5559f38fcdaf24ed783f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "html_url": "https://github.com/rust-lang/rust/commit/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9549b6c0efb7525c9b012148689c8d070f9bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9549b6c0efb7525c9b012148689c8d070f9bc0", "html_url": "https://github.com/rust-lang/rust/commit/ef9549b6c0efb7525c9b012148689c8d070f9bc0"}, {"sha": "8d5291c7cdc0b593fdfb35293b372506447f72cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5291c7cdc0b593fdfb35293b372506447f72cd", "html_url": "https://github.com/rust-lang/rust/commit/8d5291c7cdc0b593fdfb35293b372506447f72cd"}], "stats": {"total": 671, "additions": 577, "deletions": 94}, "files": [{"sha": "9c6ad47427d21e77f4715ed17884bda80253c8a7", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -63,7 +63,11 @@ impl LitKind {\n                         unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {\n                             match unescaped_char {\n                                 Ok(c) => buf.push(c),\n-                                Err(_) => error = Err(LitError::LexerError),\n+                                Err(err) => {\n+                                    if err.is_fatal() {\n+                                        error = Err(LitError::LexerError);\n+                                    }\n+                                }\n                             }\n                         });\n                         error?;\n@@ -83,7 +87,11 @@ impl LitKind {\n                         unescape_literal(&s, Mode::RawStr, &mut |_, unescaped_char| {\n                             match unescaped_char {\n                                 Ok(c) => buf.push(c),\n-                                Err(_) => error = Err(LitError::LexerError),\n+                                Err(err) => {\n+                                    if err.is_fatal() {\n+                                        error = Err(LitError::LexerError);\n+                                    }\n+                                }\n                             }\n                         });\n                         error?;\n@@ -100,7 +108,11 @@ impl LitKind {\n                 unescape_byte_literal(&s, Mode::ByteStr, &mut |_, unescaped_byte| {\n                     match unescaped_byte {\n                         Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n+                        Err(err) => {\n+                            if err.is_fatal() {\n+                                error = Err(LitError::LexerError);\n+                            }\n+                        }\n                     }\n                 });\n                 error?;\n@@ -114,7 +126,11 @@ impl LitKind {\n                     unescape_byte_literal(&s, Mode::RawByteStr, &mut |_, unescaped_byte| {\n                         match unescaped_byte {\n                             Ok(c) => buf.push(c),\n-                            Err(_) => error = Err(LitError::LexerError),\n+                            Err(err) => {\n+                                if err.is_fatal() {\n+                                    error = Err(LitError::LexerError);\n+                                }\n+                            }\n                         }\n                     });\n                     error?;"}, {"sha": "9aee86c9e57ddec76967dae4e2276312e1b17ac1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -45,6 +45,8 @@ crate struct ParserAnyMacro<'a> {\n     lint_node_id: NodeId,\n     is_trailing_mac: bool,\n     arm_span: Span,\n+    /// Whether or not this macro is defined in the current crate\n+    is_local: bool,\n }\n \n crate fn annotate_err_with_kind(\n@@ -124,6 +126,7 @@ impl<'a> ParserAnyMacro<'a> {\n             lint_node_id,\n             arm_span,\n             is_trailing_mac,\n+            is_local,\n         } = *self;\n         let snapshot = &mut parser.clone();\n         let fragment = match parse_ast_fragment(parser, kind) {\n@@ -138,13 +141,15 @@ impl<'a> ParserAnyMacro<'a> {\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n         // but `m!()` is allowed in expression positions (cf. issue #34706).\n         if kind == AstFragmentKind::Expr && parser.token == token::Semi {\n-            parser.sess.buffer_lint_with_diagnostic(\n-                SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-                parser.token.span,\n-                lint_node_id,\n-                \"trailing semicolon in macro used in expression position\",\n-                BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n-            );\n+            if is_local {\n+                parser.sess.buffer_lint_with_diagnostic(\n+                    SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+                    parser.token.span,\n+                    lint_node_id,\n+                    \"trailing semicolon in macro used in expression position\",\n+                    BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n+                );\n+            }\n             parser.bump();\n         }\n \n@@ -162,6 +167,7 @@ struct MacroRulesMacroExpander {\n     lhses: Vec<mbe::TokenTree>,\n     rhses: Vec<mbe::TokenTree>,\n     valid: bool,\n+    is_local: bool,\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n@@ -183,6 +189,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n             input,\n             &self.lhses,\n             &self.rhses,\n+            self.is_local,\n         )\n     }\n }\n@@ -210,6 +217,7 @@ fn generic_extension<'cx>(\n     arg: TokenStream,\n     lhses: &[mbe::TokenTree],\n     rhses: &[mbe::TokenTree],\n+    is_local: bool,\n ) -> Box<dyn MacResult + 'cx> {\n     let sess = &cx.sess.parse_sess;\n \n@@ -311,6 +319,7 @@ fn generic_extension<'cx>(\n                     lint_node_id: cx.current_expansion.lint_node_id,\n                     is_trailing_mac: cx.current_expansion.is_trailing_mac,\n                     arm_span,\n+                    is_local,\n                 });\n             }\n             Failure(token, msg) => match best_failure {\n@@ -544,6 +553,9 @@ pub fn compile_declarative_macro(\n         lhses,\n         rhses,\n         valid,\n+        // Macros defined in the current crate have a real node id,\n+        // whereas macros from an external crate have a dummy id.\n+        is_local: def.id != DUMMY_NODE_ID,\n     }))\n }\n "}, {"sha": "9a96c03cd3c8086806ebcfd1ea3ee3f47395e6d1", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -7,7 +7,7 @@ use std::str::Chars;\n #[cfg(test)]\n mod tests;\n \n-/// Errors that can occur during string unescaping.\n+/// Errors and warnings that can occur during string unescaping.\n #[derive(Debug, PartialEq, Eq)]\n pub enum EscapeError {\n     /// Expected 1 char, but 0 were found.\n@@ -56,6 +56,20 @@ pub enum EscapeError {\n     NonAsciiCharInByte,\n     /// Non-ascii character in byte string literal.\n     NonAsciiCharInByteString,\n+\n+    /// After a line ending with '\\', the next line contains whitespace\n+    /// characters that are not skipped.\n+    UnskippedWhitespaceWarning,\n+}\n+\n+impl EscapeError {\n+    /// Returns true for actual errors, as opposed to warnings.\n+    pub fn is_fatal(&self) -> bool {\n+        match self {\n+            EscapeError::UnskippedWhitespaceWarning => false,\n+            _ => true,\n+        }\n+    }\n }\n \n /// Takes a contents of a literal (without quotes) and produces a\n@@ -283,7 +297,7 @@ where\n                         // if unescaped '\\' character is followed by '\\n'.\n                         // For details see [Rust language reference]\n                         // (https://doc.rust-lang.org/reference/tokens.html#string-literals).\n-                        skip_ascii_whitespace(&mut chars);\n+                        skip_ascii_whitespace(&mut chars, start, callback);\n                         continue;\n                     }\n                     _ => scan_escape(first_char, &mut chars, mode),\n@@ -297,13 +311,25 @@ where\n         callback(start..end, unescaped_char);\n     }\n \n-    fn skip_ascii_whitespace(chars: &mut Chars<'_>) {\n+    fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)\n+    where\n+        F: FnMut(Range<usize>, Result<char, EscapeError>),\n+    {\n         let str = chars.as_str();\n         let first_non_space = str\n             .bytes()\n             .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\n             .unwrap_or(str.len());\n-        *chars = str[first_non_space..].chars()\n+        let tail = &str[first_non_space..];\n+        if let Some(c) = tail.chars().nth(0) {\n+            // For error reporting, we would like the span to contain the character that was not\n+            // skipped.  The +1 is necessary to account for the leading \\ that started the escape.\n+            let end = start + first_non_space + c.len_utf8() + 1;\n+            if c.is_whitespace() {\n+                callback(start..end, Err(EscapeError::UnskippedWhitespaceWarning));\n+            }\n+        }\n+        *chars = tail.chars();\n     }\n }\n "}, {"sha": "1f4dbb20f4e9896e292e44e3208146c8ab23830e", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -98,6 +98,25 @@ fn test_unescape_char_good() {\n     check(r\"\\u{1F63b}\", '\ud83d\ude3b');\n }\n \n+#[test]\n+fn test_unescape_str_warn() {\n+    fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n+        let mut unescaped = Vec::with_capacity(literal.len());\n+        unescape_literal(literal, Mode::Str, &mut |range, res| unescaped.push((range, res)));\n+        assert_eq!(unescaped, expected);\n+    }\n+\n+    check(\n+        \"\\\\\\n \\u{a0} x\",\n+        &[\n+            (0..5, Err(EscapeError::UnskippedWhitespaceWarning)),\n+            (3..5, Ok('\\u{a0}')),\n+            (5..6, Ok(' ')),\n+            (6..7, Ok('x')),\n+        ],\n+    );\n+}\n+\n #[test]\n fn test_unescape_str_good() {\n     fn check(literal_text: &str, expected: &str) {"}, {"sha": "7195c41eae92e7aacb32d08ad578f93c977f1dfb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -2799,7 +2799,7 @@ declare_lint! {\n     /// [issue #79813]: https://github.com/rust-lang/rust/issues/79813\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-    Allow,\n+    Warn,\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\","}, {"sha": "964b7cace9cd4e45326377d62d7a0a0e1616808a", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -182,7 +182,7 @@ fn main() {\n     } else if target.contains(\"windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=shell32\");\n         println!(\"cargo:rustc-link-lib=uuid\");\n-    } else if target.contains(\"netbsd\") || target.contains(\"haiku\") {\n+    } else if target.contains(\"netbsd\") || target.contains(\"haiku\") || target.contains(\"darwin\") {\n         println!(\"cargo:rustc-link-lib=z\");\n     }\n     cmd.args(&components);"}, {"sha": "2be23159bf563a5938e0fd70fa54eaa10ea0c556", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -2,7 +2,8 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n use rustc_span::source_map::DesugaringKind;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, DUMMY_SP};\n+use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;\n@@ -384,36 +385,44 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-            let def_id = match *move_place.ty(self.body, self.infcx.tcx).ty.kind() {\n-                ty::Adt(self_def, _) => self_def.did,\n-                ty::Foreign(def_id)\n-                | ty::FnDef(def_id, _)\n-                | ty::Closure(def_id, _)\n-                | ty::Generator(def_id, ..)\n-                | ty::Opaque(def_id, _) => def_id,\n-                _ => return err,\n+        let ty = move_place.ty(self.body, self.infcx.tcx).ty;\n+        let def_id = match *ty.kind() {\n+            ty::Adt(self_def, _) => self_def.did,\n+            ty::Foreign(def_id)\n+            | ty::FnDef(def_id, _)\n+            | ty::Closure(def_id, _)\n+            | ty::Generator(def_id, ..)\n+            | ty::Opaque(def_id, _) => def_id,\n+            _ => return err,\n+        };\n+        let is_option = self.infcx.tcx.is_diagnostic_item(sym::option_type, def_id);\n+        let is_result = self.infcx.tcx.is_diagnostic_item(sym::result_type, def_id);\n+        if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n+            err.span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                &format!(\n+                    \"consider borrowing the `{}`'s content\",\n+                    if is_option { \"Option\" } else { \"Result\" }\n+                ),\n+                \".as_ref()\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n+            let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n+                Some(def_id) => type_known_to_meet_bound_modulo_regions(\n+                    &self.infcx,\n+                    self.param_env,\n+                    self.infcx.tcx.mk_imm_ref(self.infcx.tcx.lifetimes.re_erased, ty),\n+                    def_id,\n+                    DUMMY_SP,\n+                ),\n+                _ => false,\n             };\n-            let is_option = self.infcx.tcx.is_diagnostic_item(sym::option_type, def_id);\n-            let is_result = self.infcx.tcx.is_diagnostic_item(sym::result_type, def_id);\n-            if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"consider borrowing the `{}`'s content\",\n-                        if is_option { \"Option\" } else { \"Result\" }\n-                    ),\n-                    format!(\"{}.as_ref()\", snippet),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_)))\n-                && self.infcx.tcx.is_diagnostic_item(sym::vec_type, def_id)\n-            {\n-                // FIXME: suggest for anything that implements `IntoIterator`.\n-                err.span_suggestion(\n-                    span,\n-                    \"consider iterating over a slice of the `Vec<_>`'s content\",\n-                    format!(\"&{}\", snippet),\n+            if suggest {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    &format!(\"consider iterating over a slice of the `{}`'s content\", ty),\n+                    \"&\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "1c5be61130b61a65b6af07c12f22a8a1dd8a9152", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -253,6 +253,12 @@ pub(crate) fn emit_unescape_error(\n             let msg = \"invalid trailing slash in literal\";\n             handler.struct_span_err(span, msg).span_label(span, msg).emit();\n         }\n+        EscapeError::UnskippedWhitespaceWarning => {\n+            let (c, char_span) = last_char();\n+            let msg =\n+                format!(\"non-ASCII whitespace symbol '{}' is not skipped\", c.escape_unicode());\n+            handler.struct_span_warn(span, &msg).span_label(char_span, &msg).emit();\n+        }\n     }\n }\n "}, {"sha": "6eb8af98640eb53f17bfbaf518bb03c1ac7348f3", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{Ref, Ty};\n+use rustc_middle::ty::{Adt, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n@@ -255,16 +255,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name.name\n             ));\n \n-            let self_ty = self\n+            let self_ty_name = self\n                 .sess()\n                 .source_map()\n                 .span_to_snippet(self_ty_span)\n                 .unwrap_or_else(|_| self_ty.to_string());\n \n+            let self_ty_generics_count = match self_ty.kind() {\n+                // Get the number of generics the self type has (if an Adt) unless we can determine that\n+                // the user has written the self type with generics already which we (naively) do by looking\n+                // for a \"<\" in `self_ty_name`.\n+                Adt(def, _) if !self_ty_name.contains(\"<\") => self.tcx.generics_of(def.did).count(),\n+                _ => 0,\n+            };\n+            let self_ty_generics = if self_ty_generics_count > 0 {\n+                format!(\"<{}>\", vec![\"_\"; self_ty_generics_count].join(\", \"))\n+            } else {\n+                String::new()\n+            };\n             lint.span_suggestion(\n                 span,\n                 \"disambiguate the associated function\",\n-                format!(\"<{} as {}>::{}\", self_ty, trait_name, method_name.name,),\n+                format!(\n+                    \"<{}{} as {}>::{}\",\n+                    self_ty_name, self_ty_generics, trait_name, method_name.name,\n+                ),\n                 Applicability::MachineApplicable,\n             );\n "}, {"sha": "3bc9f71375cb84bef9f0c1b42b2c5d0b753199bf", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -293,6 +293,28 @@ impl<T, const N: usize> [T; N] {\n     /// Returns an array of the same size as `self`, with function `f` applied to each element\n     /// in order.\n     ///\n+    /// If you don't necessarily need a new fixed-size array, consider using\n+    /// [`Iterator::map`] instead.\n+    ///\n+    ///\n+    /// # Note on performance and stack usage\n+    ///\n+    /// Unfortunately, usages of this method are currently not always optimized\n+    /// as well as they could be. This mainly concerns large arrays, as mapping\n+    /// over small arrays seem to be optimized just fine. Also note that in\n+    /// debug mode (i.e. without any optimizations), this method can use a lot\n+    /// of stack space (a few times the size of the array or more).\n+    ///\n+    /// Therefore, in performance-critical code, try to avoid using this method\n+    /// on large arrays or check the emitted code. Also try to avoid chained\n+    /// maps (e.g. `arr.map(...).map(...)`).\n+    ///\n+    /// In many cases, you can instead use [`Iterator::map`] by calling `.iter()`\n+    /// or `.into_iter()` on your array. `[T; N]::map` is only necessary if you\n+    /// really need a new array of the same size as the result. Rust's lazy\n+    /// iterators tend to get optimized very well.\n+    ///\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "032df7f5a80ad8d82d52443d8e786116eb210701", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -71,6 +71,16 @@ impl<T: Sized> NonNull<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let ptr = NonNull::<u32>::dangling();\n+    /// // Important: don't try to access the value of `ptr` without\n+    /// // initializing it first! The pointer is not null but isn't valid either!\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.36.0\")]\n     #[inline]\n@@ -155,6 +165,18 @@ impl<T: ?Sized> NonNull<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = unsafe { NonNull::new_unchecked(&mut x as *mut _) };\n+    ///\n+    /// // NEVER DO THAT!!!\n+    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.25.0\")]\n     #[inline]\n@@ -164,6 +186,19 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect(\"ptr is null!\");\n+    ///\n+    /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {\n+    ///     unreachable!();\n+    /// }\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n@@ -205,6 +240,22 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x).expect(\"ptr is null!\");\n+    ///\n+    /// let x_value = unsafe { *ptr.as_ptr() };\n+    /// assert_eq!(x_value, 0);\n+    ///\n+    /// unsafe { *ptr.as_ptr() += 2; }\n+    /// let x_value = unsafe { *ptr.as_ptr() };\n+    /// assert_eq!(x_value, 2);\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n@@ -239,6 +290,18 @@ impl<T: ?Sized> NonNull<T> {\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x as *mut _).expect(\"ptr is null!\");\n+    ///\n+    /// let ref_x = unsafe { ptr.as_ref() };\n+    /// println!(\"{}\", ref_x);\n+    /// ```\n+    ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n@@ -274,6 +337,19 @@ impl<T: ?Sized> NonNull<T> {\n     /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let mut ptr = NonNull::new(&mut x).expect(\"null pointer\");\n+    ///\n+    /// let x_ref = unsafe { ptr.as_mut() };\n+    /// assert_eq!(*x_ref, 0);\n+    /// *x_ref += 2;\n+    /// assert_eq!(*x_ref, 2);\n+    /// ```\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n@@ -285,6 +361,18 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Casts to a pointer of another type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x as *mut _).expect(\"null pointer\");\n+    ///\n+    /// let casted_ptr = ptr.cast::<i8>();\n+    /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();\n+    /// ```\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n     #[inline]"}, {"sha": "676695795badcdde278ed9f47f4a08bacb1e43d4", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -290,7 +290,7 @@ macro_rules! dbg {\n     // `$val` expression could be a block (`{ .. }`), in which case the `eprintln!`\n     // will be malformed.\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!())\n     };\n     ($val:expr $(,)?) => {\n         // Use of `match` here is intentional because it affects the lifetimes"}, {"sha": "d69486226625415fa699c77e769d7b84678c62b9", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -94,7 +94,7 @@ $ rustdoc src/lib.rs --document-private-items\n By default, `rustdoc` only documents items that are publicly reachable.\n \n ```rust\n-pub fn public() {} // this item is public and will documented\n+pub fn public() {} // this item is public and will be documented\n mod private { // this item is private and will not be documented\n     pub fn unreachable() {} // this item is public, but unreachable, so it will not be documented\n }"}, {"sha": "0685358851edda9aae3c0bd6ef27ea867d9aff66", "filename": "src/test/ui/hygiene/auxiliary/intercrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -5,7 +5,7 @@ pub mod foo {\n     mod bar {\n         fn f() -> u32 { 1 }\n         pub macro m() {\n-            f();\n+            f()\n         }\n     }\n }"}, {"sha": "a06d9255ab5b0d598f9a0fbbc71e92fcc8561d69", "filename": "src/test/ui/hygiene/hygienic-label-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -3,5 +3,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    'x: loop { foo!() }\n+    'x: loop { foo!(); }\n }"}, {"sha": "c1ed861836c1cea08f164c58a08b8c057c4be6d0", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |     'x: loop { foo!() }\n-   |                ------ in this macro invocation\n+LL |     'x: loop { foo!(); }\n+   |                ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ab0559e1b6a8379adcbf912800bbe78fcf04ac32", "filename": "src/test/ui/hygiene/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -4,6 +4,6 @@ macro_rules! foo {\n \n pub fn main() {\n     'x: for _ in 0..1 {\n-        foo!()\n+        foo!();\n     };\n }"}, {"sha": "29d1b67e09f9b88c137729b11efce84a4279a2d3", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |         foo!()\n-   |         ------ in this macro invocation\n+LL |         foo!();\n+   |         ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6f9e6ec0a57ff0c17d87b33c10084e202c2bfe39", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/allow-semicolon-in-expressions-from-macros.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef9549b6c0efb7525c9b012148689c8d070f9bc0/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9549b6c0efb7525c9b012148689c8d070f9bc0/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs?ref=ef9549b6c0efb7525c9b012148689c8d070f9bc0", "patch": "@@ -1,15 +0,0 @@\n-// check-pass\n-// Ensure that trailing semicolons are allowed by default\n-\n-macro_rules! foo {\n-    () => {\n-        true;\n-    }\n-}\n-\n-fn main() {\n-    let val = match true {\n-        true => false,\n-        _ => foo!()\n-    };\n-}"}, {"sha": "781391cc574a9d53e6fb10c3fa51be9d0a61d58b", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/auxiliary/foreign-crate.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,4 @@\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => { true; }\n+}"}, {"sha": "374506366f80236ed8a73910f08df4b21157b19e", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/foreign-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:foreign-crate.rs\n+// check-pass\n+\n+extern crate foreign_crate;\n+\n+// Test that we do not lint for a macro in a foreign crate\n+fn main() {\n+    let _ = foreign_crate::my_macro!();\n+}"}, {"sha": "2c63311e659781de89fc1d1358d2bb348cc8cd59", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// Ensure that trailing semicolons cause warnings by default\n+\n+macro_rules! foo {\n+    () => {\n+        true; //~  WARN trailing semicolon in macro\n+              //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    let _val = match true {\n+        true => false,\n+        _ => foo!()\n+    };\n+}"}, {"sha": "d770a8c8f36e6f7c6b3d3c91d599220f925f12dc", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,16 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/warn-semicolon-in-expressions-from-macros.rs:6:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         _ => foo!()\n+   |              ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d09fdf118e6f4e073683aa5d8cd9271e2d327551", "filename": "src/test/ui/macros/macro-context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -6,6 +6,8 @@ macro_rules! m {\n                             //~| ERROR macro expansion ignores token `;`\n                             //~| ERROR cannot find type `i` in this scope\n                             //~| ERROR cannot find value `i` in this scope\n+                            //~| WARN trailing semicolon in macro\n+                            //~| WARN this was previously\n }\n \n fn main() {"}, {"sha": "3b8a6f17491582a7df22c0881e91157b86e1600b", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -64,7 +64,21 @@ LL |     let i = m!();\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-context.rs:3:15\n+   |\n+LL |     () => ( i ; typeof );\n+   |               ^\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0412, E0425.\n For more information about an error, try `rustc --explain E0412`."}, {"sha": "f22caf2793fd5ef07f4ede88e0d819420b6f64d4", "filename": "src/test/ui/macros/macro-in-expression-context.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -3,6 +3,12 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE macro invocations at the end of a block\n+        //~| NOTE to ignore the value produced by the macro\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +18,10 @@ macro_rules! foo {\n fn main() {\n     foo!();\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "1a056e582ff4758b8298afabf202bfd5cc3a4081", "filename": "src/test/ui/macros/macro-in-expression-context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -3,6 +3,12 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE macro invocations at the end of a block\n+        //~| NOTE to ignore the value produced by the macro\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +18,10 @@ macro_rules! foo {\n fn main() {\n     foo!()\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "1840babd61dc2a79a7326fc4072123643ca5e397", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -1,5 +1,5 @@\n error: macro expansion ignores token `assert_eq` and any following\n-  --> $DIR/macro-in-expression-context.rs:6:9\n+  --> $DIR/macro-in-expression-context.rs:12:9\n    |\n LL |         assert_eq!(\"B\", \"B\");\n    |         ^^^^^^^^^\n@@ -11,5 +11,21 @@ LL |     foo!()\n    |\n    = note: the usage of `foo!` is likely invalid in expression context\n \n-error: aborting due to previous error\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-in-expression-context.rs:5:29\n+   |\n+LL |         assert_eq!(\"A\", \"A\");\n+   |                             ^\n+...\n+LL |     foo!()\n+   |     ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "04d34e21cdc74b1bc78999de1f015c50e7bb3988", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -17,7 +17,7 @@ macro_rules! wrap {\n     (first, $e:expr) => { wrap!(second, $e + 1) };\n     (second, $e:expr) => { wrap!(third, $e + 2) };\n     (third, $e:expr) => {\n-        print_bang!($e + 3);\n+        print_bang!($e + 3)\n     };\n }\n "}, {"sha": "f0d8cb944cf841f49f39a7929da84c78afa32005", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,37 @@\n+// test for https://github.com/rust-lang/rust/issues/86940\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+struct Generic<T, U>(T, U);\n+\n+trait MyFromIter {\n+    fn from_iter(_: i32) -> Self;\n+}\n+\n+impl MyFromIter for Generic<i32, i32> {\n+    fn from_iter(x: i32) -> Self {\n+        Self(x, x)\n+    }\n+}\n+\n+impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+    fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    <Generic<_, _> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    <Generic::<i32, i32> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    <Generic::<_, _> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+}"}, {"sha": "1984053705984a7c82e5806ab00cba2efc77e0c5", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,37 @@\n+// test for https://github.com/rust-lang/rust/issues/86940\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+struct Generic<T, U>(T, U);\n+\n+trait MyFromIter {\n+    fn from_iter(_: i32) -> Self;\n+}\n+\n+impl MyFromIter for Generic<i32, i32> {\n+    fn from_iter(x: i32) -> Self {\n+        Self(x, x)\n+    }\n+}\n+\n+impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+    fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    Generic::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    Generic::<i32, i32>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    Generic::<_, _>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+}"}, {"sha": "2c6a63df42f2ce4b5041c8f099269eb0f6917975", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,34 @@\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:28:5\n+   |\n+LL |     Generic::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<_, _> as MyFromIter>::from_iter`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-generic.rs:5:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:31:5\n+   |\n+LL |     Generic::<i32, i32>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:34:5\n+   |\n+LL |     Generic::<_, _>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "3a9fd69322869518567d41a2e18f556ac1cdbc88", "filename": "src/test/ui/rust-2021/prelude2021.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "previous_filename": "src/test/ui/prelude2021.rs"}, {"sha": "223ddf0f0ad2abfc7113ed4891942999c06dad1f", "filename": "src/test/ui/suggestions/for-i-in-vec.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -3,12 +3,15 @@\n \n struct Foo {\n     v: Vec<u32>,\n+    h: std::collections::HashMap<i32, i32>,\n }\n \n impl Foo {\n     fn bar(&self) {\n         for _ in &self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n         }\n+        for _ in &self.h { //~ ERROR cannot move out of `self.h` which is behind a shared reference\n+        }\n     }\n }\n "}, {"sha": "7942698cc8eff3b56dc490a4a689ad3c089cb764", "filename": "src/test/ui/suggestions/for-i-in-vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -3,12 +3,15 @@\n \n struct Foo {\n     v: Vec<u32>,\n+    h: std::collections::HashMap<i32, i32>,\n }\n \n impl Foo {\n     fn bar(&self) {\n         for _ in self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n         }\n+        for _ in self.h { //~ ERROR cannot move out of `self.h` which is behind a shared reference\n+        }\n     }\n }\n "}, {"sha": "011fdf34c28b543cf60d4d4a93fde4e36d6ad089", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -1,12 +1,25 @@\n error[E0507]: cannot move out of `self.v` which is behind a shared reference\n-  --> $DIR/for-i-in-vec.rs:10:18\n+  --> $DIR/for-i-in-vec.rs:11:18\n    |\n LL |         for _ in self.v {\n-   |                  ^^^^^^\n-   |                  |\n-   |                  move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n-   |                  help: consider iterating over a slice of the `Vec<_>`'s content: `&self.v`\n+   |                  ^^^^^^ move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n+   |\n+help: consider iterating over a slice of the `Vec<u32>`'s content\n+   |\n+LL |         for _ in &self.v {\n+   |                  ^\n+\n+error[E0507]: cannot move out of `self.h` which is behind a shared reference\n+  --> $DIR/for-i-in-vec.rs:13:18\n+   |\n+LL |         for _ in self.h {\n+   |                  ^^^^^^ move occurs because `self.h` has type `HashMap<i32, i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider iterating over a slice of the `HashMap<i32, i32>`'s content\n+   |\n+LL |         for _ in &self.h {\n+   |                  ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "94766530091552c0f393824858ad88eb46066cfe", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -2,19 +2,23 @@ error[E0507]: cannot move out of `selection.1` which is behind a shared referenc\n   --> $DIR/option-content-move.rs:11:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^\n-   |                    |\n-   |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n-   |                    help: consider borrowing the `Option`'s content: `selection.1.as_ref()`\n+   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the `Option`'s content\n+   |\n+LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n+   |                               ^^^^^^^^^\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:29:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^\n-   |                    |\n-   |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n-   |                    help: consider borrowing the `Result`'s content: `selection.1.as_ref()`\n+   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the `Result`'s content\n+   |\n+LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n+   |                               ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d5b90a49b05218641a7e1011b50976157ab313f0", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for #74280.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Test = impl Copy;\n+\n+fn test() -> Test {\n+    let y = || -> Test { () };\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n+    7\n+}\n+\n+fn main() {}"}, {"sha": "79c7df788f46c21f0ff25b4dad4ba08d6c27c9cb", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-74280.rs:8:13\n+   |\n+LL |     let y = || -> Test { () };\n+   |             ^^^^^^^^^^^^^^^^^ expected `i32`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/issue-74280.rs:7:1\n+   |\n+LL | fn test() -> Test {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "31c45a2093a0478cbdbf179545aca8e6ad05ad5f", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #77179.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Pointer<T> = impl std::ops::Deref<Target=T>;\n+\n+fn test() -> Pointer<_> {\n+    //~^ ERROR: the type placeholder `_` is not allowed within types\n+    Box::new(1)\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "593aeeacb83aa1cf5016b63106e688f1805bf827", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/issue-77179.rs:7:22\n+   |\n+LL | fn test() -> Pointer<_> {\n+   |              --------^-\n+   |              |       |\n+   |              |       not allowed in type signatures\n+   |              help: replace with the correct return type: `Box<i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "7a8137778b44607cd397c03b04205f43e27aeb84", "filename": "src/tools/clippy/tests/ui/needless_borrow_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -7,7 +7,7 @@\n fn f1(_: &str) {}\n macro_rules! m1 {\n     ($e:expr) => {\n-        f1($e);\n+        f1($e)\n     };\n }\n macro_rules! m3 {"}, {"sha": "cd6db8ddc8864fd2a08de85ed9de26c8c31fd553", "filename": "src/tools/clippy/tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs?ref=1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "patch": "@@ -7,7 +7,7 @@\n fn f1(_: &str) {}\n macro_rules! m2 {\n     ($e:expr) => {\n-        f1(*$e);\n+        f1(*$e)\n     };\n }\n macro_rules! m3 {"}]}