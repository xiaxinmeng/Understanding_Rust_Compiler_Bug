{"sha": "612657d9f0b158f0b78e85e3f0a694ddcbf83268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMjY1N2Q5ZjBiMTU4ZjBiNzhlODVlM2YwYTY5NGRkY2JmODMyNjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-20T22:38:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-20T22:38:07Z"}, "message": "Use lifetime name if available", "tree": {"sha": "f4e1063df5632e17a64ab9d924873a6d4c01e5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e1063df5632e17a64ab9d924873a6d4c01e5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/612657d9f0b158f0b78e85e3f0a694ddcbf83268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/612657d9f0b158f0b78e85e3f0a694ddcbf83268", "html_url": "https://github.com/rust-lang/rust/commit/612657d9f0b158f0b78e85e3f0a694ddcbf83268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/612657d9f0b158f0b78e85e3f0a694ddcbf83268/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf78a5265492fe3240529287d22947582ebd1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf78a5265492fe3240529287d22947582ebd1b6", "html_url": "https://github.com/rust-lang/rust/commit/aaf78a5265492fe3240529287d22947582ebd1b6"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "f9ec5fa13c960a2896d4e7e20ff988219eac7fa8", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=612657d9f0b158f0b78e85e3f0a694ddcbf83268", "patch": "@@ -12,7 +12,7 @@\n \n use infer::error_reporting::nice_region_error::NiceRegionError;\n use infer::lexical_region_resolve::RegionResolutionError;\n-use ty::RegionKind;\n+use ty::{BoundRegion, FreeRegion, RegionKind};\n use util::common::ErrorReported;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n@@ -29,7 +29,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 ) => {\n                     let anon_reg_sup = self.is_suitable_region(sup_r)?;\n                     if sub_r == &RegionKind::ReStatic &&\n-                        self._is_return_type_impl_trait(anon_reg_sup.def_id)\n+                        self.is_return_type_impl_trait(anon_reg_sup.def_id)\n                     {\n                         let sp = var_origin.span();\n                         let return_sp = sub_origin.span();\n@@ -54,6 +54,12 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             );\n                         }\n \n+                        let lifetime_name = match sup_r {\n+                            RegionKind::ReFree(FreeRegion {\n+                                bound_region: BoundRegion::BrNamed(_, ref name), ..\n+                            }) => format!(\"{}\", name),\n+                            _ => \"'_\".to_owned(),\n+                        };\n                         if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(return_sp) {\n                             err.span_suggestion(\n                                 return_sp,\n@@ -62,7 +68,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                                      less than `'static` and match {}\",\n                                     lifetime,\n                                 ),\n-                                format!(\"{} + '_\", snippet),\n+                                format!(\"{} + {}\", snippet, lifetime_name),\n                             );\n                         }\n                         err.emit();"}, {"sha": "1cc2b9d50b99ba1eb57de1f4bd1526558be7c1eb", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=612657d9f0b158f0b78e85e3f0a694ddcbf83268", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    pub(super) fn _is_return_type_impl_trait(\n+    pub(super) fn is_return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n     ) -> bool {"}, {"sha": "2795bb92ed56f46aba0101fa5e9408d3ca97e9b2", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/612657d9f0b158f0b78e85e3f0a694ddcbf83268/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=612657d9f0b158f0b78e85e3f0a694ddcbf83268", "patch": "@@ -37,7 +37,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the method body at 20:5\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + '_ {\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}]}