{"sha": "93eed402adbe9e7a532995500d50716d52eefee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZWVkNDAyYWRiZTllN2E1MzI5OTU1MDBkNTA3MTZkNTJlZWZlZTk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-22T19:45:35Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-25T13:25:33Z"}, "message": "Bump bootstrap compiler", "tree": {"sha": "ef6d0177fa8dac0ed4edff1de6ee9cf6a3e6b016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6d0177fa8dac0ed4edff1de6ee9cf6a3e6b016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93eed402adbe9e7a532995500d50716d52eefee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93eed402adbe9e7a532995500d50716d52eefee9", "html_url": "https://github.com/rust-lang/rust/commit/93eed402adbe9e7a532995500d50716d52eefee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93eed402adbe9e7a532995500d50716d52eefee9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b958790b336738540d027d645718713849638d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b958790b336738540d027d645718713849638d7", "html_url": "https://github.com/rust-lang/rust/commit/0b958790b336738540d027d645718713849638d7"}], "stats": {"total": 351, "additions": 22, "deletions": 329}, "files": [{"sha": "f9d3b454246b11a4a6918c783fc949cf7b8fb5dd", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.44.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.45.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "f422c3f66e147112481bc4babbbccf640f842d5c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -99,7 +99,7 @@\n #![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(libc)]\n-#![cfg_attr(not(bootstrap), feature(negative_impls))]\n+#![feature(negative_impls)]\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "8144fe0128ee86ea4533a2670ef8b10680e6308d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -279,7 +279,6 @@ struct RcBox<T: ?Sized> {\n /// type `T`.\n ///\n /// [get_mut]: #method.get_mut\n-#[cfg_attr(all(bootstrap, not(test)), lang = \"rc\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {"}, {"sha": "adce23c42c0e81a7f0fffea885bb052983c618a5", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -207,7 +207,6 @@ macro_rules! acquire {\n /// counting in general.\n ///\n /// [rc_examples]: ../../std/rc/index.html#examples\n-#[cfg_attr(all(bootstrap, not(test)), lang = \"arc\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Arc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {"}, {"sha": "7784ec687ea9a9378ad2cca7770b62e148fb99d7", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -231,6 +231,5 @@ mod impls {\n \n     /// Shared references can be cloned, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(not(bootstrap))]\n     impl<T: ?Sized> !Clone for &mut T {}\n }"}, {"sha": "6dd0522f7f610bae1e3839045fb779031ee2055a", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -28,14 +28,7 @@ macro_rules! impl_float_to_int {\n                 #[doc(hidden)]\n                 #[inline]\n                 unsafe fn to_int_unchecked(self) -> $Int {\n-                    #[cfg(bootstrap)]\n-                    {\n-                        crate::intrinsics::float_to_int_approx_unchecked(self)\n-                    }\n-                    #[cfg(not(bootstrap))]\n-                    {\n-                        crate::intrinsics::float_to_int_unchecked(self)\n-                    }\n+                    crate::intrinsics::float_to_int_unchecked(self)\n                 }\n             }\n         )+"}, {"sha": "e7f681c2e945073f6a61b9b0c08dcf22998f8d8c", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -2,7 +2,6 @@\n \n //! Asynchronous values.\n \n-#[cfg(not(bootstrap))]\n use crate::{\n     ops::{Generator, GeneratorState},\n     pin::Pin,\n@@ -24,16 +23,13 @@ pub use self::future::Future;\n /// It also simplifies the HIR lowering of `.await`.\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[cfg(not(bootstrap))]\n #[derive(Debug, Copy, Clone)]\n pub struct ResumeTy(NonNull<Context<'static>>);\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[cfg(not(bootstrap))]\n unsafe impl Send for ResumeTy {}\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[cfg(not(bootstrap))]\n unsafe impl Sync for ResumeTy {}\n \n /// Wrap a generator in a future.\n@@ -43,7 +39,6 @@ unsafe impl Sync for ResumeTy {}\n // This is `const` to avoid extra errors after we recover from `const async fn`\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[cfg(not(bootstrap))]\n #[inline]\n pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n where\n@@ -75,7 +70,6 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[cfg(not(bootstrap))]\n #[inline]\n pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     &mut *cx.0.as_ptr().cast()"}, {"sha": "45633dc3ca51f44e7a4708139ad6b46ccd727e88", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -980,22 +980,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n-    #[cfg(bootstrap)]\n-    pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n-    /// The minimum alignment of the type of the value that `val` points to.\n-    ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::min_align_of_val`](../../std/mem/fn.min_align_of_val.html).\n-    #[cfg(bootstrap)]\n-    pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n-\n-    /// The size of the referenced value in bytes.\n-    ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n-    #[cfg(not(bootstrap))]\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n-    #[cfg(not(bootstrap))]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n@@ -1016,22 +1001,14 @@ extern \"rust-intrinsic\" {\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n-    #[cfg(bootstrap)]\n-    pub fn panic_if_uninhabited<T>();\n-\n-    /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n-    /// This will statically either panic, or do nothing.\n-    #[cfg(not(bootstrap))]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n-    #[cfg(not(bootstrap))]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n-    #[cfg(not(bootstrap))]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n@@ -1597,17 +1574,10 @@ extern \"rust-intrinsic\" {\n     /// May assume inputs are finite.\n     pub fn frem_fast<T: Copy>(a: T, b: T) -> T;\n \n-    /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n-    /// (<https://github.com/rust-lang/rust/issues/10184>)\n-    /// This is under stabilization at <https://github.com/rust-lang/rust/issues/67058>\n-    #[cfg(bootstrap)]\n-    pub fn float_to_int_approx_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n-\n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n     /// (<https://github.com/rust-lang/rust/issues/10184>)\n     ///\n     /// Stabilized as `f32::to_int_unchecked` and `f64::to_int_unchecked`.\n-    #[cfg(not(bootstrap))]\n     pub fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n \n     /// Returns the number of bits set in an integer type `T`\n@@ -1877,10 +1847,7 @@ extern \"rust-intrinsic\" {\n     /// takes the data pointer and a pointer to the target-specific exception\n     /// object that was caught. For more information see the compiler's\n     /// source as well as std's catch implementation.\n-    #[cfg(not(bootstrap))]\n     pub fn r#try(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32;\n-    #[cfg(bootstrap)]\n-    pub fn r#try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n \n     /// Emits a `!nontemporal` store according to LLVM (see their docs).\n     /// Probably will never become stable."}, {"sha": "3b7929f00168ad0c5bcf2a16754b1172bd490e39", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -99,7 +99,7 @@\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(llvm_asm)]\n-#![cfg_attr(not(bootstrap), feature(negative_impls))]\n+#![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]"}, {"sha": "f86eee788c0c1eef79ec594c52afb9e4a0d86f49", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -1,27 +1,3 @@\n-#[cfg(bootstrap)]\n-#[doc(include = \"panic.md\")]\n-#[macro_export]\n-#[allow_internal_unstable(core_panic, track_caller)]\n-#[stable(feature = \"core\", since = \"1.6.0\")]\n-macro_rules! panic {\n-    () => (\n-        $crate::panic!(\"explicit panic\")\n-    );\n-    ($msg:expr) => (\n-        $crate::panicking::panic($msg)\n-    );\n-    ($msg:expr,) => (\n-        $crate::panic!($msg)\n-    );\n-    ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt(\n-            $crate::format_args!($fmt, $($arg)+),\n-            $crate::panic::Location::caller(),\n-        )\n-    );\n-}\n-\n-#[cfg(not(bootstrap))]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic, track_caller)]\n@@ -360,7 +336,7 @@ macro_rules! r#try {\n         }\n     };\n     ($expr:expr,) => {\n-        $crate::r#try!($expr)\n+        $crate::try!($expr)\n     };\n }\n \n@@ -1341,25 +1317,6 @@ pub(crate) mod builtin {\n     /// Read the [unstable book] for the usage.\n     ///\n     /// [unstable book]: ../unstable-book/library-features/asm.html\n-    #[cfg(bootstrap)]\n-    #[unstable(\n-        feature = \"llvm_asm\",\n-        issue = \"70173\",\n-        reason = \"inline assembly is not stable enough for use and is subject to change\"\n-    )]\n-    #[macro_export]\n-    #[allow_internal_unstable(asm)]\n-    macro_rules! llvm_asm {\n-        // Redirect to asm! for stage0\n-        ($($arg:tt)*) => { $crate::asm!($($arg)*) }\n-    }\n-\n-    /// Inline assembly.\n-    ///\n-    /// Read the [unstable book] for the usage.\n-    ///\n-    /// [unstable book]: ../unstable-book/library-features/asm.html\n-    #[cfg(not(bootstrap))]\n     #[unstable(\n         feature = \"llvm_asm\",\n         issue = \"70173\",\n@@ -1460,7 +1417,6 @@ pub(crate) mod builtin {\n     }\n \n     /// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n-    #[cfg(not(bootstrap))]\n     #[unstable(\n         feature = \"cfg_accessible\",\n         issue = \"64797\","}, {"sha": "09a8b417e6e221f08e485776a94ac50e8c8985b0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -90,7 +90,7 @@ impl<T: ?Sized> !Send for *mut T {}\n             ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n-#[cfg_attr(not(bootstrap), rustc_specialization_trait)]\n+#[rustc_specialization_trait]\n pub trait Sized {\n     // Empty.\n }"}, {"sha": "f7ea7eba7b16b9ff712c7a4fb70ac4600917162d", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -495,9 +495,6 @@ impl<T> MaybeUninit<T> {\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     pub unsafe fn assume_init(self) -> T {\n-        #[cfg(bootstrap)]\n-        intrinsics::panic_if_uninhabited::<T>();\n-        #[cfg(not(bootstrap))]\n         intrinsics::assert_inhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n@@ -562,9 +559,6 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub unsafe fn read(&self) -> T {\n-        #[cfg(bootstrap)]\n-        intrinsics::panic_if_uninhabited::<T>();\n-        #[cfg(not(bootstrap))]\n         intrinsics::assert_inhabited::<T>();\n         self.as_ptr().read()\n     }\n@@ -627,9 +621,6 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n-        #[cfg(bootstrap)]\n-        intrinsics::panic_if_uninhabited::<T>();\n-        #[cfg(not(bootstrap))]\n         intrinsics::assert_inhabited::<T>();\n         &*self.value\n     }\n@@ -748,9 +739,6 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n-        #[cfg(bootstrap)]\n-        intrinsics::panic_if_uninhabited::<T>();\n-        #[cfg(not(bootstrap))]\n         intrinsics::assert_inhabited::<T>();\n         &mut *self.value\n     }"}, {"sha": "b1bbcaeab8defb09aeffad87f574bc3d807a5737", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -378,7 +378,6 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n /// ```\n #[inline]\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n pub unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     intrinsics::size_of_val(val)\n@@ -509,7 +508,6 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });\n /// ```\n #[inline]\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     intrinsics::min_align_of_val(val)\n@@ -621,10 +619,7 @@ pub const fn needs_drop<T>() -> bool {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n-    #[cfg(not(bootstrap))]\n     intrinsics::assert_zero_valid::<T>();\n-    #[cfg(bootstrap)]\n-    intrinsics::panic_if_uninhabited::<T>();\n     MaybeUninit::zeroed().assume_init()\n }\n \n@@ -657,10 +652,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n-    #[cfg(not(bootstrap))]\n     intrinsics::assert_uninit_valid::<T>();\n-    #[cfg(bootstrap)]\n-    intrinsics::panic_if_uninhabited::<T>();\n     MaybeUninit::uninit().assume_init()\n }\n "}, {"sha": "6e96aa330ff1930f85958f54b4ea3d52d95dd09a", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -81,7 +81,6 @@ impl<T: ?Sized> Deref for &T {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !DerefMut for &T {}\n "}, {"sha": "763b33606fe88b18c044359c74dec2c3bf6172e1", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -65,7 +65,7 @@ pub trait Index<Idx: ?Sized> {\n \n     /// Performs the indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), track_caller)]\n+    #[track_caller]\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n@@ -167,6 +167,6 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), track_caller)]\n+    #[track_caller]\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }"}, {"sha": "94ea9b78828db737d13c551532379d566a3f8e2a", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -49,13 +49,9 @@ pub fn panic(expr: &str) -> ! {\n     // truncation and padding (even though none is used here). Using\n     // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n     // output binary, saving up to a few kilobytes.\n-    #[cfg(not(bootstrap))]\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n-    #[cfg(bootstrap)]\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller());\n }\n \n-#[cfg(not(bootstrap))]\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]\n@@ -69,30 +65,12 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-// For bootstrap, we need a variant with the old argument order, and a corresponding\n-// `panic_fmt`.\n-#[cfg(bootstrap)]\n-#[cold]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n-fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe { super::intrinsics::abort() }\n-    }\n-\n-    panic_fmt(\n-        format_args!(\"index out of bounds: the len is {} but the index is {}\", len, index),\n-        location,\n-    )\n-}\n-\n /// The underlying implementation of libcore's `panic!` macro when formatting is used.\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(bootstrap), track_caller)]\n-pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<'_>) -> ! {\n+#[track_caller]\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         // SAFETY: the `abort` intrinsic has no requirements to be called.\n         unsafe { super::intrinsics::abort() }\n@@ -105,9 +83,6 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n-    #[cfg(bootstrap)]\n-    let pi = PanicInfo::internal_constructor(Some(&fmt), location);\n-    #[cfg(not(bootstrap))]\n     let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n \n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call."}, {"sha": "b4fff3d67b555b0bf109b5f94c5277208eeda578", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -69,7 +69,6 @@ pub use crate::macros::builtin::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_accessible\",\n     issue = \"64797\","}, {"sha": "35a0852bbf54569ea27e0330a811727eb6491987", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -706,7 +706,6 @@ impl<T: ?Sized> *const T {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     /// Returns the length of a raw slice."}, {"sha": "dbd92ce5fcc5b5c9b70f4b214144495662fb9f0f", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -894,7 +894,6 @@ impl<T: ?Sized> *mut T {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[lang = \"mut_slice_ptr\"]\n impl<T> *mut [T] {\n     /// Returns the length of a raw slice."}, {"sha": "7b357bb487a0a17d192a7dd6b04798d122fb238a", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -2831,13 +2831,13 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), track_caller)]\n+    #[track_caller]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), track_caller)]\n+    #[track_caller]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n "}, {"sha": "fd3e11858cef67719f1acb85a8d217d670573e0a", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -106,15 +106,6 @@ pub mod personalities {\n         1 // `ExceptionContinueSearch`\n     }\n \n-    // Similar to above, this corresponds to the `eh_unwind_resume` lang item\n-    // that's only used on Windows currently.\n-    //\n-    // Note that we don't execute landing pads, so this is never called, so it's\n-    // body is empty.\n-    #[rustc_std_internal_symbol]\n-    #[cfg(all(bootstrap, target_os = \"windows\", target_env = \"gnu\"))]\n-    pub extern \"C\" fn rust_eh_unwind_resume() {}\n-\n     // These two are called by our startup objects on i686-pc-windows-gnu, but\n     // they don't need to do anything so the bodies are nops.\n     #[rustc_std_internal_symbol]"}, {"sha": "f5d83c21da0684170d40bd13eb85669dda70fb86", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -311,18 +311,6 @@ unsafe fn find_eh_action(\n     eh::find_eh_action(lsda, &eh_context, foreign_exception)\n }\n \n-#[cfg(all(\n-    bootstrap,\n-    target_os = \"windows\",\n-    any(target_arch = \"x86\", target_arch = \"x86_64\"),\n-    target_env = \"gnu\"\n-))]\n-#[lang = \"eh_unwind_resume\"]\n-#[unwind(allowed)]\n-unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n-    uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n-}\n-\n // Frame unwind info registration\n //\n // Each module's image contains a frame unwind info section (usually"}, {"sha": "8d8276b4159acaedb5c7a609fbd68325c7ebf89c", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -213,7 +213,6 @@ extern \"C\" {\n //\n // This is fine since the MSVC runtime uses string comparison on the type name\n // to match TypeDescriptors rather than pointer equality.\n-#[cfg_attr(bootstrap, lang = \"eh_catch_typeinfo\")]\n static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: core::ptr::null_mut(),"}, {"sha": "71df6e049e58f58c0a6c1b454afcf3d36f2db766", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -24,11 +24,10 @@\n #![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n-#![cfg_attr(not(bootstrap), feature(negative_impls))]\n+#![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(bootstrap, feature(specialization))]\n-#![cfg_attr(not(bootstrap), feature(min_specialization))]\n+#![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]"}, {"sha": "888ac2d047d327e65f02daf8a75d901fa119b3ba", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -9,7 +9,7 @@\n #![feature(const_if_match)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n-#![cfg_attr(not(bootstrap), feature(negative_impls))]\n+#![feature(negative_impls)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]"}, {"sha": "e2092cfefa369bb77438dd2efdea8059f718139d", "filename": "src/libstd/future.rs", "status": "modified", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -1,111 +1,5 @@\n //! Asynchronous values.\n \n-#[cfg(bootstrap)]\n-use core::{\n-    cell::Cell,\n-    marker::Unpin,\n-    ops::{Drop, Generator, GeneratorState},\n-    pin::Pin,\n-    ptr::NonNull,\n-    task::{Context, Poll},\n-};\n-\n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use core::future::*;\n-\n-/// Wrap a generator in a future.\n-///\n-/// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n-/// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n-// This is `const` to avoid extra errors after we recover from `const async fn`\n-#[cfg(bootstrap)]\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-pub const fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n-    GenFuture(x)\n-}\n-\n-/// A wrapper around generators used to implement `Future` for `async`/`await` code.\n-#[cfg(bootstrap)]\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-struct GenFuture<T: Generator<Yield = ()>>(T);\n-\n-// We rely on the fact that async/await futures are immovable in order to create\n-// self-referential borrows in the underlying generator.\n-#[cfg(bootstrap)]\n-impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n-\n-#[cfg(bootstrap)]\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n-    type Output = T::Return;\n-    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-        // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n-        let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-        let _guard = unsafe { set_task_context(cx) };\n-        match gen.resume(()) {\n-            GeneratorState::Yielded(()) => Poll::Pending,\n-            GeneratorState::Complete(x) => Poll::Ready(x),\n-        }\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-thread_local! {\n-    static TLS_CX: Cell<Option<NonNull<Context<'static>>>> = Cell::new(None);\n-}\n-\n-#[cfg(bootstrap)]\n-struct SetOnDrop(Option<NonNull<Context<'static>>>);\n-\n-#[cfg(bootstrap)]\n-impl Drop for SetOnDrop {\n-    fn drop(&mut self) {\n-        TLS_CX.with(|tls_cx| {\n-            tls_cx.set(self.0.take());\n-        });\n-    }\n-}\n-\n-// Safety: the returned guard must drop before `cx` is dropped and before\n-// any previous guard is dropped.\n-#[cfg(bootstrap)]\n-unsafe fn set_task_context(cx: &mut Context<'_>) -> SetOnDrop {\n-    // transmute the context's lifetime to 'static so we can store it.\n-    let cx = core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx);\n-    let old_cx = TLS_CX.with(|tls_cx| tls_cx.replace(Some(NonNull::from(cx))));\n-    SetOnDrop(old_cx)\n-}\n-\n-#[cfg(bootstrap)]\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Polls a future in the current thread-local task waker.\n-pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>\n-where\n-    F: Future,\n-{\n-    let cx_ptr = TLS_CX.with(|tls_cx| {\n-        // Clear the entry so that nested `get_task_waker` calls\n-        // will fail or set their own value.\n-        tls_cx.replace(None)\n-    });\n-    let _reset = SetOnDrop(cx_ptr);\n-\n-    let mut cx_ptr = cx_ptr.expect(\n-        \"TLS Context not set. This is a rustc bug. \\\n-        Please file an issue on https://github.com/rust-lang/rust.\",\n-    );\n-\n-    // Safety: we've ensured exclusive access to the context by\n-    // removing the pointer from TLS, only to be replaced once\n-    // we're done with it.\n-    //\n-    // The pointer that was inserted came from an `&mut Context<'_>`,\n-    // so it is safe to treat as mutable.\n-    unsafe { F::poll(f, cx_ptr.as_mut()) }\n-}"}, {"sha": "5fd15bb8fe4f3f67102b669bfea27a1624f3867c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -242,7 +242,7 @@\n #![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n-#![cfg_attr(not(bootstrap), feature(cfg_accessible))]\n+#![feature(cfg_accessible)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n@@ -281,7 +281,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n-#![cfg_attr(not(bootstrap), feature(negative_impls))]\n+#![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n@@ -298,8 +298,7 @@\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n-#![cfg_attr(bootstrap, feature(specialization))]\n-#![cfg_attr(not(bootstrap), feature(min_specialization))]\n+#![feature(min_specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stdsimd)]"}, {"sha": "343b2ee12735f2c7dc5845b4eb42b04abeb8d003", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -271,44 +271,12 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     let mut data = Data { f: ManuallyDrop::new(f) };\n \n     let data_ptr = &mut data as *mut _ as *mut u8;\n-    return if do_try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n+    return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n         Ok(ManuallyDrop::into_inner(data.r))\n     } else {\n         Err(ManuallyDrop::into_inner(data.p))\n     };\n \n-    // Compatibility wrapper around the try intrinsic for bootstrap.\n-    //\n-    // We also need to mark it #[inline(never)] to work around a bug on MinGW\n-    // targets: the unwinding implementation was relying on UB, but this only\n-    // becomes a problem in practice if inlining is involved.\n-    #[cfg(not(bootstrap))]\n-    use intrinsics::r#try as do_try;\n-    #[cfg(bootstrap)]\n-    #[inline(never)]\n-    unsafe fn do_try(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32 {\n-        use crate::mem::MaybeUninit;\n-        #[cfg(target_env = \"msvc\")]\n-        type TryPayload = [u64; 2];\n-        #[cfg(not(target_env = \"msvc\"))]\n-        type TryPayload = *mut u8;\n-\n-        let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n-        let payload_ptr = payload.as_mut_ptr() as *mut u8;\n-        let r = intrinsics::r#try(try_fn, data, payload_ptr);\n-        if r != 0 {\n-            #[cfg(target_env = \"msvc\")]\n-            {\n-                catch_fn(data, payload_ptr)\n-            }\n-            #[cfg(not(target_env = \"msvc\"))]\n-            {\n-                catch_fn(data, payload.assume_init())\n-            }\n-        }\n-        r\n-    }\n-\n     // We consider unwinding to be rare, so mark this function as cold. However,\n     // do not mark it no-inline -- that decision is best to leave to the\n     // optimizer (in most cases this function is not inlined even as a normal,\n@@ -320,9 +288,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         obj\n     }\n \n-    // See comment on do_try above for why #[inline(never)] is needed on bootstrap.\n-    #[cfg_attr(bootstrap, inline(never))]\n-    #[cfg_attr(not(bootstrap), inline)]\n+    #[inline]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n         unsafe {\n             let data = data as *mut Data<F, R>;"}, {"sha": "0fbd6b62f18ff763d82a155726dc23b3c789148c", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -54,7 +54,6 @@ pub use core::prelude::v1::{\n     PartialEq, PartialOrd, RustcDecodable, RustcEncodable,\n };\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"cfg_accessible\",\n     issue = \"64797\","}, {"sha": "537d9664b08dd4562938734143c441df47546ebd", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-03-12\n+date: 2020-04-22\n rustc: beta\n cargo: beta\n "}, {"sha": "b2d477553361a7bbe73084a62a35183da8d1c608", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eed402adbe9e7a532995500d50716d52eefee9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eed402adbe9e7a532995500d50716d52eefee9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=93eed402adbe9e7a532995500d50716d52eefee9", "patch": "@@ -45,7 +45,7 @@ fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n \n     lazy_static! {\n-        static ref LOCK: Mutex<()> = { Mutex::new(()) };\n+        static ref LOCK: Mutex<()> = Mutex::new(());\n     }\n     // Error mode is a global variable, so lock it so only one thread will change it\n     let _lock = LOCK.lock().unwrap();"}]}