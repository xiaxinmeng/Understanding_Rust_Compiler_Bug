{"sha": "79829d8718626b681d26bfbd64182d5d32d2dc57", "node_id": "C_kwDOAAsO6NoAKDc5ODI5ZDg3MTg2MjZiNjgxZDI2YmZiZDY0MTgyZDVkMzJkMmRjNTc", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-04T10:28:52Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-04T22:17:27Z"}, "message": "lintcheck: use clap's derive interface\n\nThis makes the code shorter and clearer.\n\nThe only incompatible change is that an explicit command-line argument\n`--crates-toml=` will take precedence over the `LINTCHECK_TOML`\nenvironment variable.", "tree": {"sha": "f3efd0a89719a596402c78fc74d07675835a8d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3efd0a89719a596402c78fc74d07675835a8d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79829d8718626b681d26bfbd64182d5d32d2dc57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79829d8718626b681d26bfbd64182d5d32d2dc57", "html_url": "https://github.com/rust-lang/rust/commit/79829d8718626b681d26bfbd64182d5d32d2dc57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79829d8718626b681d26bfbd64182d5d32d2dc57/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446ae429a6e30b416853d6ae0dea228b751671b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/446ae429a6e30b416853d6ae0dea228b751671b0", "html_url": "https://github.com/rust-lang/rust/commit/446ae429a6e30b416853d6ae0dea228b751671b0"}], "stats": {"total": 146, "additions": 44, "deletions": 102}, "files": [{"sha": "dbfeb8dd1d194d5aadfb07423f29deefd7f27796", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79829d8718626b681d26bfbd64182d5d32d2dc57/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/79829d8718626b681d26bfbd64182d5d32d2dc57/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=79829d8718626b681d26bfbd64182d5d32d2dc57", "patch": "@@ -11,7 +11,7 @@ publish = false\n \n [dependencies]\n cargo_metadata = \"0.15.3\"\n-clap = \"4.1.4\"\n+clap = { version = \"4.1.8\", features = [\"derive\", \"env\"] }\n crossbeam-channel = \"0.5.6\"\n flate2 = \"1.0\"\n rayon = \"1.5.1\""}, {"sha": "e1836c19aa257f9f3e06904db701c6cf2d3839a5", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 43, "deletions": 101, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/79829d8718626b681d26bfbd64182d5d32d2dc57/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79829d8718626b681d26bfbd64182d5d32d2dc57/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=79829d8718626b681d26bfbd64182d5d32d2dc57", "patch": "@@ -1,128 +1,70 @@\n-use clap::{Arg, ArgAction, ArgMatches, Command};\n-use std::env;\n+use clap::Parser;\n use std::path::PathBuf;\n \n-fn get_clap_config() -> ArgMatches {\n-    Command::new(\"lintcheck\")\n-        .about(\"run clippy on a set of crates and check output\")\n-        .args([\n-            Arg::new(\"only\")\n-                .action(ArgAction::Set)\n-                .value_name(\"CRATE\")\n-                .long(\"only\")\n-                .help(\"Only process a single crate of the list\"),\n-            Arg::new(\"crates-toml\")\n-                .action(ArgAction::Set)\n-                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n-                .long(\"crates-toml\")\n-                .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n-            Arg::new(\"threads\")\n-                .action(ArgAction::Set)\n-                .value_name(\"N\")\n-                .value_parser(clap::value_parser!(usize))\n-                .short('j')\n-                .long(\"jobs\")\n-                .help(\"Number of threads to use, 0 automatic choice\"),\n-            Arg::new(\"fix\")\n-                .long(\"fix\")\n-                .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n-            Arg::new(\"filter\")\n-                .long(\"filter\")\n-                .action(ArgAction::Append)\n-                .value_name(\"clippy_lint_name\")\n-                .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n-            Arg::new(\"markdown\")\n-                .long(\"markdown\")\n-                .help(\"Change the reports table to use markdown links\"),\n-            Arg::new(\"recursive\")\n-                .long(\"recursive\")\n-                .help(\"Run clippy on the dependencies of crates specified in crates-toml\")\n-                .conflicts_with(\"threads\")\n-                .conflicts_with(\"fix\"),\n-        ])\n-        .get_matches()\n-}\n-\n-#[derive(Debug, Clone)]\n+#[derive(Clone, Debug, Parser)]\n pub(crate) struct LintcheckConfig {\n-    /// max number of jobs to spawn (default 1)\n+    /// Number of threads to use, 0 automatic choice\n+    #[clap(long = \"jobs\", short = 'j', value_name = \"N\", default_value_t = 1)]\n     pub max_jobs: usize,\n-    /// we read the sources to check from here\n+    /// Set the path for a crates.toml where lintcheck should read the sources from\n+    #[clap(\n+        long = \"crates-toml\",\n+        value_name = \"CRATES-SOURCES-TOML-PATH\",\n+        default_value = \"lintcheck/lintcheck_crates.toml\",\n+        hide_default_value = true,\n+        env = \"LINTCHECK_TOML\",\n+        hide_env = true\n+    )]\n     pub sources_toml_path: PathBuf,\n-    /// we save the clippy lint results here\n-    pub lintcheck_results_path: PathBuf,\n-    /// Check only a specified package\n+    /// File to save the clippy lint results here\n+    #[clap(skip = \"\")]\n+    pub lintcheck_results_path: PathBuf, // Overridden in new()\n+    /// Only process a single crate on the list\n+    #[clap(long, value_name = \"CRATE\")]\n     pub only: Option<String>,\n-    /// whether to just run --fix and not collect all the warnings\n+    /// Runs cargo clippy --fix and checks if all suggestions apply\n+    #[clap(long, conflicts_with(\"max_jobs\"))]\n     pub fix: bool,\n-    /// A list of lints that this lintcheck run should focus on\n+    /// Apply a filter to only collect specified lints, this also overrides `allow` attributes\n+    #[clap(long = \"filter\", value_name = \"clippy_lint_name\", use_value_delimiter = true)]\n     pub lint_filter: Vec<String>,\n-    /// Indicate if the output should support markdown syntax\n+    /// Change the reports table to use markdown links\n+    #[clap(long)]\n     pub markdown: bool,\n-    /// Run clippy on the dependencies of crates\n+    /// Run clippy on the dependencies of crates specified in crates-toml\n+    #[clap(long, conflicts_with(\"max_jobs\"))]\n     pub recursive: bool,\n }\n \n impl LintcheckConfig {\n     pub fn new() -> Self {\n-        let clap_config = get_clap_config();\n-\n-        // first, check if we got anything passed via the LINTCHECK_TOML env var,\n-        // if not, ask clap if we got any value for --crates-toml  <foo>\n-        // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n-        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n-            clap_config\n-                .get_one::<String>(\"crates-toml\")\n-                .map_or(\"lintcheck/lintcheck_crates.toml\", |s| &**s)\n-                .into()\n-        });\n-\n-        let markdown = clap_config.contains_id(\"markdown\");\n-        let sources_toml_path = PathBuf::from(sources_toml);\n+        let mut config = LintcheckConfig::parse();\n \n         // for the path where we save the lint results, get the filename without extension (so for\n         // wasd.toml, use \"wasd\"...)\n-        let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n-        let lintcheck_results_path = PathBuf::from(format!(\n+        let filename: PathBuf = config.sources_toml_path.file_stem().unwrap().into();\n+        config.lintcheck_results_path = PathBuf::from(format!(\n             \"lintcheck-logs/{}_logs.{}\",\n             filename.display(),\n-            if markdown { \"md\" } else { \"txt\" }\n+            if config.markdown { \"md\" } else { \"txt\" }\n         ));\n \n         // look at the --threads arg, if 0 is passed, use the threads count\n-        let max_jobs = match clap_config.get_one::<usize>(\"threads\") {\n-            Some(&0) => {\n-                // automatic choice\n-                std::thread::available_parallelism().map(|n| n.get()).unwrap_or(1)\n-            },\n-            Some(&threads) => threads,\n-            // no -j passed, use a single thread\n-            None => 1,\n+        if config.max_jobs == 0 {\n+            // automatic choice\n+            config.max_jobs = std::thread::available_parallelism().map_or(1, |n| n.get());\n         };\n \n-        let lint_filter: Vec<String> = clap_config\n-            .get_many::<String>(\"filter\")\n-            .map(|iter| {\n-                iter.map(|lint_name| {\n-                    let mut filter = lint_name.replace('_', \"-\");\n-                    if !filter.starts_with(\"clippy::\") {\n-                        filter.insert_str(0, \"clippy::\");\n-                    }\n-                    filter\n-                })\n-                .collect()\n-            })\n-            .unwrap_or_default();\n-\n-        LintcheckConfig {\n-            max_jobs,\n-            sources_toml_path,\n-            lintcheck_results_path,\n-            only: clap_config.get_one::<String>(\"only\").map(String::from),\n-            fix: clap_config.contains_id(\"fix\"),\n-            lint_filter,\n-            markdown,\n-            recursive: clap_config.contains_id(\"recursive\"),\n+        for lint_name in &mut config.lint_filter {\n+            *lint_name = format!(\n+                \"clippy::{}\",\n+                lint_name\n+                    .strip_prefix(\"clippy::\")\n+                    .unwrap_or(lint_name)\n+                    .replace('_', \"-\")\n+            );\n         }\n+\n+        config\n     }\n }"}]}