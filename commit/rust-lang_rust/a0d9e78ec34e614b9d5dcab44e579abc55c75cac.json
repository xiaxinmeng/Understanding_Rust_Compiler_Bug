{"sha": "a0d9e78ec34e614b9d5dcab44e579abc55c75cac", "node_id": "C_kwDOAAsO6NoAKGEwZDllNzhlYzM0ZTYxNGI5ZDVkY2FiNDRlNTc5YWJjNTVjNzVjYWM", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T14:31:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T14:31:24Z"}, "message": "align tests to code style", "tree": {"sha": "6abf8cfdc5a16e2f92a5100991196dbc5c1ac97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6abf8cfdc5a16e2f92a5100991196dbc5c1ac97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d9e78ec34e614b9d5dcab44e579abc55c75cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d9e78ec34e614b9d5dcab44e579abc55c75cac", "html_url": "https://github.com/rust-lang/rust/commit/a0d9e78ec34e614b9d5dcab44e579abc55c75cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d9e78ec34e614b9d5dcab44e579abc55c75cac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036c0ff8c7c51cac4481d8f70280405d9a170ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/036c0ff8c7c51cac4481d8f70280405d9a170ddc", "html_url": "https://github.com/rust-lang/rust/commit/036c0ff8c7c51cac4481d8f70280405d9a170ddc"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "36c1858a045eb926242dfd6c1ed3932ba668447d", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a0d9e78ec34e614b9d5dcab44e579abc55c75cac/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d9e78ec34e614b9d5dcab44e579abc55c75cac/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=a0d9e78ec34e614b9d5dcab44e579abc55c75cac", "patch": "@@ -52,19 +52,19 @@ fn match_by_first_token_literally() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (= $ i:ident) => ( fn $ i() {} );\n-    (+ $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (= $i:ident) => ( fn $i() {} );\n+    (+ $i:ident) => ( struct $i; )\n }\n m! { foo }\n m! { = bar }\n m! { + Baz }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (= $ i:ident) => ( fn $ i() {} );\n-    (+ $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (= $i:ident) => ( fn $i() {} );\n+    (+ $i:ident) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -78,19 +78,19 @@ fn match_by_last_token_literally() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    ($ i:ident =) => ( fn $ i() {} );\n-    ($ i:ident +) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    ($i:ident =) => ( fn $i() {} );\n+    ($i:ident +) => ( struct $i; )\n }\n m! { foo }\n m! { bar = }\n m! { Baz + }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    ($ i:ident =) => ( fn $ i() {} );\n-    ($ i:ident +) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    ($i:ident =) => ( fn $i() {} );\n+    ($i:ident +) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -104,19 +104,19 @@ fn match_by_ident() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (spam $ i:ident) => ( fn $ i() {} );\n-    (eggs $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (spam $i:ident) => ( fn $i() {} );\n+    (eggs $i:ident) => ( struct $i; )\n }\n m! { foo }\n m! { spam bar }\n m! { eggs Baz }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (spam $ i:ident) => ( fn $ i() {} );\n-    (eggs $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (spam $i:ident) => ( fn $i() {} );\n+    (eggs $i:ident) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -130,9 +130,9 @@ fn match_by_separator_token() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n-    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n-    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+    ($($i:ident),*) => ($(mod $i {} )*);\n+    ($($i:ident)#*) => ($(fn $i() {} )*);\n+    ($i:ident ,# $ j:ident) => ( struct $i; struct $ j; )\n }\n \n m! { foo, bar }\n@@ -143,9 +143,9 @@ m! { Foo,# Bar }\n \"#,\n         expect![[r##\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n-    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n-    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+    ($($i:ident),*) => ($(mod $i {} )*);\n+    ($($i:ident)#*) => ($(fn $i() {} )*);\n+    ($i:ident ,# $ j:ident) => ( struct $i; struct $ j; )\n }\n \n mod foo {}\n@@ -165,13 +165,13 @@ fn test_match_group_pattern_with_multiple_defs() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( impl Bar { $ ( fn $ i {} )*} );\n+    ($($i:ident),*) => ( impl Bar { $(fn $i {})* } );\n }\n m! { foo, bar }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( impl Bar { $ ( fn $ i {} )*} );\n+    ($($i:ident),*) => ( impl Bar { $(fn $i {})* } );\n }\n impl Bar {\n fn foo {}\n@@ -186,13 +186,13 @@ fn test_match_group_pattern_with_multiple_statement() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( fn baz { $ ( $ i (); )*} );\n+    ($($i:ident),*) => ( fn baz { $($i ();)* } );\n }\n m! { foo, bar }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( fn baz { $ ( $ i (); )*} );\n+    ($($i:ident),*) => ( fn baz { $($i ();)* } );\n }\n fn baz {\n foo();\n@@ -207,13 +207,13 @@ fn test_match_group_pattern_with_multiple_statement_without_semi() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( fn baz { $ ( $i() );*} );\n+    ($($i:ident),*) => ( fn baz { $($i() );* } );\n }\n m! { foo, bar }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ( fn baz { $ ( $i() );*} );\n+    ($($i:ident),*) => ( fn baz { $($i() );* } );\n }\n fn baz {\n foo();"}]}