{"sha": "49082ae9f296f1f7d5dddd0ced550c94688fa13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDgyYWU5ZjI5NmYxZjdkNWRkZGQwY2VkNTUwYzk0Njg4ZmExM2Y=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-04-12T12:45:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-12T12:45:40Z"}, "message": "Rollup merge of #41063 - nikomatsakis:issue-40746-always-exec-loops, r=eddyb\n\nremove unnecessary tasks\n\nRemove various unnecessary tasks. All of these are \"always execute\" tasks that don't do any writes to tracked state (or else an assert would trigger, anyhow). In some cases, they issue lints or errors, but we''ll deal with that -- and anyway side-effects outside of a task don't cause problems for anything that I can see.\n\nThe one non-trivial refactoring here is the borrowck conversion, which adds the requirement to go from a `DefId` to a `BodyId`. I tried to make a useful helper here.\n\nr? @eddyb\n\ncc #40746\ncc @cramertj @michaelwoerister", "tree": {"sha": "0ad2e350a74dc68fe5fb430c00a11ce7009561d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad2e350a74dc68fe5fb430c00a11ce7009561d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49082ae9f296f1f7d5dddd0ced550c94688fa13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49082ae9f296f1f7d5dddd0ced550c94688fa13f", "html_url": "https://github.com/rust-lang/rust/commit/49082ae9f296f1f7d5dddd0ced550c94688fa13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49082ae9f296f1f7d5dddd0ced550c94688fa13f/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dca19ae3fd195fa517e326a39bfee729da7cadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dca19ae3fd195fa517e326a39bfee729da7cadb", "html_url": "https://github.com/rust-lang/rust/commit/1dca19ae3fd195fa517e326a39bfee729da7cadb"}, {"sha": "2e327a668e0f37fa9663ede580d354e28fc016bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e327a668e0f37fa9663ede580d354e28fc016bf", "html_url": "https://github.com/rust-lang/rust/commit/2e327a668e0f37fa9663ede580d354e28fc016bf"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "59d04ea8c771cc7ec1867e887b53e0fd6e2d38a7", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -57,17 +57,13 @@ pub enum DepNode<D: Clone + Debug> {\n \n     // Represents different phases in the compiler.\n     CollectLanguageItems,\n-    CheckStaticRecursion,\n     ResolveLifetimes,\n     RegionResolveCrate,\n-    CheckLoops,\n     PluginRegistrar,\n     StabilityIndex,\n     CollectItem(D),\n     CollectItemSig(D),\n     Coherence,\n-    EffectCheck,\n-    Liveness,\n     Resolve,\n     EntryPoint,\n     CheckEntryFn,\n@@ -216,15 +212,11 @@ impl<D: Clone + Debug> DepNode<D> {\n             MirKrate => Some(MirKrate),\n             TypeckBodiesKrate => Some(TypeckBodiesKrate),\n             CollectLanguageItems => Some(CollectLanguageItems),\n-            CheckStaticRecursion => Some(CheckStaticRecursion),\n             ResolveLifetimes => Some(ResolveLifetimes),\n             RegionResolveCrate => Some(RegionResolveCrate),\n-            CheckLoops => Some(CheckLoops),\n             PluginRegistrar => Some(PluginRegistrar),\n             StabilityIndex => Some(StabilityIndex),\n             Coherence => Some(Coherence),\n-            EffectCheck => Some(EffectCheck),\n-            Liveness => Some(Liveness),\n             Resolve => Some(Resolve),\n             EntryPoint => Some(EntryPoint),\n             CheckEntryFn => Some(CheckEntryFn),"}, {"sha": "cfafec00ae20def83507206f4855bc71b0a4cc53", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -442,6 +442,27 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n+    /// Given a body owner's id, returns the `BodyId` associated with it.\n+    pub fn body_owned_by(&self, id: NodeId) -> BodyId {\n+        if let Some(entry) = self.find_entry(id) {\n+            if let Some(body_id) = entry.associated_body() {\n+                // For item-like things and closures, the associated\n+                // body has its own distinct id, and that is returned\n+                // by `associated_body`.\n+                body_id\n+            } else {\n+                // For some expressions, the expression is its own body.\n+                if let EntryExpr(_, expr) = entry {\n+                    BodyId { node_id: expr.id }\n+                } else {\n+                    span_bug!(self.span(id), \"id `{}` has no associated body\", id);\n+                }\n+            }\n+        } else {\n+            bug!(\"no entry for id `{}`\", id)\n+        }\n+    }\n+\n     pub fn ty_param_owner(&self, id: NodeId) -> NodeId {\n         match self.get(id) {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => id,"}, {"sha": "d2b8ed8c2970770250d35fe78699d06d548d4316", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -12,7 +12,6 @@\n //! `unsafe`.\n use self::RootUnsafeContext::*;\n \n-use dep_graph::DepNode;\n use ty::{self, Ty, TyCtxt};\n use ty::MethodCall;\n use lint;\n@@ -241,8 +240,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::EffectCheck);\n-\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n         tables: &ty::TypeckTables::empty(),"}, {"sha": "b7da8480c1cefdf6cf740699ff6e6249b442edd8", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -109,7 +109,6 @@ use self::LoopKind::*;\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use dep_graph::DepNode;\n use hir::def::*;\n use ty::{self, TyCtxt, ParameterEnvironment};\n use traits::{self, Reveal};\n@@ -196,7 +195,6 @@ impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::Liveness);\n     tcx.hir.krate().visit_all_item_likes(&mut IrMaps::new(tcx).as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "868ccad8a3a90618078a7528c2c9488076ce8aaf", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -429,6 +429,8 @@ define_maps! { <'tcx>\n \n     pub coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n+    pub borrowck: BorrowCheck(DefId) -> (),\n+\n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence.\n     /// (Defined only for LOCAL_CRATE)"}, {"sha": "142286bd834d04d0560d17e53d4fedacf4690b0f", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -22,7 +22,6 @@ pub use self::mir::elaborate_drops::ElaborateDrops;\n \n use self::InteriorKind::*;\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::cfg;\n@@ -37,12 +36,13 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::maps::Providers;\n \n use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n@@ -62,16 +62,16 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.dep_graph.with_task(DepNode::BorrowCheckKrate, tcx, (), check_crate_task);\n-\n-    fn check_crate_task<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, (): ()) {\n-        tcx.visit_all_bodies_in_krate(|body_owner_def_id, body_id| {\n-            tcx.dep_graph.with_task(DepNode::BorrowCheck(body_owner_def_id),\n-                                    tcx,\n-                                    body_id,\n-                                    borrowck_fn);\n-        });\n-    }\n+    tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n+        ty::queries::borrowck::get(tcx, DUMMY_SP, body_owner_def_id);\n+    });\n+}\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        borrowck,\n+        ..*providers\n+    };\n }\n \n /// Collection of conclusions determined via borrow checker analyses.\n@@ -81,11 +81,11 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n     pub move_data: move_data::FlowedMoveData<'a, 'tcx>,\n }\n \n-fn borrowck_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_id: hir::BodyId) {\n-    debug!(\"borrowck_fn(body_id={:?})\", body_id);\n+fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n+    debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n \n-    let owner_id = tcx.hir.body_owner(body_id);\n-    let owner_def_id = tcx.hir.local_def_id(owner_id);\n+    let owner_id = tcx.hir.as_local_node_id(owner_def_id).unwrap();\n+    let body_id = tcx.hir.body_owned_by(owner_id);\n     let attributes = tcx.get_attrs(owner_def_id);\n     let tables = tcx.item_tables(owner_def_id);\n "}, {"sha": "a1d3357faf56684931ee9e2899c59e93bb665555", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -51,4 +51,6 @@ mod borrowck;\n \n pub mod graphviz;\n \n+pub use borrowck::provide;\n+\n __build_diagnostic_array! { librustc_borrowck, DIAGNOSTICS }"}, {"sha": "7556aa707526717524fe2063d0b8370beee80705", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -891,6 +891,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let mut local_providers = ty::maps::Providers::default();\n     mir::provide(&mut local_providers);\n     rustc_privacy::provide(&mut local_providers);\n+    borrowck::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);"}, {"sha": "2ea235af103788b0f9de6e09b5f3a36b139ffbdd", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -11,7 +11,6 @@ use self::Context::*;\n \n use rustc::session::Session;\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n@@ -50,7 +49,6 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n }\n \n pub fn check_crate(sess: &Session, map: &Map) {\n-    let _task = map.dep_graph.in_task(DepNode::CheckLoops);\n     let krate = map.krate();\n     krate.visit_all_item_likes(&mut CheckLoopVisitor {\n         sess: sess,"}, {"sha": "d0bf49b7b337d17fff8910c0f17a82602fdc2962", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49082ae9f296f1f7d5dddd0ced550c94688fa13f/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=49082ae9f296f1f7d5dddd0ced550c94688fa13f", "patch": "@@ -11,7 +11,6 @@\n // This compiler pass detects constants that refer to themselves\n // recursively.\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use rustc::session::{CompileResult, Session};\n use rustc::hir::def::{Def, CtorKind};\n@@ -88,8 +87,6 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n }\n \n pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>) -> CompileResult {\n-    let _task = hir_map.dep_graph.in_task(DepNode::CheckStaticRecursion);\n-\n     let mut visitor = CheckCrateVisitor {\n         sess: sess,\n         hir_map: hir_map,"}]}