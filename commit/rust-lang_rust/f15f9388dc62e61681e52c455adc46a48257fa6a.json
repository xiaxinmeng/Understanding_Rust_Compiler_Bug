{"sha": "f15f9388dc62e61681e52c455adc46a48257fa6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWY5Mzg4ZGM2MmU2MTY4MWU1MmM0NTVhZGM0NmE0ODI1N2ZhNmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-18T23:50:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` the type context's `methods` table", "tree": {"sha": "8ebff82f2a49fe103974b2a575bcd553bb0c7cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ebff82f2a49fe103974b2a575bcd553bb0c7cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15f9388dc62e61681e52c455adc46a48257fa6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15f9388dc62e61681e52c455adc46a48257fa6a", "html_url": "https://github.com/rust-lang/rust/commit/f15f9388dc62e61681e52c455adc46a48257fa6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15f9388dc62e61681e52c455adc46a48257fa6a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386300d4b0400aa0e9c8dfcca22a814599fa951e", "url": "https://api.github.com/repos/rust-lang/rust/commits/386300d4b0400aa0e9c8dfcca22a814599fa951e", "html_url": "https://github.com/rust-lang/rust/commit/386300d4b0400aa0e9c8dfcca22a814599fa951e"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "fa8c6422cb8502cf1f6047bfa74e6d3743b24725", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=f15f9388dc62e61681e52c455adc46a48257fa6a", "patch": "@@ -1141,7 +1141,14 @@ fn check_missing_doc_method(cx: &Context, m: &ast::method) {\n         crate: ast::LOCAL_CRATE,\n         node: m.id\n     };\n-    match cx.tcx.methods.find(&did) {\n+\n+    let method_opt;\n+    {\n+        let methods = cx.tcx.methods.borrow();\n+        method_opt = methods.get().find(&did).map(|method| *method);\n+    }\n+\n+    match method_opt {\n         None => cx.tcx.sess.span_bug(m.span, \"missing method descriptor?!\"),\n         Some(md) => {\n             match md.container {"}, {"sha": "bc81d89e2aa8a4fb1fd77271871d418a1115e968", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=f15f9388dc62e61681e52c455adc46a48257fa6a", "patch": "@@ -340,7 +340,9 @@ impl<'a> PrivacyVisitor<'a> {\n                 return Allowable;\n             }\n             debug!(\"privacy - is {:?} a public method\", did);\n-            return match self.tcx.methods.find(&did) {\n+\n+            let methods = self.tcx.methods.borrow();\n+            return match methods.get().find(&did) {\n                 Some(meth) => {\n                     debug!(\"privacy - well at least it's a method: {:?}\", meth);\n                     match meth.container {"}, {"sha": "be600d8d5c6f87e511fd06a2a78bfb1b483592cc", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f15f9388dc62e61681e52c455adc46a48257fa6a", "patch": "@@ -287,7 +287,7 @@ struct ctxt_ {\n     node_type_substs: RefCell<HashMap<NodeId, ~[t]>>,\n \n     // Maps from a method to the method \"descriptor\"\n-    methods: @mut HashMap<DefId, @Method>,\n+    methods: RefCell<HashMap<DefId, @Method>>,\n \n     // Maps from a trait def-id to a list of the def-ids of its methods\n     trait_method_def_ids: @mut HashMap<DefId, @~[DefId]>,\n@@ -998,7 +998,7 @@ pub fn mk_ctxt(s: session::Session,\n         tc_cache: @mut HashMap::new(),\n         ast_ty_to_ty_cache: @mut HashMap::new(),\n         enum_var_cache: @mut HashMap::new(),\n-        methods: @mut HashMap::new(),\n+        methods: RefCell::new(HashMap::new()),\n         trait_method_def_ids: @mut HashMap::new(),\n         trait_methods_cache: @mut HashMap::new(),\n         impl_trait_cache: @mut HashMap::new(),\n@@ -3603,9 +3603,10 @@ pub fn trait_methods(cx: ctxt, trait_did: ast::DefId) -> @~[@Method] {\n }\n \n pub fn method(cx: ctxt, id: ast::DefId) -> @Method {\n-    lookup_locally_or_in_crate_store(\n-        \"methods\", id, cx.methods,\n-        || @csearch::get_method(cx, id))\n+    let mut methods = cx.methods.borrow_mut();\n+    lookup_locally_or_in_crate_store(\"methods\", id, methods.get(), || {\n+        @csearch::get_method(cx, id)\n+    })\n }\n \n pub fn trait_method_def_ids(cx: ctxt, id: ast::DefId) -> @~[DefId] {\n@@ -4577,7 +4578,12 @@ pub fn trait_of_method(tcx: ctxt, def_id: ast::DefId)\n     if def_id.crate != LOCAL_CRATE {\n         return csearch::get_trait_of_method(tcx.cstore, def_id, tcx);\n     }\n-    match tcx.methods.find(&def_id) {\n+    let method;\n+    {\n+        let methods = tcx.methods.borrow();\n+        method = methods.get().find(&def_id).map(|method| *method);\n+    }\n+    match method {\n         Some(method) => {\n             match method.container {\n                 TraitContainer(def_id) => Some(def_id),\n@@ -4596,10 +4602,15 @@ pub fn trait_of_method(tcx: ctxt, def_id: ast::DefId)\n /// Otherwise, return `None`.\n pub fn trait_method_of_method(tcx: ctxt,\n                               def_id: ast::DefId) -> Option<ast::DefId> {\n-    let name = match tcx.methods.find(&def_id) {\n-        Some(method) => method.ident.name,\n-        None => return None\n-    };\n+    let method;\n+    {\n+        let methods = tcx.methods.borrow();\n+        match methods.get().find(&def_id) {\n+            Some(m) => method = *m,\n+            None => return None,\n+        }\n+    }\n+    let name = method.ident.name;\n     match trait_of_method(tcx, def_id) {\n         Some(trait_did) => {\n             let trait_methods = ty::trait_methods(tcx, trait_did);"}, {"sha": "f180a1c4d902b6079d2525b51c415b396f8047f5", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f15f9388dc62e61681e52c455adc46a48257fa6a", "patch": "@@ -366,7 +366,9 @@ impl CoherenceChecker {\n             debug!(\"new_polytype={}\", new_polytype.repr(tcx));\n \n             tcx.tcache.insert(new_did, new_polytype);\n-            tcx.methods.insert(new_did, new_method_ty);\n+\n+            let mut methods = tcx.methods.borrow_mut();\n+            methods.get().insert(new_did, new_method_ty);\n \n             // Pair the new synthesized ID up with the\n             // ID of the method."}, {"sha": "36efd1a067e7a4648fe88083662646d8964da1e6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15f9388dc62e61681e52c455adc46a48257fa6a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f15f9388dc62e61681e52c455adc46a48257fa6a", "patch": "@@ -213,7 +213,8 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                                           &trait_ty_generics);\n                 }\n \n-                tcx.methods.insert(ty_method.def_id, ty_method);\n+                let mut methods = tcx.methods.borrow_mut();\n+                methods.get().insert(ty_method.def_id, ty_method);\n             }\n \n             // Add an entry mapping\n@@ -476,7 +477,9 @@ fn convert_methods(ccx: &CrateCtxt,\n                 ty: fty\n             });\n         write_ty_to_tcx(tcx, m.id, fty);\n-        tcx.methods.insert(mty.def_id, mty);\n+\n+        let mut methods = tcx.methods.borrow_mut();\n+        methods.get().insert(mty.def_id, mty);\n     }\n \n     fn ty_of_method(ccx: &CrateCtxt,"}]}