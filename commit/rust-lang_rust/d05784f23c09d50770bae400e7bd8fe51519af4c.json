{"sha": "d05784f23c09d50770bae400e7bd8fe51519af4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTc4NGYyM2MwOWQ1MDc3MGJhZTQwMGU3YmQ4ZmU1MTUxOWFmNGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T09:11:57Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T09:11:57Z"}, "message": "Address comments", "tree": {"sha": "6e155a3d96271d00e67bb61cefc3de55464e13be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e155a3d96271d00e67bb61cefc3de55464e13be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05784f23c09d50770bae400e7bd8fe51519af4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05784f23c09d50770bae400e7bd8fe51519af4c", "html_url": "https://github.com/rust-lang/rust/commit/d05784f23c09d50770bae400e7bd8fe51519af4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05784f23c09d50770bae400e7bd8fe51519af4c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de85808eccd62b505115c28483c441716b8057b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de85808eccd62b505115c28483c441716b8057b", "html_url": "https://github.com/rust-lang/rust/commit/8de85808eccd62b505115c28483c441716b8057b"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "8f223851b357f1beb831088c3c1f8310caeb8de7", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d05784f23c09d50770bae400e7bd8fe51519af4c/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05784f23c09d50770bae400e7bd8fe51519af4c/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=d05784f23c09d50770bae400e7bd8fe51519af4c", "patch": "@@ -38,7 +38,7 @@ mod tls;\n use fn_call::EvalContextExt as MissingFnsEvalContextExt;\n use operator::EvalContextExt as OperatorEvalContextExt;\n use intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n-use tls::MemoryExt as TlsMemoryExt;\n+use tls::EvalContextExt as TlsEvalContextExt;\n \n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -111,7 +111,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         }\n \n         while ecx.step()? {}\n-        ecx.finish()?;\n+        ecx.run_tls_dtors()?;\n         if let Some(cleanup_ptr) = cleanup_ptr {\n             ecx.memory_mut().deallocate(cleanup_ptr, None, Kind::Stack)?;\n         }\n@@ -157,43 +157,6 @@ struct MemoryData<'tcx> {\n     thread_local: BTreeMap<TlsKey, TlsEntry<'tcx>>,\n }\n \n-trait EvalContextExt<'tcx> {\n-    fn finish(&mut self) -> EvalResult<'tcx>;\n-}\n-\n-impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, Evaluator> {\n-    fn finish(&mut self) -> EvalResult<'tcx> {\n-        let mut dtor = self.memory.fetch_tls_dtor(None)?;\n-        // FIXME: replace loop by some structure that works with stepping\n-        while let Some((instance, ptr, key)) = dtor {\n-            trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n-            // TODO: Potentially, this has to support all the other possible instances?\n-            // See eval_fn_call in interpret/terminator/mod.rs\n-            let mir = self.load_mir(instance.def)?;\n-            self.push_stack_frame(\n-                instance,\n-                mir.span,\n-                mir,\n-                Lvalue::undef(),\n-                StackPopCleanup::None,\n-            )?;\n-            let arg_local = self.frame().mir.args_iter().next().ok_or(EvalError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()))?;\n-            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-            let ty = self.tcx.mk_mut_ptr(self.tcx.types.u8);\n-            self.write_ptr(dest, ptr, ty)?;\n-\n-            // step until out of stackframes\n-            while self.step()? {}\n-\n-            dtor = match self.memory.fetch_tls_dtor(Some(key))? {\n-                dtor @ Some(_) => dtor,\n-                None => self.memory.fetch_tls_dtor(None)?,\n-            };\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl<'tcx> Machine<'tcx> for Evaluator {\n     type Data = EvaluatorData;\n     type MemoryData = MemoryData<'tcx>;\n@@ -223,7 +186,7 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n         ecx.call_intrinsic(instance, args, dest, dest_ty, dest_layout, target)\n     }\n \n-    fn ptr_op<'a>(\n+    fn try_ptr_op<'a>(\n         ecx: &rustc_miri::interpret::EvalContext<'a, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: PrimVal,"}, {"sha": "87620cd52b29f67938063da76a08a4d140ff437b", "filename": "miri/tls.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d05784f23c09d50770bae400e7bd8fe51519af4c/miri%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05784f23c09d50770bae400e7bd8fe51519af4c/miri%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ftls.rs?ref=d05784f23c09d50770bae400e7bd8fe51519af4c", "patch": "@@ -1,11 +1,13 @@\n-use rustc::ty;\n+use rustc::{ty, mir};\n \n use super::{\n     TlsKey, TlsEntry,\n     EvalResult, EvalError,\n     Pointer,\n     Memory,\n     Evaluator,\n+    Lvalue,\n+    StackPopCleanup, EvalContext,\n };\n \n pub trait MemoryExt<'tcx> {\n@@ -16,6 +18,10 @@ pub trait MemoryExt<'tcx> {\n     fn fetch_tls_dtor(&mut self, key: Option<TlsKey>) -> EvalResult<'tcx, Option<(ty::Instance<'tcx>, Pointer, TlsKey)>>;\n }\n \n+pub trait EvalContextExt<'tcx> {\n+    fn run_tls_dtors(&mut self) -> EvalResult<'tcx>;\n+}\n+\n impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator> {\n     fn create_tls_key(&mut self, dtor: Option<ty::Instance<'tcx>>) -> TlsKey {\n         let new_key = self.data.next_thread_local;\n@@ -92,3 +98,36 @@ impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator> {\n         return Ok(None);\n     }\n }\n+\n+impl<'a, 'tcx: 'a> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, Evaluator> {\n+    fn run_tls_dtors(&mut self) -> EvalResult<'tcx> {\n+        let mut dtor = self.memory.fetch_tls_dtor(None)?;\n+        // FIXME: replace loop by some structure that works with stepping\n+        while let Some((instance, ptr, key)) = dtor {\n+            trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n+            // TODO: Potentially, this has to support all the other possible instances?\n+            // See eval_fn_call in interpret/terminator/mod.rs\n+            let mir = self.load_mir(instance.def)?;\n+            self.push_stack_frame(\n+                instance,\n+                mir.span,\n+                mir,\n+                Lvalue::undef(),\n+                StackPopCleanup::None,\n+            )?;\n+            let arg_local = self.frame().mir.args_iter().next().ok_or(EvalError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()))?;\n+            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+            let ty = self.tcx.mk_mut_ptr(self.tcx.types.u8);\n+            self.write_ptr(dest, ptr, ty)?;\n+\n+            // step until out of stackframes\n+            while self.step()? {}\n+\n+            dtor = match self.memory.fetch_tls_dtor(Some(key))? {\n+                dtor @ Some(_) => dtor,\n+                None => self.memory.fetch_tls_dtor(None)?,\n+            };\n+        }\n+        Ok(())\n+    }\n+}"}, {"sha": "5a334b4db1db73e649515b754093c90ab0ea8617", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=d05784f23c09d50770bae400e7bd8fe51519af4c", "patch": "@@ -176,7 +176,7 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n         Err(ConstEvalError::NeedsRfc(\"calling intrinsics\".to_string()).into())\n     }\n \n-    fn ptr_op<'a>(\n+    fn try_ptr_op<'a>(\n         _ecx: &EvalContext<'a, 'tcx, Self>,\n         _bin_op: mir::BinOp,\n         left: PrimVal,"}, {"sha": "0150a6c836d683058c19e1272d705a7e38bbaa15", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=d05784f23c09d50770bae400e7bd8fe51519af4c", "patch": "@@ -50,13 +50,13 @@ pub trait Machine<'tcx>: Sized {\n         target: mir::BasicBlock,\n     ) -> EvalResult<'tcx>;\n \n-    /// Called when operating on the value of pointers.\n+    /// Called for all binary operations except on float types.\n     ///\n     /// Returns `None` if the operation should be handled by the integer\n-    /// op code\n+    /// op code in order to share more code between machines\n     ///\n-    /// Returns a (value, overflowed) pair otherwise\n-    fn ptr_op<'a>(\n+    /// Returns a (value, overflowed) pair if the operation succeeded\n+    fn try_ptr_op<'a>(\n         ecx: &EvalContext<'a, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: PrimVal,"}, {"sha": "c4c0055d2012016b49de5a9c6cba143fdf7be02c", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05784f23c09d50770bae400e7bd8fe51519af4c/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=d05784f23c09d50770bae400e7bd8fe51519af4c", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n         // I: Handle operations that support pointers\n         if !left_kind.is_float() && !right_kind.is_float() {\n-            if let Some(handled) = M::ptr_op(self, bin_op, left, left_ty, right, right_ty)? {\n+            if let Some(handled) = M::try_ptr_op(self, bin_op, left, left_ty, right, right_ty)? {\n                 return Ok(handled);\n             }\n         }"}]}