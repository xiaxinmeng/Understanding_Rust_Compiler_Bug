{"sha": "46cdde75f83a18a97c32dadebfdec0a54c3be7c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2RkZTc1ZjgzYTE4YTk3YzMyZGFkZWJmZGVjMGE1NGMzYmU3YzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T11:19:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T11:19:10Z"}, "message": "internal: document tribal knowledge of how to assist", "tree": {"sha": "8c629a0147d15d8c68bd4797fc8ea1cce183ef26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c629a0147d15d8c68bd4797fc8ea1cce183ef26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46cdde75f83a18a97c32dadebfdec0a54c3be7c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46cdde75f83a18a97c32dadebfdec0a54c3be7c1", "html_url": "https://github.com/rust-lang/rust/commit/46cdde75f83a18a97c32dadebfdec0a54c3be7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46cdde75f83a18a97c32dadebfdec0a54c3be7c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076c972e3b166703ca74e875fefc7130268a194d", "url": "https://api.github.com/repos/rust-lang/rust/commits/076c972e3b166703ca74e875fefc7130268a194d", "html_url": "https://github.com/rust-lang/rust/commit/076c972e3b166703ca74e875fefc7130268a194d"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "b4fb5c190f7bdd120a399d59c61e3a1bdacbbe25", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/46cdde75f83a18a97c32dadebfdec0a54c3be7c1/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cdde75f83a18a97c32dadebfdec0a54c3be7c1/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=46cdde75f83a18a97c32dadebfdec0a54c3be7c1", "patch": "@@ -1,10 +1,63 @@\n-//! `assists` crate provides a bunch of code assists, also known as code\n-//! actions (in LSP) or intentions (in IntelliJ).\n+//! `assists` crate provides a bunch of code assists, also known as code actions\n+//! (in LSP) or intentions (in IntelliJ).\n //!\n //! An assist is a micro-refactoring, which is automatically activated in\n //! certain context. For example, if the cursor is over `,`, a \"swap `,`\" assist\n //! becomes available.\n-\n+//!\n+//! ## Assists Guidelines\n+//!\n+//! Assists are the main mechanism to deliver advanced IDE features to the user,\n+//! so we should pay extra attention to the UX.\n+//!\n+//! The power of assists comes from their context-awareness. The main problem\n+//! with IDE features is that there are a lot of them, and it's hard to teach\n+//! the user what's available. Assists solve this problem nicely: \ud83d\udca1 signifies\n+//! that *something* is possible, and clicking on it reveals a *short* list of\n+//! actions. Contrast it with Emacs `M-x`, which just spits an infinite list of\n+//! all the features.\n+//!\n+//! Here are some considerations when creating a new assist:\n+//!\n+//! * It's good to preserve semantics, and it's good to keep the code compiling,\n+//!   but it isn't necessary. Example: \"flip binary operation\" might change\n+//!   semantics.\n+//! * Assist shouldn't necessary make the code \"better\". A lot of assist come in\n+//!   pairs: \"if let <-> match\".\n+//! * Assists should have as narrow scope as possible. Each new assists greatly\n+//!   improves UX for cases where the user actually invokes it, but it makes UX\n+//!   worse for every case where the user clicks \ud83d\udca1 to invoke some *other*\n+//!   assist. So, a rarely useful assist which is always applicable can be a net\n+//!   negative.\n+//! * Rarely useful actions are tricky. Sometimes there are features which are\n+//!   clearly useful to some users, but are just noise most of the time. We\n+//!   don't have a good solution here, our current approach is to make this\n+//!   functionality available only if assist is applicable to the whole\n+//!   selection. Example: `sort_items` sorts items alphabetically. Naively, it\n+//!   should be available more or less everywhere, which isn't useful. So\n+//!   instead we only show it if the user *selects* the items they want to sort.\n+//! * Consider grouping related assists together (see [`Assists::add_group`]).\n+//! * Make assists robust. If the assist depends on results of type-inference to\n+//!   much, it might only fire in fully-correct code. This makes assist less\n+//!   useful and (worse) less predictable. The user should have a clear\n+//!   intuition when each particular assist is available.\n+//! * Make small assists, which compose. Example: rather than auto-importing\n+//!   enums in `fill_match_arms`, we use fully-qualified names. There's a\n+//!   separate assist to shorten a fully-qualified name.\n+//! * Distinguish between assists and fixits for diagnostics. Internally, fixits\n+//!   and assists are equivalent. They have the same \"show a list + invoke a\n+//!   single element\" workflow, and both use [`Assist`] data structure. The main\n+//!   difference is in the UX: while \ud83d\udca1 looks only at the cursor position,\n+//!   diagnostics squigglies and fixits are calculated for the whole file and\n+//!   are presented to the user eagerly. So, diagnostics should be fixable\n+//!   errors, while assists can be just suggestions for an alternative way to do\n+//!   something. If something *could* be a diagnostic, it should be a\n+//!   diagnostic. Conversely, it might be valuable to turn a diagnostic with a\n+//!   lot of false errors into an assist.\n+//! *\n+//!\n+//! See also this post:\n+//! <https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html>\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n@@ -28,6 +81,9 @@ pub use ide_db::assists::{\n };\n \n /// Return all the assists applicable at the given position.\n+///\n+// NOTE: We don't have a `Feature: ` section for assists, they are special-cased\n+// in the manual.\n pub fn assists(\n     db: &RootDatabase,\n     config: &AssistConfig,"}]}