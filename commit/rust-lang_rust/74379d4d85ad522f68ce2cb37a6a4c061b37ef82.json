{"sha": "74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Mzc5ZDRkODVhZDUyMmY2OGNlMmNiMzdhNmE0YzA2MWIzN2VmODI=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-05-06T15:33:44Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-26T21:15:18Z"}, "message": "Actually infer args in visitors", "tree": {"sha": "f1e10ac469f2c6ff5c2e34ca128092f5b13c43a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e10ac469f2c6ff5c2e34ca128092f5b13c43a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "html_url": "https://github.com/rust-lang/rust/commit/74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8286824ab2f776eeaebd21b1f78bacda34dcbcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8286824ab2f776eeaebd21b1f78bacda34dcbcba", "html_url": "https://github.com/rust-lang/rust/commit/8286824ab2f776eeaebd21b1f78bacda34dcbcba"}], "stats": {"total": 58, "additions": 6, "deletions": 52}, "files": [{"sha": "d5ee717accd26461c728990ce8a69465985580fc", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, PathSegment,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path,\n     QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -280,52 +280,6 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     }\n }\n \n-<<<<<<< HEAD\n-=======\n-struct LintTyCollector<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    self_ty: Ty<'tcx>,\n-    types_to_lint: Vec<HirId>,\n-    types_to_skip: Vec<HirId>,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n-        if_chain! {\n-            if let Some(ty) = self.cx.typeck_results().node_type_opt(hir_ty.hir_id);\n-            if should_lint_ty(hir_ty, ty, self.self_ty);\n-            then {\n-                self.types_to_lint.push(hir_ty.hir_id);\n-            } else {\n-                self.types_to_skip.push(hir_ty.hir_id);\n-            }\n-        }\n-\n-        walk_ty(self, hir_ty);\n-    }\n-\n-    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n-        if_chain! {\n-            if let Some(ty) = self.cx.typeck_results().node_type_opt(inf.hir_id);\n-            if should_lint_ty(&inf.to_ty(), ty, self.self_ty);\n-            then {\n-                self.types_to_lint.push(inf.hir_id);\n-            } else {\n-                self.types_to_skip.push(inf.hir_id);\n-            }\n-        }\n-\n-        walk_inf(self, inf)\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n->>>>>>> Add inferred args to typeck\n fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "6ea360a88a63e3c5169b14ac41571190fc61b0c1", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "patch": "@@ -904,7 +904,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -924,7 +924,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -933,7 +933,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);"}, {"sha": "df0598a58cd3617cdb539261d29416537215802f", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74379d4d85ad522f68ce2cb37a6a4c061b37ef82/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "patch": "@@ -46,13 +46,13 @@ error: transmute from a pointer type (`*const i32`) to a reference type (`&issue\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<u8>)`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<&u8>)`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:14"}]}