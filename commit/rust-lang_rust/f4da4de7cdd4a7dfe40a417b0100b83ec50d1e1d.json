{"sha": "f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZGE0ZGU3Y2RkNGE3ZGZlNDBhNDE3YjAxMDBiODNlYzUwZDFlMWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-10T12:09:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-10T12:09:54Z"}, "message": "Merge #9202\n\n9202: feat: Make `MemoryUsage` work on Windows r=jonas-schievink a=jonas-schievink\n\nUnfortunately there is no convenient API for heap statistics, so this instead uses the Commit Charge value, which is the amount of memory that needs to be allocated either in physical RAM or in the page file. This approximation seems to be good enough to find queries that waste a large amount of memory, but it should generally be expected to be off by several MB.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "15339930fdaf23cf4ce941a99228d9cef1b9a75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15339930fdaf23cf4ce941a99228d9cef1b9a75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwgESCRBK7hj4Ov3rIwAAV6YIABc5gOlL4TK2bhOy7c2zRwCI\nfK8ZgTNp5Izact3uQnYnPzlXZ6rVFVF632Y1fUgnSbO0YCfshepNAYvYce619TL+\nQcSYv6malNuHDGr7Yx0zQBNlCNg3nRpkgbfSJp4zAVPj1U0uXhHA43C+Yt0umhbE\nQoK7N9PdYAOJrqDX2cy2GqltkvGRFpMg9WLk/vs6bvZEaMid0AlasgB4J/gKXxW+\n8f7gsyhtq7gx0l5h0U23tpLhXS4XefdYqxiH/B8dGOeEWr7xw02clL4mzDV9yLKW\nE3KE0VlPYbwXqXIG06jLU4G4t3vb7TZhNLgInDIbOeUMDaasVXnNQFfZNgWaF64=\n=73Qy\n-----END PGP SIGNATURE-----\n", "payload": "tree 15339930fdaf23cf4ce941a99228d9cef1b9a75a\nparent 660a89620f65225359559ddcaf158bdb9dfe0d4c\nparent 2c1ca98abaf6756d3246841cc3cf4ca3f617efca\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623326994 +0000\ncommitter GitHub <noreply@github.com> 1623326994 +0000\n\nMerge #9202\n\n9202: feat: Make `MemoryUsage` work on Windows r=jonas-schievink a=jonas-schievink\n\nUnfortunately there is no convenient API for heap statistics, so this instead uses the Commit Charge value, which is the amount of memory that needs to be allocated either in physical RAM or in the page file. This approximation seems to be good enough to find queries that waste a large amount of memory, but it should generally be expected to be off by several MB.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "html_url": "https://github.com/rust-lang/rust/commit/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660a89620f65225359559ddcaf158bdb9dfe0d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/660a89620f65225359559ddcaf158bdb9dfe0d4c", "html_url": "https://github.com/rust-lang/rust/commit/660a89620f65225359559ddcaf158bdb9dfe0d4c"}, {"sha": "2c1ca98abaf6756d3246841cc3cf4ca3f617efca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1ca98abaf6756d3246841cc3cf4ca3f617efca", "html_url": "https://github.com/rust-lang/rust/commit/2c1ca98abaf6756d3246841cc3cf4ca3f617efca"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "2bd8897f05cc538b7d608a825c66a5c7c2ce00c4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "patch": "@@ -1170,6 +1170,7 @@ dependencies = [\n  \"once_cell\",\n  \"perf-event\",\n  \"tikv-jemalloc-ctl\",\n+ \"winapi\",\n ]\n \n [[package]]"}, {"sha": "653d3d98399e3b10654d5cd7679c11ec2f53082b", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "patch": "@@ -20,6 +20,9 @@ jemalloc-ctl = { version = \"0.4.1\", package = \"tikv-jemalloc-ctl\", optional = tr\n [target.'cfg(target_os = \"linux\")'.dependencies]\n perf-event = \"0.4\"\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3.8\", features = [\"psapi\"] }\n+\n [features]\n cpu_profiler = []\n jemalloc = [\"jemalloc-ctl\"]"}, {"sha": "6ef58c9c14e9b05096980a165b35c13664961e52", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "patch": "@@ -35,6 +35,22 @@ impl MemoryUsage {\n                 // Note: This is incredibly slow.\n                 let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n                 MemoryUsage { allocated: Bytes(alloc) }\n+            } else if #[cfg(windows)] {\n+                // There doesn't seem to be an API for determining heap usage, so we try to\n+                // approximate that by using the Commit Charge value.\n+\n+                use winapi::um::processthreadsapi::*;\n+                use winapi::um::psapi::*;\n+                use std::mem::{MaybeUninit, size_of};\n+\n+                let proc = unsafe { GetCurrentProcess() };\n+                let mut mem_counters = MaybeUninit::uninit();\n+                let cb = size_of::<PROCESS_MEMORY_COUNTERS>();\n+                let ret = unsafe { GetProcessMemoryInfo(proc, mem_counters.as_mut_ptr(), cb as u32) };\n+                assert!(ret != 0);\n+\n+                let usage = unsafe { mem_counters.assume_init().PagefileUsage };\n+                MemoryUsage { allocated: Bytes(usage as isize) }\n             } else {\n                 MemoryUsage { allocated: Bytes(0) }\n             }"}]}