{"sha": "df97d23c71f6fbe300d3bc0dca23b063044b3934", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTdkMjNjNzFmNmZiZTMwMGQzYmMwZGNhMjNiMDYzMDQ0YjM5MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T10:55:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T10:55:56Z"}, "message": "auto merge of #9455 : jesseray/rust/master, r=pnkfelix\n\nIn \"/src/libstd/char.rs\", there are function and method definitions for `is_lowercase()`, `is_uppercase()`, `is_whitespace()`, etc. However, there was no function or method for control characters, so I added the `is_control()` function and method definitions along with documentation and tests. Running `./configure && make check` shows that all tests for `is_control()` pass.", "tree": {"sha": "c547494b35d37a114e61d19f16a5a5dd792f7a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c547494b35d37a114e61d19f16a5a5dd792f7a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df97d23c71f6fbe300d3bc0dca23b063044b3934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df97d23c71f6fbe300d3bc0dca23b063044b3934", "html_url": "https://github.com/rust-lang/rust/commit/df97d23c71f6fbe300d3bc0dca23b063044b3934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df97d23c71f6fbe300d3bc0dca23b063044b3934/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6c9ff392becd86ee22ad96cd66e137b65195f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9ff392becd86ee22ad96cd66e137b65195f97", "html_url": "https://github.com/rust-lang/rust/commit/f6c9ff392becd86ee22ad96cd66e137b65195f97"}, {"sha": "13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "url": "https://api.github.com/repos/rust-lang/rust/commits/13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "html_url": "https://github.com/rust-lang/rust/commit/13571af92fc8f2aa115ce1fcb8b82b5f654e5780"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "abb1ac5ace85b69730adbb9a15f155222c201ea3", "filename": "src/libstd/char.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df97d23c71f6fbe300d3bc0dca23b063044b3934/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df97d23c71f6fbe300d3bc0dca23b063044b3934/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=df97d23c71f6fbe300d3bc0dca23b063044b3934", "patch": "@@ -128,6 +128,14 @@ pub fn is_alphanumeric(c: char) -> bool {\n         || general_category::No(c)\n }\n \n+///\n+/// Indicates whether a character is a control character. Control\n+/// characters are defined in terms of the Unicode General Category\n+/// 'Cc'.\n+///\n+#[inline]\n+pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n+\n /// Indicates whether the character is numeric (Nd, Nl, or No)\n #[inline]\n pub fn is_digit(c: char) -> bool {\n@@ -354,6 +362,7 @@ pub trait Char {\n     fn is_uppercase(&self) -> bool;\n     fn is_whitespace(&self) -> bool;\n     fn is_alphanumeric(&self) -> bool;\n+    fn is_control(&self) -> bool;\n     fn is_digit(&self) -> bool;\n     fn is_digit_radix(&self, radix: uint) -> bool;\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n@@ -384,6 +393,8 @@ impl Char for char {\n \n     fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n \n+    fn is_control(&self) -> bool { is_control(*self) }\n+\n     fn is_digit(&self) -> bool { is_digit(*self) }\n \n     fn is_digit_radix(&self, radix: uint) -> bool { is_digit_radix(*self, radix) }\n@@ -494,6 +505,19 @@ fn test_to_digit() {\n     assert_eq!('$'.to_digit(36u), None);\n }\n \n+#[test]\n+fn test_is_control() {\n+    assert!('\\u0000'.is_control());\n+    assert!('\\u0003'.is_control());\n+    assert!('\\u0006'.is_control());\n+    assert!('\\u0009'.is_control());\n+    assert!('\\u007f'.is_control());\n+    assert!('\\u0092'.is_control());\n+    assert!(!'\\u0020'.is_control());\n+    assert!(!'\\u0055'.is_control());\n+    assert!(!'\\u0068'.is_control());\n+}\n+\n #[test]\n fn test_is_digit() {\n    assert!('2'.is_digit());"}]}