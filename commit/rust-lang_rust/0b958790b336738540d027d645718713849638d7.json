{"sha": "0b958790b336738540d027d645718713849638d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTU4NzkwYjMzNjczODU0MGQwMjdkNjQ1NzE4NzEzODQ5NjM4ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-24T09:14:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-24T09:14:47Z"}, "message": "Auto merge of #70820 - spastorino:replace-fragile-erroneous-const-sys, r=oli-obk\n\nReplace fragile erroneous const sys\n\nCloses #67191\n\nr? @oli-obk", "tree": {"sha": "951c1c2e8e37f84a389d67055c3ae0b87d818fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/951c1c2e8e37f84a389d67055c3ae0b87d818fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b958790b336738540d027d645718713849638d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b958790b336738540d027d645718713849638d7", "html_url": "https://github.com/rust-lang/rust/commit/0b958790b336738540d027d645718713849638d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b958790b336738540d027d645718713849638d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a59527516a917738c2e5f5d9f5e9a3533a6a5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc", "html_url": "https://github.com/rust-lang/rust/commit/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc"}, {"sha": "7bc45f6baae33bf7f55085f801e6eea6fcd11351", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc45f6baae33bf7f55085f801e6eea6fcd11351", "html_url": "https://github.com/rust-lang/rust/commit/7bc45f6baae33bf7f55085f801e6eea6fcd11351"}], "stats": {"total": 215, "additions": 133, "deletions": 82}, "files": [{"sha": "1cd01c8c5bcb0757ef9440a134fbdc78317d1ea9", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -1,6 +1,8 @@\n use crate::base;\n use crate::traits::*;\n+use rustc_errors::ErrorReported;\n use rustc_middle::mir;\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_target::abi::call::{FnAbi, PassMode};\n@@ -189,6 +191,18 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     fx.per_local_var_debug_info = fx.compute_per_local_var_debug_info();\n \n+    for const_ in &mir.required_consts {\n+        if let Err(err) = fx.eval_mir_constant(const_) {\n+            match err {\n+                // errored or at least linted\n+                ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n+                ErrorHandled::TooGeneric => {\n+                    span_bug!(const_.span, \"codgen encountered polymorphic constant: {:?}\", err)\n+                }\n+            }\n+        }\n+    }\n+\n     let memory_locals = analyze::non_ssa_locals(&fx);\n \n     // Allocate variable and temp allocas"}, {"sha": "341fec0c07b36d7d20ced951bed451977836eb68", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -156,6 +156,10 @@ pub struct Body<'tcx> {\n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n \n+    /// Constants that are required to evaluate successfully for this MIR to be well-formed.\n+    /// We hold in this field all the constants we are not able to evaluate yet.\n+    pub required_consts: Vec<Constant<'tcx>>,\n+\n     /// The user may be writing e.g. &[(SOME_CELL, 42)][i].1 and this would get promoted, because\n     /// we'd statically know that no thing with interior mutability will ever be available to the\n     /// user without some serious unsafe code.  Now this means that our promoted is actually\n@@ -203,6 +207,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n+            required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n             control_flow_destroyed,\n             predecessor_cache: PredecessorCache::new(),\n@@ -227,6 +232,7 @@ impl<'tcx> Body<'tcx> {\n             arg_count: 0,\n             spread_arg: None,\n             span: DUMMY_SP,\n+            required_consts: Vec::new(),\n             control_flow_destroyed: Vec::new(),\n             generator_kind: None,\n             var_debug_info: Vec::new(),\n@@ -2395,7 +2401,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n /// this does not necessarily mean that they are \"==\" in Rust -- in\n /// particular one must be wary of `NaN`!\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n "}, {"sha": "d32a8d4344573edc9913e056f21cac54f1ff82be", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -288,6 +288,11 @@ macro_rules! make_mir_visitor {\n                 }\n \n                 self.visit_span(&$($mutability)? body.span);\n+\n+                for const_ in &$($mutability)? body.required_consts {\n+                    let location = START_BLOCK.start_location();\n+                    self.visit_constant(const_, location);\n+                }\n             }\n \n             fn super_basic_block_data(&mut self,"}, {"sha": "205bfcd7b371fe7588720910df7d4eecc7120433", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -830,6 +830,12 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         self.tcx\n     }\n \n+    fn visit_body(&mut self, body: &mut Body<'tcx>) {\n+        for (bb, data) in body.basic_blocks_mut().iter_enumerated_mut() {\n+            self.visit_basic_block_data(bb, data);\n+        }\n+    }\n+\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         trace!(\"visit_constant: {:?}\", constant);\n         self.super_constant(constant, location);"}, {"sha": "985bd2b16605fe64218e608652f70de814ad1893", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::Sanitizer;\n use rustc_target::spec::abi::Abi;\n \n@@ -123,6 +123,16 @@ impl Inliner<'tcx> {\n                     continue;\n                 };\n \n+                // Copy only unevaluated constants from the callee_body into the caller_body.\n+                // Although we are only pushing `ConstKind::Unevaluated` consts to\n+                // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n+                // because we are calling `subst_and_normalize_erasing_regions`.\n+                caller_body.required_consts.extend(\n+                    callee_body.required_consts.iter().copied().filter(|&constant| {\n+                        matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n+                    }),\n+                );\n+\n                 let start = caller_body.basic_blocks().len();\n                 debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n                 if !self.inline_call(callsite, caller_body, callee_body) {"}, {"sha": "48a6fe2273919976e2c70e2f46f0c84aab8ae072", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -1,10 +1,12 @@\n use crate::{shim, util};\n+use required_consts::RequiredConstsVisitor;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::{Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::visit::Visitor as _;\n+use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n@@ -29,6 +31,7 @@ pub mod no_landing_pads;\n pub mod promote_consts;\n pub mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n+pub mod required_consts;\n pub mod rustc_peek;\n pub mod simplify;\n pub mod simplify_branches;\n@@ -237,6 +240,14 @@ fn mir_validated(\n     let _ = tcx.mir_const_qualif(def_id);\n \n     let mut body = tcx.mir_const(def_id).steal();\n+\n+    let mut required_consts = Vec::new();\n+    let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n+    for (bb, bb_data) in traversal::reverse_postorder(&body) {\n+        required_consts_visitor.visit_basic_block_data(bb, bb_data);\n+    }\n+    body.required_consts = required_consts;\n+\n     let promote_pass = promote_consts::PromoteTemps::default();\n     run_passes(\n         tcx,"}, {"sha": "a63ab30a68fa2fbdcb698f937c0cae9eebb7ee01", "filename": "src/librustc_mir/transform/required_consts.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -0,0 +1,23 @@\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{Constant, Location};\n+use rustc_middle::ty::ConstKind;\n+\n+pub struct RequiredConstsVisitor<'a, 'tcx> {\n+    required_consts: &'a mut Vec<Constant<'tcx>>,\n+}\n+\n+impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n+    pub fn new(required_consts: &'a mut Vec<Constant<'tcx>>) -> Self {\n+        RequiredConstsVisitor { required_consts }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n+        let const_kind = constant.literal.val;\n+\n+        if let ConstKind::Unevaluated(_, _, _) = const_kind {\n+            self.required_consts.push(*constant);\n+        }\n+    }\n+}"}, {"sha": "491c37cbe06e85320f3d9c459334342753e3ceb2", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -32,7 +32,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n use std::borrow::Cow;\n \n pub struct SimplifyCfg {\n@@ -400,33 +400,18 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n-                fn can_skip_constant(c: &ty::Const<'tcx>) -> bool {\n-                    // Keep assignments from unevaluated constants around, since the\n-                    // evaluation may report errors, even if the use of the constant\n-                    // is dead code.\n-                    !matches!(c.val, ty::ConstKind::Unevaluated(..))\n-                }\n-\n-                fn can_skip_operand(o: &Operand<'_>) -> bool {\n-                    match o {\n-                        Operand::Copy(_) | Operand::Move(_) => true,\n-                        Operand::Constant(c) => can_skip_constant(c.literal),\n-                    }\n-                }\n-\n                 if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n                     if !dest.is_indirect() && dest.local == *local {\n                         let can_skip = match rvalue {\n-                            Rvalue::Use(op) => can_skip_operand(op),\n-                            Rvalue::Discriminant(_) => true,\n-                            Rvalue::BinaryOp(_, l, r) | Rvalue::CheckedBinaryOp(_, l, r) => {\n-                                can_skip_operand(l) && can_skip_operand(r)\n-                            }\n-                            Rvalue::Repeat(op, c) => can_skip_operand(op) && can_skip_constant(c),\n-                            Rvalue::AddressOf(_, _) => true,\n-                            Rvalue::Len(_) => true,\n-                            Rvalue::UnaryOp(_, op) => can_skip_operand(op),\n-                            Rvalue::Aggregate(_, operands) => operands.iter().all(can_skip_operand),\n+                            Rvalue::Use(_)\n+                            | Rvalue::Discriminant(_)\n+                            | Rvalue::BinaryOp(_, _, _)\n+                            | Rvalue::CheckedBinaryOp(_, _, _)\n+                            | Rvalue::Repeat(_, _)\n+                            | Rvalue::AddressOf(_, _)\n+                            | Rvalue::Len(_)\n+                            | Rvalue::UnaryOp(_, _)\n+                            | Rvalue::Aggregate(_, _) => true,\n \n                             _ => false,\n                         };"}, {"sha": "0db9fdcee811ae56ff5ddc9b25109672245f98c7", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -30,41 +30,41 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257ealloc25+0\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257ealloc21+0\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc25 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc10+0\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc15+0\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc23+0\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc21 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc4+0\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc9+0\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc19+0\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc10 (size: 0, align: 4) {}\n+alloc4 (size: 0, align: 4) {}\n \n-alloc15 (size: 8, align: 4) {\n-    \u257ealloc13+0\u257c \u257ealloc14+0\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc9 (size: 8, align: 4) {\n+    \u257ealloc7+0\u2500\u257c \u257ealloc8+0\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc7 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc14 (size: 1, align: 1) {\n+alloc8 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc23 (size: 12, align: 4) {\n-    \u257ealloc19+3\u257c \u257ealloc20+0\u257c \u257ealloc22+2\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc19 (size: 12, align: 4) {\n+    \u257ealloc15+3\u257c \u257ealloc16+0\u257c \u257ealloc18+2\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc19 (size: 4, align: 1) {\n+alloc15 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc20 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc22 (size: 4, align: 1) {\n+alloc18 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "38514fe65b99eefeb54b34223b6a0cc943f29a36", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -30,44 +30,44 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc25+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc21+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc25 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc10+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc21 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc4+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc15+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc23+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc9+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc19+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc10 (size: 0, align: 8) {}\n+alloc4 (size: 0, align: 8) {}\n \n-alloc15 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc13+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc14+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc9 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc7+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc8+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc7 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc14 (size: 1, align: 1) {\n+alloc8 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc23 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc19+3\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc20+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc22+2\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc19 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc15+3\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc16+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc18+2\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc19 (size: 4, align: 1) {\n+alloc15 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc20 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc22 (size: 4, align: 1) {\n+alloc18 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "b2d4f14aa4cd8ae8286e7cf41c1435ea284fcb54", "filename": "src/test/mir-opt/remove-never-const.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -1,5 +1,6 @@\n-// Regression test for #66975 - ensure that we don't keep unevaluated\n-// `!`-typed constants until codegen.\n+// This was originally a regression test for #66975 - ensure that we do not generate never typed\n+// consts in codegen. We also have tests for this that catches the error, see\n+// src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs.\n \n // Force generation of optimized mir for functions that do not reach codegen.\n // compile-flags: --emit mir,link", "previous_filename": "src/test/mir-opt/retain-never-const.rs"}, {"sha": "1cc2138f19e37736ae2ba883d651fe34a1ec7cfc", "filename": "src/test/mir-opt/remove-never-const/rustc.no_codegen.PreCodegen.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const%2Frustc.no_codegen.PreCodegen.after.mir?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `no_codegen` after PreCodegen\n+\n+fn no_codegen() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:19:20: 19:20\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        unreachable;                     // bb0[0]: scope 0 at $DIR/remove-never-const.rs:20:13: 20:33\n+    }\n+}"}, {"sha": "2d7a79ee44c07163ea5a9c57679be7bb0bae82be", "filename": "src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir?ref=5a59527516a917738c2e5f5d9f5e9a3533a6a5bc", "patch": "@@ -1,21 +0,0 @@\n-// MIR for `no_codegen` after PreCodegen\n-\n-fn no_codegen() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/retain-never-const.rs:18:20: 18:20\n-    let mut _1: !;                       // in scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-    scope 1 {\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-        _1 = const PrintName::<T>::VOID; // bb0[1]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-                                         // ty::Const\n-                                         // + ty: !\n-                                         // + val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None)\n-                                         // mir::Constant\n-                                         // + span: $DIR/retain-never-const.rs:19:13: 19:33\n-                                         // + user_ty: UserType(0)\n-                                         // + literal: Const { ty: !, val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None) }\n-        unreachable;                     // bb0[2]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-    }\n-}"}]}