{"sha": "1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "node_id": "C_kwDOAAsO6NoAKDFjODZkZTI1ZjEyMGM2NmM4MGRjYmY3YTI0YWZiNGNjYjVlYjk3YzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T18:57:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T18:57:12Z"}, "message": "Rollup merge of #105628 - spastorino:small-doc-fixes, r=compiler-errors\n\nSmall doc fixes\n\nr? `@compiler-errors`", "tree": {"sha": "35a43900ff7f2b1d7117a74ecd0539c3ac051ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a43900ff7f2b1d7117a74ecd0539c3ac051ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmMsICRBK7hj4Ov3rIwAAz2kIAKFRgGyH/R+FgkOlWAAaA8ZE\n9yG3RFEtf7gSFrC5SLMjKJFGOiBth8ssijQsMTNPRuJYVSaHZUE5MzkPopewzwnv\nPhS13M6RPWMTjd67yph1t/rE17fCqMif7w8Z+KTFYWEgm36gqRNPkoxSEUXOfiNP\n2MsIXgLMeqgWsCArPH3Uih7oNDbEO4AxLyLuClHtlHJ5bH1CoqmEHrvcyVfJgK1l\nwdsGHHonPfO0Xy5bzQrwHcoRyWAAVU2dIKRcfv1zRBsUk91GuOsfI2rOajrVzgBi\nzyJSGLFQEllboPtVW/0J1wC357aZbdi/r636BKbiV6nBs80jKJqv81HHZjBjQRE=\n=TDNp\n-----END PGP SIGNATURE-----\n", "payload": "tree 35a43900ff7f2b1d7117a74ecd0539c3ac051ead\nparent 15b9e206409fe4a8d2307fe67e22372ecd4d22cc\nparent b22769a7bdd40ba01bf0792c86ba763a525d8857\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670957832 +0100\ncommitter GitHub <noreply@github.com> 1670957832 +0100\n\nRollup merge of #105628 - spastorino:small-doc-fixes, r=compiler-errors\n\nSmall doc fixes\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "html_url": "https://github.com/rust-lang/rust/commit/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b9e206409fe4a8d2307fe67e22372ecd4d22cc", "html_url": "https://github.com/rust-lang/rust/commit/15b9e206409fe4a8d2307fe67e22372ecd4d22cc"}, {"sha": "b22769a7bdd40ba01bf0792c86ba763a525d8857", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22769a7bdd40ba01bf0792c86ba763a525d8857", "html_url": "https://github.com/rust-lang/rust/commit/b22769a7bdd40ba01bf0792c86ba763a525d8857"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "19a1b5da41d775c91de2fea0e7e0af0cccdb0b8a", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "patch": "@@ -75,7 +75,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n     const NO_GENERICS: &hir::Generics<'_> = hir::Generics::empty();\n \n-    // We use an `IndexSet` to preserves order of insertion.\n+    // We use an `IndexSet` to preserve order of insertion.\n     // Preserving the order of insertion is important here so as not to break UI tests.\n     let mut predicates: FxIndexSet<(ty::Predicate<'_>, Span)> = FxIndexSet::default();\n \n@@ -97,11 +97,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics) => *generics,\n \n-            ItemKind::Trait(_, _, ref generics, ..) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n-                *generics\n-            }\n-            ItemKind::TraitAlias(ref generics, _) => {\n+            ItemKind::Trait(_, _, ref generics, ..) | ItemKind::TraitAlias(ref generics, _) => {\n                 is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n                 *generics\n             }\n@@ -406,9 +402,10 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             // For a predicate from a where clause to become a bound on an\n             // associated type:\n             // * It must use the identity substs of the item.\n-            //     * Since any generic parameters on the item are not in scope,\n-            //       this means that the item is not a GAT, and its identity\n-            //       substs are the same as the trait's.\n+            //   * We're in the scope of the trait, so we can't name any\n+            //     parameters of the GAT. That means that all we need to\n+            //     check are that the substs of the projection are the\n+            //     identity substs of the trait.\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {"}, {"sha": "f8385c4701605bcc07841ef86b7bb6d6a36c8122", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=1c86de25f120c66c80dcbf7a24afb4ccb5eb97c6", "patch": "@@ -252,7 +252,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for GenericArg<'tcx> {\n     }\n }\n \n-/// A substitution mapping generic parameters to new values.\n+/// List of generic arguments that are gonna be used to substitute generic parameters.\n pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;\n \n pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;"}]}