{"sha": "b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MDRiM2Y4ZDVhMzM3NGQwNzllNzBjM2Q2YzZkMDE2MTJlNDllY2Y=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-14T22:34:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-14T22:34:01Z"}, "message": "Begin actually folding constant items into operands at site of use.", "tree": {"sha": "4627a955101e85fe1837bd4e637d7e4a87b342ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4627a955101e85fe1837bd4e637d7e4a87b342ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "html_url": "https://github.com/rust-lang/rust/commit/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfeac162d4562b07a540af0959cc1d39c882f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfeac162d4562b07a540af0959cc1d39c882f6d", "html_url": "https://github.com/rust-lang/rust/commit/6cfeac162d4562b07a540af0959cc1d39c882f6d"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "feb5667f10724e1f6072aec91918036a4d95ad8a", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "patch": "@@ -50,6 +50,7 @@ type data =\n   | DATA_frame_glue_fns of node_id\n   | DATA_obj_vtbl of node_id\n   | DATA_forwarding_vtbl of (Ast.ty_obj * Ast.ty_obj)\n+  | DATA_const of node_id\n   | DATA_crate\n ;;\n "}, {"sha": "757b9ef73c01abd7a1de7ed0612033a080b9d39c", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 77, "deletions": 8, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "patch": "@@ -37,6 +37,12 @@ let call_output_slot call =\n   (fst (need_ty_fn call.call_callee_ty)).Ast.sig_output_slot\n ;;\n \n+\n+type const =\n+    CONST_val of int64\n+  | CONST_frag of Asm.frag\n+;;\n+\n let trans_visitor\n     (cx:ctxt)\n     (path:Ast.name_component Stack.t)\n@@ -1006,21 +1012,84 @@ let trans_visitor\n         trans_cond_fail \"bounds check\" jmp;\n         based elt_reg\n \n-  and trans_lval_item\n+  and trans_const_atom\n+      (atom:Ast.atom)\n+      : (Ast.ty * const) =\n+    match atom with\n+        Ast.ATOM_literal lit ->\n+          begin\n+            match lit.node with\n+                Ast.LIT_nil -> (Ast.TY_nil, CONST_val 0L)\n+              | Ast.LIT_bool false -> (Ast.TY_bool, CONST_val 0L)\n+              | Ast.LIT_bool true -> (Ast.TY_bool, CONST_val 1L)\n+              | Ast.LIT_char c -> (Ast.TY_char, CONST_val (Int64.of_int c))\n+              | Ast.LIT_int i -> (Ast.TY_int, CONST_val i)\n+              | Ast.LIT_uint i -> (Ast.TY_uint, CONST_val i)\n+              | Ast.LIT_mach_int (m, i) -> (Ast.TY_mach m, CONST_val i)\n+          end\n+\n+      | Ast.ATOM_lval lv ->\n+          trans_const_lval lv\n+\n+  and trans_const_expr\n+      (expr:Ast.expr)\n+      : (Ast.ty * const) =\n+    match expr with\n+        Ast.EXPR_atom at -> trans_const_atom at\n+\n+      | Ast.EXPR_binary (_, a, b) ->\n+          let _ = trans_const_atom a in\n+          let _ = trans_const_atom b in\n+            unimpl None \"constant-folding binary expr\"\n+\n+      | Ast.EXPR_unary (_, x) ->\n+          let _ = trans_const_atom x in\n+            unimpl None \"constant-folding unary expr\"\n+\n+  and trans_const_lval\n       (lv:Ast.lval)\n-      : (Il.cell * Ast.ty) =\n+      : (Ast.ty * const) =\n     assert (lval_base_is_item cx lv);\n-    let ty = lval_ty cx lv in\n     let item = lval_item cx lv in\n       check_concrete item.node.Ast.decl_params ();\n       match item.node.Ast.decl_item with\n-          Ast.MOD_ITEM_const (_, Some e) ->\n-            (Il.Reg (force_to_reg (trans_expr e)), ty)\n-        | _ ->\n-            bug ()\n-              \"trans_lval_full called on unsupported item lval '%a'\"\n+          Ast.MOD_ITEM_const (_, Some e) -> trans_const_expr e\n+\n+        | _ -> bug ()\n+            \"trans_const_lval called on unsupported item lval '%a'\"\n               Ast.sprintf_lval lv\n \n+  and trans_lval_item\n+      (lv:Ast.lval)\n+      : (Il.cell * Ast.ty) =\n+    assert (lval_base_is_item cx lv);\n+    match trans_const_lval lv with\n+\n+        (ty, CONST_val v) ->\n+          let f tm =\n+            (Il.Reg (force_to_reg (imm_of_ty v tm)), ty)\n+          in\n+            begin\n+              match ty with\n+                  Ast.TY_mach tm -> f tm\n+                | Ast.TY_uint -> f word_ty_mach\n+                | Ast.TY_int -> f word_ty_signed_mach\n+                | Ast.TY_bool -> f TY_u8\n+                | Ast.TY_char -> f TY_u32\n+                | Ast.TY_nil -> (nil_ptr, ty)\n+                | _ -> bug ()\n+                    \"trans_lval_item on %a: unexpected type %a\"\n+                      Ast.sprintf_lval lv Ast.sprintf_ty ty\n+            end\n+\n+      | (ty, CONST_frag f) ->\n+          let item = lval_item cx lv in\n+            (crate_rel_to_ptr\n+               (trans_crate_rel_data_operand\n+                  (DATA_const item.id)\n+                  (fun _ -> f))\n+               (referent_type cx ty), ty)\n+\n   and trans_lval_full\n       (initializing:bool)\n       (lv:Ast.lval)"}]}