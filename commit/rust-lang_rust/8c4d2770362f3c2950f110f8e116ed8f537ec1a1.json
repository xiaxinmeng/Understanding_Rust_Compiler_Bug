{"sha": "8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNGQyNzcwMzYyZjNjMjk1MGYxMTBmOGUxMTZlZDhmNTM3ZWMxYTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T09:13:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:35:29Z"}, "message": "switch source-binders to Module", "tree": {"sha": "4375e70e9f29d11dd3688fd57fe9080069e493b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4375e70e9f29d11dd3688fd57fe9080069e493b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "html_url": "https://github.com/rust-lang/rust/commit/8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4d2770362f3c2950f110f8e116ed8f537ec1a1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147b0f94e60f66c73ee1ca1726de97d76721bfda", "url": "https://api.github.com/repos/rust-lang/rust/commits/147b0f94e60f66c73ee1ca1726de97d76721bfda", "html_url": "https://github.com/rust-lang/rust/commit/147b0f94e60f66c73ee1ca1726de97d76721bfda"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "659af548caac46f240108d7f72d836c53de168f5", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c4d2770362f3c2950f110f8e116ed8f537ec1a1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4d2770362f3c2950f110f8e116ed8f537ec1a1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "patch": "@@ -4,7 +4,6 @@ use crate::{HirFileId, db::HirDatabase, Crate, CrateDependency, AsName, DefId, D\n \n use crate::code_model_api::Module;\n \n-\n impl Crate {\n     pub(crate) fn new(crate_id: CrateId) -> Crate {\n         Crate { crate_id }\n@@ -45,7 +44,7 @@ impl Crate {\n }\n \n impl Module {\n-    fn new(def_id: DefId) -> Self {\n+    pub(crate) fn new(def_id: DefId) -> Self {\n         crate::code_model_api::Module { def_id }\n     }\n "}, {"sha": "ac097e81a83e6a4c5377689f193354068a18e831", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8c4d2770362f3c2950f110f8e116ed8f537ec1a1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4d2770362f3c2950f110f8e116ed8f537ec1a1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "patch": "@@ -13,11 +13,13 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Module, Function, SourceItemId,\n+    HirDatabase, Function, SourceItemId,\n     module::ModuleSource,\n     DefKind, DefLoc, AsName,\n };\n \n+use crate::code_model_api::Module;\n+\n /// Locates the module by `FileId`. Picks topmost module in the file.\n pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Cancelable<Option<Module>> {\n     let module_source = ModuleSource::new_file(file_id.into());\n@@ -34,7 +36,7 @@ pub fn module_from_declaration(\n     let child_name = decl.name();\n     match (parent_module, child_name) {\n         (Some(parent_module), Some(child_name)) => {\n-            if let Some(child) = parent_module.child(&child_name.as_name()) {\n+            if let Some(child) = parent_module.child(db, &child_name.as_name())? {\n                 return Ok(Some(child));\n             }\n         }\n@@ -84,7 +86,15 @@ fn module_from_source(\n         .modules_with_sources()\n         .find(|(_id, src)| src == &module_source);\n     let module_id = ctry!(m).0;\n-    Ok(Some(Module::new(db, source_root_id, module_id)?))\n+    let def_loc = DefLoc {\n+        kind: DefKind::Module,\n+        source_root_id,\n+        module_id,\n+        source_item_id: module_source.0,\n+    };\n+    let def_id = def_loc.id(db);\n+\n+    Ok(Some(Module::new(def_id)))\n }\n \n pub fn function_from_position(\n@@ -114,7 +124,8 @@ pub fn function_from_module(\n     module: &Module,\n     fn_def: ast::FnDef,\n ) -> Function {\n-    let file_id = module.source().file_id();\n+    let loc = module.def_id.loc(db);\n+    let file_id = loc.source_item_id.file_id;\n     let file_items = db.file_items(file_id);\n     let item_id = file_items.id_of(file_id, fn_def.syntax());\n     let source_item_id = SourceItemId {\n@@ -123,8 +134,8 @@ pub fn function_from_module(\n     };\n     let def_loc = DefLoc {\n         kind: DefKind::Function,\n-        source_root_id: module.source_root_id,\n-        module_id: module.module_id,\n+        source_root_id: loc.source_root_id,\n+        module_id: loc.module_id,\n         source_item_id,\n     };\n     Function::new(def_loc.id(db))\n@@ -147,7 +158,8 @@ pub fn macro_symbols(\n         Some(it) => it,\n         None => return Ok(Vec::new()),\n     };\n-    let items = db.input_module_items(module.source_root_id, module.module_id)?;\n+    let loc = module.def_id.loc(db);\n+    let items = db.input_module_items(loc.source_root_id, loc.module_id)?;\n     let mut res = Vec::new();\n \n     for macro_call_id in items"}]}