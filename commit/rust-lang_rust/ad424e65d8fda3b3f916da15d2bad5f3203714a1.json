{"sha": "ad424e65d8fda3b3f916da15d2bad5f3203714a1", "node_id": "C_kwDOAAsO6NoAKGFkNDI0ZTY1ZDhmZGEzYjNmOTE2ZGExNWQyYmFkNWYzMjAzNzE0YTE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T15:11:51Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-15T14:20:31Z"}, "message": "Always fall back to PartialEq when a constant in a pattern is not recursively structural-eq", "tree": {"sha": "1666fbfb7fabeeb57757b41c2e391b1dc7ab472f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1666fbfb7fabeeb57757b41c2e391b1dc7ab472f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad424e65d8fda3b3f916da15d2bad5f3203714a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad424e65d8fda3b3f916da15d2bad5f3203714a1", "html_url": "https://github.com/rust-lang/rust/commit/ad424e65d8fda3b3f916da15d2bad5f3203714a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad424e65d8fda3b3f916da15d2bad5f3203714a1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d00f762dd330ed44515bf7e95108f4cbf733e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d00f762dd330ed44515bf7e95108f4cbf733e66", "html_url": "https://github.com/rust-lang/rust/commit/8d00f762dd330ed44515bf7e95108f4cbf733e66"}], "stats": {"total": 180, "additions": 104, "deletions": 76}, "files": [{"sha": "dbdb5b4a9a17980886700b4207c6510bea318351", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad424e65d8fda3b3f916da15d2bad5f3203714a1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad424e65d8fda3b3f916da15d2bad5f3203714a1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ad424e65d8fda3b3f916da15d2bad5f3203714a1", "patch": "@@ -380,7 +380,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n     }\n \n-    /// Compare two `&T` values using `<T as std::compare::PartialEq>::eq`\n+    /// Compare two values using `<T as std::compare::PartialEq>::eq`.\n+    /// If the values are already references, just call it directly, otherwise\n+    /// take a reference to the values first and then call it.\n     fn non_scalar_compare(\n         &mut self,\n         block: BasicBlock,\n@@ -441,12 +443,36 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        let ty::Ref(_, deref_ty, _) = *ty.kind() else {\n-            bug!(\"non_scalar_compare called on non-reference type: {}\", ty);\n-        };\n+        match *ty.kind() {\n+            ty::Ref(_, deref_ty, _) => ty = deref_ty,\n+            _ => {\n+                // non_scalar_compare called on non-reference type\n+                let temp = self.temp(ty, source_info.span);\n+                self.cfg.push_assign(block, source_info, temp, Rvalue::Use(expect));\n+                let ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, ty);\n+                let ref_temp = self.temp(ref_ty, source_info.span);\n+\n+                self.cfg.push_assign(\n+                    block,\n+                    source_info,\n+                    ref_temp,\n+                    Rvalue::Ref(self.tcx.lifetimes.re_erased, BorrowKind::Shared, temp),\n+                );\n+                expect = Operand::Move(ref_temp);\n+\n+                let ref_temp = self.temp(ref_ty, source_info.span);\n+                self.cfg.push_assign(\n+                    block,\n+                    source_info,\n+                    ref_temp,\n+                    Rvalue::Ref(self.tcx.lifetimes.re_erased, BorrowKind::Shared, val),\n+                );\n+                val = ref_temp;\n+            }\n+        }\n \n         let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, Some(source_info.span));\n-        let method = trait_method(self.tcx, eq_def_id, sym::eq, [deref_ty, deref_ty]);\n+        let method = trait_method(self.tcx, eq_def_id, sym::eq, [ty, ty]);\n \n         let bool_ty = self.tcx.types.bool;\n         let eq_result = self.temp(bool_ty, source_info.span);"}, {"sha": "9a55da768cbd266e42d5ad2b71db9337b25c3fea", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ad424e65d8fda3b3f916da15d2bad5f3203714a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad424e65d8fda3b3f916da15d2bad5f3203714a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=ad424e65d8fda3b3f916da15d2bad5f3203714a1", "patch": "@@ -62,21 +62,13 @@ struct ConstToPat<'tcx> {\n     treat_byte_string_as_slice: bool,\n }\n \n-mod fallback_to_const_ref {\n-    #[derive(Debug)]\n-    /// This error type signals that we encountered a non-struct-eq situation behind a reference.\n-    /// We bubble this up in order to get back to the reference destructuring and make that emit\n-    /// a const pattern instead of a deref pattern. This allows us to simply call `PartialEq::eq`\n-    /// on such patterns (since that function takes a reference) and not have to jump through any\n-    /// hoops to get a reference to the value.\n-    pub(super) struct FallbackToConstRef(());\n-\n-    pub(super) fn fallback_to_const_ref(c2p: &super::ConstToPat<'_>) -> FallbackToConstRef {\n-        assert!(c2p.behind_reference.get());\n-        FallbackToConstRef(())\n-    }\n-}\n-use fallback_to_const_ref::{fallback_to_const_ref, FallbackToConstRef};\n+/// This error type signals that we encountered a non-struct-eq situation.\n+/// We bubble this up in order to get back to the reference destructuring and make that emit\n+/// a const pattern instead of a deref pattern. This allows us to simply call `PartialEq::eq`\n+/// on such patterns (since that function takes a reference) and not have to jump through any\n+/// hoops to get a reference to the value.\n+#[derive(Debug)]\n+struct FallbackToConstRef;\n \n impl<'tcx> ConstToPat<'tcx> {\n     fn new(\n@@ -236,13 +228,13 @@ impl<'tcx> ConstToPat<'tcx> {\n \n         let kind = match cv.ty().kind() {\n             ty::Float(_) => {\n-                    tcx.emit_spanned_lint(\n-                        lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n-                        id,\n-                        span,\n-                        FloatPattern,\n-                    );\n-                PatKind::Constant { value: cv }\n+                tcx.emit_spanned_lint(\n+                    lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                    id,\n+                    span,\n+                    FloatPattern,\n+                );\n+                return Err(FallbackToConstRef);\n             }\n             ty::Adt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n@@ -289,7 +281,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // Since we are behind a reference, we can just bubble the error up so we get a\n                 // constant at reference type, making it easy to let the fallback call\n                 // `PartialEq::eq` on it.\n-                return Err(fallback_to_const_ref(self));\n+                return Err(FallbackToConstRef);\n             }\n             ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty()) => {\n                 debug!(\n@@ -411,7 +403,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                                 IndirectStructuralMatch { non_sm_ty: *pointee_ty },\n                             );\n                         }\n-                        PatKind::Constant { value: cv }\n+                        return Err(FallbackToConstRef);\n                     } else {\n                         if !self.saw_const_match_error.get() {\n                             self.saw_const_match_error.set(true);\n@@ -439,20 +431,17 @@ impl<'tcx> ConstToPat<'tcx> {\n                         // we fall back to a const pattern. If we do not do this, we may end up with\n                         // a !structural-match constant that is not of reference type, which makes it\n                         // very hard to invoke `PartialEq::eq` on it as a fallback.\n-                        let val = match self.recur(tcx.deref_mir_constant(self.param_env.and(cv)), false) {\n-                            Ok(subpattern) => PatKind::Deref { subpattern },\n-                            Err(_) => PatKind::Constant { value: cv },\n-                        };\n+                        let subpattern = self.recur(tcx.deref_mir_constant(self.param_env.and(cv)), false)?;\n                         self.behind_reference.set(old);\n-                        val\n+                        PatKind::Deref { subpattern }\n                     }\n                 }\n             },\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::FnDef(..) => {\n                 PatKind::Constant { value: cv }\n             }\n             ty::RawPtr(pointee) if pointee.ty.is_sized(tcx, param_env) => {\n-                PatKind::Constant { value: cv }\n+                return Err(FallbackToConstRef);\n             }\n             // FIXME: these can have very surprising behaviour where optimization levels or other\n             // compilation choices change the runtime behaviour of the match.\n@@ -469,7 +458,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                         PointerPattern\n                     );\n                 }\n-                PatKind::Constant { value: cv }\n+                return Err(FallbackToConstRef);\n             }\n             _ => {\n                 self.saw_const_match_error.set(true);"}, {"sha": "c10c6205a084b3ef8835a3f2546ec8216fada5a6", "filename": "tests/ui/pattern/usefulness/consts-opaque.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad424e65d8fda3b3f916da15d2bad5f3203714a1/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad424e65d8fda3b3f916da15d2bad5f3203714a1/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs?ref=ad424e65d8fda3b3f916da15d2bad5f3203714a1", "patch": "@@ -20,11 +20,12 @@ const BAR: Bar = Bar;\n #[derive(PartialEq)]\n enum Baz {\n     Baz1,\n-    Baz2\n+    Baz2,\n }\n impl Eq for Baz {}\n const BAZ: Baz = Baz::Baz1;\n \n+#[rustfmt::skip]\n fn main() {\n     match FOO {\n         FOO => {}\n@@ -124,8 +125,16 @@ fn main() {\n \n     match WRAPQUUX {\n         Wrap(_) => {}\n-        WRAPQUUX => {} // detected unreachable because we do inspect the `Wrap` layer\n-        //~^ ERROR unreachable pattern\n+        WRAPQUUX => {}\n+    }\n+\n+    match WRAPQUUX {\n+        Wrap(_) => {}\n+    }\n+\n+    match WRAPQUUX {\n+        //~^ ERROR: non-exhaustive patterns: `Wrap(_)` not covered\n+        WRAPQUUX => {}\n     }\n \n     #[derive(PartialEq, Eq)]\n@@ -138,8 +147,7 @@ fn main() {\n     match WHOKNOWSQUUX {\n         WHOKNOWSQUUX => {}\n         WhoKnows::Yay(_) => {}\n-        WHOKNOWSQUUX => {} // detected unreachable because we do inspect the `WhoKnows` layer\n-        //~^ ERROR unreachable pattern\n+        WHOKNOWSQUUX => {}\n         WhoKnows::Nope => {}\n     }\n }"}, {"sha": "e01b06ccc82e4f5d6bb071dbe453276f3ae37fd1", "filename": "tests/ui/pattern/usefulness/consts-opaque.stderr", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ad424e65d8fda3b3f916da15d2bad5f3203714a1/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad424e65d8fda3b3f916da15d2bad5f3203714a1/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr?ref=ad424e65d8fda3b3f916da15d2bad5f3203714a1", "patch": "@@ -1,5 +1,5 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:30:9\n+  --> $DIR/consts-opaque.rs:31:9\n    |\n LL |         FOO => {}\n    |         ^^^\n@@ -8,7 +8,7 @@ LL |         FOO => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:37:9\n+  --> $DIR/consts-opaque.rs:38:9\n    |\n LL |         FOO_REF => {}\n    |         ^^^^^^^\n@@ -17,7 +17,7 @@ LL |         FOO_REF => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:45:9\n+  --> $DIR/consts-opaque.rs:46:9\n    |\n LL |         FOO_REF_REF => {}\n    |         ^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL |         FOO_REF_REF => {}\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:53:9\n+  --> $DIR/consts-opaque.rs:54:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n@@ -38,7 +38,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:61:9\n+  --> $DIR/consts-opaque.rs:62:9\n    |\n LL |         BAR => {}\n    |         ^^^\n@@ -47,7 +47,7 @@ LL |         BAR => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:70:9\n+  --> $DIR/consts-opaque.rs:71:9\n    |\n LL |         BAR => {}\n    |         ^^^\n@@ -56,7 +56,7 @@ LL |         BAR => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:72:9\n+  --> $DIR/consts-opaque.rs:73:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n@@ -65,7 +65,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:80:9\n+  --> $DIR/consts-opaque.rs:81:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -74,7 +74,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:90:9\n+  --> $DIR/consts-opaque.rs:91:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -83,7 +83,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/consts-opaque.rs:97:9\n+  --> $DIR/consts-opaque.rs:98:9\n    |\n LL |         BAZ => {}\n    |         ^^^\n@@ -92,7 +92,7 @@ LL |         BAZ => {}\n    = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:32:9\n+  --> $DIR/consts-opaque.rs:33:9\n    |\n LL |         FOO => {}\n    |         --- matches any value\n@@ -107,7 +107,7 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:39:9\n+  --> $DIR/consts-opaque.rs:40:9\n    |\n LL |         FOO_REF => {}\n    |         ------- matches any value\n@@ -116,15 +116,15 @@ LL |         Foo(_) => {} // should not be emitting unreachable warning\n    |         ^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:53:9\n+  --> $DIR/consts-opaque.rs:54:9\n    |\n LL |         Bar => {}\n    |         --- matches any value\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:56:9\n+  --> $DIR/consts-opaque.rs:57:9\n    |\n LL |         Bar => {}\n    |         --- matches any value\n@@ -133,7 +133,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:63:9\n+  --> $DIR/consts-opaque.rs:64:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -142,7 +142,7 @@ LL |         Bar => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:65:9\n+  --> $DIR/consts-opaque.rs:66:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -151,7 +151,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:72:9\n+  --> $DIR/consts-opaque.rs:73:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -160,7 +160,7 @@ LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:75:9\n+  --> $DIR/consts-opaque.rs:76:9\n    |\n LL |         BAR => {}\n    |         --- matches any value\n@@ -169,7 +169,7 @@ LL |         _ => {} // should not be emitting unreachable warning\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:82:9\n+  --> $DIR/consts-opaque.rs:83:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -178,7 +178,7 @@ LL |         Baz::Baz1 => {} // should not be emitting unreachable warning\n    |         ^^^^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:84:9\n+  --> $DIR/consts-opaque.rs:85:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -187,7 +187,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:92:9\n+  --> $DIR/consts-opaque.rs:93:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -196,7 +196,7 @@ LL |         _ => {}\n    |         ^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:99:9\n+  --> $DIR/consts-opaque.rs:100:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n@@ -205,27 +205,32 @@ LL |         Baz::Baz2 => {} // should not be emitting unreachable warning\n    |         ^^^^^^^^^ unreachable pattern\n \n error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:101:9\n+  --> $DIR/consts-opaque.rs:102:9\n    |\n LL |         BAZ => {}\n    |         --- matches any value\n ...\n LL |         _ => {} // should not be emitting unreachable warning\n    |         ^ unreachable pattern\n \n-error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:127:9\n+error[E0004]: non-exhaustive patterns: `Wrap(_)` not covered\n+  --> $DIR/consts-opaque.rs:135:11\n    |\n-LL |         Wrap(_) => {}\n-   |         ------- matches any value\n-LL |         WRAPQUUX => {} // detected unreachable because we do inspect the `Wrap` layer\n-   |         ^^^^^^^^ unreachable pattern\n-\n-error: unreachable pattern\n-  --> $DIR/consts-opaque.rs:141:9\n+LL |     match WRAPQUUX {\n+   |           ^^^^^^^^ pattern `Wrap(_)` not covered\n+   |\n+note: `Wrap<fn(usize, usize) -> usize>` defined here\n+  --> $DIR/consts-opaque.rs:117:12\n+   |\n+LL |     struct Wrap<T>(T);\n+   |            ^^^^\n+   = note: the matched value is of type `Wrap<fn(usize, usize) -> usize>`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         WRAPQUUX => {},\n+LL +         Wrap(_) => todo!()\n    |\n-LL |         WHOKNOWSQUUX => {} // detected unreachable because we do inspect the `WhoKnows` layer\n-   |         ^^^^^^^^^^^^\n \n-error: aborting due to 24 previous errors; 1 warning emitted\n+error: aborting due to 23 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0004`."}]}