{"sha": "83e3c82d63f75d697c3e803b639ce2f90b1721b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTNjODJkNjNmNzVkNjk3YzNlODAzYjYzOWNlMmY5MGIxNzIxYjE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2012-12-10T02:57:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-24T02:56:41Z"}, "message": "libcore: Add range_step and range_rev functions.\n\nCloses #1817", "tree": {"sha": "6fe3be655170550f2b83b4250f5430fbb7e36622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe3be655170550f2b83b4250f5430fbb7e36622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e3c82d63f75d697c3e803b639ce2f90b1721b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e3c82d63f75d697c3e803b639ce2f90b1721b1", "html_url": "https://github.com/rust-lang/rust/commit/83e3c82d63f75d697c3e803b639ce2f90b1721b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e3c82d63f75d697c3e803b639ce2f90b1721b1/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e5d986fa424c00389bd2520ebce7276f58a6e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5d986fa424c00389bd2520ebce7276f58a6e0", "html_url": "https://github.com/rust-lang/rust/commit/e4e5d986fa424c00389bd2520ebce7276f58a6e0"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "8da31a38af6866f8fff0b1373c5afc4fc7446fac", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83e3c82d63f75d697c3e803b639ce2f90b1721b1/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e3c82d63f75d697c3e803b639ce2f90b1721b1/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=83e3c82d63f75d697c3e803b639ce2f90b1721b1", "patch": "@@ -109,14 +109,36 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n  * ~~~\n  */\n #[inline(always)]\n-pub pure fn range(lo: T, hi: T, it: fn(T) -> bool) {\n-    let mut i = lo;\n-    while i < hi {\n-        if !it(i) { break }\n-        i += 1 as T;\n+/// Iterate over the range [`start`,`start`+`step`..`stop`)\n+pub pure fn range_step(start: T, stop: T, step: T, it: fn(T) -> bool) {\n+    let mut i = start;\n+    if step == 0 {\n+        fail ~\"range_step called with step == 0\";\n+    } else if step > 0 { // ascending\n+        while i < stop {\n+            if !it(i) { break }\n+            i += step;\n+        }\n+    } else { // descending\n+        while i > stop {\n+            if !it(i) { break }\n+            i += step;\n+        }\n     }\n }\n \n+#[inline(always)]\n+/// Iterate over the range [`lo`..`hi`)\n+pub pure fn range(lo: T, hi: T, it: fn(T) -> bool) {\n+    range_step(lo, hi, 1 as T, it);\n+}\n+\n+#[inline(always)]\n+/// Iterate over the range [`hi`..`lo`)\n+pub pure fn range_rev(hi: T, lo: T, it: fn(T) -> bool) {\n+    range_step(hi, lo, -1 as T, it);\n+}\n+\n /// Computes the bitwise complement\n #[inline(always)]\n pub pure fn compl(i: T) -> T {"}, {"sha": "b41046addf1809e44fd437ff944d74688881a103", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83e3c82d63f75d697c3e803b639ce2f90b1721b1/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e3c82d63f75d697c3e803b639ce2f90b1721b1/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=83e3c82d63f75d697c3e803b639ce2f90b1721b1", "patch": "@@ -68,14 +68,35 @@ pub pure fn is_nonpositive(x: T) -> bool { x <= 0 as T }\n #[inline(always)]\n pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n \n+#[inline(always)]\n+/// Iterate over the range [`start`,`start`+`step`..`stop`)\n+pub pure fn range_step(start: T, stop: T, step: T, it: fn(T) -> bool) {\n+    let mut i = start;\n+    if step == 0 {\n+        fail ~\"range_step called with step == 0\";\n+    } else if step > 0 { // ascending\n+        while i < stop {\n+            if !it(i) { break }\n+            i += step;\n+        }\n+    } else { // descending\n+        while i > stop {\n+            if !it(i) { break }\n+            i += step;\n+        }\n+    }\n+}\n+\n #[inline(always)]\n /// Iterate over the range [`lo`..`hi`)\n pub pure fn range(lo: T, hi: T, it: fn(T) -> bool) {\n-    let mut i = lo;\n-    while i < hi {\n-        if !it(i) { break }\n-        i += 1 as T;\n-    }\n+    range_step(lo, hi, 1 as T, it);\n+}\n+\n+#[inline(always)]\n+/// Iterate over the range [`hi`..`lo`)\n+pub pure fn range_rev(hi: T, lo: T, it: fn(T) -> bool) {\n+    range_step(hi, lo, -1 as T, it);\n }\n \n /// Computes the bitwise complement"}]}