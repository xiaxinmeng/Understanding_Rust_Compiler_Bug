{"sha": "0265778e86f7e130a921ab6307cfdcc0ad953fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjU3NzhlODZmN2UxMzBhOTIxYWI2MzA3Y2ZkY2MwYWQ5NTNmZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T19:32:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T19:32:20Z"}, "message": "Don't use function signature for Display", "tree": {"sha": "9aab4e60f3f55b783e6b2b105b239115e8fb958d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aab4e60f3f55b783e6b2b105b239115e8fb958d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0265778e86f7e130a921ab6307cfdcc0ad953fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0265778e86f7e130a921ab6307cfdcc0ad953fe0", "html_url": "https://github.com/rust-lang/rust/commit/0265778e86f7e130a921ab6307cfdcc0ad953fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0265778e86f7e130a921ab6307cfdcc0ad953fe0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4759a39f06be1ec1469101a8aac39039b8743806", "url": "https://api.github.com/repos/rust-lang/rust/commits/4759a39f06be1ec1469101a8aac39039b8743806", "html_url": "https://github.com/rust-lang/rust/commit/4759a39f06be1ec1469101a8aac39039b8743806"}], "stats": {"total": 109, "additions": 47, "deletions": 62}, "files": [{"sha": "05e6056701edf46aeef467d6c25ae8823a9a78d6", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=0265778e86f7e130a921ab6307cfdcc0ad953fe0", "patch": "@@ -43,7 +43,7 @@ use crate::{\n     completion::{\n         CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n     },\n-    display::function_signature::FunctionSignature,\n+    display::function_label,\n };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -125,8 +125,6 @@ fn add_function_impl(\n     ctx: &CompletionContext,\n     func: hir::Function,\n ) {\n-    let signature = FunctionSignature::from_hir(ctx.db, func);\n-\n     let fn_name = func.name(ctx.db).to_string();\n \n     let label = if !func.params(ctx.db).is_empty() {\n@@ -146,13 +144,14 @@ fn add_function_impl(\n     };\n     let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n \n+    let function_decl = function_label(&func.source(ctx.db).value);\n     match ctx.config.snippet_cap {\n         Some(cap) => {\n-            let snippet = format!(\"{} {{\\n    $0\\n}}\", signature);\n+            let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n             builder.snippet_edit(cap, TextEdit::replace(range, snippet))\n         }\n         None => {\n-            let header = format!(\"{} {{\", signature);\n+            let header = format!(\"{} {{\", function_decl);\n             builder.text_edit(TextEdit::replace(range, header))\n         }\n     }"}, {"sha": "160f2f319afd263ef9084fcca2960e09dc305e96", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=0265778e86f7e130a921ab6307cfdcc0ad953fe0", "patch": "@@ -11,7 +11,9 @@ use crate::{\n         completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n         CompletionKind, Completions,\n     },\n-    display::{const_label, function_signature::FunctionSignature, macro_label, type_label},\n+    display::{\n+        const_label, function_label, function_signature::FunctionSignature, macro_label, type_label,\n+    },\n     CompletionScore, RootDatabase,\n };\n \n@@ -206,7 +208,7 @@ impl Completions {\n                 })\n                 .set_documentation(func.docs(ctx.db))\n                 .set_deprecated(is_deprecated(func, ctx.db))\n-                .detail(function_signature.to_string());\n+                .detail(function_label(&ast_node));\n \n         let params = function_signature\n             .parameter_names"}, {"sha": "9d413cf0a1b6469cb2ad45f373f5a96d9fee1757", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=0265778e86f7e130a921ab6307cfdcc0ad953fe0", "patch": "@@ -13,10 +13,46 @@ use ra_syntax::{\n pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n \n+use ast::VisibilityOwner;\n pub use navigation_target::NavigationTarget;\n+use stdx::format_to;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n-    function_signature::FunctionSignature::from(node).to_string()\n+    let mut buf = String::new();\n+    if let Some(vis) = node.visibility() {\n+        format_to!(buf, \"{} \", vis);\n+    }\n+    if node.async_token().is_some() {\n+        format_to!(buf, \"async \");\n+    }\n+    if node.const_token().is_some() {\n+        format_to!(buf, \"const \");\n+    }\n+    if node.unsafe_token().is_some() {\n+        format_to!(buf, \"unsafe \");\n+    }\n+    if let Some(abi) = node.abi() {\n+        // Keyword `extern` is included in the string.\n+        format_to!(buf, \"{} \", abi);\n+    }\n+    if let Some(name) = node.name() {\n+        format_to!(buf, \"fn {}\", name)\n+    }\n+    if let Some(type_params) = node.type_param_list() {\n+        format_to!(buf, \"{}\", type_params);\n+    }\n+    if let Some(param_list) = node.param_list() {\n+        format_to!(buf, \"{}\", param_list);\n+    }\n+    if let Some(ret_type) = node.ret_type() {\n+        if ret_type.type_ref().is_some() {\n+            format_to!(buf, \" {}\", ret_type);\n+        }\n+    }\n+    if let Some(where_clause) = node.where_clause() {\n+        format_to!(buf, \"\\n{}\", where_clause);\n+    }\n+    buf\n }\n \n pub(crate) fn const_label(node: &ast::ConstDef) -> String {"}, {"sha": "77551117b57cd1a193b3816681cc82969c29770d", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0265778e86f7e130a921ab6307cfdcc0ad953fe0/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=0265778e86f7e130a921ab6307cfdcc0ad953fe0", "patch": "@@ -2,15 +2,12 @@\n \n // FIXME: this modules relies on strings and AST way too much, and it should be\n // rewritten (matklad 2020-05-07)\n-use std::{\n-    convert::From,\n-    fmt::{self, Display},\n-};\n+use std::convert::From;\n \n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-use stdx::{split_delim, SepBy};\n+use stdx::split_delim;\n \n use crate::display::{generic_parameters, where_predicates};\n \n@@ -247,52 +244,3 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n         }\n     }\n }\n-\n-impl Display for FunctionSignature {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        if let Some(t) = &self.visibility {\n-            write!(f, \"{} \", t)?;\n-        }\n-\n-        if self.qualifier.is_async {\n-            write!(f, \"async \")?;\n-        }\n-\n-        if self.qualifier.is_const {\n-            write!(f, \"const \")?;\n-        }\n-\n-        if self.qualifier.is_unsafe {\n-            write!(f, \"unsafe \")?;\n-        }\n-\n-        if let Some(extern_abi) = &self.qualifier.extern_abi {\n-            // Keyword `extern` is included in the string.\n-            write!(f, \"{} \", extern_abi)?;\n-        }\n-\n-        if let Some(name) = &self.name {\n-            match self.kind {\n-                CallableKind::Function => write!(f, \"fn {}\", name)?,\n-                CallableKind::StructConstructor => write!(f, \"struct {}\", name)?,\n-                CallableKind::VariantConstructor => write!(f, \"{}\", name)?,\n-            }\n-        }\n-\n-        if !self.generic_parameters.is_empty() {\n-            write!(f, \"{}\", self.generic_parameters.iter().sep_by(\", \").surround_with(\"<\", \">\"))?;\n-        }\n-\n-        write!(f, \"{}\", self.parameters.iter().sep_by(\", \").surround_with(\"(\", \")\"))?;\n-\n-        if let Some(t) = &self.ret_type {\n-            write!(f, \" -> {}\", t)?;\n-        }\n-\n-        if !self.where_predicates.is_empty() {\n-            write!(f, \"\\nwhere {}\", self.where_predicates.iter().sep_by(\",\\n      \"))?;\n-        }\n-\n-        Ok(())\n-    }\n-}"}]}