{"sha": "1930c77de179e68e5594d86e116726a67c620658", "node_id": "C_kwDOAAsO6NoAKDE5MzBjNzdkZTE3OWU2OGU1NTk0ZDg2ZTExNjcyNmE2N2M2MjA2NTg", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T20:06:56Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-24T12:02:55Z"}, "message": "Remove normalize_projection_type", "tree": {"sha": "fe3194f8419a8a246979594affc4044230b29832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3194f8419a8a246979594affc4044230b29832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1930c77de179e68e5594d86e116726a67c620658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN/XW8ACgkQgTGiTgx5\n769cvxAAsSsFyYbzausBIpkuNLyqAI/STuMyBXyaOsjB5rIi3b+A1DyuKmmDOnVg\nOJ5UE6gRod7/hHiqLW0eLXjMDDaqyaBUOBGjJrCLfIgxjcL/j3JS03CU48kdZ9ls\nmrPMzsatIt39nENLvvOdWTc9XhMkV/TMKxWgQeLWId5/+3NIsJ1wVGk5a3YY3tbU\ngX34WrbtC5aE8f4LPpxEeU7ZWnV+KWsyiPCeO5DLariG8cNs3q2/TbMkJVF5gsNk\nkYsS+PFg2BpmgGWiSezA7q1hKoqdEv8+SC2IGyODM0iApbYisek7Dmmx7LsZN4HJ\nIN50kAgnuFks0ssVILyxIqD+2NLFw+UaNZwofi0kfIshk3fBQK2JWIe2d0ihNVtE\np85xYME1u7fn2hcdgmUBJqKibXfo6jElPeLtXH3lJ/fioRmQX5N/yYRWJPvoNuUe\n/IC4B/zzffxFwX43tYu+bdYyuQUv7vZP9czTi3lg2B05VGbi7Z2v2uXihvwx7Vf5\nREvKOR+ZnGSIxmRw1BMW2B2JjnjJLAgzyWby9YyQih/47KRj/3pcIBi/YGg1mYYX\nsbLjUBAZSrQmAbNqeBrWycFy+1/pwaDKWQ2vMdRPE+YYP8rQrxDlV925DB9ezjHX\nrFNljsoBZImx5IgiGFIqrcFT6qaHf5GZmzd1n2JME1tE5Qm04P0=\n=v73O\n-----END PGP SIGNATURE-----", "payload": "tree fe3194f8419a8a246979594affc4044230b29832\nparent 3f2b2eee8f46f2252d2919d7a57bf3068d7df285\nauthor Santiago Pastorino <spastorino@gmail.com> 1669234016 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669291375 -0300\n\nRemove normalize_projection_type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1930c77de179e68e5594d86e116726a67c620658", "html_url": "https://github.com/rust-lang/rust/commit/1930c77de179e68e5594d86e116726a67c620658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1930c77de179e68e5594d86e116726a67c620658/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "html_url": "https://github.com/rust-lang/rust/commit/3f2b2eee8f46f2252d2919d7a57bf3068d7df285"}], "stats": {"total": 81, "additions": 13, "deletions": 68}, "files": [{"sha": "d3519f4b37b8287b254efd802ae4edeaa3b174e5", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=1930c77de179e68e5594d86e116726a67c620658", "patch": "@@ -8,14 +8,6 @@ use super::FulfillmentError;\n use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx>;\n-\n     /// Requires that `ty` must implement the trait with `def_id` in\n     /// the given environment. This trait must not have any type\n     /// parameters (except for `Self`)."}, {"sha": "1102f44a82efe2431b9af221cb36d5b3a0be2a29", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=1930c77de179e68e5594d86e116726a67c620658", "patch": "@@ -1,4 +1,5 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n+use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n@@ -137,16 +138,14 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n-        let normalized_ty = fulfillcx.normalize_projection_type(\n-            &self.infcx,\n-            self.param_env,\n-            ty::ProjectionTy {\n-                item_def_id: tcx.lang_items().deref_target()?,\n-                substs: trait_ref.substs,\n-            },\n+        let normalized_ty = self.infcx.partially_normalize_associated_types_in(\n             cause,\n+            self.param_env,\n+            tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs),\n         );\n+        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n+        let normalized_ty =\n+            normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);\n         let errors = fulfillcx.select_where_possible(&self.infcx);\n         if !errors.is_empty() {\n             // This shouldn't happen, except for evaluate/fulfill mismatches,"}, {"sha": "e88950523537f23ba2494ba122e1a9e10447c120", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=1930c77de179e68e5594d86e116726a67c620658", "patch": "@@ -4,11 +4,11 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::query::NoSolution;\n use crate::traits::{\n-    ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, ObligationCause,\n-    PredicateObligation, SelectionError, TraitEngine,\n+    ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n+    SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, TypeVisitable};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n@@ -33,16 +33,6 @@ impl FulfillmentContext<'_> {\n }\n \n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        _param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        _cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx> {\n-        infcx.tcx.mk_ty(ty::Projection(projection_ty))\n-    }\n-\n     fn register_predicate_obligation(\n         &mut self,\n         infcx: &InferCtxt<'tcx>,"}, {"sha": "e7513255dc40193e4e352aeef1066c68acd95950", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1930c77de179e68e5594d86e116726a67c620658/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=1930c77de179e68e5594d86e116726a67c620658", "patch": "@@ -4,12 +4,12 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_infer::traits::ProjectionCacheKey;\n-use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_infer::traits::{SelectionError, TraitEngine, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Binder, Const, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Binder, Const, TypeVisitable};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;\n@@ -20,9 +20,9 @@ use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n use super::EvaluationResult;\n+use super::PredicateObligation;\n use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n-use super::{ObligationCause, PredicateObligation};\n \n use crate::traits::project::PolyProjectionObligation;\n use crate::traits::project::ProjectionCacheKeyExt as _;\n@@ -126,42 +126,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n }\n \n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n-    /// \"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\n-    /// creating a fresh type variable `$0` as well as a projection\n-    /// predicate `<SomeType as SomeTrait>::X == $0`. When the\n-    /// inference engine runs, it will attempt to find an impl of\n-    /// `SomeTrait` or a where-clause that lets us unify `$0` with\n-    /// something concrete. If this fails, we'll unify `$0` with\n-    /// `projection_ty` again.\n-    #[instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx> {\n-        debug_assert!(!projection_ty.has_escaping_bound_vars());\n-\n-        // FIXME(#20304) -- cache\n-\n-        let mut selcx = SelectionContext::new(infcx);\n-        let mut obligations = vec![];\n-        let normalized_ty = project::normalize_projection_type(\n-            &mut selcx,\n-            param_env,\n-            projection_ty,\n-            cause,\n-            0,\n-            &mut obligations,\n-        );\n-        self.register_predicate_obligations(infcx, obligations);\n-\n-        debug!(?normalized_ty);\n-\n-        normalized_ty.ty().unwrap()\n-    }\n-\n     fn register_predicate_obligation(\n         &mut self,\n         infcx: &InferCtxt<'tcx>,"}]}