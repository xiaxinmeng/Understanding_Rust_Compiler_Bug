{"sha": "120ef3630751e0329f0f0a41a36b17958b720b6e", "node_id": "C_kwDOAAsO6NoAKDEyMGVmMzYzMDc1MWUwMzI5ZjBmMGE0MWEzNmIxNzk1OGI3MjBiNmU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T16:57:33Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T16:57:33Z"}, "message": "rustdoc: Use `ty::ImplPolarity` instead of custom enum", "tree": {"sha": "8ba99950e1c90a0a02e5cd5d4f78dcfc6756c5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ba99950e1c90a0a02e5cd5d4f78dcfc6756c5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120ef3630751e0329f0f0a41a36b17958b720b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120ef3630751e0329f0f0a41a36b17958b720b6e", "html_url": "https://github.com/rust-lang/rust/commit/120ef3630751e0329f0f0a41a36b17958b720b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120ef3630751e0329f0f0a41a36b17958b720b6e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543aea6c03fde24aa35f2bfbff7915868d074bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/543aea6c03fde24aa35f2bfbff7915868d074bca", "html_url": "https://github.com/rust-lang/rust/commit/543aea6c03fde24aa35f2bfbff7915868d074bca"}], "stats": {"total": 51, "additions": 17, "deletions": 34}, "files": [{"sha": "2ccf17387d1c701febec22a676ea264bd07bb845", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -79,14 +79,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let polarity;\n         let new_generics = match result {\n             AutoTraitResult::PositiveImpl(new_generics) => {\n-                polarity = ImplPolarity::Positive;\n+                polarity = ty::ImplPolarity::Positive;\n                 if discard_positive_impl {\n                     return None;\n                 }\n                 new_generics\n             }\n             AutoTraitResult::NegativeImpl => {\n-                polarity = ImplPolarity::Negative;\n+                polarity = ty::ImplPolarity::Negative;\n \n                 // For negative impls, we use the generic params, but *not* the predicates,\n                 // from the original type. Otherwise, the displayed impl appears to be a"}, {"sha": "433094e4ee4ba80f417016352775eb36e396852c", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .in_definition_order()\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n-                        polarity: ImplPolarity::Positive,\n+                        polarity: ty::ImplPolarity::Positive,\n                         kind: ImplKind::Blanket(box trait_ref.self_ty().clean(self.cx)),\n                     }),\n                     cfg: None,"}, {"sha": "940fd3d87effb6e636ceeef4ce59473353b578bb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -497,7 +497,7 @@ crate fn build_impl(\n             trait_,\n             for_,\n             items: trait_items,\n-            polarity: polarity.clean(cx),\n+            polarity,\n             kind: ImplKind::Normal,\n         }),\n         box merged_attrs,"}, {"sha": "a1653cdf622fffaba77e50eaef9848314c9f2572", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -1856,18 +1856,6 @@ impl Clean<Item> for hir::Variant<'_> {\n     }\n }\n \n-impl Clean<ImplPolarity> for ty::ImplPolarity {\n-    /// Returns whether the impl has negative polarity.\n-    fn clean(&self, _: &mut DocContext<'_>) -> ImplPolarity {\n-        match self {\n-            ty::ImplPolarity::Positive |\n-            // FIXME: do we want to do something else here?\n-            ty::ImplPolarity::Reservation => ImplPolarity::Positive,\n-            ty::ImplPolarity::Negative => ImplPolarity::Negative,\n-        }\n-    }\n-}\n-\n fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>) -> Vec<Item> {\n     let tcx = cx.tcx;\n     let mut ret = Vec::new();\n@@ -1894,7 +1882,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n             trait_,\n             for_,\n             items,\n-            polarity: tcx.impl_polarity(def_id).clean(cx),\n+            polarity: tcx.impl_polarity(def_id),\n             kind: ImplKind::Normal,\n         });\n         Item::from_hir_id_and_parts(hir_id, None, kind, cx)"}, {"sha": "ee6cb292cbebeffa164a6733f93539c67d2d9f6f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -2177,7 +2177,7 @@ crate struct Impl {\n     crate trait_: Option<Path>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n-    crate polarity: ImplPolarity,\n+    crate polarity: ty::ImplPolarity,\n     crate kind: ImplKind,\n }\n \n@@ -2227,13 +2227,6 @@ impl ImplKind {\n     }\n }\n \n-// FIXME: remove this and use ty::ImplPolarity instead\n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n-crate enum ImplPolarity {\n-    Positive,\n-    Negative,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Import {\n     crate kind: ImportKind,"}, {"sha": "a56fcfefb21aef5382befefa9167c872e2fe083d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::ty;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n@@ -991,8 +992,8 @@ impl clean::Impl {\n \n             if let Some(ref ty) = self.trait_ {\n                 match self.polarity {\n-                    clean::ImplPolarity::Positive => {}\n-                    clean::ImplPolarity::Negative => write!(f, \"!\")?,\n+                    ty::ImplPolarity::Positive | ty::ImplPolarity::Reservation => {}\n+                    ty::ImplPolarity::Negative => write!(f, \"!\")?,\n                 }\n                 fmt::Display::fmt(&ty.print(cx), f)?;\n                 write!(f, \" for \")?;"}, {"sha": "841943a79898ecef8c2e21ac89036c5b08014ed2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -34,8 +34,8 @@ mod span_map;\n mod templates;\n mod write_shared;\n \n-crate use context::*;\n-crate use span_map::{collect_spans_and_sources, LinkFromSrc};\n+crate use self::context::*;\n+crate use self::span_map::{collect_spans_and_sources, LinkFromSrc};\n \n use std::collections::VecDeque;\n use std::default::Default;\n@@ -54,6 +54,7 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::{\n     symbol::{kw, sym, Symbol},\n@@ -2034,8 +2035,8 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                             let out = Escape(&i_display);\n                             let encoded = small_url_encode(format!(\"{:#}\", i.print(cx)));\n                             let prefix = match it.inner_impl().polarity {\n-                                clean::ImplPolarity::Positive => \"\",\n-                                clean::ImplPolarity::Negative => \"!\",\n+                                ty::ImplPolarity::Positive | ty::ImplPolarity::Reservation => \"\",\n+                                ty::ImplPolarity::Negative => \"!\",\n                             };\n                             let generated =\n                                 format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\", encoded, prefix, out);"}, {"sha": "a46518ef489aa1b3bc1a53d38ad358800826b1ce", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ef3630751e0329f0f0a41a36b17958b720b6e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=120ef3630751e0329f0f0a41a36b17958b720b6e", "patch": "@@ -9,7 +9,7 @@ use std::fmt;\n \n use rustc_ast::ast;\n use rustc_hir::{def::CtorKind, def_id::DefId};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::Pos;\n \n@@ -513,8 +513,8 @@ impl FromWithTcx<clean::Impl> for Impl {\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };\n         let negative_polarity = match polarity {\n-            clean::ImplPolarity::Positive => false,\n-            clean::ImplPolarity::Negative => true,\n+            ty::ImplPolarity::Positive | ty::ImplPolarity::Reservation => false,\n+            ty::ImplPolarity::Negative => true,\n         };\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,"}]}