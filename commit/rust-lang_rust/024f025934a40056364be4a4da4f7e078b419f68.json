{"sha": "024f025934a40056364be4a4da4f7e078b419f68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNGYwMjU5MzRhNDAwNTYzNjRiZTRhNGRhNGY3ZTA3OGI0MTlmNjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-10T09:03:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-10T09:03:43Z"}, "message": "Rollup merge of #73005 - Aaron1011:fix/error-overflow, r=estebank\n\nDon't create impl candidates when obligation contains errors\n\nFixes #72839\n\nIn PR #72621, trait selection was modified to no longer bail out early\nwhen an error type was encountered. This allowed us treat `ty::Error` as\n`Sized`, causing us to avoid emitting a spurious \"not sized\" error after\na type error had already occured.\n\nHowever, this means that we may now try to match an impl candidate\nagainst the error type. Since the error type will unify with almost\nanything, this can cause us to infinitely recurse (eventually triggering\nan overflow) when trying to verify certain `where` clauses.\n\nThis commit causes us to skip generating any impl candidates when an\nerror type is involved.", "tree": {"sha": "e8b0453ef74fcbc918fca69305a3020dab35b90e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b0453ef74fcbc918fca69305a3020dab35b90e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/024f025934a40056364be4a4da4f7e078b419f68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4KHwCRBK7hj4Ov3rIwAAdHIIAHFN2wm1PDkmShy4PIV53Ld8\nKQfvEcCEmyWPLloCwPx8r1iLdWymEK6lCukiKMa9VuKJmuctEhSdZcLS0uuuPgNQ\nOsYKi7FluOEDeD1d2ZjPXxLZzz6TC6VQoePVITJEKajbeo0n/MWQ6vBTgnIITJxc\nJmYudGXY7bX+gh8ftNBdxIOgk7BX37lo84I011aunEn9NB2BIVRa1XXSXk0+01Ri\nV691X1ZxwQadMcAZaotSE66aDtAxkuMQDMroMOLRR7ROjpmbOap4JLZI1oXhSelN\nEj+hZAsfz16TR243p94COCzlib3K2/tBNv2mp7o69iPxqzS0+Ug8DTD7qB+oLGQ=\n=UTz7\n-----END PGP SIGNATURE-----\n", "payload": "tree e8b0453ef74fcbc918fca69305a3020dab35b90e\nparent 8addb2e684dfbe0cd2e16a769485a093f9b2de32\nparent ae42c91c6517517e831b12e0f4a98d538b4a19b5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591779823 +0200\ncommitter GitHub <noreply@github.com> 1591779823 +0200\n\nRollup merge of #73005 - Aaron1011:fix/error-overflow, r=estebank\n\nDon't create impl candidates when obligation contains errors\n\nFixes #72839\n\nIn PR #72621, trait selection was modified to no longer bail out early\nwhen an error type was encountered. This allowed us treat `ty::Error` as\n`Sized`, causing us to avoid emitting a spurious \"not sized\" error after\na type error had already occured.\n\nHowever, this means that we may now try to match an impl candidate\nagainst the error type. Since the error type will unify with almost\nanything, this can cause us to infinitely recurse (eventually triggering\nan overflow) when trying to verify certain `where` clauses.\n\nThis commit causes us to skip generating any impl candidates when an\nerror type is involved.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/024f025934a40056364be4a4da4f7e078b419f68", "html_url": "https://github.com/rust-lang/rust/commit/024f025934a40056364be4a4da4f7e078b419f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/024f025934a40056364be4a4da4f7e078b419f68/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8addb2e684dfbe0cd2e16a769485a093f9b2de32", "url": "https://api.github.com/repos/rust-lang/rust/commits/8addb2e684dfbe0cd2e16a769485a093f9b2de32", "html_url": "https://github.com/rust-lang/rust/commit/8addb2e684dfbe0cd2e16a769485a093f9b2de32"}, {"sha": "ae42c91c6517517e831b12e0f4a98d538b4a19b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae42c91c6517517e831b12e0f4a98d538b4a19b5", "html_url": "https://github.com/rust-lang/rust/commit/ae42c91c6517517e831b12e0f4a98d538b4a19b5"}], "stats": {"total": 236, "additions": 55, "deletions": 181}, "files": [{"sha": "9045451056b1991d40965a24b3f7251bc48e09c3", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -331,6 +331,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<(), SelectionError<'tcx>> {\n         debug!(\"assemble_candidates_from_impls(obligation={:?})\", obligation);\n \n+        // Essentially any user-written impl will match with an error type,\n+        // so creating `ImplCandidates` isn't useful. However, we might\n+        // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)\n+        // This helps us avoid overflow: see issue #72839\n+        // Since compilation is already guaranteed to fail, this is just\n+        // to try to show the 'nicest' possible errors to the user.\n+        if obligation.references_error() {\n+            return Ok(());\n+        }\n+\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),"}, {"sha": "7ebf30f61c0956f0a981f4ccdadd4f21607b199e", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -1104,6 +1104,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // who might care about this case, like coherence, should use\n         // that function).\n         if candidates.is_empty() {\n+            // If there's an error type, 'downgrade' our result from\n+            // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid\n+            // emitting additional spurious errors, since we're guaranteed\n+            // to have emitted at least one.\n+            if stack.obligation.references_error() {\n+                debug!(\"no results for error type, treating as ambiguous\");\n+                return Ok(None);\n+            }\n             return Err(Unimplemented);\n         }\n "}, {"sha": "087f4582b21c3b3db46753486e2e479980b3444e", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -11,8 +11,6 @@ fn main() {\n // return type, which can't depend on the obligation.\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n-    //~| ERROR cycle detected\n     send(cycle2().clone());\n     //~^ ERROR cannot be sent between threads safely\n "}, {"sha": "679b26efe5933c7f4e11fc97abef838e0a80436d", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 9, "deletions": 179, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -36,37 +36,37 @@ LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires computing type of `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:22:16\n+  --> $DIR/auto-trait-leak.rs:20:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n+  --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,178 +84,8 @@ LL | |     Rc::new(String::from(\"foo\"))\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:12:16\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   |                ^^^^^^^^^^\n-   |\n-note: ...which requires borrow-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires computing type of `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:22:16\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   |                ^^^^^^^^^^\n-note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `cycle1::{{opaque}}#0`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:1:1\n-   |\n-LL | / use std::cell::Cell;\n-LL | | use std::rc::Rc;\n-LL | |\n-LL | | fn send<T: Send>(_: T) {}\n-...  |\n-LL | |     Rc::new(String::from(\"foo\"))\n-LL | | }\n-   | |_^\n-\n-error[E0391]: cycle detected when computing type of `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:12:16\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   |                ^^^^^^^^^^\n-   |\n-note: ...which requires borrow-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires computing type of `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:22:16\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   |                ^^^^^^^^^^\n-note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:22:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `cycle1::{{opaque}}#0`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:1:1\n-   |\n-LL | / use std::cell::Cell;\n-LL | | use std::rc::Rc;\n-LL | |\n-LL | | fn send<T: Send>(_: T) {}\n-...  |\n-LL | |     Rc::new(String::from(\"foo\"))\n-LL | | }\n-   | |_^\n-\n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:16:5\n+  --> $DIR/auto-trait-leak.rs:14:5\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ---- required by this bound in `send`\n@@ -269,7 +99,7 @@ LL | fn cycle2() -> impl Clone {\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0391.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "6562d228409f3be683fec286d726c5a6b2303f5c", "filename": "src/test/ui/issues/issue-72839-error-overflow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #72839\n+// Tests that we do not overflow during trait selection after\n+// a type error occurs\n+use std::ops::Rem;\n+trait Foo {}\n+struct MyStruct<T>(T);\n+\n+impl<T, U> Rem<MyStruct<T>> for MyStruct<U> where MyStruct<U>: Rem<MyStruct<T>> {\n+    type Output = u8;\n+    fn rem(self, _: MyStruct<T>) -> Self::Output {\n+        panic!()\n+    }\n+}\n+\n+fn main() {}\n+\n+fn foo() {\n+    if missing_var % 8 == 0 {} //~ ERROR cannot find\n+}"}, {"sha": "c4b6f90ca69a31725c34944fdee670e82fb21514", "filename": "src/test/ui/issues/issue-72839-error-overflow.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/024f025934a40056364be4a4da4f7e078b419f68/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr?ref=024f025934a40056364be4a4da4f7e078b419f68", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `missing_var` in this scope\n+  --> $DIR/issue-72839-error-overflow.rs:18:8\n+   |\n+LL |     if missing_var % 8 == 0 {}\n+   |        ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}