{"sha": "b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NTlkYTJmNGNkMmNmOGY0YjE3MDM2OTM1NWZlNzMyOWNmNWE5Yzk=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-02-06T10:22:25Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-02-11T09:50:26Z"}, "message": "Fix stage2 test failures from call to span_lint.\n\nspan_lint was removed. Callers should use the `lint` method now, and\ncall `set_span` within the closure passed to this method.", "tree": {"sha": "917a843d65beb5fb08d1685b60d4efbf6f55ec4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/917a843d65beb5fb08d1685b60d4efbf6f55ec4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "html_url": "https://github.com/rust-lang/rust/commit/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45099619334bbf4413b40ff07a100ce72ace96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45099619334bbf4413b40ff07a100ce72ace96a", "html_url": "https://github.com/rust-lang/rust/commit/e45099619334bbf4413b40ff07a100ce72ace96a"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "91b3372e8f41516815f430cb43f32db385c0107f", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -4,17 +4,19 @@\n extern crate rustc_ast_pretty;\n extern crate rustc_driver;\n extern crate rustc_hir;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n extern crate rustc_span;\n extern crate syntax;\n \n use rustc_ast_pretty::pprust;\n-use rustc_hir::intravisit;\n+use rustc_driver::plugin::Registry;\n use rustc_hir as hir;\n+use rustc_hir::intravisit;\n use rustc_hir::Node;\n-use rustc_lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n-use rustc_driver::plugin::Registry;\n+use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc_span::source_map;\n \n #[plugin_registrar]\n@@ -32,23 +34,25 @@ declare_lint! {\n declare_lint_pass!(MissingWhitelistedAttrPass => [MISSING_WHITELISTED_ATTR]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n-    fn check_fn(&mut self,\n-                cx: &LateContext<'a, 'tcx>,\n-                _: intravisit::FnKind<'tcx>,\n-                _: &'tcx hir::FnDecl,\n-                _: &'tcx hir::Body,\n-                span: source_map::Span,\n-                id: hir::HirId) {\n-\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: intravisit::FnKind<'tcx>,\n+        _: &'tcx hir::FnDecl,\n+        _: &'tcx hir::Body,\n+        span: source_map::Span,\n+        id: hir::HirId,\n+    ) {\n         let item = match cx.tcx.hir().get(id) {\n             Node::Item(item) => item,\n             _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };\n \n         let whitelisted = |attr| pprust::attribute_to_string(attr).contains(\"whitelisted_attr\");\n         if !item.attrs.iter().any(whitelisted) {\n-            cx.span_lint(MISSING_WHITELISTED_ATTR, span,\n-                         \"Missing 'whitelisted_attr' attribute\");\n+            cx.lint(MISSING_WHITELISTED_ATTR, |lint| {\n+                lint.build(\"Missing 'whitelisted_attr' attribute\").set_span(span).emit()\n+            });\n         }\n     }\n }"}, {"sha": "eb251a0a3adb8bdaf594e55eeeac0f82f9fcd4be", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -5,12 +5,14 @@\n extern crate rustc_driver;\n extern crate rustc_hir;\n extern crate rustc_span;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n extern crate syntax;\n \n-use rustc_lint::{LateContext, LintContext, LintPass, LateLintPass};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n use syntax::attr;\n \n@@ -28,8 +30,10 @@ macro_rules! fake_lint_pass {\n             fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n                 $(\n                     if !attr::contains_name(&krate.attrs, $attr) {\n-                        cx.span_lint(CRATE_NOT_OKAY, krate.span,\n-                                     &format!(\"crate is not marked with #![{}]\", $attr));\n+                        cx.lint(CRATE_NOT_OKAY, |lint| {\n+                             let msg = format!(\"crate is not marked with #![{}]\", $attr);\n+                             lint.build(&msg).set_span(krate.span).emit()\n+                        });\n                     }\n                 )*\n             }"}, {"sha": "e5f4bf88d57aad260a40828f5e4454ef97996ae4", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -5,13 +5,15 @@\n \n extern crate rustc_driver;\n extern crate rustc_hir;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n extern crate rustc_span;\n extern crate syntax;\n \n-use rustc_lint::{LateContext, LintContext, LintPass, LateLintPass, LintArray};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n use syntax::attr;\n \n@@ -26,8 +28,11 @@ declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n         if !attr::contains_name(&krate.attrs, Symbol::intern(\"crate_okay\")) {\n-            cx.span_lint(CRATE_NOT_OKAY, krate.span,\n-                         \"crate is not marked with #![crate_okay]\");\n+            cx.lint(CRATE_NOT_OKAY, |lint| {\n+                lint.build(\"crate is not marked with #![crate_okay]\")\n+                    .set_span(krate.span)\n+                    .emit()\n+            });\n         }\n     }\n }"}, {"sha": "5a8eaa63db2f86f72592242f4aa4422ce50a6dbe", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -6,11 +6,13 @@\n // Load rustc as a plugin to get macros.\n extern crate rustc_driver;\n extern crate rustc_hir;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n \n-use rustc_lint::{LateContext, LintContext, LintPass, LateLintPass, LintArray, LintId};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintId, LintPass};\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n@@ -21,8 +23,12 @@ declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n         match &*it.ident.as_str() {\n-            \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n-            \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n+            \"lintme\" => cx.lint(TEST_LINT, |lint| {\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+            }),\n+            \"pleaselintme\" => cx.lint(PLEASE_LINT, |lint| {\n+                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit()\n+            }),\n             _ => {}\n         }\n     }\n@@ -32,6 +38,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_LINT, &PLEASE_LINT]);\n     reg.lint_store.register_late_pass(|| box Pass);\n-    reg.lint_store.register_group(true, \"lint_me\", None,\n-        vec![LintId::of(&TEST_LINT), LintId::of(&PLEASE_LINT)]);\n+    reg.lint_store.register_group(\n+        true,\n+        \"lint_me\",\n+        None,\n+        vec![LintId::of(&TEST_LINT), LintId::of(&PLEASE_LINT)],\n+    );\n }"}, {"sha": "ad5f882c4343408f8d8486783b247702e3165fa1", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -7,11 +7,13 @@ extern crate syntax;\n \n // Load rustc as a plugin to get macros\n extern crate rustc_driver;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n \n-use rustc_lint::{EarlyContext, LintContext, LintPass, EarlyLintPass, LintArray};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n@@ -20,7 +22,9 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+            cx.lint(TEST_LINT, |lint| {\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+            });\n         }\n     }\n }"}, {"sha": "b14dbdf8f938b5443e793a41b80695cdda19f387", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959da2f4cd2cf8f4b170369355fe7329cf5a9c9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=b959da2f4cd2cf8f4b170369355fe7329cf5a9c9", "patch": "@@ -5,11 +5,13 @@ extern crate syntax;\n \n // Load rustc as a plugin to get macros\n extern crate rustc_driver;\n-#[macro_use] extern crate rustc_lint;\n-#[macro_use] extern crate rustc_session;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n \n-use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass, LintId};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintId, LintPass};\n use syntax::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n declare_tool_lint!(\n@@ -30,10 +32,14 @@ declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP, TEST_RUSTC_TOOL_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+            cx.lint(TEST_LINT, |lint| {\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+            });\n         }\n         if it.ident.name.as_str() == \"lintmetoo\" {\n-            cx.span_lint(TEST_GROUP, it.span, \"item is named 'lintmetoo'\");\n+            cx.lint(TEST_GROUP, |lint| {\n+                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit()\n+            });\n         }\n     }\n }\n@@ -42,6 +48,10 @@ impl EarlyLintPass for Pass {\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_RUSTC_TOOL_LINT, &TEST_LINT, &TEST_GROUP]);\n     reg.lint_store.register_early_pass(|| box Pass);\n-    reg.lint_store.register_group(true, \"clippy::group\", Some(\"clippy_group\"),\n-        vec![LintId::of(&TEST_LINT), LintId::of(&TEST_GROUP)]);\n+    reg.lint_store.register_group(\n+        true,\n+        \"clippy::group\",\n+        Some(\"clippy_group\"),\n+        vec![LintId::of(&TEST_LINT), LintId::of(&TEST_GROUP)],\n+    );\n }"}]}