{"sha": "773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3M2EwYTJlZGI5YTc5NzMzYWNhOWYwN2YxZmE4ZDdkMTU1YzRhYmM=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-15T20:10:37Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-15T23:33:23Z"}, "message": "Add start functions, switch allocation crate to ralloc", "tree": {"sha": "fff31001bfc5d96d04ebea5367d157a5738c2f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff31001bfc5d96d04ebea5367d157a5738c2f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "html_url": "https://github.com/rust-lang/rust/commit/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7543a16ec6450b8fe0c3d50bc341b5f143cc54", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7543a16ec6450b8fe0c3d50bc341b5f143cc54", "html_url": "https://github.com/rust-lang/rust/commit/3e7543a16ec6450b8fe0c3d50bc341b5f143cc54"}], "stats": {"total": 90, "additions": 85, "deletions": 5}, "files": [{"sha": "fc4c68276b65197c3c9d20efb50e1a8ed064c1ec", "filename": "src/librustc_back/target/redox_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs?ref=773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "patch": "@@ -40,8 +40,8 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"redox\".to_string()),\n         linker_is_gnu: true,\n         no_default_libraries: true,\n-        lib_allocation_crate: \"alloc_system\".to_string(),\n-        exe_allocation_crate: \"alloc_system\".to_string(),\n+        lib_allocation_crate: \"ralloc\".to_string(),\n+        exe_allocation_crate: \"ralloc\".to_string(),\n         has_elf_tls: true,\n         panic_strategy: PanicStrategy::Abort,\n         .. Default::default()"}, {"sha": "6a1bb1268d7157703e8e2d5aaf97be220464e935", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "patch": "@@ -423,6 +423,11 @@ pub use core_collections::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::char;\n \n+// Reexport the start module on platforms that provide it\n+#[unstable(feature = \"start_fn\", issue=\"0\")]\n+#[cfg(target_os = \"redox\")]\n+pub use sys::start::*;\n+\n pub mod f32;\n pub mod f64;\n "}, {"sha": "87f58a4773c4d0d25e9577d15e5c00e2a70d82b5", "filename": "src/libstd/sys/redox/start.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibstd%2Fsys%2Fredox%2Fstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773a0a2edb9a79733aca9f07f1fa8d7d155c4abc/src%2Flibstd%2Fsys%2Fredox%2Fstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstart.rs?ref=773a0a2edb9a79733aca9f07f1fa8d7d155c4abc", "patch": "@@ -1,6 +1,6 @@\n use sys::syscall::exit;\n \n-#[allow(private_no_mangle_fns)]\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n #[no_mangle]\n #[naked]\n #[cfg(target_arch = \"x86\")]\n@@ -15,7 +15,7 @@ pub unsafe fn _start() {\n     let _ = exit(0);\n }\n \n-#[allow(private_no_mangle_fns)]\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n #[no_mangle]\n #[naked]\n #[cfg(target_arch = \"x86_64\")]\n@@ -30,7 +30,7 @@ pub unsafe fn _start() {\n     let _ = exit(0);\n }\n \n-#[allow(private_no_mangle_fns)]\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern \"C\" fn _start_stack(stack: *const usize){\n     extern \"C\" {\n@@ -41,3 +41,78 @@ pub unsafe extern \"C\" fn _start_stack(stack: *const usize){\n     let argv = stack.offset(1) as *const *const u8;\n     let _ = exit(main(argc, argv));\n }\n+\n+/// Memcpy\n+///\n+/// Copy N bytes of memory from one location to another.\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[no_mangle]\n+pub unsafe extern fn memcpy(dest: *mut u8, src: *const u8,\n+                            n: usize) -> *mut u8 {\n+    let mut i = 0;\n+    while i < n {\n+        *((dest as usize + i) as *mut u8) = *((src as usize + i) as *const u8);\n+        i += 1;\n+    }\n+\n+    dest\n+}\n+\n+/// Memmove\n+///\n+/// Copy N bytes of memory from src to dest. The memory areas may overlap.\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[no_mangle]\n+pub unsafe extern fn memmove(dest: *mut u8, src: *const u8,\n+                             n: usize) -> *mut u8 {\n+    if src < dest as *const u8 {\n+        let mut i = n;\n+        while i != 0 {\n+            i -= 1;\n+            *((dest as usize + i) as *mut u8) = *((src as usize + i) as *const u8);\n+        }\n+    } else {\n+        let mut i = 0;\n+        while i < n {\n+            *((dest as usize + i) as *mut u8) = *((src as usize + i) as *const u8);\n+            i += 1;\n+        }\n+    }\n+\n+    dest\n+}\n+\n+/// Memset\n+///\n+/// Fill a block of memory with a specified value.\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[no_mangle]\n+pub unsafe extern fn memset(dest: *mut u8, c: i32, n: usize) -> *mut u8 {\n+    let mut i = 0;\n+    while i < n {\n+        *((dest as usize + i) as *mut u8) = c as u8;\n+        i += 1;\n+    }\n+\n+    dest\n+}\n+\n+/// Memcmp\n+///\n+/// Compare two blocks of memory.\n+#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[no_mangle]\n+pub unsafe extern fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32 {\n+    let mut i = 0;\n+\n+    while i < n {\n+        let a = *((s1 as usize + i) as *const u8);\n+        let b = *((s2 as usize + i) as *const u8);\n+        if a != b {\n+            return a as i32 - b as i32\n+        }\n+        i += 1;\n+    }\n+\n+    0\n+}"}]}