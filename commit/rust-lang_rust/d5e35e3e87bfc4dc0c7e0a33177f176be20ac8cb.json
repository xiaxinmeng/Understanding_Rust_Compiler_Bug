{"sha": "d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTM1ZTNlODdiZmM0ZGMwYzdlMGEzMzE3N2YxNzZiZTIwYWM4Y2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-15T23:00:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-15T23:00:49Z"}, "message": "Convert CodeMap and FileMap to use &self instead of @self", "tree": {"sha": "79753b70ad2a09fe9786f8d94f5591b1030e77dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79753b70ad2a09fe9786f8d94f5591b1030e77dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb", "html_url": "https://github.com/rust-lang/rust/commit/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcccf333ab728539bf63ed773e6182f9da33683e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcccf333ab728539bf63ed773e6182f9da33683e", "html_url": "https://github.com/rust-lang/rust/commit/bcccf333ab728539bf63ed773e6182f9da33683e"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "cb427556e2779325eb773fa348c9da439c6d327d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d5e35e3e87bfc4dc0c7e0a33177f176be20ac8cb", "patch": "@@ -205,11 +205,11 @@ pub impl FileMap {\n                                      start_pos);\n     }\n \n-    fn next_line(@self, +pos: FilePos) {\n+    fn next_line(&self, +pos: FilePos) {\n         self.lines.push(pos);\n     }\n \n-    pub fn get_line(@self, line: int) -> ~str unsafe {\n+    pub fn get_line(&self, line: int) -> ~str unsafe {\n         let begin: BytePos = self.lines[line].byte - self.start_pos.byte;\n         let begin = begin.to_uint();\n         let end = match str::find_char_from(*self.src, '\\n', begin) {\n@@ -232,7 +232,7 @@ pub impl CodeMap {\n         }\n     }\n \n-    pub fn add_filemap(@self, filemap: @FileMap) {\n+    pub fn add_filemap(&self, filemap: @FileMap) {\n         let expected_byte_pos = if self.files.len() == 0 {\n             0\n         } else {\n@@ -248,23 +248,23 @@ pub impl CodeMap {\n         self.files.push(filemap);\n     }\n \n-    pub fn mk_substr_filename(@self, sp: span) -> ~str {\n+    pub fn mk_substr_filename(&self, sp: span) -> ~str {\n         let pos = self.lookup_char_pos(sp.lo);\n         return fmt!(\"<%s:%u:%u>\", pos.file.name,\n                     pos.line, pos.col.to_uint());\n     }\n \n-    pub fn lookup_char_pos(@self, +pos: CharPos) -> Loc<CharPos> {\n+    pub fn lookup_char_pos(&self, +pos: CharPos) -> Loc<CharPos> {\n         pure fn lookup(pos: FilePos) -> uint { return pos.ch.to_uint(); }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_byte_pos(@self, +pos: BytePos) -> Loc<BytePos> {\n+    pub fn lookup_byte_pos(&self, +pos: BytePos) -> Loc<BytePos> {\n         pure fn lookup(pos: FilePos) -> uint { return pos.byte.to_uint(); }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_char_pos_adj(@self, +pos: CharPos)\n+    pub fn lookup_char_pos_adj(&self, +pos: CharPos)\n         -> {filename: ~str, line: uint, col: CharPos, file: Option<@FileMap>}\n     {\n         let loc = self.lookup_char_pos(pos);\n@@ -288,7 +288,7 @@ pub impl CodeMap {\n         }\n     }\n \n-    pub fn adjust_span(@self, sp: span) -> span {\n+    pub fn adjust_span(&self, sp: span) -> span {\n         pure fn lookup(pos: FilePos) -> uint { return pos.ch.to_uint(); }\n         let line = self.lookup_line(sp.lo, lookup);\n         match (line.fm.substr) {\n@@ -304,19 +304,19 @@ pub impl CodeMap {\n         }\n     }\n \n-    pub fn span_to_str(@self, sp: span) -> ~str {\n+    pub fn span_to_str(&self, sp: span) -> ~str {\n         let lo = self.lookup_char_pos_adj(sp.lo);\n         let hi = self.lookup_char_pos_adj(sp.hi);\n         return fmt!(\"%s:%u:%u: %u:%u\", lo.filename,\n                     lo.line, lo.col.to_uint(), hi.line, hi.col.to_uint())\n     }\n \n-    pub fn span_to_filename(@self, sp: span) -> FileName {\n+    pub fn span_to_filename(&self, sp: span) -> FileName {\n         let lo = self.lookup_char_pos(sp.lo);\n         return /* FIXME (#2543) */ copy lo.file.name;\n     }\n \n-    pub fn span_to_lines(@self, sp: span) -> @FileLines {\n+    pub fn span_to_lines(&self, sp: span) -> @FileLines {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         let mut lines = ~[];\n@@ -326,7 +326,7 @@ pub impl CodeMap {\n         return @FileLines {file: lo.file, lines: lines};\n     }\n \n-    fn lookup_byte_offset(@self, +chpos: CharPos)\n+    fn lookup_byte_offset(&self, +chpos: CharPos)\n         -> {fm: @FileMap, pos: BytePos} {\n         pure fn lookup(pos: FilePos) -> uint { return pos.ch.to_uint(); }\n         let {fm, line} = self.lookup_line(chpos, lookup);\n@@ -338,15 +338,15 @@ pub impl CodeMap {\n         {fm: fm, pos: line_offset + BytePos(col_offset)}\n     }\n \n-    pub fn span_to_snippet(@self, sp: span) -> ~str {\n+    pub fn span_to_snippet(&self, sp: span) -> ~str {\n         let begin = self.lookup_byte_offset(sp.lo);\n         let end = self.lookup_byte_offset(sp.hi);\n         assert begin.fm.start_pos == end.fm.start_pos;\n         return str::slice(*begin.fm.src,\n                           begin.pos.to_uint(), end.pos.to_uint());\n     }\n \n-    pub fn get_filemap(@self, filename: ~str) -> @FileMap {\n+    pub fn get_filemap(&self, filename: ~str) -> @FileMap {\n         for self.files.each |fm| { if fm.name == filename { return *fm; } }\n         //XXjdm the following triggers a mismatched type bug\n         //      (or expected function, found _|_)\n@@ -356,7 +356,7 @@ pub impl CodeMap {\n }\n \n priv impl CodeMap {\n-    fn lookup_line<A: Pos>(@self, pos: A, lookup: LookupFn)\n+    fn lookup_line<A: Pos>(&self, pos: A, lookup: LookupFn)\n         -> {fm: @FileMap, line: uint}\n     {\n         let len = self.files.len();\n@@ -384,7 +384,7 @@ priv impl CodeMap {\n         return {fm: f, line: a};\n     }\n \n-    fn lookup_pos<A: Pos Num>(@self, pos: A, lookup: LookupFn) -> Loc<A> {\n+    fn lookup_pos<A: Pos Num>(&self, pos: A, lookup: LookupFn) -> Loc<A> {\n         let {fm: f, line: a} = self.lookup_line(pos, lookup);\n         return Loc {\n             file: f,\n@@ -393,7 +393,7 @@ priv impl CodeMap {\n         };\n     }\n \n-    fn span_to_str_no_adj(@self, sp: span) -> ~str {\n+    fn span_to_str_no_adj(&self, sp: span) -> ~str {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         return fmt!(\"%s:%u:%u: %u:%u\", lo.file.name,"}]}