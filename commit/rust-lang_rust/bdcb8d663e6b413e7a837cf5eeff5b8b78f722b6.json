{"sha": "bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2I4ZDY2M2U2YjQxM2U3YTgzN2NmNWVlZmY1YjhiNzhmNzIyYjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-04-06T09:26:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-06T09:26:13Z"}, "message": "Merge pull request #1438 from topecongiro/poor-formatting/method-chains\n\nLookup the last element of 'subexpr_list' instead of the first one", "tree": {"sha": "156dd174962d756aa9174006ec6a5f4b00f8db29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156dd174962d756aa9174006ec6a5f4b00f8db29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "html_url": "https://github.com/rust-lang/rust/commit/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa732ede8bd8fbce31209d5c6ecb7b0d3a966eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa732ede8bd8fbce31209d5c6ecb7b0d3a966eb4", "html_url": "https://github.com/rust-lang/rust/commit/fa732ede8bd8fbce31209d5c6ecb7b0d3a966eb4"}, {"sha": "8d22e85e48bf46b3056b8e0173940a8bb4f69c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d22e85e48bf46b3056b8e0173940a8bb4f69c31", "html_url": "https://github.com/rust-lang/rust/commit/8d22e85e48bf46b3056b8e0173940a8bb4f69c31"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "ea747aa4702049bfaaeaf09c12c25e841590ddbb", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "patch": "@@ -199,7 +199,8 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n     // is used inside a workspace.\n     // To ensure backward compatability, we only use `cargo metadata` for workspaces.\n     // TODO: Is it possible only use metadata or read-manifest\n-    let output = Command::new(\"cargo\").arg(\"metadata\")\n+    let output = Command::new(\"cargo\")\n+        .arg(\"metadata\")\n         .arg(\"--no-deps\")\n         .output()?;\n     if output.status.success() {"}, {"sha": "0181cd3d099972316ebb1ed079a8863fc60072de", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "patch": "@@ -217,7 +217,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     let first_connector = if extend || subexpr_list.is_empty() {\n         \"\"\n-    } else if let ast::ExprKind::Try(_) = subexpr_list[0].node {\n+    } else if let ast::ExprKind::Try(_) = subexpr_list.last().unwrap().node {\n         \"\"\n     } else {\n         &*connector"}, {"sha": "198691d82b59a8e99de60c928d08e11fc8664c51", "filename": "tests/source/chains-visual.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/tests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/tests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-visual.rs?ref=bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "patch": "@@ -115,3 +115,32 @@ fn issue587() {\n \n     std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n }\n+\n+fn issue_1389() {\n+    let names = String::from_utf8(names)?.split('|').map(str::to_owned).collect();\n+}\n+\n+fn issue1217() -> Result<Mnemonic, Error> {\n+let random_chars: String = OsRng::new()?\n+    .gen_ascii_chars()\n+    .take(self.bit_length)\n+    .collect();\n+\n+    Ok(Mnemonic::new(&random_chars))\n+}\n+\n+fn issue1236(options: Vec<String>) -> Result<Option<String>> {\n+let process = Command::new(\"dmenu\").stdin(Stdio::piped())\n+    .stdout(Stdio::piped())\n+    .spawn()\n+    .chain_err(|| \"failed to spawn dmenu\")?;\n+}\n+\n+fn issue1434() {\n+    for _ in 0..100 {\n+        let prototype_id = PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor).chain_err(|| {\n+            format!(\"could not read prototype ID at offset {:#010x}\",\n+                    current_offset)\n+        })?;\n+    }\n+}"}, {"sha": "2763b339084fe8b0dfc6c387c8bbf8b4f148506d", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=bdcb8d663e6b413e7a837cf5eeff5b8b78f722b6", "patch": "@@ -134,3 +134,37 @@ fn issue587() {\n \n     std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n }\n+\n+fn issue_1389() {\n+    let names = String::from_utf8(names)?\n+        .split('|')\n+        .map(str::to_owned)\n+        .collect();\n+}\n+\n+fn issue1217() -> Result<Mnemonic, Error> {\n+    let random_chars: String = OsRng::new()?\n+        .gen_ascii_chars()\n+        .take(self.bit_length)\n+        .collect();\n+\n+    Ok(Mnemonic::new(&random_chars))\n+}\n+\n+fn issue1236(options: Vec<String>) -> Result<Option<String>> {\n+    let process = Command::new(\"dmenu\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()\n+        .chain_err(|| \"failed to spawn dmenu\")?;\n+}\n+\n+fn issue1434() {\n+    for _ in 0..100 {\n+        let prototype_id = PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor)\n+            .chain_err(|| {\n+                           format!(\"could not read prototype ID at offset {:#010x}\",\n+                                   current_offset)\n+                       })?;\n+    }\n+}"}]}