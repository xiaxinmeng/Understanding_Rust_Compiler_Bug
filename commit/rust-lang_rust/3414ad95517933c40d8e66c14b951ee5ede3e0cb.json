{"sha": "3414ad95517933c40d8e66c14b951ee5ede3e0cb", "node_id": "C_kwDOAAsO6NoAKDM0MTRhZDk1NTE3OTMzYzQwZDhlNjZjMTRiOTUxZWU1ZWRlM2UwY2I", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-25T16:45:11Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:10Z"}, "message": "Emit `unfullfilled_lint_expectation` using a `HirId` for performance (RFC-2383)", "tree": {"sha": "1c119bedc8525107201cbc327f18c1d8ee852023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c119bedc8525107201cbc327f18c1d8ee852023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3414ad95517933c40d8e66c14b951ee5ede3e0cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn1IACgkQ/Ny/Ka9k\n1gHxOQ//UPpwyI+CpVZKm8iHNkJcao8Wtcz9Q/l5E/wIkvwLcMM47EnSlxhSxBNa\nH4lBS/CjBjTP+Aq5wANDqIe95WNqZOa4y//uBzBtpp9OKFdF8AcJYu2yUiU59MSf\nu1g9zFX02JRZ5E/9DuschQRl98o99VU4BRgFldomEWvKY0qb/gTjJbOiy5yj3UvF\n5UjZEqdiG0x2Xpj+dojiEB3O4eEbuS6XIVQWtdnizjX5JgMNnNRU/b7DXepC4I2Y\nxhbhPKBGqY4kwKpfICGnbklmGe2XqAHTzCkixQNDIz1Pl2sHXsKeTcr0Mkqf4NRd\nT84Y5OVQ+bJEEFGKAr7NCmaOMjaP0Ik8UOS+w3lDcE+loVLkJk6JwlM7fNItaBbn\nu0Nx2oZREIDKC4qOARtnuYtHcTK42HM485fOm6EBoU1+UM0mlwGT7lSCurqnQu1X\nPurJZFg/nv+Yx3nb7SfrqMENhU7Y5xuhvPFtVHNNTL0VEawCqx14U3zp568slRjt\nojssLgTDTBElTrJ6g7hap2i8O31w9nl9P+yHSEwNp8kYkE8d2P05DKhlP7Z5mNGl\n536jRi9f5a02mdscTiUHdQgKsWl63esJkdrNHYGF+kOsNM5oDCRKh9516umaw38j\neiKM68Bnl4FNwquO7F5YNOfZQMrEDIYbSBjX4dQtZ0WFUnzQpFU=\n=rIQy\n-----END PGP SIGNATURE-----", "payload": "tree 1c119bedc8525107201cbc327f18c1d8ee852023\nparent a14456f91f2385cbf1a0f3e2108f9684ba56f281\nauthor xFrednet <xFrednet@gmail.com> 1637858711 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646239570 +0100\n\nEmit `unfullfilled_lint_expectation` using a `HirId` for performance (RFC-2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3414ad95517933c40d8e66c14b951ee5ede3e0cb", "html_url": "https://github.com/rust-lang/rust/commit/3414ad95517933c40d8e66c14b951ee5ede3e0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3414ad95517933c40d8e66c14b951ee5ede3e0cb/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14456f91f2385cbf1a0f3e2108f9684ba56f281", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14456f91f2385cbf1a0f3e2108f9684ba56f281", "html_url": "https://github.com/rust-lang/rust/commit/a14456f91f2385cbf1a0f3e2108f9684ba56f281"}], "stats": {"total": 98, "additions": 29, "deletions": 69}, "files": [{"sha": "5dcd1f0fbe6be1c1f885a1f0a6fa76b28bfec13e", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=3414ad95517933c40d8e66c14b951ee5ede3e0cb", "patch": "@@ -1,10 +1,9 @@\n use crate::builtin;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::lint::struct_lint_level;\n+use rustc_hir::HirId;\n use rustc_middle::{lint::LintExpectation, ty::TyCtxt};\n use rustc_session::lint::LintExpectationId;\n use rustc_span::symbol::sym;\n-use rustc_span::MultiSpan;\n \n pub fn check_expectations(tcx: TyCtxt<'_>) {\n     if !tcx.sess.features_untracked().enabled(sym::lint_reasons) {\n@@ -17,24 +16,28 @@ pub fn check_expectations(tcx: TyCtxt<'_>) {\n \n     for (id, expectation) in lint_expectations {\n         if !fulfilled_expectations.contains(id) {\n-            emit_unfulfilled_expectation_lint(tcx, expectation);\n+            // This check will always be true, since `lint_expectations` only\n+            // holds stable ids\n+            if let LintExpectationId::Stable { hir_id, .. } = id {\n+                emit_unfulfilled_expectation_lint(tcx, *hir_id, expectation);\n+            }\n         }\n     }\n }\n \n-fn emit_unfulfilled_expectation_lint(tcx: TyCtxt<'_>, expectation: &LintExpectation) {\n+fn emit_unfulfilled_expectation_lint(\n+    tcx: TyCtxt<'_>,\n+    hir_id: HirId,\n+    expectation: &LintExpectation,\n+) {\n     // FIXME: The current implementation doesn't cover cases where the\n     // `unfulfilled_lint_expectations` is actually expected by another lint\n-    // expectation. This can be added here as we have the lint level of this\n-    // expectation, and we can also mark the lint expectation it would fulfill\n-    // as such. This is currently not implemented to get some early feedback\n-    // before diving deeper into this.\n-    struct_lint_level(\n-        tcx.sess,\n+    // expectation. This can be added here by checking the lint level and\n+    // retrieving the `LintExpectationId` if it was expected.\n+    tcx.struct_span_lint_hir(\n         builtin::UNFULFILLED_LINT_EXPECTATIONS,\n-        expectation.emission_level,\n-        expectation.emission_level_source,\n-        Some(MultiSpan::from_span(expectation.emission_span)),\n+        hir_id,\n+        expectation.emission_span,\n         |diag| {\n             let mut diag = diag.build(\"this lint expectation is unfulfilled\");\n             if let Some(rationale) = expectation.reason {"}, {"sha": "f40abff7fc059fb9881940e0dd17eda5e5ac9064", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 11, "deletions": 45, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=3414ad95517933c40d8e66c14b951ee5ede3e0cb", "patch": "@@ -245,9 +245,9 @@ impl<'s> LintLevelsBuilder<'s> {\n         for (attr_index, attr) in attrs.iter().enumerate() {\n             let level = match Level::from_attr(attr) {\n                 None => continue,\n-                Some(Level::Expect(unstable_id)) if source_hir_id.is_some() => {\n-                    let stable_id =\n-                        self.create_stable_id(unstable_id, source_hir_id.unwrap(), attr_index);\n+                Some(Level::Expect(unstable_id)) if let Some(hir_id) = source_hir_id => {\n+                    let stable_id = self.create_stable_id(unstable_id, hir_id, attr_index);\n+\n                     Level::Expect(stable_id)\n                 }\n                 Some(lvl) => lvl,\n@@ -303,12 +303,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n \n-            let (unfulfilled_lint_lvl, unfulfilled_lint_src) = self.sets.get_lint_level(\n-                builtin::UNFULFILLED_LINT_EXPECTATIONS,\n-                self.cur,\n-                Some(&specs),\n-                &sess,\n-            );\n             for (lint_index, li) in metas.iter_mut().enumerate() {\n                 let level = match level {\n                     Level::Expect(mut id) => {\n@@ -360,15 +354,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n                         if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations.insert(\n-                                expect_id,\n-                                LintExpectation::new(\n-                                    reason,\n-                                    sp,\n-                                    unfulfilled_lint_lvl,\n-                                    unfulfilled_lint_src,\n-                                ),\n-                            );\n+                            self.lint_expectations\n+                                .insert(expect_id, LintExpectation::new(reason, sp));\n                         }\n                     }\n \n@@ -386,15 +373,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations.insert(\n-                                        expect_id,\n-                                        LintExpectation::new(\n-                                            reason,\n-                                            sp,\n-                                            unfulfilled_lint_lvl,\n-                                            unfulfilled_lint_src,\n-                                        ),\n-                                    );\n+                                    self.lint_expectations\n+                                        .insert(expect_id, LintExpectation::new(reason, sp));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -433,15 +413,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations.insert(\n-                                        expect_id,\n-                                        LintExpectation::new(\n-                                            reason,\n-                                            sp,\n-                                            unfulfilled_lint_lvl,\n-                                            unfulfilled_lint_src,\n-                                        ),\n-                                    );\n+                                    self.lint_expectations\n+                                        .insert(expect_id, LintExpectation::new(reason, sp));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -537,15 +510,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n                         if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations.insert(\n-                                expect_id,\n-                                LintExpectation::new(\n-                                    reason,\n-                                    sp,\n-                                    unfulfilled_lint_lvl,\n-                                    unfulfilled_lint_src,\n-                                ),\n-                            );\n+                            self.lint_expectations\n+                                .insert(expect_id, LintExpectation::new(reason, sp));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "689d204b25e90e7120b13030dd8d9399d557360a", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3414ad95517933c40d8e66c14b951ee5ede3e0cb/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=3414ad95517933c40d8e66c14b951ee5ede3e0cb", "patch": "@@ -204,20 +204,11 @@ pub struct LintExpectation {\n     pub reason: Option<Symbol>,\n     /// The [`Span`] of the attribute that this expectation originated from.\n     pub emission_span: Span,\n-    /// The [`Level`] that this lint diagnostic should be emitted if unfulfilled.\n-    pub emission_level: Level,\n-    /// The [`LintLevelSource`] information needed for [`struct_lint_level`].\n-    pub emission_level_source: LintLevelSource,\n }\n \n impl LintExpectation {\n-    pub fn new(\n-        reason: Option<Symbol>,\n-        attr_span: Span,\n-        emission_level: Level,\n-        emission_level_source: LintLevelSource,\n-    ) -> Self {\n-        Self { reason, emission_span: attr_span, emission_level, emission_level_source }\n+    pub fn new(reason: Option<Symbol>, attr_span: Span) -> Self {\n+        Self { reason, emission_span: attr_span }\n     }\n }\n "}]}