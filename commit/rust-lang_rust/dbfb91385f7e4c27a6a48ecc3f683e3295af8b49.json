{"sha": "dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "node_id": "C_kwDOAAsO6NoAKGRiZmI5MTM4NWY3ZTRjMjdhNmE0OGVjYzNmNjgzZTMyOTVhZjhiNDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-25T08:29:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-26T08:30:45Z"}, "message": "Add a unit test for zero-sized types in `RawVec`.\n\nBecause there's some subtle behaviour specific to zero-sized types and\nit's currently not well tested.", "tree": {"sha": "4ad107be9d95ef664d4cca178baffa28f2a8796c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad107be9d95ef664d4cca178baffa28f2a8796c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "html_url": "https://github.com/rust-lang/rust/commit/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bda74d363a060ade5e5caeb654ba59bfed51a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bda74d363a060ade5e5caeb654ba59bfed51a4", "html_url": "https://github.com/rust-lang/rust/commit/f3bda74d363a060ade5e5caeb654ba59bfed51a4"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "ff322f0da97c6e069f62f2e9432e593011cd5e62", "filename": "library/alloc/src/raw_vec/tests.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs?ref=dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "patch": "@@ -77,3 +77,87 @@ fn reserve_does_not_overallocate() {\n         assert!(v.capacity() >= 12 + 12 / 2);\n     }\n }\n+\n+struct ZST;\n+\n+// A `RawVec` holding zero-sized elements should always look like this.\n+fn zst_sanity<T>(v: &RawVec<T>) {\n+    assert_eq!(v.capacity(), usize::MAX);\n+    assert_eq!(v.ptr(), core::ptr::Unique::<T>::dangling().as_ptr());\n+    assert_eq!(v.current_memory(), None);\n+}\n+\n+#[test]\n+fn zst() {\n+    let cap_err = Err(crate::collections::TryReserveErrorKind::CapacityOverflow.into());\n+\n+    assert_eq!(std::mem::size_of::<ZST>(), 0);\n+\n+    // All these different ways of creating the RawVec produce the same thing.\n+\n+    let v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::with_capacity_in(100, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::with_capacity_in(100, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::allocate_in(0, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::allocate_in(100, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    let mut v: RawVec<ZST> = RawVec::allocate_in(usize::MAX, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    // Check all these operations work as expected with zero-sized elements.\n+\n+    assert!(!v.needs_to_grow(100, usize::MAX - 100));\n+    assert!(v.needs_to_grow(101, usize::MAX - 100));\n+    zst_sanity(&v);\n+\n+    v.reserve(100, usize::MAX - 100);\n+    //v.reserve(101, usize::MAX - 100); // panics, in `zst_reserve_panic` below\n+    zst_sanity(&v);\n+\n+    v.reserve_exact(100, usize::MAX - 100);\n+    //v.reserve_exact(101, usize::MAX - 100); // panics, in `zst_reserve_exact_panic` below\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.try_reserve(100, usize::MAX - 100), Ok(()));\n+    assert_eq!(v.try_reserve(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.try_reserve_exact(100, usize::MAX - 100), Ok(()));\n+    assert_eq!(v.try_reserve_exact(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.grow_amortized(100, usize::MAX - 100), cap_err);\n+    assert_eq!(v.grow_amortized(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.grow_exact(100, usize::MAX - 100), cap_err);\n+    assert_eq!(v.grow_exact(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"capacity overflow\")]\n+fn zst_reserve_panic() {\n+    let mut v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    v.reserve(101, usize::MAX - 100);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"capacity overflow\")]\n+fn zst_reserve_exact_panic() {\n+    let mut v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    v.reserve_exact(101, usize::MAX - 100);\n+}"}]}