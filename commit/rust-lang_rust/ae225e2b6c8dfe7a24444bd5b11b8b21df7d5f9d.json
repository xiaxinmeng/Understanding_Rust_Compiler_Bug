{"sha": "ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMjI1ZTJiNmM4ZGZlN2EyNDQ0NGJkNWIxMWI4YjIxZGY3ZDVmOWQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-12-27T02:15:17Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-06T15:47:13Z"}, "message": "libcore: Add binop functions to u32 and u64", "tree": {"sha": "09c3cc91aa2c800f2c859975d69995dde052a5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c3cc91aa2c800f2c859975d69995dde052a5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "html_url": "https://github.com/rust-lang/rust/commit/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefae72a53a61c256481328ed29aafb725056f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefae72a53a61c256481328ed29aafb725056f5c", "html_url": "https://github.com/rust-lang/rust/commit/fefae72a53a61c256481328ed29aafb725056f5c"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "569d59b981aeffe7969a022e018fda4c5e0ad3ae", "filename": "src/libcore/u32.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d/src%2Flibcore%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d/src%2Flibcore%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu32.rs?ref=ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "patch": "@@ -16,6 +16,49 @@ Return the maximal value for a u32\n */\n const max_value: u32 = 0xffff_ffffu32;\n \n+/* Function: add */\n+pure fn add(x: u32, y: u32) -> u32 { ret x + y; }\n+\n+/* Function: sub */\n+pure fn sub(x: u32, y: u32) -> u32 { ret x - y; }\n+\n+/* Function: mul */\n+pure fn mul(x: u32, y: u32) -> u32 { ret x * y; }\n+\n+/* Function: div */\n+pure fn div(x: u32, y: u32) -> u32 { ret x / y; }\n+\n+/* Function: rem */\n+pure fn rem(x: u32, y: u32) -> u32 { ret x % y; }\n+\n+/* Predicate: lt */\n+pure fn lt(x: u32, y: u32) -> bool { ret x < y; }\n+\n+/* Predicate: le */\n+pure fn le(x: u32, y: u32) -> bool { ret x <= y; }\n+\n+/* Predicate: eq */\n+pure fn eq(x: u32, y: u32) -> bool { ret x == y; }\n+\n+/* Predicate: ne */\n+pure fn ne(x: u32, y: u32) -> bool { ret x != y; }\n+\n+/* Predicate: ge */\n+pure fn ge(x: u32, y: u32) -> bool { ret x >= y; }\n+\n+/* Predicate: gt */\n+pure fn gt(x: u32, y: u32) -> bool { ret x > y; }\n+\n+/*\n+Function: range\n+\n+Iterate over the range [`lo`..`hi`)\n+*/\n+fn range(lo: u32, hi: u32, it: block(u32)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1u32; }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "bce99f02b87feb2deba74eafccaeec0888ecef9d", "filename": "src/libcore/u64.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d/src%2Flibcore%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d/src%2Flibcore%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu64.rs?ref=ae225e2b6c8dfe7a24444bd5b11b8b21df7d5f9d", "patch": "@@ -16,6 +16,49 @@ Return the maximal value for a u64\n */\n const max_value: u64 = 18446744073709551615u64;\n \n+/* Function: add */\n+pure fn add(x: u64, y: u64) -> u64 { ret x + y; }\n+\n+/* Function: sub */\n+pure fn sub(x: u64, y: u64) -> u64 { ret x - y; }\n+\n+/* Function: mul */\n+pure fn mul(x: u64, y: u64) -> u64 { ret x * y; }\n+\n+/* Function: div */\n+pure fn div(x: u64, y: u64) -> u64 { ret x / y; }\n+\n+/* Function: rem */\n+pure fn rem(x: u64, y: u64) -> u64 { ret x % y; }\n+\n+/* Predicate: lt */\n+pure fn lt(x: u64, y: u64) -> bool { ret x < y; }\n+\n+/* Predicate: le */\n+pure fn le(x: u64, y: u64) -> bool { ret x <= y; }\n+\n+/* Predicate: eq */\n+pure fn eq(x: u64, y: u64) -> bool { ret x == y; }\n+\n+/* Predicate: ne */\n+pure fn ne(x: u64, y: u64) -> bool { ret x != y; }\n+\n+/* Predicate: ge */\n+pure fn ge(x: u64, y: u64) -> bool { ret x >= y; }\n+\n+/* Predicate: gt */\n+pure fn gt(x: u64, y: u64) -> bool { ret x > y; }\n+\n+/*\n+Function: range\n+\n+Iterate over the range [`lo`..`hi`)\n+*/\n+fn range(lo: u64, hi: u64, it: block(u64)) {\n+    let i = lo;\n+    while i < hi { it(i); i += 1u64; }\n+}\n+\n /*\n Function: to_str\n "}]}