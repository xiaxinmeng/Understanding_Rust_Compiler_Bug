{"sha": "e3e99516730f72fa05cb964ae341156e1ca85c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZTk5NTE2NzMwZjcyZmEwNWNiOTY0YWUzNDExNTZlMWNhODVjMzk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-07T21:23:39Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:55Z"}, "message": "Prepare inline MutVisitor to have projections interned", "tree": {"sha": "baeb1c4c1f6061758e2d20a3384a3a80d8fd933f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baeb1c4c1f6061758e2d20a3384a3a80d8fd933f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3e99516730f72fa05cb964ae341156e1ca85c39", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHj8ACgkQiMlBzaHU\nZDL4mhAAoRgdzQEoIqsd1LRCbwXGF/ax26EqGcSTZqBP/n8tDVl7h8gKAoOhkTFi\nRV/3qDme8THFSi0joBXx/20RvQ0ou5+gw4nANMjt+wrLACY0Cqe4bfK457pcfF1u\nU6cZZw6AQfMkVwIQIwT1CKIrDdxUtFWDCC5q3z/Itw9gXl6LZIif4JJbQiTA183z\nQM71Tjhs88q9wIvRXzKr07kFMGd1rs8oQ2kI/wLRDZ9ukcCy9mqAHPtqLjacTS8a\nv+g5kTa4C2BWayhe/EdbuokB1hoWhWMCc9Y2fifrBV1tIYiW+XsMD+kahbU5CGaf\nD99/kwAReS3rNDFBiXrgTzCo0zPsTNZyIRnq9HT89IjvYlJsOv29na5uwEtI5RuI\nuXL5AoTmx6CRiBqOZ+7f0tAGpbvJR2oXPUYa/Jq1AYBbFg4300oD5HUSdmQ3oIKO\nZhiBTzBOlvf8eKsI/vc/BQDpoiSGvYKLD/DVBpX3BiQVP2aUtBvc1EW9XW8RauvX\nHcsDt/Il/rt9jxmPj2Fc5irdIEOKfczCyRRoPDJgQgcXykFBwJk/cjVTfnxPveuy\nkKS/QitByF5vHklFT2d+TK/1+eDEjQH9NWvbmu1+dfgTRF0IH6AVxC8QECbwVaR9\nG7CicAREA2dIT0Ar3sc0c03E7n1E0/if3cmr0B9aIqXsdELlxS8=\n=GCKl\n-----END PGP SIGNATURE-----", "payload": "tree baeb1c4c1f6061758e2d20a3384a3a80d8fd933f\nparent bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c\nauthor Santiago Pastorino <spastorino@gmail.com> 1570483419 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364415 -0400\n\nPrepare inline MutVisitor to have projections interned\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e99516730f72fa05cb964ae341156e1ca85c39", "html_url": "https://github.com/rust-lang/rust/commit/e3e99516730f72fa05cb964ae341156e1ca85c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3e99516730f72fa05cb964ae341156e1ca85c39/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "html_url": "https://github.com/rust-lang/rust/commit/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "3a71d22da78730adabfb2c7b11edf26f4078c85c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e3e99516730f72fa05cb964ae341156e1ca85c39/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e99516730f72fa05cb964ae341156e1ca85c39/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=e3e99516730f72fa05cb964ae341156e1ca85c39", "patch": "@@ -647,38 +647,45 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n         debug!(\"updating target `{:?}`, new: `{:?}`\", tgt, new);\n         new\n     }\n-}\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n-    fn visit_local(&mut self,\n-                   local: &mut Local,\n-                   _ctxt: PlaceContext,\n-                   _location: Location) {\n+    fn make_integrate_local(&self, local: &Local) -> Local {\n         if *local == RETURN_PLACE {\n             match self.destination {\n                 Place {\n                     base: PlaceBase::Local(l),\n                     projection: box [],\n                 } => {\n-                    *local = l;\n-                    return;\n+                    return l;\n                 },\n                 ref place => bug!(\"Return place is {:?}, not local\", place)\n             }\n         }\n+\n         let idx = local.index() - 1;\n         if idx < self.args.len() {\n-            *local = self.args[idx];\n-            return;\n+            return self.args[idx];\n         }\n-        *local = self.local_map[Local::new(idx - self.args.len())];\n+\n+        self.local_map[Local::new(idx - self.args.len())]\n     }\n+}\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    _ctxt: PlaceContext,\n-                    _location: Location) {\n+impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n+    fn visit_local(\n+        &mut self,\n+        local: &mut Local,\n+        _ctxt: PlaceContext,\n+        _location: Location,\n+    ) {\n+        *local = self.make_integrate_local(local);\n+    }\n \n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         match place {\n             Place {\n                 base: PlaceBase::Local(RETURN_PLACE),\n@@ -687,7 +694,19 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 // Return pointer; update the place itself\n                 *place = self.destination.clone();\n             },\n-            _ => self.super_place(place, _ctxt, _location)\n+            _ => {\n+                self.visit_place_base(&mut place.base, context, location);\n+\n+                let new_projection: Vec<_> = place.projection.iter().map(|elem|\n+                    if let PlaceElem::Index(local) = elem {\n+                        PlaceElem::Index(self.make_integrate_local(local))\n+                    } else {\n+                        elem.clone()\n+                    }\n+                ).collect();\n+\n+                place.projection = new_projection.into_boxed_slice();\n+            }\n         }\n     }\n "}]}