{"sha": "8646a1714306473011e79e1c1a213928bfa6025f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDZhMTcxNDMwNjQ3MzAxMWU3OWUxYzFhMjEzOTI4YmZhNjAyNWY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T18:39:28Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-25T01:21:41Z"}, "message": "Enforce #![deny(bare_trait_objects)] in src/libcore", "tree": {"sha": "2c8c4d403782936f31140895a36a9da6126e433c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8c4d403782936f31140895a36a9da6126e433c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8646a1714306473011e79e1c1a213928bfa6025f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8646a1714306473011e79e1c1a213928bfa6025f", "html_url": "https://github.com/rust-lang/rust/commit/8646a1714306473011e79e1c1a213928bfa6025f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8646a1714306473011e79e1c1a213928bfa6025f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46804ef0cee4b55ed9922719da243b6edd9101b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/46804ef0cee4b55ed9922719da243b6edd9101b2", "html_url": "https://github.com/rust-lang/rust/commit/46804ef0cee4b55ed9922719da243b6edd9101b2"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "6b26093439e4f509925d0be5eff19329f554b6b8", "filename": "src/libcore/any.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -120,7 +120,7 @@ impl<T: 'static + ?Sized > Any for T {\n ///////////////////////////////////////////////////////////////////////////////\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Debug for Any {\n+impl fmt::Debug for dyn Any {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n@@ -130,20 +130,20 @@ impl fmt::Debug for Any {\n // hence used with `unwrap`. May eventually no longer be needed if\n // dispatch works with upcasting.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Debug for Any + Send {\n+impl fmt::Debug for dyn Any + Send {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n-impl fmt::Debug for Any + Send + Sync {\n+impl fmt::Debug for dyn Any + Send + Sync {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n-impl Any {\n+impl dyn Any {\n     /// Returns `true` if the boxed type is the same as `T`.\n     ///\n     /// # Examples\n@@ -203,7 +203,7 @@ impl Any {\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&*(self as *const Any as *const T))\n+                Some(&*(self as *const dyn Any as *const T))\n             }\n         } else {\n             None\n@@ -240,15 +240,15 @@ impl Any {\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&mut *(self as *mut Any as *mut T))\n+                Some(&mut *(self as *mut dyn Any as *mut T))\n             }\n         } else {\n             None\n         }\n     }\n }\n \n-impl Any+Send {\n+impl dyn Any+Send {\n     /// Forwards to the method defined on the type `Any`.\n     ///\n     /// # Examples\n@@ -332,7 +332,7 @@ impl Any+Send {\n     }\n }\n \n-impl Any+Send+Sync {\n+impl dyn Any+Send+Sync {\n     /// Forwards to the method defined on the type `Any`.\n     ///\n     /// # Examples"}, {"sha": "137e9fe2c1533e251a09e54c6c0a86879c7d4332", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -1532,7 +1532,7 @@ impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n #[allow(unused)]\n fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n-    let _: UnsafeCell<&Send> = a;\n-    let _: Cell<&Send> = b;\n-    let _: RefCell<&Send> = c;\n+    let _: UnsafeCell<&dyn Send> = a;\n+    let _: Cell<&dyn Send> = b;\n+    let _: RefCell<&dyn Send> = c;\n }"}, {"sha": "3c5f934d4d8c795ce9b5842a18b62032422c961f", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -11,7 +11,7 @@\n use fmt;\n \n struct PadAdapter<'a> {\n-    buf: &'a mut (fmt::Write + 'a),\n+    buf: &'a mut (dyn fmt::Write + 'a),\n     on_newline: bool,\n }\n \n@@ -107,7 +107,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n+    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -204,7 +204,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n+    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.fields > 0 {\n                 (\",\", \" \")\n@@ -258,7 +258,7 @@ struct DebugInner<'a, 'b: 'a> {\n }\n \n impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n-    fn entry(&mut self, entry: &fmt::Debug) {\n+    fn entry(&mut self, entry: &dyn fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut slot = None;\n@@ -340,7 +340,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n@@ -411,7 +411,7 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds a new entry to the list output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n@@ -482,7 +482,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut slot = None;"}, {"sha": "928f95e3ba2ea2a65c7cc2fa1aab225d2588dbec", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -255,7 +255,7 @@ pub struct Formatter<'a> {\n     width: Option<usize>,\n     precision: Option<usize>,\n \n-    buf: &'a mut (Write+'a),\n+    buf: &'a mut (dyn Write+'a),\n     curarg: slice::Iter<'a, ArgumentV1<'a>>,\n     args: &'a [ArgumentV1<'a>],\n }\n@@ -272,7 +272,7 @@ struct Void {\n     ///\n     /// It was added after #45197 showed that one could share a `!Sync`\n     /// object across threads by passing it into `format_args!`.\n-    _oibit_remover: PhantomData<*mut Fn()>,\n+    _oibit_remover: PhantomData<*mut dyn Fn()>,\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n@@ -1020,7 +1020,7 @@ pub trait UpperExp {\n ///\n /// [`write!`]: ../../std/macro.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn write(output: &mut Write, args: Arguments) -> Result {\n+pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n         width: None,\n@@ -1062,7 +1062,7 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n \n impl<'a> Formatter<'a> {\n     fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n-        where 'b: 'c, F: FnOnce(&'b mut (Write+'b)) -> &'c mut (Write+'c)\n+        where 'b: 'c, F: FnOnce(&'b mut (dyn Write+'b)) -> &'c mut (dyn Write+'c)\n     {\n         Formatter {\n             // We want to change this\n@@ -1342,7 +1342,7 @@ impl<'a> Formatter<'a> {\n     }\n \n     fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n-        fn write_bytes(buf: &mut Write, s: &[u8]) -> Result {\n+        fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n "}, {"sha": "48c6eb94144296ec7c4785171ec7223337b638b7", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -18,7 +18,7 @@ use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhi\n use super::{Zip, Sum, Product};\n use super::{ChainState, FromIterator, ZipImpl};\n \n-fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n+fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n \n /// An interface for dealing with iterators.\n ///"}, {"sha": "ae0469bfa042a819afc699bfcda9ea1dd0727472", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -70,6 +70,7 @@\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![no_core]\n+#![deny(bare_trait_objects)]\n #![deny(missing_docs)]\n #![deny(missing_debug_implementations)]\n "}, {"sha": "17cac5aa0a05fd1e5a4eed9ca078f29c9a6533dd", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -43,7 +43,7 @@ use fmt;\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n-    payload: &'a (Any + Send),\n+    payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n     location: Location<'a>,\n }\n@@ -64,7 +64,7 @@ impl<'a> PanicInfo<'a> {\n \n     #[doc(hidden)]\n     #[inline]\n-    pub fn set_payload(&mut self, info: &'a (Any + Send)) {\n+    pub fn set_payload(&mut self, info: &'a (dyn Any + Send)) {\n         self.payload = info;\n     }\n \n@@ -86,7 +86,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn payload(&self) -> &(Any + Send) {\n+    pub fn payload(&self) -> &(dyn Any + Send) {\n         self.payload\n     }\n \n@@ -270,6 +270,6 @@ impl<'a> fmt::Display for Location<'a> {\n #[unstable(feature = \"std_internals\", issue = \"0\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n-    fn box_me_up(&mut self) -> *mut (Any + Send);\n-    fn get(&mut self) -> &(Any + Send);\n+    fn box_me_up(&mut self) -> *mut (dyn Any + Send);\n+    fn get(&mut self) -> &(dyn Any + Send);\n }"}, {"sha": "1fc975cb178819d9584c8c3604ea36fab5b93a08", "filename": "src/libcore/task/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ftask%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ftask%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fcontext.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -21,7 +21,7 @@ use super::{Executor, Waker, LocalWaker};\n /// when performing a single `poll` step on a task.\n pub struct Context<'a> {\n     local_waker: &'a LocalWaker,\n-    executor: &'a mut Executor,\n+    executor: &'a mut dyn Executor,\n }\n \n impl<'a> fmt::Debug for Context<'a> {\n@@ -34,7 +34,7 @@ impl<'a> fmt::Debug for Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new task `Context` with the provided `local_waker`, `waker`, and `executor`.\n     #[inline]\n-    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut Executor) -> Context<'a> {\n+    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut dyn Executor) -> Context<'a> {\n         Context {\n             local_waker,\n             executor,\n@@ -58,7 +58,7 @@ impl<'a> Context<'a> {\n     /// This method is useful primarily if you want to explicitly handle\n     /// spawn failures.\n     #[inline]\n-    pub fn executor(&mut self) -> &mut Executor {\n+    pub fn executor(&mut self) -> &mut dyn Executor {\n         self.executor\n     }\n "}, {"sha": "321b432d3f4307b7c29681caddda75b5453bf2c3", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646a1714306473011e79e1c1a213928bfa6025f/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=8646a1714306473011e79e1c1a213928bfa6025f", "patch": "@@ -23,7 +23,7 @@ use ptr::NonNull;\n /// trait, allowing notifications to get routed through it.\n #[repr(transparent)]\n pub struct Waker {\n-    inner: NonNull<UnsafeWake>,\n+    inner: NonNull<dyn UnsafeWake>,\n }\n \n impl Unpin for Waker {}\n@@ -41,7 +41,7 @@ impl Waker {\n     /// use the `Waker::from` function instead which works with the safe\n     /// `Arc` type and the safe `Wake` trait.\n     #[inline]\n-    pub unsafe fn new(inner: NonNull<UnsafeWake>) -> Self {\n+    pub unsafe fn new(inner: NonNull<dyn UnsafeWake>) -> Self {\n         Waker { inner: inner }\n     }\n \n@@ -98,7 +98,7 @@ impl Drop for Waker {\n /// behavior.\n #[repr(transparent)]\n pub struct LocalWaker {\n-    inner: NonNull<UnsafeWake>,\n+    inner: NonNull<dyn UnsafeWake>,\n }\n \n impl Unpin for LocalWaker {}\n@@ -119,7 +119,7 @@ impl LocalWaker {\n     /// For this function to be used safely, it must be sound to call `inner.wake_local()`\n     /// on the current thread.\n     #[inline]\n-    pub unsafe fn new(inner: NonNull<UnsafeWake>) -> Self {\n+    pub unsafe fn new(inner: NonNull<dyn UnsafeWake>) -> Self {\n         LocalWaker { inner: inner }\n     }\n "}]}