{"sha": "4e5666eace14651539ca2a1f5eed8cdf0ccfb130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTY2NmVhY2UxNDY1MTUzOWNhMmExZjVlZWQ4Y2RmMGNjZmIxMzA=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-02T05:24:10Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-03T04:08:08Z"}, "message": "Fix missing entries in upvar borrows map for capture-by-ref unboxed closures\n\nThis prevents a later ICE in borrowck.\n\nCloses issue #17655", "tree": {"sha": "8474f371f54e52da8181f089f70f814e55da38bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8474f371f54e52da8181f089f70f814e55da38bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5666eace14651539ca2a1f5eed8cdf0ccfb130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5666eace14651539ca2a1f5eed8cdf0ccfb130", "html_url": "https://github.com/rust-lang/rust/commit/4e5666eace14651539ca2a1f5eed8cdf0ccfb130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5666eace14651539ca2a1f5eed8cdf0ccfb130/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70a0374e24c146e714b0beb4437e571a488be4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70a0374e24c146e714b0beb4437e571a488be4f", "html_url": "https://github.com/rust-lang/rust/commit/a70a0374e24c146e714b0beb4437e571a488be4f"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "3a14b90f789c86b06c2fee4eb8a9f7127ffe6245", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4e5666eace14651539ca2a1f5eed8cdf0ccfb130/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5666eace14651539ca2a1f5eed8cdf0ccfb130/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=4e5666eace14651539ca2a1f5eed8cdf0ccfb130", "patch": "@@ -844,7 +844,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                     // has static lifetime.\n                 } else {\n                     // Variables being referenced must outlive closure.\n-                    constrain_free_variables_in_stack_closure(\n+                    constrain_free_variables_in_by_ref_closure(\n                         rcx, bounds.region_bound, expr, freevars);\n \n                     // Closure is stack allocated and hence cannot\n@@ -856,20 +856,17 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n             });\n         }\n         ty::ty_unboxed_closure(_, region) => {\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                // No free variables means that there is no environment and\n-                // hence the closure has static lifetime. Otherwise, the\n-                // closure must not outlive the variables it closes over\n-                // by-reference.\n-                //\n-                // NDM -- this seems wrong, discuss with pcwalton, should\n-                // be straightforward enough.\n-                if !freevars.is_empty() {\n-                    let bounds = ty::region_existential_bound(region);\n-                    ensure_free_variable_types_outlive_closure_bound(\n-                        rcx, bounds, expr, freevars);\n-                }\n-            })\n+            let bounds = ty::region_existential_bound(region);\n+            if tcx.capture_modes.borrow().get_copy(&expr.id) == ast::CaptureByRef {\n+                ty::with_freevars(tcx, expr.id, |freevars| {\n+                    if !freevars.is_empty() {\n+                        // Variables being referenced must be constrained and registered\n+                        // in the upvar borrow map\n+                        constrain_free_variables_in_by_ref_closure(\n+                            rcx, bounds.region_bound, expr, freevars);\n+                    }\n+                })\n+            }\n         }\n         _ => { }\n     }\n@@ -884,6 +881,13 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 propagate_upupvar_borrow_kind(rcx, expr, freevars);\n             })\n         }\n+        ty::ty_unboxed_closure(..) => {\n+            if tcx.capture_modes.borrow().get_copy(&expr.id) == ast::CaptureByRef {\n+                ty::with_freevars(tcx, expr.id, |freevars| {\n+                    propagate_upupvar_borrow_kind(rcx, expr, freevars);\n+                });\n+            }\n+        }\n         _ => {}\n     }\n \n@@ -893,6 +897,12 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 ensure_free_variable_types_outlive_closure_bound(rcx, bounds, expr, freevars);\n             })\n         }\n+        ty::ty_unboxed_closure(_, region) => {\n+            ty::with_freevars(tcx, expr.id, |freevars| {\n+                let bounds = ty::region_existential_bound(region);\n+                ensure_free_variable_types_outlive_closure_bound(rcx, bounds, expr, freevars);\n+            })\n+        }\n         _ => {}\n     }\n \n@@ -959,7 +969,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n         }\n     }\n \n-    fn constrain_free_variables_in_stack_closure(\n+    fn constrain_free_variables_in_by_ref_closure(\n         rcx: &mut Rcx,\n         region_bound: ty::Region,\n         expr: &ast::Expr,"}]}