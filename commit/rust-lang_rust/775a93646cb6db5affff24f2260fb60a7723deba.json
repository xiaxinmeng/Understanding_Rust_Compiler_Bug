{"sha": "775a93646cb6db5affff24f2260fb60a7723deba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NWE5MzY0NmNiNmRiNWFmZmZmMjRmMjI2MGZiNjBhNzcyM2RlYmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-02-03T23:58:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-02-08T23:51:43Z"}, "message": "build/test the sanitizers only when --enable-sanitizers is used", "tree": {"sha": "3ee34bbe42a432a44a0069c69b97d941ba83990a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee34bbe42a432a44a0069c69b97d941ba83990a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775a93646cb6db5affff24f2260fb60a7723deba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775a93646cb6db5affff24f2260fb60a7723deba", "html_url": "https://github.com/rust-lang/rust/commit/775a93646cb6db5affff24f2260fb60a7723deba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775a93646cb6db5affff24f2260fb60a7723deba/comments", "author": null, "committer": null, "parents": [{"sha": "9af6aa38895d3c1d263c52984666893b9ca22fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af6aa38895d3c1d263c52984666893b9ca22fe1", "html_url": "https://github.com/rust-lang/rust/commit/9af6aa38895d3c1d263c52984666893b9ca22fe1"}], "stats": {"total": 86, "additions": 21, "deletions": 65}, "files": [{"sha": "0904143a7b5f6e23f534ef74b95d23106d817864", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/configure", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -649,6 +649,7 @@ opt codegen-tests 1 \"run the src/test/codegen tests\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n opt vendor 0 \"enable usage of vendored Rust crates\"\n+opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "32cce45e067ad443d8c59163be72509c5835c867", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -236,6 +236,10 @@ pub fn compiletest(build: &Build,\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n     build.add_rust_test_threads(&mut cmd);\n \n+    if build.config.sanitizers {\n+        cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n+    }\n+\n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n     if target.contains(\"android\") {\n@@ -332,10 +336,7 @@ pub fn krate(build: &Build,\n              krate: Option<&str>) {\n     let (name, path, features, root) = match mode {\n         Mode::Libstd => {\n-            (\"libstd\",\n-             \"src/rustc/std_shim\",\n-             build.std_features(),\n-             \"std_shim\")\n+            (\"libstd\", \"src/rustc/std_shim\", build.std_features(), \"std_shim\")\n         }\n         Mode::Libtest => {\n             (\"libtest\", \"src/rustc/test_shim\", String::new(), \"test_shim\")"}, {"sha": "d329f9c069043b5d89640da9375236600e835e23", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -52,15 +52,14 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n         features.push_str(\" force_alloc_system\");\n     }\n \n-    if compiler.stage != 0 && !build.system_llvm(target) {\n+    if compiler.stage != 0 && build.config.sanitizers {\n         // This variable is used by the sanitizer runtime crates, e.g.\n         // rustc_lsan, to build the sanitizer runtime from C code\n         // When this variable is missing, those crates won't compile the C code,\n         // so we don't set this variable during stage0 where llvm-config is\n         // missing\n-        // We also don't build the runtimes when compiling against system llvm\n-        // because some distributions ship llvm packages that have a directory\n-        // layout different from the one that the runtime's build system expects\n+        // We also only build the runtimes when --enable-sanitizers (or its\n+        // config.toml equivalent) is used\n         cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     }\n     cargo.arg(\"--features\").arg(features)"}, {"sha": "a31b202a0ae7b0c3d04df913706ee2d52176116f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -48,6 +48,7 @@ pub struct Config {\n     pub target_config: HashMap<String, Target>,\n     pub full_bootstrap: bool,\n     pub extended: bool,\n+    pub sanitizers: bool,\n \n     // llvm codegen options\n     pub llvm_assertions: bool,\n@@ -108,8 +109,6 @@ pub struct Config {\n /// Per-target configuration stored in the global configuration structure.\n #[derive(Default)]\n pub struct Target {\n-    // `true` if compiling against system LLVM or a pre-built LLVM\n-    pub system_llvm: bool,\n     pub llvm_config: Option<PathBuf>,\n     pub jemalloc: Option<PathBuf>,\n     pub cc: Option<PathBuf>,\n@@ -150,6 +149,7 @@ struct Build {\n     python: Option<String>,\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n+    sanitizers: Option<bool>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -294,6 +294,7 @@ impl Config {\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n+        set(&mut config.sanitizers, build.sanitizers);\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n@@ -437,6 +438,7 @@ impl Config {\n                 (\"VENDOR\", self.vendor),\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n                 (\"EXTENDED\", self.extended),\n+                (\"SANITIZERS\", self.sanitizers),\n             }\n \n             match key {\n@@ -514,7 +516,6 @@ impl Config {\n                                      .or_insert(Target::default());\n                     let root = parse_configure_path(value);\n                     target.llvm_config = Some(push_exe_path(root, &[\"bin\", \"llvm-config\"]));\n-                    target.system_llvm = true;\n                 }\n                 \"CFG_JEMALLOC_ROOT\" if value.len() > 0 => {\n                     let target = self.target_config.entry(self.build.clone())"}, {"sha": "025fe990f91dab67e27e338e8bd9f08faa754ffb", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -124,6 +124,9 @@\n # disabled by default.\n #extended = false\n \n+# Build the sanitizer runtimes\n+#sanitizers = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "1d01b8773cec88c339cff79ecde78fe7401db4b8", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -717,10 +717,6 @@ impl Build {\n         }\n     }\n \n-    fn system_llvm(&self, target: &str) -> bool {\n-        self.config.target_config.get(target).map(|t| t.system_llvm).unwrap_or(false)\n-    }\n-\n     /// Returns the path to `FileCheck` binary for the specified target\n     fn llvm_filecheck(&self, target: &str) -> PathBuf {\n         let target_config = self.config.target_config.get(target);"}, {"sha": "bd24f7657e76169f04a24ffdc58e8adcf6223edb", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -127,7 +127,7 @@ pub enum Attribute {\n     ZExt            = 18,\n     InReg           = 19,\n     SanitizeThread  = 20,\n-    SanitizeAddress  = 21,\n+    SanitizeAddress = 21,\n     SanitizeMemory  = 22,\n }\n "}, {"sha": "5931145f3a47d014033ff1a1744043d4edc0d729", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -1,21 +1,11 @@\n -include ../tools.mk\n \n # NOTE the address sanitizer only supports x86_64 linux\n-ifndef IS_WINDOWS\n-ifeq ($(shell uname),Linux)\n-ifeq ($(shell uname -m),x86_64)\n+ifdef SANITIZER_SUPPORT\n all:\n \t$(RUSTC) -g -Z sanitizer=address -Z print-link-args overflow.rs | grep -q librustc_asan\n \t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n else\n all:\n \n endif\n-else\n-all:\n-\n-endif\n-else\n-all:\n-\n-endif"}, {"sha": "f02d948fdc84f58460e9fe409e1cfd541e48bc7e", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -1,23 +1,10 @@\n -include ../tools.mk\n \n-# NOTE the leak sanitizer only supports x86_64 linux\n-# Also, this particular sanitizer sometimes doesn't work so we are not going to\n-# run the binary\n-ifndef IS_WINDOWS\n-ifeq ($(shell uname),Linux)\n-ifeq ($(shell uname -m),x86_64)\n+ifdef SANITIZER_SUPPORT\n all:\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n else\n all:\n \n endif\n-else\n-all:\n-\n-endif\n-else\n-all:\n-\n-endif"}, {"sha": "08682e5975e5163e80843f3b5a2c14f90e727092", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -1,21 +1,10 @@\n -include ../tools.mk\n \n-# NOTE the memory sanitizer only supports x86_64 linux\n-ifndef IS_WINDOWS\n-ifeq ($(shell uname),Linux)\n-ifeq ($(shell uname -m),x86_64)\n+ifdef SANITIZER_SUPPORT\n all:\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | grep -q librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | grep -q use-of-uninitialized-value\n else\n all:\n \n endif\n-else\n-all:\n-\n-endif\n-else\n-all:\n-\n-endif"}, {"sha": "8bb89a241cb053007ca3c9ead0c144a8078c6442", "filename": "src/test/run-make/sanitizer-thread/Makefile", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/775a93646cb6db5affff24f2260fb60a7723deba/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile?ref=775a93646cb6db5affff24f2260fb60a7723deba", "patch": "@@ -1,21 +1,10 @@\n -include ../tools.mk\n \n-# NOTE the leak sanitizer only supports x86_64 linux\n-ifndef IS_WINDOWS\n-ifeq ($(shell uname),Linux)\n-ifeq ($(shell uname -m),x86_64)\n+ifdef SANITIZER_SUPPORT\n all:\n \t$(RUSTC) -g -Z sanitizer=thread -Z print-link-args racy.rs | grep -q librustc_tsan\n \t$(TMPDIR)/racy 2>&1 | grep -q 'data race'\n else\n all:\n \n endif\n-else\n-all:\n-\n-endif\n-else\n-all:\n-\n-endif"}]}