{"sha": "0fb6e63c0438ace4ad9d496376af955c0baacf04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjZlNjNjMDQzOGFjZTRhZDlkNDk2Mzc2YWY5NTVjMGJhYWNmMDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T15:13:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T15:27:34Z"}, "message": "encode_utf8_raw is not always valid UTF-8; clarify comments", "tree": {"sha": "86be9b89d2b2099983548b5407f970df19a4b8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86be9b89d2b2099983548b5407f970df19a4b8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb6e63c0438ace4ad9d496376af955c0baacf04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb6e63c0438ace4ad9d496376af955c0baacf04", "html_url": "https://github.com/rust-lang/rust/commit/0fb6e63c0438ace4ad9d496376af955c0baacf04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb6e63c0438ace4ad9d496376af955c0baacf04/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c627c33dde998cfe42bcde07e1c5692370daf63", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c627c33dde998cfe42bcde07e1c5692370daf63", "html_url": "https://github.com/rust-lang/rust/commit/9c627c33dde998cfe42bcde07e1c5692370daf63"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "bf09b28ff693e1430aea78d31360c825b25901c4", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e63c0438ace4ad9d496376af955c0baacf04/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e63c0438ace4ad9d496376af955c0baacf04/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=0fb6e63c0438ace4ad9d496376af955c0baacf04", "patch": "@@ -661,7 +661,8 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        encode_utf8_raw(self as u32, dst)\n+        // SAFETY: `char` is not a surrogate, so this is valid UTF-8.\n+        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n@@ -1631,7 +1632,11 @@ fn len_utf8(code: u32) -> usize {\n /// Encodes a raw u32 value as UTF-8 into the provided byte buffer,\n /// and then returns the subslice of the buffer that contains the encoded character.\n ///\n-/// Unlike `char::encode_utf8`, this method can be called on codepoints in the surrogate range.\n+/// Unlike `char::encode_utf8`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n+/// The result is valid [generalized UTF-8] but not valid UTF-8.\n+///\n+/// [generalized UTF-8]: https://simonsapin.github.io/wtf-8/#generalized-utf8\n ///\n /// # Panics\n ///\n@@ -1640,7 +1645,7 @@ fn len_utf8(code: u32) -> usize {\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n #[doc(hidden)]\n #[inline]\n-pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut str {\n+pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {\n     let len = len_utf8(code);\n     match (len, &mut dst[..]) {\n         (1, [a, ..]) => {\n@@ -1668,14 +1673,14 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut str {\n             dst.len(),\n         ),\n     };\n-    // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n-    unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n+    &mut dst[..len]\n }\n \n /// Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\n /// and then returns the subslice of the buffer that contains the encoded character.\n ///\n-/// Unlike `char::encode_utf16`, this method can be called on codepoints in the surrogate range.\n+/// Unlike `char::encode_utf16`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n ///\n /// # Panics\n ///\n@@ -1688,7 +1693,7 @@ pub fn encode_utf16_raw(mut code: u32, dst: &mut [u16]) -> &mut [u16] {\n     // SAFETY: each arm checks whether there are enough bits to write into\n     unsafe {\n         if (code & 0xFFFF) == code && !dst.is_empty() {\n-            // The BMP falls through (assuming non-surrogate, as it should)\n+            // The BMP falls through\n             *dst.get_unchecked_mut(0) = code as u16;\n             slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n         } else if dst.len() >= 2 {"}, {"sha": "ccb54b7e68d187b29172ed1e7b91260011ce2447", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e63c0438ace4ad9d496376af955c0baacf04/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e63c0438ace4ad9d496376af955c0baacf04/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=0fb6e63c0438ace4ad9d496376af955c0baacf04", "patch": "@@ -202,7 +202,7 @@ impl Wtf8Buf {\n     /// This does **not** include the WTF-8 concatenation check.\n     fn push_code_point_unchecked(&mut self, code_point: CodePoint) {\n         let mut bytes = [0; 4];\n-        let bytes = char::encode_utf8_raw(code_point.value, &mut bytes).as_bytes();\n+        let bytes = char::encode_utf8_raw(code_point.value, &mut bytes);\n         self.bytes.extend_from_slice(bytes)\n     }\n "}]}