{"sha": "4ee704703444a23133e0c196e3a3fa75b8b7c5e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZTcwNDcwMzQ0NGEyMzEzM2UwYzE5NmUzYTNmYTc1YjhiN2M1ZTM=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-07-05T14:49:02Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-07-07T22:44:50Z"}, "message": "reference: miscellaneous fixes", "tree": {"sha": "306a41427e4b21e21895ab5d88c09ea733df22b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306a41427e4b21e21895ab5d88c09ea733df22b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee704703444a23133e0c196e3a3fa75b8b7c5e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee704703444a23133e0c196e3a3fa75b8b7c5e3", "html_url": "https://github.com/rust-lang/rust/commit/4ee704703444a23133e0c196e3a3fa75b8b7c5e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee704703444a23133e0c196e3a3fa75b8b7c5e3/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "html_url": "https://github.com/rust-lang/rust/commit/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "af02fc7a5bb36aa4e9e2c7f1f4f899e4110d8965", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ee704703444a23133e0c196e3a3fa75b8b7c5e3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ee704703444a23133e0c196e3a3fa75b8b7c5e3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=4ee704703444a23133e0c196e3a3fa75b8b7c5e3", "patch": "@@ -343,10 +343,10 @@ The type of an _unsuffixed_ integer literal is determined by type inference:\n * If an integer type can be _uniquely_ determined from the surrounding\n   program context, the unsuffixed integer literal has that type.\n \n-* If the program context underconstrains the type, it defaults to the\n+* If the program context under-constrains the type, it defaults to the\n   signed 32-bit integer `i32`.\n \n-* If the program context overconstrains the type, it is considered a\n+* If the program context over-constrains the type, it is considered a\n   static type error.\n \n Examples of integer literals of various forms:\n@@ -382,9 +382,9 @@ type inference:\n   surrounding program context, the unsuffixed floating-point literal\n   has that type.\n \n-* If the program context underconstrains the type, it defaults to `f64`.\n+* If the program context under-constrains the type, it defaults to `f64`.\n \n-* If the program context overconstrains the type, it is considered a\n+* If the program context over-constrains the type, it is considered a\n   static type error.\n \n Examples of floating-point literals of various forms:\n@@ -1292,7 +1292,7 @@ All access to a static is safe, but there are a number of restrictions on\n statics:\n \n * Statics may not contain any destructors.\n-* The types of static values must ascribe to `Sync` to allow threadsafe access.\n+* The types of static values must ascribe to `Sync` to allow thread-safe access.\n * Statics may not refer to other statics by value, only by reference.\n * Constants cannot refer to statics.\n \n@@ -1694,7 +1694,7 @@ explain, here's a few use cases and what they would entail:\n * A crate needs a global available \"helper module\" to itself, but it doesn't\n   want to expose the helper module as a public API. To accomplish this, the\n   root of the crate's hierarchy would have a private module which then\n-  internally has a \"public api\". Because the entire crate is a descendant of\n+  internally has a \"public API\". Because the entire crate is a descendant of\n   the root, then the entire local crate can access this private module through\n   the second case.\n \n@@ -3964,7 +3964,7 @@ In general, `--crate-type=bin` or `--crate-type=lib` should be sufficient for\n all compilation needs, and the other options are just available if more\n fine-grained control is desired over the output format of a Rust crate.\n \n-# Appendix: Rationales and design tradeoffs\n+# Appendix: Rationales and design trade-offs\n \n *TODO*.\n \n@@ -3974,7 +3974,7 @@ Rust is not a particularly original language, with design elements coming from\n a wide range of sources. Some of these are listed below (including elements\n that have since been removed):\n \n-* SML, OCaml: algebraic datatypes, pattern matching, type inference,\n+* SML, OCaml: algebraic data types, pattern matching, type inference,\n   semicolon statement separation\n * C++: references, RAII, smart pointers, move semantics, monomorphisation,\n   memory model"}]}