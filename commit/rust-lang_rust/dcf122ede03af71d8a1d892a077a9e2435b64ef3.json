{"sha": "dcf122ede03af71d8a1d892a077a9e2435b64ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZjEyMmVkZTAzYWY3MWQ4YTFkODkyYTA3N2E5ZTI0MzViNjRlZjM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-22T21:49:17Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-22T21:50:18Z"}, "message": "Change the type of the second argument of upcalls to be a %task*.", "tree": {"sha": "057dde3f2fbb2aa24812198595cdd7f46ab61cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057dde3f2fbb2aa24812198595cdd7f46ab61cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf122ede03af71d8a1d892a077a9e2435b64ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf122ede03af71d8a1d892a077a9e2435b64ef3", "html_url": "https://github.com/rust-lang/rust/commit/dcf122ede03af71d8a1d892a077a9e2435b64ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf122ede03af71d8a1d892a077a9e2435b64ef3/comments", "author": null, "committer": null, "parents": [{"sha": "c7cd60a3ec2cd81b98aac6db656a79c00dafb90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cd60a3ec2cd81b98aac6db656a79c00dafb90d", "html_url": "https://github.com/rust-lang/rust/commit/c7cd60a3ec2cd81b98aac6db656a79c00dafb90d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b75af850386861d425a6a2b8d4d600306d3a7ba2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dcf122ede03af71d8a1d892a077a9e2435b64ef3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf122ede03af71d8a1d892a077a9e2435b64ef3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=dcf122ede03af71d8a1d892a077a9e2435b64ef3", "patch": "@@ -855,8 +855,11 @@ fn decl_upcall_glue(ModuleRef llmod, type_names tn,\n     let int n = _n as int;\n     let str s = abi.upcall_glue_name(n, pass_task);\n     let vec[TypeRef] args = vec(T_int()); // callee\n-    if (!pass_task) {\n-        args += vec(T_int()); // taskptr, will not be passed\n+\n+    args += vec(T_taskptr(tn));\n+\n+    if (pass_task) {\n+        n -= 1; // taskptr is included in n\n     }\n     args += _vec.init_elt[TypeRef](T_int(), n as uint);\n \n@@ -877,10 +880,8 @@ fn get_upcall(&hashmap[str, ValueRef] upcalls,\n \n fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     auto cxx = cx.fcx.ccx;\n-    auto lltaskptr = cx.build.PtrToInt(cx.fcx.lltaskptr, T_int());\n-    auto args2 = vec(lltaskptr) + args;\n-    auto t = trans_upcall2(cx.build, cxx.glues, lltaskptr,\n-                           cxx.upcalls, cxx.tn, cxx.llmod, name, true, args2);\n+    auto t = trans_upcall2(cx.build, cxx.glues, cx.fcx.lltaskptr,\n+                           cxx.upcalls, cxx.tn, cxx.llmod, name, true, args);\n     ret res(cx, t);\n }\n \n@@ -889,6 +890,9 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n                  type_names tn, ModuleRef llmod, str name,\n                  bool pass_task, vec[ValueRef] args) -> ValueRef {\n     let int n = (_vec.len[ValueRef](args) as int);\n+    if (pass_task) {\n+        n += 1;\n+    }\n     let ValueRef llupcall = get_upcall(upcalls, llmod, name, n);\n     llupcall = llvm.LLVMConstPointerCast(llupcall, T_int());\n \n@@ -900,9 +904,7 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n     }\n     let vec[ValueRef] call_args = vec(llupcall);\n \n-    if (!pass_task) {\n-        call_args += vec(lltaskptr);\n-    }\n+    call_args += vec(lltaskptr);\n \n     for (ValueRef a in args) {\n         call_args += vec(b.ZExtOrBitCast(a, T_int()));\n@@ -5701,11 +5703,9 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n     auto arg_n = 3u;\n     auto pass_task;\n \n-    auto lltaskptr = bcx.build.PtrToInt(fcx.lltaskptr, T_int());\n     alt (abi) {\n         case (ast.native_abi_rust) {\n             pass_task = true;\n-            call_args += vec(lltaskptr);\n             for each (uint i in _uint.range(0u, num_ty_param)) {\n                 auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n                 check (llarg as int != 0);\n@@ -5725,8 +5725,8 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n         arg_n += 1u;\n     }\n \n-    auto r = trans_upcall2(bcx.build, cx.glues, lltaskptr, cx.upcalls, cx.tn,\n-                           cx.llmod, name, pass_task, call_args);\n+    auto r = trans_upcall2(bcx.build, cx.glues, fcx.lltaskptr, cx.upcalls,\n+                           cx.tn, cx.llmod, name, pass_task, call_args);\n     auto rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n     bcx.build.Store(r, rptr);\n     bcx.build.RetVoid();"}]}