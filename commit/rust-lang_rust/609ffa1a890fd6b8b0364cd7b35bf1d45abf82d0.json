{"sha": "609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOWZmYTFhODkwZmQ2YjhiMDM2NGNkN2IzNWJmMWQ0NWFiZjgyZDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-22T00:47:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-25T18:55:50Z"}, "message": "Reword malformed attribute input diagnostics\n\n- Handle empty `cfg_attr` attribute\n- Reword empty `derive` attribute error\n- Use consistend error message: \"malformed `attrname` attribute input\"\n- Provide suggestions when possible\n- Move note/help to label/suggestion\n- Use consistent wording \"ill-formed\" -> \"malformed\"\n- Move diagnostic logic out of parser", "tree": {"sha": "dbd09e2fa625c27c100cb21e6b196c9f45b5ec27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd09e2fa625c27c100cb21e6b196c9f45b5ec27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "html_url": "https://github.com/rust-lang/rust/commit/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f5786a324c40b2d8b2d0df98456e48fb45d30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f5786a324c40b2d8b2d0df98456e48fb45d30c", "html_url": "https://github.com/rust-lang/rust/commit/02f5786a324c40b2d8b2d0df98456e48fb45d30c"}], "stats": {"total": 647, "additions": 375, "deletions": 272}, "files": [{"sha": "139f4343117af8b37ac2eb91a0b2d34791917c8c", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -191,7 +191,7 @@ impl<'a> LintLevelsBuilder<'a> {\n         let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {\n-            struct_span_err!(sess, span, E0452, \"malformed lint attribute\")\n+            struct_span_err!(sess, span, E0452, \"malformed lint attribute input\")\n         };\n         for attr in attrs {\n             let level = match Level::from_symbol(attr.name_or_empty()) {\n@@ -238,18 +238,20 @@ impl<'a> LintLevelsBuilder<'a> {\n                                 }\n                                 reason = Some(rationale);\n                             } else {\n-                                let mut err = bad_attr(name_value.span);\n-                                err.help(\"reason must be a string literal\");\n-                                err.emit();\n+                                bad_attr(name_value.span)\n+                                    .span_label(name_value.span, \"reason must be a string literal\")\n+                                    .emit();\n                             }\n                         } else {\n-                            let mut err = bad_attr(item.span);\n-                            err.emit();\n+                            bad_attr(item.span)\n+                                .span_label(item.span, \"bad attribute argument\")\n+                                .emit();\n                         }\n                     },\n                     ast::MetaItemKind::List(_) => {\n-                        let mut err = bad_attr(item.span);\n-                        err.emit();\n+                        bad_attr(item.span)\n+                            .span_label(item.span, \"bad attribute argument\")\n+                            .emit();\n                     }\n                 }\n             }\n@@ -258,14 +260,20 @@ impl<'a> LintLevelsBuilder<'a> {\n                 let meta_item = match li.meta_item() {\n                     Some(meta_item) if meta_item.is_word() => meta_item,\n                     _ => {\n-                        let mut err = bad_attr(li.span());\n+                        let sp = li.span();\n+                        let mut err = bad_attr(sp);\n+                        let mut add_label = true;\n                         if let Some(item) = li.meta_item() {\n                             if let ast::MetaItemKind::NameValue(_) = item.node {\n                                 if item.path == sym::reason {\n-                                    err.help(\"reason in lint attribute must come last\");\n+                                    err.span_label(sp, \"reason in lint attribute must come last\");\n+                                    add_label = false;\n                                 }\n                             }\n                         }\n+                        if add_label {\n+                            err.span_label(sp, \"bad attribute argument\");\n+                        }\n                         err.emit();\n                         continue;\n                     }\n@@ -318,15 +326,14 @@ impl<'a> LintLevelsBuilder<'a> {\n                                      Also `cfg_attr(cargo-clippy)` won't be necessary anymore\",\n                                     name\n                                 );\n-                                let mut err = lint::struct_lint_level(\n+                                lint::struct_lint_level(\n                                     self.sess,\n                                     lint,\n                                     lvl,\n                                     src,\n                                     Some(li.span().into()),\n                                     &msg,\n-                                );\n-                                err.span_suggestion(\n+                                ).span_suggestion(\n                                     li.span(),\n                                     \"change it to\",\n                                     new_lint_name.to_string(),"}, {"sha": "4481892bcf244ca2ad572058a54669a7df136f04", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -10,7 +10,7 @@ use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n-use syntax::span_err;\n+use syntax::struct_span_err;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -29,8 +29,10 @@ struct PluginLoader<'a> {\n     plugins: Vec<PluginRegistrar>,\n }\n \n-fn call_malformed_plugin_attribute(a: &Session, b: Span) {\n-    span_err!(a, b, E0498, \"malformed plugin attribute\");\n+fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n+    struct_span_err!(sess, span, E0498, \"malformed `plugin` attribute\")\n+        .span_label(span, \"malformed attribute\")\n+        .emit();\n }\n \n /// Read plugin metadata and dynamically load registrar functions."}, {"sha": "00990a5c5b579fee2bdddb82a13e4e793232d851", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -48,6 +48,8 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n+use errors::Applicability;\n+\n use std::iter;\n \n struct OnlySelfBounds(bool);\n@@ -2400,23 +2402,26 @@ fn from_target_feature(\n         Some(list) => list,\n         None => return,\n     };\n+    let bad_item = |span| {\n+        let msg = \"malformed `target_feature` attribute input\";\n+        let code = \"enable = \\\"..\\\"\".to_owned();\n+        tcx.sess.struct_span_err(span, &msg)\n+            .span_suggestion(span, \"must be of the form\", code, Applicability::HasPlaceholders)\n+            .emit();\n+    };\n     let rust_features = tcx.features();\n     for item in list {\n         // Only `enable = ...` is accepted in the meta item list\n         if !item.check_name(sym::enable) {\n-            let msg = \"#[target_feature(..)] only accepts sub-keys of `enable` \\\n-                       currently\";\n-            tcx.sess.span_err(item.span(), &msg);\n+            bad_item(item.span());\n             continue;\n         }\n \n         // Must be of the form `enable = \"...\"` ( a string)\n         let value = match item.value_str() {\n             Some(value) => value,\n             None => {\n-                let msg = \"#[target_feature] attribute must be of the form \\\n-                           #[target_feature(enable = \\\"..\\\")]\";\n-                tcx.sess.span_err(item.span(), &msg);\n+                bad_item(item.span());\n                 continue;\n             }\n         };\n@@ -2428,12 +2433,14 @@ fn from_target_feature(\n                 Some(g) => g,\n                 None => {\n                     let msg = format!(\n-                        \"the feature named `{}` is not valid for \\\n-                         this target\",\n+                        \"the feature named `{}` is not valid for this target\",\n                         feature\n                     );\n                     let mut err = tcx.sess.struct_span_err(item.span(), &msg);\n-\n+                    err.span_label(\n+                        item.span(),\n+                        format!(\"`{}` is not valid for this target\", feature),\n+                    );\n                     if feature.starts_with(\"+\") {\n                         let valid = whitelist.contains_key(&feature[1..]);\n                         if valid {\n@@ -2571,9 +2578,11 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n             }\n         } else if attr.check_name(sym::target_feature) {\n             if tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n-                let msg = \"#[target_feature(..)] can only be applied to \\\n-                           `unsafe` function\";\n-                tcx.sess.span_err(attr.span, msg);\n+                let msg = \"#[target_feature(..)] can only be applied to `unsafe` functions\";\n+                tcx.sess.struct_span_err(attr.span, msg)\n+                    .span_label(attr.span, \"can only be applied to `unsafe` functions\")\n+                    .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n+                    .emit();\n             }\n             from_target_feature(\n                 tcx,"}, {"sha": "b96f13335b2fecf8833a692b2aacf45c93a99ad2", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -92,7 +92,15 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n                     }\n \n                     diagnostic.map(|d| {\n-                        span_err!(d, attr.span, E0633, \"malformed `#[unwind]` attribute\");\n+                        struct_span_err!(d, attr.span, E0633, \"malformed `unwind` attribute input\")\n+                            .span_label(attr.span, \"invalid argument\")\n+                            .span_suggestions(\n+                                attr.span,\n+                                \"the allowed arguments are `allowed` and `aborts`\",\n+                                (vec![\"allowed\", \"aborts\"]).into_iter()\n+                                    .map(|s| format!(\"#[unwind({})]\", s)),\n+                                Applicability::MachineApplicable,\n+                            ).emit();\n                     });\n                 }\n             }"}, {"sha": "fc413caa428dd748e8cf7610f10ac424034021fa", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -94,6 +94,22 @@ impl<'a> StripUnconfigured<'a> {\n         if !attr.check_name(sym::cfg_attr) {\n             return vec![attr];\n         }\n+        if attr.tokens.len() == 0 {\n+            self.sess.span_diagnostic\n+                .struct_span_err(\n+                    attr.span,\n+                    \"malformed `cfg_attr` attribute input\",\n+                ).span_suggestion(\n+                    attr.span,\n+                    \"missing condition and attribute\",\n+                    \"#[cfg_attr(condition, attribute, other_attribute, ...)]\".to_owned(),\n+                    Applicability::HasPlaceholders,\n+                ).note(\"for more information, visit \\\n+                       <https://doc.rust-lang.org/reference/conditional-compilation.html\\\n+                       #the-cfg_attr-attribute>\")\n+                .emit();\n+            return Vec::new();\n+        }\n \n         let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n             parser.expect(&token::OpenDelim(token::Paren))?;"}, {"sha": "4db206094d349d44888561ec18be60a20c4594ee", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -5,6 +5,7 @@ use crate::ext::base::ExtCtxt;\n use crate::ext::build::AstBuilder;\n use crate::parse::parser::PathStyle;\n use crate::symbol::{Symbol, sym};\n+use crate::errors::Applicability;\n \n use syntax_pos::Span;\n \n@@ -17,8 +18,13 @@ pub fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) ->\n             return true;\n         }\n         if !attr.is_meta_item_list() {\n-            cx.span_err(attr.span,\n-                        \"attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\");\n+            cx.struct_span_err(attr.span, \"malformed `derive` attribute input\")\n+                .span_suggestion(\n+                    attr.span,\n+                    \"missing traits to be derived\",\n+                    \"#[derive(Trait1, Trait2, ...)]\".to_owned(),\n+                    Applicability::HasPlaceholders,\n+                ).emit();\n             return false;\n         }\n "}, {"sha": "b2646efe3e4649f34f6eb99866dcfd9e3321b157", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -25,7 +25,7 @@ use crate::parse::{token, ParseSess};\n use crate::symbol::{Symbol, kw, sym};\n use crate::tokenstream::TokenTree;\n \n-use errors::{DiagnosticBuilder, Handler};\n+use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -1422,7 +1422,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         Normal,\n         template!(\n             Word,\n-            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"#,\n+            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n             NameValueStr: \"reason\"\n         ),\n         Ungated\n@@ -1858,24 +1858,32 @@ impl<'a> PostExpansionVisitor<'a> {\n \n         match attr.parse_meta(self.context.parse_sess) {\n             Ok(meta) => if !should_skip(name) && !template.compatible(&meta.node) {\n+                let error_msg = format!(\"malformed `{}` attribute input\", name);\n                 let mut msg = \"attribute must be of the form \".to_owned();\n+                let mut suggestions = vec![];\n                 let mut first = true;\n                 if template.word {\n                     first = false;\n-                    msg.push_str(&format!(\"`#[{}{}]`\", name, \"\"));\n+                    let code = format!(\"#[{}]\", name);\n+                    msg.push_str(&format!(\"`{}`\", &code));\n+                    suggestions.push(code);\n                 }\n                 if let Some(descr) = template.list {\n                     if !first {\n                         msg.push_str(\" or \");\n                     }\n                     first = false;\n-                    msg.push_str(&format!(\"`#[{}({})]`\", name, descr));\n+                    let code = format!(\"#[{}({})]\", name, descr);\n+                    msg.push_str(&format!(\"`{}`\", &code));\n+                    suggestions.push(code);\n                 }\n                 if let Some(descr) = template.name_value_str {\n                     if !first {\n                         msg.push_str(\" or \");\n                     }\n-                    msg.push_str(&format!(\"`#[{} = \\\"{}\\\"]`\", name, descr));\n+                    let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n+                    msg.push_str(&format!(\"`{}`\", &code));\n+                    suggestions.push(code);\n                 }\n                 if should_warn(name) {\n                     self.context.parse_sess.buffer_lint(\n@@ -1885,7 +1893,17 @@ impl<'a> PostExpansionVisitor<'a> {\n                         &msg,\n                     );\n                 } else {\n-                    self.context.parse_sess.span_diagnostic.span_err(meta.span, &msg);\n+                    self.context.parse_sess.span_diagnostic.struct_span_err(meta.span, &error_msg)\n+                        .span_suggestions(\n+                            meta.span,\n+                            if suggestions.len() == 1 {\n+                                \"must be of the form\"\n+                            } else {\n+                                \"the following are the possible correct uses\"\n+                            },\n+                            suggestions.into_iter(),\n+                            Applicability::HasPlaceholders,\n+                        ).emit();\n                 }\n             }\n             Err(mut err) => err.emit(),\n@@ -2298,6 +2316,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n         if let Some(reason) = reason {\n             err.span_note(span, reason);\n+        } else {\n+            err.span_label(span, \"feature has been removed\");\n         }\n         err.emit();\n     }\n@@ -2379,12 +2399,24 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             None => continue,\n         };\n \n+        let bad_input = |span| {\n+            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n+        };\n+\n         for mi in list {\n             let name = match mi.ident() {\n                 Some(ident) if mi.is_word() => ident.name,\n-                _ => {\n-                    span_err!(span_handler, mi.span(), E0556,\n-                            \"malformed feature, expected just one word\");\n+                Some(ident) => {\n+                    bad_input(mi.span()).span_suggestion(\n+                        mi.span(),\n+                        \"expected just one word\",\n+                        format!(\"{}\", ident.name),\n+                        Applicability::MaybeIncorrect,\n+                    ).emit();\n+                    continue\n+                }\n+                None => {\n+                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n                     continue\n                 }\n             };"}, {"sha": "141664c109228a0d1fb6d87f2d7f5eb2674e829d", "filename": "src/test/ui/deprecation/deprecated_no_stack_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated_no_stack_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated_no_stack_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated_no_stack_check.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -2,7 +2,7 @@ error[E0557]: feature has been removed\n   --> $DIR/deprecated_no_stack_check.rs:2:12\n    |\n LL | #![feature(no_stack_check)]\n-   |            ^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^ feature has been removed\n \n error: aborting due to previous error\n "}, {"sha": "fbdfbd1600d7a3eedd987731c03859316a363d75", "filename": "src/test/ui/deprecation/invalid-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,4 +1,4 @@\n-#[deprecated = b\"test\"] //~ ERROR attribute must be of the form\n+#[deprecated = b\"test\"] //~ ERROR malformed `deprecated` attribute\n fn foo() {}\n \n fn main() {}"}, {"sha": "a82eed24814cf77a8bca11f8e3a909c711b13c83", "filename": "src/test/ui/deprecation/invalid-literal.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,16 @@\n-error: attribute must be of the form `#[deprecated]` or `#[deprecated(/*opt*/ since = \"version\", /*opt*/ note = \"reason)]` or `#[deprecated = \"reason\"]`\n+error: malformed `deprecated` attribute input\n   --> $DIR/invalid-literal.rs:1:1\n    |\n LL | #[deprecated = b\"test\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n+help: the following are the possible correct uses\n+   |\n+LL | #[deprecated]\n+   | ^^^^^^^^^^^^^\n+LL | #[deprecated(/*opt*/ since = \"version\", /*opt*/ note = \"reason\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[deprecated = \"reason\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7f074168f8e02c42c67bca54f4d1866741c8092a", "filename": "src/test/ui/error-codes/E0452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error[E0452]: malformed lint attribute\n+error[E0452]: malformed lint attribute input\n   --> $DIR/E0452.rs:1:10\n    |\n LL | #![allow(foo = \"\")]\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^ bad attribute argument\n \n error: aborting due to previous error\n "}, {"sha": "4ced941aad5d0cd949d7d05adb080356151641e4", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -13,7 +13,7 @@ mod macro_escape {\n     //~^ ERROR arguments to macro_use are not allowed here\n \n     #[macro_use = \"2700\"] struct S;\n-    //~^ ERROR attribute must be of the form\n+    //~^ ERROR malformed `macro_use` attribute\n \n     #[macro_use] fn f() { }\n "}, {"sha": "665fe2880871edc421802e8f1cb920e2d0cbad30", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -16,11 +16,17 @@ error: arguments to macro_use are not allowed here\n LL |     mod inner { #![macro_use(my_macro)] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: attribute must be of the form `#[macro_use]` or `#[macro_use(name1, name2, ...)]`\n+error: malformed `macro_use` attribute input\n   --> $DIR/issue-43106-gating-of-macro_use.rs:15:5\n    |\n LL |     #[macro_use = \"2700\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n+help: the following are the possible correct uses\n+   |\n+LL |     #[macro_use] struct S;\n+   |     ^^^^^^^^^^^^\n+LL |     #[macro_use(name1, name2, ...)] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f8aa23d95e5b6c24ea04bc27bb6963fbf3d80c10", "filename": "src/test/ui/gated-bad-feature.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,13 +1,9 @@\n-#![feature(\n-    foo_bar_baz,\n-    foo(bar),\n-    foo = \"baz\"\n-)]\n-//~^^^ ERROR: malformed feature\n-//~^^^ ERROR: malformed feature\n+#![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n+//~^ ERROR malformed `feature`\n+//~| ERROR malformed `feature`\n \n-#![feature] //~ ERROR: attribute must be of the form\n-#![feature = \"foo\"] //~ ERROR: attribute must be of the form\n+#![feature] //~ ERROR malformed `feature` attribute\n+#![feature = \"foo\"] //~ ERROR malformed `feature` attribute\n \n #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n "}, {"sha": "ff6780e66a8ce3fcb150924d0f293d7c575a9bb5", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,32 +1,32 @@\n-error[E0556]: malformed feature, expected just one word\n-  --> $DIR/gated-bad-feature.rs:3:5\n+error[E0556]: malformed `feature` attribute input\n+  --> $DIR/gated-bad-feature.rs:1:25\n    |\n-LL |     foo(bar),\n-   |     ^^^^^^^^\n+LL | #![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n+   |                         ^^^^^^^^ help: expected just one word: `foo`\n \n-error[E0556]: malformed feature, expected just one word\n-  --> $DIR/gated-bad-feature.rs:4:5\n+error[E0556]: malformed `feature` attribute input\n+  --> $DIR/gated-bad-feature.rs:1:35\n    |\n-LL |     foo = \"baz\"\n-   |     ^^^^^^^^^^^\n+LL | #![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)]\n+   |                                   ^^^^^^^^^^^ help: expected just one word: `foo`\n \n error[E0557]: feature has been removed\n-  --> $DIR/gated-bad-feature.rs:12:12\n+  --> $DIR/gated-bad-feature.rs:8:12\n    |\n LL | #![feature(test_removed_feature)]\n-   |            ^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^ feature has been removed\n \n-error: attribute must be of the form `#[feature(name1, name1, ...)]`\n-  --> $DIR/gated-bad-feature.rs:9:1\n+error: malformed `feature` attribute input\n+  --> $DIR/gated-bad-feature.rs:5:1\n    |\n LL | #![feature]\n-   | ^^^^^^^^^^^\n+   | ^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n \n-error: attribute must be of the form `#[feature(name1, name1, ...)]`\n-  --> $DIR/gated-bad-feature.rs:10:1\n+error: malformed `feature` attribute input\n+  --> $DIR/gated-bad-feature.rs:6:1\n    |\n LL | #![feature = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "621587af35ed702a6698889ea551854fcce3e79f", "filename": "src/test/ui/invalid_crate_type_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,5 +1,5 @@\n // regression test for issue 16974\n-#![crate_type(lib)]  //~ ERROR attribute must be of the form\n+#![crate_type(lib)]  //~ ERROR malformed `crate_type` attribute input\n \n fn my_lib_fn() {}\n "}, {"sha": "92bed231586f9eacde055fbffa681c9e49d9dbe8", "filename": "src/test/ui/invalid_crate_type_syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error: attribute must be of the form `#[crate_type = \"bin|lib|...\"]`\n+error: malformed `crate_type` attribute input\n   --> $DIR/invalid_crate_type_syntax.rs:2:1\n    |\n LL | #![crate_type(lib)]\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}, {"sha": "b80907560c385724e0ceba22ad511ceca96f9e66", "filename": "src/test/ui/issues/issue-43988.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     #[repr]\n     let _y = \"123\";\n     //~^^ ERROR attribute should not be applied to a statement\n-    //~| ERROR attribute must be of the form\n+    //~| ERROR malformed `repr` attribute\n \n     fn foo() {}\n \n@@ -34,5 +34,5 @@ fn main() {\n \n     let _z = #[repr] 1;\n     //~^ ERROR attribute should not be applied to an expression\n-    //~| ERROR attribute must be of the form\n+    //~| ERROR malformed `repr` attribute\n }"}, {"sha": "c2f0cc6f0ffed2a6b2e5d4f1a015436490351039", "filename": "src/test/ui/issues/issue-43988.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,14 +1,14 @@\n-error: attribute must be of the form `#[repr(C, packed, ...)]`\n+error: malformed `repr` attribute input\n   --> $DIR/issue-43988.rs:24:5\n    |\n LL |     #[repr]\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: must be of the form: `#[repr(C, packed, ...)]`\n \n-error: attribute must be of the form `#[repr(C, packed, ...)]`\n+error: malformed `repr` attribute input\n   --> $DIR/issue-43988.rs:35:14\n    |\n LL |     let _z = #[repr] 1;\n-   |              ^^^^^^^\n+   |              ^^^^^^^ help: must be of the form: `#[repr(C, packed, ...)]`\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43988.rs:5:5"}, {"sha": "0d327677d5469923805047d75a67060d96c9c25d", "filename": "src/test/ui/lint/lint-malformed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,4 +1,4 @@\n-#![deny = \"foo\"] //~ ERROR attribute must be of the form\n+#![deny = \"foo\"] //~ ERROR malformed `deny` attribute input\n #![allow(bar = \"baz\")] //~ ERROR malformed lint attribute\n \n fn main() { }"}, {"sha": "f4876290ddb5d16f5cc4dc9e25168d42f13a02ec", "filename": "src/test/ui/lint/lint-malformed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,14 +1,14 @@\n-error[E0452]: malformed lint attribute\n+error[E0452]: malformed lint attribute input\n   --> $DIR/lint-malformed.rs:2:10\n    |\n LL | #![allow(bar = \"baz\")]\n-   |          ^^^^^^^^^^^\n+   |          ^^^^^^^^^^^ bad attribute argument\n \n-error: attribute must be of the form `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n+error: malformed `deny` attribute input\n   --> $DIR/lint-malformed.rs:1:1\n    |\n LL | #![deny = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84db885ac0949a6ffd0cef6c26b4bcfa0c39e55d", "filename": "src/test/ui/lint/reasons-erroneous.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -2,23 +2,27 @@\n \n #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n //~^ ERROR malformed lint attribute\n-//~| HELP reason must be a string literal\n+//~| NOTE reason must be a string literal\n #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n //~^ ERROR malformed lint attribute\n-//~| HELP reason must be a string literal\n+//~| NOTE reason must be a string literal\n #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n //~^ ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n //~^ ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n //~^ ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n //~^ ERROR malformed lint attribute\n-//~| HELP reason in lint attribute must come last\n+//~| NOTE reason in lint attribute must come last\n #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n //~^ ERROR malformed lint attribute\n-//~| HELP reason in lint attribute must come last\n+//~| NOTE reason in lint attribute must come last\n #![warn(missing_copy_implementations, reason)]\n //~^ WARN unknown lint\n+//~| NOTE #[warn(unknown_lints)] on by default\n \n fn main() {}"}, {"sha": "ff4a0f36bbda400ece5573f49fc188d39a6543d7", "filename": "src/test/ui/lint/reasons-erroneous.stderr", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,55 +1,47 @@\n-error[E0452]: malformed lint attribute\n+error[E0452]: malformed lint attribute input\n   --> $DIR/reasons-erroneous.rs:3:58\n    |\n LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n-   |                                                          ^\n-   |\n-   = help: reason must be a string literal\n+   |                                                          ^ reason must be a string literal\n \n-error[E0452]: malformed lint attribute\n+error[E0452]: malformed lint attribute input\n   --> $DIR/reasons-erroneous.rs:6:40\n    |\n LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: reason must be a string literal\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reason must be a string literal\n \n-error[E0452]: malformed lint attribute\n+error[E0452]: malformed lint attribute input\n   --> $DIR/reasons-erroneous.rs:9:29\n    |\n LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n-error[E0452]: malformed lint attribute\n-  --> $DIR/reasons-erroneous.rs:11:23\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:12:23\n    |\n LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n-error[E0452]: malformed lint attribute\n-  --> $DIR/reasons-erroneous.rs:13:36\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:15:36\n    |\n LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n-error[E0452]: malformed lint attribute\n-  --> $DIR/reasons-erroneous.rs:15:44\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:18:44\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n-   |                                            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: reason in lint attribute must come last\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n \n-error[E0452]: malformed lint attribute\n-  --> $DIR/reasons-erroneous.rs:18:25\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:21:25\n    |\n LL | #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: reason in lint attribute must come last\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n \n warning: unknown lint: `reason`\n-  --> $DIR/reasons-erroneous.rs:21:39\n+  --> $DIR/reasons-erroneous.rs:24:39\n    |\n LL | #![warn(missing_copy_implementations, reason)]\n    |                                       ^^^^^^"}, {"sha": "3e53e15601b0b9aafd601ca3a6ada5668a1b40b5", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -7,7 +7,7 @@ struct Test2;\n #[derive()] //~ WARNING empty trait list\n struct Test3;\n \n-#[derive] //~ ERROR attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+#[derive] //~ ERROR malformed `derive` attribute input\n struct Test4;\n \n fn main() {}"}, {"sha": "dfbc5faedac592098bd536f9dc1cd3f651c624d2", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -16,11 +16,11 @@ warning: empty trait list in `derive`\n LL | #[derive()]\n    | ^^^^^^^^^^^\n \n-error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+error: malformed `derive` attribute input\n   --> $DIR/malformed-derive-entry.rs:10:1\n    |\n LL | #[derive]\n-   | ^^^^^^^^^\n+   | ^^^^^^^^^ help: missing traits to be derived: `#[derive(Trait1, Trait2, ...)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "28f6c8e7a6f6739d731117c2b717ad2c0acd51b9", "filename": "src/test/ui/malformed/malformed-plugin-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,4 +1,4 @@\n #![feature(plugin)]\n-#![plugin] //~ ERROR attribute must be of the form\n+#![plugin] //~ ERROR malformed `plugin` attribute\n \n fn main() {}"}, {"sha": "a863cd48596563e836be2c454ce6728e3ab3fdeb", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error: attribute must be of the form `#[plugin(name|name(args))]`\n+error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^\n+   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n error: aborting due to previous error\n "}, {"sha": "8ec7a71da29b3bd71dcd62d8c2c511dd95fbedd7", "filename": "src/test/ui/malformed/malformed-plugin-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,4 +1,4 @@\n #![feature(plugin)]\n-#![plugin=\"bleh\"] //~ ERROR attribute must be of the form\n+#![plugin=\"bleh\"] //~ ERROR malformed `plugin` attribute\n \n fn main() {}"}, {"sha": "6eb0c50ca939840bd55d6fbfa07ae6e22c5cbbc4", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error: attribute must be of the form `#[plugin(name|name(args))]`\n+error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n error: aborting due to previous error\n "}, {"sha": "c4713616b6258a5f838fb061138a67a6d79ec247", "filename": "src/test/ui/malformed/malformed-plugin-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,4 +1,4 @@\n #![feature(plugin)]\n-#![plugin(foo=\"bleh\")] //~ ERROR malformed plugin attribute\n+#![plugin(foo=\"bleh\")] //~ ERROR malformed `plugin` attribute\n \n fn main() {}"}, {"sha": "f93fa0f65e85a28d0cf54a0bc3553beb1cf5cf7e", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error[E0498]: malformed plugin attribute\n+error[E0498]: malformed `plugin` attribute\n   --> $DIR/malformed-plugin-3.rs:2:1\n    |\n LL | #![plugin(foo=\"bleh\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n \n error: aborting due to previous error\n "}, {"sha": "e67fbdd5ddd32d4776df583db21a26e9c7045214", "filename": "src/test/ui/malformed/malformed-special-attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,13 +1,13 @@\n-#[cfg_attr] //~ ERROR expected `(`, found end of attribute\n+#[cfg_attr] //~ ERROR malformed `cfg_attr` attribute\n struct S1;\n \n #[cfg_attr = \"\"] //~ ERROR expected `(`, found `=`\n struct S2;\n \n-#[derive] //~ ERROR attribute must be of the form\n+#[derive] //~ ERROR malformed `derive` attribute\n struct S3;\n \n-#[derive = \"\"] //~ ERROR attribute must be of the form\n+#[derive = \"\"] //~ ERROR malformed `derive` attribute\n struct S4;\n \n fn main() {}"}, {"sha": "319c05eadbf1dbfcb4955f82608179217f946177", "filename": "src/test/ui/malformed/malformed-special-attrs.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,26 +1,28 @@\n-error: expected `(`, found end of attribute\n+error: malformed `cfg_attr` attribute input\n   --> $DIR/malformed-special-attrs.rs:1:1\n    |\n LL | #[cfg_attr]\n-   | ^ expected `(`\n+   | ^^^^^^^^^^^ help: missing condition and attribute: `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   |\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n error: expected `(`, found `=`\n   --> $DIR/malformed-special-attrs.rs:4:12\n    |\n LL | #[cfg_attr = \"\"]\n    |            ^ expected `(`\n \n-error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+error: malformed `derive` attribute input\n   --> $DIR/malformed-special-attrs.rs:7:1\n    |\n LL | #[derive]\n-   | ^^^^^^^^^\n+   | ^^^^^^^^^ help: missing traits to be derived: `#[derive(Trait1, Trait2, ...)]`\n \n-error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+error: malformed `derive` attribute input\n   --> $DIR/malformed-special-attrs.rs:10:1\n    |\n LL | #[derive = \"\"]\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^ help: missing traits to be derived: `#[derive(Trait1, Trait2, ...)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "009695b177f965d1fa0ecf88272d5073814ab906", "filename": "src/test/ui/malformed/malformed-unwind-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,11 +1,9 @@\n #![feature(unwind_attributes)]\n \n-#[unwind]\n-//~^ ERROR attribute must be of the form\n+#[unwind] //~ ERROR malformed `unwind` attribute\n extern \"C\" fn f1() {}\n \n-#[unwind = \"\"]\n-//~^ ERROR attribute must be of the form\n+#[unwind = \"\"] //~ ERROR malformed `unwind` attribute\n extern \"C\" fn f2() {}\n \n fn main() {}"}, {"sha": "0a553e8a245f6e51d5e83f1b3f4ad34ec8ac1946", "filename": "src/test/ui/malformed/malformed-unwind-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,14 +1,14 @@\n-error: attribute must be of the form `#[unwind(allowed|aborts)]`\n+error: malformed `unwind` attribute input\n   --> $DIR/malformed-unwind-1.rs:3:1\n    |\n LL | #[unwind]\n-   | ^^^^^^^^^\n+   | ^^^^^^^^^ help: must be of the form: `#[unwind(allowed|aborts)]`\n \n-error: attribute must be of the form `#[unwind(allowed|aborts)]`\n-  --> $DIR/malformed-unwind-1.rs:7:1\n+error: malformed `unwind` attribute input\n+  --> $DIR/malformed-unwind-1.rs:6:1\n    |\n LL | #[unwind = \"\"]\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^ help: must be of the form: `#[unwind(allowed|aborts)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9aafc7ca9b851db1e567e7077edd5d71b1b206fe", "filename": "src/test/ui/malformed/malformed-unwind-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,11 +1,11 @@\n #![feature(unwind_attributes)]\n \n #[unwind(allowed, aborts)]\n-//~^ ERROR malformed `#[unwind]` attribute\n+//~^ ERROR malformed `unwind` attribute\n extern \"C\" fn f1() {}\n \n #[unwind(unsupported)]\n-//~^ ERROR malformed `#[unwind]` attribute\n+//~^ ERROR malformed `unwind` attribute\n extern \"C\" fn f2() {}\n \n fn main() {}"}, {"sha": "ed88b9afd87580090f88291f0ba6433b1dbcd248", "filename": "src/test/ui/malformed/malformed-unwind-2.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,14 +1,26 @@\n-error[E0633]: malformed `#[unwind]` attribute\n+error[E0633]: malformed `unwind` attribute input\n   --> $DIR/malformed-unwind-2.rs:3:1\n    |\n LL | #[unwind(allowed, aborts)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid argument\n+help: the allowed arguments are `allowed` and `aborts`\n+   |\n+LL | #[unwind(allowed)]\n+   |\n+LL | #[unwind(aborts)]\n+   |\n \n-error[E0633]: malformed `#[unwind]` attribute\n+error[E0633]: malformed `unwind` attribute input\n   --> $DIR/malformed-unwind-2.rs:7:1\n    |\n LL | #[unwind(unsupported)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^ invalid argument\n+help: the allowed arguments are `allowed` and `aborts`\n+   |\n+LL | #[unwind(allowed)]\n+   |\n+LL | #[unwind(aborts)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9e07f0eaeea7ffe4ce6f5c2a083a218c30fbf29d", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,15 +1,12 @@\n #![feature(marker_trait_attr)]\n \n-#[marker(always)]\n+#[marker(always)] //~ ERROR malformed `marker` attribute\n trait Marker1 {}\n-//~^^ ERROR attribute must be of the form\n \n-#[marker(\"never\")]\n+#[marker(\"never\")] //~ ERROR malformed `marker` attribute\n trait Marker2 {}\n-//~^^ ERROR attribute must be of the form\n \n-#[marker(key = \"value\")]\n+#[marker(key = \"value\")] //~ ERROR malformed `marker` attribute\n trait Marker3 {}\n-//~^^ ERROR attribute must be of the form `#[marker]`\n \n fn main() {}"}, {"sha": "6f9c9508e7e5525bba26ff2e31cb324597e6ebe6", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,20 +1,20 @@\n-error: attribute must be of the form `#[marker]`\n+error: malformed `marker` attribute input\n   --> $DIR/marker-attribute-with-values.rs:3:1\n    |\n LL | #[marker(always)]\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[marker]`\n \n-error: attribute must be of the form `#[marker]`\n-  --> $DIR/marker-attribute-with-values.rs:7:1\n+error: malformed `marker` attribute input\n+  --> $DIR/marker-attribute-with-values.rs:6:1\n    |\n LL | #[marker(\"never\")]\n-   | ^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[marker]`\n \n-error: attribute must be of the form `#[marker]`\n-  --> $DIR/marker-attribute-with-values.rs:11:1\n+error: malformed `marker` attribute input\n+  --> $DIR/marker-attribute-with-values.rs:9:1\n    |\n LL | #[marker(key = \"value\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[marker]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d8e687e04a76d94b93a133126b0f43adc25d195f", "filename": "src/test/ui/no_crate_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fno_crate_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fno_crate_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,5 +1,5 @@\n // regression test for issue 11256\n-#![crate_type]  //~ ERROR attribute must be of the form\n+#![crate_type]  //~ ERROR malformed `crate_type` attribute\n \n fn main() {\n     return"}, {"sha": "f34df4e2dd143f66758a82124e847f2bc6f3623c", "filename": "src/test/ui/no_crate_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fno_crate_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fno_crate_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error: attribute must be of the form `#[crate_type = \"bin|lib|...\"]`\n+error: malformed `crate_type` attribute input\n   --> $DIR/no_crate_type.rs:2:1\n    |\n LL | #![crate_type]\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}, {"sha": "5357c3bff9a8ae776cd18241cf3c5bbe84517bc1", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -15,7 +15,7 @@ trait MyFromIterator<A> {\n }\n \n #[rustc_on_unimplemented]\n-//~^ ERROR attribute must be of the form\n+//~^ ERROR malformed `rustc_on_unimplemented` attribute\n trait BadAnnotation1\n {}\n "}, {"sha": "20b2169f45824e95733148c911834a5cdee9ffa5", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,14 @@\n-error: attribute must be of the form `#[rustc_on_unimplemented(/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\")]` or `#[rustc_on_unimplemented = \"message\"]`\n+error: malformed `rustc_on_unimplemented` attribute input\n   --> $DIR/bad-annotation.rs:17:1\n    |\n LL | #[rustc_on_unimplemented]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: the following are the possible correct uses\n+   |\n+LL | #[rustc_on_unimplemented(/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\")]\n+   |\n+LL | #[rustc_on_unimplemented = \"message\"]\n+   |\n \n error[E0230]: there is no parameter `C` on trait `BadAnnotation2`\n   --> $DIR/bad-annotation.rs:22:1"}, {"sha": "04c88dcef50ac5d2bdf4cf60559712fd946addb7", "filename": "src/test/ui/proc-macro/attribute.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -6,20 +6,18 @@\n extern crate proc_macro;\n use proc_macro::*;\n \n-#[proc_macro_derive]\n-//~^ ERROR: attribute must be of the form\n+#[proc_macro_derive] //~ ERROR malformed `proc_macro_derive` attribute\n pub fn foo1(input: TokenStream) -> TokenStream { input }\n \n-#[proc_macro_derive = \"\"]\n-//~^ ERROR: attribute must be of the form\n+#[proc_macro_derive = \"\"] //~ ERROR malformed `proc_macro_derive` attribute\n pub fn foo2(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d3, a, b)]\n-//~^ ERROR: attribute must have either one or two arguments\n+//~^ ERROR attribute must have either one or two arguments\n pub fn foo3(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d4, attributes(a), b)]\n-//~^ ERROR: attribute must have either one or two arguments\n+//~^ ERROR attribute must have either one or two arguments\n pub fn foo4(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(\"a\")]"}, {"sha": "e632875cb16e5bcb503876d7f95b8ff8a45fafe4", "filename": "src/test/ui/proc-macro/attribute.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,110 +1,110 @@\n error: attribute must have either one or two arguments\n-  --> $DIR/attribute.rs:17:1\n+  --> $DIR/attribute.rs:15:1\n    |\n LL | #[proc_macro_derive(d3, a, b)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: attribute must have either one or two arguments\n-  --> $DIR/attribute.rs:21:1\n+  --> $DIR/attribute.rs:19:1\n    |\n LL | #[proc_macro_derive(d4, attributes(a), b)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: not a meta item\n-  --> $DIR/attribute.rs:25:21\n+  --> $DIR/attribute.rs:23:21\n    |\n LL | #[proc_macro_derive(\"a\")]\n    |                     ^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:29:21\n+  --> $DIR/attribute.rs:27:21\n    |\n LL | #[proc_macro_derive(d6 = \"\")]\n    |                     ^^^^^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:33:21\n+  --> $DIR/attribute.rs:31:21\n    |\n LL | #[proc_macro_derive(m::d7)]\n    |                     ^^^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:37:21\n+  --> $DIR/attribute.rs:35:21\n    |\n LL | #[proc_macro_derive(d8(a))]\n    |                     ^^^^^\n \n error: `self` cannot be a name of derive macro\n-  --> $DIR/attribute.rs:41:21\n+  --> $DIR/attribute.rs:39:21\n    |\n LL | #[proc_macro_derive(self)]\n    |                     ^^^^\n \n error: cannot override a built-in derive macro\n-  --> $DIR/attribute.rs:45:21\n+  --> $DIR/attribute.rs:43:21\n    |\n LL | #[proc_macro_derive(PartialEq)]\n    |                     ^^^^^^^^^\n \n error: second argument must be `attributes`\n-  --> $DIR/attribute.rs:49:26\n+  --> $DIR/attribute.rs:47:26\n    |\n LL | #[proc_macro_derive(d11, a)]\n    |                          ^\n \n error: attribute must be of form: `attributes(foo, bar)`\n-  --> $DIR/attribute.rs:49:26\n+  --> $DIR/attribute.rs:47:26\n    |\n LL | #[proc_macro_derive(d11, a)]\n    |                          ^\n \n error: attribute must be of form: `attributes(foo, bar)`\n-  --> $DIR/attribute.rs:54:26\n+  --> $DIR/attribute.rs:52:26\n    |\n LL | #[proc_macro_derive(d12, attributes)]\n    |                          ^^^^^^^^^^\n \n error: not a meta item\n-  --> $DIR/attribute.rs:58:37\n+  --> $DIR/attribute.rs:56:37\n    |\n LL | #[proc_macro_derive(d13, attributes(\"a\"))]\n    |                                     ^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:62:37\n+  --> $DIR/attribute.rs:60:37\n    |\n LL | #[proc_macro_derive(d14, attributes(a = \"\"))]\n    |                                     ^^^^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:66:37\n+  --> $DIR/attribute.rs:64:37\n    |\n LL | #[proc_macro_derive(d15, attributes(m::a))]\n    |                                     ^^^^\n \n error: must only be one word\n-  --> $DIR/attribute.rs:70:37\n+  --> $DIR/attribute.rs:68:37\n    |\n LL | #[proc_macro_derive(d16, attributes(a(b)))]\n    |                                     ^^^^\n \n error: `self` cannot be a name of derive helper attribute\n-  --> $DIR/attribute.rs:74:37\n+  --> $DIR/attribute.rs:72:37\n    |\n LL | #[proc_macro_derive(d17, attributes(self))]\n    |                                     ^^^^\n \n-error: attribute must be of the form `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+error: malformed `proc_macro_derive` attribute input\n   --> $DIR/attribute.rs:9:1\n    |\n LL | #[proc_macro_derive]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n \n-error: attribute must be of the form `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n-  --> $DIR/attribute.rs:13:1\n+error: malformed `proc_macro_derive` attribute input\n+  --> $DIR/attribute.rs:12:1\n    |\n LL | #[proc_macro_derive = \"\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "6bbe022c690fe934c6415813a853f499716d00a3", "filename": "src/test/ui/proc-macro/invalid-attributes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -7,20 +7,20 @@ extern crate proc_macro;\n \n use proc_macro::TokenStream;\n \n-#[proc_macro = \"test\"] //~ ERROR attribute must be of the form\n+#[proc_macro = \"test\"] //~ ERROR malformed `proc_macro` attribute\n pub fn a(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro()] //~ ERROR attribute must be of the form\n+#[proc_macro()] //~ ERROR malformed `proc_macro` attribute\n pub fn c(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro(x)] //~ ERROR attribute must be of the form\n+#[proc_macro(x)] //~ ERROR malformed `proc_macro` attribute\n pub fn d(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute = \"test\"] //~ ERROR attribute must be of the form\n+#[proc_macro_attribute = \"test\"] //~ ERROR malformed `proc_macro_attribute` attribute\n pub fn e(_: TokenStream, a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute()] //~ ERROR attribute must be of the form\n+#[proc_macro_attribute()] //~ ERROR malformed `proc_macro_attribute` attribute\n pub fn g(_: TokenStream, a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute(x)] //~ ERROR attribute must be of the form\n+#[proc_macro_attribute(x)] //~ ERROR malformed `proc_macro_attribute` attribute\n pub fn h(_: TokenStream, a: TokenStream) -> TokenStream { a }"}, {"sha": "fe411fa5e1f8e27dd2825747c96fe6fdce35953c", "filename": "src/test/ui/proc-macro/invalid-attributes.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,38 +1,38 @@\n-error: attribute must be of the form `#[proc_macro]`\n+error: malformed `proc_macro` attribute input\n   --> $DIR/invalid-attributes.rs:10:1\n    |\n LL | #[proc_macro = \"test\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro]`\n \n-error: attribute must be of the form `#[proc_macro]`\n+error: malformed `proc_macro` attribute input\n   --> $DIR/invalid-attributes.rs:13:1\n    |\n LL | #[proc_macro()]\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro]`\n \n-error: attribute must be of the form `#[proc_macro]`\n+error: malformed `proc_macro` attribute input\n   --> $DIR/invalid-attributes.rs:16:1\n    |\n LL | #[proc_macro(x)]\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro]`\n \n-error: attribute must be of the form `#[proc_macro_attribute]`\n+error: malformed `proc_macro_attribute` attribute input\n   --> $DIR/invalid-attributes.rs:19:1\n    |\n LL | #[proc_macro_attribute = \"test\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_attribute]`\n \n-error: attribute must be of the form `#[proc_macro_attribute]`\n+error: malformed `proc_macro_attribute` attribute input\n   --> $DIR/invalid-attributes.rs:22:1\n    |\n LL | #[proc_macro_attribute()]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_attribute]`\n \n-error: attribute must be of the form `#[proc_macro_attribute]`\n+error: malformed `proc_macro_attribute` attribute input\n   --> $DIR/invalid-attributes.rs:25:1\n    |\n LL | #[proc_macro_attribute(x)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_attribute]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "564d6732601024661009d2de0e6eea59ddebef02", "filename": "src/test/ui/repr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,13 +1,10 @@\n-#[repr]\n-//~^ ERROR attribute must be of the form\n+#[repr] //~ ERROR malformed `repr` attribute\n struct _A {}\n \n-#[repr = \"B\"]\n-//~^ ERROR attribute must be of the form\n+#[repr = \"B\"] //~ ERROR malformed `repr` attribute\n struct _B {}\n \n-#[repr = \"C\"]\n-//~^ ERROR attribute must be of the form\n+#[repr = \"C\"] //~ ERROR malformed `repr` attribute\n struct _C {}\n \n #[repr(C)]"}, {"sha": "e756510a437c844ab8ed6925683e4a6a8d5730e3", "filename": "src/test/ui/repr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frepr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frepr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,20 +1,20 @@\n-error: attribute must be of the form `#[repr(C, packed, ...)]`\n+error: malformed `repr` attribute input\n   --> $DIR/repr.rs:1:1\n    |\n LL | #[repr]\n-   | ^^^^^^^\n+   | ^^^^^^^ help: must be of the form: `#[repr(C, packed, ...)]`\n \n-error: attribute must be of the form `#[repr(C, packed, ...)]`\n-  --> $DIR/repr.rs:5:1\n+error: malformed `repr` attribute input\n+  --> $DIR/repr.rs:4:1\n    |\n LL | #[repr = \"B\"]\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^ help: must be of the form: `#[repr(C, packed, ...)]`\n \n-error: attribute must be of the form `#[repr(C, packed, ...)]`\n-  --> $DIR/repr.rs:9:1\n+error: malformed `repr` attribute input\n+  --> $DIR/repr.rs:7:1\n    |\n LL | #[repr = \"C\"]\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^ help: must be of the form: `#[repr(C, packed, ...)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b7938e1afa3bc165db21d7f34dee8a8d940d6c03", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,7 +1,7 @@\n #![feature(non_exhaustive)]\n \n #[non_exhaustive(anything)]\n-//~^ ERROR attribute must be of the form\n+//~^ ERROR malformed `non_exhaustive` attribute\n struct Foo;\n \n #[non_exhaustive]"}, {"sha": "21dc340d21204b42663689a90f4d039763b1c90f", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,8 +1,8 @@\n-error: attribute must be of the form `#[non_exhaustive]`\n+error: malformed `non_exhaustive` attribute input\n   --> $DIR/invalid-attribute.rs:3:1\n    |\n LL | #[non_exhaustive(anything)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[non_exhaustive]`\n \n error[E0701]: attribute can only be applied to a struct or enum\n   --> $DIR/invalid-attribute.rs:7:1"}, {"sha": "c64899c1e9240db697ce0a715d3dbd6c23c43f3a", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -5,24 +5,24 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n mod bogus_attribute_types_2 {\n-    #[unstable] //~ ERROR attribute must be of the form\n+    #[unstable] //~ ERROR malformed `unstable` attribute\n     fn f1() { }\n \n-    #[unstable = \"b\"] //~ ERROR attribute must be of the form\n+    #[unstable = \"b\"] //~ ERROR malformed `unstable` attribute\n     fn f2() { }\n \n-    #[stable] //~ ERROR attribute must be of the form\n+    #[stable] //~ ERROR malformed `stable` attribute\n     fn f3() { }\n \n-    #[stable = \"a\"] //~ ERROR attribute must be of the form\n+    #[stable = \"a\"] //~ ERROR malformed `stable` attribute\n     fn f4() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated] //~ ERROR attribute must be of the form\n+    #[rustc_deprecated] //~ ERROR malformed `rustc_deprecated` attribute\n     fn f5() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated = \"a\"] //~ ERROR attribute must be of the form\n+    #[rustc_deprecated = \"a\"] //~ ERROR malformed `rustc_deprecated` attribute\n     fn f6() { }\n }\n "}, {"sha": "9d23b344ed15e07e83b27c81fdf668211321a8f1", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,38 +1,38 @@\n-error: attribute must be of the form `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n+error: malformed `unstable` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:8:5\n    |\n LL |     #[unstable]\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ help: must be of the form: `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n \n-error: attribute must be of the form `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n+error: malformed `unstable` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:11:5\n    |\n LL |     #[unstable = \"b\"]\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n \n-error: attribute must be of the form `#[stable(feature = \"name\", since = \"version\")]`\n+error: malformed `stable` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:14:5\n    |\n LL |     #[stable]\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ help: must be of the form: `#[stable(feature = \"name\", since = \"version\")]`\n \n-error: attribute must be of the form `#[stable(feature = \"name\", since = \"version\")]`\n+error: malformed `stable` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:17:5\n    |\n LL |     #[stable = \"a\"]\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ help: must be of the form: `#[stable(feature = \"name\", since = \"version\")]`\n \n-error: attribute must be of the form `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n+error: malformed `rustc_deprecated` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:21:5\n    |\n LL |     #[rustc_deprecated]\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n \n-error: attribute must be of the form `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n+error: malformed `rustc_deprecated` attribute input\n   --> $DIR/stability-attribute-sanity-4.rs:25:5\n    |\n LL |     #[rustc_deprecated = \"a\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ac02c9cc648c2a3db88c4938c56aae94b6ef449a", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -14,22 +14,26 @@\n #![feature(target_feature)]\n \n #[target_feature = \"+sse2\"]\n-//~^ ERROR: must be of the form\n+//~^ ERROR malformed `target_feature` attribute\n #[target_feature(enable = \"foo\")]\n-//~^ ERROR: not valid for this target\n+//~^ ERROR not valid for this target\n+//~| NOTE `foo` is not valid for this target\n #[target_feature(bar)]\n-//~^ ERROR: only accepts sub-keys\n+//~^ ERROR malformed `target_feature` attribute\n #[target_feature(disable = \"baz\")]\n-//~^ ERROR: only accepts sub-keys\n+//~^ ERROR malformed `target_feature` attribute\n unsafe fn foo() {}\n \n #[target_feature(enable = \"sse2\")]\n-//~^ ERROR: can only be applied to `unsafe` function\n+//~^ ERROR #[target_feature(..)] can only be applied to `unsafe` functions\n+//~| NOTE can only be applied to `unsafe` functions\n fn bar() {}\n+//~^ NOTE not an `unsafe` function\n \n #[target_feature(enable = \"sse2\")]\n-//~^ ERROR: should be applied to a function\n+//~^ ERROR attribute should be applied to a function\n mod another {}\n+//~^ NOTE not a function\n \n #[inline(always)]\n //~^ ERROR: cannot use #[inline(always)]"}, {"sha": "ff9678efdddc27de0a8ab045b3021ed28e08fa70", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=609ffa1a890fd6b8b0364cd7b35bf1d45abf82d0", "patch": "@@ -1,35 +1,38 @@\n-error: attribute must be of the form `#[target_feature(enable = \"name\")]`\n+error: malformed `target_feature` attribute input\n   --> $DIR/target-feature-wrong.rs:16:1\n    |\n LL | #[target_feature = \"+sse2\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: the feature named `foo` is not valid for this target\n   --> $DIR/target-feature-wrong.rs:18:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n-   |                  ^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n-error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:20:18\n+error: malformed `target_feature` attribute input\n+  --> $DIR/target-feature-wrong.rs:21:18\n    |\n LL | #[target_feature(bar)]\n-   |                  ^^^\n+   |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n-error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:22:18\n+error: malformed `target_feature` attribute input\n+  --> $DIR/target-feature-wrong.rs:23:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n-   |                  ^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n-error: #[target_feature(..)] can only be applied to `unsafe` function\n-  --> $DIR/target-feature-wrong.rs:26:1\n+error: #[target_feature(..)] can only be applied to `unsafe` functions\n+  --> $DIR/target-feature-wrong.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+...\n+LL | fn bar() {}\n+   | ----------- not an `unsafe` function\n \n error: attribute should be applied to a function\n-  --> $DIR/target-feature-wrong.rs:30:1\n+  --> $DIR/target-feature-wrong.rs:33:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -38,7 +41,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: cannot use #[inline(always)] with #[target_feature]\n-  --> $DIR/target-feature-wrong.rs:34:1\n+  --> $DIR/target-feature-wrong.rs:38:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^"}]}