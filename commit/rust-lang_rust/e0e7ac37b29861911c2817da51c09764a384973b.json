{"sha": "e0e7ac37b29861911c2817da51c09764a384973b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTdhYzM3YjI5ODYxOTExYzI4MTdkYTUxYzA5NzY0YTM4NDk3M2I=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-24T08:56:19Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-24T13:17:31Z"}, "message": "Make fmt::DebugList and friends forward formatting parameters\n\nFor example, formatting slice of integers with `{:04?}`\nshould zero-pad each integer.", "tree": {"sha": "bf492e7cac4b773035303d1032c4f27b734dcff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf492e7cac4b773035303d1032c4f27b734dcff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e7ac37b29861911c2817da51c09764a384973b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e7ac37b29861911c2817da51c09764a384973b", "html_url": "https://github.com/rust-lang/rust/commit/e0e7ac37b29861911c2817da51c09764a384973b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e7ac37b29861911c2817da51c09764a384973b/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b82fde7c72e47bd76829bd5322f427bf3f9900", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b82fde7c72e47bd76829bd5322f427bf3f9900", "html_url": "https://github.com/rust-lang/rust/commit/b9b82fde7c72e47bd76829bd5322f427bf3f9900"}], "stats": {"total": 141, "additions": 113, "deletions": 28}, "files": [{"sha": "f213578c1279b904dc81cebafdeb9ebdc5d995ed", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 58, "deletions": 28, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e0e7ac37b29861911c2817da51c09764a384973b/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e7ac37b29861911c2817da51c09764a384973b/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=e0e7ac37b29861911c2817da51c09764a384973b", "patch": "@@ -22,6 +22,25 @@ impl<'a, 'b: 'a> PadAdapter<'a, 'b> {\n             on_newline: false,\n         }\n     }\n+\n+    fn as_formatter(&mut self) -> fmt::Formatter {\n+        fmt::Formatter {\n+            // These only exist in the struct for the `Formatter::run` method,\n+            // which won\u2019t be used.\n+            curarg: self.fmt.curarg.clone(),\n+            args: self.fmt.args,\n+\n+            // We want to preserve these\n+            flags: self.fmt.flags,\n+            fill: self.fmt.fill,\n+            align: self.fmt.align,\n+            width: self.fmt.width,\n+            precision: self.fmt.precision,\n+\n+            // And change this\n+            buf: self,\n+        }\n+    }\n }\n \n impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n@@ -112,11 +131,16 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n+                use fmt::Write;\n                 let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer,\n-                           format_args!(\"{}\\n{}: {:#?}\", prefix, name, value))\n+                writer.write_str(prefix)?;\n+                writer.write_str(\"\\n\")?;\n+                writer.write_str(name)?;\n+                writer.write_str(\": \")?;\n+                value.fmt(&mut writer.as_formatter())\n             } else {\n-                write!(self.fmt, \"{} {}: {:?}\", prefix, name, value)\n+                write!(self.fmt, \"{} {}: \", prefix, name)?;\n+                value.fmt(self.fmt)\n             }\n         });\n \n@@ -204,10 +228,15 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n+                use fmt::Write;\n                 let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, value))\n+                writer.write_str(prefix)?;\n+                writer.write_str(\"\\n\")?;\n+                value.fmt(&mut writer.as_formatter())\n             } else {\n-                write!(self.fmt, \"{}{}{:?}\", prefix, space, value)\n+                self.fmt.write_str(prefix)?;\n+                self.fmt.write_str(space)?;\n+                value.fmt(self.fmt)\n             }\n         });\n \n@@ -247,20 +276,19 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     fn entry(&mut self, entry: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n+                use fmt::Write;\n                 let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields {\n-                    \",\"\n+                writer.write_str(if self.has_fields {\n+                    \",\\n\"\n                 } else {\n-                    \"\"\n-                };\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n+                    \"\\n\"\n+                })?;\n+                entry.fmt(&mut writer.as_formatter())\n             } else {\n-                let prefix = if self.has_fields {\n-                    \", \"\n-                } else {\n-                    \"\"\n-                };\n-                write!(self.fmt, \"{}{:?}\", prefix, entry)\n+                if self.has_fields {\n+                    self.fmt.write_str(\", \")?\n+                }\n+                entry.fmt(self.fmt)\n             }\n         });\n \n@@ -472,21 +500,23 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n+                use fmt::Write;\n                 let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields {\n-                    \",\"\n+                writer.write_str(if self.has_fields {\n+                    \",\\n\"\n                 } else {\n-                    \"\"\n-                };\n-                fmt::write(&mut writer,\n-                           format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n+                    \"\\n\"\n+                })?;\n+                key.fmt(&mut writer.as_formatter())?;\n+                writer.write_str(\": \")?;\n+                value.fmt(&mut writer.as_formatter())\n             } else {\n-                let prefix = if self.has_fields {\n-                    \", \"\n-                } else {\n-                    \"\"\n-                };\n-                write!(self.fmt, \"{}{:?}: {:?}\", prefix, key, value)\n+                if self.has_fields {\n+                    self.fmt.write_str(\", \")?\n+                }\n+                key.fmt(self.fmt)?;\n+                self.fmt.write_str(\": \")?;\n+                value.fmt(self.fmt)\n             }\n         });\n "}, {"sha": "b7233658e9361ac2f521247b29b91130b30d7707", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e0e7ac37b29861911c2817da51c09764a384973b/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e7ac37b29861911c2817da51c09764a384973b/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=e0e7ac37b29861911c2817da51c09764a384973b", "patch": "@@ -496,3 +496,58 @@ mod debug_list {\n                    format!(\"{:#?}\", Bar));\n     }\n }\n+\n+#[test]\n+fn test_formatting_parameters_are_forwarded() {\n+    use std::collections::{BTreeMap, BTreeSet};\n+    #[derive(Debug)]\n+    struct Foo {\n+        bar: u32,\n+        baz: u32,\n+    }\n+    let struct_ = Foo { bar: 1024, baz: 7 };\n+    let tuple = (1024, 7);\n+    let list = [1024, 7];\n+    let mut map = BTreeMap::new();\n+    map.insert(\"bar\", 1024);\n+    map.insert(\"baz\", 7);\n+    let mut set = BTreeSet::new();\n+    set.insert(1024);\n+    set.insert(7);\n+\n+    assert_eq!(format!(\"{:03?}\", struct_), \"Foo { bar: 1024, baz: 007 }\");\n+    assert_eq!(format!(\"{:03?}\", tuple), \"(1024, 007)\");\n+    assert_eq!(format!(\"{:03?}\", list), \"[1024, 007]\");\n+    assert_eq!(format!(\"{:03?}\", map), r#\"{\"bar\": 1024, \"baz\": 007}\"#);\n+    assert_eq!(format!(\"{:03?}\", set), \"{007, 1024}\");\n+    assert_eq!(format!(\"{:#03?}\", struct_), \"\n+Foo {\n+    bar: 1024,\n+    baz: 007\n+}\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", tuple), \"\n+(\n+    1024,\n+    007\n+)\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", list), \"\n+[\n+    1024,\n+    007\n+]\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", map), r#\"\n+{\n+    \"bar\": 1024,\n+    \"baz\": 007\n+}\n+    \"#.trim());\n+    assert_eq!(format!(\"{:#03?}\", set), \"\n+{\n+    007,\n+    1024\n+}\n+    \".trim());\n+}"}]}