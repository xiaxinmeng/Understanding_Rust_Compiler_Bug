{"sha": "a1fd9bae2ca8195456963b6bbbd5eff31d91adbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZmQ5YmFlMmNhODE5NTQ1Njk2M2I2YmJiZDVlZmYzMWQ5MWFkYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-17T01:08:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-17T01:08:41Z"}, "message": "Rollup merge of #64531 - taiki-e:pin-self, r=Centril\n\nUse shorthand syntax in the self parameter of methods of Pin", "tree": {"sha": "aee9d034a7e3fd521a3f1e8314630800e96897aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aee9d034a7e3fd521a3f1e8314630800e96897aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgDIZCRBK7hj4Ov3rIwAAdHIIAKFc6xkadVGfNsOzysjHWIL+\nMxEMmalSLO/JDIrIBVlwZFzVKU4ZkOAd34IyqDVGvepTnDHDkR6TfJX8shTcVsts\n65mwsiTxfD8uTc2S+YceptgUlimPo1f//cIIAmoBIvnDaesshPMjlcT6/LfUhVti\nk72NH/5YsEPlooEMfenH9LunO3ZsuIoNsWDw6zmALD4ZRaKu0Y+WHYO165KSczfV\n6f4bM3kcp5FnmBg/Uz/Y4e7gEbJ3rJn2O0Tt5+XNndju88Poph98NW0F01bvhFTS\nsAYhoLLE7s1xwzrH3y9sFkdBNJiJzhdYqzkZLsMovggCHSGly2XxPnEr30atRgA=\n=H29z\n-----END PGP SIGNATURE-----\n", "payload": "tree aee9d034a7e3fd521a3f1e8314630800e96897aa\nparent 52fa593441cec58ba2c676f34904a2cf5112accf\nparent 076e0ce259104bcbf9b018add4ac1b720f747e98\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568682521 +0200\ncommitter GitHub <noreply@github.com> 1568682521 +0200\n\nRollup merge of #64531 - taiki-e:pin-self, r=Centril\n\nUse shorthand syntax in the self parameter of methods of Pin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe", "html_url": "https://github.com/rust-lang/rust/commit/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fa593441cec58ba2c676f34904a2cf5112accf", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa593441cec58ba2c676f34904a2cf5112accf", "html_url": "https://github.com/rust-lang/rust/commit/52fa593441cec58ba2c676f34904a2cf5112accf"}, {"sha": "076e0ce259104bcbf9b018add4ac1b720f747e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/076e0ce259104bcbf9b018add4ac1b720f747e98", "html_url": "https://github.com/rust-lang/rust/commit/076e0ce259104bcbf9b018add4ac1b720f747e98"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "be59e830beda3adc5d5c83576023b261703a69a4", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fd9bae2ca8195456963b6bbbd5eff31d91adbe/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=a1fd9bae2ca8195456963b6bbbd5eff31d91adbe", "patch": "@@ -549,7 +549,7 @@ impl<P: Deref> Pin<P> {\n     /// ruled out by the contract of `Pin::new_unchecked`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n+    pub fn as_ref(&self) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n     }\n \n@@ -586,7 +586,7 @@ impl<P: DerefMut> Pin<P> {\n     /// ruled out by the contract of `Pin::new_unchecked`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn as_mut(self: &mut Pin<P>) -> Pin<&mut P::Target> {\n+    pub fn as_mut(&mut self) -> Pin<&mut P::Target> {\n         unsafe { Pin::new_unchecked(&mut *self.pointer) }\n     }\n \n@@ -596,7 +596,7 @@ impl<P: DerefMut> Pin<P> {\n     /// run before being overwritten, so no pinning guarantee is violated.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn set(self: &mut Pin<P>, value: P::Target)\n+    pub fn set(&mut self, value: P::Target)\n     where\n         P::Target: Sized,\n     {\n@@ -621,7 +621,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     ///\n     /// [`pin` module]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub unsafe fn map_unchecked<U, F>(self: Pin<&'a T>, func: F) -> Pin<&'a U> where\n+    pub unsafe fn map_unchecked<U, F>(self, func: F) -> Pin<&'a U> where\n         F: FnOnce(&T) -> &U,\n     {\n         let pointer = &*self.pointer;\n@@ -648,7 +648,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// [\"pinning projections\"]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_ref(self: Pin<&'a T>) -> &'a T {\n+    pub fn get_ref(self) -> &'a T {\n         self.pointer\n     }\n }\n@@ -657,7 +657,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn into_ref(self: Pin<&'a mut T>) -> Pin<&'a T> {\n+    pub fn into_ref(self) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n     }\n \n@@ -672,7 +672,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// with the same lifetime as the original `Pin`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_mut(self: Pin<&'a mut T>) -> &'a mut T\n+    pub fn get_mut(self) -> &'a mut T\n         where T: Unpin,\n     {\n         self.pointer\n@@ -690,7 +690,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// instead.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut(self: Pin<&'a mut T>) -> &'a mut T {\n+    pub unsafe fn get_unchecked_mut(self) -> &'a mut T {\n         self.pointer\n     }\n \n@@ -710,7 +710,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// [`pin` module]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub unsafe fn map_unchecked_mut<U, F>(self: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n+    pub unsafe fn map_unchecked_mut<U, F>(self, func: F) -> Pin<&'a mut U> where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n         let pointer = Pin::get_unchecked_mut(self);"}]}