{"sha": "7e0edb39baa02c58c373f05014ffd8e3058c93ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMGVkYjM5YmFhMDJjNThjMzczZjA1MDE0ZmZkOGUzMDU4YzkzYWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-01-07T22:35:52Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-01-29T20:07:35Z"}, "message": "Implement a slightly racy `sync::Weak::weak_count`", "tree": {"sha": "52f21d65ed37913eee12252ec4d005a97929ab84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f21d65ed37913eee12252ec4d005a97929ab84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0edb39baa02c58c373f05014ffd8e3058c93ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0edb39baa02c58c373f05014ffd8e3058c93ad", "html_url": "https://github.com/rust-lang/rust/commit/7e0edb39baa02c58c373f05014ffd8e3058c93ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0edb39baa02c58c373f05014ffd8e3058c93ad/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a", "html_url": "https://github.com/rust-lang/rust/commit/2fe3b3b486b3b5e1ec1e6ad259d8840b88b7c77a"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "b065bd60c60a755aeedb9c4c136026e87af0b728", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7e0edb39baa02c58c373f05014ffd8e3058c93ad/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0edb39baa02c58c373f05014ffd8e3058c93ad/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=7e0edb39baa02c58c373f05014ffd8e3058c93ad", "patch": "@@ -11,7 +11,7 @@ use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n use core::fmt;\n-use core::cmp::Ordering;\n+use core::cmp::{self, Ordering};\n use core::intrinsics::abort;\n use core::mem::{self, align_of_val, size_of_val};\n use core::ops::{Deref, Receiver};\n@@ -1131,10 +1131,48 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n-    // Due to the implicit weak pointer added when any strong pointers are\n-    // around, we cannot implement `weak_count` correctly since it necessarily\n-    // requires accessing the strong count and weak count in an unsynchronized\n-    // fashion.\n+    /// Gets an approximation of the number of `Weak` pointers pointing to this\n+    /// value.\n+    ///\n+    /// If `self` was created using [`Weak::new`], this will return 0. If not,\n+    /// the returned value is at least 1, since `self` still points to the\n+    /// value.\n+    ///\n+    /// # Accuracy\n+    ///\n+    /// Due to implementation details, the returned value can be off by 1 in\n+    /// either direction when other threads are manipulating any `Arc`s or\n+    /// `Weak`s pointing to the same value.\n+    ///\n+    /// [`Weak::new`]: #method.new\n+    #[unstable(feature = \"weak_counts\", issue = \"0\")]\n+    pub fn weak_count(&self) -> usize {\n+        // Due to the implicit weak pointer added when any strong pointers are\n+        // around, we cannot implement `weak_count` correctly since it\n+        // necessarily requires accessing the strong count and weak count in an\n+        // unsynchronized fashion. So this version is a bit racy.\n+        if let Some(inner) = self.inner() {\n+            let strong = inner.strong.load(SeqCst);\n+            let weak = inner.weak.load(SeqCst);\n+            if strong == 0 {\n+                // If the last `Arc` has *just* been dropped, it might not yet\n+                // have removed the implicit weak count, so the value we get\n+                // here might be 1 too high.\n+                weak\n+            } else {\n+                // As long as there's still at least 1 `Arc` around, subtract\n+                // the implicit weak pointer.\n+                // Note that the last `Arc` might get dropped between the 2\n+                // loads we do above, removing the implicit weak pointer. This\n+                // means that the value might be 1 too low here. In order to not\n+                // return 0 here (which would happen if we're the only weak\n+                // pointer), we guard against that specifically.\n+                cmp::max(1, weak - 1)\n+            }\n+        } else {\n+            0\n+        }\n+    }\n \n     /// Return `None` when the pointer is dangling and there is no allocated `ArcInner`,\n     /// i.e., this `Weak` was created by `Weak::new`\n@@ -1655,6 +1693,33 @@ mod tests {\n         assert!(Arc::get_mut(&mut x).is_none());\n     }\n \n+    #[test]\n+    fn weak_counts() {\n+        assert_eq!(Weak::weak_count(&Weak::<u64>::new()), 0);\n+        assert_eq!(Weak::strong_count(&Weak::<u64>::new()), 0);\n+\n+        let a = Arc::new(0);\n+        let w = Arc::downgrade(&a);\n+        assert_eq!(Weak::strong_count(&w), 1);\n+        assert_eq!(Weak::weak_count(&w), 1);\n+        let w2 = w.clone();\n+        assert_eq!(Weak::strong_count(&w), 1);\n+        assert_eq!(Weak::weak_count(&w), 2);\n+        assert_eq!(Weak::strong_count(&w2), 1);\n+        assert_eq!(Weak::weak_count(&w2), 2);\n+        drop(w);\n+        assert_eq!(Weak::strong_count(&w2), 1);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        let a2 = a.clone();\n+        assert_eq!(Weak::strong_count(&w2), 2);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        drop(a2);\n+        drop(a);\n+        assert_eq!(Weak::strong_count(&w2), 0);\n+        assert_eq!(Weak::weak_count(&w2), 1);\n+        drop(w2);\n+    }\n+\n     #[test]\n     fn try_unwrap() {\n         let x = Arc::new(3);"}]}