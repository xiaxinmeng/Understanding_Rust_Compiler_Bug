{"sha": "1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMWMxYjBkODU1NDdkMzE3NzVmOWUwZjNiNTUxNmM0YjM4ZmVkOWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-24T08:46:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-24T08:46:07Z"}, "message": "Merge #3287\n\n3287: Omit type hints for enum variant bind pats r=matklad a=SomeoneToIgnore\n\nAfter using new hints for a while, I've started to think that hints for enum variants are an overkill.\r\nAnother user also shares the same toughts: https://github.com/rust-analyzer/rust-analyzer/issues/3273#issuecomment-590172297\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "f9d94a2e9960e8e9b85f4700924658b34e2942e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d94a2e9960e8e9b85f4700924658b34e2942e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeU41PCRBK7hj4Ov3rIwAAdHIIAD1gbbufytHdSLN+0qjFc6SP\nNt4Urh857SDZ+E/9FJKSBugc5yUsUWW/50+0zOJVQPp9Ssj7FyNQv94lhnkXBd6k\nSKvIBhhpLIvkzsxT1t4EjI6518Gj1kyJx3saVi6rZ230d9Zhp61O9cp7kjuqIA9m\nw7SLKdIurG6/pYXZQjnRU/kYtL+Ys/0x7wt1lb9yM4I5XHa5Y/8pE8gD13VkR7Zl\neKPb+fWUJbWBVamhSd9UWoebxUiTYI4Vzj8j7nm+rCA7TQ15it6hGHWTzgqVY4eT\nYTgGrT07thcLKPxm69EUh5QBzEZQxbVqRl5adpU2ZPhjXgP49Kc4CRCCpgS1NW0=\n=Xp4X\n-----END PGP SIGNATURE-----\n", "payload": "tree f9d94a2e9960e8e9b85f4700924658b34e2942e9\nparent cd01e72a9eca909392caea7efa5744f0f5578a41\nparent 7f3c0e85643715ab86c0cd5d782b7c35c677b1d0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582533967 +0000\ncommitter GitHub <noreply@github.com> 1582533967 +0000\n\nMerge #3287\n\n3287: Omit type hints for enum variant bind pats r=matklad a=SomeoneToIgnore\n\nAfter using new hints for a while, I've started to think that hints for enum variants are an overkill.\r\nAnother user also shares the same toughts: https://github.com/rust-analyzer/rust-analyzer/issues/3273#issuecomment-590172297\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f", "html_url": "https://github.com/rust-lang/rust/commit/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd01e72a9eca909392caea7efa5744f0f5578a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd01e72a9eca909392caea7efa5744f0f5578a41", "html_url": "https://github.com/rust-lang/rust/commit/cd01e72a9eca909392caea7efa5744f0f5578a41"}, {"sha": "7f3c0e85643715ab86c0cd5d782b7c35c677b1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3c0e85643715ab86c0cd5d782b7c35c677b1d0", "html_url": "https://github.com/rust-lang/rust/commit/7f3c0e85643715ab86c0cd5d782b7c35c677b1d0"}], "stats": {"total": 217, "additions": 125, "deletions": 92}, "files": [{"sha": "b42aa15235a98371c8fe3c8db05d4bca4e783e7c", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 125, "deletions": 92, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=1d1c1b0d85547d31775f9e0f3b5516c4b38fed9f", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{HirDisplay, SourceAnalyzer, SourceBinder};\n+use hir::{Adt, HirDisplay, SourceAnalyzer, SourceBinder, Type};\n use once_cell::unsync::Lazy;\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n@@ -57,12 +57,10 @@ fn get_inlay_hints(\n                 get_param_name_hints(acc, db, &analyzer, ast::Expr::from(it));\n             },\n             ast::BindPat(it) => {\n-                if should_not_display_type_hint(&it) {\n-                    return None;\n-                }\n-                let pat = ast::Pat::from(it);\n+                let pat = ast::Pat::from(it.clone());\n                 let ty = analyzer.type_of_pat(db, &pat)?;\n-                if ty.is_unknown() {\n+\n+                if should_not_display_type_hint(db, &it, &ty) {\n                     return None;\n                 }\n \n@@ -80,7 +78,24 @@ fn get_inlay_hints(\n     Some(())\n }\n \n-fn should_not_display_type_hint(bind_pat: &ast::BindPat) -> bool {\n+fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n+    if let Some(Adt::Enum(enum_data)) = pat_ty.as_adt() {\n+        let pat_text = bind_pat.syntax().to_string();\n+        enum_data\n+            .variants(db)\n+            .into_iter()\n+            .map(|variant| variant.name(db).to_string())\n+            .any(|enum_name| enum_name == pat_text)\n+    } else {\n+        false\n+    }\n+}\n+\n+fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n+    if pat_ty.is_unknown() {\n+        return true;\n+    }\n+\n     for node in bind_pat.syntax().ancestors() {\n         match_ast! {\n             match node {\n@@ -90,6 +105,17 @@ fn should_not_display_type_hint(bind_pat: &ast::BindPat) -> bool {\n                 ast::Param(it) => {\n                     return it.ascribed_type().is_some()\n                 },\n+                ast::MatchArm(_it) => {\n+                    return pat_is_enum_variant(db, bind_pat, pat_ty);\n+                },\n+                ast::IfExpr(it) => {\n+                    return it.condition().and_then(|condition| condition.pat()).is_some()\n+                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n+                },\n+                ast::WhileExpr(it) => {\n+                    return it.condition().and_then(|condition| condition.pat()).is_some()\n+                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n+                },\n                 _ => (),\n             }\n         }\n@@ -119,13 +145,12 @@ fn get_param_name_hints(\n         } else {\n             0\n         };\n-    let parameters = fn_signature.parameter_names.iter().skip(n_params_to_skip);\n-\n-    let hints = parameters\n+    let hints = fn_signature\n+        .parameter_names\n+        .iter()\n+        .skip(n_params_to_skip)\n         .zip(args)\n-        .filter(|(param, arg)| {\n-            should_show_param_hint(&fn_signature, param, &arg.syntax().to_string())\n-        })\n+        .filter(|(param, arg)| should_show_param_hint(&fn_signature, param, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -139,8 +164,9 @@ fn get_param_name_hints(\n fn should_show_param_hint(\n     fn_signature: &FunctionSignature,\n     param_name: &str,\n-    argument_string: &str,\n+    argument: &ast::Expr,\n ) -> bool {\n+    let argument_string = argument.syntax().to_string();\n     if param_name.is_empty() || argument_string.ends_with(param_name) {\n         return false;\n     }\n@@ -440,75 +466,77 @@ struct Test {\n     b: u8,\n }\n \n+use CustomOption::*;\n+\n fn main() {\n-    let test = CustomOption::Some(Test { a: CustomOption::Some(3), b: 1 });\n-    if let CustomOption::None = &test {};\n+    let test = Some(Test { a: Some(3), b: 1 });\n+    if let None = &test {};\n     if let test = &test {};\n-    if let CustomOption::Some(test) = &test {};\n-    if let CustomOption::Some(Test { a, b }) = &test {};\n-    if let CustomOption::Some(Test { a: x, b: y }) = &test {};\n-    if let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n-    if let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n-    if let CustomOption::Some(Test { b: y, .. }) = &test {};\n-\n-    if test == CustomOption::None {}\n+    if let Some(test) = &test {};\n+    if let Some(Test { a, b }) = &test {};\n+    if let Some(Test { a: x, b: y }) = &test {};\n+    if let Some(Test { a: Some(x), b: y }) = &test {};\n+    if let Some(Test { a: None, b: y }) = &test {};\n+    if let Some(Test { b: y, .. }) = &test {};\n+\n+    if test == None {}\n }\"#,\n         );\n \n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [166; 170),\n+                range: [188; 192),\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: [287; 291),\n+                range: [267; 271),\n                 kind: TypeHint,\n                 label: \"&CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: [334; 338),\n+                range: [300; 304),\n                 kind: TypeHint,\n                 label: \"&Test\",\n             },\n             InlayHint {\n-                range: [389; 390),\n+                range: [341; 342),\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [392; 393),\n+                range: [344; 345),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [449; 450),\n+                range: [387; 388),\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [455; 456),\n+                range: [393; 394),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [531; 532),\n+                range: [441; 442),\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n             InlayHint {\n-                range: [538; 539),\n+                range: [448; 449),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [618; 619),\n+                range: [500; 501),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [675; 676),\n+                range: [543; 544),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n@@ -533,75 +561,77 @@ struct Test {\n     b: u8,\n }\n \n+use CustomOption::*;\n+\n fn main() {\n-    let test = CustomOption::Some(Test { a: CustomOption::Some(3), b: 1 });\n-    while let CustomOption::None = &test {};\n+    let test = Some(Test { a: Some(3), b: 1 });\n+    while let None = &test {};\n     while let test = &test {};\n-    while let CustomOption::Some(test) = &test {};\n-    while let CustomOption::Some(Test { a, b }) = &test {};\n-    while let CustomOption::Some(Test { a: x, b: y }) = &test {};\n-    while let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n-    while let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n-    while let CustomOption::Some(Test { b: y, .. }) = &test {};\n-\n-    while test == CustomOption::None {}\n+    while let Some(test) = &test {};\n+    while let Some(Test { a, b }) = &test {};\n+    while let Some(Test { a: x, b: y }) = &test {};\n+    while let Some(Test { a: Some(x), b: y }) = &test {};\n+    while let Some(Test { a: None, b: y }) = &test {};\n+    while let Some(Test { b: y, .. }) = &test {};\n+\n+    while test == None {}\n }\"#,\n         );\n \n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [166; 170),\n+                range: [188; 192),\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: [293; 297),\n+                range: [273; 277),\n                 kind: TypeHint,\n                 label: \"&CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: [343; 347),\n+                range: [309; 313),\n                 kind: TypeHint,\n                 label: \"&Test\",\n             },\n             InlayHint {\n-                range: [401; 402),\n+                range: [353; 354),\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [404; 405),\n+                range: [356; 357),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [464; 465),\n+                range: [402; 403),\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [470; 471),\n+                range: [408; 409),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [549; 550),\n+                range: [459; 460),\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n             InlayHint {\n-                range: [556; 557),\n+                range: [466; 467),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [639; 640),\n+                range: [521; 522),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: [699; 700),\n+                range: [567; 568),\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n@@ -626,16 +656,18 @@ struct Test {\n     b: u8,\n }\n \n+use CustomOption::*;\n+\n fn main() {\n-    match CustomOption::Some(Test { a: CustomOption::Some(3), b: 1 }) {\n-        CustomOption::None => (),\n+    match Some(Test { a: Some(3), b: 1 }) {\n+        None => (),\n         test => (),\n-        CustomOption::Some(test) => (),\n-        CustomOption::Some(Test { a, b }) => (),\n-        CustomOption::Some(Test { a: x, b: y }) => (),\n-        CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) => (),\n-        CustomOption::Some(Test { a: CustomOption::None, b: y }) => (),\n-        CustomOption::Some(Test { b: y, .. }) => (),\n+        Some(test) => (),\n+        Some(Test { a, b }) => (),\n+        Some(Test { a: x, b: y }) => (),\n+        Some(Test { a: Some(x), b: y }) => (),\n+        Some(Test { a: None, b: y }) => (),\n+        Some(Test { b: y, .. }) => (),\n         _ => {}\n     }\n }\"#,\n@@ -644,52 +676,52 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [272; 276),\n+                range: [252; 256),\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: [311; 315),\n+                range: [277; 281),\n                 kind: TypeHint,\n                 label: \"Test\",\n             },\n             InlayHint {\n-                range: [358; 359),\n+                range: [310; 311),\n                 kind: TypeHint,\n                 label: \"CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [361; 362),\n+                range: [313; 314),\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: [410; 411),\n+                range: [348; 349),\n                 kind: TypeHint,\n                 label: \"CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: [416; 417),\n+                range: [354; 355),\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: [484; 485),\n+                range: [394; 395),\n                 kind: TypeHint,\n                 label: \"u32\",\n             },\n             InlayHint {\n-                range: [491; 492),\n+                range: [401; 402),\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: [563; 564),\n+                range: [445; 446),\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: [612; 613),\n+                range: [480; 481),\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n@@ -743,6 +775,7 @@ enum CustomOption<T> {\n     None,\n     Some(T),\n }\n+use CustomOption::*;\n \n struct FileId {}\n struct SmolStr {}\n@@ -791,89 +824,89 @@ fn main() {\n     Test::from_syntax(\n         FileId {},\n         \"impl\".into(),\n-        CustomOption::None,\n+        None,\n         TextRange {},\n         SyntaxKind {},\n-        CustomOption::None,\n-        CustomOption::None,\n+        None,\n+        None,\n     );\n }\"#,\n         );\n \n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [777; 788),\n+                range: [798; 809),\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: [821; 822),\n+                range: [842; 843),\n                 kind: ParameterHint,\n                 label: \"foo\",\n             },\n             InlayHint {\n-                range: [824; 825),\n+                range: [845; 846),\n                 kind: ParameterHint,\n                 label: \"bar\",\n             },\n             InlayHint {\n-                range: [827; 834),\n+                range: [848; 855),\n                 kind: ParameterHint,\n                 label: \"msg\",\n             },\n             InlayHint {\n-                range: [839; 850),\n+                range: [860; 871),\n                 kind: ParameterHint,\n                 label: \"last\",\n             },\n             InlayHint {\n-                range: [893; 896),\n+                range: [914; 917),\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n             InlayHint {\n-                range: [916; 918),\n+                range: [937; 939),\n                 kind: ParameterHint,\n                 label: \"&self\",\n             },\n             InlayHint {\n-                range: [920; 924),\n+                range: [941; 945),\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n             InlayHint {\n-                range: [959; 968),\n+                range: [980; 989),\n                 kind: ParameterHint,\n                 label: \"file_id\",\n             },\n             InlayHint {\n-                range: [978; 991),\n+                range: [999; 1012),\n                 kind: ParameterHint,\n                 label: \"name\",\n             },\n             InlayHint {\n-                range: [1001; 1019),\n+                range: [1022; 1026),\n                 kind: ParameterHint,\n                 label: \"focus_range\",\n             },\n             InlayHint {\n-                range: [1029; 1041),\n+                range: [1036; 1048),\n                 kind: ParameterHint,\n                 label: \"full_range\",\n             },\n             InlayHint {\n-                range: [1051; 1064),\n+                range: [1058; 1071),\n                 kind: ParameterHint,\n                 label: \"kind\",\n             },\n             InlayHint {\n-                range: [1074; 1092),\n+                range: [1081; 1085),\n                 kind: ParameterHint,\n                 label: \"docs\",\n             },\n             InlayHint {\n-                range: [1102; 1120),\n+                range: [1095; 1099),\n                 kind: ParameterHint,\n                 label: \"description\",\n             },"}]}