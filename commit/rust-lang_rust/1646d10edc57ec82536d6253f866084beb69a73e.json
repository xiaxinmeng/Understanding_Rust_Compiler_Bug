{"sha": "1646d10edc57ec82536d6253f866084beb69a73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDZkMTBlZGM1N2VjODI1MzZkNjI1M2Y4NjYwODRiZWI2OWE3M2U=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T18:59:08Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in the fields of `Map`", "tree": {"sha": "85af05801a73212c24a7c61dc13daf15ae99311b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85af05801a73212c24a7c61dc13daf15ae99311b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1646d10edc57ec82536d6253f866084beb69a73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1646d10edc57ec82536d6253f866084beb69a73e", "html_url": "https://github.com/rust-lang/rust/commit/1646d10edc57ec82536d6253f866084beb69a73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1646d10edc57ec82536d6253f866084beb69a73e/comments", "author": null, "committer": null, "parents": [{"sha": "19524f1ed14d8da8b3d953812a3c3b461085d3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/19524f1ed14d8da8b3d953812a3c3b461085d3dc", "html_url": "https://github.com/rust-lang/rust/commit/19524f1ed14d8da8b3d953812a3c3b461085d3dc"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "0c0562a8b68d63a1a888beb11cf166f9d404a8a7", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1646d10edc57ec82536d6253f866084beb69a73e/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646d10edc57ec82536d6253f866084beb69a73e/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1646d10edc57ec82536d6253f866084beb69a73e", "patch": "@@ -62,7 +62,7 @@ use cmp::Ord;\n use kinds::Copy;\n use mem;\n use num::{ToPrimitive, Int};\n-use ops::{Add, Deref};\n+use ops::{Add, Deref, FnMut};\n use option::Option;\n use option::Option::{Some, None};\n use uint;\n@@ -165,7 +165,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn map<'r, B>(self, f: |A|: 'r -> B) -> Map<'r, A, B, Self> {\n+    fn map<B, F: FnMut(A) -> B>(self, f: F) -> Map<A, B, Self, F> {\n         Map{iter: self, f: f}\n     }\n \n@@ -778,7 +778,10 @@ impl<'a, A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Inspect<'a, A, T>\n #[unstable = \"trait is unstable\"]\n impl<A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Rev<T> {}\n #[unstable = \"trait is unstable\"]\n-impl<'a, A, B, T: ExactSizeIterator<A>> ExactSizeIterator<B> for Map<'a, A, B, T> {}\n+impl<A, B, I, F> ExactSizeIterator<B> for Map<A, B, I, F> where\n+    I: ExactSizeIterator<A>,\n+    F: FnMut(A) -> B,\n+{}\n #[unstable = \"trait is unstable\"]\n impl<A, B, T, U> ExactSizeIterator<(A, B)> for Zip<T, U>\n     where T: ExactSizeIterator<A>, U: ExactSizeIterator<B> {}\n@@ -1374,12 +1377,12 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n /// An iterator which maps the values of `iter` with `f`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n-pub struct Map<'a, A, B, T> {\n-    iter: T,\n-    f: |A|: 'a -> B\n+pub struct Map<A, B, I: Iterator<A>, F: FnMut(A) -> B> {\n+    iter: I,\n+    f: F,\n }\n \n-impl<'a, A, B, T> Map<'a, A, B, T> {\n+impl<A, B, I, F> Map<A, B, I, F> where I: Iterator<A>, F: FnMut(A) -> B {\n     #[inline]\n     fn do_map(&mut self, elt: Option<A>) -> Option<B> {\n         match elt {\n@@ -1390,7 +1393,7 @@ impl<'a, A, B, T> Map<'a, A, B, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, B, T: Iterator<A>> Iterator<B> for Map<'a, A, B, T> {\n+impl<A, B, I, F> Iterator<B> for Map<A, B, I, F> where I: Iterator<A>, F: FnMut(A) -> B {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         let next = self.iter.next();\n@@ -1404,7 +1407,10 @@ impl<'a, A, B, T: Iterator<A>> Iterator<B> for Map<'a, A, B, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B> for Map<'a, A, B, T> {\n+impl<A, B, I, F> DoubleEndedIterator<B> for Map<A, B, I, F> where\n+    I: DoubleEndedIterator<A>,\n+    F: FnMut(A) -> B,\n+{\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n         let next = self.iter.next_back();\n@@ -1413,7 +1419,10 @@ impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B> for Map<'a, A,\n }\n \n #[experimental = \"trait is experimental\"]\n-impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A, B, T> {\n+impl<A, B, I, F> RandomAccessIterator<B> for Map<A, B, I, F> where\n+    I: RandomAccessIterator<A>,\n+    F: FnMut(A) -> B,\n+{\n     #[inline]\n     fn indexable(&self) -> uint {\n         self.iter.indexable()"}, {"sha": "051c36a2dc0b9c29913415902eedeb5c7c2c6de2", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1646d10edc57ec82536d6253f866084beb69a73e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1646d10edc57ec82536d6253f866084beb69a73e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1646d10edc57ec82536d6253f866084beb69a73e", "patch": "@@ -323,8 +323,7 @@ impl<'a> DoubleEndedIterator<(uint, char)> for CharOffsets<'a> {\n \n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n-pub type Bytes<'a> =\n-    Map<'a, &'a u8, u8, slice::Items<'a, u8>>;\n+pub type Bytes<'a> = Map<&'a u8, u8, slice::Items<'a, u8>, fn(&u8) -> u8>;\n \n /// An iterator over the substrings of a string, separated by `sep`.\n #[deriving(Clone)]\n@@ -349,8 +348,7 @@ pub struct CharSplitsN<'a, Sep> {\n }\n \n /// An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`).\n-pub type AnyLines<'a> =\n-    Map<'a, &'a str, &'a str, CharSplits<'a, char>>;\n+pub type AnyLines<'a> = Map<&'a str, &'a str, CharSplits<'a, char>, fn(&str) -> &str>;\n \n impl<'a, Sep> CharSplits<'a, Sep> {\n     #[inline]\n@@ -1980,7 +1978,9 @@ impl StrPrelude for str {\n \n     #[inline]\n     fn bytes(&self) -> Bytes {\n-        self.as_bytes().iter().map(|&b| b)\n+        fn deref(&x: &u8) -> u8 { x }\n+\n+        self.as_bytes().iter().map(deref)\n     }\n \n     #[inline]\n@@ -2053,11 +2053,13 @@ impl StrPrelude for str {\n     }\n \n     fn lines_any(&self) -> AnyLines {\n-        self.lines().map(|line| {\n+        fn f(line: &str) -> &str {\n             let l = line.len();\n             if l > 0 && line.as_bytes()[l - 1] == b'\\r' { line.slice(0, l - 1) }\n             else { line }\n-        })\n+        }\n+\n+        self.lines().map(f)\n     }\n \n     #[inline]"}]}