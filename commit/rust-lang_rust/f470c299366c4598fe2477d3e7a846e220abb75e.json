{"sha": "f470c299366c4598fe2477d3e7a846e220abb75e", "node_id": "C_kwDOAAsO6NoAKGY0NzBjMjk5MzY2YzQ1OThmZTI0NzdkM2U3YTg0NmUyMjBhYmI3NWU", "commit": {"author": {"name": "DaniPopes", "email": "57450786+DaniPopes@users.noreply.github.com", "date": "2023-04-10T19:02:49Z"}, "committer": {"name": "DaniPopes", "email": "57450786+DaniPopes@users.noreply.github.com", "date": "2023-04-10T19:02:49Z"}, "message": "Fix remaining typos", "tree": {"sha": "59d74f467e731c35e5199624ffec26fff902c587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d74f467e731c35e5199624ffec26fff902c587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f470c299366c4598fe2477d3e7a846e220abb75e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdOrdJNeWRt9kyFLLDwlkDdt6xpIFAmQ0XVkACgkQDwlkDdt6\nxpLuaw/+J6ogU8WPYCqWdCAGCRtI/Vz/E26uOPTbwwqzBw6kTSXVz6rvZPVpj9Yt\nc5mdYPw4puV4I2+T56E4jxrMw1AJCj0qHABxDceRFGxeSDCO3IL2w4r8QFJ2EYQy\nUsXjq4Fn0TTnZ+0nfN70ZKaRk7O+zDBmmSBd312lKIjudiM/wSAOLxFwJV9wMupL\nkZULYeXVij8dg8Hh8SsiOUTFO3LSFZtmF05YNbcNL7tmOdP2rYswzzPczkYJlpCQ\nPls6Y8mg83B+mbkF51w85vjwBG8I0A3KrcYZ2IGA8xbx96F7VXDp3hMGrnDQLRD8\nJKa9BR7WLH+HbLGGYU7fxZVEkAWmIhgxUZhxniz7I81C+Dx5wviS5LMhZnoG41Gj\nvo4B1Xlr/PsfNJjtreN9H81brm+tGm1Sl1aja1hyzno3i2xdIttluiFS1W0cC4GR\n7ttxPj874hoqGJZSjrDhfArQu654G2IxsRQsvuy4x0So3l9EDHyscqSJIQjFCHaK\nKZlVi0m0Atb5CFbSDvjpXZg9EJetFm6WEGgSmeBFAFBsPZTAl1ssR7wGzg+GzQSs\nYmxDxQnYwm1DKzDZA6bf//QfWY7PCOZp53xha5a3JP7V1lcqkTef3YhoH6zAyb8W\nHbhuAVsCbAwvC9JGI1AeLWD7zhYCSbLmFAT72Voip7IgMj6HvOA=\n=gVeK\n-----END PGP SIGNATURE-----", "payload": "tree 59d74f467e731c35e5199624ffec26fff902c587\nparent b410f3f7aeea95ba5362bb5dddbf5e66183adc40\nauthor DaniPopes <57450786+DaniPopes@users.noreply.github.com> 1681153369 +0200\ncommitter DaniPopes <57450786+DaniPopes@users.noreply.github.com> 1681153369 +0200\n\nFix remaining typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f470c299366c4598fe2477d3e7a846e220abb75e", "html_url": "https://github.com/rust-lang/rust/commit/f470c299366c4598fe2477d3e7a846e220abb75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f470c299366c4598fe2477d3e7a846e220abb75e/comments", "author": {"login": "DaniPopes", "id": 57450786, "node_id": "MDQ6VXNlcjU3NDUwNzg2", "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniPopes", "html_url": "https://github.com/DaniPopes", "followers_url": "https://api.github.com/users/DaniPopes/followers", "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}", "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions", "organizations_url": "https://api.github.com/users/DaniPopes/orgs", "repos_url": "https://api.github.com/users/DaniPopes/repos", "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniPopes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DaniPopes", "id": 57450786, "node_id": "MDQ6VXNlcjU3NDUwNzg2", "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniPopes", "html_url": "https://github.com/DaniPopes", "followers_url": "https://api.github.com/users/DaniPopes/followers", "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}", "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions", "organizations_url": "https://api.github.com/users/DaniPopes/orgs", "repos_url": "https://api.github.com/users/DaniPopes/repos", "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniPopes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b410f3f7aeea95ba5362bb5dddbf5e66183adc40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b410f3f7aeea95ba5362bb5dddbf5e66183adc40", "html_url": "https://github.com/rust-lang/rust/commit/b410f3f7aeea95ba5362bb5dddbf5e66183adc40"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "081b3638383dfbc755aabf96d947727f62e41fe5", "filename": "config.example.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -257,7 +257,7 @@ changelog-seen = 2\n #python = \"python\"\n \n # The path to the REUSE executable to use. Note that REUSE is not required in\n-# most cases, as our tooling relies on a cached (and shrinked) copy of the\n+# most cases, as our tooling relies on a cached (and shrunk) copy of the\n # REUSE output present in the git repository and in our source tarballs.\n #\n # REUSE is only needed if your changes caused the overall licensing of the"}, {"sha": "c3e3fa009a677311ff129b95b0d5f8f680def0ba", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -139,7 +139,7 @@ pub fn read_commit_info_file(root: &Path) -> Option<Info> {\n                 sha: sha.to_owned(),\n                 short_sha: short_sha.to_owned(),\n             },\n-            _ => panic!(\"the `git-comit-info` file is malformed\"),\n+            _ => panic!(\"the `git-commit-info` file is malformed\"),\n         };\n         Some(info)\n     } else {"}, {"sha": "96f66c89c259f69fd7bcd274c3d5c4274fe5c01c", "filename": "src/doc/style-guide/src/expressions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -643,7 +643,7 @@ Examples:\n ```rust\n match foo {\n     foo => bar,\n-    a_very_long_patten | another_pattern if an_expression() => {\n+    a_very_long_pattern | another_pattern if an_expression() => {\n         no_room_for_this_expression()\n     }\n     foo => {"}, {"sha": "05ffdcf201c82d85e415aff89bd51e1473aa749f", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats-format.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -3,4 +3,4 @@\n --------------------\n \n The `-Z dump-mono-stats-format` compiler flag controls what file format to use for `-Z dump-mono-stats`.\n-The default is markdown; currently JSON is also supported. JSON can be useful for programatically manipulating the results (e.g. to find the item that took the longest to compile).\n+The default is markdown; currently JSON is also supported. JSON can be useful for programmatically manipulating the results (e.g. to find the item that took the longest to compile)."}, {"sha": "f29e1e4d27a27d284576b9c156fa897596ed6a6a", "filename": "src/etc/installer/msi/rust.wxs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -119,7 +119,7 @@\n         <SetProperty Sequence=\"ui\" Before=\"CostFinalize\"\n             Id=\"WixAppFolder\" Value=\"WixPerUserFolder\">NOT ALLUSERS</SetProperty>\n \n-        <!-- UI sets ALLUSERS per user selection; progagate this choice to MSIINSTALLPERUSER before executing installation actions -->\n+        <!-- UI sets ALLUSERS per user selection; propagate this choice to MSIINSTALLPERUSER before executing installation actions -->\n         <SetProperty Sequence=\"ui\" Before=\"ExecuteAction\"\n             Id=\"MSIINSTALLPERUSER\" Value=\"1\">NOT ALLUSERS</SetProperty>\n "}, {"sha": "3cf8ceed62036997246c072979ffc832a6be6f0e", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -550,7 +550,7 @@ pub enum Type {\n     DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n-    /// Built in numberic (i*, u*, f*) types, bool, and char\n+    /// Built in numeric (i*, u*, f*) types, bool, and char\n     Primitive(String),\n     /// `extern \"ABI\" fn`\n     FunctionPointer(Box<FunctionPointer>),"}, {"sha": "68b6cef6432723803824691471c2957a4dcc2b99", "filename": "src/tools/collect-license-metadata/src/path_tree.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -10,8 +10,8 @@ use std::path::{Path, PathBuf};\n #[derive(serde::Serialize)]\n #[serde(rename_all = \"kebab-case\", tag = \"type\")]\n pub(crate) enum Node<L> {\n-    Root { childs: Vec<Node<L>> },\n-    Directory { name: PathBuf, childs: Vec<Node<L>>, license: Option<L> },\n+    Root { children: Vec<Node<L>> },\n+    Directory { name: PathBuf, children: Vec<Node<L>>, license: Option<L> },\n     File { name: PathBuf, license: L },\n     Group { files: Vec<PathBuf>, directories: Vec<PathBuf>, license: L },\n     Empty,\n@@ -48,14 +48,14 @@ impl Node<LicenseId> {\n     /// ```\n     fn merge_directories(&mut self) {\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, license: None, .. } => {\n+            Node::Root { children } | Node::Directory { children, license: None, .. } => {\n                 let mut directories = BTreeMap::new();\n                 let mut files = Vec::new();\n \n-                for child in childs.drain(..) {\n+                for child in children.drain(..) {\n                     match child {\n-                        Node::Directory { name, mut childs, license: None } => {\n-                            directories.entry(name).or_insert_with(Vec::new).append(&mut childs);\n+                        Node::Directory { name, mut children, license: None } => {\n+                            directories.entry(name).or_insert_with(Vec::new).append(&mut children);\n                         }\n                         file @ Node::File { .. } => {\n                             files.push(file);\n@@ -73,14 +73,14 @@ impl Node<LicenseId> {\n                     }\n                 }\n \n-                childs.extend(directories.into_iter().map(|(name, childs)| Node::Directory {\n+                children.extend(directories.into_iter().map(|(name, children)| Node::Directory {\n                     name,\n-                    childs,\n+                    children,\n                     license: None,\n                 }));\n-                childs.append(&mut files);\n+                children.append(&mut files);\n \n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_directories();\n                 }\n             }\n@@ -105,13 +105,13 @@ impl Node<LicenseId> {\n     /// our inclusion of LLVM.\n     fn collapse_in_licensed_directories(&mut self) {\n         match self {\n-            Node::Directory { childs, license, .. } => {\n-                for child in &mut *childs {\n+            Node::Directory { children, license, .. } => {\n+                for child in &mut *children {\n                     child.collapse_in_licensed_directories();\n                 }\n \n                 let mut licenses_count = BTreeMap::new();\n-                for child in &*childs {\n+                for child in &*children {\n                     let Some(license) = child.license() else { continue };\n                     *licenses_count.entry(license).or_insert(0) += 1;\n                 }\n@@ -122,12 +122,12 @@ impl Node<LicenseId> {\n                     .map(|(license, _)| license);\n \n                 if let Some(most_popular_license) = most_popular_license {\n-                    childs.retain(|child| child.license() != Some(most_popular_license));\n+                    children.retain(|child| child.license() != Some(most_popular_license));\n                     *license = Some(most_popular_license);\n                 }\n             }\n-            Node::Root { childs } => {\n-                for child in &mut *childs {\n+            Node::Root { children } => {\n+                for child in &mut *children {\n                     child.collapse_in_licensed_directories();\n                 }\n             }\n@@ -138,29 +138,29 @@ impl Node<LicenseId> {\n     }\n \n     /// Reduce the depth of the tree by merging subdirectories with the same license as their\n-    /// parent directory into their parent, and adjusting the paths of the childs accordingly.\n+    /// parent directory into their parent, and adjusting the paths of the children accordingly.\n     fn merge_directory_licenses(&mut self) {\n         match self {\n-            Node::Root { childs } => {\n-                for child in &mut *childs {\n+            Node::Root { children } => {\n+                for child in &mut *children {\n                     child.merge_directory_licenses();\n                 }\n             }\n-            Node::Directory { childs, license, .. } => {\n+            Node::Directory { children, license, .. } => {\n                 let mut to_add = Vec::new();\n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_directory_licenses();\n \n                     let Node::Directory {\n                         name: child_name,\n-                        childs: child_childs,\n+                        children: child_children,\n                         license: child_license,\n                     } = child else { continue };\n \n                     if child_license != license {\n                         continue;\n                     }\n-                    for mut child_child in child_childs.drain(..) {\n+                    for mut child_child in child_children.drain(..) {\n                         match &mut child_child {\n                             Node::Root { .. } => {\n                                 panic!(\"can't have a root inside another element\");\n@@ -181,7 +181,7 @@ impl Node<LicenseId> {\n \n                     *child = Node::Empty;\n                 }\n-                childs.append(&mut to_add);\n+                children.append(&mut to_add);\n             }\n             Node::Empty => {}\n             Node::File { .. } => {}\n@@ -203,14 +203,14 @@ impl Node<LicenseId> {\n             directories: Vec<PathBuf>,\n         }\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, .. } => {\n+            Node::Root { children } | Node::Directory { children, .. } => {\n                 let mut grouped: BTreeMap<LicenseId, Grouped> = BTreeMap::new();\n \n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_groups();\n                     match child {\n-                        Node::Directory { name, childs, license: Some(license) } => {\n-                            if childs.is_empty() {\n+                        Node::Directory { name, children, license: Some(license) } => {\n+                            if children.is_empty() {\n                                 grouped\n                                     .entry(*license)\n                                     .or_insert_with(Grouped::default)\n@@ -234,16 +234,16 @@ impl Node<LicenseId> {\n                 for (license, mut grouped) in grouped.into_iter() {\n                     if grouped.files.len() + grouped.directories.len() <= 1 {\n                         if let Some(name) = grouped.files.pop() {\n-                            childs.push(Node::File { license, name });\n+                            children.push(Node::File { license, name });\n                         } else if let Some(name) = grouped.directories.pop() {\n-                            childs.push(Node::Directory {\n+                            children.push(Node::Directory {\n                                 name,\n-                                childs: Vec::new(),\n+                                children: Vec::new(),\n                                 license: Some(license),\n                             });\n                         }\n                     } else {\n-                        childs.push(Node::Group {\n+                        children.push(Node::Group {\n                             license,\n                             files: grouped.files,\n                             directories: grouped.directories,\n@@ -261,11 +261,11 @@ impl Node<LicenseId> {\n     /// sure to remove them from the tree.\n     fn remove_empty(&mut self) {\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, .. } => {\n-                for child in &mut *childs {\n+            Node::Root { children } | Node::Directory { children, .. } => {\n+                for child in &mut *children {\n                     child.remove_empty();\n                 }\n-                childs.retain(|child| !matches!(child, Node::Empty));\n+                children.retain(|child| !matches!(child, Node::Empty));\n             }\n             Node::Group { .. } => {}\n             Node::File { .. } => {}\n@@ -275,7 +275,7 @@ impl Node<LicenseId> {\n \n     fn license(&self) -> Option<LicenseId> {\n         match self {\n-            Node::Directory { childs, license: Some(license), .. } if childs.is_empty() => {\n+            Node::Directory { children, license: Some(license), .. } if children.is_empty() => {\n                 Some(*license)\n             }\n             Node::File { license, .. } => Some(*license),\n@@ -285,7 +285,7 @@ impl Node<LicenseId> {\n }\n \n pub(crate) fn build(mut input: Vec<(PathBuf, LicenseId)>) -> Node<LicenseId> {\n-    let mut childs = Vec::new();\n+    let mut children = Vec::new();\n \n     // Ensure reproducibility of all future steps.\n     input.sort();\n@@ -295,15 +295,15 @@ pub(crate) fn build(mut input: Vec<(PathBuf, LicenseId)>) -> Node<LicenseId> {\n         for component in path.parent().unwrap_or_else(|| Path::new(\".\")).components().rev() {\n             node = Node::Directory {\n                 name: component.as_os_str().into(),\n-                childs: vec![node],\n+                children: vec![node],\n                 license: None,\n             };\n         }\n \n-        childs.push(node);\n+        children.push(node);\n     }\n \n-    Node::Root { childs }\n+    Node::Root { children }\n }\n \n /// Convert a `Node<LicenseId>` into a `Node<&License>`, expanding all interned license IDs with a\n@@ -313,14 +313,14 @@ pub(crate) fn expand_interned_licenses(\n     interner: &LicensesInterner,\n ) -> Node<&License> {\n     match node {\n-        Node::Root { childs } => Node::Root {\n-            childs: childs\n+        Node::Root { children } => Node::Root {\n+            children: children\n                 .into_iter()\n                 .map(|child| expand_interned_licenses(child, interner))\n                 .collect(),\n         },\n-        Node::Directory { name, childs, license } => Node::Directory {\n-            childs: childs\n+        Node::Directory { name, children, license } => Node::Directory {\n+            children: children\n                 .into_iter()\n                 .map(|child| expand_interned_licenses(child, interner))\n                 .collect(),"}, {"sha": "60c77167613db45da67fe05cb29fab3331a71a4f", "filename": "src/tools/generate-copyright/src/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -20,17 +20,17 @@ fn render_recursive(node: &Node, buffer: &mut Vec<u8>, depth: usize) -> Result<(\n     let prefix = std::iter::repeat(\"> \").take(depth + 1).collect::<String>();\n \n     match node {\n-        Node::Root { childs } => {\n-            for child in childs {\n+        Node::Root { children } => {\n+            for child in children {\n                 render_recursive(child, buffer, depth)?;\n             }\n         }\n-        Node::Directory { name, childs, license } => {\n+        Node::Directory { name, children, license } => {\n             render_license(&prefix, std::iter::once(name), license, buffer)?;\n-            if !childs.is_empty() {\n+            if !children.is_empty() {\n                 writeln!(buffer, \"{prefix}\")?;\n                 writeln!(buffer, \"{prefix}*Exceptions:*\")?;\n-                for child in childs {\n+                for child in children {\n                     writeln!(buffer, \"{prefix}\")?;\n                     render_recursive(child, buffer, depth + 1)?;\n                 }\n@@ -73,8 +73,8 @@ struct Metadata {\n #[derive(serde::Deserialize)]\n #[serde(rename_all = \"kebab-case\", tag = \"type\")]\n pub(crate) enum Node {\n-    Root { childs: Vec<Node> },\n-    Directory { name: String, childs: Vec<Node>, license: License },\n+    Root { children: Vec<Node> },\n+    Directory { name: String, children: Vec<Node>, license: License },\n     File { name: String, license: License },\n     Group { files: Vec<String>, directories: Vec<String>, license: License },\n }"}, {"sha": "e3d05ec83159d6385fd08b376fb94ab269718726", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -237,7 +237,7 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n             // Serde json doesn't implement Ord or Hash for Value, so we must\n             // use a Vec here. While in theory that makes setwize equality\n-            // O(n^2), in practice n will never be large enought to matter.\n+            // O(n^2), in practice n will never be large enough to matter.\n             let expected_values =\n                 values.iter().map(|v| string_to_value(v, cache)).collect::<Vec<_>>();\n             if expected_values.len() != got_values.len() {"}, {"sha": "45a9c93ee0b546640033a668fd2bb3d5852614a8", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -1,6 +1,6 @@\n use rustdoc_json_types::{Item, ItemEnum, ItemKind, ItemSummary};\n \n-/// A univeral way to represent an [`ItemEnum`] or [`ItemKind`]\n+/// A universal way to represent an [`ItemEnum`] or [`ItemKind`]\n #[derive(Debug, Clone, Copy)]\n pub(crate) enum Kind {\n     Module,\n@@ -53,7 +53,7 @@ impl Kind {\n             Primitive => true,\n             ForeignType => true,\n \n-            // FIXME(adotinthevoid): I'm not sure if these are corrent\n+            // FIXME(adotinthevoid): I'm not sure if these are correct\n             Keyword => false,\n             OpaqueTy => false,\n             ProcAttribute => false,"}, {"sha": "ee163ddfdd9a8714bcb9fe5919796040e8bea614", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -72,7 +72,7 @@ fn main() -> Result<()> {\n                         )\n                     }\n                     [sel] => eprintln!(\n-                        \"{} not in index or paths, but refered to at '{}'\",\n+                        \"{} not in index or paths, but referred to at '{}'\",\n                         err.id.0,\n                         json_find::to_jsonpath(&sel)\n                     ),\n@@ -85,12 +85,12 @@ fn main() -> Result<()> {\n                                 .collect::<Vec<_>>()\n                                 .join(\", \");\n                             eprintln!(\n-                                \"{} not in index or paths, but refered to at {sels}\",\n+                                \"{} not in index or paths, but referred to at {sels}\",\n                                 err.id.0\n                             );\n                         } else {\n                             eprintln!(\n-                                \"{} not in index or paths, but refered to at '{}' and {} more\",\n+                                \"{} not in index or paths, but referred to at '{}' and {} more\",\n                                 err.id.0,\n                                 json_find::to_jsonpath(&sel),\n                                 sels.len() - 1,"}, {"sha": "bad86701daedadcb2df65ac168e697ac9b7fa9e4", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -86,7 +86,7 @@ def gh_url():\n     return os.environ['TOOLSTATE_ISSUES_API_URL']\n \n \n-def maybe_delink(message):\n+def maybe_unlink(message):\n     # type: (str) -> str\n     if os.environ.get('TOOLSTATE_SKIP_MENTIONS') is not None:\n         return message.replace(\"@\", \"\")\n@@ -109,7 +109,7 @@ def issue(\n     else:\n         status_description = 'no longer builds'\n     request = json.dumps({\n-        'body': maybe_delink(textwrap.dedent('''\\\n+        'body': maybe_unlink(textwrap.dedent('''\\\n         Hello, this is your friendly neighborhood mergebot.\n         After merging PR {}, I observed that the tool {} {}.\n         A follow-up PR to the repository {} is needed to fix the fallout.\n@@ -285,7 +285,7 @@ def update_latest(\n     issue_url = gh_url() + '/{}/comments'.format(number)\n     response = urllib2.urlopen(urllib2.Request(\n         issue_url,\n-        json.dumps({'body': maybe_delink(message)}).encode(),\n+        json.dumps({'body': maybe_unlink(message)}).encode(),\n         {\n             'Authorization': 'token ' + github_token,\n             'Content-Type': 'application/json',"}, {"sha": "58f51959e1f810474db7aede60df320d348be582", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f470c299366c4598fe2477d3e7a846e220abb75e/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f470c299366c4598fe2477d3e7a846e220abb75e/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=f470c299366c4598fe2477d3e7a846e220abb75e", "patch": "@@ -344,11 +344,11 @@ message = \"Some changes occurred in `const_evaluatable.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_middle/src/ty/abstract_const.rs\"]\n-message = \"Some changes occured in `abstract_const.rs`\"\n+message = \"Some changes occurred in `abstract_const.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_ty_utils/src/consts.rs\"]\n-message = \"Some changes occured in `rustc_ty_utils::consts.rs`\"\n+message = \"Some changes occurred in `rustc_ty_utils::consts.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/solve/\"]"}]}