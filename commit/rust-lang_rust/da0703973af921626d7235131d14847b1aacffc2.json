{"sha": "da0703973af921626d7235131d14847b1aacffc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDcwMzk3M2FmOTIxNjI2ZDcyMzUxMzFkMTQ4NDdiMWFhY2ZmYzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-06T23:33:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-09T07:38:46Z"}, "message": "core: Move the collections traits to libcollections\n\nThis commit moves Mutable, Map, MutableMap, Set, and MutableSet from\n`core::collections` to the `collections` crate at the top-level. Additionally,\nthis removes the `deque` module and moves the `Deque` trait to only being\navailable at the top-level of the collections crate.\n\nAll functionality continues to be reexported through `std::collections`.\n\n[breaking-change]", "tree": {"sha": "6b0a5c3e35c54c340553eb140019b8ab54a99df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0a5c3e35c54c340553eb140019b8ab54a99df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0703973af921626d7235131d14847b1aacffc2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0703973af921626d7235131d14847b1aacffc2", "html_url": "https://github.com/rust-lang/rust/commit/da0703973af921626d7235131d14847b1aacffc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0703973af921626d7235131d14847b1aacffc2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50942c7695783875bd2161596036a52755ffb09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/50942c7695783875bd2161596036a52755ffb09c", "html_url": "https://github.com/rust-lang/rust/commit/50942c7695783875bd2161596036a52755ffb09c"}], "stats": {"total": 325, "additions": 171, "deletions": 154}, "files": [{"sha": "42c8177977057323d89d71363dab68d1defd5390", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -20,6 +20,7 @@ use core::slice;\n use core::uint;\n use std::hash;\n \n+use {Collection, Mutable, Set, MutableSet};\n use vec::Vec;\n \n #[deriving(Clone)]\n@@ -1008,6 +1009,7 @@ mod tests {\n     use std::rand::Rng;\n     use test::Bencher;\n \n+    use {Set, Mutable, MutableSet};\n     use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n                from_bytes};\n     use bitv;"}, {"sha": "82abe69a63996fb3aad41a1f4deb81a8a6070a97", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -24,6 +24,7 @@ use alloc::owned::Box;\n use core::fmt;\n use core::fmt::Show;\n \n+use Collection;\n use vec::Vec;\n \n #[allow(missing_doc)]"}, {"sha": "1faa9be99e3a54e919643e4be4f4409d223c5f5b", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -10,41 +10,13 @@\n \n //! Container traits for collections\n \n-use core::prelude::*;\n-\n-/// A double-ended sequence that allows querying, insertion and deletion at both ends.\n-pub trait Deque<T> : Mutable {\n-    /// Provide a reference to the front element, or None if the sequence is empty\n-    fn front<'a>(&'a self) -> Option<&'a T>;\n-\n-    /// Provide a mutable reference to the front element, or None if the sequence is empty\n-    fn front_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n-\n-    /// Provide a reference to the back element, or None if the sequence is empty\n-    fn back<'a>(&'a self) -> Option<&'a T>;\n-\n-    /// Provide a mutable reference to the back element, or None if the sequence is empty\n-    fn back_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n-\n-    /// Insert an element first in the sequence\n-    fn push_front(&mut self, elt: T);\n-\n-    /// Insert an element last in the sequence\n-    fn push_back(&mut self, elt: T);\n-\n-    /// Remove the last element and return it, or None if the sequence is empty\n-    fn pop_back(&mut self) -> Option<T>;\n-\n-    /// Remove the first element and return it, or None if the sequence is empty\n-    fn pop_front(&mut self) -> Option<T>;\n-}\n-\n #[cfg(test)]\n pub mod bench {\n     use std::prelude::*;\n     use std::rand;\n     use std::rand::Rng;\n     use test::Bencher;\n+    use MutableMap;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,\n@@ -121,3 +93,4 @@ pub mod bench {\n         })\n      }\n }\n+"}, {"sha": "5a2312456913824a385371596b0b46597620418f", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -13,7 +13,7 @@\n //! The DList allows pushing and popping elements at either end.\n //!\n //! DList implements the trait Deque. It should be imported with `use\n-//! collections::deque::Deque`.\n+//! collections::Deque`.\n \n // DList is constructed like a singly-linked list over the field `next`.\n // including the last link being None; each Node owns its `next` field.\n@@ -29,7 +29,7 @@ use core::iter;\n use core::mem;\n use core::ptr;\n \n-use deque::Deque;\n+use {Collection, Mutable, Deque};\n \n /// A doubly-linked list.\n pub struct DList<T> {\n@@ -629,7 +629,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use deque::Deque;\n+    use Deque;\n     use super::{DList, Node, ListInsertion};\n     use vec::Vec;\n "}, {"sha": "602ecf39a836c837374bbe167826a9b4895e0b09", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 116, "deletions": 7, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -32,9 +32,11 @@ extern crate alloc;\n #[cfg(test)] #[phase(syntax, link)] extern crate std;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n+use core::prelude::*;\n+\n+pub use core::collections::Collection;\n pub use bitv::{Bitv, BitvSet};\n pub use btree::BTree;\n-pub use deque::Deque;\n pub use dlist::DList;\n pub use enum_set::EnumSet;\n pub use priority_queue::PriorityQueue;\n@@ -47,7 +49,6 @@ mod macros;\n \n pub mod bitv;\n pub mod btree;\n-pub mod deque;\n pub mod dlist;\n pub mod enum_set;\n pub mod priority_queue;\n@@ -64,12 +65,120 @@ pub mod hash;\n // Internal unicode fiddly bits for the str module\n mod unicode;\n \n-// FIXME(#14008) should this actually exist, or should a method be added?\n-fn expect<T>(a: core::option::Option<T>, b: &str) -> T {\n-    match a {\n-        core::option::Some(a) => a,\n-        core::option::None => fail!(\"{}\", b),\n+mod deque;\n+\n+/// A trait to represent mutable containers\n+pub trait Mutable: Collection {\n+    /// Clear the container, removing all values.\n+    fn clear(&mut self);\n+}\n+\n+/// A map is a key-value store where values may be looked up by their keys. This\n+/// trait provides basic operations to operate on these stores.\n+pub trait Map<K, V>: Collection {\n+    /// Return a reference to the value corresponding to the key\n+    fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n+\n+    /// Return true if the map contains a value for the specified key\n+    #[inline]\n+    fn contains_key(&self, key: &K) -> bool {\n+        self.find(key).is_some()\n+    }\n+}\n+\n+/// This trait provides basic operations to modify the contents of a map.\n+pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n+    /// Insert a key-value pair into the map. An existing value for a\n+    /// key is replaced by the new value. Return true if the key did\n+    /// not already exist in the map.\n+    #[inline]\n+    fn insert(&mut self, key: K, value: V) -> bool {\n+        self.swap(key, value).is_none()\n+    }\n+\n+    /// Remove a key-value pair from the map. Return true if the key\n+    /// was present in the map, otherwise false.\n+    #[inline]\n+    fn remove(&mut self, key: &K) -> bool {\n+        self.pop(key).is_some()\n+    }\n+\n+    /// Insert a key-value pair from the map. If the key already had a value\n+    /// present in the map, that value is returned. Otherwise None is returned.\n+    fn swap(&mut self, k: K, v: V) -> Option<V>;\n+\n+    /// Removes a key from the map, returning the value at the key if the key\n+    /// was previously in the map.\n+    fn pop(&mut self, k: &K) -> Option<V>;\n+\n+    /// Return a mutable reference to the value corresponding to the key\n+    fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n+}\n+\n+/// A set is a group of objects which are each distinct from one another. This\n+/// trait represents actions which can be performed on sets to iterate over\n+/// them.\n+pub trait Set<T>: Collection {\n+    /// Return true if the set contains a value\n+    fn contains(&self, value: &T) -> bool;\n+\n+    /// Return true if the set has no elements in common with `other`.\n+    /// This is equivalent to checking for an empty intersection.\n+    fn is_disjoint(&self, other: &Self) -> bool;\n+\n+    /// Return true if the set is a subset of another\n+    fn is_subset(&self, other: &Self) -> bool;\n+\n+    /// Return true if the set is a superset of another\n+    fn is_superset(&self, other: &Self) -> bool {\n+        other.is_subset(self)\n     }\n+\n+    // FIXME #8154: Add difference, sym. difference, intersection and union iterators\n+}\n+\n+/// This trait represents actions which can be performed on sets to mutate\n+/// them.\n+pub trait MutableSet<T>: Set<T> + Mutable {\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool;\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool;\n+}\n+\n+/// A double-ended sequence that allows querying, insertion and deletion at both\n+/// ends.\n+pub trait Deque<T> : Mutable {\n+    /// Provide a reference to the front element, or None if the sequence is\n+    /// empty\n+    fn front<'a>(&'a self) -> Option<&'a T>;\n+\n+    /// Provide a mutable reference to the front element, or None if the\n+    /// sequence is empty\n+    fn front_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n+\n+    /// Provide a reference to the back element, or None if the sequence is\n+    /// empty\n+    fn back<'a>(&'a self) -> Option<&'a T>;\n+\n+    /// Provide a mutable reference to the back element, or None if the sequence\n+    /// is empty\n+    fn back_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n+\n+    /// Insert an element first in the sequence\n+    fn push_front(&mut self, elt: T);\n+\n+    /// Insert an element last in the sequence\n+    fn push_back(&mut self, elt: T);\n+\n+    /// Remove the last element and return it, or None if the sequence is empty\n+    fn pop_back(&mut self) -> Option<T>;\n+\n+    /// Remove the first element and return it, or None if the sequence is empty\n+    fn pop_front(&mut self) -> Option<T>;\n }\n \n // FIXME(#14344) this shouldn't be necessary"}, {"sha": "ea3e7d1747170d0d6a1ba197fc7d61de7069af3f", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -17,6 +17,7 @@ use core::prelude::*;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n+use {Collection, Mutable};\n use slice;\n use vec::Vec;\n "}, {"sha": "addf73d67a88e7f8e0e2cb804c5f8652710f21f6", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -11,15 +11,15 @@\n //! A double-ended queue implemented as a circular buffer\n //!\n //! RingBuf implements the trait Deque. It should be imported with `use\n-//! collections::deque::Deque`.\n+//! collections::Deque`.\n \n use core::prelude::*;\n \n use core::cmp;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n \n-use deque::Deque;\n+use {Deque, Collection, Mutable};\n use vec::Vec;\n \n static INITIAL_CAPACITY: uint = 8u; // 2^3\n@@ -415,7 +415,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use deque::Deque;\n+    use {Deque, Mutable};\n     use super::RingBuf;\n     use vec::Vec;\n "}, {"sha": "1bc563686933e5efa23a23d4407ad8b8c878f55c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -109,6 +109,8 @@ use core::mem::transmute;\n use core::mem;\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};\n+\n+use Collection;\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n@@ -296,9 +298,9 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n \n         let len = self.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n-        let data_size = ::expect(data_size, \"overflow in to_owned()\");\n+        let data_size = data_size.expect(\"overflow in to_owned()\");\n         let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n-        let size = ::expect(size, \"overflow in to_owned()\");\n+        let size = size.expect(\"overflow in to_owned()\");\n \n         unsafe {\n             // this should pass the real required alignment\n@@ -865,6 +867,7 @@ mod tests {\n     use std::rt;\n     use slice::*;\n \n+    use Mutable;\n     use vec::Vec;\n \n     fn square(n: uint) -> uint { n * n }"}, {"sha": "cc901864ab532b3eab8bbb9ba95a1ac5527b59e0", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -21,6 +21,7 @@ use core::fmt;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n+use {Collection, Mutable, Map, MutableMap};\n use {vec, slice};\n use vec::Vec;\n \n@@ -123,7 +124,7 @@ impl<V> SmallIntMap<V> {\n     }\n \n     pub fn get<'a>(&'a self, key: &uint) -> &'a V {\n-        ::expect(self.find(key), \"key not present\")\n+        self.find(key).expect(\"key not present\")\n     }\n \n     /// An iterator visiting all key-value pairs in ascending order by the keys.\n@@ -264,6 +265,7 @@ double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n mod test_map {\n     use std::prelude::*;\n \n+    use {Map, MutableMap, Mutable};\n     use super::SmallIntMap;\n \n     #[test]"}, {"sha": "49d8775dd9cb649a97570ac2416828c7779b7e7d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -76,6 +76,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n \n+use Collection;\n use hash;\n use string::String;\n use vec::Vec;"}, {"sha": "76f53c9b257493216ef5ee9e715ac845fd0560de", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -18,6 +18,7 @@ use core::mem;\n use core::ptr;\n use core::raw::Slice;\n \n+use {Collection, Mutable};\n use hash;\n use str;\n use str::{CharRange, StrAllocating};\n@@ -356,6 +357,7 @@ mod tests {\n     use std::prelude::*;\n     use test::Bencher;\n \n+    use Mutable;\n     use str::{Str, StrSlice};\n     use super::String;\n "}, {"sha": "489fe60cebf0ec021c8bb744a57dc7ee1be9aa98", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -22,6 +22,7 @@ use core::iter;\n use core::mem::{replace, swap};\n use core::ptr;\n \n+use {Collection, Mutable, Set, MutableSet, MutableMap, Map};\n use vec::Vec;\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -1006,6 +1007,7 @@ mod test_treemap {\n     use std::rand::Rng;\n     use std::rand;\n \n+    use {Map, MutableMap, Mutable};\n     use super::{TreeMap, TreeNode};\n \n     #[test]\n@@ -1437,7 +1439,6 @@ mod test_treemap {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n     use test::Bencher;\n \n     use super::TreeMap;\n@@ -1500,6 +1501,7 @@ mod bench {\n mod test_set {\n     use std::prelude::*;\n \n+    use {Set, MutableSet, Mutable, MutableMap};\n     use super::{TreeMap, TreeSet};\n \n     #[test]"}, {"sha": "6e99d6054a56453b099a1211c8b89c55040be939", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -17,6 +17,7 @@ use core::mem::zeroed;\n use core::mem;\n use core::uint;\n \n+use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n use slice::{Items, MutItems};\n use slice;\n \n@@ -645,6 +646,7 @@ mod test_map {\n     use std::iter::range_step;\n     use std::uint;\n \n+    use {MutableMap, Map};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n \n     fn check_integrity<T>(trie: &TrieNode<T>) {\n@@ -923,6 +925,7 @@ mod bench_map {\n     use std::rand::{weak_rng, Rng};\n     use test::Bencher;\n \n+    use MutableMap;\n     use super::TrieMap;\n \n     #[bench]\n@@ -1031,6 +1034,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::uint;\n \n+    use {MutableSet, Set};\n     use super::TrieSet;\n \n     #[test]"}, {"sha": "dbef73efc479462b1539acf7ed8d47eb305648c8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -24,6 +24,7 @@ use core::num;\n use core::ptr;\n use core::uint;\n \n+use {Collection, Mutable};\n use slice::{MutableOrdVector, OwnedVector, MutableVectorAllocating};\n use slice::{Items, MutItems};\n \n@@ -91,8 +92,8 @@ impl<T> Vec<T> {\n         } else if capacity == 0 {\n             Vec::new()\n         } else {\n-            let size = ::expect(capacity.checked_mul(&mem::size_of::<T>()),\n-                                \"capacity overflow\");\n+            let size = capacity.checked_mul(&mem::size_of::<T>())\n+                               .expect(\"capacity overflow\");\n             let ptr = unsafe { allocate(size, mem::min_align_of::<T>()) };\n             Vec { len: 0, cap: capacity, ptr: ptr as *mut T }\n         }\n@@ -499,8 +500,8 @@ impl<T> Vec<T> {\n         if mem::size_of::<T>() == 0 { return }\n \n         if capacity > self.cap {\n-            let size = ::expect(capacity.checked_mul(&mem::size_of::<T>()),\n-                                \"capacity overflow\");\n+            let size = capacity.checked_mul(&mem::size_of::<T>())\n+                               .expect(\"capacity overflow\");\n             unsafe {\n                 self.ptr = alloc_or_realloc(self.ptr, size,\n                                             self.cap * mem::size_of::<T>());\n@@ -579,7 +580,7 @@ impl<T> Vec<T> {\n     pub fn push(&mut self, value: T) {\n         if mem::size_of::<T>() == 0 {\n             // zero-size types consume no memory, so we can't rely on the address space running out\n-            self.len = ::expect(self.len.checked_add(&1), \"length overflow\");\n+            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n             unsafe { mem::forget(value); }\n             return\n         }\n@@ -1526,9 +1527,9 @@ impl<T> FromVec<T> for ~[T] {\n     fn from_vec(mut v: Vec<T>) -> ~[T] {\n         let len = v.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n-        let data_size = ::expect(data_size, \"overflow in from_vec()\");\n+        let data_size = data_size.expect(\"overflow in from_vec()\");\n         let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n-        let size = ::expect(size, \"overflow in from_vec()\");\n+        let size = size.expect(\"overflow in from_vec()\");\n \n         // In a post-DST world, we can attempt to reuse the Vec allocation by calling\n         // shrink_to_fit() on it. That may involve a reallocation+memcpy, but that's no"}, {"sha": "0bb9289397a70290fdf08572cc8d2a369afb62e6", "filename": "src/libcore/collections.rs", "status": "modified", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcore%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibcore%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcollections.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Traits for generic collections (including `Map` and `Set`)\n-\n-use option::Option;\n+//! Traits for generic collections\n \n /// A trait to represent the abstract idea of a container. The only concrete\n /// knowledge known is the number of elements contained within.\n@@ -24,85 +22,3 @@ pub trait Collection {\n         self.len() == 0\n     }\n }\n-\n-/// A trait to represent mutable containers\n-pub trait Mutable: Collection {\n-    /// Clear the container, removing all values.\n-    fn clear(&mut self);\n-}\n-\n-/// A map is a key-value store where values may be looked up by their keys. This\n-/// trait provides basic operations to operate on these stores.\n-pub trait Map<K, V>: Collection {\n-    /// Return a reference to the value corresponding to the key\n-    fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n-\n-    /// Return true if the map contains a value for the specified key\n-    #[inline]\n-    fn contains_key(&self, key: &K) -> bool {\n-        self.find(key).is_some()\n-    }\n-}\n-\n-/// This trait provides basic operations to modify the contents of a map.\n-pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n-    /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n-    /// not already exist in the map.\n-    #[inline]\n-    fn insert(&mut self, key: K, value: V) -> bool {\n-        self.swap(key, value).is_none()\n-    }\n-\n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n-    #[inline]\n-    fn remove(&mut self, key: &K) -> bool {\n-        self.pop(key).is_some()\n-    }\n-\n-    /// Insert a key-value pair from the map. If the key already had a value\n-    /// present in the map, that value is returned. Otherwise None is returned.\n-    fn swap(&mut self, k: K, v: V) -> Option<V>;\n-\n-    /// Removes a key from the map, returning the value at the key if the key\n-    /// was previously in the map.\n-    fn pop(&mut self, k: &K) -> Option<V>;\n-\n-    /// Return a mutable reference to the value corresponding to the key\n-    fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n-}\n-\n-/// A set is a group of objects which are each distinct from one another. This\n-/// trait represents actions which can be performed on sets to iterate over\n-/// them.\n-pub trait Set<T>: Collection {\n-    /// Return true if the set contains a value\n-    fn contains(&self, value: &T) -> bool;\n-\n-    /// Return true if the set has no elements in common with `other`.\n-    /// This is equivalent to checking for an empty intersection.\n-    fn is_disjoint(&self, other: &Self) -> bool;\n-\n-    /// Return true if the set is a subset of another\n-    fn is_subset(&self, other: &Self) -> bool;\n-\n-    /// Return true if the set is a superset of another\n-    fn is_superset(&self, other: &Self) -> bool {\n-        other.is_subset(self)\n-    }\n-\n-    // FIXME #8154: Add difference, sym. difference, intersection and union iterators\n-}\n-\n-/// This trait represents actions which can be performed on sets to mutate\n-/// them.\n-pub trait MutableSet<T>: Set<T> + Mutable {\n-    /// Add a value to the set. Return true if the value was not already\n-    /// present in the set.\n-    fn insert(&mut self, value: T) -> bool;\n-\n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n-    fn remove(&mut self, value: &T) -> bool;\n-}"}, {"sha": "a780b63bfd0269c767732ea51d6690d04caa789d", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -12,7 +12,7 @@\n \n use clone::Clone;\n use cmp::{max, Eq, Equiv, PartialEq};\n-use container::{Container, Mutable, Set, MutableSet, Map, MutableMap};\n+use collections::{Collection, Mutable, Set, MutableSet, Map, MutableMap};\n use default::Default;\n use fmt::Show;\n use fmt;\n@@ -930,7 +930,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     }\n }\n \n-impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Container for HashMap<K, V, H> {\n+impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Collection for HashMap<K, V, H> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint { self.table.size() }\n }\n@@ -2160,7 +2160,7 @@ mod test_set {\n \n     use super::HashSet;\n     use slice::ImmutableEqVector;\n-    use std::collections::Collection;\n+    use collections::Collection;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "72d96804d6d7e4dd99a571ff7248c2ca37bb8017", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -38,8 +38,7 @@\n //! ```\n \n use cmp::{PartialEq, Eq};\n-use collections::HashMap;\n-use container::{Container, Mutable, MutableMap};\n+use collections::{HashMap, Collection, Mutable, MutableMap};\n use fmt;\n use hash::Hash;\n use iter::{range, Iterator};"}, {"sha": "9e5288f9541b8c1869ac400f8936e36998dbe2b2", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -12,10 +12,12 @@\n  * Collection types.\n  */\n \n-pub use core_collections::{Bitv, BitvSet, BTree, Deque, DList, EnumSet};\n+pub use core_collections::{Collection, Mutable, Map, MutableMap};\n+pub use core_collections::{Set, MutableSet, Deque};\n+pub use core_collections::{Bitv, BitvSet, BTree, DList, EnumSet};\n pub use core_collections::{PriorityQueue, RingBuf, SmallIntMap};\n pub use core_collections::{TreeMap, TreeSet, TrieMap, TrieSet};\n-pub use core_collections::{bitv, btree, deque, dlist, enum_set};\n+pub use core_collections::{bitv, btree, dlist, enum_set};\n pub use core_collections::{priority_queue, ringbuf, smallintmap, treemap, trie};\n \n pub use self::hashmap::{HashMap, HashSet};"}, {"sha": "fbdbc13e1b430ed1ea95462c2e802e970c6a3a90", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -144,7 +144,6 @@ pub use core::cell;\n pub use core::char;\n pub use core::clone;\n #[cfg(not(test))] pub use core::cmp;\n-pub use core::collections;\n pub use core::default;\n pub use core::finally;\n pub use core::intrinsics;"}, {"sha": "171535edbeb346b2ac4ce429a9e4f3609db81eba", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -13,7 +13,7 @@\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "485c2140a8d1b035f8b2271a8dba3f4394ff6517", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -60,8 +60,8 @@\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-#[doc(no_inline)] pub use container::{Container, Mutable, Map, MutableMap};\n-#[doc(no_inline)] pub use container::{Set, MutableSet};\n+#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap};\n+#[doc(no_inline)] pub use collections::{Set, MutableSet};\n #[doc(no_inline)] pub use iter::{FromIterator, Extendable, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};"}, {"sha": "2654b7a1acc6af5145592e931b67a66e1ccb071d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -62,7 +62,7 @@ mod imp {\n mod imp {\n     extern crate libc;\n \n-    use container::Container;\n+    use core_collections::Collection;\n     use io::{IoResult, IoError};\n     use mem;\n     use ops::Drop;"}, {"sha": "8655d1e47d51a01772f112c8fde0102bc45c2a82", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -10,7 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n-use container::Container;\n+use collections::Collection;\n use io::Reader;\n use rand::Rng;\n use result::{Ok, Err};"}, {"sha": "83fc95267afdf3333d82335e367bf18e793514c5", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -602,7 +602,7 @@ mod imp {\n #[allow(dead_code, uppercase_variables)]\n mod imp {\n     use c_str::CString;\n-    use container::Container;\n+    use core_collections::Collection;\n     use intrinsics;\n     use io::{IoResult, Writer};\n     use libc;"}, {"sha": "bb5f020e78c9d9ac1d1bd78f805e15278575f580", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da0703973af921626d7235131d14847b1aacffc2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0703973af921626d7235131d14847b1aacffc2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=da0703973af921626d7235131d14847b1aacffc2", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR failed to find an implementation of trait core::collections::Map<uint,int>\n-    //         for ~core::collections::Map<int,int>:Send\n+    //~^ ERROR failed to find an implementation of trait collections::Map<uint,int>\n+    //         for ~collections::Map<int,int>:Send\n }"}]}