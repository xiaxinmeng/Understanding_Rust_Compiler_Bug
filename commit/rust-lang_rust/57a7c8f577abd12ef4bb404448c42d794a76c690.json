{"sha": "57a7c8f577abd12ef4bb404448c42d794a76c690", "node_id": "C_kwDOAAsO6NoAKDU3YTdjOGY1NzdhYmQxMmVmNGJiNDA0NDQ4YzQyZDc5NGE3NmM2OTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-14T23:50:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-15T00:39:04Z"}, "message": "Fix bug in `mark_code_coverage_dead_code_cgus`.\n\nThe comment says \"Find the smallest CGU that has exported symbols and\nput the dead function stubs in that CGU\". But the code sorts the CGUs by\nsize (smallest first) and then searches them in reverse order, which\nmeans it will find the *largest* CGU that has exported symbols.\n\nThe erroneous code was introduced in #92142.\n\nThis commit changes it to use a simpler search, avoiding the sort, and\nfixes the bug in the process.", "tree": {"sha": "fdc6420e8ef844954cc082356aa0a4da7b4cab09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc6420e8ef844954cc082356aa0a4da7b4cab09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a7c8f577abd12ef4bb404448c42d794a76c690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a7c8f577abd12ef4bb404448c42d794a76c690", "html_url": "https://github.com/rust-lang/rust/commit/57a7c8f577abd12ef4bb404448c42d794a76c690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a7c8f577abd12ef4bb404448c42d794a76c690/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "html_url": "https://github.com/rust-lang/rust/commit/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "de57992beac33835f264f2e941f94665f9776e0e", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57a7c8f577abd12ef4bb404448c42d794a76c690/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a7c8f577abd12ef4bb404448c42d794a76c690/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=57a7c8f577abd12ef4bb404448c42d794a76c690", "patch": "@@ -529,20 +529,15 @@ fn mark_code_coverage_dead_code_cgu<'tcx>(codegen_units: &mut [CodegenUnit<'tcx>\n     // the object file (CGU) containing the dead function stubs is included\n     // in the final binary. This will probably require forcing these\n     // function symbols to be included via `-u` or `/include` linker args.\n-    let mut cgus: Vec<&mut CodegenUnit<'tcx>> = codegen_units.iter_mut().collect();\n-    cgus.sort_by_key(|cgu| cgu.size_estimate());\n+    let dead_code_cgu = codegen_units\n+        .iter_mut()\n+        .filter(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n+        .min_by_key(|cgu| cgu.size_estimate());\n+\n+    // If there are no CGUs that have externally linked items, then we just\n+    // pick the first CGU as a fallback.\n+    let dead_code_cgu = if let Some(cgu) = dead_code_cgu { cgu } else { &mut codegen_units[0] };\n \n-    let dead_code_cgu = if let Some(cgu) = cgus\n-        .into_iter()\n-        .rev()\n-        .find(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n-    {\n-        cgu\n-    } else {\n-        // If there are no CGUs that have externally linked items,\n-        // then we just pick the first CGU as a fallback.\n-        &mut codegen_units[0]\n-    };\n     dead_code_cgu.make_code_coverage_dead_code_cgu();\n }\n "}]}