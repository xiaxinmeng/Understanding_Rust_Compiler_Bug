{"sha": "d984f127f662f7a1fcf0472230a1b64fcc3325d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODRmMTI3ZjY2MmY3YTFmY2YwNDcyMjMwYTFiNjRmY2MzMzI1ZDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-19T01:47:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T13:13:07Z"}, "message": "move_ref_patterns: introduce tests\nbindings_after_at: harden tests", "tree": {"sha": "35a1694fb4c49d0c43a8da13f74c9ed94eeab7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a1694fb4c49d0c43a8da13f74c9ed94eeab7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d984f127f662f7a1fcf0472230a1b64fcc3325d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d984f127f662f7a1fcf0472230a1b64fcc3325d5", "html_url": "https://github.com/rust-lang/rust/commit/d984f127f662f7a1fcf0472230a1b64fcc3325d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d984f127f662f7a1fcf0472230a1b64fcc3325d5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7af9ff3e699207da7a5220b98ba9831d66697c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/7af9ff3e699207da7a5220b98ba9831d66697c80", "html_url": "https://github.com/rust-lang/rust/commit/7af9ff3e699207da7a5220b98ba9831d66697c80"}], "stats": {"total": 2460, "additions": 1919, "deletions": 541}, "files": [{"sha": "238f2d958c6253b8308e24106629c4577cdfc091", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,15 +0,0 @@\n-struct X { x: (), }\n-\n-impl Drop for X {\n-    fn drop(&mut self) {\n-        println!(\"destructor runs\");\n-    }\n-}\n-\n-fn main() {\n-    let x = Some((X { x: () }, X { x: () }));\n-    match x {\n-        Some((ref _y, _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => panic!()\n-    }\n-}"}, {"sha": "ff00aa8caa8d3bcfa7692c899b6e32d43c829eb0", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,11 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-2.rs:12:23\n-   |\n-LL |         Some((ref _y, _z)) => { },\n-   |               ------  ^^ by-move pattern here\n-   |               |\n-   |               by-ref pattern here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "e8357e917881964935dcb879735b3a412adb3caf", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,18 +0,0 @@\n-struct X { x: (), }\n-\n-impl Drop for X {\n-    fn drop(&mut self) {\n-        println!(\"destructor runs\");\n-    }\n-}\n-\n-enum DoubleOption<T,U> { Some2(T,U), None2 }\n-\n-fn main() {\n-    let x = DoubleOption::Some2(X { x: () }, X { x: () });\n-    match x {\n-        DoubleOption::Some2(ref _y, _z) => { },\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        DoubleOption::None2 => panic!()\n-    }\n-}"}, {"sha": "3e8358da3507da058d783590bd2a91a44639a37c", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-3.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-3.stderr?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,11 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-3.rs:14:37\n-   |\n-LL |         DoubleOption::Some2(ref _y, _z) => { },\n-   |                             ------  ^^ by-move pattern here\n-   |                             |\n-   |                             by-ref pattern here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "41dafd2b5bf72fe05c8235ae0664ed25a03caa11", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,15 +0,0 @@\n-struct X { x: (), }\n-\n-impl Drop for X {\n-    fn drop(&mut self) {\n-        println!(\"destructor runs\");\n-    }\n-}\n-\n-fn main() {\n-    let x = Some((X { x: () }, X { x: () }));\n-    match x {\n-        Some((_y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => panic!()\n-    }\n-}"}, {"sha": "00e0c70d6494b6d658ba149f64337498cd950aa1", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-4.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,11 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-4.rs:12:15\n-   |\n-LL |         Some((_y, ref _z)) => { },\n-   |               ^^  ------ by-ref pattern here\n-   |               |\n-   |               by-move pattern here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "88d36ab6aa66469c59dd3b2e86868642ba52a97d", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -7,6 +7,8 @@\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n \n+#![feature(move_ref_pattern)]\n+\n #![allow(unused)]\n \n use std::{\n@@ -227,6 +229,12 @@ async fn subslice_pattern_reassign(a: Rc<Allocator>) {\n     a.alloc().await;\n }\n \n+async fn move_ref_pattern(a: Rc<Allocator>) {\n+    let mut tup = (a.alloc().await, a.alloc().await, a.alloc().await, a.alloc().await);\n+    let (ref _a, ref mut _b, _c, mut _d) = tup;\n+    a.alloc().await;\n+}\n+\n fn run_test<F, G>(cx: &mut Context<'_>, ref f: F)\n where\n     F: Fn(Rc<Allocator>) -> G,\n@@ -322,4 +330,6 @@ fn main() {\n     run_test(context, |a| subslice_pattern_from_end_with_drop(a, false, true));\n     run_test(context, |a| subslice_pattern_from_end_with_drop(a, false, false));\n     run_test(context, |a| subslice_pattern_reassign(a));\n+\n+    run_test(context, |a| move_ref_pattern(a));\n }"}, {"sha": "208a743ed1815d010013a17ce209a0cb944c0350", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -2,6 +2,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n+#![feature(move_ref_pattern)]\n \n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n@@ -290,6 +291,11 @@ fn subslice_mixed_min_lengths(a: &Allocator, c: i32) {\n     }\n }\n \n+fn move_ref_pattern(a: &Allocator) {\n+    let mut tup = (a.alloc(), a.alloc(), a.alloc(), a.alloc());\n+    let (ref _a, ref mut _b, _c, mut _d) = tup;\n+}\n+\n fn panic_after_return(a: &Allocator) -> Ptr<'_> {\n     // Panic in the drop of `p` or `q` can leak\n     let exceptions = vec![8, 9];\n@@ -453,6 +459,8 @@ fn main() {\n     run_test(|a| subslice_mixed_min_lengths(a, 6));\n     run_test(|a| subslice_mixed_min_lengths(a, 7));\n \n+    run_test(|a| move_ref_pattern(a));\n+\n     run_test(|a| {\n         panic_after_return(a);\n     });"}, {"sha": "0610d03cfe96d0cef8c54a60d797f526f86879b1", "filename": "src/test/ui/error-codes/E0009.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0009.rs?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,9 +0,0 @@\n-fn main() {\n-    struct X { x: (), }\n-    let x = Some((X { x: () }, X { x: () }));\n-    match x {\n-        Some((y, ref z)) => {},\n-        //~^ ERROR E0009\n-        None => panic!()\n-    }\n-}"}, {"sha": "446a436d6477952c8b15cd7e1029fb14e653abe8", "filename": "src/test/ui/error-codes/E0009.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,11 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/E0009.rs:5:15\n-   |\n-LL |         Some((y, ref z)) => {},\n-   |               ^  ----- by-ref pattern here\n-   |               |\n-   |               by-move pattern here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "9cb034e7592daa90ce5697d09d001ba869f1b1d8", "filename": "src/test/ui/issues/issue-53840.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7af9ff3e699207da7a5220b98ba9831d66697c80/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr?ref=7af9ff3e699207da7a5220b98ba9831d66697c80", "patch": "@@ -1,20 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/issue-53840.rs:13:16\n-   |\n-LL |         E::Foo(a, b, ref c) => {}\n-   |                ^  ^  ----- by-ref pattern here\n-   |                |  |\n-   |                |  by-move pattern here\n-   |                by-move pattern here\n-\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/issue-53840.rs:17:14\n-   |\n-LL |         Bar {a, ref b} => {}\n-   |              ^  ----- by-ref pattern here\n-   |              |\n-   |              by-move pattern here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "5c1a61eb375a43a98a80910c26b38a0493f2079c", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,4 +1,4 @@\n-#![feature(slice_patterns, unsized_locals)]\n+#![feature(unsized_locals)]\n \n struct A;\n #[derive(Clone, Copy)]"}, {"sha": "1cad8223826770c2f2bf9841c624377c18860091", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -3,33 +3,38 @@\n // where one side is by-ref and the other is by-move.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n-struct X { x: () }\n+struct X {\n+    x: (),\n+}\n \n fn main() {\n     let x = Some(X { x: () });\n     match x {\n-        Some(ref _y @ _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => panic!()\n+        Some(ref _y @ _z) => {} //~ ERROR cannot move out of `_y` because it is borrowed\n+        None => panic!(),\n     }\n \n     let x = Some(X { x: () });\n     match x {\n-        Some(_z @ ref _y) => { }, //~ ERROR cannot bind by-move with sub-bindings\n+        Some(_z @ ref _y) => {}\n         //~^ ERROR borrow of moved value\n-        None => panic!()\n+        //~| ERROR borrow of moved value\n+        None => panic!(),\n     }\n \n     let mut x = Some(X { x: () });\n     match x {\n-        Some(ref mut _y @ _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => panic!()\n+        Some(ref mut _y @ _z) => {} //~ ERROR cannot move out of `_y` because it is borrowed\n+        None => panic!(),\n     }\n \n     let mut x = Some(X { x: () });\n     match x {\n-        Some(_z @ ref mut _y) => { }, //~ ERROR cannot bind by-move with sub-bindings\n+        Some(_z @ ref mut _y) => {}\n         //~^ ERROR borrow of moved value\n-        None => panic!()\n+        //~| ERROR borrow of moved value\n+        None => panic!(),\n     }\n }"}, {"sha": "6ad0248fc6b2f45d0cecd9b62e97543f6624af2e", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,37 +1,45 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:23\n+error: cannot move out of `_y` because it is borrowed\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:15:14\n    |\n-LL |         Some(ref _y @ _z) => { },\n-   |              ---------^^\n+LL |         Some(ref _y @ _z) => {}\n+   |              ------^^^--\n    |              |        |\n-   |              |        by-move pattern here\n-   |              by-ref pattern here\n+   |              |        move out of `_y` occurs here\n+   |              borrow of `_y` occurs here\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:18:14\n+error: borrow of moved value: `_z`\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n    |\n-LL |         Some(_z @ ref _y) => { },\n-   |              ^^^^^^^^^^^ binds an already bound by-move value by moving it\n+LL |         Some(_z @ ref _y) => {}\n+   |              --^^^------\n+   |              |    |\n+   |              |    value borrowed here after move\n+   |              value moved here\n+   |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n \n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:25:27\n+error: cannot move out of `_y` because it is borrowed\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:29:14\n    |\n-LL |         Some(ref mut _y @ _z) => { },\n-   |              -------------^^\n+LL |         Some(ref mut _y @ _z) => {}\n+   |              ----------^^^--\n    |              |            |\n-   |              |            by-move pattern here\n-   |              by-ref pattern here\n+   |              |            move out of `_y` occurs here\n+   |              borrow of `_y` occurs here\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:31:14\n+error: borrow of moved value: `_z`\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n    |\n-LL |         Some(_z @ ref mut _y) => { },\n-   |              ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+LL |         Some(_z @ ref mut _y) => {}\n+   |              --^^^----------\n+   |              |    |\n+   |              |    value borrowed here after move\n+   |              value moved here\n+   |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:18:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:19\n    |\n-LL |         Some(_z @ ref _y) => { },\n+LL |         Some(_z @ ref _y) => {}\n    |              -----^^^^^^\n    |              |    |\n    |              |    value borrowed here after move\n@@ -40,9 +48,9 @@ LL |         Some(_z @ ref _y) => { },\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:31:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:19\n    |\n-LL |         Some(_z @ ref mut _y) => { },\n+LL |         Some(_z @ ref mut _y) => {}\n    |              -----^^^^^^^^^^\n    |              |    |\n    |              |    value borrowed here after move\n@@ -52,5 +60,4 @@ LL |         Some(_z @ ref mut _y) => { },\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0007, E0009, E0382.\n-For more information about an error, try `rustc --explain E0007`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "7a2e5128b85377452e9edb08bd6c2ecb0a5aad1f", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,14 +1,14 @@\n // See issue #12534.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n fn main() {}\n \n struct A(Box<u8>);\n \n fn f(a @ A(u): A) -> Box<u8> {\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n     drop(a);\n     u\n }"}, {"sha": "cfd978e13270987ce60896fc14f7b524f977715b", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,11 +1,5 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:6\n-   |\n-LL | fn f(a @ A(u): A) -> Box<u8> {\n-   |      ^^^^^^^^ binds an already bound by-move value by moving it\n-\n error[E0382]: use of moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:12\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:12\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ------^-\n@@ -14,7 +8,6 @@ LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      value moved here\n    |      move occurs because value has type `A`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0007, E0382.\n-For more information about an error, try `rustc --explain E0007`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "10865b92393b6ceb45cce0d0ac94c69203e12dc8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,46 +1,34 @@\n // Test that moving on both sides of an `@` pattern is not allowed.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U; // Not copy!\n \n     // Prevent promotion:\n-    fn u() -> U { U }\n+    fn u() -> U {\n+        U\n+    }\n \n-    let a @ b = U;\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    let a @ b = U; //~ ERROR use of moved value\n \n-    let a @ (b, c) = (U, U);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    let a @ (b, c) = (U, U); //~ ERROR use of moved value\n \n-    let a @ (b, c) = (u(), u());\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    let a @ (b, c) = (u(), u()); //~ ERROR use of moved value\n \n     match Ok(U) {\n-        a @ Ok(b) | a @ Err(b) => {}\n-        //~^ ERROR cannot bind by-move with sub-bindings\n-        //~| ERROR use of moved value\n-        //~| ERROR cannot bind by-move with sub-bindings\n-        //~| ERROR use of moved value\n+        a @ Ok(b) | a @ Err(b) => {} //~ ERROR use of moved value\n+                                     //~^ ERROR use of moved value\n     }\n \n-    fn fun(a @ b: U) {}\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    fn fun(a @ b: U) {} //~ ERROR use of moved value\n \n     match [u(), u(), u(), u()] {\n-        xs @ [a, .., b] => {}\n-        //~^ ERROR cannot bind by-move with sub-bindings\n-        //~| ERROR use of moved value\n+        xs @ [a, .., b] => {} //~ ERROR use of moved value\n     }\n \n     match [u(), u(), u(), u()] {\n-        xs @ [_, ys @ .., _] => {}\n-        //~^ ERROR cannot bind by-move with sub-bindings\n-        //~| ERROR use of moved value\n+        xs @ [_, ys @ .., _] => {} //~ ERROR use of moved value\n     }\n }"}, {"sha": "56613ee7618b467cfb3c8d5d7241554d52d73333", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 10, "deletions": 59, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,53 +1,5 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:11:9\n-   |\n-LL |     let a @ b = U;\n-   |         ^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:15:9\n-   |\n-LL |     let a @ (b, c) = (U, U);\n-   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:19:9\n-   |\n-LL |     let a @ (b, c) = (u(), u());\n-   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:24:9\n-   |\n-LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |         ^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:24:21\n-   |\n-LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:36:9\n-   |\n-LL |         xs @ [a, .., b] => {}\n-   |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:42:9\n-   |\n-LL |         xs @ [_, ys @ .., _] => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:31:12\n-   |\n-LL |     fn fun(a @ b: U) {}\n-   |            ^^^^^ binds an already bound by-move value by moving it\n-\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:11:13\n+  --> $DIR/borrowck-move-and-move.rs:14:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n@@ -56,7 +8,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:15:17\n+  --> $DIR/borrowck-move-and-move.rs:16:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -65,7 +17,7 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:19:17\n+  --> $DIR/borrowck-move-and-move.rs:18:17\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         --------^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -74,7 +26,7 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:24:16\n+  --> $DIR/borrowck-move-and-move.rs:21:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -85,7 +37,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:24:29\n+  --> $DIR/borrowck-move-and-move.rs:21:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -96,7 +48,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:36:22\n+  --> $DIR/borrowck-move-and-move.rs:28:22\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -107,7 +59,7 @@ LL |         xs @ [a, .., b] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:42:18\n+  --> $DIR/borrowck-move-and-move.rs:32:18\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -118,7 +70,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:31:16\n+  --> $DIR/borrowck-move-and-move.rs:25:16\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ----^\n@@ -127,7 +79,6 @@ LL |     fn fun(a @ b: U) {}\n    |            value moved here\n    |            move occurs because value has type `main::U`, which does not implement the `Copy` trait\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0007, E0382.\n-For more information about an error, try `rustc --explain E0007`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "271f4bca0fcb8f46a0527213d74c8332043f8ffe", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -3,6 +3,7 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]\n@@ -72,4 +73,14 @@ fn main() {\n         }\n         _ => {}\n     }\n+\n+    match Box::new([Ok(c()), Err(nc()), Ok(c())]) {\n+        box [Ok(a), ref xs @ .., Err(b)] => {}\n+        _ => {}\n+    }\n+\n+    match [Ok(Box::new(c())), Err(Box::new(nc())), Ok(Box::new(c())), Ok(Box::new(c()))] {\n+        [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n+        _ => {}\n+    }\n }"}, {"sha": "e90aeab2edb0b3994d7cd11e27d0d4f4e4993d9e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,39 +1,40 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]\n struct C;\n \n-fn c() -> C { C }\n+fn c() -> C {\n+    C\n+}\n \n struct NC;\n \n-fn nc() -> NC { NC }\n+fn nc() -> NC {\n+    NC\n+}\n \n fn main() {\n     let a @ box &b = Box::new(&C);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n \n     let a @ box b = Box::new(C);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n \n     fn f1(a @ box &b: Box<&C>) {}\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n \n     fn f2(a @ box b: Box<C>) {}\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n \n-    match Box::new(C) { a @ box b => {} }\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    match Box::new(C) {\n+        a @ box b => {} //~ ERROR use of moved value\n+    }\n \n-    let ref a @ box b = Box::new(NC); //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    let ref a @ box b = Box::new(NC); //~ ERROR cannot move out of `a` because it is borrowed\n \n     let ref a @ box ref mut b = Box::new(nc());\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n@@ -69,16 +70,4 @@ fn main() {\n             drop(b);\n         }\n     }\n-\n-    match Box::new([Ok(c()), Err(nc()), Ok(c())]) {\n-        box [Ok(a), ref xs @ .., Err(b)] => {}\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        _ => {}\n-    }\n-\n-    match [Ok(Box::new(c())), Err(Box::new(nc())), Ok(Box::new(c())), Ok(Box::new(c()))] {\n-        [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        _ => {}\n-    }\n }"}, {"sha": "50185c1a017d3c25d042c4173425a3ef07c12247", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 31, "deletions": 78, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,32 +1,14 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:16:9\n-   |\n-LL |     let a @ box &b = Box::new(&C);\n-   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:20:9\n-   |\n-LL |     let a @ box b = Box::new(C);\n-   |         ^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:25\n-   |\n-LL |     match Box::new(C) { a @ box b => {} }\n-   |                         ^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:36:21\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n-   |         ------------^\n+   |         -----^^^^^^^-\n    |         |           |\n-   |         |           by-move pattern here\n-   |         by-ref pattern here\n+   |         |           move out of `a` occurs here\n+   |         borrow of `a` occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -35,7 +17,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +26,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -53,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:46:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -62,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:51:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:52:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -71,46 +53,16 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:65:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:66:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n \n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:74:38\n-   |\n-LL |         box [Ok(a), ref xs @ .., Err(b)] => {}\n-   |                     -----------      ^ by-move pattern here\n-   |                     |\n-   |                     by-ref pattern here\n-\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:80:46\n-   |\n-LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n-   |                 -----   -----------          ^           --------- by-ref pattern here\n-   |                 |       |                    |\n-   |                 |       |                    by-move pattern here\n-   |                 |       by-ref pattern here\n-   |                 by-ref pattern here\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:24:11\n-   |\n-LL |     fn f1(a @ box &b: Box<&C>) {}\n-   |           ^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:28:11\n-   |\n-LL |     fn f2(a @ box b: Box<C>) {}\n-   |           ^^^^^^^^^ binds an already bound by-move value by moving it\n-\n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:57:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:58:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -119,7 +71,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:16:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:21:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -128,7 +80,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:20:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:24:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n@@ -137,17 +89,18 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:33\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:17\n    |\n-LL |     match Box::new(C) { a @ box b => {} }\n-   |           -----------   --------^\n-   |           |             |       |\n-   |           |             |       value used here after move\n-   |           |             value moved here\n-   |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n+LL |     match Box::new(C) {\n+   |           ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n+LL |         a @ box b => {}\n+   |         --------^\n+   |         |       |\n+   |         |       value used here after move\n+   |         value moved here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:45:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:46:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -159,7 +112,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:51:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:52:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -171,7 +124,7 @@ LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:65:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:66:25\n    |\n LL |         ref mut a @ box ref b => {\n    |         ----------------^^^^^\n@@ -183,7 +136,7 @@ LL |             *a = Box::new(NC);\n    |             -- mutable borrow later used here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:24:20\n+  --> $DIR/borrowck-pat-at-and-box.rs:27:20\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ---------^\n@@ -193,7 +146,7 @@ LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:28:19\n+  --> $DIR/borrowck-pat-at-and-box.rs:30:19\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           --------^\n@@ -203,7 +156,7 @@ LL |     fn f2(a @ box b: Box<C>) {}\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:57:27\n+  --> $DIR/borrowck-pat-at-and-box.rs:58:27\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ----------------^^^^^\n@@ -214,7 +167,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n LL |         *a = Box::new(NC);\n    |         -- mutable borrow later used here\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 17 previous errors\n \n-Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n-For more information about an error, try `rustc --explain E0007`.\n+Some errors have detailed explanations: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "147979171931319fbc6e639ada4f8e7183ff12c5", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,10 @@\n+// Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented even with promotion.\n+// Currently this logic exists in HAIR match checking as opposed to borrowck.\n+\n+#![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct U;\n+    let a @ ref b = U; //~ ERROR borrow of moved value\n+}"}, {"sha": "dc9201d0d061fe802360a39ab9524dd2a95a1f7f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,12 @@\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:9:9\n+   |\n+LL |     let a @ ref b = U;\n+   |         -^^^-----\n+   |         |   |\n+   |         |   value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "7d9618c8df78de6735dd3370b9a4b61895399183", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,98 @@\n+// Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented.\n+\n+#![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct U;\n+\n+    // Prevent promotion.\n+    fn u() -> U {\n+        U\n+    }\n+\n+    fn f1(a @ ref b: U) {}\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+\n+    fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR use of moved value\n+    fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+\n+    let a @ ref b = U;\n+    //~^ ERROR borrow of moved value\n+    let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR use of moved value\n+    let a @ [ref mut b, ref c] = [U, U];\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    let a @ ref b = u();\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+    //~| ERROR use of moved value\n+    let a @ [ref mut b, ref c] = [u(), u()];\n+    //~^ ERROR borrow of moved value\n+    //~| ERROR borrow of moved value\n+\n+    match Some(U) {\n+        a @ Some(ref b) => {}\n+        //~^ ERROR borrow of moved value\n+        None => {}\n+    }\n+    match Some((U, U)) {\n+        a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+        //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR use of moved value\n+        None => {}\n+    }\n+    match Some([U, U]) {\n+        mut a @ Some([ref b, ref mut c]) => {}\n+        //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        None => {}\n+    }\n+    match Some(u()) {\n+        a @ Some(ref b) => {}\n+        //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        None => {}\n+    }\n+    match Some((u(), u())) {\n+        a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+        //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        //~| ERROR use of moved value\n+        None => {}\n+    }\n+    match Some([u(), u()]) {\n+        mut a @ Some([ref b, ref mut c]) => {}\n+        //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n+        None => {}\n+    }\n+}"}, {"sha": "0c502cee7f6c900f9b655d3bac81dad9813925db", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "added", "additions": 503, "deletions": 0, "changes": 503, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,503 @@\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n+   |\n+LL |     let a @ ref b = U;\n+   |         -^^^-----\n+   |         |   |\n+   |         |   value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |         -^^^^^^^^^^^^---------^^^^^^-----^\n+   |         |            |              |\n+   |         |            |              value borrowed here after move\n+   |         |            value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `b`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:14\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |              -----^^^---------\n+   |              |       |\n+   |              |       value borrowed here after move\n+   |              value moved here\n+   |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `d`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |                                 -^^^-----\n+   |                                 |   |\n+   |                                 |   value borrowed here after move\n+   |                                 value moved here\n+   |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n+   |\n+LL |     let a @ [ref mut b, ref c] = [U, U];\n+   |         -^^^^---------^^-----^\n+   |         |    |          |\n+   |         |    |          value borrowed here after move\n+   |         |    value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:9\n+   |\n+LL |     let a @ ref b = u();\n+   |         -^^^-----\n+   |         |   |\n+   |         |   value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |         -^^^^^^^^^^^^---------^^^^^^-----^\n+   |         |            |              |\n+   |         |            |              value borrowed here after move\n+   |         |            value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `b`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:14\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |              -----^^^---------\n+   |              |       |\n+   |              |       value borrowed here after move\n+   |              value moved here\n+   |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `d`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |                                 -^^^-----\n+   |                                 |   |\n+   |                                 |   value borrowed here after move\n+   |                                 value moved here\n+   |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:9\n+   |\n+LL |     let a @ [ref mut b, ref c] = [u(), u()];\n+   |         -^^^^---------^^-----^\n+   |         |    |          |\n+   |         |    |          value borrowed here after move\n+   |         |    value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:56:9\n+   |\n+LL |         a @ Some(ref b) => {}\n+   |         -^^^^^^^^-----^\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n+   |         |                 |              |\n+   |         |                 |              value borrowed here after move\n+   |         |                 value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `b`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:19\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                   -----^^^---------\n+   |                   |       |\n+   |                   |       value borrowed here after move\n+   |                   value moved here\n+   |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `d`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                                      -^^^-----\n+   |                                      |   |\n+   |                                      |   value borrowed here after move\n+   |                                      value moved here\n+   |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:9\n+   |\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         -----^^^^^^^^^-----^^---------^^\n+   |         |             |      |\n+   |         |             |      value borrowed here after move\n+   |         |             value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n+   |\n+LL |         a @ Some(ref b) => {}\n+   |         -^^^^^^^^-----^\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:9\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n+   |         |                 |              |\n+   |         |                 |              value borrowed here after move\n+   |         |                 value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `b`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:19\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                   -----^^^---------\n+   |                   |       |\n+   |                   |       value borrowed here after move\n+   |                   value moved here\n+   |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `d`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                                      -^^^-----\n+   |                                      |   |\n+   |                                      |   value borrowed here after move\n+   |                                      value moved here\n+   |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:9\n+   |\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         -----^^^^^^^^^-----^^---------^^\n+   |         |             |      |\n+   |         |             |      value borrowed here after move\n+   |         |             value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n+   |\n+LL |     fn f1(a @ ref b: U) {}\n+   |           -^^^-----\n+   |           |   |\n+   |           |   value borrowed here after move\n+   |           value moved here\n+   |           move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:11\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           -----^^^^^^^^-----^^^^^^^^^^-----^\n+   |           |            |              |\n+   |           |            |              value borrowed here after move\n+   |           |            value borrowed here after move\n+   |           value moved here\n+   |           move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `b`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:20\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    -^^^-----\n+   |                    |   |\n+   |                    |   value borrowed here after move\n+   |                    value moved here\n+   |                    move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `d`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                               -----^^^-----\n+   |                               |       |\n+   |                               |       value borrowed here after move\n+   |                               value moved here\n+   |                               move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:11\n+   |\n+LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           -^^^^---------^^-----^\n+   |           |    |          |\n+   |           |    |          value borrowed here after move\n+   |           |    value borrowed here after move\n+   |           value moved here\n+   |           move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:22\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |              --------^^^^^^^^^\n+   |              |       |\n+   |              |       value borrowed here after move\n+   |              value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |         ------------------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |                       |\n+   |         |                       value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:37\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |                                 ----^^^^^\n+   |                                 |   |\n+   |                                 |   value borrowed here after move\n+   |                                 value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:25\n+   |\n+LL |     let a @ [ref mut b, ref c] = [U, U];\n+   |         ----------------^^^^^-   ------ move occurs because value has type `[main::U; 2]`, which does not implement the `Copy` trait\n+   |         |               |\n+   |         |               value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:13\n+   |\n+LL |     let a @ ref b = u();\n+   |         ----^^^^^   --- move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+   |         |   |\n+   |         |   value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:22\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |              --------^^^^^^^^^\n+   |              |       |\n+   |              |       value borrowed here after move\n+   |              value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |         ------------------------^^^^^^^^^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |                       |\n+   |         |                       value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:37\n+   |\n+LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |                                 ----^^^^^\n+   |                                 |   |\n+   |                                 |   value borrowed here after move\n+   |                                 value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:25\n+   |\n+LL |     let a @ [ref mut b, ref c] = [u(), u()];\n+   |         ----------------^^^^^-   ---------- move occurs because value has type `[main::U; 2]`, which does not implement the `Copy` trait\n+   |         |               |\n+   |         |               value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:27\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                   --------^^^^^^^^^\n+   |                   |       |\n+   |                   |       value borrowed here after move\n+   |                   value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n+   |\n+LL |     match Some((U, U)) {\n+   |           ------------ move occurs because value has type `std::option::Option<(main::U, main::U)>`, which does not implement the `Copy` trait\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         -----------------------------^^^^^^^^^--\n+   |         |                            |\n+   |         |                            value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:42\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                                      ----^^^^^\n+   |                                      |   |\n+   |                                      |   value borrowed here after move\n+   |                                      value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:30\n+   |\n+LL |     match Some([U, U]) {\n+   |           ------------ move occurs because value has type `std::option::Option<[main::U; 2]>`, which does not implement the `Copy` trait\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         ---------------------^^^^^^^^^--\n+   |         |                    |\n+   |         |                    value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:18\n+   |\n+LL |     match Some(u()) {\n+   |           --------- move occurs because value has type `std::option::Option<main::U>`, which does not implement the `Copy` trait\n+LL |         a @ Some(ref b) => {}\n+   |         ---------^^^^^-\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:27\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                   --------^^^^^^^^^\n+   |                   |       |\n+   |                   |       value borrowed here after move\n+   |                   value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n+   |\n+LL |     match Some((u(), u())) {\n+   |           ---------------- move occurs because value has type `std::option::Option<(main::U, main::U)>`, which does not implement the `Copy` trait\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         -----------------------------^^^^^^^^^--\n+   |         |                            |\n+   |         |                            value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:42\n+   |\n+LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |                                      ----^^^^^\n+   |                                      |   |\n+   |                                      |   value borrowed here after move\n+   |                                      value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:30\n+   |\n+LL |     match Some([u(), u()]) {\n+   |           ---------------- move occurs because value has type `std::option::Option<[main::U; 2]>`, which does not implement the `Copy` trait\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         ---------------------^^^^^^^^^--\n+   |         |                    |\n+   |         |                    value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:15\n+   |\n+LL |     fn f1(a @ ref b: U) {}\n+   |           ----^^^^^\n+   |           |   |\n+   |           |   value borrowed here after move\n+   |           value moved here\n+   |           move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:24\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    ----^^^^^\n+   |                    |   |\n+   |                    |   value borrowed here after move\n+   |                    value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           --------------------^^^^^^^^^^^^^-\n+   |           |                   |\n+   |           |                   value used here after move\n+   |           value moved here\n+   |           move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:39\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                               --------^^^^^\n+   |                               |       |\n+   |                               |       value borrowed here after move\n+   |                               value moved here\n+   |\n+   = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:27\n+   |\n+LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           ----------------^^^^^-\n+   |           |               |\n+   |           |               value borrowed here after move\n+   |           value moved here\n+   |           move occurs because value has type `[main::U; 2]`, which does not implement the `Copy` trait\n+\n+error: aborting due to 48 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "4ece55b07b080242eb612993d0f226ea993ccf74", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,9 +1,74 @@\n+// Test that `ref mut? @ pat_with_by_move_bindings` is prevented.\n+\n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n fn main() {\n-    match Some(\"hi\".to_string()) {\n-        ref op_string_ref @ Some(s) => {},\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern [E0009]\n-        None => {},\n+    struct U;\n+\n+    // Prevent promotion.\n+    fn u() -> U {\n+        U\n+    }\n+\n+    fn f1(ref a @ b: U) {}\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~| ERROR cannot move out of `b` because it is borrowed\n+    //~| ERROR cannot move out of `d` because it is borrowed\n+    fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+\n+    let ref a @ b = U;\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~| ERROR cannot move out of `b` because it is borrowed\n+    //~| ERROR cannot move out of `d` because it is borrowed\n+    let ref mut a @ [b, mut c] = [U, U];\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    let ref a @ b = u();\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+    //~| ERROR cannot move out of `b` because it is borrowed\n+    //~| ERROR cannot move out of `d` because it is borrowed\n+    let ref mut a @ [b, mut c] = [u(), u()];\n+    //~^ ERROR cannot move out of `a` because it is borrowed\n+\n+    match Some(U) {\n+        ref a @ Some(b) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        None => {}\n+    }\n+    match Some((U, U)) {\n+        ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~| ERROR cannot move out of `b` because it is borrowed\n+        //~| ERROR cannot move out of `d` because it is borrowed\n+        None => {}\n+    }\n+    match Some([U, U]) {\n+        ref mut a @ Some([b, mut c]) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        None => {}\n+    }\n+    match Some(u()) {\n+        ref a @ Some(b) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        None => {}\n+    }\n+    match Some((u(), u())) {\n+        ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        //~| ERROR cannot move out of `b` because it is borrowed\n+        //~| ERROR cannot move out of `d` because it is borrowed\n+        None => {}\n+    }\n+    match Some([u(), u()]) {\n+        ref mut a @ Some([b, mut c]) => {}\n+        //~^ ERROR cannot move out of `a` because it is borrowed\n+        None => {}\n     }\n }"}, {"sha": "607bbd5f991c082917a5242bce5c628d6674e1c7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 234, "deletions": 9, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,12 +1,237 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:5:34\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:23:9\n    |\n-LL |         ref op_string_ref @ Some(s) => {},\n-   |         -------------------------^-\n-   |         |                        |\n-   |         |                        by-move pattern here\n-   |         by-ref pattern here\n+LL |     let ref a @ b = U;\n+   |         -----^^^-\n+   |         |       |\n+   |         |       move out of `a` occurs here\n+   |         borrow of `a` occurs here\n \n-error: aborting due to previous error\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:9\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n+   |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n+   |         |                |              |\n+   |         |                |              move out of `a` occurs here\n+   |         |                move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:18\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n+   |                  -----^^^-----\n+   |                  |       |\n+   |                  |       move out of `b` occurs here\n+   |                  borrow of `b` occurs here\n+\n+error: cannot move out of `d` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:33\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n+   |                                 -----^^^-\n+   |                                 |       |\n+   |                                 |       move out of `d` occurs here\n+   |                                 borrow of `d` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:29:9\n+   |\n+LL |     let ref mut a @ [b, mut c] = [U, U];\n+   |         ---------^^^^-^^-----^\n+   |         |            |  |\n+   |         |            |  move out of `a` occurs here\n+   |         |            move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:31:9\n+   |\n+LL |     let ref a @ b = u();\n+   |         -----^^^-\n+   |         |       |\n+   |         |       move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+   |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n+   |         |                |              |\n+   |         |                |              move out of `a` occurs here\n+   |         |                move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:18\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+   |                  -----^^^-----\n+   |                  |       |\n+   |                  |       move out of `b` occurs here\n+   |                  borrow of `b` occurs here\n+\n+error: cannot move out of `d` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:33\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n+   |                                 -----^^^-\n+   |                                 |       |\n+   |                                 |       move out of `d` occurs here\n+   |                                 borrow of `d` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:37:9\n+   |\n+LL |     let ref mut a @ [b, mut c] = [u(), u()];\n+   |         ---------^^^^-^^-----^\n+   |         |            |  |\n+   |         |            |  move out of `a` occurs here\n+   |         |            move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:41:9\n+   |\n+LL |         ref a @ Some(b) => {}\n+   |         -----^^^^^^^^-^\n+   |         |            |\n+   |         |            move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:9\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n+   |         |                     |              |\n+   |         |                     |              move out of `a` occurs here\n+   |         |                     move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:23\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                       -----^^^-----\n+   |                       |       |\n+   |                       |       move out of `b` occurs here\n+   |                       borrow of `b` occurs here\n+\n+error: cannot move out of `d` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:38\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                                      -----^^^-\n+   |                                      |       |\n+   |                                      |       move out of `d` occurs here\n+   |                                      borrow of `d` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:53:9\n+   |\n+LL |         ref mut a @ Some([b, mut c]) => {}\n+   |         ---------^^^^^^^^^-^^-----^^\n+   |         |                 |  |\n+   |         |                 |  move out of `a` occurs here\n+   |         |                 move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:58:9\n+   |\n+LL |         ref a @ Some(b) => {}\n+   |         -----^^^^^^^^-^\n+   |         |            |\n+   |         |            move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:9\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n+   |         |                     |              |\n+   |         |                     |              move out of `a` occurs here\n+   |         |                     move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:23\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                       -----^^^-----\n+   |                       |       |\n+   |                       |       move out of `b` occurs here\n+   |                       borrow of `b` occurs here\n+\n+error: cannot move out of `d` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:38\n+   |\n+LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n+   |                                      -----^^^-\n+   |                                      |       |\n+   |                                      |       move out of `d` occurs here\n+   |                                      borrow of `d` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:70:9\n+   |\n+LL |         ref mut a @ Some([b, mut c]) => {}\n+   |         ---------^^^^^^^^^-^^-----^^\n+   |         |                 |  |\n+   |         |                 |  move out of `a` occurs here\n+   |         |                 move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n+   |\n+LL |     fn f1(ref a @ b: U) {}\n+   |           -----^^^-\n+   |           |       |\n+   |           |       move out of `a` occurs here\n+   |           borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n+   |           |                |              |\n+   |           |                |              move out of `a` occurs here\n+   |           |                move out of `a` occurs here\n+   |           borrow of `a` occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                    -----^^^-----\n+   |                    |       |\n+   |                    |       move out of `b` occurs here\n+   |                    borrow of `b` occurs here\n+\n+error: cannot move out of `d` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                                   -----^^^-\n+   |                                   |       |\n+   |                                   |       move out of `d` occurs here\n+   |                                   borrow of `d` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n+   |\n+LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n+   |           ---------^^^^-^^-----^\n+   |           |            |  |\n+   |           |            |  move out of `a` occurs here\n+   |           |            move out of `a` occurs here\n+   |           borrow of `a` occurs here\n+\n+error: aborting due to 25 previous errors\n \n-For more information about this error, try `rustc --explain E0009`."}, {"sha": "a921ad056d81f5917814b3ac88b349dea2bd1503", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,4 +1,5 @@\n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n enum Option<T> {\n     None,\n@@ -27,6 +28,9 @@ fn main() {\n     //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot move out of `b` because it is borrowed\n \n     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n     //~^ ERROR cannot borrow `a` as mutable more than once at a time"}, {"sha": "4652fffe36a4204553ad1bb45d6674fef57a7e80", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 65, "deletions": 46, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow `z` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow occurs here\n \n error: cannot borrow `b` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:65:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:65:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:132:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -249,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -258,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -267,16 +267,35 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n    |           |               |\n    |           |               mutable borrow occurs here\n    |           immutable borrow occurs here\n \n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:22\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                      -----^^^-------------\n+   |                      |       |           |\n+   |                      |       |           also moved here\n+   |                      |       mutable borrow occurs here\n+   |                      immutable borrow occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:30\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                              ---------^^^-\n+   |                              |           |\n+   |                              |           move out of `b` occurs here\n+   |                              borrow of `b` occurs here\n+\n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -288,7 +307,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:21\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:21\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ------------^^^^^\n@@ -300,7 +319,7 @@ LL |     *a = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:17\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:17\n    |\n LL |     let ref a @ ref mut b = u();\n    |         --------^^^^^^^^^\n@@ -312,7 +331,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -324,7 +343,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -336,55 +355,55 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -396,7 +415,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -408,7 +427,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -420,7 +439,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -431,7 +450,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n LL |     drop(a);\n    |          - immutable borrow later used here\n \n-error: aborting due to 45 previous errors\n+error: aborting due to 47 previous errors\n \n Some errors have detailed explanations: E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "77cd779d7167fadcab81e8f5f0a497164b7cec05", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,6 +1,7 @@\n // Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U;\n@@ -20,6 +21,9 @@ fn main() {\n             [..],\n         ] : [[U; 4]; 5]\n     ) {}\n+    fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~| ERROR cannot move out of `b` because it is borrowed\n \n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow `a` as mutable more than once at a time\n@@ -60,18 +64,18 @@ fn main() {\n         ) = (u(), [u(), u(), u()]);\n \n     let a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n     let mut val = (U, [U, U]);\n     let a @ (b, [c, d]) = &mut val; // Same as ^--\n-    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n \n     let a @ &mut ref mut b = &mut U;\n-    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~^ ERROR borrow of moved value\n     //~| ERROR borrow of moved value\n \n     match Ok(U) {"}, {"sha": "a6d6678736475002e360e2c867ba22133612bbe9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 82, "deletions": 43, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -8,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:32:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:42:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:42:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -87,32 +87,52 @@ LL | |             ]\n LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:9\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+   |         -^^^^---------^^---------^\n+   |         |    |          |\n+   |         |    |          value borrowed here after move\n+   |         |    value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n-   |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+   |         -^^^^-^^^-^^-^^\n+   |         |    |   |  |\n+   |         |    |   |  value borrowed here after move\n+   |         |    |   value borrowed here after move\n+   |         |    value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `&mut (main::U, [main::U; 2])` which does implement the `Copy` trait\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n-   |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+   |         -^^^^^^^^---------\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `&mut main::U` which does implement the `Copy` trait\n \n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:9\n+error: borrow of moved value: `a`\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:77:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+   |         -^^^^^^^^^---------^^---------^\n+   |         |         |          |\n+   |         |         |          value borrowed here after move\n+   |         |         value borrowed here after move\n+   |         value moved here\n+   |         move occurs because `a` has type `&mut (main::U, main::U)` which does implement the `Copy` trait\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -121,7 +141,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -130,7 +150,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:88:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -139,7 +159,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:88:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -148,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -157,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -166,7 +186,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -175,7 +195,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -184,7 +204,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -193,7 +213,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -202,7 +222,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -219,8 +239,27 @@ LL | |             [..],\n LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:22\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                      ---------^^^-------------\n+   |                      |           |           |\n+   |                      |           |           also moved here\n+   |                      |           another mutable borrow occurs here\n+   |                      first mutable borrow occurs here\n+\n+error: cannot move out of `b` because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:34\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                                  ---------^^^-\n+   |                                  |           |\n+   |                                  |           move out of `b` occurs here\n+   |                                  borrow of `b` occurs here\n+\n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -232,7 +271,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -244,7 +283,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -253,7 +292,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -262,7 +301,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -271,7 +310,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:77:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -280,7 +319,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -292,7 +331,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -304,7 +343,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -316,7 +355,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -327,7 +366,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 34 previous errors\n \n-Some errors have detailed explanations: E0007, E0382, E0499.\n-For more information about an error, try `rustc --explain E0007`.\n+Some errors have detailed explanations: E0382, E0499.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "821d4b42962bf4cabce11ec47c50851a18423330", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,6 +1,7 @@\n // Test that mixing `Copy` and non-`Copy` types in `@` patterns is forbidden.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n #[derive(Copy, Clone)]\n struct C;\n@@ -9,12 +10,9 @@ struct NC<A, B>(A, B);\n \n fn main() {\n     let a @ NC(b, c) = NC(C, C);\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n+    //~^ ERROR use of moved value\n \n     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-    //~^ ERROR cannot bind by-move with sub-bindings\n-    //~| ERROR use of moved value\n-    //~| ERROR cannot bind by-move with sub-bindings\n+    //~^ ERROR use of moved value\n     //~| ERROR use of moved value\n }"}, {"sha": "7e89008a604969ed1b6d7d1d0b2b9675c2d6cbe5", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,23 +1,5 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:11:9\n-   |\n-LL |     let a @ NC(b, c) = NC(C, C);\n-   |         ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:15:9\n-   |\n-LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/copy-and-move-mixed.rs:15:19\n-   |\n-LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-   |                   ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:11:19\n+  --> $DIR/copy-and-move-mixed.rs:12:19\n    |\n LL |     let a @ NC(b, c) = NC(C, C);\n    |         ----------^-   -------- move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n@@ -45,7 +27,6 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |\n    = note: move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0007, E0382.\n-For more information about an error, try `rustc --explain E0007`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "94becb9e8b8e3dd992d5f0a828d9dff8f74d3716", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -8,6 +8,7 @@\n // this would create problems for the generalization aforementioned.\n \n #![feature(bindings_after_at)]\n+#![feature(move_ref_pattern)]\n \n fn main() {\n     struct NotCopy;\n@@ -24,14 +25,26 @@ fn main() {\n     let ref a @ b = &NotCopy; // OK\n     let _: &&NotCopy = a;\n \n-    let ref a @ b = NotCopy; //~ ERROR cannot bind by-move and by-ref in the same pattern\n-    let ref mut a @ b = NotCopy; //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    let ref a @ b = NotCopy; //~ ERROR cannot move out of `a` because it is borrowed\n+    let _a: &NotCopy = a;\n+    let _b: NotCopy = b;\n+    let ref mut a @ b = NotCopy; //~ ERROR cannot move out of `a` because it is borrowed\n+    //~^ ERROR cannot move out of `_` because it is borrowed\n+    let _a: &NotCopy = a;\n+    let _b: NotCopy = b;\n     match Ok(NotCopy) {\n-        Ok(ref a @ b) | Err(ref a @ b) => {}\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        Ok(ref a @ b) | Err(b @ ref a) => {\n+            //~^ ERROR cannot move out of `a` because it is borrowed\n+            //~| ERROR borrow of moved value: `b`\n+            let _a: &NotCopy = a;\n+            let _b: NotCopy = b;\n+        }\n     }\n     match NotCopy {\n-        ref a @ b => {}\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        ref a @ b => {\n+            //~^ ERROR cannot move out of `a` because it is borrowed\n+            let _a: &NotCopy = a;\n+            let _b: NotCopy = b;\n+        }\n     }\n }"}, {"sha": "dfc6e16600e2a9cfa45cfc6f56e755ea03e74e30", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,41 +1,61 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:27:17\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:28:9\n    |\n LL |     let ref a @ b = NotCopy;\n-   |         --------^\n+   |         -----^^^-\n    |         |       |\n-   |         |       by-move pattern here\n-   |         by-ref pattern here\n+   |         |       move out of `a` occurs here\n+   |         borrow of `a` occurs here\n \n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:28:21\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:31:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n-   |         ------------^\n+   |         ---------^^^-\n    |         |           |\n-   |         |           by-move pattern here\n-   |         by-ref pattern here\n+   |         |           move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:36:12\n+   |\n+LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n+   |            -----^^^-\n+   |            |       |\n+   |            |       move out of `a` occurs here\n+   |            borrow of `a` occurs here\n \n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:20\n+error: borrow of moved value: `b`\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:36:29\n    |\n-LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n-   |            --------^        --------^\n-   |            |       |        |       |\n-   |            |       |        |       by-move pattern here\n-   |            |       |        by-ref pattern here\n-   |            |       by-move pattern here\n-   |            by-ref pattern here\n+LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n+   |                             -^^^-----\n+   |                             |   |\n+   |                             |   value borrowed here after move\n+   |                             value moved here\n+   |                             move occurs because `b` has type `main::NotCopy` which does implement the `Copy` trait\n \n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:34:17\n+error: cannot move out of `a` because it is borrowed\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:44:9\n    |\n-LL |         ref a @ b => {}\n-   |         --------^\n+LL |         ref a @ b => {\n+   |         -----^^^-\n    |         |       |\n-   |         |       by-move pattern here\n-   |         by-ref pattern here\n+   |         |       move out of `a` occurs here\n+   |         borrow of `a` occurs here\n+\n+error[E0505]: cannot move out of `_` because it is borrowed\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:31:21\n+   |\n+LL |     let ref mut a @ b = NotCopy;\n+   |         ------------^\n+   |         |           |\n+   |         |           move out of value occurs here\n+   |         borrow of value occurs here\n+LL |\n+LL |     let _a: &NotCopy = a;\n+   |                        - borrow later used here\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0009`.\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "d2d4e61e049b2c92a41adf120911ab45af55bde6", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+#![feature(move_ref_pattern)]\n+\n+fn main() {}\n+\n+struct U;\n+\n+fn slice() {\n+    let mut arr = [U, U, U, U, U, U, U, U];\n+    let [ref _x0, _x1, _, mut _x3, .., ref _x6, _x7] = arr;\n+    _x3 = U;\n+    let [ref mut _x0, _, ref _x2, _, _x4, ref mut _x5, _x6, _] = arr;\n+    *_x5 = U;\n+    let [_, _, _x2, _, _, _x5, _, _] = arr;\n+    *_x0 = U;\n+    let [ref _x0, ..] = arr;\n+    let [_x0, ..] = arr;\n+}\n+\n+fn tuple() {\n+    let mut tup = (U, U, U, U, U);\n+    let (ref _x0, mut _x1, ref _x2, ..) = tup;\n+    _x1 = U;\n+    let (ref mut _x0, _, _, ref _x3, _x4) = tup;\n+    let (_, _, _, _x3, _) = tup;\n+    *_x0 = U;\n+    drop(_x2);\n+    drop(tup.2);\n+    let (_x0, _, _, ..) = tup;\n+}"}, {"sha": "3ee008fd84f094062cdfd7ec0122e5e81d2b46c6", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,50 @@\n+#![feature(move_ref_pattern)]\n+\n+fn main() {}\n+\n+struct U;\n+\n+fn slice() {\n+    let mut arr = [U, U, U, U, U];\n+    let hold_all = &arr;\n+    let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr; //~ ERROR cannot move out of `arr[..]`\n+    _x1 = U; //~ ERROR cannot assign twice to immutable variable `_x1`\n+    drop(hold_all);\n+    let [_x0, ..] = arr; //~ ERROR cannot move out of `arr[..]`\n+    drop(_x0_hold);\n+    let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n+    //~^ ERROR cannot borrow `arr[..]` as mutable\n+    //~| ERROR cannot move out of `arr[..]` because it is borrowed\n+    //~| ERROR cannot move out of `arr[..]` because it is borrowed\n+    drop(xs_hold);\n+}\n+\n+fn tuple() {\n+    let mut tup = (U, U, U, U);\n+    let (ref _x0, _x1, ref _x2, ..) = tup;\n+    _x1 = U; //~ ERROR cannot assign twice to immutable variable\n+    let _x0_hold = &mut tup.0; //~ ERROR cannot borrow `tup.0` as mutable because it is also\n+    let (ref mut _x0_hold, ..) = tup; //~ ERROR cannot borrow `tup.0` as mutable because it is also\n+    *_x0 = U; //~ ERROR cannot assign to `*_x0` which is behind a `&` reference\n+    *_x2 = U; //~ ERROR cannot assign to `*_x2` which is behind a `&` reference\n+    drop(tup.1); //~ ERROR use of moved value: `tup.1`\n+    let _x1_hold = &tup.1; //~ ERROR borrow of moved value: `tup.1`\n+    let (.., ref mut _x3) = tup;\n+    let _x3_hold = &tup.3; //~ ERROR cannot borrow `tup.3` as immutable\n+    let _x3_hold = &mut tup.3; //~ ERROR cannot borrow `tup.3` as mutable more\n+    let (.., ref mut _x4_hold) = tup; //~ ERROR cannot borrow `tup.3` as mutable more\n+    let (.., ref _x4_hold) = tup; //~ ERROR cannot borrow `tup.3` as immutable\n+    drop(_x3);\n+}\n+\n+fn closure() {\n+    let mut tup = (U, U, U);\n+    let c1 = || {\n+        let (ref _x0, _x1, _) = tup;\n+    };\n+    let c2 = || {\n+        //~^ ERROR use of moved value\n+        let (ref mut _x0, _, _x2) = tup;\n+    };\n+    drop(c1);\n+}"}, {"sha": "d718ee29cf9b5241050b0061537bcf8dbb7c4575", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,208 @@\n+error[E0505]: cannot move out of `arr[..]` because it is borrowed\n+  --> $DIR/borrowck-move-ref-pattern.rs:10:24\n+   |\n+LL |     let hold_all = &arr;\n+   |                    ---- borrow of `arr` occurs here\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |                        ^^^ move out of `arr[..]` occurs here\n+LL |     _x1 = U;\n+LL |     drop(hold_all);\n+   |          -------- borrow later used here\n+\n+error[E0384]: cannot assign twice to immutable variable `_x1`\n+  --> $DIR/borrowck-move-ref-pattern.rs:11:5\n+   |\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |                        ---\n+   |                        |\n+   |                        first assignment to `_x1`\n+   |                        help: make this binding mutable: `mut _x1`\n+LL |     _x1 = U;\n+   |     ^^^^^^^ cannot assign twice to immutable variable\n+\n+error[E0505]: cannot move out of `arr[..]` because it is borrowed\n+  --> $DIR/borrowck-move-ref-pattern.rs:13:10\n+   |\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |          ------------ borrow of `arr[..]` occurs here\n+...\n+LL |     let [_x0, ..] = arr;\n+   |          ^^^ move out of `arr[..]` occurs here\n+LL |     drop(_x0_hold);\n+   |          -------- borrow later used here\n+\n+error[E0502]: cannot borrow `arr[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-move-ref-pattern.rs:15:16\n+   |\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |                             ---------------- immutable borrow occurs here\n+...\n+LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n+   |                ^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(xs_hold);\n+   |          ------- immutable borrow later used here\n+\n+error[E0505]: cannot move out of `arr[..]` because it is borrowed\n+  --> $DIR/borrowck-move-ref-pattern.rs:15:29\n+   |\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |                             ---------------- borrow of `arr[..]` occurs here\n+...\n+LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n+   |                             ^^^ move out of `arr[..]` occurs here\n+...\n+LL |     drop(xs_hold);\n+   |          ------- borrow later used here\n+\n+error[E0505]: cannot move out of `arr[..]` because it is borrowed\n+  --> $DIR/borrowck-move-ref-pattern.rs:15:34\n+   |\n+LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n+   |                             ---------------- borrow of `arr[..]` occurs here\n+...\n+LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n+   |                                  ^^^^^^^ move out of `arr[..]` occurs here\n+...\n+LL |     drop(xs_hold);\n+   |          ------- borrow later used here\n+\n+error[E0384]: cannot assign twice to immutable variable `_x1`\n+  --> $DIR/borrowck-move-ref-pattern.rs:25:5\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |                   ---\n+   |                   |\n+   |                   first assignment to `_x1`\n+   |                   help: make this binding mutable: `mut _x1`\n+LL |     _x1 = U;\n+   |     ^^^^^^^ cannot assign twice to immutable variable\n+\n+error[E0502]: cannot borrow `tup.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-move-ref-pattern.rs:26:20\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |          ------- immutable borrow occurs here\n+LL |     _x1 = U;\n+LL |     let _x0_hold = &mut tup.0;\n+   |                    ^^^^^^^^^^ mutable borrow occurs here\n+LL |     let (ref mut _x0_hold, ..) = tup;\n+LL |     *_x0 = U;\n+   |     -------- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `tup.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-move-ref-pattern.rs:27:10\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |          ------- immutable borrow occurs here\n+...\n+LL |     let (ref mut _x0_hold, ..) = tup;\n+   |          ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     *_x0 = U;\n+   |     -------- immutable borrow later used here\n+\n+error[E0594]: cannot assign to `*_x0` which is behind a `&` reference\n+  --> $DIR/borrowck-move-ref-pattern.rs:28:5\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |          ------- help: consider changing this to be a mutable reference: `ref mut _x0`\n+...\n+LL |     *_x0 = U;\n+   |     ^^^^^^^^ `_x0` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*_x2` which is behind a `&` reference\n+  --> $DIR/borrowck-move-ref-pattern.rs:29:5\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |                        ------- help: consider changing this to be a mutable reference: `ref mut _x2`\n+...\n+LL |     *_x2 = U;\n+   |     ^^^^^^^^ `_x2` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0382]: use of moved value: `tup.1`\n+  --> $DIR/borrowck-move-ref-pattern.rs:30:10\n+   |\n+LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n+   |                   --- value moved here\n+...\n+LL |     drop(tup.1);\n+   |          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `tup.1`\n+  --> $DIR/borrowck-move-ref-pattern.rs:31:20\n+   |\n+LL |     drop(tup.1);\n+   |          ----- value moved here\n+LL |     let _x1_hold = &tup.1;\n+   |                    ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n+\n+error[E0502]: cannot borrow `tup.3` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-move-ref-pattern.rs:33:20\n+   |\n+LL |     let (.., ref mut _x3) = tup;\n+   |              ----------- mutable borrow occurs here\n+LL |     let _x3_hold = &tup.3;\n+   |                    ^^^^^^ immutable borrow occurs here\n+...\n+LL |     drop(_x3);\n+   |          --- mutable borrow later used here\n+\n+error[E0499]: cannot borrow `tup.3` as mutable more than once at a time\n+  --> $DIR/borrowck-move-ref-pattern.rs:34:20\n+   |\n+LL |     let (.., ref mut _x3) = tup;\n+   |              ----------- first mutable borrow occurs here\n+LL |     let _x3_hold = &tup.3;\n+LL |     let _x3_hold = &mut tup.3;\n+   |                    ^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     drop(_x3);\n+   |          --- first borrow later used here\n+\n+error[E0499]: cannot borrow `tup.3` as mutable more than once at a time\n+  --> $DIR/borrowck-move-ref-pattern.rs:35:14\n+   |\n+LL |     let (.., ref mut _x3) = tup;\n+   |              ----------- first mutable borrow occurs here\n+...\n+LL |     let (.., ref mut _x4_hold) = tup;\n+   |              ^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     let (.., ref _x4_hold) = tup;\n+LL |     drop(_x3);\n+   |          --- first borrow later used here\n+\n+error[E0502]: cannot borrow `tup.3` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-move-ref-pattern.rs:36:14\n+   |\n+LL |     let (.., ref mut _x3) = tup;\n+   |              ----------- mutable borrow occurs here\n+...\n+LL |     let (.., ref _x4_hold) = tup;\n+   |              ^^^^^^^^^^^^ immutable borrow occurs here\n+LL |     drop(_x3);\n+   |          --- mutable borrow later used here\n+\n+error[E0382]: use of moved value: `tup`\n+  --> $DIR/borrowck-move-ref-pattern.rs:45:14\n+   |\n+LL |     let mut tup = (U, U, U);\n+   |         ------- move occurs because `tup` has type `(U, U, U)`, which does not implement the `Copy` trait\n+LL |     let c1 = || {\n+   |              -- value moved into closure here\n+LL |         let (ref _x0, _x1, _) = tup;\n+   |                                 --- variable moved due to use in closure\n+LL |     };\n+LL |     let c2 = || {\n+   |              ^^ value used here after move\n+LL |\n+LL |         let (ref mut _x0, _, _x2) = tup;\n+   |                                     --- use occurs due to use in closure\n+\n+error: aborting due to 18 previous errors\n+\n+Some errors have detailed explanations: E0382, E0384, E0499, E0502, E0505, E0594.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "fb92eb1ba32e0e74be8face458034dc4804ba961", "filename": "src/test/ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+    #[derive(Clone)]\n+    struct X {\n+        x: (),\n+    }\n+    let mut tup = (X { x: () }, X { x: () });\n+    match Some(tup.clone()) {\n+        Some((y, ref z)) => {}\n+        //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n+        None => panic!(),\n+    }\n+\n+    let (ref a, b) = tup.clone();\n+    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n+\n+    let (a, mut b) = &tup;\n+    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n+    //~| ERROR cannot move out of a shared reference\n+\n+    let (mut a, b) = &mut tup;\n+    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n+    //~| ERROR cannot move out of a mutable reference\n+}"}, {"sha": "8aef220c375191d12f2f5605de1d302412e92280", "filename": "src/test/ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,66 @@\n+error[E0658]: binding by-move and by-ref in the same pattern is unstable\n+  --> $DIR/feature-gate-move_ref_pattern.rs:8:15\n+   |\n+LL |         Some((y, ref z)) => {}\n+   |               ^  ----- by-ref pattern here\n+   |               |\n+   |               by-move pattern here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: binding by-move and by-ref in the same pattern is unstable\n+  --> $DIR/feature-gate-move_ref_pattern.rs:13:17\n+   |\n+LL |     let (ref a, b) = tup.clone();\n+   |          -----  ^ by-move pattern here\n+   |          |\n+   |          by-ref pattern here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: binding by-move and by-ref in the same pattern is unstable\n+  --> $DIR/feature-gate-move_ref_pattern.rs:16:13\n+   |\n+LL |     let (a, mut b) = &tup;\n+   |          -  ^^^^^ by-move pattern here\n+   |          |\n+   |          by-ref pattern here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: binding by-move and by-ref in the same pattern is unstable\n+  --> $DIR/feature-gate-move_ref_pattern.rs:20:10\n+   |\n+LL |     let (mut a, b) = &mut tup;\n+   |          ^^^^^  - by-ref pattern here\n+   |          |\n+   |          by-move pattern here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n+\n+error[E0507]: cannot move out of a shared reference\n+  --> $DIR/feature-gate-move_ref_pattern.rs:16:22\n+   |\n+LL |     let (a, mut b) = &tup;\n+   |             -----    ^^^^\n+   |             |\n+   |             data moved here\n+   |             move occurs because `b` has type `main::X`, which does not implement the `Copy` trait\n+\n+error[E0507]: cannot move out of a mutable reference\n+  --> $DIR/feature-gate-move_ref_pattern.rs:20:22\n+   |\n+LL |     let (mut a, b) = &mut tup;\n+   |          -----       ^^^^^^^^\n+   |          |\n+   |          data moved here\n+   |          move occurs because `a` has type `main::X`, which does not implement the `Copy` trait\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0507, E0658.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "ab7d10d9f837d716addeab828090898e5526e0bc", "filename": "src/test/ui/pattern/move-ref-patterns/issue-53840.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,3 +1,7 @@\n+// check-pass\n+\n+#![feature(move_ref_pattern)]\n+\n enum E {\n     Foo(String, String, String),\n }\n@@ -11,10 +15,8 @@ fn main() {\n     let bar = Bar { a: \"1\".to_string(), b: \"2\".to_string() };\n     match E::Foo(\"\".into(), \"\".into(), \"\".into()) {\n         E::Foo(a, b, ref c) => {}\n-//~^ ERROR cannot bind by-move and by-ref in the same pattern\n     }\n     match bar {\n-        Bar {a, ref b} => {}\n-//~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        Bar { a, ref b } => {}\n     }\n }", "previous_filename": "src/test/ui/issues/issue-53840.rs"}, {"sha": "e1844d36e4aa47c431e5704f187e175986ac4f06", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct U;\n+    fn accept_fn_once(_: impl FnOnce()) {}\n+    fn accept_fn_mut(_: impl FnMut()) {}\n+    fn accept_fn(_: impl Fn()) {}\n+\n+    let mut tup = (U, U, U);\n+    let (ref _x0, _x1, ref mut _x2) = tup;\n+    let c1 = || {\n+        drop::<&U>(_x0);\n+        drop::<U>(_x1);\n+        drop::<&mut U>(_x2);\n+    };\n+    accept_fn_once(c1);\n+\n+    let c2 = || {\n+        drop::<&U>(_x0);\n+        drop::<&mut U>(_x2);\n+    };\n+    accept_fn_mut(c2);\n+\n+    let c3 = || {\n+        drop::<&U>(_x0);\n+    };\n+    accept_fn(c3);\n+}"}, {"sha": "7f1c02c05cb0d287084d143455ba9046c43daada", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,34 @@\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct U;\n+    fn accept_fn_once(_: &impl FnOnce()) {}\n+    fn accept_fn_mut(_: &impl FnMut()) {}\n+    fn accept_fn(_: &impl Fn()) {}\n+\n+    let mut tup = (U, U, U);\n+    let (ref _x0, _x1, ref mut _x2) = tup;\n+    let c1 = || {\n+        //~^ ERROR expected a closure that implements the `FnMut`\n+        //~| ERROR expected a closure that implements the `Fn`\n+        drop::<&U>(_x0);\n+        drop::<U>(_x1);\n+        drop::<&mut U>(_x2);\n+    };\n+    accept_fn_once(&c1);\n+    accept_fn_mut(&c1);\n+    accept_fn(&c1);\n+\n+    let c2 = || {\n+        //~^ ERROR expected a closure that implements the `Fn`\n+        drop::<&U>(_x0);\n+        drop::<&mut U>(_x2);\n+    };\n+    accept_fn_mut(&c2);\n+    accept_fn(&c2);\n+\n+    let c3 = || {\n+        drop::<&U>(_x0);\n+    };\n+    accept_fn(&c3);\n+}"}, {"sha": "ca82353c1c9ab9d42724e31febfbb8abde4af5ee", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,39 @@\n+error[E0525]: expected a closure that implements the `FnMut` trait, but this closure only implements `FnOnce`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:11:14\n+   |\n+LL |     let c1 = || {\n+   |              ^^ this closure implements `FnOnce`, not `FnMut`\n+...\n+LL |         drop::<U>(_x1);\n+   |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n+...\n+LL |     accept_fn_mut(&c1);\n+   |     ------------- the requirement to implement `FnMut` derives from here\n+\n+error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:11:14\n+   |\n+LL |     let c1 = || {\n+   |              ^^ this closure implements `FnOnce`, not `Fn`\n+...\n+LL |         drop::<U>(_x1);\n+   |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n+...\n+LL |     accept_fn(&c1);\n+   |     --------- the requirement to implement `Fn` derives from here\n+\n+error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:22:14\n+   |\n+LL |     let c2 = || {\n+   |              ^^ this closure implements `FnMut`, not `Fn`\n+...\n+LL |         drop::<&mut U>(_x2);\n+   |                        --- closure is `FnMut` because it mutates the variable `_x2` here\n+...\n+LL |     accept_fn(&c2);\n+   |     --------- the requirement to implement `Fn` derives from here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0525`."}, {"sha": "5c51c47d9798a1514e9eb27c21783595ac91b4a8", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,16 @@\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct U;\n+\n+    // A tuple is a \"non-reference pattern\".\n+    // A `mut` binding pattern resets the binding mode to by-value.\n+\n+    let p = (U, U);\n+    let (a, mut b) = &p;\n+    //~^ ERROR cannot move out of a shared reference\n+\n+    let mut p = (U, U);\n+    let (a, mut b) = &mut p;\n+    //~^ ERROR cannot move out of a mutable reference\n+}"}, {"sha": "fe7f71e6c46cdfb825b02a765d11c3d93e0df630", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,21 @@\n+error[E0507]: cannot move out of a shared reference\n+  --> $DIR/move-ref-patterns-default-binding-modes.rs:10:22\n+   |\n+LL |     let (a, mut b) = &p;\n+   |             -----    ^^\n+   |             |\n+   |             data moved here\n+   |             move occurs because `b` has type `main::U`, which does not implement the `Copy` trait\n+\n+error[E0507]: cannot move out of a mutable reference\n+  --> $DIR/move-ref-patterns-default-binding-modes.rs:14:22\n+   |\n+LL |     let (a, mut b) = &mut p;\n+   |             -----    ^^^^^^\n+   |             |\n+   |             data moved here\n+   |             move occurs because `b` has type `main::U`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "c78695390b59828bdb9deb4c3e8ffc6e3a74cbda", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -0,0 +1,81 @@\n+// run-pass\n+\n+// This test checks the dynamic semantics and drop order of pattern matching\n+// where a product pattern has both a by-move and by-ref binding.\n+\n+#![feature(move_ref_pattern)]\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+struct X {\n+    x: Box<usize>,\n+    d: DropOrderListPtr,\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<usize>>>;\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        self.d.borrow_mut().push(*self.x);\n+    }\n+}\n+\n+enum DoubleOption<T, U> {\n+    Some2(T, U),\n+    _None2,\n+}\n+\n+fn main() {\n+    let d: DropOrderListPtr = <_>::default();\n+    {\n+        let mk = |v| X { x: Box::new(v), d: d.clone() };\n+        let check = |a1: &X, a2, b1: &X, b2| {\n+            assert_eq!(*a1.x, a2);\n+            assert_eq!(*b1.x, b2);\n+        };\n+\n+        let x = DoubleOption::Some2(mk(1), mk(2));\n+        match x {\n+            DoubleOption::Some2(ref a, b) => check(a, 1, &b, 2),\n+            DoubleOption::_None2 => panic!(),\n+        }\n+        let x = DoubleOption::Some2(mk(3), mk(4));\n+        match x {\n+            DoubleOption::Some2(a, ref b) => check(&a, 3, b, 4),\n+            DoubleOption::_None2 => panic!(),\n+        }\n+        match DoubleOption::Some2(mk(5), mk(6)) {\n+            DoubleOption::Some2(ref a, b) => check(a, 5, &b, 6),\n+            DoubleOption::_None2 => panic!(),\n+        }\n+        match DoubleOption::Some2(mk(7), mk(8)) {\n+            DoubleOption::Some2(a, ref b) => check(&a, 7, b, 8),\n+            DoubleOption::_None2 => panic!(),\n+        }\n+        {\n+            let (a, ref b) = (mk(9), mk(10));\n+            let (ref c, d) = (mk(11), mk(12));\n+            check(&a, 9, b, 10);\n+            check(c, 11, &d, 12);\n+        }\n+        fn fun([a, ref mut b, ref xs @ .., ref c, d]: [X; 6]) {\n+            assert_eq!(*a.x, 13);\n+            assert_eq!(*b.x, 14);\n+            assert_eq!(&[*xs[0].x, *xs[1].x], &[15, 16]);\n+            assert_eq!(*c.x, 17);\n+            assert_eq!(*d.x, 18);\n+        }\n+        fun([mk(13), mk(14), mk(15), mk(16), mk(17), mk(18)]);\n+\n+        let lam = |(a, ref b, c, ref mut d): (X, X, X, X)| {\n+            assert_eq!(*a.x, 19);\n+            assert_eq!(*b.x, 20);\n+            assert_eq!(*c.x, 21);\n+            assert_eq!(*d.x, 22);\n+        };\n+        lam((mk(19), mk(20), mk(21), mk(22)));\n+    }\n+    let expected = [2, 3, 6, 5, 7, 8, 12, 11, 9, 10, 18, 13, 14, 15, 16, 17, 21, 19, 20, 22, 4, 1];\n+    assert_eq!(&*d.borrow(), &expected);\n+}"}, {"sha": "84552f2e7331580a306292e947c733dadbf775b9", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -2,7 +2,7 @@\n // outside of slice (+ ident patterns witin those), tuple,\n // and tuple struct patterns and that duplicates are caught in these contexts.\n \n-#![feature(slice_patterns, box_patterns)]\n+#![feature(box_patterns)]\n \n fn main() {}\n "}, {"sha": "aa42c7bb9c2f1368dffeb1bb1f0ea8fe9965190e", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,10 +1,11 @@\n+#![feature(move_ref_pattern)]\n+\n struct Foo {}\n \n pub fn main() {\n-    let mut tups = vec![(Foo{}, Foo{})];\n+    let mut tups = vec![(Foo {}, Foo {})];\n     // The below desugars to &(ref n, mut m).\n     for (n, mut m) in &tups {\n-        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        //~| ERROR cannot move out of a shared reference\n+        //~^ ERROR cannot move out of a shared reference\n     }\n }"}, {"sha": "ef62431388081f478924fd19afe9427f28c235ba", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d984f127f662f7a1fcf0472230a1b64fcc3325d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=d984f127f662f7a1fcf0472230a1b64fcc3325d5", "patch": "@@ -1,21 +1,12 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/for.rs:6:13\n-   |\n-LL |     for (n, mut m) in &tups {\n-   |          -  ^^^^^ by-move pattern here\n-   |          |\n-   |          by-ref pattern here\n-\n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/for.rs:6:23\n+  --> $DIR/for.rs:8:23\n    |\n LL |     for (n, mut m) in &tups {\n    |             -----     ^^^^^\n    |             |\n    |             data moved here\n    |             move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0009, E0507.\n-For more information about an error, try `rustc --explain E0009`.\n+For more information about this error, try `rustc --explain E0507`."}]}