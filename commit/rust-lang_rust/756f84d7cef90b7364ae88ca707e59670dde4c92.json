{"sha": "756f84d7cef90b7364ae88ca707e59670dde4c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmY4NGQ3Y2VmOTBiNzM2NGFlODhjYTcwN2U1OTY3MGRkZTRjOTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T11:48:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T13:08:18Z"}, "message": "[eddyb] rustc_codegen_llvm: remove unused parametrization of `CodegenCx` and `Builder` over `Value`s.", "tree": {"sha": "80c9b92b7137bf37df90c30b4ee527a9e9cb3fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c9b92b7137bf37df90c30b4ee527a9e9cb3fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756f84d7cef90b7364ae88ca707e59670dde4c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756f84d7cef90b7364ae88ca707e59670dde4c92", "html_url": "https://github.com/rust-lang/rust/commit/756f84d7cef90b7364ae88ca707e59670dde4c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756f84d7cef90b7364ae88ca707e59670dde4c92/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b569249c8f15d651a0e80a031bdf0557a0fd84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b569249c8f15d651a0e80a031bdf0557a0fd84b", "html_url": "https://github.com/rust-lang/rust/commit/0b569249c8f15d651a0e80a031bdf0557a0fd84b"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "78693a395b3907f03d0be552e3318d0b83f9bddd", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=756f84d7cef90b7364ae88ca707e59670dde4c92", "patch": "@@ -180,17 +180,17 @@ pub fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n             let mono_items = cx.codegen_unit\n                                .items_in_deterministic_order(cx.tcx);\n             for &(mono_item, (linkage, visibility)) in &mono_items {\n-                mono_item.predefine::<Builder<&Value>>(&cx, linkage, visibility);\n+                mono_item.predefine::<Builder>(&cx, linkage, visibility);\n             }\n \n             // ... and now that we have everything pre-defined, fill out those definitions.\n             for &(mono_item, _) in &mono_items {\n-                mono_item.define::<Builder<&Value>>(&cx);\n+                mono_item.define::<Builder>(&cx);\n             }\n \n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n-            maybe_create_entry_wrapper::<Builder<&Value>>(&cx);\n+            maybe_create_entry_wrapper::<Builder>(&cx);\n \n             // Run replace-all-uses-with for statics that need it\n             for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {"}, {"sha": "34e4f4d7e1835b7e24bae6014d708b7968b00213", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=756f84d7cef90b7364ae88ca707e59670dde4c92", "patch": "@@ -34,12 +34,12 @@ use std::ptr;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n-pub struct Builder<'a, 'll: 'a, 'tcx: 'll, V: 'll = &'ll Value> {\n+pub struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n     pub llbuilder: &'ll mut llvm::Builder<'ll>,\n-    pub cx: &'a CodegenCx<'ll, 'tcx, V>,\n+    pub cx: &'a CodegenCx<'ll, 'tcx>,\n }\n \n-impl<V> Drop for Builder<'a, 'll, 'tcx, V> {\n+impl Drop for Builder<'a, 'll, 'tcx> {\n     fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeBuilder(&mut *(self.llbuilder as *mut _));"}, {"sha": "5b088ad290810c02f4bbb617737925020a884e39", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=756f84d7cef90b7364ae88ca707e59670dde4c92", "patch": "@@ -47,7 +47,7 @@ use abi::Abi;\n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n /// All other LLVM data structures in the `CodegenCx` are tied to that `llvm::Context`.\n-pub struct CodegenCx<'ll, 'tcx: 'll, V = &'ll Value> {\n+pub struct CodegenCx<'ll, 'tcx: 'll> {\n     pub tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n     pub check_overflow: bool,\n     pub use_dll_storage_attrs: bool,\n@@ -59,11 +59,11 @@ pub struct CodegenCx<'ll, 'tcx: 'll, V = &'ll Value> {\n     pub codegen_unit: Arc<CodegenUnit<'tcx>>,\n \n     /// Cache instances of monomorphic and polymorphic items\n-    pub instances: RefCell<FxHashMap<Instance<'tcx>, V>>,\n+    pub instances: RefCell<FxHashMap<Instance<'tcx>, &'ll Value>>,\n     /// Cache generated vtables\n-    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), V>>,\n+    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, V>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,\n@@ -73,20 +73,20 @@ pub struct CodegenCx<'ll, 'tcx: 'll, V = &'ll Value> {\n     /// when we ptrcast, and we have to ptrcast during codegen\n     /// of a [T] const because we form a slice, a (*T,usize) pair, not\n     /// a pointer to an LLVM array type. Similar for trait objects.\n-    pub const_unsized: RefCell<FxHashMap<V, V>>,\n+    pub const_unsized: RefCell<FxHashMap<&'ll Value, &'ll Value>>,\n \n     /// Cache of emitted const globals (value -> global)\n-    pub const_globals: RefCell<FxHashMap<V, V>>,\n+    pub const_globals: RefCell<FxHashMap<&'ll Value, &'ll Value>>,\n \n     /// List of globals for static variables which need to be passed to the\n     /// LLVM function ReplaceAllUsesWith (RAUW) when codegen is complete.\n     /// (We have to make sure we don't invalidate any Values referring\n     /// to constants.)\n-    pub statics_to_rauw: RefCell<Vec<(V, V)>>,\n+    pub statics_to_rauw: RefCell<Vec<(&'ll Value, &'ll Value)>>,\n \n     /// Statics that will be placed in the llvm.used variable\n     /// See http://llvm.org/docs/LangRef.html#the-llvm-used-global-variable for details\n-    pub used_statics: RefCell<Vec<V>>,\n+    pub used_statics: RefCell<Vec<&'ll Value>>,\n \n     pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'ll Type>>,\n     pub scalar_lltypes: RefCell<FxHashMap<Ty<'tcx>, &'ll Type>>,\n@@ -95,11 +95,11 @@ pub struct CodegenCx<'ll, 'tcx: 'll, V = &'ll Value> {\n \n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n-    eh_personality: Cell<Option<V>>,\n-    eh_unwind_resume: Cell<Option<V>>,\n-    pub rust_try_fn: Cell<Option<V>>,\n+    eh_personality: Cell<Option<&'ll Value>>,\n+    eh_unwind_resume: Cell<Option<&'ll Value>>,\n+    pub rust_try_fn: Cell<Option<&'ll Value>>,\n \n-    intrinsics: RefCell<FxHashMap<&'static str, V>>,\n+    intrinsics: RefCell<FxHashMap<&'static str, &'ll Value>>,\n \n     /// A counter that is used for generating local symbol names\n     local_gen_sym_counter: Cell<usize>,"}, {"sha": "9e1d429180367c199e435743644faeaa32cbc9fa", "filename": "src/librustc_codegen_ssa/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/756f84d7cef90b7364ae88ca707e59670dde4c92/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=756f84d7cef90b7364ae88ca707e59670dde4c92", "patch": "@@ -29,12 +29,12 @@ While the LLVM-specific code will be left in `rustc_codegen_llvm`, all the new t\n The two most important structures for the LLVM codegen are `CodegenCx` and `Builder`. They are parametrized by multiple liftime parameters and the type for `Value`.\n \n ```rust\n-struct CodegenCx<'ll, 'tcx: 'll, V: 'll = &'ll Value> {\n+struct CodegenCx<'ll, 'tcx: 'll> {\n   /* ... */\n }\n \n-struct Builder<'a, 'll: 'a, 'tcx: 'll, V: 'll = &'ll Value> {\n-  cx: &'a CodegenCx<'ll, 'tcx, V>,\n+struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n+  cx: &'a CodegenCx<'ll, 'tcx>,\n   /* ... */\n }\n ```"}]}