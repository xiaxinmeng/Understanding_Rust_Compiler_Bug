{"sha": "b530ca103388c99e774868645758785d6ad6b9a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzBjYTEwMzM4OGM5OWU3NzQ4Njg2NDU3NTg3ODVkNmFkNmI5YTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-23T21:01:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-25T00:07:03Z"}, "message": "std: Make unlinking and task notification work with newsched", "tree": {"sha": "2dafdecde18c423bbc65362a7743125a102f6cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dafdecde18c423bbc65362a7743125a102f6cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b530ca103388c99e774868645758785d6ad6b9a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b530ca103388c99e774868645758785d6ad6b9a9", "html_url": "https://github.com/rust-lang/rust/commit/b530ca103388c99e774868645758785d6ad6b9a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b530ca103388c99e774868645758785d6ad6b9a9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "html_url": "https://github.com/rust-lang/rust/commit/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "97c3b6a749bc9d8d6852f3ff922651749517988b", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b530ca103388c99e774868645758785d6ad6b9a9/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b530ca103388c99e774868645758785d6ad6b9a9/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b530ca103388c99e774868645758785d6ad6b9a9", "patch": "@@ -290,4 +290,29 @@ mod test {\n             a.next = Some(b);\n         }\n     }\n+\n+    // XXX: This is a copy of test_future_result in std::task.\n+    // It can be removed once the scheduler is turned on by default.\n+    #[test]\n+    fn future_result() {\n+        do run_in_newsched_task {\n+            use option::{Some, None};\n+            use task::*;\n+\n+            let mut result = None;\n+            let mut builder = task();\n+            builder.future_result(|r| result = Some(r));\n+            do builder.spawn {}\n+            assert_eq!(result.unwrap().recv(), Success);\n+\n+            result = None;\n+            let mut builder = task();\n+            builder.future_result(|r| result = Some(r));\n+            builder.unlinked();\n+            do builder.spawn {\n+                fail!();\n+            }\n+            assert_eq!(result.unwrap().recv(), Failure);\n+        }\n+    }\n }"}, {"sha": "63eb768d1c9cdc109230b2a33bba7f339992f053", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b530ca103388c99e774868645758785d6ad6b9a9/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b530ca103388c99e774868645758785d6ad6b9a9/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=b530ca103388c99e774868645758785d6ad6b9a9", "patch": "@@ -578,13 +578,29 @@ pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n     }\n }\n \n-fn spawn_raw_newsched(_opts: TaskOpts, f: ~fn()) {\n+fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n     use rt::sched::*;\n \n-    let task = do Local::borrow::<Task, ~Task>() |running_task| {\n-        ~running_task.new_child()\n+    let mut task = if opts.linked {\n+        do Local::borrow::<Task, ~Task>() |running_task| {\n+            ~running_task.new_child()\n+        }\n+    } else {\n+        // An unlinked task is a new root in the task tree\n+        ~Task::new_root()\n     };\n \n+    if opts.notify_chan.is_some() {\n+        let notify_chan = opts.notify_chan.swap_unwrap();\n+        let notify_chan = Cell::new(notify_chan);\n+        let on_exit: ~fn(bool) = |success| {\n+            notify_chan.take().send(\n+                if success { Success } else { Failure }\n+            )\n+        };\n+        task.on_exit = Some(on_exit);\n+    }\n+\n     let mut sched = Local::take::<Scheduler>();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n                                      task, f);"}]}