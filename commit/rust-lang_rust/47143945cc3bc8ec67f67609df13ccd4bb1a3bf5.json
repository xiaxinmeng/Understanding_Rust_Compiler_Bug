{"sha": "47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTQzOTQ1Y2MzYmM4ZWM2N2Y2NzYwOWRmMTNjY2Q0YmIxYTNiZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-20T21:35:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "delete the json-errors test\n\nIt's primary purpose was to check that json worked at all,\nbut compiletest does that now.", "tree": {"sha": "2968eb8fab121b64164cff3908649adf0ed497f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2968eb8fab121b64164cff3908649adf0ed497f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "html_url": "https://github.com/rust-lang/rust/commit/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c6f813098a4e51344b7968022bbd946bad37be", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c6f813098a4e51344b7968022bbd946bad37be", "html_url": "https://github.com/rust-lang/rust/commit/71c6f813098a4e51344b7968022bbd946bad37be"}], "stats": {"total": 28, "additions": 0, "deletions": 28}, "files": [{"sha": "30bcafd104945cfa5e775fe59a56aef81665b215", "filename": "src/test/run-make/json-errors/Makefile", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=71c6f813098a4e51344b7968022bbd946bad37be", "patch": "@@ -1,9 +0,0 @@\n--include ../tools.mk\n-\n-LOG := $(TMPDIR)/foo.log\n-\n-all:\n-\tcp foo.rs $(TMPDIR)\n-\tcd $(TMPDIR)\n-\t-$(RUSTC) -Z unstable-options --error-format=json foo.rs 2>$(LOG)\n-\tdiff foo.json $(LOG)"}, {"sha": "bde669ab0f7f99b6f19076013da9def608a54098", "filename": "src/test/run-make/json-errors/foo.json", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.json", "raw_url": "https://github.com/rust-lang/rust/raw/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.json?ref=71c6f813098a4e51344b7968022bbd946bad37be", "patch": "@@ -1,4 +0,0 @@\n-{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\nAn unresolved name was used. Example of erroneous codes:\\n\\n```compile_fail\\nsomething_that_doesnt_exist::foo;\\n// error: unresolved name `something_that_doesnt_exist::foo`\\n\\n// or:\\n\\ntrait Foo {\\n    fn bar() {\\n        Self; // error: unresolved name `Self`\\n    }\\n}\\n\\n// or:\\n\\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\\n```\\n\\nPlease verify that the name wasn't misspelled and ensure that the\\nidentifier being referred to is valid for the given situation. Example:\\n\\n```\\nenum something_that_does_exist {\\n    Foo,\\n}\\n```\\n\\nOr:\\n\\n```\\nmod something_that_does_exist {\\n    pub static foo : i32 = 0i32;\\n}\\n\\nsomething_that_does_exist::foo; // ok!\\n```\\n\\nOr:\\n\\n```\\nlet unknown_variable = 12u32;\\nlet x = unknown_variable; // ok!\\n```\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19,\"text\":[{\"text\":\"    let x = 42 + y;\",\"highlight_start\":18,\"highlight_end\":19}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}\n-{\"message\":\"mismatched types:\\n expected `u8`,\\n    found `i32`\",\"code\":{\"code\":\"E0308\",\"explanation\":\"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\\nAnother situation in which this occurs is when you attempt to use the `try!`\\nmacro inside a function that does not return a `Result<T, E>`:\\n\\n```compile_fail\\nuse std::fs::File;\\n\\nfn main() {\\n    let mut f = try!(File::create(\\\"foo.txt\\\"));\\n}\\n```\\n\\nThis code gives an error like this:\\n\\n```text\\n<std macros>:5:8: 6:42 error: mismatched types:\\n expected `()`,\\n     found `core::result::Result<_, _>`\\n (expected (),\\n     found enum `core::result::Result`) [E0308]\\n```\\n\\n`try!` returns a `Result<T, E>`, and so the function must. But `main()` has\\n`()` as its return type, hence the error.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":511,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":12,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":12,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}\n-{\"message\":\"the trait bound `u8: std::ops::Add<i32>` is not satisfied\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n```compile_fail\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n```\\n\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"the following implementations were found:\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"  <u8 as std::ops::Add>\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"  <&'a u8 as std::ops::Add<u8>>\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"  <u8 as std::ops::Add<&'a u8>>\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"  <&'b u8 as std::ops::Add<&'a u8>>\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":5,\"column_end\":17,\"text\":[{\"text\":\"    42u8 + 42i32;\",\"highlight_start\":5,\"highlight_end\":17}],\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":null}\n-{\"message\":\"aborting due to 2 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":null}"}, {"sha": "4db33940d88434011d5e36c85c96ff74689ada4f", "filename": "src/test/run-make/json-errors/foo.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c6f813098a4e51344b7968022bbd946bad37be/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs?ref=71c6f813098a4e51344b7968022bbd946bad37be", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let x = 42 + y;\n-\n-    42u8 + 42i32;\n-}"}]}