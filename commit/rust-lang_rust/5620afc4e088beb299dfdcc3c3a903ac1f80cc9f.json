{"sha": "5620afc4e088beb299dfdcc3c3a903ac1f80cc9f", "node_id": "C_kwDOAAsO6NoAKDU2MjBhZmM0ZTA4OGJlYjI5OWRmZGNjM2MzYTkwM2FjMWY4MGNjOWY", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-21T23:30:05Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-12-17T13:32:13Z"}, "message": "poll tidy threads for completion before waiting", "tree": {"sha": "4b83b4ef63d914a3c43a9da645dd00fa8490c553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b83b4ef63d914a3c43a9da645dd00fa8490c553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f", "html_url": "https://github.com/rust-lang/rust/commit/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bfc4879390117e850da74ad73eb9f9df588350", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bfc4879390117e850da74ad73eb9f9df588350", "html_url": "https://github.com/rust-lang/rust/commit/f7bfc4879390117e850da74ad73eb9f9df588350"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "6714c63ee62a143a923f84088101cc99ec1142d1", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620afc4e088beb299dfdcc3c3a903ac1f80cc9f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=5620afc4e088beb299dfdcc3c3a903ac1f80cc9f", "patch": "@@ -35,15 +35,26 @@ fn main() {\n \n     let bad = std::sync::Arc::new(AtomicBool::new(false));\n \n+    let drain_handles = |handles: &mut VecDeque<ScopedJoinHandle<'_, ()>>| {\n+        // poll all threads for completion before awaiting the oldest one\n+        for i in (0..handles.len()).rev() {\n+            if handles[i].is_finished() {\n+                handles.swap_remove_back(i).unwrap().join().unwrap();\n+            }\n+        }\n+\n+        while handles.len() >= concurrency.get() {\n+            handles.pop_front().unwrap().join().unwrap();\n+        }\n+    };\n+\n     scope(|s| {\n         let mut handles: VecDeque<ScopedJoinHandle<'_, ()>> =\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n             ($p:ident $(, $args:expr)* ) => {\n-                while handles.len() >= concurrency.get() {\n-                    handles.pop_front().unwrap().join().unwrap();\n-                }\n+                drain_handles(&mut handles);\n \n                 let handle = s.spawn(|| {\n                     let mut flag = false;\n@@ -97,9 +108,8 @@ fn main() {\n         check!(alphabetical, &library_path);\n \n         let collected = {\n-            while handles.len() >= concurrency.get() {\n-                handles.pop_front().unwrap().join().unwrap();\n-            }\n+            drain_handles(&mut handles);\n+\n             let mut flag = false;\n             let r = features::check(&src_path, &compiler_path, &library_path, &mut flag, verbose);\n             if flag {"}]}