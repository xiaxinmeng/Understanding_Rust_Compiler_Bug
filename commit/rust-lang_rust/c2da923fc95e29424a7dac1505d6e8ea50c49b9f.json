{"sha": "c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGE5MjNmYzk1ZTI5NDI0YTdkYWMxNTA1ZDZlOGVhNTBjNDliOWY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-28T00:45:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T04:53:02Z"}, "message": "libstd: remove unnecessary `to_string()` calls", "tree": {"sha": "8b47144a56039b4a53519513bce60aa74c1dcf51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b47144a56039b4a53519513bce60aa74c1dcf51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "html_url": "https://github.com/rust-lang/rust/commit/c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/comments", "author": null, "committer": null, "parents": [{"sha": "ba01ea3730025028affbf4ce56f29621861779c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba01ea3730025028affbf4ce56f29621861779c6", "html_url": "https://github.com/rust-lang/rust/commit/ba01ea3730025028affbf4ce56f29621861779c6"}], "stats": {"total": 192, "additions": 96, "deletions": 96}, "files": [{"sha": "a03d946f4074202822e2e6380dda4af347f3d64d", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -680,13 +680,13 @@ mod tests {\n         assert_eq!(v.to_ascii(), b);\n         assert_eq!(\"( ;\".to_string().to_ascii(), b);\n \n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\".to_string());\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\");\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\");\n \n-        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\".to_string());\n-        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\".to_string());\n+        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\");\n+        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\");\n         let mixed = \"abcDEFxyz:.;\".to_ascii();\n-        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\".to_string());\n+        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\");\n \n         assert!(\"aBcDeF&?#\".to_ascii().eq_ignore_case(\"AbCdEf&?#\".to_ascii()));\n \n@@ -698,12 +698,12 @@ mod tests {\n \n     #[test]\n     fn test_ascii_vec_ng() {\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\".to_string());\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\".to_string());\n-        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\".to_string());\n-        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\");\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\");\n+        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\");\n+        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\");\n         let mixed = \"abcDEFxyz:.;\".to_ascii();\n-        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\".to_string());\n+        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\");\n     }\n \n     #[test]\n@@ -720,8 +720,8 @@ mod tests {\n \n     #[test]\n     fn test_ascii_into_string() {\n-        assert_eq!(vec2ascii![40, 32, 59].into_string(), \"( ;\".to_string());\n-        assert_eq!(vec2ascii!(40, 32, 59).into_string(), \"( ;\".to_string());\n+        assert_eq!(vec2ascii![40, 32, 59].into_string(), \"( ;\");\n+        assert_eq!(vec2ascii!(40, 32, 59).into_string(), \"( ;\");\n     }\n \n     #[test]\n@@ -773,8 +773,8 @@ mod tests {\n \n     #[test]\n     fn test_to_ascii_upper() {\n-        assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_upper(), \"URL()URL()URL()\u00fcRL\".to_string());\n-        assert_eq!(\"h\u0131\u212a\u00df\".to_ascii_upper(), \"H\u0131\u212a\u00df\".to_string());\n+        assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_upper(), \"URL()URL()URL()\u00fcRL\");\n+        assert_eq!(\"h\u0131\u212a\u00df\".to_ascii_upper(), \"H\u0131\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n@@ -788,9 +788,9 @@ mod tests {\n \n     #[test]\n     fn test_to_ascii_lower() {\n-        assert_eq!(\"url()URL()uRl()\u00dcrl\".to_ascii_lower(), \"url()url()url()\u00dcrl\".to_string());\n+        assert_eq!(\"url()URL()uRl()\u00dcrl\".to_ascii_lower(), \"url()url()url()\u00dcrl\");\n         // Dotted capital I, Kelvin sign, Sharp S.\n-        assert_eq!(\"H\u0130\u212a\u00df\".to_ascii_lower(), \"h\u0130\u212a\u00df\".to_string());\n+        assert_eq!(\"H\u0130\u212a\u00df\".to_ascii_lower(), \"h\u0130\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n@@ -806,7 +806,7 @@ mod tests {\n     fn test_into_ascii_upper() {\n         assert_eq!((\"url()URL()uRl()\u00fcrl\".to_string()).into_ascii_upper(),\n                    \"URL()URL()URL()\u00fcRL\".to_string());\n-        assert_eq!((\"h\u0131\u212a\u00df\".to_string()).into_ascii_upper(), \"H\u0131\u212a\u00df\".to_string());\n+        assert_eq!((\"h\u0131\u212a\u00df\".to_string()).into_ascii_upper(), \"H\u0131\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n@@ -821,9 +821,9 @@ mod tests {\n     #[test]\n     fn test_into_ascii_lower() {\n         assert_eq!((\"url()URL()uRl()\u00dcrl\".to_string()).into_ascii_lower(),\n-                   \"url()url()url()\u00dcrl\".to_string());\n+                   \"url()url()url()\u00dcrl\");\n         // Dotted capital I, Kelvin sign, Sharp S.\n-        assert_eq!((\"H\u0130\u212a\u00df\".to_string()).into_ascii_lower(), \"h\u0130\u212a\u00df\".to_string());\n+        assert_eq!((\"H\u0130\u212a\u00df\".to_string()).into_ascii_lower(), \"h\u0130\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n@@ -859,12 +859,12 @@ mod tests {\n     #[test]\n     fn test_to_string() {\n         let s = Ascii{ chr: b't' }.to_string();\n-        assert_eq!(s, \"t\".to_string());\n+        assert_eq!(s, \"t\");\n     }\n \n     #[test]\n     fn test_show() {\n         let c = Ascii { chr: b't' };\n-        assert_eq!(format!(\"{}\", c), \"t\".to_string());\n+        assert_eq!(format!(\"{}\", c), \"t\");\n     }\n }"}, {"sha": "ef7fe48b1adf8b21f2fb4c6f29cb4251ea7cbfbe", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -1903,8 +1903,8 @@ mod test_map {\n \n         let map_str = format!(\"{}\", map);\n \n-        assert!(map_str == \"{1: 2, 3: 4}\".to_string() || map_str == \"{3: 4, 1: 2}\".to_string());\n-        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n+        assert!(map_str == \"{1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n+        assert_eq!(format!(\"{}\", empty), \"{}\");\n     }\n \n     #[test]"}, {"sha": "ebf7a29ad3f931592cf8aefe9a62af0726d59580", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -862,7 +862,7 @@ mod test_set {\n \n         let set_str = format!(\"{}\", set);\n \n-        assert!(set_str == \"{1, 2}\".to_string() || set_str == \"{2, 1}\".to_string());\n-        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n+        assert!(set_str == \"{1, 2}\" || set_str == \"{2, 1}\");\n+        assert_eq!(format!(\"{}\", empty), \"{}\");\n     }\n }"}, {"sha": "638ccdb111274b6e1d0ddcaf5550594c15c9ccdd", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -446,15 +446,15 @@ mod tests {\n         cache.insert(1, 10);\n         cache.insert(2, 20);\n         cache.insert(3, 30);\n-        assert_eq!(cache.to_string(), \"{3: 30, 2: 20, 1: 10}\".to_string());\n+        assert_eq!(cache.to_string(), \"{3: 30, 2: 20, 1: 10}\");\n         cache.insert(2, 22);\n-        assert_eq!(cache.to_string(), \"{2: 22, 3: 30, 1: 10}\".to_string());\n+        assert_eq!(cache.to_string(), \"{2: 22, 3: 30, 1: 10}\");\n         cache.insert(6, 60);\n-        assert_eq!(cache.to_string(), \"{6: 60, 2: 22, 3: 30}\".to_string());\n+        assert_eq!(cache.to_string(), \"{6: 60, 2: 22, 3: 30}\");\n         cache.get(&3);\n-        assert_eq!(cache.to_string(), \"{3: 30, 6: 60, 2: 22}\".to_string());\n+        assert_eq!(cache.to_string(), \"{3: 30, 6: 60, 2: 22}\");\n         cache.set_capacity(2);\n-        assert_eq!(cache.to_string(), \"{3: 30, 6: 60}\".to_string());\n+        assert_eq!(cache.to_string(), \"{3: 30, 6: 60}\");\n     }\n \n     #[test]\n@@ -465,6 +465,6 @@ mod tests {\n         cache.clear();\n         assert!(cache.get(&1).is_none());\n         assert!(cache.get(&2).is_none());\n-        assert_eq!(cache.to_string(), \"{}\".to_string());\n+        assert_eq!(cache.to_string(), \"{}\");\n     }\n }"}, {"sha": "078daf8fecae6aa4795e5b7365e66bbec069b93b", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -592,7 +592,7 @@ mod test {\n         writer.write_line(\"testing\").unwrap();\n         writer.write_str(\"testing\").unwrap();\n         let mut r = BufReader::new(writer.get_ref());\n-        assert_eq!(r.read_to_string().unwrap(), \"testingtesting\\ntesting\".to_string());\n+        assert_eq!(r.read_to_string().unwrap(), \"testingtesting\\ntesting\");\n     }\n \n     #[test]\n@@ -602,7 +602,7 @@ mod test {\n         writer.write_char('\\n').unwrap();\n         writer.write_char('\u1ec7').unwrap();\n         let mut r = BufReader::new(writer.get_ref());\n-        assert_eq!(r.read_to_string().unwrap(), \"a\\n\u1ec7\".to_string());\n+        assert_eq!(r.read_to_string().unwrap(), \"a\\n\u1ec7\");\n     }\n \n     #[test]"}, {"sha": "a9e653e267a804bfd94e4f073262b1429a1b5b0f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -2005,14 +2005,14 @@ mod tests {\n     fn test_show() {\n         use super::*;\n \n-        assert_eq!(format!(\"{}\", USER_READ), \"0400\".to_string());\n-        assert_eq!(format!(\"{}\", USER_FILE), \"0644\".to_string());\n-        assert_eq!(format!(\"{}\", USER_EXEC), \"0755\".to_string());\n-        assert_eq!(format!(\"{}\", USER_RWX),  \"0700\".to_string());\n-        assert_eq!(format!(\"{}\", GROUP_RWX), \"0070\".to_string());\n-        assert_eq!(format!(\"{}\", OTHER_RWX), \"0007\".to_string());\n-        assert_eq!(format!(\"{}\", ALL_PERMISSIONS), \"0777\".to_string());\n-        assert_eq!(format!(\"{}\", USER_READ | USER_WRITE | OTHER_WRITE), \"0602\".to_string());\n+        assert_eq!(format!(\"{}\", USER_READ), \"0400\");\n+        assert_eq!(format!(\"{}\", USER_FILE), \"0644\");\n+        assert_eq!(format!(\"{}\", USER_EXEC), \"0755\");\n+        assert_eq!(format!(\"{}\", USER_RWX),  \"0700\");\n+        assert_eq!(format!(\"{}\", GROUP_RWX), \"0070\");\n+        assert_eq!(format!(\"{}\", OTHER_RWX), \"0007\");\n+        assert_eq!(format!(\"{}\", ALL_PERMISSIONS), \"0777\");\n+        assert_eq!(format!(\"{}\", USER_READ | USER_WRITE | OTHER_WRITE), \"0602\");\n     }\n \n     fn _ensure_buffer_is_object_safe<T: Buffer>(x: &T) -> &Buffer {"}, {"sha": "20e2753392c1bf6c24500464bafce2883ef0f636", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -640,10 +640,10 @@ mod test {\n     #[test]\n     fn ipv6_addr_to_string() {\n         let a1 = Ipv6Addr(0, 0, 0, 0, 0, 0xffff, 0xc000, 0x280);\n-        assert!(a1.to_string() == \"::ffff:192.0.2.128\".to_string() ||\n-                a1.to_string() == \"::FFFF:192.0.2.128\".to_string());\n+        assert!(a1.to_string() == \"::ffff:192.0.2.128\" ||\n+                a1.to_string() == \"::FFFF:192.0.2.128\");\n         assert_eq!(Ipv6Addr(8, 9, 10, 11, 12, 13, 14, 15).to_string(),\n-                   \"8:9:a:b:c:d:e:f\".to_string());\n+                   \"8:9:a:b:c:d:e:f\");\n     }\n \n     #[test]"}, {"sha": "a4ca77e92fa082ec68b4d78c325fb37f18d7a374", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -810,7 +810,7 @@ mod tests {\n     fn stdout_works() {\n         let mut cmd = Command::new(\"echo\");\n         cmd.arg(\"foobar\").stdout(CreatePipe(false, true));\n-        assert_eq!(run_output(cmd), \"foobar\\n\".to_string());\n+        assert_eq!(run_output(cmd), \"foobar\\n\");\n     }\n \n     #[cfg(all(unix, not(target_os=\"android\")))]\n@@ -820,7 +820,7 @@ mod tests {\n         cmd.arg(\"-c\").arg(\"pwd\")\n            .cwd(&Path::new(\"/\"))\n            .stdout(CreatePipe(false, true));\n-        assert_eq!(run_output(cmd), \"/\\n\".to_string());\n+        assert_eq!(run_output(cmd), \"/\\n\");\n     }\n \n     #[cfg(all(unix, not(target_os=\"android\")))]\n@@ -835,7 +835,7 @@ mod tests {\n         drop(p.stdin.take());\n         let out = read_all(p.stdout.as_mut().unwrap() as &mut Reader);\n         assert!(p.wait().unwrap().success());\n-        assert_eq!(out, \"foobar\\n\".to_string());\n+        assert_eq!(out, \"foobar\\n\");\n     }\n \n     #[cfg(not(target_os=\"android\"))]\n@@ -900,7 +900,7 @@ mod tests {\n         let output_str = str::from_utf8(output.as_slice()).unwrap();\n \n         assert!(status.success());\n-        assert_eq!(output_str.trim().to_string(), \"hello\".to_string());\n+        assert_eq!(output_str.trim().to_string(), \"hello\");\n         // FIXME #7224\n         if !running_on_valgrind() {\n             assert_eq!(error, Vec::new());\n@@ -941,7 +941,7 @@ mod tests {\n         let output_str = str::from_utf8(output.as_slice()).unwrap();\n \n         assert!(status.success());\n-        assert_eq!(output_str.trim().to_string(), \"hello\".to_string());\n+        assert_eq!(output_str.trim().to_string(), \"hello\");\n         // FIXME #7224\n         if !running_on_valgrind() {\n             assert_eq!(error, Vec::new());"}, {"sha": "fce1ee7e9b45720bb2ca6898827f04536f7cede2", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -527,7 +527,7 @@ mod tests {\n             set_stdout(box w);\n             println!(\"hello!\");\n         });\n-        assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\".to_string());\n+        assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\");\n     }\n \n     #[test]"}, {"sha": "c87f40f351bc013867ff7cb1c2063aaf8af14e55", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -428,28 +428,28 @@ mod tests {\n     #[test]\n     fn test_int_to_str_overflow() {\n         let mut i8_val: i8 = 127_i8;\n-        assert_eq!(i8_val.to_string(), \"127\".to_string());\n+        assert_eq!(i8_val.to_string(), \"127\");\n \n         i8_val += 1 as i8;\n-        assert_eq!(i8_val.to_string(), \"-128\".to_string());\n+        assert_eq!(i8_val.to_string(), \"-128\");\n \n         let mut i16_val: i16 = 32_767_i16;\n-        assert_eq!(i16_val.to_string(), \"32767\".to_string());\n+        assert_eq!(i16_val.to_string(), \"32767\");\n \n         i16_val += 1 as i16;\n-        assert_eq!(i16_val.to_string(), \"-32768\".to_string());\n+        assert_eq!(i16_val.to_string(), \"-32768\");\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n-        assert_eq!(i32_val.to_string(), \"2147483647\".to_string());\n+        assert_eq!(i32_val.to_string(), \"2147483647\");\n \n         i32_val += 1 as i32;\n-        assert_eq!(i32_val.to_string(), \"-2147483648\".to_string());\n+        assert_eq!(i32_val.to_string(), \"-2147483648\");\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n-        assert_eq!(i64_val.to_string(), \"9223372036854775807\".to_string());\n+        assert_eq!(i64_val.to_string(), \"9223372036854775807\");\n \n         i64_val += 1 as i64;\n-        assert_eq!(i64_val.to_string(), \"-9223372036854775808\".to_string());\n+        assert_eq!(i64_val.to_string(), \"-9223372036854775808\");\n     }\n }\n "}, {"sha": "0baefb11cf8f2a8ff593493a5760d5133a0b10a7", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -79,28 +79,28 @@ mod tests {\n     #[test]\n     fn test_uint_to_str_overflow() {\n         let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8_val.to_string(), \"255\".to_string());\n+        assert_eq!(u8_val.to_string(), \"255\");\n \n         u8_val += 1 as u8;\n-        assert_eq!(u8_val.to_string(), \"0\".to_string());\n+        assert_eq!(u8_val.to_string(), \"0\");\n \n         let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16_val.to_string(), \"65535\".to_string());\n+        assert_eq!(u16_val.to_string(), \"65535\");\n \n         u16_val += 1 as u16;\n-        assert_eq!(u16_val.to_string(), \"0\".to_string());\n+        assert_eq!(u16_val.to_string(), \"0\");\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32_val.to_string(), \"4294967295\".to_string());\n+        assert_eq!(u32_val.to_string(), \"4294967295\");\n \n         u32_val += 1 as u32;\n-        assert_eq!(u32_val.to_string(), \"0\".to_string());\n+        assert_eq!(u32_val.to_string(), \"0\");\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64_val.to_string(), \"18446744073709551615\".to_string());\n+        assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n \n         u64_val += 1 as u64;\n-        assert_eq!(u64_val.to_string(), \"0\".to_string());\n+        assert_eq!(u64_val.to_string(), \"0\");\n     }\n \n     #[test]"}, {"sha": "512756ececda483f2691b17d1d52ff85d49ae247", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -1321,9 +1321,9 @@ mod tests {\n     #[test]\n     fn test_display_str() {\n         let path = Path::new(\"foo\");\n-        assert_eq!(path.display().to_string(), \"foo\".to_string());\n+        assert_eq!(path.display().to_string(), \"foo\");\n         let path = Path::new(b\"\\\\\");\n-        assert_eq!(path.filename_display().to_string(), \"\".to_string());\n+        assert_eq!(path.filename_display().to_string(), \"\");\n \n         let path = Path::new(\"foo\");\n         let mo = path.display().as_cow();"}, {"sha": "93690323d31257dc403137d9e01bc10272394f67", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -1012,7 +1012,7 @@ mod test {\n     macro_rules! t( ($a:expr, $b:expr) => ({\n         let mut m = Vec::new();\n         super::demangle(&mut m, $a).unwrap();\n-        assert_eq!(String::from_utf8(m).unwrap(), $b.to_string());\n+        assert_eq!(String::from_utf8(m).unwrap(), $b);\n     }) )\n \n     #[test]"}, {"sha": "a8c9983e5aac56e30c9f0e369d6968c76549a625", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -153,33 +153,33 @@ mod test {\n     #[test]\n     fn test_from_value() {\n         let mut f = Future::from_value(\"snail\".to_string());\n-        assert_eq!(f.get(), \"snail\".to_string());\n+        assert_eq!(f.get(), \"snail\");\n     }\n \n     #[test]\n     fn test_from_receiver() {\n         let (tx, rx) = channel();\n         tx.send(\"whale\".to_string());\n         let mut f = Future::from_receiver(rx);\n-        assert_eq!(f.get(), \"whale\".to_string());\n+        assert_eq!(f.get(), \"whale\");\n     }\n \n     #[test]\n     fn test_from_fn() {\n         let mut f = Future::from_fn(proc() \"brail\".to_string());\n-        assert_eq!(f.get(), \"brail\".to_string());\n+        assert_eq!(f.get(), \"brail\");\n     }\n \n     #[test]\n     fn test_interface_get() {\n         let mut f = Future::from_value(\"fail\".to_string());\n-        assert_eq!(f.get(), \"fail\".to_string());\n+        assert_eq!(f.get(), \"fail\");\n     }\n \n     #[test]\n     fn test_interface_unwrap() {\n         let f = Future::from_value(\"fail\".to_string());\n-        assert_eq!(f.unwrap(), \"fail\".to_string());\n+        assert_eq!(f.unwrap(), \"fail\");\n     }\n \n     #[test]\n@@ -191,7 +191,7 @@ mod test {\n     #[test]\n     fn test_spawn() {\n         let mut f = Future::spawn(proc() \"bale\".to_string());\n-        assert_eq!(f.get(), \"bale\".to_string());\n+        assert_eq!(f.get(), \"bale\");\n     }\n \n     #[test]"}, {"sha": "02548bedf028be1b4c4829d73d1c5828c0eb2b9f", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -484,24 +484,24 @@ mod tests {\n \n         assert_eq!(\n             test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]),\n-            \"prog aaa bbb ccc\".to_string()\n+            \"prog aaa bbb ccc\"\n         );\n \n         assert_eq!(\n             test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\"]),\n-            \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\".to_string()\n+            \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\"\n         );\n         assert_eq!(\n             test_wrapper(\"C:\\\\Program Files\\\\test\", &[\"aa\\\"bb\"]),\n-            \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\".to_string()\n+            \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\"\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", &[\"a b c\"]),\n-            \"echo \\\"a b c\\\"\".to_string()\n+            \"echo \\\"a b c\\\"\"\n         );\n         assert_eq!(\n             test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", &[]),\n-            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_string()\n+            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\"\n         );\n     }\n }"}, {"sha": "0fb9e5b5c4376a686edd07b79e0635b72c10db79", "filename": "src/libstd/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -287,21 +287,21 @@ mod test {\n     #[test]\n     fn test_owned_named_task() {\n         TaskBuilder::new().named(\"ada lovelace\".to_string()).try(proc() {\n-            assert!(name().unwrap() == \"ada lovelace\".to_string());\n+            assert!(name().unwrap() == \"ada lovelace\");\n         }).map_err(|_| ()).unwrap();\n     }\n \n     #[test]\n     fn test_static_named_task() {\n         TaskBuilder::new().named(\"ada lovelace\").try(proc() {\n-            assert!(name().unwrap() == \"ada lovelace\".to_string());\n+            assert!(name().unwrap() == \"ada lovelace\");\n         }).map_err(|_| ()).unwrap();\n     }\n \n     #[test]\n     fn test_send_named_task() {\n         TaskBuilder::new().named(\"ada lovelace\".into_cow()).try(proc() {\n-            assert!(name().unwrap() == \"ada lovelace\".to_string());\n+            assert!(name().unwrap() == \"ada lovelace\");\n         }).map_err(|_| ()).unwrap();\n     }\n \n@@ -462,7 +462,7 @@ mod test {\n             Err(e) => {\n                 type T = String;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.downcast::<T>().unwrap(), \"owned string\".to_string());\n+                assert_eq!(*e.downcast::<T>().unwrap(), \"owned string\");\n             }\n             Ok(()) => panic!()\n         }\n@@ -509,7 +509,7 @@ mod test {\n         assert!(r.is_ok());\n \n         let output = reader.read_to_string().unwrap();\n-        assert_eq!(output, \"Hello, world!\".to_string());\n+        assert_eq!(output, \"Hello, world!\");\n     }\n \n     // NOTE: the corresponding test for stderr is in run-pass/task-stderr, due"}, {"sha": "1c36024bd96788a3046d5fb05cee8e3106b27b85", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da923fc95e29424a7dac1505d6e8ea50c49b9f/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=c2da923fc95e29424a7dac1505d6e8ea50c49b9f", "patch": "@@ -538,20 +538,20 @@ mod tests {\n \n     #[test]\n     fn test_duration_fmt() {\n-        assert_eq!(Duration::zero().to_string(), \"PT0S\".to_string());\n-        assert_eq!(Duration::days(42).to_string(), \"P42D\".to_string());\n-        assert_eq!(Duration::days(-42).to_string(), \"-P42D\".to_string());\n-        assert_eq!(Duration::seconds(42).to_string(), \"PT42S\".to_string());\n-        assert_eq!(Duration::milliseconds(42).to_string(), \"PT0.042S\".to_string());\n-        assert_eq!(Duration::microseconds(42).to_string(), \"PT0.000042S\".to_string());\n-        assert_eq!(Duration::nanoseconds(42).to_string(), \"PT0.000000042S\".to_string());\n+        assert_eq!(Duration::zero().to_string(), \"PT0S\");\n+        assert_eq!(Duration::days(42).to_string(), \"P42D\");\n+        assert_eq!(Duration::days(-42).to_string(), \"-P42D\");\n+        assert_eq!(Duration::seconds(42).to_string(), \"PT42S\");\n+        assert_eq!(Duration::milliseconds(42).to_string(), \"PT0.042S\");\n+        assert_eq!(Duration::microseconds(42).to_string(), \"PT0.000042S\");\n+        assert_eq!(Duration::nanoseconds(42).to_string(), \"PT0.000000042S\");\n         assert_eq!((Duration::days(7) + Duration::milliseconds(6543)).to_string(),\n-                   \"P7DT6.543S\".to_string());\n-        assert_eq!(Duration::seconds(-86401).to_string(), \"-P1DT1S\".to_string());\n-        assert_eq!(Duration::nanoseconds(-1).to_string(), \"-PT0.000000001S\".to_string());\n+                   \"P7DT6.543S\");\n+        assert_eq!(Duration::seconds(-86401).to_string(), \"-P1DT1S\");\n+        assert_eq!(Duration::nanoseconds(-1).to_string(), \"-PT0.000000001S\");\n \n         // the format specifier should have no effect on `Duration`\n         assert_eq!(format!(\"{:30}\", Duration::days(1) + Duration::milliseconds(2345)),\n-                   \"P1DT2.345S\".to_string());\n+                   \"P1DT2.345S\");\n     }\n }"}]}