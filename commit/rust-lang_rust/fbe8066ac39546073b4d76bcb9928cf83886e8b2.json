{"sha": "fbe8066ac39546073b4d76bcb9928cf83886e8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTgwNjZhYzM5NTQ2MDczYjRkNzZiY2I5OTI4Y2Y4Mzg4NmU4YjI=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-05-04T07:39:10Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-05-17T21:30:32Z"}, "message": "Catch associated consts that depend on type parameters in type checking.\n\nConstants with values that depend on generic parameters or `Self` cause\nICEs in `check_const`, and are not yet accepted via RFC, so we need to\nthrow a proper error in these cases.", "tree": {"sha": "4f14c4da2d0e27acc595d11d14b195cea13ba899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f14c4da2d0e27acc595d11d14b195cea13ba899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe8066ac39546073b4d76bcb9928cf83886e8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe8066ac39546073b4d76bcb9928cf83886e8b2", "html_url": "https://github.com/rust-lang/rust/commit/fbe8066ac39546073b4d76bcb9928cf83886e8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe8066ac39546073b4d76bcb9928cf83886e8b2/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7c17db2235a2a3f2c71242b11fc429a8d05a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7c17db2235a2a3f2c71242b11fc429a8d05a90", "html_url": "https://github.com/rust-lang/rust/commit/8b7c17db2235a2a3f2c71242b11fc429a8d05a90"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "7c270bf4a3003f724bc6607d264047fd133df35a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fbe8066ac39546073b4d76bcb9928cf83886e8b2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe8066ac39546073b4d76bcb9928cf83886e8b2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fbe8066ac39546073b4d76bcb9928cf83886e8b2", "patch": "@@ -3765,6 +3765,21 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n {\n     // If fully resolved already, we don't have to do anything.\n     if path_res.depth == 0 {\n+        // Associated constants can't depend on generic types.\n+        if let Some(ty) = opt_self_ty {\n+            match path_res.full_def() {\n+                def::DefAssociatedConst(..) => {\n+                    if ty::type_has_params(ty) || ty::type_has_self(ty) {\n+                        fcx.sess().span_err(span,\n+                                            \"Associated consts cannot depend \\\n+                                             on type parameters or Self.\");\n+                        fcx.write_error(node_id);\n+                        return None;\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n         Some((opt_self_ty, &path.segments, path_res.base_def))\n     } else {\n         let mut def = path_res.base_def;\n@@ -3780,6 +3795,19 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n         let item_name = item_segment.identifier.name;\n         match method::resolve_ufcs(fcx, span, item_name, ty, node_id) {\n             Ok((def, lp)) => {\n+                // Associated constants can't depend on generic types.\n+                match def {\n+                    def::DefAssociatedConst(..) => {\n+                        if ty::type_has_params(ty) || ty::type_has_self(ty) {\n+                            fcx.sess().span_err(span,\n+                                                \"Associated consts cannot depend \\\n+                                                 on type parameters or Self.\");\n+                            fcx.write_error(node_id);\n+                            return None;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n                 // Write back the new resolution.\n                 fcx.ccx.tcx.def_map.borrow_mut()\n                        .insert(node_id, def::PathResolution {"}, {"sha": "bbe252fc151887bb4327e2b5332a73844fd91447", "filename": "src/test/compile-fail/associated-const-type-parameters.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fbe8066ac39546073b4d76bcb9928cf83886e8b2/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe8066ac39546073b4d76bcb9928cf83886e8b2/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameters.rs?ref=fbe8066ac39546073b4d76bcb9928cf83886e8b2", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+pub trait Foo {\n+    const MIN: i32;\n+\n+    fn get_min() -> i32 {\n+        Self::MIN //~ Associated consts cannot depend on type parameters or Self.\n+    }\n+}\n+\n+fn get_min<T: Foo>() -> i32 {\n+    T::MIN; //~ Associated consts cannot depend on type parameters or Self.\n+    <T as Foo>::MIN //~ Associated consts cannot depend on type parameters or Self.\n+}\n+\n+fn main() {}"}]}