{"sha": "1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTY1Y2M4ZTlkYzhmOGIyNmVhYzk5Y2ZmZGVmNjUwMWNmMGM2MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-18T17:37:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-18T17:37:25Z"}, "message": "Auto merge of #38369 - aturon:stab-1.15, r=alexcrichton\n\nLibrary stabilizations/deprecations for 1.15 release\n\nStabilized:\n\n- `std::iter::Iterator::{min_by, max_by}`\n- `std::os::*::fs::FileExt`\n- `std::sync::atomic::Atomic*::{get_mut, into_inner}`\n- `std::vec::IntoIter::{as_slice, as_mut_slice}`\n- `std::sync::mpsc::Receiver::try_iter`\n- `std::os::unix::process::CommandExt::before_exec`\n- `std::rc::Rc::{strong_count, weak_count}`\n- `std::sync::Arc::{strong_count, weak_count}`\n- `std::char::{encode_utf8, encode_utf16}`\n- `std::cell::Ref::clone`\n- `std::io::Take::into_inner`\n\nDeprecated:\n\n- `std::rc::Rc::{would_unwrap, is_unique}`\n- `std::cell::RefCell::borrow_state`\n\nCloses #23755\nCloses #27733\nCloses #27746\nCloses #27784\nCloses #28356\nCloses #31398\nCloses #34931\nCloses #35601\nCloses #35603\nCloses #35918\nCloses #36105", "tree": {"sha": "e0df29c8bc2f181da612f1685364c0eee24a15e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0df29c8bc2f181da612f1685364c0eee24a15e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "html_url": "https://github.com/rust-lang/rust/commit/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8327b5afafde7cdd6fd4e939d9a8fe12f76503ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8327b5afafde7cdd6fd4e939d9a8fe12f76503ef", "html_url": "https://github.com/rust-lang/rust/commit/8327b5afafde7cdd6fd4e939d9a8fe12f76503ef"}, {"sha": "9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "html_url": "https://github.com/rust-lang/rust/commit/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6"}], "stats": {"total": 232, "additions": 83, "deletions": 149}, "files": [{"sha": "1cad8f7f40788dc07c78b18203f1e80890e008a1", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -392,8 +392,6 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_counts)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -404,8 +402,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(1, Arc::weak_count(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\",\n-               issue = \"28356\")]\n+    #[stable(feature = \"arc_counts\", since = \"1.15.0\")]\n     pub fn weak_count(this: &Self) -> usize {\n         this.inner().weak.load(SeqCst) - 1\n     }\n@@ -421,8 +418,6 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_counts)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -433,8 +428,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(2, Arc::strong_count(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\",\n-               issue = \"28356\")]\n+    #[stable(feature = \"arc_counts\", since = \"1.15.0\")]\n     pub fn strong_count(this: &Self) -> usize {\n         this.inner().strong.load(SeqCst)\n     }"}, {"sha": "86f8c746646aac2e26a8570f70d3ccad48335add", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -320,7 +320,7 @@ impl<T> Rc<T> {\n     #[inline]\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn try_unwrap(this: Self) -> Result<T, Self> {\n-        if Rc::would_unwrap(&this) {\n+        if Rc::strong_count(&this) == 1 {\n             unsafe {\n                 let val = ptr::read(&*this); // copy the contained object\n \n@@ -343,26 +343,10 @@ impl<T> Rc<T> {\n     ///\n     /// [try_unwrap]: struct.Rc.html#method.try_unwrap\n     /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_would_unwrap)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let x = Rc::new(3);\n-    /// assert!(Rc::would_unwrap(&x));\n-    /// assert_eq!(Rc::try_unwrap(x), Ok(3));\n-    ///\n-    /// let x = Rc::new(4);\n-    /// let _y = x.clone();\n-    /// assert!(!Rc::would_unwrap(&x));\n-    /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);\n-    /// ```\n     #[unstable(feature = \"rc_would_unwrap\",\n                reason = \"just added for niche usecase\",\n                issue = \"28356\")]\n+    #[rustc_deprecated(since = \"1.15.0\", reason = \"too niche; use `strong_count` instead\")]\n     pub fn would_unwrap(this: &Self) -> bool {\n         Rc::strong_count(&this) == 1\n     }\n@@ -482,8 +466,6 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_counts)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -492,8 +474,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert_eq!(1, Rc::weak_count(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\",\n-               issue = \"28356\")]\n+    #[stable(feature = \"rc_counts\", since = \"1.15.0\")]\n     pub fn weak_count(this: &Self) -> usize {\n         this.weak() - 1\n     }\n@@ -503,8 +484,6 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_counts)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -513,8 +492,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert_eq!(2, Rc::strong_count(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\",\n-               issue = \"28356\")]\n+    #[stable(feature = \"rc_counts\", since = \"1.15.0\")]\n     pub fn strong_count(this: &Self) -> usize {\n         this.strong()\n     }\n@@ -523,21 +501,11 @@ impl<T: ?Sized> Rc<T> {\n     /// this inner value.\n     ///\n     /// [weak]: struct.Weak.html\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_counts)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5);\n-    ///\n-    /// assert!(Rc::is_unique(&five));\n-    /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"uniqueness has unclear meaning\",\n+    #[unstable(feature = \"is_unique\", reason = \"uniqueness has unclear meaning\",\n                issue = \"28356\")]\n+    #[rustc_deprecated(since = \"1.15.0\",\n+                       reason = \"too niche; use `strong_count` and `weak_count` instead\")]\n     pub fn is_unique(this: &Self) -> bool {\n         Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1\n     }"}, {"sha": "f2ef54f6e56794cdb67ed26f59ed77b36344675f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -1902,14 +1902,13 @@ impl<T> IntoIter<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_into_iter_as_slice)]\n     /// let vec = vec!['a', 'b', 'c'];\n     /// let mut into_iter = vec.into_iter();\n     /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n     /// let _ = into_iter.next().unwrap();\n     /// assert_eq!(into_iter.as_slice(), &['b', 'c']);\n     /// ```\n-    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    #[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         unsafe {\n             slice::from_raw_parts(self.ptr, self.len())\n@@ -1921,7 +1920,6 @@ impl<T> IntoIter<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_into_iter_as_slice)]\n     /// let vec = vec!['a', 'b', 'c'];\n     /// let mut into_iter = vec.into_iter();\n     /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n@@ -1930,7 +1928,7 @@ impl<T> IntoIter<T> {\n     /// assert_eq!(into_iter.next().unwrap(), 'b');\n     /// assert_eq!(into_iter.next().unwrap(), 'z');\n     /// ```\n-    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    #[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]\n     pub fn as_mut_slice(&self) -> &mut [T] {\n         unsafe {\n             slice::from_raw_parts_mut(self.ptr as *mut T, self.len())"}, {"sha": "d4fb5ea03adea50071566bff326a29e763fee87a", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -29,7 +29,6 @@\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(vec_into_iter_as_slice)]\n \n extern crate collections;\n extern crate test;"}, {"sha": "c3f862e7c5418b5a8bb4d14ffe1a02fc87c9492f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -393,6 +393,8 @@ pub struct RefCell<T: ?Sized> {\n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+#[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+#[allow(deprecated)]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n     Reading,\n@@ -511,6 +513,8 @@ impl<T: ?Sized> RefCell<T> {\n     /// }\n     /// ```\n     #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+    #[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+    #[allow(deprecated)]\n     #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n         match self.borrow.get() {\n@@ -888,9 +892,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// `Ref::clone(...)`.  A `Clone` implementation or a method would interfere\n     /// with the widespread use of `r.borrow().clone()` to clone the contents of\n     /// a `RefCell`.\n-    #[unstable(feature = \"cell_extras\",\n-               reason = \"likely to be moved to a method, pending language changes\",\n-               issue = \"27746\")]\n+    #[stable(feature = \"cell_extras\", since = \"1.15.0\")]\n     #[inline]\n     pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n         Ref {"}, {"sha": "c14ae6e08987357b19c3e26fd568e37a4f3d8d23", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -327,9 +327,9 @@ pub trait CharExt {\n     fn len_utf8(self) -> usize;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf16(self) -> usize;\n-    #[unstable(feature = \"unicode\", issue = \"27784\")]\n+    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     fn encode_utf8(self, dst: &mut [u8]) -> &mut str;\n-    #[unstable(feature = \"unicode\", issue = \"27784\")]\n+    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16];\n }\n "}, {"sha": "2ba7d6e8bd1ac4d885c9edc336762950f8fe1ff6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut, BorrowState};\n+use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};\n use marker::PhantomData;\n use mem;\n use num::flt2dec;\n@@ -1634,13 +1634,13 @@ impl<T: Copy + Debug> Debug for Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        match self.borrow_state() {\n-            BorrowState::Unused | BorrowState::Reading => {\n+        match self.try_borrow() {\n+            Ok(borrow) => {\n                 f.debug_struct(\"RefCell\")\n-                    .field(\"value\", &self.borrow())\n+                    .field(\"value\", &borrow)\n                     .finish()\n             }\n-            BorrowState::Writing => {\n+            Err(_) => {\n                 f.debug_struct(\"RefCell\")\n                     .field(\"value\", &\"<borrowed>\")\n                     .finish()"}, {"sha": "ec590d2bd06f89686011ee9a21990384cebce005", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -1696,12 +1696,11 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iter_max_by)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_max_by\", issue=\"36105\")]\n+    #[stable(feature = \"iter_max_by\", since = \"1.15.0\")]\n     fn max_by<F>(self, mut compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {\n@@ -1746,12 +1745,11 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iter_min_by)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_min_by\", issue=\"36105\")]\n+    #[stable(feature = \"iter_min_by\", since = \"1.15.0\")]\n     fn min_by<F>(self, mut compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {"}, {"sha": "198db0e7c0aac46f6642960da8dbf22c1b1c4a84", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -203,7 +203,6 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bool = AtomicBool::new(true);\n@@ -212,7 +211,7 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.load(Ordering::SeqCst), false);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn get_mut(&mut self) -> &mut bool {\n         unsafe { &mut *(self.v.get() as *mut bool) }\n     }\n@@ -225,14 +224,13 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::AtomicBool;\n     ///\n     /// let some_bool = AtomicBool::new(true);\n     /// assert_eq!(some_bool.into_inner(), true);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> bool {\n         unsafe { self.v.into_inner() != 0 }\n     }\n@@ -588,15 +586,14 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let mut atomic_ptr = AtomicPtr::new(&mut 10);\n     /// *atomic_ptr.get_mut() = &mut 5;\n     /// assert_eq!(unsafe { *atomic_ptr.load(Ordering::SeqCst) }, 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn get_mut(&mut self) -> &mut *mut T {\n         unsafe { &mut *self.p.get() }\n     }\n@@ -609,14 +606,13 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::AtomicPtr;\n     ///\n     /// let atomic_ptr = AtomicPtr::new(&mut 5);\n     /// assert_eq!(unsafe { *atomic_ptr.into_inner() }, 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> *mut T {\n         unsafe { self.p.into_inner() }\n     }\n@@ -883,7 +879,6 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_access)]\n             /// use std::sync::atomic::{AtomicIsize, Ordering};\n             ///\n             /// let mut some_isize = AtomicIsize::new(10);\n@@ -905,7 +900,6 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_access)]\n             /// use std::sync::atomic::AtomicIsize;\n             ///\n             /// let some_isize = AtomicIsize::new(5);\n@@ -1261,15 +1255,15 @@ atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n-    unstable(feature = \"atomic_access\", issue = \"35603\"),\n+    stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n-    unstable(feature = \"atomic_access\", issue = \"35603\"),\n+    stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}, {"sha": "724a312ea79e0a7427df2856805485c8cc146802", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -59,22 +59,22 @@ fn double_imm_borrow() {\n fn no_mut_then_imm_borrow() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow_mut();\n-    assert_eq!(x.borrow_state(), BorrowState::Writing);\n+    assert!(x.try_borrow().is_err());\n }\n \n #[test]\n fn no_imm_then_borrow_mut() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow();\n-    assert_eq!(x.borrow_state(), BorrowState::Reading);\n+    assert!(x.try_borrow_mut().is_err());\n }\n \n #[test]\n fn no_double_borrow_mut() {\n     let x = RefCell::new(0);\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n     let _b1 = x.borrow_mut();\n-    assert_eq!(x.borrow_state(), BorrowState::Writing);\n+    assert!(x.try_borrow().is_err());\n }\n \n #[test]\n@@ -102,7 +102,8 @@ fn double_borrow_single_release_no_borrow_mut() {\n     {\n         let _b2 = x.borrow();\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Reading);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_err());\n }\n \n #[test]\n@@ -119,30 +120,38 @@ fn ref_clone_updates_flag() {\n     let x = RefCell::new(0);\n     {\n         let b1 = x.borrow();\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n         {\n             let _b2 = Ref::clone(&b1);\n-            assert_eq!(x.borrow_state(), BorrowState::Reading);\n+            assert!(x.try_borrow().is_ok());\n+            assert!(x.try_borrow_mut().is_err());\n         }\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_ok());\n }\n \n #[test]\n fn ref_map_does_not_update_flag() {\n     let x = RefCell::new(Some(5));\n     {\n         let b1: Ref<Option<u32>> = x.borrow();\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n         {\n             let b2: Ref<u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n             assert_eq!(*b2, 5);\n-            assert_eq!(x.borrow_state(), BorrowState::Reading);\n+            assert!(x.try_borrow().is_ok());\n+            assert!(x.try_borrow_mut().is_err());\n         }\n-        assert_eq!(x.borrow_state(), BorrowState::Unused);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_ok());\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_ok());\n }\n \n #[test]\n@@ -247,5 +256,3 @@ fn refcell_ref_coercion() {\n         assert_eq!(&*coerced, comp);\n     }\n }\n-\n-"}, {"sha": "d12616a97a647dbc6dba8a5780dfe0efba575ac3", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -10,9 +10,7 @@\n \n #![deny(warnings)]\n \n-#![feature(borrow_state)]\n #![feature(box_syntax)]\n-#![feature(cell_extras)]\n #![feature(char_escape_debug)]\n #![feature(const_fn)]\n #![feature(core_private_bignum)]\n@@ -32,8 +30,6 @@\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(iter_max_by)]\n-#![feature(iter_min_by)]\n #![feature(ordering_chaining)]\n #![feature(result_unwrap_or_default)]\n #![feature(ptr_unaligned)]"}, {"sha": "5d4190a8ae1a35bd76d35bab0e7641897ba25e5b", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -27,7 +27,7 @@\n //! created.  See `./README.md` for details.\n \n use hir::def_id::DefId;\n-use std::cell::{BorrowState, RefCell};\n+use std::cell::RefCell;\n use std::env;\n \n use super::DepNode;\n@@ -71,15 +71,11 @@ impl ShadowGraph {\n \n     pub fn enqueue(&self, message: &DepMessage) {\n         if ENABLED {\n-            match self.stack.borrow_state() {\n-                BorrowState::Unused => {}\n-                _ => {\n-                    // When we apply edge filters, that invokes the\n-                    // Debug trait on DefIds, which in turn reads from\n-                    // various bits of state and creates reads! Ignore\n-                    // those recursive reads.\n-                    return;\n-                }\n+            if self.stack.try_borrow().is_err() {\n+                // When we apply edge filters, that invokes the Debug trait on\n+                // DefIds, which in turn reads from various bits of state and\n+                // creates reads! Ignore those recursive reads.\n+                return;\n             }\n \n             let mut stack = self.stack.borrow_mut();"}, {"sha": "17cc34fcd839414b36e8445bbf91d2dac34515c1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -24,7 +24,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "509ee704e2ea2551da9a0894250ed24f40657dc9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -18,7 +18,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "890891fd090183b5a7225f5d1462d2ee824cf4b6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -144,11 +144,9 @@ impl<'a> Resolver<'a> {\n                                   -> Result<&'a NameBinding<'a>, Determinacy> {\n         self.populate_module_if_necessary(module);\n \n-        let resolution = self.resolution(module, name, ns);\n-        let resolution = match resolution.borrow_state() {\n-            ::std::cell::BorrowState::Unused => resolution.borrow_mut(),\n-            _ => return Err(Determined), // This happens when there is a cycle of imports\n-        };\n+        let resolution = self.resolution(module, name, ns)\n+            .try_borrow_mut()\n+            .map_err(|_| Determined)?; // This happens when there is a cycle of imports\n \n         if let Some(span) = record_used {\n             if let Some(binding) = resolution.binding {"}, {"sha": "d842827b6feadc70654b9fd3e34f9d3a16ab4c71", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -26,7 +26,6 @@\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(cell_extras)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]"}, {"sha": "b07da0dc268c481f5ef73a11d6a2d817f64165da", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -1526,8 +1526,6 @@ impl<T> Take<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(io_take_into_inner)]\n-    ///\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n@@ -1543,7 +1541,7 @@ impl<T> Take<T> {\n     /// # Ok(())\n     /// # }\n     /// ```\n-    #[unstable(feature = \"io_take_into_inner\", issue = \"23755\")]\n+    #[stable(feature = \"io_take_into_inner\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> T {\n         self.inner\n     }"}, {"sha": "1a65bee13b8fb63188c877bf5a72d764366c66aa", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -10,7 +10,7 @@\n \n use io::prelude::*;\n \n-use cell::{RefCell, BorrowState};\n+use cell::RefCell;\n use fmt;\n use io::lazy::Lazy;\n use io::{self, BufReader, LineWriter};\n@@ -638,8 +638,8 @@ pub fn _print(args: fmt::Arguments) {\n         LocalKeyState::Destroyed => stdout().write_fmt(args),\n         LocalKeyState::Valid => {\n             LOCAL_STDOUT.with(|s| {\n-                if s.borrow_state() == BorrowState::Unused {\n-                    if let Some(w) = s.borrow_mut().as_mut() {\n+                if let Ok(mut borrowed) = s.try_borrow_mut() {\n+                    if let Some(w) = borrowed.as_mut() {\n                         return w.write_fmt(args);\n                     }\n                 }"}, {"sha": "63745388eb67b0d771e62412a2e88bb9161e9095", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -316,7 +316,7 @@ pub struct Iter<'a, T: 'a> {\n ///\n /// This Iterator will never block the caller in order to wait for data to\n /// become available. Instead, it will return `None`.\n-#[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+#[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n pub struct TryIter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n@@ -1008,7 +1008,7 @@ impl<T> Receiver<T> {\n     /// It will return `None` if there are no more pending values or if the\n     /// channel has hung up. The iterator will never `panic!` or block the\n     /// user by waiting for values.\n-    #[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+    #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n     pub fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }\n     }\n@@ -1108,7 +1108,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n-#[unstable(feature = \"receiver_try_iter\", issue = \"34931\")]\n+#[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n impl<'a, T> Iterator for TryIter<'a, T> {\n     type Item = T;\n "}, {"sha": "c59524974bf2f80d6e897bdf68950cdbe916a8f9", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -56,7 +56,7 @@ pub trait CommandExt {\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n-    #[unstable(feature = \"process_exec\", issue = \"31398\")]\n+    #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n "}, {"sha": "900f463fa83a48fa5863fdfbf72aa05eb067557e", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -21,7 +21,7 @@ use sys_common::{FromInner, AsInner, AsInnerMut};\n use sys::platform::fs::MetadataExt as UnixMetadataExt;\n \n /// Unix-specific extensions to `File`\n-#[unstable(feature = \"file_offset\", issue = \"35918\")]\n+#[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n     ///\n@@ -34,7 +34,7 @@ pub trait FileExt {\n     ///\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read.\n-    #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n     /// Writes a number of bytes starting from a given offset.\n@@ -51,11 +51,11 @@ pub trait FileExt {\n     ///\n     /// Note that similar to `File::write`, it is not an error to return a\n     /// short write.\n-    #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n }\n \n-#[unstable(feature = \"file_offset\", issue = \"35918\")]\n+#[stable(feature = \"file_offset\", since = \"1.15.0\")]\n impl FileExt for fs::File {\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().read_at(buf, offset)"}, {"sha": "1be9f11b92c73a55230fa0b7d71ca79b72498eac", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -50,7 +50,7 @@ pub mod prelude {\n     pub use super::fs::{PermissionsExt, OpenOptionsExt, MetadataExt, FileTypeExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::DirEntryExt;\n-    #[doc(no_inline)] #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[doc(no_inline)] #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     pub use super::fs::FileExt;\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::thread::JoinHandleExt;"}, {"sha": "585dcbb9a34a1e2330ae5f9450f1128d9fc93df2", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -56,7 +56,7 @@ pub trait CommandExt {\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n-    #[unstable(feature = \"process_exec\", issue = \"31398\")]\n+    #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n "}, {"sha": "7fc04ad69d648f101d098e4168f48fae1d79bd37", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -19,7 +19,7 @@ use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n /// Windows-specific extensions to `File`\n-#[unstable(feature = \"file_offset\", issue = \"35918\")]\n+#[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n     ///\n@@ -35,7 +35,7 @@ pub trait FileExt {\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is\n     /// still updated.\n-    #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n     /// Seeks to a given position and writes a number of bytes.\n@@ -52,11 +52,11 @@ pub trait FileExt {\n     /// Note that similar to `File::write`, it is not an error to return a\n     /// short write. When returning from such a short write, the file pointer\n     /// is still updated.\n-    #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n }\n \n-#[unstable(feature = \"file_offset\", issue = \"35918\")]\n+#[stable(feature = \"file_offset\", since = \"1.15.0\")]\n impl FileExt for fs::File {\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().read_at(buf, offset)"}, {"sha": "f12e50cc92317d80496a67ecb3bd03fddc2f8a11", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -36,6 +36,6 @@ pub mod prelude {\n     pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{OpenOptionsExt, MetadataExt};\n-    #[doc(no_inline)] #[unstable(feature = \"file_offset\", issue = \"35918\")]\n+    #[doc(no_inline)] #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     pub use super::fs::FileExt;\n }"}, {"sha": "53dafadb5d568225c1d742b9c3928ad4fb4cc41c", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -448,8 +448,6 @@ impl char {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n-    ///\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -462,7 +460,6 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n@@ -474,9 +471,7 @@ impl char {\n     ///\n     /// assert!(result.is_err());\n     /// ```\n-    #[unstable(feature = \"unicode\",\n-               reason = \"pending decision about Iterator/Writer/Reader\",\n-               issue = \"27784\")]\n+    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n         C::encode_utf8(self, dst)\n@@ -495,8 +490,6 @@ impl char {\n     /// In both of these examples, '\ud835\udd4a' takes two `u16`s to encode.\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n-    ///\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\ud835\udd4a'.encode_utf16(&mut b);\n@@ -507,7 +500,6 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n@@ -519,9 +511,7 @@ impl char {\n     ///\n     /// assert!(result.is_err());\n     /// ```\n-    #[unstable(feature = \"unicode\",\n-               reason = \"pending decision about Iterator/Writer/Reader\",\n-               issue = \"27784\")]\n+    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n         C::encode_utf16(self, dst)"}, {"sha": "11724e74cdaece36d52482db16f3f9074836f8f2", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "patch": "@@ -39,7 +39,6 @@\n #![feature(lang_items)]\n #![feature(staged_api)]\n #![feature(try_from)]\n-#![feature(unicode)]\n \n mod tables;\n mod u_str;"}]}