{"sha": "79c0db4cc845d6fc995aa3bbc320d89dadd55403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzBkYjRjYzg0NWQ2ZmM5OTVhYTNiYmMzMjBkODlkYWRkNTU0MDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-25T16:36:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-25T16:36:44Z"}, "message": "Clean up some uses of logging in ui tests", "tree": {"sha": "bd16da42b02541b90f6ad90c7a2e3fde59b7d36d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd16da42b02541b90f6ad90c7a2e3fde59b7d36d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c0db4cc845d6fc995aa3bbc320d89dadd55403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c0db4cc845d6fc995aa3bbc320d89dadd55403", "html_url": "https://github.com/rust-lang/rust/commit/79c0db4cc845d6fc995aa3bbc320d89dadd55403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c0db4cc845d6fc995aa3bbc320d89dadd55403/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73ca84dfa1388dc8628ecb5e28bc8433fbc8b727", "url": "https://api.github.com/repos/rust-lang/rust/commits/73ca84dfa1388dc8628ecb5e28bc8433fbc8b727", "html_url": "https://github.com/rust-lang/rust/commit/73ca84dfa1388dc8628ecb5e28bc8433fbc8b727"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "56ec629c61360532c7ce65445b9094745acdbe4f", "filename": "src/test/ui/issues/issue-18075.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs?ref=79c0db4cc845d6fc995aa3bbc320d89dadd55403", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// exec-env:RUSTC_LOG=rustc::middle=debug\n+// rustc-env:RUSTC_LOG=rustc::middle=debug\n \n fn main() {\n     let b = 1isize;"}, {"sha": "6d16819ceb0f0624980167819513982b378a99ac", "filename": "src/test/ui/logging-only-prints-once.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flogging-only-prints-once.rs?ref=79c0db4cc845d6fc995aa3bbc320d89dadd55403", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // ignore-windows\n // ignore-emscripten no threads support\n-// exec-env:RUSTC_LOG=debug\n \n use std::cell::Cell;\n use std::fmt;\n@@ -19,10 +18,13 @@ impl fmt::Debug for Foo {\n }\n \n pub fn main() {\n-    thread::spawn(move|| {\n+    thread::spawn(move || {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{:?}\", f);\n         let Foo(ref mut f) = f;\n         assert_eq!(f.get(), 1);\n-    }).join().ok().unwrap();\n+    })\n+    .join()\n+    .ok()\n+    .unwrap();\n }"}, {"sha": "540d2b4f58a90f175d9bfe700aa93843a10c5be7", "filename": "src/test/ui/logging_before_rt_started.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73ca84dfa1388dc8628ecb5e28bc8433fbc8b727/src%2Ftest%2Fui%2Flogging_before_rt_started.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ca84dfa1388dc8628ecb5e28bc8433fbc8b727/src%2Ftest%2Fui%2Flogging_before_rt_started.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flogging_before_rt_started.rs?ref=73ca84dfa1388dc8628ecb5e28bc8433fbc8b727", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-// exec-env:RUSTC_LOG=std::ptr\n-\n-// In issue #9487, it was realized that std::ptr was invoking the logging\n-// infrastructure, and when std::ptr was used during runtime initialization,\n-// this caused some serious problems. The problems have since been fixed, but\n-// this test will trigger \"output during runtime initialization\" to make sure\n-// that the bug isn't re-introduced.\n-\n-// pretty-expanded FIXME #23616\n-\n-pub fn main() {}"}, {"sha": "9d3487ffb29566685bb24f06c43eeac9c9d6db57", "filename": "src/test/ui/threads-sendsync/spawning-with-debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs?ref=79c0db4cc845d6fc995aa3bbc320d89dadd55403", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_must_use)]\n #![allow(unused_mut)]\n // ignore-windows\n-// exec-env:RUSTC_LOG=debug\n+// exec-env:RUST_LOG=debug\n // ignore-emscripten no threads support\n \n // regression test for issue #10405, make sure we don't call println! too soon.\n@@ -11,5 +11,5 @@ use std::thread::Builder;\n \n pub fn main() {\n     let mut t = Builder::new();\n-    t.spawn(move|| ());\n+    t.spawn(move || ());\n }"}, {"sha": "653e1f13c4b486f8d10176096d134a662cb6f726", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c0db4cc845d6fc995aa3bbc320d89dadd55403/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=79c0db4cc845d6fc995aa3bbc320d89dadd55403", "patch": "@@ -623,7 +623,7 @@ impl<'test> TestCx<'test> {\n             .arg(\"-L\")\n             .arg(&aux_dir)\n             .args(&self.props.compile_flags)\n-            .envs(self.props.exec_env.clone());\n+            .envs(self.props.rustc_env.clone());\n         self.maybe_add_external_args(\n             &mut rustc,\n             self.split_maybe_args(&self.config.target_rustcflags),"}]}