{"sha": "c84f2b27d3a72526bce7ff89c7be741d2daef123", "node_id": "C_kwDOAAsO6NoAKGM4NGYyYjI3ZDNhNzI1MjZiY2U3ZmY4OWM3YmU3NDFkMmRhZWYxMjM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-12T00:23:19Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-12T01:03:45Z"}, "message": "Remove some unnecessary uses of `FieldDef::ident`", "tree": {"sha": "e776f575a8bb9f3d4afdc4ade6fb3f51ceb3dc1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e776f575a8bb9f3d4afdc4ade6fb3f51ceb3dc1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84f2b27d3a72526bce7ff89c7be741d2daef123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84f2b27d3a72526bce7ff89c7be741d2daef123", "html_url": "https://github.com/rust-lang/rust/commit/c84f2b27d3a72526bce7ff89c7be741d2daef123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84f2b27d3a72526bce7ff89c7be741d2daef123/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e74d7b9cf1a7901650227e74650f1fcc797600", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e74d7b9cf1a7901650227e74650f1fcc797600", "html_url": "https://github.com/rust-lang/rust/commit/72e74d7b9cf1a7901650227e74650f1fcc797600"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "fb055bb2244086bd66e0025c3a35f09a53c617ee", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84f2b27d3a72526bce7ff89c7be741d2daef123/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84f2b27d3a72526bce7ff89c7be741d2daef123/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c84f2b27d3a72526bce7ff89c7be741d2daef123", "patch": "@@ -398,8 +398,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n                 match tcx.type_of(did).kind() {\n                     ty::Adt(def, _) if def.is_enum() => {\n-                        if let Some(field) =\n-                            def.all_fields().find(|f| f.ident(tcx).name == variant_field_name)\n+                        if let Some(field) = def.all_fields().find(|f| f.name == variant_field_name)\n                         {\n                             Ok((ty_res, Some(ItemFragment(FragmentKind::VariantField, field.did))))\n                         } else {\n@@ -770,11 +769,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,\n                 };\n-                let field = def\n-                    .non_enum_variant()\n-                    .fields\n-                    .iter()\n-                    .find(|item| item.ident(tcx).name == item_name)?;\n+                let field =\n+                    def.non_enum_variant().fields.iter().find(|item| item.name == item_name)?;\n                 Some((root_res, ItemFragment(FragmentKind::StructField, field.did)))\n             }\n             Res::Def(DefKind::Trait, did) => tcx"}]}