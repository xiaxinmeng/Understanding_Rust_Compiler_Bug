{"sha": "c40b0895f09777be72bb6e875c1c0aefb9ccf316", "node_id": "C_kwDOAAsO6NoAKGM0MGIwODk1ZjA5Nzc3YmU3MmJiNmU4NzVjMWMwYWVmYjljY2YzMTY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-01T10:04:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-01T10:04:20Z"}, "message": "Implement proc-macro-api versioning", "tree": {"sha": "beabeb3df9ec7373ab45bcf4c94f91c753d79eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beabeb3df9ec7373ab45bcf4c94f91c753d79eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40b0895f09777be72bb6e875c1c0aefb9ccf316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40b0895f09777be72bb6e875c1c0aefb9ccf316", "html_url": "https://github.com/rust-lang/rust/commit/c40b0895f09777be72bb6e875c1c0aefb9ccf316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40b0895f09777be72bb6e875c1c0aefb9ccf316/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a46a78f2410653a7c38ce240c439993b97be61", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a46a78f2410653a7c38ce240c439993b97be61", "html_url": "https://github.com/rust-lang/rust/commit/41a46a78f2410653a7c38ce240c439993b97be61"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "3f5e8a5e80b9ae3f09887a67b035a6ba26e32678", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=c40b0895f09777be72bb6e875c1c0aefb9ccf316", "patch": "@@ -115,7 +115,7 @@ impl ProcMacroServer {\n     /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn spawn(\n         process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n     ) -> io::Result<ProcMacroServer> {\n         let process = ProcMacroProcessSrv::run(process_path, args)?;\n         Ok(ProcMacroServer { process: Arc::new(Mutex::new(process)) })\n@@ -174,7 +174,7 @@ impl ProcMacro {\n         let response = self.process.lock().unwrap_or_else(|e| e.into_inner()).send_task(request)?;\n         match response {\n             msg::Response::ExpandMacro(it) => Ok(it.map(FlatTree::to_subtree)),\n-            msg::Response::ListMacros { .. } => {\n+            msg::Response::ListMacros(..) | msg::Response::ApiVersionCheck(..) => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }\n         }"}, {"sha": "262483d2cbee66f0ca777f178d910910ed9be511", "filename": "crates/proc-macro-api/src/msg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs?ref=c40b0895f09777be72bb6e875c1c0aefb9ccf316", "patch": "@@ -12,16 +12,21 @@ use crate::ProcMacroKind;\n \n pub use crate::msg::flat::FlatTree;\n \n+pub const NO_VERSION_CHECK_VERSION: u32 = 0;\n+pub const API_VERSION: u32 = 1;\n+\n #[derive(Debug, Serialize, Deserialize)]\n pub enum Request {\n     ListMacros { dylib_path: PathBuf },\n     ExpandMacro(ExpandMacro),\n+    ApiVersionCheck {},\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n pub enum Response {\n     ListMacros(Result<Vec<(String, ProcMacroKind)>, String>),\n     ExpandMacro(Result<FlatTree, PanicMessage>),\n+    ApiVersionCheck(u32),\n }\n \n #[derive(Debug, Serialize, Deserialize)]"}, {"sha": "da4527c64f24ef8bbf03d86293419110e24e39b9", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=c40b0895f09777be72bb6e875c1c0aefb9ccf316", "patch": "@@ -19,19 +19,45 @@ pub(crate) struct ProcMacroProcessSrv {\n     _process: Process,\n     stdin: ChildStdin,\n     stdout: BufReader<ChildStdout>,\n+    version: u32,\n }\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n         process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n     ) -> io::Result<ProcMacroProcessSrv> {\n-        let mut process = Process::run(process_path, args)?;\n-        let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+        let create_srv = || {\n+            let mut process = Process::run(process_path.clone(), args.clone())?;\n+            let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+\n+            io::Result::Ok(ProcMacroProcessSrv { _process: process, stdin, stdout, version: 0 })\n+        };\n+        let mut srv = create_srv()?;\n+        tracing::info!(\"sending version check\");\n+        match srv.version_check() {\n+            Ok(v) => {\n+                tracing::info!(\"got version {v}\");\n+                srv.version = v;\n+                Ok(srv)\n+            }\n+            Err(e) => {\n+                tracing::info!(%e, \"proc-macro version check failed, restarting and assuming version 0\");\n+                create_srv()\n+            }\n+        }\n+    }\n \n-        let srv = ProcMacroProcessSrv { _process: process, stdin, stdout };\n+    pub(crate) fn version_check(&mut self) -> Result<u32, ServerError> {\n+        let request = Request::ApiVersionCheck {};\n+        let response = self.send_task(request)?;\n \n-        Ok(srv)\n+        match response {\n+            Response::ApiVersionCheck(version) => Ok(version),\n+            Response::ExpandMacro { .. } | Response::ListMacros { .. } => {\n+                Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n+            }\n+        }\n     }\n \n     pub(crate) fn find_proc_macros(\n@@ -44,7 +70,7 @@ impl ProcMacroProcessSrv {\n \n         match response {\n             Response::ListMacros(it) => Ok(it),\n-            Response::ExpandMacro { .. } => {\n+            Response::ExpandMacro { .. } | Response::ApiVersionCheck { .. } => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }\n         }"}, {"sha": "eaf94714dd791b5d0c59ea876abba14839d7dd9d", "filename": "crates/proc-macro-srv/src/cli.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40b0895f09777be72bb6e875c1c0aefb9ccf316/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs?ref=c40b0895f09777be72bb6e875c1c0aefb9ccf316", "patch": "@@ -15,6 +15,9 @@ pub fn run() -> io::Result<()> {\n                 msg::Response::ListMacros(srv.list_macros(&dylib_path))\n             }\n             msg::Request::ExpandMacro(task) => msg::Response::ExpandMacro(srv.expand(task)),\n+            msg::Request::ApiVersionCheck {} => {\n+                msg::Response::ApiVersionCheck(proc_macro_api::msg::API_VERSION)\n+            }\n         };\n         write_response(res)?\n     }"}]}