{"sha": "1825810a898842b4660fd684cea66906b7e32500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjU4MTBhODk4ODQyYjQ2NjBmZDY4NGNlYTY2OTA2YjdlMzI1MDA=", "commit": {"author": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-02-16T17:48:42Z"}, "committer": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-02-16T17:48:42Z"}, "message": "Vec::dedup optimization", "tree": {"sha": "ecd6044ec1d9fe0e17c1f23b9fc855e94316c903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd6044ec1d9fe0e17c1f23b9fc855e94316c903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1825810a898842b4660fd684cea66906b7e32500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1825810a898842b4660fd684cea66906b7e32500", "html_url": "https://github.com/rust-lang/rust/commit/1825810a898842b4660fd684cea66906b7e32500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1825810a898842b4660fd684cea66906b7e32500/comments", "author": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c47c79fe8438ed241630f885797eebef3a6cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c47c79fe8438ed241630f885797eebef3a6cab", "html_url": "https://github.com/rust-lang/rust/commit/f1c47c79fe8438ed241630f885797eebef3a6cab"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "88f9f624aba2dfb721446936b42f7d26e730f073", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1825810a898842b4660fd684cea66906b7e32500/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1825810a898842b4660fd684cea66906b7e32500/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1825810a898842b4660fd684cea66906b7e32500", "patch": "@@ -1514,15 +1514,53 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n     /// ```\n     #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n-    pub fn dedup_by<F>(&mut self, same_bucket: F)\n+    pub fn dedup_by<F>(&mut self, mut same_bucket: F)\n     where\n         F: FnMut(&mut T, &mut T) -> bool,\n     {\n-        let len = {\n-            let (dedup, _) = self.as_mut_slice().partition_dedup_by(same_bucket);\n-            dedup.len()\n-        };\n-        self.truncate(len);\n+        let len = self.len();\n+        if len <= 1 {\n+            return;\n+        }\n+\n+        let ptr = self.as_mut_ptr();\n+        /* Offset of the element we want to check if it is duplicate */\n+        let mut read: usize = 1;\n+        /* Offset of the place where we want to place the non-duplicate\n+         * when we find it. */\n+        let mut write: usize = 1;\n+\n+        /* Drop items while going through Vec, it should be more efficient than\n+         * doing slice partition_dedup + truncate */\n+\n+        /* INVARIANT: len > read >= write > write-1 >= 0\n+         * SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr\n+         * are always in-bounds and read_ptr never aliases prev_ptr */\n+        unsafe {\n+            while read < len {\n+                let read_ptr = ptr.add(read);\n+                let prev_ptr = ptr.add(write.wrapping_sub(1));\n+\n+                if same_bucket(&mut *read_ptr, &mut *prev_ptr) {\n+                    /* We have found duplicate, drop it in-place */\n+                    ptr::drop_in_place(read_ptr);\n+                } else {\n+                    let write_ptr = ptr.add(write);\n+\n+                    /* Looks like doing just `copy` can be faster than\n+                     * conditional `copy_nonoverlapping` */\n+                    ptr::copy(read_ptr, write_ptr, 1);\n+\n+                    /* We have filled that place, so go further */\n+                    write += 1;\n+                }\n+\n+                read += 1;\n+            }\n+\n+            /* `write` items are inside vec, rest is already dropped */\n+            self.set_len(write);\n+        }\n     }\n \n     /// Appends an element to the back of a collection."}]}