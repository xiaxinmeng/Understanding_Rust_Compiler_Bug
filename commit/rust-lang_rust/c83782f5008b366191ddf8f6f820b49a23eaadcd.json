{"sha": "c83782f5008b366191ddf8f6f820b49a23eaadcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Mzc4MmY1MDA4YjM2NjE5MWRkZjhmNmY4MjBiNDlhMjNlYWFkY2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T23:01:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T23:01:47Z"}, "message": "rustc: Migrate core AST types to interior vectors", "tree": {"sha": "75edb34aaaba74ce7b63c6ff397445d0fcd231bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75edb34aaaba74ce7b63c6ff397445d0fcd231bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83782f5008b366191ddf8f6f820b49a23eaadcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83782f5008b366191ddf8f6f820b49a23eaadcd", "html_url": "https://github.com/rust-lang/rust/commit/c83782f5008b366191ddf8f6f820b49a23eaadcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83782f5008b366191ddf8f6f820b49a23eaadcd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad0bcc8d5e1ed9cf6ca0eedae21b3aa0c67ab16", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad0bcc8d5e1ed9cf6ca0eedae21b3aa0c67ab16", "html_url": "https://github.com/rust-lang/rust/commit/aad0bcc8d5e1ed9cf6ca0eedae21b3aa0c67ab16"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "0099535651deff1d0478405550283053142effb6", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=c83782f5008b366191ddf8f6f820b49a23eaadcd", "patch": "@@ -334,7 +334,7 @@ type ty_arg_ = rec(mode mode, @ty ty);\n type ty_method_ =\n     rec(proto proto,\n         ident ident,\n-        vec[ty_arg] inputs,\n+        ty_arg[] inputs,\n         @ty output,\n         controlflow cf,\n         vec[@constr] constrs);\n@@ -402,9 +402,9 @@ tag ty_ {\n     ty_port(@ty);\n     ty_chan(@ty);\n     ty_tup(mt[]);\n-    ty_rec(vec[ty_field]);\n-    ty_fn(proto, vec[ty_arg], @ty, controlflow, vec[@constr]);\n-    ty_obj(vec[ty_method]);\n+    ty_rec(ty_field[]);\n+    ty_fn(proto, ty_arg[], @ty, controlflow, vec[@constr]);\n+    ty_obj(ty_method[]);\n     ty_path(path, node_id);\n     ty_type;\n     ty_constr(@ty, vec[@constr]);"}, {"sha": "3abe4f5a6ed2e217dd9fcee3c7f132c6ff3d2a14", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c83782f5008b366191ddf8f6f820b49a23eaadcd", "patch": "@@ -258,8 +258,8 @@ fn parse_ty_fn(ast::proto proto, &parser p, uint lo) -> ast::ty_ {\n     }\n     auto lo = p.get_lo_pos();\n     auto inputs =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n-                  parse_fn_input_ty, p);\n+        parse_seq_ivec(token::LPAREN, token::RPAREN, some(token::COMMA),\n+                       parse_fn_input_ty, p);\n     auto constrs = parse_constrs([], p);\n     let @ast::ty output;\n     auto cf = ast::return;\n@@ -308,7 +308,7 @@ fn parse_ty_obj(&parser p, &mutable uint hi) -> ast::ty_ {\n         fail;\n     }\n     auto f = parse_method_sig;\n-    auto meths = parse_seq(token::LBRACE, token::RBRACE, none, f, p);\n+    auto meths = parse_seq_ivec(token::LBRACE, token::RBRACE, none, f, p);\n     hi = meths.span.hi;\n     ret ast::ty_obj(meths.node);\n }\n@@ -526,8 +526,8 @@ fn parse_ty(&parser p) -> @ast::ty {\n         t = ast::ty_tup(elems.node);\n     } else if (eat_word(p, \"rec\")) {\n         auto elems =\n-            parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n-                      parse_ty_field, p);\n+            parse_seq_ivec(token::LPAREN, token::RPAREN, some(token::COMMA),\n+                           parse_ty_field, p);\n         hi = elems.span.hi;\n         t = ast::ty_rec(elems.node);\n     } else if (eat_word(p, \"fn\")) {"}, {"sha": "c93e7631c1af570b601b41408e1ba054a47cce92", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83782f5008b366191ddf8f6f820b49a23eaadcd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=c83782f5008b366191ddf8f6f820b49a23eaadcd", "patch": "@@ -237,6 +237,26 @@ fn commasep_cmnt[IN](&ps s, breaks b, vec[IN] elts, fn(&ps, &IN)  op,\n     end(s);\n }\n \n+// TODO: Remove me.\n+fn commasep_cmnt_ivec[IN](&ps s, breaks b, &IN[] elts, fn(&ps, &IN)  op,\n+                          fn(&IN) -> codemap::span  get_span) {\n+    box(s, 0u, b);\n+    auto len = ivec::len[IN](elts);\n+    auto i = 0u;\n+    for (IN elt in elts) {\n+        maybe_print_comment(s, get_span(elt).hi);\n+        op(s, elt);\n+        i += 1u;\n+        if (i < len) {\n+            word(s.s, \",\");\n+            maybe_print_trailing_comment(s, get_span(elt),\n+                                         some(get_span(elts.(i)).hi));\n+            space_if_not_hardbreak(s);\n+        }\n+    }\n+    end(s);\n+}\n+\n fn commasep_exprs(&ps s, breaks b, vec[@ast::expr] exprs) {\n     fn expr_span(&@ast::expr expr) -> codemap::span { ret expr.span; }\n     commasep_cmnt(s, b, exprs, print_expr, expr_span);\n@@ -315,7 +335,7 @@ fn print_type(&ps s, &ast::ty ty) {\n                 end(s);\n             }\n             fn get_span(&ast::ty_field f) -> codemap::span { ret f.span; }\n-            commasep_cmnt(s, consistent, fields, print_field, get_span);\n+            commasep_cmnt_ivec(s, consistent, fields, print_field, get_span);\n             pclose(s);\n         }\n         case (ast::ty_fn(?proto, ?inputs, ?output, ?cf, ?constrs)) {\n@@ -1214,7 +1234,7 @@ fn print_mt(&ps s, &ast::mt mt) {\n }\n \n fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n-               &vec[ast::ty_arg] inputs, &@ast::ty output,\n+               &ast::ty_arg[] inputs, &@ast::ty output,\n                &ast::controlflow cf, &vec[@ast::constr] constrs) {\n     ibox(s, indent_unit);\n     if (proto == ast::proto_fn) {\n@@ -1230,7 +1250,7 @@ fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n         print_alias(s, input.node.mode);\n         print_type(s, *input.node.ty);\n     }\n-    commasep(s, inconsistent, inputs, print_arg);\n+    commasep_ivec(s, inconsistent, inputs, print_arg);\n     pclose(s);\n     maybe_print_comment(s, output.span.lo);\n     if (output.node != ast::ty_nil) {"}]}