{"sha": "0bfb61ed9d3c32989cea49c11e838229ddfb855e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZmI2MWVkOWQzYzMyOTg5Y2VhNDljMTFlODM4MjI5ZGRmYjg1NWU=", "commit": {"author": {"name": "zslayton", "email": "zack.slayton@gmail.com", "date": "2014-03-12T03:04:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-12T22:01:25Z"}, "message": "Closes #12829. Names changed for consistency, find_path optimized, method impls refactored to reduce repitition.\n\nFixed formatting, reworked find_path to use fewer Options.\n\nRemoved stray tab.", "tree": {"sha": "0e4c6799e6927ac317510314736b7bb7a40af420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4c6799e6927ac317510314736b7bb7a40af420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bfb61ed9d3c32989cea49c11e838229ddfb855e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bfb61ed9d3c32989cea49c11e838229ddfb855e", "html_url": "https://github.com/rust-lang/rust/commit/0bfb61ed9d3c32989cea49c11e838229ddfb855e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bfb61ed9d3c32989cea49c11e838229ddfb855e/comments", "author": {"login": "zslayton", "id": 611616, "node_id": "MDQ6VXNlcjYxMTYxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/611616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zslayton", "html_url": "https://github.com/zslayton", "followers_url": "https://api.github.com/users/zslayton/followers", "following_url": "https://api.github.com/users/zslayton/following{/other_user}", "gists_url": "https://api.github.com/users/zslayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/zslayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zslayton/subscriptions", "organizations_url": "https://api.github.com/users/zslayton/orgs", "repos_url": "https://api.github.com/users/zslayton/repos", "events_url": "https://api.github.com/users/zslayton/events{/privacy}", "received_events_url": "https://api.github.com/users/zslayton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28d5b7fb4ee11d29260b477b70ac32c25f61cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28d5b7fb4ee11d29260b477b70ac32c25f61cff", "html_url": "https://github.com/rust-lang/rust/commit/d28d5b7fb4ee11d29260b477b70ac32c25f61cff"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "6ce555ba9f74aade5af82959f5ce62f5393cc44d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0bfb61ed9d3c32989cea49c11e838229ddfb855e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfb61ed9d3c32989cea49c11e838229ddfb855e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0bfb61ed9d3c32989cea49c11e838229ddfb855e", "patch": "@@ -720,10 +720,17 @@ impl Json {\n     }\n \n     /// Attempts to get a nested Json Object for each key in `keys`.\n-    /// If any key is found not to exist, get_path will return None.\n+    /// If any key is found not to exist, find_path will return None.\n     /// Otherwise, it will return the Json value associated with the final key.\n     pub fn find_path<'a>(&'a self, keys: &[&~str]) -> Option<&'a Json>{\n-        keys.iter().fold(Some(self), |target, key| target.map_or(None, |t| t.find(*key)))\n+        let mut target = self;\n+        for key in keys.iter() {\n+            match target.find(*key) {\n+                Some(t) => { target = t; },\n+                None => return None\n+            }\n+        }\n+        Some(target)\n     }\n \n     /// If the Json value is an Object, performs a depth-first search until\n@@ -752,10 +759,7 @@ impl Json {\n \n     /// Returns true if the Json value is an Object. Returns false otherwise.\n     pub fn is_object<'a>(&'a self) -> bool {\n-        match self {\n-            &Object(_) => true,\n-            _ => false\n-        }\n+        self.as_object().is_some()\n     }\n \n     /// If the Json value is an Object, returns the associated TreeMap.\n@@ -769,10 +773,7 @@ impl Json {\n \n     /// Returns true if the Json value is a List. Returns false otherwise.\n     pub fn is_list<'a>(&'a self) -> bool {\n-        match self {\n-            &List(_) => true,\n-            _ => false\n-        }\n+        self.as_list().is_some()\n     }\n \n     /// If the Json value is a List, returns the associated vector.\n@@ -785,16 +786,13 @@ impl Json {\n     }\n \n     /// Returns true if the Json value is a String. Returns false otherwise.\n-    pub fn is_str<'a>(&'a self) -> bool {\n-        match self {\n-            &String(_) => true,\n-            _ => false\n-        }\n+    pub fn is_string<'a>(&'a self) -> bool {\n+        self.as_string().is_some()\n     }\n \n     /// If the Json value is a String, returns the associated str.\n     /// Returns None otherwise.\n-    pub fn as_str<'a>(&'a self) -> Option<&'a str> {\n+    pub fn as_string<'a>(&'a self) -> Option<&'a str> {\n         match *self {\n             String(ref s) => Some(s.as_slice()),\n             _ => None\n@@ -803,10 +801,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Number. Returns false otherwise.\n     pub fn is_number(&self) -> bool {\n-        match self {\n-            &Number(_) => true,\n-            _ => false\n-        }\n+        self.as_number().is_some()\n     }\n \n     /// If the Json value is a Number, returns the associated f64.\n@@ -820,10 +815,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Boolean. Returns false otherwise.\n     pub fn is_boolean(&self) -> bool {\n-        match self {\n-            &Boolean(_) => true,\n-            _ => false\n-        }\n+        self.as_boolean().is_some()\n     }\n \n     /// If the Json value is a Boolean, returns the associated bool.\n@@ -837,10 +829,7 @@ impl Json {\n \n     /// Returns true if the Json value is a Null. Returns false otherwise.\n     pub fn is_null(&self) -> bool {\n-        match self {\n-            &Null => true,\n-            _ => false\n-        }\n+        self.as_null().is_some()\n     }\n \n     /// If the Json value is a Null, returns ().\n@@ -2430,20 +2419,20 @@ mod tests {\n     fn test_find(){\n         let json_value = from_str(\"{\\\"dog\\\" : \\\"cat\\\"}\").unwrap();\n         let found_str = json_value.find(&~\"dog\");\n-        assert!(found_str.is_some() && found_str.unwrap().as_str().unwrap() == &\"cat\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cat\");\n     }\n \n     #[test]\n     fn test_find_path(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.find_path(&[&~\"dog\", &~\"cat\", &~\"mouse\"]);\n-        assert!(found_str.is_some() && found_str.unwrap().as_str().unwrap() == &\"cheese\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cheese\");\n     }\n \n     #[test]\n     fn test_search(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n-        let found_str = json_value.search(&~\"mouse\").and_then(|j| j.as_str());\n+        let found_str = json_value.search(&~\"mouse\").and_then(|j| j.as_string());\n         assert!(found_str.is_some());\n         assert!(found_str.unwrap() == &\"cheese\");\n     }\n@@ -2476,15 +2465,15 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_is_str(){\n+    fn test_is_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n-        assert!(json_value.is_str());\n+        assert!(json_value.is_string());\n     }\n \n     #[test]\n-    fn test_as_str(){\n+    fn test_as_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n-        let json_str = json_value.as_str();\n+        let json_str = json_value.as_string();\n         let expected_str = &\"dog\";\n         assert_eq!(json_str, Some(expected_str));\n     }"}]}