{"sha": "2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOWYxZjhjMDJmOGViODdjZWJlNzVjNmZiODQxM2FlNzkxMjNjMzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T21:41:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T21:41:34Z"}, "message": "`lower_pattern_unadjusted`: extract common `ty::Error` code.", "tree": {"sha": "eca8a86d603014dbd976ddfe72b3927247121123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca8a86d603014dbd976ddfe72b3927247121123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31", "html_url": "https://github.com/rust-lang/rust/commit/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceaec1da06009716f1953d50f73d6cb49c06fb32", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaec1da06009716f1953d50f73d6cb49c06fb32", "html_url": "https://github.com/rust-lang/rust/commit/ceaec1da06009716f1953d50f73d6cb49c06fb32"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "8517e2e6fb33679eae38d43e171c4a17b5192b9c", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=2a9f1f8c02f8eb87cebe75c6fb8413ae79123c31", "patch": "@@ -445,6 +445,11 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat) -> Pat<'tcx> {\n         let mut ty = self.tables.node_type(pat.hir_id);\n \n+        if let ty::Error = ty.kind {\n+            // Avoid ICEs (e.g., #50577 and #50585).\n+            return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n+        }\n+\n         let kind = match pat.kind {\n             hir::PatKind::Wild => PatKind::Wild,\n \n@@ -548,8 +553,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     ty::Slice(..) |\n                     ty::Array(..) =>\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),\n-                    // Avoid ICE\n-                    ty::Error => return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) },\n                     _ => span_bug!(\n                         pat.span,\n                         \"unexpanded type for vector pattern: {:?}\",\n@@ -572,19 +575,12 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n                         PatKind::Leaf { subpatterns }\n                     }\n-                    ty::Error => { // Avoid ICE (#50577)\n-                        return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n-                    }\n                     _ => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", ty),\n                 }\n             }\n \n             hir::PatKind::Binding(_, id, ident, ref sub) => {\n                 let var_ty = self.tables.node_type(pat.hir_id);\n-                if let ty::Error = var_ty.kind {\n-                    // Avoid ICE\n-                    return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n-                };\n                 let bm = *self.tables.pat_binding_modes().get(pat.hir_id)\n                                                          .expect(\"missing binding mode\");\n                 let (mutability, mode) = match bm {\n@@ -624,9 +620,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let res = self.tables.qpath_res(qpath, pat.hir_id);\n                 let adt_def = match ty.kind {\n                     ty::Adt(adt_def, _) => adt_def,\n-                    ty::Error => { // Avoid ICE (#50585)\n-                        return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n-                    }\n                     _ => span_bug!(pat.span,\n                                    \"tuple struct pattern not applied to an ADT {:?}\",\n                                    ty),"}]}