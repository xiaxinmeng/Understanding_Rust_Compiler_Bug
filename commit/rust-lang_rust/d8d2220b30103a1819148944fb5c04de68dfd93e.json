{"sha": "d8d2220b30103a1819148944fb5c04de68dfd93e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDIyMjBiMzAxMDNhMTgxOTE0ODk0NGZiNWMwNGRlNjhkZmQ5M2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-16T04:23:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-16T04:23:36Z"}, "message": "Typecheck object method calls.", "tree": {"sha": "04a49877d404ca0ca51fc34332da5e204de8104e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a49877d404ca0ca51fc34332da5e204de8104e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d2220b30103a1819148944fb5c04de68dfd93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2220b30103a1819148944fb5c04de68dfd93e", "html_url": "https://github.com/rust-lang/rust/commit/d8d2220b30103a1819148944fb5c04de68dfd93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2220b30103a1819148944fb5c04de68dfd93e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482dc0c8fa492bd533fb33a20d4cbb5677e73a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/482dc0c8fa492bd533fb33a20d4cbb5677e73a8a", "html_url": "https://github.com/rust-lang/rust/commit/482dc0c8fa492bd533fb33a20d4cbb5677e73a8a"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "bd12cf6f7e6f17e3c6f30145bd37794f6a243bb6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2220b30103a1819148944fb5c04de68dfd93e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2220b30103a1819148944fb5c04de68dfd93e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d8d2220b30103a1819148944fb5c04de68dfd93e", "patch": "@@ -673,6 +673,19 @@ fn field_idx(session.session sess, &span sp,\n     fail;\n }\n \n+fn method_idx(session.session sess, &span sp,\n+              &ast.ident id, vec[method] meths) -> uint {\n+    let uint i = 0u;\n+    for (method m in meths) {\n+        if (_str.eq(m.ident, id)) {\n+            ret i;\n+        }\n+        i += 1u;\n+    }\n+    sess.span_err(sp, \"unknown method '\" + id + \"' of obj\");\n+    fail;\n+}\n+\n fn is_lval(@ast.expr expr) -> bool {\n     alt (expr.node) {\n         case (ast.expr_field(_,_,_))    { ret true;  }\n@@ -1830,6 +1843,7 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n         }\n \n         case (ast.expr_call(?f, ?args, _)) {\n+\n             // Check the function.\n             auto f_0 = check_expr(fcx, f);\n \n@@ -1994,6 +2008,22 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                                                ann));\n                 }\n \n+                case (ty_obj(?methods)) {\n+                    let uint ix = method_idx(fcx.ccx.sess,\n+                                             expr.span, field, methods);\n+                    if (ix >= _vec.len[typeck.method](methods)) {\n+                        fcx.ccx.sess.span_err(expr.span,\n+                                              \"bad index on obj\");\n+                    }\n+                    auto meth = methods.(ix);\n+                    auto ty = plain_ty(ty_fn(meth.inputs, meth.output));\n+                    auto ann = ast.ann_type(ty);\n+                    ret @fold.respan[ast.expr_](expr.span,\n+                                                ast.expr_field(base_1,\n+                                                               field,\n+                                                               ann));\n+                }\n+\n                 case (_) {\n                     fcx.ccx.sess.unimpl(\"base type for expr_field \"\n                                         + \"in typeck.check_expr: \""}]}