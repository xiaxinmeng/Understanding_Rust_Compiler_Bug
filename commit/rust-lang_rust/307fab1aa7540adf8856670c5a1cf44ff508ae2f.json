{"sha": "307fab1aa7540adf8856670c5a1cf44ff508ae2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwN2ZhYjFhYTc1NDBhZGY4ODU2NjcwYzVhMWNmNDRmZjUwOGFlMmY=", "commit": {"author": {"name": "ray glover", "email": "ray@rayglover.net", "date": "2015-05-16T00:53:11Z"}, "committer": {"name": "ray glover", "email": "ray@rayglover.net", "date": "2015-05-16T00:53:11Z"}, "message": "fix to size_hint(); documentation for bit-twiddle;", "tree": {"sha": "231f0c34b9872b790d84242fdb2807ae830c8177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231f0c34b9872b790d84242fdb2807ae830c8177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/307fab1aa7540adf8856670c5a1cf44ff508ae2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/307fab1aa7540adf8856670c5a1cf44ff508ae2f", "html_url": "https://github.com/rust-lang/rust/commit/307fab1aa7540adf8856670c5a1cf44ff508ae2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/307fab1aa7540adf8856670c5a1cf44ff508ae2f/comments", "author": {"login": "rayglover-ibm", "id": 19191468, "node_id": "MDQ6VXNlcjE5MTkxNDY4", "avatar_url": "https://avatars.githubusercontent.com/u/19191468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rayglover-ibm", "html_url": "https://github.com/rayglover-ibm", "followers_url": "https://api.github.com/users/rayglover-ibm/followers", "following_url": "https://api.github.com/users/rayglover-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rayglover-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rayglover-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rayglover-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rayglover-ibm/orgs", "repos_url": "https://api.github.com/users/rayglover-ibm/repos", "events_url": "https://api.github.com/users/rayglover-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rayglover-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rayglover-ibm", "id": 19191468, "node_id": "MDQ6VXNlcjE5MTkxNDY4", "avatar_url": "https://avatars.githubusercontent.com/u/19191468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rayglover-ibm", "html_url": "https://github.com/rayglover-ibm", "followers_url": "https://api.github.com/users/rayglover-ibm/followers", "following_url": "https://api.github.com/users/rayglover-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rayglover-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rayglover-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rayglover-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rayglover-ibm/orgs", "repos_url": "https://api.github.com/users/rayglover-ibm/repos", "events_url": "https://api.github.com/users/rayglover-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rayglover-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a62f87b78b27f965fa7f158a49db553c2107c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a62f87b78b27f965fa7f158a49db553c2107c7e", "html_url": "https://github.com/rust-lang/rust/commit/3a62f87b78b27f965fa7f158a49db553c2107c7e"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "6d4a96523ed71db794acb94bfba0e7bb077536a8", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/307fab1aa7540adf8856670c5a1cf44ff508ae2f/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307fab1aa7540adf8856670c5a1cf44ff508ae2f/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=307fab1aa7540adf8856670c5a1cf44ff508ae2f", "patch": "@@ -1451,7 +1451,7 @@ impl BitSet {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter<'a>(&'a self) -> bit_set::Iter<'a> {\n+    pub fn iter(&self) -> bit_set::Iter {\n         SetIter(BlockIter::from_blocks(self.bit_vec.blocks()))\n     }\n \n@@ -1803,14 +1803,13 @@ impl hash::Hash for BitSet {\n \n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-struct BlockIter<T> where\n-    T: Iterator<Item=u32> {\n+struct BlockIter<T> where T: Iterator<Item=u32> {\n     head: u32,\n     head_offset: usize,\n-    tail: T\n+    tail: T,\n }\n-impl<'a, T> BlockIter<T> where\n-    T: Iterator<Item=u32> {\n+\n+impl<'a, T> BlockIter<T> where T: Iterator<Item=u32> {\n     fn from_blocks(mut blocks: T) -> BlockIter<T> {\n         let h = blocks.next().unwrap_or(0);\n         BlockIter {tail: blocks, head: h, head_offset: 0}\n@@ -1850,16 +1849,20 @@ impl<'a, T> Iterator for BlockIter<T> where T: Iterator<Item=u32> {\n         while self.head == 0 {\n             match self.tail.next() {\n                 Some(w) => self.head = w,\n-                _ => return None\n+                None => return None\n             }\n             self.head_offset += u32::BITS;\n         }\n \n-        let t = self.head & !self.head + 1;\n-        // remove the least significant bit\n+        // from the current block, isolate the\n+        // LSB and subtract 1, producing k:\n+        // a block with a number of set bits\n+        // equal to the index of the LSB\n+        let k = (self.head & (!self.head + 1)) - 1;\n+        // update block, removing the LSB\n         self.head &= self.head - 1;\n-        // return index of lsb\n-        Some(self.head_offset + (u32::count_ones(t-1) as usize))\n+        // return offset + (index of LSB)\n+        Some(self.head_offset + (u32::count_ones(k) as usize))\n     }\n \n     #[inline]\n@@ -1886,11 +1889,15 @@ impl<'a> Iterator for TwoBitPositions<'a> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (a, al) = self.set.size_hint();\n-        let (b, bl) = self.set.size_hint();\n+        let (a, au) = self.set.size_hint();\n+        let (b, bu) = self.other.size_hint();\n+\n+        let upper = match (au, bu) {\n+            (Some(au), Some(bu)) => Some(cmp::max(au, bu)),\n+            _ => None\n+        };\n \n-        assert_eq!(a, b);\n-        (a, cmp::max(al, bl))\n+        (cmp::max(a, b), upper)\n     }\n }\n "}]}