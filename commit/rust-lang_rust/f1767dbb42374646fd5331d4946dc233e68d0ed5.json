{"sha": "f1767dbb42374646fd5331d4946dc233e68d0ed5", "node_id": "C_kwDOAAsO6NoAKGYxNzY3ZGJiNDIzNzQ2NDZmZDUzMzFkNDk0NmRjMjMzZTY4ZDBlZDU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:33:12Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:33:12Z"}, "message": "Add ExtraConstraintInfo", "tree": {"sha": "f8982758f0703eddd4cee43c85a9b05568334417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8982758f0703eddd4cee43c85a9b05568334417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1767dbb42374646fd5331d4946dc233e68d0ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1767dbb42374646fd5331d4946dc233e68d0ed5", "html_url": "https://github.com/rust-lang/rust/commit/f1767dbb42374646fd5331d4946dc233e68d0ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1767dbb42374646fd5331d4946dc233e68d0ed5/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "html_url": "https://github.com/rust-lang/rust/commit/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "afcd2d739586b6ab7980a195be36296e47e8fbb8", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=f1767dbb42374646fd5331d4946dc233e68d0ed5", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, DesugaringKind, Span};\n \n-use crate::region_infer::BlameConstraint;\n+use crate::region_infer::{BlameConstraint, ExtraConstraintInfo};\n use crate::{\n     borrow_set::BorrowData, nll::ConstraintDescription, region_infer::Cause, MirBorrowckCtxt,\n     WriteKind,\n@@ -38,6 +38,7 @@ pub(crate) enum BorrowExplanation<'tcx> {\n         span: Span,\n         region_name: RegionName,\n         opt_place_desc: Option<String>,\n+        extra_info: Vec<ExtraConstraintInfo>,\n     },\n     Unexplained,\n }\n@@ -243,6 +244,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 ref region_name,\n                 ref opt_place_desc,\n                 from_closure: _,\n+                ref extra_info,\n             } => {\n                 region_name.highlight_region_name(err);\n \n@@ -268,6 +270,11 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                     );\n                 };\n \n+                for extra in extra_info {\n+                    match extra {\n+                        _ => {}\n+                    }\n+                }\n                 self.add_lifetime_bound_suggestion_to_diagnostic(err, &category, span, region_name);\n             }\n             _ => {}\n@@ -309,8 +316,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>) {\n-        let blame_constraint = self.regioncx.best_blame_constraint(\n+    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n+        let (blame_constraint, extra_info) = self.regioncx.best_blame_constraint(\n             borrow_region,\n             NllRegionVariableOrigin::FreeRegion,\n             |r| self.regioncx.provides_universal_region(r, borrow_region, outlived_region),\n@@ -319,7 +326,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let outlived_fr_name = self.give_region_a_name(outlived_region);\n \n-        (category, from_closure, cause.span, outlived_fr_name)\n+        (category, from_closure, cause.span, outlived_fr_name, extra_info)\n     }\n \n     /// Returns structured explanation for *why* the borrow contains the\n@@ -391,7 +398,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             None => {\n                 if let Some(region) = self.to_error_region_vid(borrow_region_vid) {\n-                    let (category, from_closure, span, region_name) =\n+                    let (category, from_closure, span, region_name, extra_info) =\n                         self.free_region_constraint_info(borrow_region_vid, region);\n                     if let Some(region_name) = region_name {\n                         let opt_place_desc = self.describe_place(borrow.borrowed_place.as_ref());\n@@ -401,6 +408,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             span,\n                             region_name,\n                             opt_place_desc,\n+                            extra_info,\n                         }\n                     } else {\n                         debug!(\"Could not generate a region name\");"}, {"sha": "c276719c227b011f91b8b4a3eb4e606541aa0011", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=f1767dbb42374646fd5331d4946dc233e68d0ed5", "patch": "@@ -354,10 +354,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     ) {\n         debug!(\"report_region_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n-        let BlameConstraint { category, cause, variance_info, .. } =\n-            self.regioncx.best_blame_constraint(fr, fr_origin, |r| {\n+        let BlameConstraint { category, cause, variance_info, .. } = self\n+            .regioncx\n+            .best_blame_constraint(fr, fr_origin, |r| {\n                 self.regioncx.provides_universal_region(r, fr, outlived_fr)\n-            });\n+            })\n+            .0;\n \n         debug!(\"report_region_error: category={:?} {:?} {:?}\", category, cause, variance_info);\n "}, {"sha": "84b90d0ef01467787ebe2d383eec8f5dc054efde", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1767dbb42374646fd5331d4946dc233e68d0ed5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=f1767dbb42374646fd5331d4946dc233e68d0ed5", "patch": "@@ -245,6 +245,9 @@ enum Trace<'tcx> {\n     NotVisited,\n }\n \n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum ExtraConstraintInfo {}\n+\n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Creates a new region inference context with a total of\n     /// `num_region_variables` valid inference variables; the first N\n@@ -1818,10 +1821,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n-        let BlameConstraint { category, cause, .. } =\n-            self.best_blame_constraint(fr1, fr1_origin, |r| {\n-                self.provides_universal_region(r, fr1, fr2)\n-            });\n+        let BlameConstraint { category, cause, .. } = self\n+            .best_blame_constraint(fr1, fr1_origin, |r| self.provides_universal_region(r, fr1, fr2))\n+            .0;\n         (category, cause)\n     }\n \n@@ -2010,7 +2012,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         from_region: RegionVid,\n         from_region_origin: NllRegionVariableOrigin,\n         target_test: impl Fn(RegionVid) -> bool,\n-    ) -> BlameConstraint<'tcx> {\n+    ) -> (BlameConstraint<'tcx>, Vec<ExtraConstraintInfo>) {\n         // Find all paths\n         let (path, target_region) =\n             self.find_constraint_paths_between_regions(from_region, target_test).unwrap();\n@@ -2026,6 +2028,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 .collect::<Vec<_>>()\n         );\n \n+        let extra_info = vec![];\n+\n         // We try to avoid reporting a `ConstraintCategory::Predicate` as our best constraint.\n         // Instead, we use it to produce an improved `ObligationCauseCode`.\n         // FIXME - determine what we should do if we encounter multiple `ConstraintCategory::Predicate`\n@@ -2175,7 +2179,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let best_choice =\n             if blame_source { range.rev().find(find_region) } else { range.find(find_region) };\n \n-        debug!(?best_choice, ?blame_source);\n+        debug!(?best_choice, ?blame_source, ?extra_info);\n \n         if let Some(i) = best_choice {\n             if let Some(next) = categorized_path.get(i + 1) {\n@@ -2184,7 +2188,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 {\n                     // The return expression is being influenced by the return type being\n                     // impl Trait, point at the return type and not the return expr.\n-                    return next.clone();\n+                    return (next.clone(), extra_info);\n                 }\n             }\n \n@@ -2204,7 +2208,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 }\n             }\n \n-            return categorized_path[i].clone();\n+            return (categorized_path[i].clone(), extra_info);\n         }\n \n         // If that search fails, that is.. unusual. Maybe everything\n@@ -2214,7 +2218,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         categorized_path.sort_by(|p0, p1| p0.category.cmp(&p1.category));\n         debug!(\"sorted_path={:#?}\", categorized_path);\n \n-        categorized_path.remove(0)\n+        (categorized_path.remove(0), extra_info)\n     }\n \n     pub(crate) fn universe_info(&self, universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {"}]}