{"sha": "014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNGM4YzRjMzg3MmZmNzQxNjlmZmJiYzNhNjlhY2Q5MmJlMmE3NmM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-01T21:01:38Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-02T22:07:28Z"}, "message": "implement existing parser fns in terms of fallible fns", "tree": {"sha": "5b0317314b848b087d62241ff5a98e9a38ca50b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b0317314b848b087d62241ff5a98e9a38ca50b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "html_url": "https://github.com/rust-lang/rust/commit/014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014c8c4c3872ff74169ffbbc3a69acd92be2a76c/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe6aae49a1482c5cc163f990006f279a0eaf0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe6aae49a1482c5cc163f990006f279a0eaf0e5", "html_url": "https://github.com/rust-lang/rust/commit/0fe6aae49a1482c5cc163f990006f279a0eaf0e5"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "e9a6535cba1d231460068d3bbc4c0a33ae5cdb0b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/014c8c4c3872ff74169ffbbc3a69acd92be2a76c/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c8c4c3872ff74169ffbbc3a69acd92be2a76c/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "patch": "@@ -70,6 +70,23 @@ macro_rules! panictry {\n     })\n }\n \n+// A variant of 'panictry!' that works on a Vec<Diagnostic> instead of a single DiagnosticBuilder.\n+macro_rules! panictry_buffer {\n+    ($handler:expr, $e:expr) => ({\n+        use std::result::Result::{Ok, Err};\n+        use errors::{FatalError, DiagnosticBuilder};\n+        match $e {\n+            Ok(e) => e,\n+            Err(errs) => {\n+                for e in errs {\n+                    DiagnosticBuilder::new_diagnostic($handler, e).emit();\n+                }\n+                FatalError.raise()\n+            }\n+        }\n+    })\n+}\n+\n #[macro_export]\n macro_rules! unwrap_or {\n     ($opt:expr, $default:expr) => {"}, {"sha": "8b2020c64189c0abe696b9ac2fd06e635b1f3182", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/014c8c4c3872ff74169ffbbc3a69acd92be2a76c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c8c4c3872ff74169ffbbc3a69acd92be2a76c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=014c8c4c3872ff74169ffbbc3a69acd92be2a76c", "patch": "@@ -177,9 +177,7 @@ pub fn parse_stream_from_source_str(name: FileName, source: String, sess: &Parse\n /// Create a new parser from a source string\n pub fn new_parser_from_source_str(sess: &ParseSess, name: FileName, source: String)\n                                       -> Parser {\n-    let mut parser = source_file_to_parser(sess, sess.source_map().new_source_file(name, source));\n-    parser.recurse_into_file_modules = false;\n-    parser\n+    panictry_buffer!(&sess.span_diagnostic, maybe_new_parser_from_source_str(sess, name, source))\n }\n \n /// Create a new parser from a source string. Returns any buffered errors from lexing the initial\n@@ -215,14 +213,8 @@ crate fn new_sub_parser_from_file<'a>(sess: &'a ParseSess,\n \n /// Given a source_file and config, return a parser\n fn source_file_to_parser(sess: & ParseSess, source_file: Lrc<SourceFile>) -> Parser {\n-    let end_pos = source_file.end_pos;\n-    let mut parser = stream_to_parser(sess, source_file_to_stream(sess, source_file, None));\n-\n-    if parser.token == token::Eof && parser.span.is_dummy() {\n-        parser.span = Span::new(end_pos, end_pos, parser.span.ctxt());\n-    }\n-\n-    parser\n+    panictry_buffer!(&sess.span_diagnostic,\n+                     maybe_source_file_to_parser(sess, source_file))\n }\n \n /// Given a source_file and config, return a parser. Returns any buffered errors from lexing the\n@@ -269,9 +261,7 @@ fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n pub fn source_file_to_stream(sess: &ParseSess,\n                              source_file: Lrc<SourceFile>,\n                              override_span: Option<Span>) -> TokenStream {\n-    let mut srdr = lexer::StringReader::new(sess, source_file, override_span);\n-    srdr.real_token();\n-    panictry!(srdr.parse_all_token_trees())\n+    panictry_buffer!(&sess.span_diagnostic, maybe_file_to_stream(sess, source_file, override_span))\n }\n \n /// Given a source file, produce a sequence of token-trees. Returns any buffered errors from"}]}