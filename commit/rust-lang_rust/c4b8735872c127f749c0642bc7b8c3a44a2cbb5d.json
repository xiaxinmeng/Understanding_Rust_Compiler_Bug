{"sha": "c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Yjg3MzU4NzJjMTI3Zjc0OWMwNjQyYmM3YjhjM2E0NGEyY2JiNWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-15T11:42:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T11:42:04Z"}, "message": "Rollup merge of #56044 - matthewjasper:function-param-drop-order, r=cramertj\n\nDrop partially bound function parameters in the expected order\n\nGiven the function\n\n```rust\nfn foo((_x, _): (LogDrop, LogDrop), (_, _y): (LogDrop, LogDrop)) {}\n```\n\nPrior to 1.12.0 we dropped both `_x` and `_y` before the rest of their\nrespective parameters, since then we dropped `_x` and `_y` after. The\noriginal order appears to be the correct order, as the value created\nlater is dropped first, so we revert to that order and add a test for\nit.\n\nWhile this is technically a breaking change, I can't work out how\nanyone could be relying on this without making their code very\nbrittle. If this is considered to be too likely to break real world code\nthen I can revert the change and change the test to check for the\ncurrent order.", "tree": {"sha": "9a7a9ada2a1b471fee3f299c8dbc1936c8c96bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7a9ada2a1b471fee3f299c8dbc1936c8c96bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPccNCRBK7hj4Ov3rIwAAdHIIAJ5w1ueZfSKZwwHQZBGA/7FI\nvTqQd9A1AFcDaUxcWgAIj2/GrFvAG9O43fxr066BY7aOuiFdDIWqAwIGjF1YXaby\nVXTlbUn7KAwzPPk7HuAmKP+0n2nRejnQiPL6ryLcjBnJEINlX8oh5FGwe22L2MqI\nfqhDTwaKe1BxaN2VTUL11KMxlwIOt/t2p6E6ZZEssnHoYtOGo3mcidYR9cqowNeq\n9hrqxL/csKm2OTts6dc/fwojtitpclOB+XGzW15aAffUnXJnW0VX8dJvBr2PP8Qf\n+8eQ0jQgErXgF2g4HSnxGukAJXrblt6GXxSOjhraBZcu8DeEzGjHM5Q9tSzdTow=\n=w3GL\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a7a9ada2a1b471fee3f299c8dbc1936c8c96bf9\nparent 33e6df4b62237af312bf6e3f40a97f5bdc94949a\nparent 914515f8090be23e7ae0acc29cdccf6360d1a03d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547552524 +0100\ncommitter GitHub <noreply@github.com> 1547552524 +0100\n\nRollup merge of #56044 - matthewjasper:function-param-drop-order, r=cramertj\n\nDrop partially bound function parameters in the expected order\n\nGiven the function\n\n```rust\nfn foo((_x, _): (LogDrop, LogDrop), (_, _y): (LogDrop, LogDrop)) {}\n```\n\nPrior to 1.12.0 we dropped both `_x` and `_y` before the rest of their\nrespective parameters, since then we dropped `_x` and `_y` after. The\noriginal order appears to be the correct order, as the value created\nlater is dropped first, so we revert to that order and add a test for\nit.\n\nWhile this is technically a breaking change, I can't work out how\nanyone could be relying on this without making their code very\nbrittle. If this is considered to be too likely to break real world code\nthen I can revert the change and change the test to check for the\ncurrent order.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "html_url": "https://github.com/rust-lang/rust/commit/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e6df4b62237af312bf6e3f40a97f5bdc94949a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e6df4b62237af312bf6e3f40a97f5bdc94949a", "html_url": "https://github.com/rust-lang/rust/commit/33e6df4b62237af312bf6e3f40a97f5bdc94949a"}, {"sha": "914515f8090be23e7ae0acc29cdccf6360d1a03d", "url": "https://api.github.com/repos/rust-lang/rust/commits/914515f8090be23e7ae0acc29cdccf6360d1a03d", "html_url": "https://github.com/rust-lang/rust/commit/914515f8090be23e7ae0acc29cdccf6360d1a03d"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "2bf2824d835cc83564d9b65e54143ccb403faa6d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "patch": "@@ -910,6 +910,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let place = Place::Local(local);\n             let &ArgInfo(ty, opt_ty_info, pattern, ref self_binding) = arg_info;\n \n+            // Make sure we drop (parts of) the argument even when not matched on.\n+            self.schedule_drop(\n+                pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n+                argument_scope, &place, ty,\n+                DropKind::Value { cached_block: CachedBlock::default() },\n+            );\n+\n             if let Some(pattern) = pattern {\n                 let pattern = self.hir.pattern_from_hir(pattern);\n                 let span = pattern.span;\n@@ -941,13 +948,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-\n-            // Make sure we drop (parts of) the argument even when not matched on.\n-            self.schedule_drop(\n-                pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n-                argument_scope, &place, ty,\n-                DropKind::Value { cached_block: CachedBlock::default() },\n-            );\n         }\n \n         // Enter the argument pattern bindings source scope, if it exists."}, {"sha": "4d5a6fbba28575eb0926315c8a5ec9cd1db01ca4", "filename": "src/test/run-pass/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "patch": "@@ -0,0 +1,68 @@\n+// Check that partially moved from function parameters are dropped after the\n+// named bindings that move from them.\n+\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+use std::{panic, cell::RefCell};\n+\n+struct LogDrop<'a>(i32, Context<'a>);\n+\n+#[derive(Copy, Clone)]\n+struct Context<'a> {\n+    panic_on: i32,\n+    drops: &'a RefCell<Vec<i32>>,\n+}\n+\n+impl<'a> Context<'a> {\n+    fn record_drop(self, index: i32) {\n+        self.drops.borrow_mut().push(index);\n+        if index == self.panic_on {\n+            panic!();\n+        }\n+    }\n+}\n+\n+impl<'a> Drop for LogDrop<'a> {\n+    fn drop(&mut self) {\n+        self.1.record_drop(self.0);\n+    }\n+}\n+\n+fn bindings_in_params((_x, _): (LogDrop, LogDrop), (_, _y): (LogDrop, LogDrop)) {}\n+fn bindings_with_let(a: (LogDrop, LogDrop), b: (LogDrop, LogDrop)) {\n+    // Drop order in foo is the same as the following bindings.\n+    // _temp2 is declared after _x to avoid a difference between `_: T` and\n+    // `x: T` in function parameters.\n+    let _temp1 = a;\n+    let (_x, _) = _temp1;\n+\n+    let _temp2 = b;\n+    let (_, _y) = _temp2;\n+}\n+\n+fn test_drop_order(panic_on: i32, fun: fn((LogDrop, LogDrop), (LogDrop, LogDrop))) {\n+    let context = Context {\n+        panic_on,\n+        drops: &RefCell::new(Vec::new()),\n+    };\n+    let one = LogDrop(1, context);\n+    let two = LogDrop(2, context);\n+    let three = LogDrop(3, context);\n+    let four = LogDrop(4, context);\n+\n+    let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        fun((three, four), (two, one));\n+    }));\n+    if panic_on == 0 {\n+        assert!(res.is_ok(), \"should not have panicked\");\n+    } else {\n+        assert!(res.is_err(), \"should have panicked\");\n+    }\n+    assert_eq!(*context.drops.borrow(), [1, 2, 3, 4], \"incorrect drop order\");\n+}\n+\n+fn main() {\n+    (0..=4).for_each(|i| test_drop_order(i, bindings_in_params));\n+    (0..=4).for_each(|i| test_drop_order(i, bindings_with_let));\n+    (0..=4).for_each(|i| test_drop_order(i, |(_x, _), (_, _y)| {}));\n+}"}]}