{"sha": "8989fb8315538aece975663c3be4aba867e9ee86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODlmYjgzMTU1MzhhZWNlOTc1NjYzYzNiZTRhYmE4NjdlOWVlODY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T16:17:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T16:17:18Z"}, "message": "Discover rustc_cfg through unstable cargo options", "tree": {"sha": "d44aa077a01ccae27a94b01c58e7ecec3e3d2709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d44aa077a01ccae27a94b01c58e7ecec3e3d2709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8989fb8315538aece975663c3be4aba867e9ee86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8989fb8315538aece975663c3be4aba867e9ee86", "html_url": "https://github.com/rust-lang/rust/commit/8989fb8315538aece975663c3be4aba867e9ee86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8989fb8315538aece975663c3be4aba867e9ee86/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526040eea8886a748dfd0a5449526f37a8bcf6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/526040eea8886a748dfd0a5449526f37a8bcf6af", "html_url": "https://github.com/rust-lang/rust/commit/526040eea8886a748dfd0a5449526f37a8bcf6af"}], "stats": {"total": 116, "additions": 83, "deletions": 33}, "files": [{"sha": "f1ad00d36dd8544d0d326edbc578b6dd7a742f80", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=8989fb8315538aece975663c3be4aba867e9ee86", "patch": "@@ -201,31 +201,12 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n         }\n-        let target = if let Some(target) = config.target.as_ref() {\n+        let target = if let Some(target) = &config.target {\n             Some(target.clone())\n+        } else if let stdout @ Some(_) = cargo_config_build_target(cargo_toml) {\n+            stdout\n         } else {\n-            // cargo metadata defaults to giving information for _all_ targets.\n-            // In the absence of a preference from the user, we use the host platform.\n-            let mut rustc = Command::new(toolchain::rustc());\n-            rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n-            log::debug!(\"Discovering host platform by {:?}\", rustc);\n-            match utf8_stdout(rustc) {\n-                Ok(stdout) => {\n-                    let field = \"host: \";\n-                    let target = stdout.lines().find_map(|l| l.strip_prefix(field));\n-                    if let Some(target) = target {\n-                        Some(target.to_string())\n-                    } else {\n-                        // If we fail to resolve the host platform, it's not the end of the world.\n-                        log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n-                        None\n-                    }\n-                }\n-                Err(e) => {\n-                    log::warn!(\"Failed to discover host platform: {}\", e);\n-                    None\n-                }\n-            }\n+            rustc_discover_host_triple(cargo_toml)\n         };\n         if let Some(target) = target {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n@@ -368,3 +349,47 @@ impl CargoWorkspace {\n         self.packages.iter().filter(|(_, v)| v.name == name).count() == 1\n     }\n }\n+\n+fn rustc_discover_host_triple(cargo_toml: &AbsPath) -> Option<String> {\n+    let mut rustc = Command::new(toolchain::rustc());\n+    rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n+    log::debug!(\"Discovering host platform by {:?}\", rustc);\n+    match utf8_stdout(rustc) {\n+        Ok(stdout) => {\n+            let field = \"host: \";\n+            let target = stdout.lines().find_map(|l| l.strip_prefix(field));\n+            if let Some(target) = target {\n+                Some(target.to_string())\n+            } else {\n+                // If we fail to resolve the host platform, it's not the end of the world.\n+                log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n+                None\n+            }\n+        }\n+        Err(e) => {\n+            log::warn!(\"Failed to discover host platform: {}\", e);\n+            None\n+        }\n+    }\n+}\n+\n+fn cargo_config_build_target(cargo_toml: &AbsPath) -> Option<String> {\n+    let mut cargo_config = Command::new(toolchain::cargo());\n+    cargo_config.current_dir(cargo_toml.parent().unwrap()).args(&[\n+        \"+nightly\",\n+        \"-Z\",\n+        \"unstable-options\",\n+        \"config\",\n+        \"get\",\n+        \"build.target\",\n+    ]);\n+    // if successful we receive `build.target = \"target-triple\"`\n+    log::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n+    match utf8_stdout(cargo_config) {\n+        Ok(stdout) => stdout\n+            .strip_prefix(\"build.target = \\\"\")\n+            .and_then(|stdout| stdout.strip_suffix('\"'))\n+            .map(ToOwned::to_owned),\n+        Err(_) => None,\n+    }\n+}"}, {"sha": "6de40cfe2aeba87a8a85caa51a4352ca4b486f05", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=8989fb8315538aece975663c3be4aba867e9ee86", "patch": "@@ -2,9 +2,11 @@\n \n use std::process::Command;\n \n+use paths::AbsPath;\n+\n use crate::{cfg_flag::CfgFlag, utf8_stdout};\n \n-pub(crate) fn get(target: Option<&str>) -> Vec<CfgFlag> {\n+pub(crate) fn get(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n     let mut res = Vec::with_capacity(6 * 2 + 1);\n \n@@ -17,12 +19,34 @@ pub(crate) fn get(target: Option<&str>) -> Vec<CfgFlag> {\n     }\n \n     let rustc_cfgs = {\n-        let mut cmd = Command::new(toolchain::rustc());\n-        cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n-        if let Some(target) = target {\n-            cmd.args(&[\"--target\", target]);\n-        }\n-        utf8_stdout(cmd)\n+        cargo_toml\n+            .and_then(|cargo_toml| {\n+                let mut cargo_config = Command::new(toolchain::cargo());\n+                cargo_config.current_dir(cargo_toml.parent().unwrap()).args(&[\n+                    \"+nightly\",\n+                    \"-Z\",\n+                    \"unstable-options\",\n+                    \"rustc\",\n+                    \"--print\",\n+                    \"cfg\",\n+                ]);\n+                if let Some(target) = target {\n+                    cargo_config.args(&[\"--target\", target]);\n+                }\n+                utf8_stdout(cargo_config).ok()\n+            })\n+            .map_or_else(\n+                || {\n+                    // using unstable cargo features failed, fall back to using plain rustc\n+                    let mut cmd = Command::new(toolchain::rustc());\n+                    cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+                    if let Some(target) = target {\n+                        cmd.args(&[\"--target\", target]);\n+                    }\n+                    utf8_stdout(cmd)\n+                },\n+                Ok,\n+            )\n     };\n \n     match rustc_cfgs {"}, {"sha": "84c702fdf7e4c7e7bdd8a5c37498ed4b0a193522", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8989fb8315538aece975663c3be4aba867e9ee86/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=8989fb8315538aece975663c3be4aba867e9ee86", "patch": "@@ -143,7 +143,8 @@ impl ProjectWorkspace {\n                 } else {\n                     None\n                 };\n-                let rustc_cfg = rustc_cfg::get(config.target.as_deref());\n+\n+                let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n                 ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg }\n             }\n         };\n@@ -159,7 +160,7 @@ impl ProjectWorkspace {\n             Some(path) => Some(Sysroot::load(path)?),\n             None => None,\n         };\n-        let rustc_cfg = rustc_cfg::get(target);\n+        let rustc_cfg = rustc_cfg::get(None, target);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n@@ -310,7 +311,7 @@ fn project_json_to_crate_graph(\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n-                    cfg_cache.entry(target).or_insert_with(|| rustc_cfg::get(Some(target)))\n+                    cfg_cache.entry(target).or_insert_with(|| rustc_cfg::get(None, Some(target)))\n                 }\n                 None => &rustc_cfg,\n             };"}]}