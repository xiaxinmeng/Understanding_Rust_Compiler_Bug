{"sha": "494bc8a30cf154eede2f22178c9a7ebc404302e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NGJjOGEzMGNmMTU0ZWVkZTJmMjIxNzhjOWE3ZWJjNDA0MzAyZTc=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-19T09:14:48Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-26T11:19:34Z"}, "message": "Fix FN that types lints don't work with const or static", "tree": {"sha": "b59dcff908f1d25ff4552659fb6f2dc1327ecad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59dcff908f1d25ff4552659fb6f2dc1327ecad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494bc8a30cf154eede2f22178c9a7ebc404302e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494bc8a30cf154eede2f22178c9a7ebc404302e7", "html_url": "https://github.com/rust-lang/rust/commit/494bc8a30cf154eede2f22178c9a7ebc404302e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494bc8a30cf154eede2f22178c9a7ebc404302e7/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad39b6613645aefd6671f1378cafa1c8f2d5f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad39b6613645aefd6671f1378cafa1c8f2d5f65", "html_url": "https://github.com/rust-lang/rust/commit/dad39b6613645aefd6671f1378cafa1c8f2d5f65"}], "stats": {"total": 114, "additions": 86, "deletions": 28}, "files": [{"sha": "1df964db38fe51810433fd7d3101f89ccf79b3ee", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -249,6 +249,14 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         self.check_fn_decl(cx, decl);\n     }\n \n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        match item.kind {\n+            ItemKind::Static(ref ty, _, _) | ItemKind::Const(ref ty, _) => self.check_ty(cx, ty, false),\n+            // functions, enums, structs, impls and traits are covered\n+            _ => (),\n+        }\n+    }\n+\n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         self.check_ty(cx, &field.ty, false);\n     }"}, {"sha": "2c3b25cd45e80552789e3f7c34de5cbf5fd7b43f", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -5,6 +5,9 @@\n extern crate alloc;\n use alloc::collections::linked_list::LinkedList;\n \n+const C: LinkedList<i32> = LinkedList::new();\n+static S: LinkedList<i32> = LinkedList::new();\n+\n trait Foo {\n     type Baz = LinkedList<u8>;\n     fn foo(_: LinkedList<u8>);"}, {"sha": "425407dc334929765d0f7b18e30e47e5b00443d4", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -1,51 +1,67 @@\n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:9:16\n+  --> $DIR/dlist.rs:8:10\n+   |\n+LL | const C: LinkedList<i32> = LinkedList::new();\n+   |          ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::linkedlist` implied by `-D warnings`\n+   = help: a `VecDeque` might work\n+\n+error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:9:11\n+   |\n+LL | static S: LinkedList<i32> = LinkedList::new();\n+   |           ^^^^^^^^^^^^^^^\n+   |\n+   = help: a `VecDeque` might work\n+\n+error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:12:16\n    |\n LL |     type Baz = LinkedList<u8>;\n    |                ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::linkedlist` implied by `-D warnings`\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:10:15\n+  --> $DIR/dlist.rs:13:15\n    |\n LL |     fn foo(_: LinkedList<u8>);\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:11:23\n+  --> $DIR/dlist.rs:14:23\n    |\n LL |     const BAR: Option<LinkedList<u8>>;\n    |                       ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:22:15\n+  --> $DIR/dlist.rs:25:15\n    |\n LL |     fn foo(_: LinkedList<u8>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:25:39\n+  --> $DIR/dlist.rs:28:39\n    |\n LL | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n    |                                       ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:29:29\n+  --> $DIR/dlist.rs:32:29\n    |\n LL | pub fn test_ret() -> Option<LinkedList<u8>> {\n    |                             ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "2faab9e035d9977ca37ab35bc61743d287e9df14", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -1,6 +1,9 @@\n #![deny(clippy::option_option)]\n #![allow(clippy::unnecessary_wraps)]\n \n+const C: Option<Option<i32>> = None;\n+static S: Option<Option<i32>> = None;\n+\n fn input(_: Option<Option<u8>>) {}\n \n fn output() -> Option<Option<u8>> {"}, {"sha": "a925bb35b04d891cea86f688f51ce5c9f8b3a706", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -1,8 +1,8 @@\n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:4:13\n+  --> $DIR/option_option.rs:4:10\n    |\n-LL | fn input(_: Option<Option<u8>>) {}\n-   |             ^^^^^^^^^^^^^^^^^^\n+LL | const C: Option<Option<i32>> = None;\n+   |          ^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/option_option.rs:1:9\n@@ -11,58 +11,70 @@ LL | #![deny(clippy::option_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:6:16\n+  --> $DIR/option_option.rs:5:11\n+   |\n+LL | static S: Option<Option<i32>> = None;\n+   |           ^^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:7:13\n+   |\n+LL | fn input(_: Option<Option<u8>>) {}\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:9:16\n    |\n LL | fn output() -> Option<Option<u8>> {\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:10:27\n+  --> $DIR/option_option.rs:13:27\n    |\n LL | fn output_nested() -> Vec<Option<Option<u8>>> {\n    |                           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:15:30\n+  --> $DIR/option_option.rs:18:30\n    |\n LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:20:8\n+  --> $DIR/option_option.rs:23:8\n    |\n LL |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:24:23\n+  --> $DIR/option_option.rs:27:23\n    |\n LL |     fn struct_fn() -> Option<Option<u8>> {\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:30:22\n+  --> $DIR/option_option.rs:33:22\n    |\n LL |     fn trait_fn() -> Option<Option<u8>>;\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:34:11\n+  --> $DIR/option_option.rs:37:11\n    |\n LL |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:35:17\n+  --> $DIR/option_option.rs:38:17\n    |\n LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:76:14\n+  --> $DIR/option_option.rs:79:14\n    |\n LL |         foo: Option<Option<Cow<'a, str>>>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "a40d91fdb18ac15be6445c643c66645d68acbcd1", "filename": "tests/ui/vec_box_sized.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.fixed?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -9,6 +9,8 @@ struct BigStruct([i32; 10000]);\n /// The following should trigger the lint\n mod should_trigger {\n     use super::SizedStruct;\n+    const C: Vec<i32> = Vec::new();\n+    static S: Vec<i32> = Vec::new();\n \n     struct StructWithVecBox {\n         sized_type: Vec<SizedStruct>,"}, {"sha": "843bbb64e71904c4e121bb996b89be293e40b89d", "filename": "tests/ui/vec_box_sized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -9,6 +9,8 @@ struct BigStruct([i32; 10000]);\n /// The following should trigger the lint\n mod should_trigger {\n     use super::SizedStruct;\n+    const C: Vec<Box<i32>> = Vec::new();\n+    static S: Vec<Box<i32>> = Vec::new();\n \n     struct StructWithVecBox {\n         sized_type: Vec<Box<SizedStruct>>,"}, {"sha": "c518267f0418917b10b5b16a52624157ff747d9c", "filename": "tests/ui/vec_box_sized.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494bc8a30cf154eede2f22178c9a7ebc404302e7/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=494bc8a30cf154eede2f22178c9a7ebc404302e7", "patch": "@@ -1,28 +1,40 @@\n error: `Vec<T>` is already on the heap, the boxing is unnecessary\n-  --> $DIR/vec_box_sized.rs:14:21\n+  --> $DIR/vec_box_sized.rs:12:14\n    |\n-LL |         sized_type: Vec<Box<SizedStruct>>,\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+LL |     const C: Vec<Box<i32>> = Vec::new();\n+   |              ^^^^^^^^^^^^^ help: try: `Vec<i32>`\n    |\n    = note: `-D clippy::vec-box` implied by `-D warnings`\n \n error: `Vec<T>` is already on the heap, the boxing is unnecessary\n-  --> $DIR/vec_box_sized.rs:17:14\n+  --> $DIR/vec_box_sized.rs:13:15\n+   |\n+LL |     static S: Vec<Box<i32>> = Vec::new();\n+   |               ^^^^^^^^^^^^^ help: try: `Vec<i32>`\n+\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n+  --> $DIR/vec_box_sized.rs:16:21\n+   |\n+LL |         sized_type: Vec<Box<SizedStruct>>,\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n+  --> $DIR/vec_box_sized.rs:19:14\n    |\n LL |     struct A(Vec<Box<SizedStruct>>);\n    |              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n \n error: `Vec<T>` is already on the heap, the boxing is unnecessary\n-  --> $DIR/vec_box_sized.rs:18:18\n+  --> $DIR/vec_box_sized.rs:20:18\n    |\n LL |     struct B(Vec<Vec<Box<(u32)>>>);\n    |                  ^^^^^^^^^^^^^^^ help: try: `Vec<u32>`\n \n error: `Vec<T>` is already on the heap, the boxing is unnecessary\n-  --> $DIR/vec_box_sized.rs:46:23\n+  --> $DIR/vec_box_sized.rs:48:23\n    |\n LL |         pub fn f() -> Vec<Box<S>> {\n    |                       ^^^^^^^^^^^ help: try: `Vec<S>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}