{"sha": "26f7030b16716712070d04ad938e9762b8756f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjcwMzBiMTY3MTY3MTIwNzBkMDRhZDkzOGU5NzYyYjg3NTZmN2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:09:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:09:32Z"}, "message": "remove unused Option", "tree": {"sha": "0e50012cfee62fdcfb177222e66688c1c3e5396a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e50012cfee62fdcfb177222e66688c1c3e5396a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f7030b16716712070d04ad938e9762b8756f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f7030b16716712070d04ad938e9762b8756f7f", "html_url": "https://github.com/rust-lang/rust/commit/26f7030b16716712070d04ad938e9762b8756f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f7030b16716712070d04ad938e9762b8756f7f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4b539a62f44b64d6db3054a4c2b9c3a5ad09f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4b539a62f44b64d6db3054a4c2b9c3a5ad09f3", "html_url": "https://github.com/rust-lang/rust/commit/6f4b539a62f44b64d6db3054a4c2b9c3a5ad09f3"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "ac953f4305c31d3622c9b512715e2d727c925fb3", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/26f7030b16716712070d04ad938e9762b8756f7f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f7030b16716712070d04ad938e9762b8756f7f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=26f7030b16716712070d04ad938e9762b8756f7f", "patch": "@@ -46,13 +46,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     {\n         self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n-        Canonicalizer::canonicalize(\n-            value,\n-            Some(self),\n-            self.tcx,\n-            &CanonicalizeAllFreeRegions,\n-            query_state,\n-        )\n+        Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)\n     }\n \n     /// Canonicalizes a query *response* `V`. When we canonicalize a\n@@ -87,7 +81,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeQueryResponse,\n             &mut query_state,\n@@ -101,7 +95,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeUserTypeAnnotation,\n             &mut query_state,\n@@ -133,7 +127,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeFreeRegionsOtherThanStatic,\n             query_state,\n@@ -275,7 +269,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n }\n \n struct Canonicalizer<'cx, 'tcx> {\n-    infcx: Option<&'cx InferCtxt<'cx, 'tcx>>,\n+    infcx: &'cx InferCtxt<'cx, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     variables: SmallVec<[CanonicalVarInfo<'tcx>; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n@@ -316,7 +310,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ty::ReVar(vid) => {\n                 let resolved_vid = self\n                     .infcx\n-                    .unwrap()\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n@@ -343,7 +336,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         match *t.kind() {\n             ty::Infer(ty::TyVar(vid)) => {\n                 debug!(\"canonical: type var found with vid {:?}\", vid);\n-                match self.infcx.unwrap().probe_ty_var(vid) {\n+                match self.infcx.probe_ty_var(vid) {\n                     // `t` could be a float / int variable; canonicalize that instead.\n                     Ok(t) => {\n                         debug!(\"(resolved to {:?})\", t);\n@@ -429,7 +422,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         match ct.val {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n-                match self.infcx.unwrap().probe_const_var(vid) {\n+                match self.infcx.probe_const_var(vid) {\n                     Ok(c) => {\n                         debug!(\"(resolved to {:?})\", c);\n                         return self.fold_const(c);\n@@ -476,7 +469,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// `canonicalize_query` and `canonicalize_response`.\n     fn canonicalize<V>(\n         value: V,\n-        infcx: Option<&InferCtxt<'_, 'tcx>>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n         tcx: TyCtxt<'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n@@ -610,7 +603,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n     /// Returns the universe in which `vid` is defined.\n     fn region_var_universe(&self, vid: ty::RegionVid) -> ty::UniverseIndex {\n-        self.infcx.unwrap().inner.borrow_mut().unwrap_region_constraints().var_universe(vid)\n+        self.infcx.inner.borrow_mut().unwrap_region_constraints().var_universe(vid)\n     }\n \n     /// Creates a canonical variable (with the given `info`)\n@@ -631,7 +624,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// *that*. Otherwise, create a new canonical variable for\n     /// `ty_var`.\n     fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n-        let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n+        let infcx = self.infcx;\n         let bound_to = infcx.shallow_resolve(ty_var);\n         if bound_to != ty_var {\n             self.fold_ty(bound_to)\n@@ -650,7 +643,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         info: CanonicalVarInfo<'tcx>,\n         const_var: &'tcx ty::Const<'tcx>,\n     ) -> &'tcx ty::Const<'tcx> {\n-        let infcx = self.infcx.expect(\"encountered const-var without infcx\");\n+        let infcx = self.infcx;\n         let bound_to = infcx.shallow_resolve(const_var);\n         if bound_to != const_var {\n             self.fold_const(bound_to)"}]}