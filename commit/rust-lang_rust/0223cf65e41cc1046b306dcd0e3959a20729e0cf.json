{"sha": "0223cf65e41cc1046b306dcd0e3959a20729e0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjNjZjY1ZTQxY2MxMDQ2YjMwNmRjZDBlMzk1OWEyMDcyOWUwY2Y=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-29T06:49:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:42Z"}, "message": "std::rand: Add ReseedingRng, which will reseed an RNG after it generates a certain number of bytes.\n\nIt is an \"RNG adaptor\" and so any RNG can be wrapped to have this behaviour.", "tree": {"sha": "fe56fd6db779bbabcb2e8ea5f3f62ca0ff99e4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe56fd6db779bbabcb2e8ea5f3f62ca0ff99e4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0223cf65e41cc1046b306dcd0e3959a20729e0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0223cf65e41cc1046b306dcd0e3959a20729e0cf", "html_url": "https://github.com/rust-lang/rust/commit/0223cf65e41cc1046b306dcd0e3959a20729e0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0223cf65e41cc1046b306dcd0e3959a20729e0cf/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39a215f270bc8c958a19cc9f693720232340cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39a215f270bc8c958a19cc9f693720232340cbc", "html_url": "https://github.com/rust-lang/rust/commit/f39a215f270bc8c958a19cc9f693720232340cbc"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "9fb6863692b43018d974865126cad04a433da18a", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0223cf65e41cc1046b306dcd0e3959a20729e0cf/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0223cf65e41cc1046b306dcd0e3959a20729e0cf/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=0223cf65e41cc1046b306dcd0e3959a20729e0cf", "patch": "@@ -62,6 +62,7 @@ pub mod distributions;\n pub mod isaac;\n pub mod os;\n pub mod reader;\n+pub mod reseeding;\n \n /// A type that can be randomly generated using an Rng\n pub trait Rand {"}, {"sha": "d471a5e4e10ebf55550ac64b2eb9000cdedf9407", "filename": "src/libstd/rand/reseeding.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/0223cf65e41cc1046b306dcd0e3959a20729e0cf/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0223cf65e41cc1046b306dcd0e3959a20729e0cf/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=0223cf65e41cc1046b306dcd0e3959a20729e0cf", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A wrapper around another RNG that reseeds it after it\n+//! generates a certain number of random bytes.\n+\n+use rand::Rng;\n+use default::Default;\n+\n+/// How many bytes of entropy the underling RNG is allowed to generate\n+/// before it is reseeded.\n+static DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n+\n+/// A wrapper around any RNG which reseeds the underlying RNG after it\n+/// has generated a certain number of random bytes.\n+pub struct ReseedingRng<R, Rsdr> {\n+    priv rng: R,\n+    priv generation_threshold: uint,\n+    priv bytes_generated: uint,\n+    /// Controls the behaviour when reseeding the RNG.\n+    reseeder: Rsdr\n+}\n+\n+impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {\n+    /// Create a new `ReseedingRng` with the given parameters.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `rng`: the random number generator to use.\n+    /// * `generation_threshold`: the number of bytes of entropy at which to reseed the RNG.\n+    /// * `reseeder`: the reseeding object to use.\n+    pub fn new(rng: R, generation_threshold: uint, reseeder: Rsdr) -> ReseedingRng<R,Rsdr> {\n+        ReseedingRng {\n+            rng: rng,\n+            generation_threshold: generation_threshold,\n+            bytes_generated: 0,\n+            reseeder: reseeder\n+        }\n+    }\n+\n+    /// Reseed the internal RNG if the number of bytes that have been\n+    /// generated exceed the threshold.\n+    pub fn reseed_if_necessary(&mut self) {\n+        if self.bytes_generated >= self.generation_threshold {\n+            self.reseeder.reseed(&mut self.rng);\n+            self.bytes_generated = 0;\n+        }\n+    }\n+}\n+\n+\n+impl<R: Rng, Rsdr: Reseeder<R>> Rng for ReseedingRng<R, Rsdr> {\n+    fn next_u32(&mut self) -> u32 {\n+        self.reseed_if_necessary();\n+        self.bytes_generated += 4;\n+        self.rng.next_u32()\n+    }\n+\n+    fn next_u64(&mut self) -> u64 {\n+        self.reseed_if_necessary();\n+        self.bytes_generated += 8;\n+        self.rng.next_u64()\n+    }\n+\n+    fn fill_bytes(&mut self, dest: &mut [u8]) {\n+        self.reseed_if_necessary();\n+        self.bytes_generated += dest.len();\n+        self.fill_bytes(dest)\n+    }\n+}\n+\n+/// Something that can be used to reseed an RNG via `ReseedingRng`.\n+pub trait Reseeder<R> {\n+    /// Reseed the given RNG.\n+    fn reseed(&mut self, rng: &mut R);\n+}\n+\n+/// Reseed an RNG using a `Default` instance. This reseeds by\n+/// replacing the RNG with the result of a `Default::default` call.\n+pub struct ReseedWithDefault;\n+\n+impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n+    fn reseed(&mut self, rng: &mut R) {\n+        *rng = Default::default();\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use rand::Rng;\n+    use default::Default;\n+\n+    struct Counter {\n+        i: u32\n+    }\n+\n+    impl Rng for Counter {\n+        fn next_u32(&mut self) -> u32 {\n+            self.i += 1;\n+            // very random\n+            self.i - 1\n+        }\n+    }\n+    impl Default for Counter {\n+        fn default() -> Counter {\n+            Counter { i: 0 }\n+        }\n+    }\n+\n+    #[test]\n+    fn test_reseeding() {\n+        let mut rs = ReseedingRng::from_options(Counter {i:0}, 100, ReseedWithDefault);\n+\n+        let mut i = 0;\n+        for _ in range(0, 1000) {\n+            assert_eq!(rs.next_u32(), i % 100);\n+            i += 1;\n+        }\n+    }\n+}"}]}