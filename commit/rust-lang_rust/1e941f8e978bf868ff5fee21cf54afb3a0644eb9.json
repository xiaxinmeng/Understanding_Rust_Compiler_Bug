{"sha": "1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOTQxZjhlOTc4YmY4NjhmZjVmZWUyMWNmNTRhZmIzYTA2NDRlYjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-17T23:57:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T00:23:29Z"}, "message": "Port trans to use visit_all_items: this was mostly straight-forward, but\nnoteworthy because trans got mildly simpler, since it doesn't have to\nensure that we walk the contents of all things just to find all the\nhidden items.", "tree": {"sha": "3cc97b3879338c16e844d3656235bb4ddf4de730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc97b3879338c16e844d3656235bb4ddf4de730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "html_url": "https://github.com/rust-lang/rust/commit/1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e941f8e978bf868ff5fee21cf54afb3a0644eb9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b046e16e9f5c258fa92e44c05b287834ba555e", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b046e16e9f5c258fa92e44c05b287834ba555e", "html_url": "https://github.com/rust-lang/rust/commit/98b046e16e9f5c258fa92e44c05b287834ba555e"}], "stats": {"total": 62, "additions": 10, "deletions": 52}, "files": [{"sha": "17047333d3b11360a416c35ae705e6a5d8185104", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1e941f8e978bf868ff5fee21cf54afb3a0644eb9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e941f8e978bf868ff5fee21cf54afb3a0644eb9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "patch": "@@ -100,8 +100,7 @@ use syntax::parse::token::InternedString;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use rustc_front;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n use syntax::ast;\n \n@@ -1300,7 +1299,7 @@ impl<'v> Visitor<'v> for FindNestedReturn {\n             hir::ExprRet(..) => {\n                 self.found = true;\n             }\n-            _ => visit::walk_expr(self, e)\n+            _ => intravisit::walk_expr(self, e)\n         }\n     }\n }\n@@ -1369,7 +1368,7 @@ fn has_nested_returns(tcx: &ty::ctxt, cfg: &cfg::CFG, blk_id: ast::NodeId) -> bo\n             Some(hir_map::NodeExpr(ex)) => {\n                 if let hir::ExprRet(Some(ref ret_expr)) = ex.node {\n                     let mut visitor = FindNestedReturn::new();\n-                    visit::walk_expr(&mut visitor, &**ret_expr);\n+                    intravisit::walk_expr(&mut visitor, &**ret_expr);\n                     if visitor.found {\n                         return true;\n                     }\n@@ -2302,11 +2301,6 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n                 }\n             }\n         }\n-\n-        // Be sure to travel more than just one layer deep to catch nested\n-        // items in blocks and such.\n-        let mut v = TransItemVisitor{ ccx: ccx };\n-        v.visit_block(&**body);\n       }\n       hir::ItemImpl(_, _, ref generics, _, _, ref impl_items) => {\n         meth::trans_impl(ccx,\n@@ -2315,8 +2309,9 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n                          generics,\n                          item.id);\n       }\n-      hir::ItemMod(ref m) => {\n-        trans_mod(&ccx.rotate(), m);\n+      hir::ItemMod(_) => {\n+          // modules have no equivalent at runtime, they just affect\n+          // the mangled names of things contained within\n       }\n       hir::ItemEnum(ref enum_definition, ref gens) => {\n         if gens.ty_params.is_empty() {\n@@ -2325,16 +2320,9 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n             enum_variant_size_lint(ccx, enum_definition, item.span, item.id);\n         }\n       }\n-      hir::ItemConst(_, ref expr) => {\n-          // Recurse on the expression to catch items in blocks\n-          let mut v = TransItemVisitor{ ccx: ccx };\n-          v.visit_expr(&**expr);\n+      hir::ItemConst(..) => {\n       }\n       hir::ItemStatic(_, m, ref expr) => {\n-          // Recurse on the expression to catch items in blocks\n-          let mut v = TransItemVisitor{ ccx: ccx };\n-          v.visit_expr(&**expr);\n-\n           let g = match consts::trans_static(ccx, m, expr, item.id, &item.attrs) {\n               Ok(g) => g,\n               Err(err) => ccx.tcx().sess.span_fatal(expr.span, &err.description()),\n@@ -2346,30 +2334,11 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n         foreign::trans_foreign_mod(ccx, foreign_mod);\n       }\n       hir::ItemTrait(..) => {\n-        // Inside of this trait definition, we won't be actually translating any\n-        // functions, but the trait still needs to be walked. Otherwise default\n-        // methods with items will not get translated and will cause ICE's when\n-        // metadata time comes around.\n-        let mut v = TransItemVisitor{ ccx: ccx };\n-        visit::walk_item(&mut v, item);\n       }\n       _ => {/* fall through */ }\n     }\n }\n \n-// Translate a module. Doing this amounts to translating the items in the\n-// module; there ends up being no artifact (aside from linkage names) of\n-// separate modules in the compiled program.  That's because modules exist\n-// only as a convenience for humans working with the code, to organize names\n-// and control visibility.\n-pub fn trans_mod(ccx: &CrateContext, m: &hir::Mod) {\n-    let _icx = push_ctxt(\"trans_mod\");\n-    for item in &m.items {\n-        trans_item(ccx, &**item);\n-    }\n-}\n-\n-\n // only use this for foreign function ABIs and glue, use `register_fn` for Rust functions\n pub fn register_fn_llvmty(ccx: &CrateContext,\n                           sp: Span,\n@@ -2994,10 +2963,10 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // First, verify intrinsics.\n         intrinsic::check_intrinsics(&ccx);\n \n-        // Next, translate the module.\n+        // Next, translate all items.\n         {\n             let _icx = push_ctxt(\"text\");\n-            trans_mod(&ccx, &krate.module);\n+            krate.visit_all_items(&mut TransItemVisitor { ccx: &ccx });\n         }\n     }\n "}, {"sha": "8449d63015ef71447203d29e673a1311cd227826", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e941f8e978bf868ff5fee21cf54afb3a0644eb9/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e941f8e978bf868ff5fee21cf54afb3a0644eb9/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=1e941f8e978bf868ff5fee21cf54afb3a0644eb9", "patch": "@@ -43,7 +43,6 @@ use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n use syntax::ptr::P;\n \n-use rustc_front::visit;\n use rustc_front::hir;\n \n // drop_glue pointer, size, align.\n@@ -63,21 +62,12 @@ pub fn trans_impl(ccx: &CrateContext,\n \n     debug!(\"trans_impl(name={}, id={})\", name, id);\n \n-    let mut v = TransItemVisitor { ccx: ccx };\n-\n     // Both here and below with generic methods, be sure to recurse and look for\n     // items that we need to translate.\n     if !generics.ty_params.is_empty() {\n-        for impl_item in impl_items {\n-            match impl_item.node {\n-                hir::ImplItemKind::Method(..) => {\n-                    visit::walk_impl_item(&mut v, impl_item);\n-                }\n-                _ => {}\n-            }\n-        }\n         return;\n     }\n+\n     for impl_item in impl_items {\n         match impl_item.node {\n             hir::ImplItemKind::Method(ref sig, ref body) => {\n@@ -94,7 +84,6 @@ pub fn trans_impl(ccx: &CrateContext,\n                                        if is_origin { OriginalTranslation } else { InlinedCopy });\n                     }\n                 }\n-                visit::walk_impl_item(&mut v, impl_item);\n             }\n             _ => {}\n         }"}]}