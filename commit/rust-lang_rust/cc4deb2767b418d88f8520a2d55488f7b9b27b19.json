{"sha": "cc4deb2767b418d88f8520a2d55488f7b9b27b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGRlYjI3NjdiNDE4ZDg4Zjg1MjBhMmQ1NTQ4OGY3YjliMjdiMTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-12T17:57:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:52Z"}, "message": "Just forget the DynamicLibrary after getting a hot plugged backend", "tree": {"sha": "7eb6b7ad436a316e704a19ad4db880162c56d318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb6b7ad436a316e704a19ad4db880162c56d318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4deb2767b418d88f8520a2d55488f7b9b27b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4deb2767b418d88f8520a2d55488f7b9b27b19", "html_url": "https://github.com/rust-lang/rust/commit/cc4deb2767b418d88f8520a2d55488f7b9b27b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4deb2767b418d88f8520a2d55488f7b9b27b19/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09aebee21f5d394a62846091b1d08e9d10c3a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09aebee21f5d394a62846091b1d08e9d10c3a67", "html_url": "https://github.com/rust-lang/rust/commit/a09aebee21f5d394a62846091b1d08e9d10c3a67"}], "stats": {"total": 61, "additions": 2, "deletions": 59}, "files": [{"sha": "de5559c8b14404e9ca02ce2755eecaaf75107f1d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 59, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cc4deb2767b418d88f8520a2d55488f7b9b27b19/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4deb2767b418d88f8520a2d55488f7b9b27b19/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cc4deb2767b418d88f8520a2d55488f7b9b27b19", "patch": "@@ -190,63 +190,8 @@ pub mod rustc_trans {\n }\n \n fn load_backend_from_dylib(sess: &Session, backend_name: &str) -> Box<TransCrate> {\n-    use std::sync::mpsc;\n     use std::path::Path;\n-    use syntax::symbol::Symbol;\n-    use rustc::session::config::OutputFilenames;\n-    use rustc::ty::TyCtxt;\n-    use rustc::ty::maps::Providers;\n-    use rustc::middle::cstore::MetadataLoader;\n-    use rustc::dep_graph::DepGraph;\n     use rustc_metadata::dynamic_lib::DynamicLibrary;\n-    /// This prevents the dylib from being unloaded when there is still a TransCrate open\n-    struct ExternTransCrate {\n-        _lib: DynamicLibrary,\n-        trans: Box<TransCrate>,\n-    }\n-\n-    impl Drop for ExternTransCrate {\n-        fn drop(&mut self) {\n-            // Make sure trans gets dropped before _lib as bad things happen otherwise\n-            self.trans = Box::new(::rustc_trans_utils::trans_crate::DummyTransCrate)\n-        }\n-    }\n-\n-    impl TransCrate for ExternTransCrate {\n-        fn print(&self, req: PrintRequest, sess: &Session) {\n-            self.trans.print(req, sess);\n-        }\n-        fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n-            self.trans.target_features((sess))\n-        }\n-\n-        fn metadata_loader(&self) -> Box<MetadataLoader> {\n-            self.trans.metadata_loader()\n-        }\n-        fn provide(&self, providers: &mut Providers) {\n-            self.trans.provide(providers)\n-        }\n-        fn provide_extern(&self, providers: &mut Providers) {\n-            self.trans.provide_extern(providers)\n-        }\n-        fn trans_crate<'a, 'tcx>(\n-            &self,\n-            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-            rx: mpsc::Receiver<Box<Any + Send>>\n-        ) -> Box<Any> {\n-            self.trans.trans_crate(tcx, rx)\n-        }\n-\n-        fn join_trans_and_link(\n-            &self,\n-            trans: Box<Any>,\n-            sess: &Session,\n-            dep_graph: &DepGraph,\n-            outputs: &OutputFilenames,\n-        ) -> Result<(), CompileIncomplete> {\n-            self.trans.join_trans_and_link(trans, sess, dep_graph, outputs)\n-        }\n-    }\n \n     match DynamicLibrary::open(Some(Path::new(backend_name))) {\n         Ok(lib) => {\n@@ -260,10 +205,8 @@ fn load_backend_from_dylib(sess: &Session, backend_name: &str) -> Box<TransCrate\n                     };\n                     __rustc_codegen_backend(sess)\n                 };\n-                Box::new(ExternTransCrate {\n-                    _lib: lib,\n-                    trans\n-                })\n+                ::std::mem::forget(lib);\n+                trans\n             }\n         }\n         Err(err) => {"}]}