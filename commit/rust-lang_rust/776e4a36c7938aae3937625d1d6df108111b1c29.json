{"sha": "776e4a36c7938aae3937625d1d6df108111b1c29", "node_id": "C_kwDOAAsO6NoAKDc3NmU0YTM2Yzc5MzhhYWUzOTM3NjI1ZDFkNmRmMTA4MTExYjFjMjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T21:43:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T21:43:21Z"}, "message": "Rollup merge of #105051 - WaffleLapkin:unmacro, r=oli-obk\n\nReplace a macro with a function\n\n\ud83c\udf38", "tree": {"sha": "907b79a2f2a8ca6d5ca5db7434ddaf72991d44b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/907b79a2f2a8ca6d5ca5db7434ddaf72991d44b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/776e4a36c7938aae3937625d1d6df108111b1c29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhnz5CRBK7hj4Ov3rIwAA/5QIAC37+C79zcMi1qHfo8zwbMFd\n7YsMUJEhsBndsgkLVhtC9ajI5is4SmcEisOVc+P5Dhwy7caJzSOaa7j1c4zBQ4kT\nKxsuQOFSXdP1yj2vZkRMFr6xKbqLZ8hsJiLSxir7+6DOweUkztT+FUdyK8K51yrt\nfrvcsYRsurekAcyBDAIAl05ndQrUtKiYd6q3Ye7+LhFuq5Hay2dtqbYmNJgjlc1G\n7gaexnvZC4tZmlCZ38Ouvnsxj+5OJVv/AxjUSl4xVO6XBzhOCrG2QV56OtTBstce\nJCbvMP/oiGI9AMQFUCIOSLFcFLGtSCj4BjIQzZTmJhcaViUBN7AxI2Ect3M3j04=\n=CcHo\n-----END PGP SIGNATURE-----\n", "payload": "tree 907b79a2f2a8ca6d5ca5db7434ddaf72991d44b6\nparent aa674eefdae7b697bd55b028664f76e754914119\nparent 8c0951511b25dbe911dd7b1f880deaf06aad0351\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669758201 +0100\ncommitter GitHub <noreply@github.com> 1669758201 +0100\n\nRollup merge of #105051 - WaffleLapkin:unmacro, r=oli-obk\n\nReplace a macro with a function\n\n\ud83c\udf38\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/776e4a36c7938aae3937625d1d6df108111b1c29", "html_url": "https://github.com/rust-lang/rust/commit/776e4a36c7938aae3937625d1d6df108111b1c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/776e4a36c7938aae3937625d1d6df108111b1c29/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa674eefdae7b697bd55b028664f76e754914119", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa674eefdae7b697bd55b028664f76e754914119", "html_url": "https://github.com/rust-lang/rust/commit/aa674eefdae7b697bd55b028664f76e754914119"}, {"sha": "8c0951511b25dbe911dd7b1f880deaf06aad0351", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0951511b25dbe911dd7b1f880deaf06aad0351", "html_url": "https://github.com/rust-lang/rust/commit/8c0951511b25dbe911dd7b1f880deaf06aad0351"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "7dad9aa01fafdaac8525b54a8d7724b70b4c4f06", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/776e4a36c7938aae3937625d1d6df108111b1c29/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776e4a36c7938aae3937625d1d6df108111b1c29/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=776e4a36c7938aae3937625d1d6df108111b1c29", "patch": "@@ -1,22 +1,19 @@\n-#![macro_use]\n-\n-macro_rules! max_leb128_len {\n-    ($int_ty:ty) => {\n-        // The longest LEB128 encoding for an integer uses 7 bits per byte.\n-        (std::mem::size_of::<$int_ty>() * 8 + 6) / 7\n-    };\n+/// Returns the length of the longest LEB128 encoding for `T`, assuming `T` is an integer type\n+pub const fn max_leb128_len<T>() -> usize {\n+    // The longest LEB128 encoding for an integer uses 7 bits per byte.\n+    (std::mem::size_of::<T>() * 8 + 6) / 7\n }\n \n-/// Returns the longest LEB128 encoding of all supported integer types.\n-pub const fn max_leb128_len() -> usize {\n-    max_leb128_len!(u128)\n+/// Returns the length of the longest LEB128 encoding of all supported integer types.\n+pub const fn largest_max_leb128_len() -> usize {\n+    max_leb128_len::<u128>()\n }\n \n macro_rules! impl_write_unsigned_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n         pub fn $fn_name(\n-            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],\n+            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len::<$int_ty>()],\n             mut value: $int_ty,\n         ) -> &[u8] {\n             let mut i = 0;\n@@ -90,7 +87,7 @@ macro_rules! impl_write_signed_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n         pub fn $fn_name(\n-            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],\n+            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len::<$int_ty>()],\n             mut value: $int_ty,\n         ) -> &[u8] {\n             let mut i = 0;"}, {"sha": "0afeb86fceb241611867c67ee4820f4e810507ac", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/776e4a36c7938aae3937625d1d6df108111b1c29/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776e4a36c7938aae3937625d1d6df108111b1c29/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=776e4a36c7938aae3937625d1d6df108111b1c29", "patch": "@@ -1,4 +1,4 @@\n-use crate::leb128::{self, max_leb128_len};\n+use crate::leb128::{self, largest_max_leb128_len};\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::convert::TryInto;\n use std::fs::File;\n@@ -32,7 +32,7 @@ impl MemEncoder {\n \n macro_rules! write_leb128 {\n     ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);\n+        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n         let old_len = $enc.data.len();\n \n         if MAX_ENCODED_LEN > $enc.data.capacity() - old_len {\n@@ -186,12 +186,12 @@ impl FileEncoder {\n     pub fn with_capacity<P: AsRef<Path>>(path: P, capacity: usize) -> io::Result<Self> {\n         // Require capacity at least as large as the largest LEB128 encoding\n         // here, so that we don't have to check or handle this on every write.\n-        assert!(capacity >= max_leb128_len());\n+        assert!(capacity >= largest_max_leb128_len());\n \n         // Require capacity small enough such that some capacity checks can be\n         // done using guaranteed non-overflowing add rather than sub, which\n         // shaves an instruction off those code paths (on x86 at least).\n-        assert!(capacity <= usize::MAX - max_leb128_len());\n+        assert!(capacity <= usize::MAX - largest_max_leb128_len());\n \n         // Create the file for reading and writing, because some encoders do both\n         // (e.g. the metadata encoder when -Zmeta-stats is enabled)\n@@ -411,7 +411,7 @@ impl Drop for FileEncoder {\n \n macro_rules! file_encoder_write_leb128 {\n     ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);\n+        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n         // We ensure this during `FileEncoder` construction.\n         debug_assert!($enc.capacity() >= MAX_ENCODED_LEN);"}]}