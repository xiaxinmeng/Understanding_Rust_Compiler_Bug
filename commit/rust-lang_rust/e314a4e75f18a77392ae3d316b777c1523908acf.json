{"sha": "e314a4e75f18a77392ae3d316b777c1523908acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTRhNGU3NWYxOGE3NzM5MmFlM2QzMTZiNzc3YzE1MjM5MDhhY2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-15T22:41:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T07:06:28Z"}, "message": "fix accessing unsized fields", "tree": {"sha": "e43803e55ee6dd1066e2acfe7cdc8b67daf96085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43803e55ee6dd1066e2acfe7cdc8b67daf96085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e314a4e75f18a77392ae3d316b777c1523908acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e314a4e75f18a77392ae3d316b777c1523908acf", "html_url": "https://github.com/rust-lang/rust/commit/e314a4e75f18a77392ae3d316b777c1523908acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e314a4e75f18a77392ae3d316b777c1523908acf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e137a796685c149903fcaa52444ab0d6a949b00", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e137a796685c149903fcaa52444ab0d6a949b00", "html_url": "https://github.com/rust-lang/rust/commit/1e137a796685c149903fcaa52444ab0d6a949b00"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "e8321adb4faf73531bb62bcbb7557b771d37def3", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e314a4e75f18a77392ae3d316b777c1523908acf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e314a4e75f18a77392ae3d316b777c1523908acf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e314a4e75f18a77392ae3d316b777c1523908acf", "patch": "@@ -283,31 +283,32 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         };\n         // the only way conversion can fail if is this is an array (otherwise we already panicked\n         // above). In that case, all fields are equal.\n-        let field = base.layout.field(self, usize::try_from(field).unwrap_or(0))?;\n+        let field_layout = base.layout.field(self, usize::try_from(field).unwrap_or(0))?;\n \n         // Adjust offset\n-        let offset = if field.is_unsized() {\n-            let vtable = match base.extra {\n-                PlaceExtra::Vtable(tab) => tab,\n-                _ => bug!(\"Unsized place with unsized field must come with vtable\"),\n-            };\n-            let (_, align) = self.read_size_and_align_from_vtable(vtable)?;\n-            offset.abi_align(align)\n-        } else {\n-            // No adjustment needed\n-            offset\n+        let offset = match base.extra {\n+            PlaceExtra::Vtable(vtable) => {\n+                let (_, align) = self.read_size_and_align_from_vtable(vtable)?;\n+                // FIXME: Is this right? Should we always do this, or only when actually\n+                // accessing the field to which the vtable applies?\n+                offset.abi_align(align)\n+            }\n+            _ => {\n+                // No adjustment needed\n+                offset\n+            }\n         };\n \n         let ptr = base.ptr.ptr_offset(offset, self)?;\n-        let align = base.align.min(field.align);\n-        let extra = if !field.is_unsized() {\n+        let align = base.align.min(field_layout.align);\n+        let extra = if !field_layout.is_unsized() {\n             PlaceExtra::None\n         } else {\n             assert!(base.extra != PlaceExtra::None, \"Expected fat ptr\");\n             base.extra\n         };\n \n-        Ok(MPlaceTy { mplace: MemPlace { ptr, align, extra }, layout: field })\n+        Ok(MPlaceTy { mplace: MemPlace { ptr, align, extra }, layout: field_layout })\n     }\n \n     pub fn mplace_subslice("}]}