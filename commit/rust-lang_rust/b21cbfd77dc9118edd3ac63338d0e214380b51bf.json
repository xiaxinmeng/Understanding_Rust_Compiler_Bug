{"sha": "b21cbfd77dc9118edd3ac63338d0e214380b51bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWNiZmQ3N2RjOTExOGVkZDNhYzYzMzM4ZDBlMjE0MzgwYjUxYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:28:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:28:07Z"}, "message": "Fold LinkerInfo into CrateInfo", "tree": {"sha": "33425ff48854883bb58e192c143caf0156c3f55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33425ff48854883bb58e192c143caf0156c3f55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21cbfd77dc9118edd3ac63338d0e214380b51bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21cbfd77dc9118edd3ac63338d0e214380b51bf", "html_url": "https://github.com/rust-lang/rust/commit/b21cbfd77dc9118edd3ac63338d0e214380b51bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21cbfd77dc9118edd3ac63338d0e214380b51bf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4a12f95c13580527eb6e857268ee88c1e444d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a12f95c13580527eb6e857268ee88c1e444d75", "html_url": "https://github.com/rust-lang/rust/commit/b4a12f95c13580527eb6e857268ee88c1e444d75"}], "stats": {"total": 134, "additions": 48, "deletions": 86}, "files": [{"sha": "59447e9de13507cf1a8ec5c0b2c3f103960b84e7", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b21cbfd77dc9118edd3ac63338d0e214380b51bf", "patch": "@@ -1718,7 +1718,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         path,\n         flavor,\n         crt_objects_fallback,\n-        &codegen_results.crate_info.linker_info,\n+        &codegen_results.crate_info.target_cpu,\n     );\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n@@ -1729,7 +1729,11 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // dynamic library.\n     // Must be passed before any libraries to prevent the symbols to export from being thrown away,\n     // at least on some platforms (e.g. windows-gnu).\n-    cmd.export_symbols(tmpdir, crate_type);\n+    cmd.export_symbols(\n+        tmpdir,\n+        crate_type,\n+        &codegen_results.crate_info.exported_symbols[&crate_type],\n+    );\n \n     // Can be used for adding custom CRT objects or overriding order-dependent options above.\n     // FIXME: In practice built-in target specs use this for arbitrary order-independent options,\n@@ -1901,10 +1905,10 @@ fn add_order_independent_options(\n     if flavor == LinkerFlavor::PtxLinker {\n         // Provide the linker with fallback to internal `target-cpu`.\n         cmd.arg(\"--fallback-arch\");\n-        cmd.arg(&codegen_results.crate_info.linker_info.target_cpu);\n+        cmd.arg(&codegen_results.crate_info.target_cpu);\n     } else if flavor == LinkerFlavor::BpfLinker {\n         cmd.arg(\"--cpu\");\n-        cmd.arg(&codegen_results.crate_info.linker_info.target_cpu);\n+        cmd.arg(&codegen_results.crate_info.target_cpu);\n         cmd.arg(\"--cpu-features\");\n         cmd.arg(match &sess.opts.cg.target_feature {\n             feat if !feat.is_empty() => feat,"}, {"sha": "9e1c6a169f1525235ac04d526f6a54dd944cd6b4", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 29, "deletions": 77, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=b21cbfd77dc9118edd3ac63338d0e214380b51bf", "patch": "@@ -10,7 +10,6 @@ use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n use std::{env, mem, str};\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::ty::TyCtxt;\n@@ -36,28 +35,6 @@ pub fn disable_localization(linker: &mut Command) {\n     linker.env(\"VSLANG\", \"1033\");\n }\n \n-/// For all the linkers we support, and information they might\n-/// need out of the shared crate context before we get rid of it.\n-#[derive(Debug, Encodable, Decodable)]\n-pub struct LinkerInfo {\n-    pub(super) target_cpu: String,\n-    exports: FxHashMap<CrateType, Vec<String>>,\n-}\n-\n-impl LinkerInfo {\n-    pub fn new(tcx: TyCtxt<'_>, target_cpu: String) -> LinkerInfo {\n-        LinkerInfo {\n-            target_cpu,\n-            exports: tcx\n-                .sess\n-                .crate_types()\n-                .iter()\n-                .map(|&c| (c, exported_symbols(tcx, c)))\n-                .collect(),\n-        }\n-    }\n-}\n-\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n@@ -66,7 +43,7 @@ pub fn get_linker<'a>(\n     linker: &Path,\n     flavor: LinkerFlavor,\n     self_contained: bool,\n-    info: &'a LinkerInfo,\n+    target_cpu: &'a str,\n ) -> Box<dyn Linker + 'a> {\n     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n@@ -153,40 +130,26 @@ pub fn get_linker<'a>(\n \n     match flavor {\n         LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n+            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n         }\n-        LinkerFlavor::Em => {\n-            Box::new(EmLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n+        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Gcc => {\n+            Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: false })\n+                as Box<dyn Linker>\n         }\n-        LinkerFlavor::Gcc => Box::new(GccLinker {\n-            cmd,\n-            sess,\n-            exports: &info.exports,\n-            target_cpu: &info.target_cpu,\n-            hinted_static: false,\n-            is_ld: false,\n-        }) as Box<dyn Linker>,\n \n         LinkerFlavor::Lld(LldFlavor::Ld)\n         | LinkerFlavor::Lld(LldFlavor::Ld64)\n-        | LinkerFlavor::Ld => Box::new(GccLinker {\n-            cmd,\n-            sess,\n-            exports: &info.exports,\n-            target_cpu: &info.target_cpu,\n-            hinted_static: false,\n-            is_ld: true,\n-        }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::Lld(LldFlavor::Wasm) => {\n-            Box::new(WasmLd::new(cmd, sess, &info.exports)) as Box<dyn Linker>\n+        | LinkerFlavor::Ld => {\n+            Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: true })\n+                as Box<dyn Linker>\n         }\n \n+        LinkerFlavor::Lld(LldFlavor::Wasm) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n+\n         LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n-        LinkerFlavor::BpfLinker => {\n-            Box::new(BpfLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n-        }\n+        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n     }\n }\n \n@@ -222,7 +185,7 @@ pub trait Linker {\n     fn debuginfo(&mut self, strip: Strip);\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n-    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);\n+    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n@@ -250,7 +213,6 @@ impl dyn Linker + '_ {\n pub struct GccLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    exports: &'a FxHashMap<CrateType, Vec<String>>,\n     target_cpu: &'a str,\n     hinted_static: bool, // Keeps track of the current hinting mode.\n     // Link as ld\n@@ -655,7 +617,7 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]) {\n         // Symbol visibility in object files typically takes care of this.\n         if crate_type == CrateType::Executable && self.sess.target.override_export_symbols.is_none()\n         {\n@@ -684,7 +646,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // Write a plain, newline-separated list of symbols\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n-                for sym in self.exports[&crate_type].iter() {\n+                for sym in symbols {\n                     debug!(\"  _{}\", sym);\n                     writeln!(f, \"_{}\", sym)?;\n                 }\n@@ -699,7 +661,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 // .def file similar to MSVC one but without LIBRARY section\n                 // because LD doesn't like when it's empty\n                 writeln!(f, \"EXPORTS\")?;\n-                for symbol in self.exports[&crate_type].iter() {\n+                for symbol in symbols {\n                     debug!(\"  _{}\", symbol);\n                     writeln!(f, \"  {}\", symbol)?;\n                 }\n@@ -712,9 +674,9 @@ impl<'a> Linker for GccLinker<'a> {\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n                 writeln!(f, \"{{\")?;\n-                if !self.exports[&crate_type].is_empty() {\n+                if !symbols.is_empty() {\n                     writeln!(f, \"  global:\")?;\n-                    for sym in self.exports[&crate_type].iter() {\n+                    for sym in symbols {\n                         debug!(\"    {};\", sym);\n                         writeln!(f, \"    {};\", sym)?;\n                     }\n@@ -814,7 +776,6 @@ impl<'a> Linker for GccLinker<'a> {\n pub struct MsvcLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for MsvcLinker<'a> {\n@@ -988,7 +949,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n     // crates. Upstream rlibs may be linked statically to this dynamic library,\n     // in which case they may continue to transitively be used and hence need\n     // their symbols exported.\n-    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]) {\n         // Symbol visibility takes care of this typically\n         if crate_type == CrateType::Executable {\n             return;\n@@ -1002,7 +963,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n             // straight to exports.\n             writeln!(f, \"LIBRARY\")?;\n             writeln!(f, \"EXPORTS\")?;\n-            for symbol in self.exports[&crate_type].iter() {\n+            for symbol in symbols {\n                 debug!(\"  _{}\", symbol);\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n@@ -1055,7 +1016,6 @@ impl<'a> Linker for MsvcLinker<'a> {\n pub struct EmLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for EmLinker<'a> {\n@@ -1167,9 +1127,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.args(&[\"-s\", \"DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[]\"]);\n     }\n \n-    fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n-        let symbols = &self.exports[&crate_type];\n-\n+    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {\n         debug!(\"EXPORTED SYMBOLS:\");\n \n         self.cmd.arg(\"-s\");\n@@ -1211,15 +1169,10 @@ impl<'a> Linker for EmLinker<'a> {\n pub struct WasmLd<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> WasmLd<'a> {\n-    fn new(\n-        mut cmd: Command,\n-        sess: &'a Session,\n-        exports: &'a FxHashMap<CrateType, Vec<String>>,\n-    ) -> WasmLd<'a> {\n+    fn new(mut cmd: Command, sess: &'a Session) -> WasmLd<'a> {\n         // If the atomics feature is enabled for wasm then we need a whole bunch\n         // of flags:\n         //\n@@ -1252,7 +1205,7 @@ impl<'a> WasmLd<'a> {\n             cmd.arg(\"--export=__tls_align\");\n             cmd.arg(\"--export=__tls_base\");\n         }\n-        WasmLd { cmd, sess, exports }\n+        WasmLd { cmd, sess }\n     }\n }\n \n@@ -1368,8 +1321,8 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn no_default_libraries(&mut self) {}\n \n-    fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n-        for sym in self.exports[&crate_type].iter() {\n+    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {\n+        for sym in symbols {\n             self.cmd.arg(\"--export\").arg(&sym);\n         }\n \n@@ -1392,7 +1345,7 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n-fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n+pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();\n     }\n@@ -1521,7 +1474,7 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn control_flow_guard(&mut self) {}\n \n-    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType) {}\n+    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType, _symbols: &[String]) {}\n \n     fn subsystem(&mut self, _subsystem: &str) {}\n \n@@ -1535,7 +1488,6 @@ impl<'a> Linker for PtxLinker<'a> {\n pub struct BpfLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for BpfLinker<'a> {\n@@ -1622,11 +1574,11 @@ impl<'a> Linker for BpfLinker<'a> {\n \n     fn control_flow_guard(&mut self) {}\n \n-    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+    fn export_symbols(&mut self, tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {\n         let path = tmpdir.join(\"symbols\");\n         let res: io::Result<()> = try {\n             let mut f = BufWriter::new(File::create(&path)?);\n-            for sym in self.exports[&crate_type].iter() {\n+            for sym in symbols {\n                 writeln!(f, \"{}\", sym)?;\n             }\n         };"}, {"sha": "7df17bd20b99208873e69d284c42c835e3108ab2", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=b21cbfd77dc9118edd3ac63338d0e214380b51bf", "patch": "@@ -1,4 +1,3 @@\n-use crate::back::linker::LinkerInfo;\n use crate::back::write::{\n     compute_per_cgu_lto_type, start_async_codegen, submit_codegened_module_to_llvm,\n     submit_post_lto_module_to_llvm, submit_pre_lto_module_to_llvm, ComputedLtoType, OngoingCodegen,\n@@ -756,7 +755,12 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n \n impl CrateInfo {\n     pub fn new(tcx: TyCtxt<'_>, target_cpu: String) -> CrateInfo {\n-        let linker_info = LinkerInfo::new(tcx, target_cpu);\n+        let exported_symbols = tcx\n+            .sess\n+            .crate_types()\n+            .iter()\n+            .map(|&c| (c, crate::back::linker::exported_symbols(tcx, c)))\n+            .collect();\n         let local_crate_name = tcx.crate_name(LOCAL_CRATE);\n         let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n@@ -772,7 +776,8 @@ impl CrateInfo {\n         });\n \n         let mut info = CrateInfo {\n-            linker_info,\n+            target_cpu,\n+            exported_symbols,\n             local_crate_name,\n             compiler_builtins: None,\n             profiler_runtime: None,"}, {"sha": "b6ee70c419b160e224a8dcb60067c8ff9e240e06", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21cbfd77dc9118edd3ac63338d0e214380b51bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=b21cbfd77dc9118edd3ac63338d0e214380b51bf", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::cstore::{self, CrateSource};\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::Providers;\n-use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n+use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n@@ -135,7 +135,8 @@ impl From<&cstore::NativeLib> for NativeLib {\n /// and the corresponding properties without referencing information outside of a `CrateInfo`.\n #[derive(Debug, Encodable, Decodable)]\n pub struct CrateInfo {\n-    pub linker_info: back::linker::LinkerInfo,\n+    pub target_cpu: String,\n+    pub exported_symbols: FxHashMap<CrateType, Vec<String>>,\n     pub local_crate_name: Symbol,\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,"}]}