{"sha": "ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMGVlNGM2NDU0ZmQyNzI0NTdlOThjMjBhNDYxZWM5ZjkzYjJhYzQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-16T05:12:12Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T17:08:26Z"}, "message": "syntax: Remove uses of #[feature(slice_patterns)]", "tree": {"sha": "5f77166d75b390418365c6f16be787ca7a23f0ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f77166d75b390418365c6f16be787ca7a23f0ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "html_url": "https://github.com/rust-lang/rust/commit/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4541b02a33e7c4fdcc8f50459bad6ab99463919", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4541b02a33e7c4fdcc8f50459bad6ab99463919", "html_url": "https://github.com/rust-lang/rust/commit/a4541b02a33e7c4fdcc8f50459bad6ab99463919"}], "stats": {"total": 120, "additions": 73, "deletions": 47}, "files": [{"sha": "366806bc19b4962882552eb27725679acb9d1177", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -284,8 +284,15 @@ impl<'a> fold::Folder for CfgAttrFolder<'a> {\n             return fold::noop_fold_attribute(attr, self);\n         }\n \n-        let (cfg, mi) = match attr.meta_item_list() {\n-            Some([ref cfg, ref mi]) => (cfg, mi),\n+        let attr_list = match attr.meta_item_list() {\n+            Some(attr_list) => attr_list,\n+            None => {\n+                self.diag.span_err(attr.span, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n+                return None;\n+            }\n+        };\n+        let (cfg, mi) = match (attr_list.len(), attr_list.get(0), attr_list.get(1)) {\n+            (2, Some(cfg), Some(mi)) => (cfg, mi),\n             _ => {\n                 self.diag.span_err(attr.span, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n                 return None;"}, {"sha": "ac25a303182c57b68fbafa5c96024ca7d44f97f0", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -54,8 +54,8 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n                                    span: Span,\n                                    token_tree: &[TokenTree])\n                                    -> Box<MacResult+'cx> {\n-    let code = match token_tree {\n-        [ast::TtToken(_, token::Ident(code, _))] => code,\n+    let code = match (token_tree.len(), token_tree.get(0)) {\n+        (1, Some(&ast::TtToken(_, token::Ident(code, _)))) => code,\n         _ => unreachable!()\n     };\n     with_used_diagnostics(|diagnostics| {\n@@ -84,13 +84,18 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n                                        span: Span,\n                                        token_tree: &[TokenTree])\n                                        -> Box<MacResult+'cx> {\n-    let (code, description) = match token_tree {\n-        [ast::TtToken(_, token::Ident(ref code, _))] => {\n+    let (code, description) = match (\n+        token_tree.len(),\n+        token_tree.get(0),\n+        token_tree.get(1),\n+        token_tree.get(2)\n+    ) {\n+        (1, Some(&ast::TtToken(_, token::Ident(ref code, _))), None, None) => {\n             (code, None)\n         },\n-        [ast::TtToken(_, token::Ident(ref code, _)),\n-         ast::TtToken(_, token::Comma),\n-         ast::TtToken(_, token::Literal(token::StrRaw(description, _), None))] => {\n+        (3, Some(&ast::TtToken(_, token::Ident(ref code, _))),\n+            Some(&ast::TtToken(_, token::Comma)),\n+            Some(&ast::TtToken(_, token::Literal(token::StrRaw(description, _), None)))) => {\n             (code, Some(description))\n         }\n         _ => unreachable!()\n@@ -130,8 +135,8 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                                           span: Span,\n                                           token_tree: &[TokenTree])\n                                           -> Box<MacResult+'cx> {\n-    let name = match token_tree {\n-        [ast::TtToken(_, token::Ident(ref name, _))] => name,\n+    let name = match (token_tree.len(), token_tree.get(0)) {\n+        (1, Some(&ast::TtToken(_, token::Ident(ref name, _)))) => name,\n         _ => unreachable!()\n     };\n "}, {"sha": "94cc0d9c493f21dc0abfe6e09b1082138fb26f27", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -106,8 +106,8 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             // }\n \n             let new = {\n-                let other_f = match other_fs {\n-                    [ref o_f] => o_f,\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n                     _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n "}, {"sha": "61eb81c6755e2663e37baf05b61c1804dd5f6902", "filename": "src/libsyntax/ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -29,8 +29,8 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n         cs_fold(\n             true,  // use foldl\n             |cx, span, subexpr, self_f, other_fs| {\n-                let other_f = match other_fs {\n-                    [ref o_f] => o_f,\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n                     _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n \n@@ -46,8 +46,8 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n         cs_fold(\n             true,  // use foldl\n             |cx, span, subexpr, self_f, other_fs| {\n-                let other_f = match other_fs {\n-                    [ref o_f] => o_f,\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n                     _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n "}, {"sha": "dbb779decace27715f6eab03ff5ac36299a91a58", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -150,8 +150,8 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             // }\n \n             let new = {\n-                let other_f = match other_fs {\n-                    [ref o_f] => o_f,\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n                     _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n \n@@ -208,8 +208,8 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             get use the binops to avoid auto-deref dereferencing too many\n             layers of pointers, if the type includes pointers.\n             */\n-            let other_f = match other_fs {\n-                [ref o_f] => o_f,\n+            let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                (1, Some(o_f)) => o_f,\n                 _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             };\n "}, {"sha": "b9835eda791f7f004589c170bc7b600d76eb1fab", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -56,8 +56,8 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n }\n \n fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n-    let state_expr = match substr.nonself_args {\n-        [ref state_expr] => state_expr,\n+    let state_expr = match (substr.nonself_args.len(), substr.nonself_args.get(0)) {\n+        (1, Some(o_f)) => o_f,\n         _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(Hash)`\")\n     };\n     let call_hash = |span, thing_expr| {"}, {"sha": "a972cfe135511d99f6961edc9bc6fc37ad5a4dd7", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -71,8 +71,8 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n }\n \n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n-    let n = match substr.nonself_args {\n-        [ref n] => n,\n+    let n = match (substr.nonself_args.len(), substr.nonself_args.get(0)) {\n+        (1, Some(o_f)) => o_f,\n         _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(FromPrimitive)`\")\n     };\n "}, {"sha": "d1db956adb3f5a13f28576ff6ac5ceab1802a800", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -1962,8 +1962,8 @@ foo_module!();\n                 \"xx\" == string\n             }).collect();\n         let cxbinds: &[&ast::Ident] = &cxbinds[..];\n-        let cxbind = match cxbinds {\n-            [b] => b,\n+        let cxbind = match (cxbinds.len(), cxbinds.get(0)) {\n+            (1, Some(b)) => *b,\n             _ => panic!(\"expected just one binding for ext_cx\")\n         };\n         let resolved_binding = mtwt::resolve(*cxbind);"}, {"sha": "646e6fec405534de3f62a18ae55dc8f57b6ff83c", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -28,12 +28,11 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n         return base::DummyResult::any(sp);\n     }\n \n-\n-    match tt {\n-        [ast::TtToken(_, ref tok)] if tok.is_keyword(keywords::True) => {\n+    match (tt.len(), tt.first()) {\n+        (1, Some(&ast::TtToken(_, ref tok))) if tok.is_keyword(keywords::True) => {\n             cx.set_trace_macros(true);\n         }\n-        [ast::TtToken(_, ref tok)] if tok.is_keyword(keywords::False) => {\n+        (1, Some(&ast::TtToken(_, ref tok))) if tok.is_keyword(keywords::False) => {\n             cx.set_trace_macros(false);\n         }\n         _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),"}, {"sha": "a70707b3ea146bc1dd08a1ee32185a455232d1e4", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -35,7 +35,6 @@\n #![feature(path_ext)]\n #![feature(str_char)]\n #![feature(into_cow)]\n-#![feature(slice_patterns)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "51fb09a7526e6f9e3d9596b334cfda981e81814e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ee4c6454fd272457e98c20a461ec9f93b2ac4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ca0ee4c6454fd272457e98c20a461ec9f93b2ac4", "patch": "@@ -834,28 +834,44 @@ mod test {\n     fn string_to_tts_macro () {\n         let tts = string_to_tts(\"macro_rules! zip (($a)=>($a))\".to_string());\n         let tts: &[ast::TokenTree] = &tts[..];\n-        match tts {\n-            [ast::TtToken(_, token::Ident(name_macro_rules, token::Plain)),\n-             ast::TtToken(_, token::Not),\n-             ast::TtToken(_, token::Ident(name_zip, token::Plain)),\n-             ast::TtDelimited(_, ref macro_delimed)]\n+\n+        match (tts.len(), tts.get(0), tts.get(1), tts.get(2), tts.get(3)) {\n+            (\n+                4,\n+                Some(&ast::TtToken(_, token::Ident(name_macro_rules, token::Plain))),\n+                Some(&ast::TtToken(_, token::Not)),\n+                Some(&ast::TtToken(_, token::Ident(name_zip, token::Plain))),\n+                Some(&ast::TtDelimited(_, ref macro_delimed)),\n+            )\n             if name_macro_rules.as_str() == \"macro_rules\"\n             && name_zip.as_str() == \"zip\" => {\n-                match &macro_delimed.tts[..] {\n-                    [ast::TtDelimited(_, ref first_delimed),\n-                     ast::TtToken(_, token::FatArrow),\n-                     ast::TtDelimited(_, ref second_delimed)]\n+                let tts = &macro_delimed.tts[..];\n+                match (tts.len(), tts.get(0), tts.get(1), tts.get(2)) {\n+                    (\n+                        3,\n+                        Some(&ast::TtDelimited(_, ref first_delimed)),\n+                        Some(&ast::TtToken(_, token::FatArrow)),\n+                        Some(&ast::TtDelimited(_, ref second_delimed)),\n+                    )\n                     if macro_delimed.delim == token::Paren => {\n-                        match &first_delimed.tts[..] {\n-                            [ast::TtToken(_, token::Dollar),\n-                             ast::TtToken(_, token::Ident(name, token::Plain))]\n+                        let tts = &first_delimed.tts[..];\n+                        match (tts.len(), tts.get(0), tts.get(1)) {\n+                            (\n+                                2,\n+                                Some(&ast::TtToken(_, token::Dollar)),\n+                                Some(&ast::TtToken(_, token::Ident(name, token::Plain))),\n+                            )\n                             if first_delimed.delim == token::Paren\n                             && name.as_str() == \"a\" => {},\n                             _ => panic!(\"value 3: {:?}\", **first_delimed),\n                         }\n-                        match &second_delimed.tts[..] {\n-                            [ast::TtToken(_, token::Dollar),\n-                             ast::TtToken(_, token::Ident(name, token::Plain))]\n+                        let tts = &second_delimed.tts[..];\n+                        match (tts.len(), tts.get(0), tts.get(1)) {\n+                            (\n+                                2,\n+                                Some(&ast::TtToken(_, token::Dollar)),\n+                                Some(&ast::TtToken(_, token::Ident(name, token::Plain))),\n+                            )\n                             if second_delimed.delim == token::Paren\n                             && name.as_str() == \"a\" => {},\n                             _ => panic!(\"value 4: {:?}\", **second_delimed),"}]}