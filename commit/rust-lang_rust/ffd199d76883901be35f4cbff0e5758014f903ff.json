{"sha": "ffd199d76883901be35f4cbff0e5758014f903ff", "node_id": "C_kwDOAAsO6NoAKGZmZDE5OWQ3Njg4MzkwMWJlMzVmNGNiZmYwZTU3NTgwMTRmOTAzZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-22T14:32:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-22T14:32:48Z"}, "message": "Rollup merge of #85967 - atopia:update-l4re-target, r=petrochenkov\n\nadd support for the l4-bender linker on the x86_64-unknown-l4re-uclibc tier 3 target\n\nThis PR contains the work by ```@humenda``` to update support for the `x86_64-unknown-l4re-uclibc` tier 3 target (published at [humenda/rust](https://github.com/humenda/rust)), rebased and adapted to current rust in follow up commits by myself. The publishing of the rebased changes is authorized and preferred by the original author. As the goal was to distort the original work as little as possible, individual commits introduce changes that are incompatible to the newer code base that the changes were rebased on. These incompatibilities have been remedied in follow up commits, so that the PR as a whole should result in a clean update of the target.\nIf you prefer another strategy to mainline these changes while preserving attribution, please let me know.", "tree": {"sha": "737a0578087ec7ac2190b6106101a1d28cfd82a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737a0578087ec7ac2190b6106101a1d28cfd82a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd199d76883901be35f4cbff0e5758014f903ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7BWQCRBK7hj4Ov3rIwAAFK4IAB7qCe4OwzBi+xgfvszDN267\ngW0s0iiD+LzP1RO2JKwLurcn634hQGbRnWTTDTG3T4s82XvsLnqItEwvbKnMogPA\nBTfm12bwGYYE1sel9FQNOqe4J6tWqnt2/92aRxU1PGmLNbUPtjv7Kg/19zaY1jXI\nmucIsVQY5QEUwin9QVMfAo+csWjKM/DwRV7Jz1uzmAeAuAr77mWiWu5i3TfKgAQj\n4P7ycqX0v0T6DbIMQE5aGC0qtwH6XbLrXsSzqVeW40O5K13Vc8Vqw6ZWl1P/rfUM\n9+kua4a4RB4/ORlisCWvVrbWG41ddhDRZnfpAvEqmh2+d3otxYCum3s/yWA5Q+8=\n=mB8x\n-----END PGP SIGNATURE-----\n", "payload": "tree 737a0578087ec7ac2190b6106101a1d28cfd82a8\nparent ecf72996eda4f8af19b0ca7235c6f62e0245a313\nparent 29d623528d4c9385c2762fb826b48e4d19470e89\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642861968 +0100\ncommitter GitHub <noreply@github.com> 1642861968 +0100\n\nRollup merge of #85967 - atopia:update-l4re-target, r=petrochenkov\n\nadd support for the l4-bender linker on the x86_64-unknown-l4re-uclibc tier 3 target\n\nThis PR contains the work by ```@humenda``` to update support for the `x86_64-unknown-l4re-uclibc` tier 3 target (published at [humenda/rust](https://github.com/humenda/rust)), rebased and adapted to current rust in follow up commits by myself. The publishing of the rebased changes is authorized and preferred by the original author. As the goal was to distort the original work as little as possible, individual commits introduce changes that are incompatible to the newer code base that the changes were rebased on. These incompatibilities have been remedied in follow up commits, so that the PR as a whole should result in a clean update of the target.\nIf you prefer another strategy to mainline these changes while preserving attribution, please let me know.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd199d76883901be35f4cbff0e5758014f903ff", "html_url": "https://github.com/rust-lang/rust/commit/ffd199d76883901be35f4cbff0e5758014f903ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd199d76883901be35f4cbff0e5758014f903ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}, {"sha": "29d623528d4c9385c2762fb826b48e4d19470e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d623528d4c9385c2762fb826b48e4d19470e89", "html_url": "https://github.com/rust-lang/rust/commit/29d623528d4c9385c2762fb826b48e4d19470e89"}], "stats": {"total": 195, "additions": 178, "deletions": 17}, "files": [{"sha": "ec9fc22bc4d053739f942d3da6a96164f4ba38b3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -1159,6 +1159,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n                     LinkerFlavor::BpfLinker => \"bpf-linker\",\n+                    LinkerFlavor::L4Bender => \"l4-bender\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "3fb56f42b8cca9600befa67d5de5bc4f06f61f21", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 153, "deletions": 1, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -126,7 +126,6 @@ pub fn get_linker<'a>(\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-\n     match flavor {\n         LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n             Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n@@ -149,6 +148,8 @@ pub fn get_linker<'a>(\n         LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n         LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+\n+        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n     }\n }\n \n@@ -1355,6 +1356,157 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n+/// Linker shepherd script for L4Re (Fiasco)\n+pub struct L4Bender<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    hinted_static: bool,\n+}\n+\n+impl<'a> Linker for L4Bender<'a> {\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+        bug!(\"dylibs are not supported on L4Re\");\n+    }\n+    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-PC{}\", lib));\n+    }\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(lib);\n+    }\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+    fn framework_path(&mut self, _: &Path) {\n+        bug!(\"frameworks are not supported on L4Re\");\n+    }\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn full_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+        self.cmd.arg(\"-znow\");\n+    }\n+\n+    fn partial_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+    }\n+\n+    fn no_relro(&mut self) {\n+        self.cmd.arg(\"-znorelro\");\n+    }\n+\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n+\n+    fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n+        panic!(\"Rust dylibs not supported\");\n+    }\n+\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+        bug!(\"frameworks not supported on L4Re\");\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n+        self.cmd.arg(\"--no-whole-archive\");\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(lib).arg(\"--no-whole-archive\");\n+    }\n+\n+    fn gc_sections(&mut self, keep_metadata: bool) {\n+        if !keep_metadata {\n+            self.cmd.arg(\"--gc-sections\");\n+        }\n+    }\n+\n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"--no-gc-sections\");\n+    }\n+\n+    fn optimize(&mut self) {\n+        // GNU-style linkers support optimization with -O. GNU ld doesn't\n+        // need a numeric argument, but other linkers do.\n+        if self.sess.opts.optimize == config::OptLevel::Default\n+            || self.sess.opts.optimize == config::OptLevel::Aggressive\n+        {\n+            self.cmd.arg(\"-O1\");\n+        }\n+    }\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {}\n+            Strip::Debuginfo => {\n+                self.cmd().arg(\"--strip-debug\");\n+            }\n+            Strip::Symbols => {\n+                self.cmd().arg(\"--strip-all\");\n+            }\n+        }\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+        self.cmd.arg(\"-nostdlib\");\n+    }\n+\n+    fn export_symbols(&mut self, _: &Path, _: CrateType, _: &[String]) {\n+        // ToDo, not implemented, copy from GCC\n+        self.sess.warn(\"exporting symbols not implemented yet for L4Bender\");\n+        return;\n+    }\n+\n+    fn subsystem(&mut self, subsystem: &str) {\n+        self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n+    }\n+\n+    fn reset_per_library_state(&mut self) {\n+        self.hint_static(); // Reset to default before returning the composed command line.\n+    }\n+\n+    fn group_start(&mut self) {\n+        self.cmd.arg(\"--start-group\");\n+    }\n+\n+    fn group_end(&mut self) {\n+        self.cmd.arg(\"--end-group\");\n+    }\n+\n+    fn linker_plugin_lto(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn no_crt_objects(&mut self) {}\n+}\n+\n+impl<'a> L4Bender<'a> {\n+    pub fn new(cmd: Command, sess: &'a Session) -> L4Bender<'a> {\n+        L4Bender { cmd: cmd, sess: sess, hinted_static: false }\n+    }\n+\n+    fn hint_static(&mut self) {\n+        if !self.hinted_static {\n+            self.cmd.arg(\"-static\");\n+            self.hinted_static = true;\n+        }\n+    }\n+}\n+\n pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();"}, {"sha": "a756de4c0fc453b7035f87e42d482d13dea18b4e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n+use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n \n use rustc_serialize::json;\n \n@@ -2237,6 +2237,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n+    if cg.linker_flavor == Some(LinkerFlavor::L4Bender)\n+        && !nightly_options::is_unstable_enabled(matches)\n+    {\n+        early_error(\n+            error_format,\n+            \"`l4-bender` linker flavor is unstable, `-Z unstable-options` \\\n+             flag must also be passed to explicitly use it\",\n+        );\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut debugging_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "9e7973f63a9709b0d707990efe4520fd066d4e58", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -1,25 +1,14 @@\n use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n-//use std::process::Command;\n-\n-// Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n-// that a few files also come from L4Re, for these, the function shouldn't be\n-// used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n-//fn get_path_or(filename: &str) -> String {\n-//    let child = Command::new(\"gcc\")\n-//        .arg(format!(\"-print-file-name={}\", filename)).output()\n-//        .expect(\"Failed to execute GCC\");\n-//    String::from_utf8(child.stdout)\n-//        .expect(\"Couldn't read path from GCC\").trim().into()\n-//}\n+use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".to_string(),\n         env: \"uclibc\".to_string(),\n-        linker_flavor: LinkerFlavor::Ld,\n+        linker_flavor: LinkerFlavor::L4Bender,\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: Some(\"ld\".to_string()),\n+        linker: Some(\"l4-bender\".to_string()),\n         linker_is_gnu: false,\n         families: vec![\"unix\".to_string()],\n         ..Default::default()"}, {"sha": "4effb8bacf6d6cfc01e57aa22e48b5330506da98", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -90,6 +90,7 @@ mod windows_uwp_msvc_base;\n pub enum LinkerFlavor {\n     Em,\n     Gcc,\n+    L4Bender,\n     Ld,\n     Msvc,\n     Lld(LldFlavor),\n@@ -160,6 +161,7 @@ macro_rules! flavor_mappings {\n flavor_mappings! {\n     ((LinkerFlavor::Em), \"em\"),\n     ((LinkerFlavor::Gcc), \"gcc\"),\n+    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::PtxLinker), \"ptx-linker\"),"}, {"sha": "64c7c1c5f6fbea3759f58b47f080e7a4cc5de61f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -1,9 +1,12 @@\n-use crate::spec::Target;\n+use crate::spec::{PanicStrategy, Target};\n \n pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n+    base.crt_static_allows_dylibs = false;\n+    base.dynamic_linking = false;\n+    base.panic_strategy = PanicStrategy::Abort;\n \n     Target {\n         llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),"}, {"sha": "7f05c82ac284bdfc9c279c8ff0f4a221a3235464", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffd199d76883901be35f4cbff0e5758014f903ff/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd199d76883901be35f4cbff0e5758014f903ff/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=ffd199d76883901be35f4cbff0e5758014f903ff", "patch": "@@ -39,6 +39,10 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n+    } else if #[cfg(target_os = \"l4re\")] {\n+        // L4Re is unix family but does not yet support unwinding.\n+        #[path = \"dummy.rs\"]\n+        mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;"}]}