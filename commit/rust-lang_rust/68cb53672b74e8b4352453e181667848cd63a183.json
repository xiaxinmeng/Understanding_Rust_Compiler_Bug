{"sha": "68cb53672b74e8b4352453e181667848cd63a183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Y2I1MzY3MmI3NGU4YjQzNTI0NTNlMTgxNjY3ODQ4Y2Q2M2ExODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T21:51:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T05:24:35Z"}, "message": "libsyntax: Stop parsing `const`.", "tree": {"sha": "6569d209622f27f450785080563b982a51e92726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6569d209622f27f450785080563b982a51e92726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68cb53672b74e8b4352453e181667848cd63a183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68cb53672b74e8b4352453e181667848cd63a183", "html_url": "https://github.com/rust-lang/rust/commit/68cb53672b74e8b4352453e181667848cd63a183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68cb53672b74e8b4352453e181667848cd63a183/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "html_url": "https://github.com/rust-lang/rust/commit/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "0f4de9257c99c2a3a9502200275a7bcd04975d5f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68cb53672b74e8b4352453e181667848cd63a183/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68cb53672b74e8b4352453e181667848cd63a183/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=68cb53672b74e8b4352453e181667848cd63a183", "patch": "@@ -60,6 +60,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteConstManagedPointer,\n     ObsoletePurity,\n     ObsoleteStaticMethod,\n+    ObsoleteConstItem,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -203,6 +204,11 @@ pub impl Parser {\n                 \"`static` notation\",\n                 \"`static` is superfluous; remove it\"\n             ),\n+            ObsoleteConstItem => (\n+                \"`const` item\",\n+                \"`const` items are now `static` items; replace `const` with \\\n+                 `static`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "b7cc0b35023866fcf5fb93cd11c375c36fd0ba14", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68cb53672b74e8b4352453e181667848cd63a183/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68cb53672b74e8b4352453e181667848cd63a183/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=68cb53672b74e8b4352453e181667848cd63a183", "patch": "@@ -81,6 +81,7 @@ use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n+use parse::obsolete::{ObsoleteConstItem};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -3563,7 +3564,9 @@ pub impl Parser {\n         let lo = self.span.lo;\n \n         // XXX: Obsolete; remove after snap.\n-        if !self.eat_keyword(&~\"const\") {\n+        if self.eat_keyword(&~\"const\") {\n+            self.obsolete(*self.last_span, ObsoleteConstItem);\n+        } else {\n             self.expect_keyword(&~\"static\");\n         }\n \n@@ -3959,6 +3962,9 @@ pub impl Parser {\n                 (self.is_keyword(&~\"static\") &&\n                     !self.token_is_keyword(&~\"fn\", &self.look_ahead(1)))) {\n             // CONST ITEM\n+            if self.is_keyword(&~\"const\") {\n+                self.obsolete(*self.span, ObsoleteConstItem);\n+            }\n             self.bump();\n             let (ident, item_, extra_attrs) = self.parse_item_const();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,"}]}