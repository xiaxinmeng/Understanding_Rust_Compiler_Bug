{"sha": "d7c7056a488266c8c7e731a3b8e56193022eedac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzcwNTZhNDg4MjY2YzhjN2U3MzFhM2I4ZTU2MTkzMDIyZWVkYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-18T20:35:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-18T20:35:09Z"}, "message": "Auto merge of #4910 - krishna-veerareddy:issue-1205-cmp-nan-against-consts, r=phansch\n\nDetect comparisons with NAN constants\n\nCurrently `cmp_nan` lint doesn't detect comparisons with NaN's if the operands are consts variables so to fix this we evaluate the const variables first before testing for NaN.\n\nchangelog: Detect comparisons with NaN constants in `cmp_nan` lint\n\nFixes #1205", "tree": {"sha": "9748b6f96950dea8b548a9103498b426e91db641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9748b6f96950dea8b548a9103498b426e91db641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c7056a488266c8c7e731a3b8e56193022eedac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c7056a488266c8c7e731a3b8e56193022eedac", "html_url": "https://github.com/rust-lang/rust/commit/d7c7056a488266c8c7e731a3b8e56193022eedac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c7056a488266c8c7e731a3b8e56193022eedac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62396dbf442839fc725d353ef85306da1667caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62396dbf442839fc725d353ef85306da1667caf", "html_url": "https://github.com/rust-lang/rust/commit/c62396dbf442839fc725d353ef85306da1667caf"}, {"sha": "460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "html_url": "https://github.com/rust-lang/rust/commit/460d5a3b5a0c657bce8d00661b1546e78cafe2b1"}], "stats": {"total": 139, "additions": 115, "deletions": 24}, "files": [{"sha": "687776c67986d49e4155685b40b3fc10d985a218", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7056a488266c8c7e731a3b8e56193022eedac/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7056a488266c8c7e731a3b8e56193022eedac/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d7c7056a488266c8c7e731a3b8e56193022eedac", "patch": "@@ -343,12 +343,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n             ExprKind::Binary(ref cmp, ref left, ref right) => {\n                 let op = cmp.node;\n                 if op.is_comparison() {\n-                    if let ExprKind::Path(QPath::Resolved(_, ref path)) = left.kind {\n-                        check_nan(cx, path, expr);\n-                    }\n-                    if let ExprKind::Path(QPath::Resolved(_, ref path)) = right.kind {\n-                        check_nan(cx, path, expr);\n-                    }\n+                    check_nan(cx, left, expr);\n+                    check_nan(cx, right, expr);\n                     check_to_owned(cx, left, right);\n                     check_to_owned(cx, right, left);\n                 }\n@@ -444,14 +440,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     }\n }\n \n-fn check_nan(cx: &LateContext<'_, '_>, path: &Path, expr: &Expr) {\n-    if !in_constant(cx, expr.hir_id) {\n-        if let Some(seg) = path.segments.last() {\n-            if seg.ident.name == sym!(NAN) {\n+fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr, cmp_expr: &Expr) {\n+    if_chain! {\n+        if !in_constant(cx, cmp_expr.hir_id);\n+        if let Some((value, _)) = constant(cx, cx.tables, expr);\n+        then {\n+            let needs_lint = match value {\n+                Constant::F32(num) => num.is_nan(),\n+                Constant::F64(num) => num.is_nan(),\n+                _ => false,\n+            };\n+\n+            if needs_lint {\n                 span_lint(\n                     cx,\n                     CMP_NAN,\n-                    expr.span,\n+                    cmp_expr.span,\n                     \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n                 );\n             }"}, {"sha": "f89ccddbfa447185d1922c82f996bd5f87839d41", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7056a488266c8c7e731a3b8e56193022eedac/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7056a488266c8c7e731a3b8e56193022eedac/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=d7c7056a488266c8c7e731a3b8e56193022eedac", "patch": "@@ -1,3 +1,6 @@\n+const NAN_F32: f32 = std::f32::NAN;\n+const NAN_F64: f64 = std::f64::NAN;\n+\n #[warn(clippy::cmp_nan)]\n #[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n@@ -8,6 +11,12 @@ fn main() {\n     x > std::f32::NAN;\n     x <= std::f32::NAN;\n     x >= std::f32::NAN;\n+    x == NAN_F32;\n+    x != NAN_F32;\n+    x < NAN_F32;\n+    x > NAN_F32;\n+    x <= NAN_F32;\n+    x >= NAN_F32;\n \n     let y = 0f64;\n     y == std::f64::NAN;\n@@ -16,4 +25,10 @@ fn main() {\n     y > std::f64::NAN;\n     y <= std::f64::NAN;\n     y >= std::f64::NAN;\n+    y == NAN_F64;\n+    y != NAN_F64;\n+    y < NAN_F64;\n+    y > NAN_F64;\n+    y <= NAN_F64;\n+    y >= NAN_F64;\n }"}, {"sha": "4ec92716a2b967b81d3326ce05c8fd3d66724b3d", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 85, "deletions": 13, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7056a488266c8c7e731a3b8e56193022eedac/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7056a488266c8c7e731a3b8e56193022eedac/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=d7c7056a488266c8c7e731a3b8e56193022eedac", "patch": "@@ -1,76 +1,148 @@\n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:5:5\n+  --> $DIR/cmp_nan.rs:8:5\n    |\n LL |     x == std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:6:5\n+  --> $DIR/cmp_nan.rs:9:5\n    |\n LL |     x != std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:7:5\n+  --> $DIR/cmp_nan.rs:10:5\n    |\n LL |     x < std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:8:5\n+  --> $DIR/cmp_nan.rs:11:5\n    |\n LL |     x > std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:9:5\n+  --> $DIR/cmp_nan.rs:12:5\n    |\n LL |     x <= std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:10:5\n+  --> $DIR/cmp_nan.rs:13:5\n    |\n LL |     x >= std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:13:5\n+  --> $DIR/cmp_nan.rs:14:5\n+   |\n+LL |     x == NAN_F32;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:15:5\n+   |\n+LL |     x != NAN_F32;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:16:5\n+   |\n+LL |     x < NAN_F32;\n+   |     ^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:17:5\n+   |\n+LL |     x > NAN_F32;\n+   |     ^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:18:5\n+   |\n+LL |     x <= NAN_F32;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:19:5\n+   |\n+LL |     x >= NAN_F32;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:22:5\n    |\n LL |     y == std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:14:5\n+  --> $DIR/cmp_nan.rs:23:5\n    |\n LL |     y != std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:15:5\n+  --> $DIR/cmp_nan.rs:24:5\n    |\n LL |     y < std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:16:5\n+  --> $DIR/cmp_nan.rs:25:5\n    |\n LL |     y > std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:17:5\n+  --> $DIR/cmp_nan.rs:26:5\n    |\n LL |     y <= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:18:5\n+  --> $DIR/cmp_nan.rs:27:5\n    |\n LL |     y >= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:28:5\n+   |\n+LL |     y == NAN_F64;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:29:5\n+   |\n+LL |     y != NAN_F64;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:30:5\n+   |\n+LL |     y < NAN_F64;\n+   |     ^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:31:5\n+   |\n+LL |     y > NAN_F64;\n+   |     ^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:32:5\n+   |\n+LL |     y <= NAN_F64;\n+   |     ^^^^^^^^^^^^\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:33:5\n+   |\n+LL |     y >= NAN_F64;\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n "}]}