{"sha": "9cb1874cd6567b68ee6d3aba60449771cf868d5a", "node_id": "C_kwDOAAsO6NoAKDljYjE4NzRjZDY1NjdiNjhlZTZkM2FiYTYwNDQ5NzcxY2Y4NjhkNWE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-21T22:54:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-07T19:25:56Z"}, "message": "Tweak wording and spans", "tree": {"sha": "26fae34d1d1fb897b2826abedff8e727db003626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26fae34d1d1fb897b2826abedff8e727db003626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb1874cd6567b68ee6d3aba60449771cf868d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb1874cd6567b68ee6d3aba60449771cf868d5a", "html_url": "https://github.com/rust-lang/rust/commit/9cb1874cd6567b68ee6d3aba60449771cf868d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb1874cd6567b68ee6d3aba60449771cf868d5a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e2aa12ffbaa316ac533460e9253c888400f44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e2aa12ffbaa316ac533460e9253c888400f44b", "html_url": "https://github.com/rust-lang/rust/commit/29e2aa12ffbaa316ac533460e9253c888400f44b"}], "stats": {"total": 694, "additions": 368, "deletions": 326}, "files": [{"sha": "08b22a6e0e182e2d58c140cda6f248765b80d046", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -21,6 +21,7 @@ use rustc_middle::ty::{\n     self, subst::Subst, suggest_constraining_type_params, EarlyBinder, PredicateKind, Ty,\n };\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n+use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -331,7 +332,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             spans.push(span);\n         }\n \n-        let (item_msg, name, desc) =\n+        let (binding, name, desc) =\n             match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n                 Some(name) => (format!(\"`{name}`\"), format!(\"`{name}`\"), format!(\"`{name}` \")),\n                 None => (\"value\".to_string(), \"the variable\".to_string(), String::new()),\n@@ -351,20 +352,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         } else {\n             \"initialized in all conditions\"\n         };\n-        let mut err = struct_span_err!(self, span, E0381, \"binding {desc}isn't {initialized}\");\n+        let used = desired_action.as_general_verb_in_past_tense();\n+        let mut err =\n+            struct_span_err!(self, span, E0381, \"{used} binding {desc}isn't {initialized}\");\n         use_spans.var_span_label_path_only(\n             &mut err,\n             format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n         );\n \n         if let InitializationRequiringAction::PartialAssignment = desired_action {\n             err.help(\n-                \"partial initialization isn't supported, fully initialize the binding with \\\n-                a default value and mutate, or use `std::mem::MaybeUninit`\",\n+                \"partial initialization isn't supported, fully initialize the binding with a \\\n+                 default value and mutate it, or use `std::mem::MaybeUninit`\",\n             );\n         }\n-        let verb = desired_action.as_verb_in_past_tense();\n-        err.span_label(span, format!(\"{item_msg} {verb} here but it isn't {initialized}\",));\n+        err.span_label(span, format!(\"{binding} {used} here but it isn't {initialized}\"));\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n@@ -400,7 +402,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_label(sp, &label);\n             }\n         }\n-        err.span_label(decl_span, \"variable declared here\");\n+        err.span_label(decl_span, \"binding declared here but left uninitialized\");\n         err\n     }\n \n@@ -2559,10 +2561,10 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                 v.visit_expr(body);\n                 if v.1 {\n                     self.errors.push((\n-                        cond.span,\n+                        ex.span.to(cond.span),\n                         format!(\n-                            \"this `if` expression might be missing an `else` arm where {} is \\\n-                             initialized\",\n+                            \"this `if` expression might be missing an `else` arm that initializes \\\n+                             {}\",\n                             self.name,\n                         ),\n                     ));\n@@ -2578,10 +2580,24 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                 match (a.1, b.1) {\n                     (true, true) | (false, false) => {}\n                     (true, false) => {\n-                        self.errors.push((\n-                            cond.span,\n-                            format!(\"{} is uninitialized if this condition isn't met\", self.name,),\n-                        ));\n+                        if other.span.is_desugaring(DesugaringKind::WhileLoop) {\n+                            self.errors.push((\n+                                cond.span,\n+                                format!(\n+                                    \"{} is uninitialized if this condition isn't met and the \\\n+                                     `while` loop runs 0 times\",\n+                                    self.name\n+                                ),\n+                            ));\n+                        } else {\n+                            self.errors.push((\n+                                body.span.shrink_to_hi().until(other.span),\n+                                format!(\n+                                    \"{} is uninitialized if this `else` arm is executed\",\n+                                    self.name\n+                                ),\n+                            ));\n+                        }\n                     }\n                     (false, true) => {\n                         self.errors.push((\n@@ -2591,7 +2607,7 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Match(_, arms, _) => {\n+            hir::ExprKind::Match(e, arms, loop_desugar) => {\n                 // If the binding is initialized in one of the match arms, then the other match\n                 // arms might be missing an initialization.\n                 let results: Vec<bool> = arms\n@@ -2605,22 +2621,40 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                 if results.iter().any(|x| *x) && !results.iter().all(|x| *x) {\n                     for (arm, seen) in arms.iter().zip(results) {\n                         if !seen {\n-                            self.errors.push((\n-                                arm.pat.span,\n-                                format!(\n-                                    \"{} is uninitialized if this pattern is matched\",\n-                                    self.name\n-                                ),\n-                            ));\n+                            if loop_desugar == hir::MatchSource::ForLoopDesugar {\n+                                self.errors.push((\n+                                    e.span,\n+                                    format!(\n+                                        \"{} is uninitialized if the `for` loop runs 0 times\",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            } else if let Some(guard) = &arm.guard {\n+                                self.errors.push((\n+                                    arm.pat.span.to(guard.body().span),\n+                                    format!(\n+                                        \"{} is uninitialized if this pattern and condition are \\\n+                                         matched\",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            } else {\n+                                self.errors.push((\n+                                    arm.pat.span,\n+                                    format!(\n+                                        \"{} is uninitialized if this pattern is matched\",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            }\n                         }\n                     }\n                 }\n             }\n             // FIXME: should we also account for binops, particularly `&&` and `||`? `try` should\n             // also be accounted for. For now it is fine, as if we don't find *any* relevant\n             // branching code paths, we point at the places where the binding *is* initialized for\n-            // *some* context. We should also specialize the output for `while` and `for` loops,\n-            // but for now we can rely on their desugaring to provide appropriate output.\n+            // *some* context.\n             _ => {}\n         }\n         walk_expr(self, ex);"}, {"sha": "2ed35062da129f4eaba6510c34cee7d3457bf003", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -907,6 +907,16 @@ impl InitializationRequiringAction {\n             InitializationRequiringAction::PartialAssignment => \"partially assigned\",\n         }\n     }\n+\n+    fn as_general_verb_in_past_tense(self) -> &'static str {\n+        match self {\n+            InitializationRequiringAction::Borrow\n+            | InitializationRequiringAction::MatchOn\n+            | InitializationRequiringAction::Use => \"used\",\n+            InitializationRequiringAction::Assignment => \"assigned\",\n+            InitializationRequiringAction::PartialAssignment => \"partially assigned\",\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {"}, {"sha": "e9c93fea561a81b3717c9654b683a076e551acc4", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,16 +1,16 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/type-check-5.rs:15:28\n    |\n LL |         let x: u64;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         asm!(\"{}\", in(reg) x);\n    |                            ^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `y` isn't initialized\n+error[E0381]: used binding `y` isn't initialized\n   --> $DIR/type-check-5.rs:18:9\n    |\n LL |         let mut y: u64;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         asm!(\"{}\", inout(reg) y);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `y` used here but it isn't initialized\n "}, {"sha": "b23e2da0e0920195290696484cb530fdd871680f", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `y` isn't initialized in all conditions\n+error[E0381]: used binding `y` isn't initialized in all conditions\n   --> $DIR/no-non-guaranteed-initialization.rs:9:5\n    |\n LL |     let y;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     if x > 5 {\n-   |        ----- this `if` expression might be missing an `else` arm where `y` is initialized\n+   |        ----- this `if` expression might be missing an `else` arm that initializes `y`\n ...\n LL |     y\n    |     ^ `y` used here but it isn't initialized in all conditions"}, {"sha": "6a0eeffb946111f233da3316b5af026efc12fabc", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,32 +1,32 @@\n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n LL |     let mut t: (i32, i32);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 42;\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-await.rs:21:5\n    |\n LL |     let mut t: T;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 42;\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-await.rs:29:5\n    |\n LL |     let mut t: S;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.x = 42;\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1ed92865da55bdcc8238c9990b38a62aa03e61d2", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,22 +1,22 @@\n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/assign_mutable_fields.rs:9:5\n    |\n LL |     let mut x: (u32, u32);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/assign_mutable_fields.rs:17:5\n    |\n LL |     let mut x: (u32, u32);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a78ac1e593a05fc6e799015a1d3ceb6856c4f905", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,13 +1,13 @@\n-error[E0381]: binding `i` isn't initialized in all conditions\n+error[E0381]: used binding `i` isn't initialized in all conditions\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n LL |     let i: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |\n LL |     println!(\"{}\", false && { i = 5; true });\n    |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ `i` borrowed here but it isn't initialized in all conditions\n+   |                    ^ `i` used here but it isn't initialized in all conditions\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e720db1c6961b275b230d4daf985a8a67ba3e83e", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     force(|| {\n-   |           ^^ `x` borrowed here but it isn't initialized\n+   |           ^^ `x` used here but it isn't initialized\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure\n "}, {"sha": "23ea1a2de7fc7d66f24e16cfe66807d0c639014c", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,11 +1,11 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |     println!(\"{}\", x);\n-   |                    ^ `x` borrowed here but it isn't initialized\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2b9b0a190f6c8ae5c1d9798e2a75c14476d220b8", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,11 +1,11 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |     println!(\"{}\", x);\n-   |                    ^ `x` borrowed here but it isn't initialized\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e009f5913edd072c2026c35721bb3edd000e6cf9", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -108,35 +108,35 @@ LL |     let _z = A { a: 4, .. x };\n    |\n    = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:81:5\n    |\n LL |     let mut x: A;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     x.a = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:87:5\n    |\n LL |     let mut x: A;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     x.a = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:94:5\n    |\n LL |     let mut x: A;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     x.b = Box::new(1);\n    |     ^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "134e7d5df4b09dc23b60706a6ae312779448183f", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` isn't initialized in all conditions\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n LL |     let x: isize; if 1 > 2 { x = 10; }\n-   |         -            ----- this `if` expression might be missing an `else` arm where `x` is initialized\n+   |         -            ----- this `if` expression might be missing an `else` arm that initializes `x`\n    |         |\n-   |         variable declared here\n+   |         binding declared here but left uninitialized\n LL |     foo(x);\n    |         ^ `x` used here but it isn't initialized in all conditions\n "}, {"sha": "f4b0c3930745232ada60b46b67e8eea5f816f8c9", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` isn't initialized in all conditions\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     if 1 > 2 {\n    |        ----- `x` is uninitialized if this condition is met\n ..."}, {"sha": "e8a2fbc91ea6430ebaac8d494676ccd8253c809a", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `i` isn't initialized\n+error[E0381]: used binding `i` isn't initialized\n   --> $DIR/borrowck-init-in-called-fn-expr.rs:4:9\n    |\n LL |         let i: isize;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         i\n    |         ^ `i` used here but it isn't initialized\n "}, {"sha": "1e950d6a20defb7688834981a5b1d0320dd9e791", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `i` isn't initialized\n+error[E0381]: used binding `i` isn't initialized\n   --> $DIR/borrowck-init-in-fn-expr.rs:4:9\n    |\n LL |         let i: isize;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         i\n    |         ^ `i` used here but it isn't initialized\n "}, {"sha": "7a35a9a537cac45d1ef5be57de2389091432cc38", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `origin.y` isn't initialized\n+error[E0381]: used binding `origin.y` isn't initialized\n   --> $DIR/borrowck-init-in-fru.rs:9:14\n    |\n LL |     let mut origin: Point;\n-   |         ---------- variable declared here\n+   |         ---------- binding declared here but left uninitialized\n LL |     origin = Point { x: 10, ..origin };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ `origin.y` used here but it isn't initialized\n "}, {"sha": "74704b2abfee87d8c6750df0bf3f9ace74043ab6", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `v` isn't initialized\n+error[E0381]: used binding `v` isn't initialized\n   --> $DIR/borrowck-init-op-equal.rs:3:5\n    |\n LL |     let v: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     v += 1;\n    |     ^^^^^^ `v` used here but it isn't initialized\n "}, {"sha": "7542576d636be299238f6aedccff1e149a684af5", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `v` isn't initialized\n+error[E0381]: used binding `v` isn't initialized\n   --> $DIR/borrowck-init-plus-equal.rs:3:9\n    |\n LL |     let mut v: isize;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     v = v + 1;\n    |         ^ `v` used here but it isn't initialized\n "}, {"sha": "633c4017d16ac1ef24375ee2d29d513030c5e1ff", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,13 +1,13 @@\n-error[E0381]: binding `i` isn't initialized in all conditions\n+error[E0381]: used binding `i` isn't initialized in all conditions\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n LL |     let i: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |\n LL |     println!(\"{}\", false || { i = 5; true });\n    |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ `i` borrowed here but it isn't initialized in all conditions\n+   |                    ^ `i` used here but it isn't initialized in all conditions\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "06351a943064bf0d1af2a9845a91c3f9697cf970", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x.0` isn't initialized\n+error[E0381]: assigned binding `x.0` isn't initialized\n   --> $DIR/borrowck-partial-reinit-4.rs:17:5\n    |\n LL |     let mut x : (Test2, Test2);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     (x.0).0 = Some(Test);\n    |     ^^^^^^^ `x.0` assigned here but it isn't initialized\n "}, {"sha": "1c916e223175c8424185e4428b5816db996174a2", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-return.rs:3:12\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     return x;\n    |            ^ `x` used here but it isn't initialized\n "}, {"sha": "2cea4392d6adb63b03ddfd8e06b6c2ea90bbebef", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-storage-dead.rs:16:17\n    |\n LL |         let x: i32;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         let _ = x + 1;\n    |                 ^ `x` used here but it isn't initialized\n "}, {"sha": "588b1b0c9729cc2c1ee7f32ba8d36ae9f24b26aa", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `bar` isn't initialized\n+error[E0381]: used binding `bar` isn't initialized\n   --> $DIR/borrowck-uninit-after-item.rs:4:9\n    |\n LL |     let bar;\n-   |         --- variable declared here\n+   |         --- binding declared here but left uninitialized\n LL |     fn baz(_x: isize) { }\n LL |     baz(bar);\n    |         ^^^ `bar` used here but it isn't initialized"}, {"sha": "3bc3a477787786fc87766dd4bb8261b2251a6ccc", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `a.x` isn't initialized\n+error[E0381]: used binding `a.x` isn't initialized\n   --> $DIR/borrowck-uninit-field-access.rs:21:13\n    |\n LL |     let mut a: Point;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     let _ = a.x + 1;\n    |             ^^^ `a.x` used here but it isn't initialized\n "}, {"sha": "744cb14e662b3bcf824b17c8962be85b1bea8901", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,80 +1,80 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:6:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x += 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x -= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x *= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x /= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x %= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x ^= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x &= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x |= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x <<= 1;\n    |     ^^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x >>= 1;\n    |     ^^^^^^^ `x` used here but it isn't initialized\n "}, {"sha": "9f33a163e084f00ccd45c558ee587d3a03d1e3c7", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,66 +1,66 @@\n-error[E0381]: binding `**x` isn't initialized\n+error[E0381]: used binding `**x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:8:14\n    |\n LL |     let x: &&Box<i32>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ `**x` borrowed here but it isn't initialized\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: binding `**x` isn't initialized\n+error[E0381]: used binding `**x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n LL |     let x: &&S<i32, i32>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ `**x` borrowed here but it isn't initialized\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: binding `**x` isn't initialized\n+error[E0381]: used binding `**x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:14:14\n    |\n LL |     let x: &&i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ `**x` borrowed here but it isn't initialized\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: binding `a` isn't fully initialized\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:18:5\n    |\n LL |     let mut a: S<i32, i32>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = 0;\n    |     ^^^^^^^ `a` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `a` isn't fully initialized\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:22:5\n    |\n LL |     let mut a: S<&&i32, &&i32>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = &&0;\n    |     ^^^^^^^^^ `a` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `a` isn't fully initialized\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:27:5\n    |\n LL |     let mut a: S<i32, i32>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = 0;\n    |     ^^^^^^^ `a` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `a` isn't fully initialized\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:31:5\n    |\n LL |     let mut a: S<&&i32, &&i32>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = &&0;\n    |     ^^^^^^^^^ `a` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "d5566691a820040fe1add7e4b3da896a84d8677d", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit.rs:5:9\n    |\n LL |     let x: isize;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     foo(x);\n    |         ^ `x` used here but it isn't initialized\n "}, {"sha": "b7ff5f3955ee5885ce0c3b7eaf1a84b78c0c0aac", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,24 +1,24 @@\n-error[E0381]: binding `s` isn't fully initialized\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/borrowck-union-uninitialized.rs:13:9\n    |\n LL |         let mut s: S;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         let mut u: U;\n LL |         s.a = 0;\n    |         ^^^^^^^ `s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `u` isn't fully initialized\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/borrowck-union-uninitialized.rs:14:9\n    |\n LL |         let mut u: U;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         s.a = 0;\n LL |         u.a = 0;\n    |         ^^^^^^^ `u` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6372096caef02ebd34cb29a057aa63ff6643553d", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,16 +1,16 @@\n-error[E0381]: binding `*w` isn't initialized\n+error[E0381]: used binding `*w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:3:5\n    |\n LL |     let w: &mut [isize];\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     w[5] = 0;\n    |     ^^^^ `*w` used here but it isn't initialized\n \n-error[E0381]: binding `*w` isn't initialized\n+error[E0381]: used binding `*w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n LL |     let mut w: &mut [isize];\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     w[5] = 0;\n    |     ^^^^ `*w` used here but it isn't initialized\n "}, {"sha": "fea69c2e40d668ba526c79674aa187740ff75943", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `*x` isn't initialized\n+error[E0381]: used binding `*x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n LL |     let x: &i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let y = x as *const dyn Foo;\n-   |             ^ `*x` borrowed here but it isn't initialized\n+   |             ^ `*x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "e75e03352960715dde45cf34511f044797b9d814", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `*x` isn't initialized\n+error[E0381]: used binding `*x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:7:13\n    |\n LL |     let x: &i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let y = x as *const i32;\n-   |             ^ `*x` borrowed here but it isn't initialized\n+   |             ^ `*x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "ab7d50b834a4ee9d4b37a2695a937f39375a52e1", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,13 +1,13 @@\n-error[E0381]: binding `v` isn't initialized in all conditions\n+error[E0381]: used binding `v` isn't initialized in all conditions\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n LL |     let v;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     while cond {\n-   |           ---- `v` is uninitialized if this condition isn't met\n+   |           ---- `v` is uninitialized if this condition isn't met and the `while` loop runs 0 times\n ...\n LL |     println!(\"{}\", v);\n-   |                    ^ `v` borrowed here but it isn't initialized in all conditions\n+   |                    ^ `v` used here but it isn't initialized in all conditions\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e41c1c55e6024365c46873574341244938fe0a19", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-while-cond.rs:3:11\n    |\n LL |     let x: bool;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     while x { }\n    |           ^ `x` used here but it isn't initialized\n "}, {"sha": "5bb86b11ba50338d03589751e27e4bf98214a981", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` isn't initialized in all conditions\n   --> $DIR/borrowck-while.rs:4:12\n    |\n LL |     let mut x: isize;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     while 1 == 1 { x = 10; }\n-   |           ------ `x` is uninitialized if this condition isn't met\n+   |           ------ `x` is uninitialized if this condition isn't met and the `while` loop runs 0 times\n LL |     return x;\n    |            ^ `x` used here but it isn't initialized in all conditions\n "}, {"sha": "9a84c6fefae59681474f06d7cac4ecc4cb1c79e3", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,42 +1,42 @@\n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:6:5\n    |\n LL |     let mut t: (u64, u64);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n    |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:11:5\n    |\n LL |     let mut t: (u64, u64);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.1 = 1;\n    |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:16:5\n    |\n LL |     let mut t: (u64, u64);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n    |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:20:5\n    |\n LL |     let mut t: (u64,);\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n    |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d436e8ff9096c1e7499ae356d27721d5b97c2975", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,22 +1,22 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:12:20\n    |\n LL |     let x: i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     loop { x = break; }\n LL |     println!(\"{}\", x);\n-   |                    ^ `x` borrowed here but it isn't initialized\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n    |\n LL |     let x: i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     for _ in 0..10 { x = continue; }\n LL |     println!(\"{}\", x);\n-   |                    ^ `x` borrowed here but it isn't initialized\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2a0eba396f144a5ae8ea47aff72c7904b06c4c0b", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-marks-mut-as-used.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,32 +1,32 @@\n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:12:9\n    |\n LL |         let mut t: Tuple;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `u` isn't fully initialized\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:20:9\n    |\n LL |         let mut u: Tpair;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ `u` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `v` isn't fully initialized\n+error[E0381]: partially assigned binding `v` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:28:9\n    |\n LL |         let mut v: Spair;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ `v` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "67a62583057f64e97e62661cbc67302a81290ed3", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-never-init.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,32 +1,32 @@\n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:12:9\n    |\n LL |         let t: Tuple;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `u` isn't fully initialized\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:20:9\n    |\n LL |         let u: Tpair;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ `u` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `v` isn't fully initialized\n+error[E0381]: partially assigned binding `v` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:28:9\n    |\n LL |         let v: Spair;\n-   |             - variable declared here\n+   |             - binding declared here but left uninitialized\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ `v` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f5d2eecfa91a300ea0f46cdaa8f9acf7f9b8a044", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `e` isn't initialized\n+error[E0381]: used binding `e` isn't initialized\n   --> $DIR/issue-62107-match-arm-scopes.rs:3:11\n    |\n LL |     let e: i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     match e {\n    |           ^ `e` used here but it isn't initialized\n "}, {"sha": "e6b25573e7040206944fde9fb1a55492b57df648", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,22 +1,22 @@\n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields.rs:7:5\n    |\n LL |     let x: (u32, u32);\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields.rs:15:5\n    |\n LL |     let x: (u32, u32);\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3885b5f5caea4593bcaf8df52d32a95cf7dd63d", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,12 +1,12 @@\n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:12:5\n    |\n LL |     let x: Foo;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x.a = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5"}, {"sha": "49c81adad49373c788f0e80ad693b131490c3954", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -7,15 +7,15 @@ LL |     x = (22, 44);\n LL |     x.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n-error[E0381]: binding `x` isn't fully initialized\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5\n    |\n LL |     let x: (u32, u32);\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fea5441ec673d063a8bbc644ad2da440057042c8", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -12,68 +12,68 @@ LL +         _ => todo!(),\n LL ~     };\n    |\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:8:23\n    |\n LL |     let x: !;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let c1 = || match x { };\n    |                       ^ `x` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:15:14\n    |\n LL |     let x: !;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let c2 = || match x { _ => () };\n    |              ^^       - borrow occurs due to use in closure\n    |              |\n-   |              `x` borrowed here but it isn't initialized\n+   |              `x` used here but it isn't initialized\n \n-error[E0381]: binding `variant` isn't initialized\n+error[E0381]: used binding `variant` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:27:13\n    |\n LL |     let variant: !;\n-   |         ------- variable declared here\n+   |         ------- binding declared here but left uninitialized\n LL |     let c = || {\n-   |             ^^ `variant` borrowed here but it isn't initialized\n+   |             ^^ `variant` used here but it isn't initialized\n LL |\n LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n-error[E0381]: binding `variant` isn't initialized\n+error[E0381]: used binding `variant` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:39:13\n    |\n LL |     let variant: !;\n-   |         ------- variable declared here\n+   |         ------- binding declared here but left uninitialized\n LL |     let c = || {\n-   |             ^^ `variant` borrowed here but it isn't initialized\n+   |             ^^ `variant` used here but it isn't initialized\n LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n-error[E0381]: binding `g` isn't initialized\n+error[E0381]: used binding `g` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:54:15\n    |\n LL |     let g: !;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |         match g { };\n    |               ^ `g` used here but it isn't initialized\n \n-error[E0381]: binding `t` isn't initialized\n+error[E0381]: used binding `t` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:56:19\n    |\n LL |     let t: !;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |             match t { };\n    |                   ^ `t` used here but it isn't initialized\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:67:23\n    |\n LL |     let x: u8;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let c1 = || match x { };\n    |                       ^ `x` used here but it isn't initialized\n "}, {"sha": "33f839c2866e9ad642bb4e8add57c0f3b66b34ee", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `*s` isn't initialized\n+error[E0381]: used binding `*s` isn't initialized\n   --> $DIR/const-generic-default-wont-borrowck.rs:2:26\n    |\n LL |     let s: &'static str; s.len()\n-   |         -                ^^^^^^^ `*s` borrowed here but it isn't initialized\n+   |         -                ^^^^^^^ `*s` used here but it isn't initialized\n    |         |\n-   |         variable declared here\n+   |         binding declared here but left uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "f5b1123e7f3431340f5d3773ba9cff0bc5799cf5", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-78655.rs:3:5\n    |\n LL |     let x;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     &x\n-   |     ^^ `x` borrowed here but it isn't initialized\n+   |     ^^ `x` used here but it isn't initialized\n \n error: could not evaluate constant pattern\n   --> $DIR/issue-78655.rs:7:9"}, {"sha": "48fa2bfa975c03dedbd6b3449b71d8ef0e75c0e8", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -17,11 +17,11 @@ LL | const _: [String; 0] = [String::new(); 0];\n    |                        |constants cannot evaluate destructors\n    |                        value is dropped here\n \n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/repeat-drop-2.rs:12:14\n    |\n LL |     let x: u8;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     let _ = [x; 0];\n    |              ^ `x` used here but it isn't initialized\n "}, {"sha": "3f9f1c046ba4b1b3afe408ae4f2742b28ddcd3ca", "filename": "src/test/ui/generator/partial-initialization-across-yield.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,32 +1,32 @@\n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-yield.rs:12:9\n    |\n LL |         let mut t: (i32, i32);\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = 42;\n    |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-yield.rs:22:9\n    |\n LL |         let mut t: T;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = 42;\n    |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-yield.rs:32:9\n    |\n LL |         let mut t: S;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         t.x = 42;\n    |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "75041031736526066f90f1ef888d06fea637af7c", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,11 +1,11 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/loop-proper-liveness.rs:9:22\n    |\n LL |     let x: i32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |     println!(\"{:?}\", x);\n-   |                      ^ `x` borrowed here but it isn't initialized\n+   |                      ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d8154f8d2cbc40ad33d0340fc660c2f19751d724", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -16,11 +16,11 @@ LL |     let a: [String; 1];\n LL | };\n    | - value is dropped here\n \n-error[E0381]: binding `a` isn't initialized\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n    |\n LL |     let a: [String; 1];\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |\n LL |     a[0] = String::new();\n    |     ^^^^ `a` used here but it isn't initialized"}, {"sha": "d76b69ecdc8bb15c0b553195281041bdcd6d2542", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -57,14 +57,14 @@ fn moved_loop_2() {\n \n fn uninit_1() {\n     loop {\n-        let value: NonCopy; //~ NOTE variable declared here\n+        let value: NonCopy; //~ NOTE declared here\n         let _used = value; //~ ERROR binding `value` isn't initialized\n         //~^ NOTE `value` used here but it isn't initialized\n     }\n }\n \n fn uninit_2() {\n-    let mut value: NonCopy; //~ NOTE variable declared here\n+    let mut value: NonCopy; //~ NOTE declared here\n     loop {\n         let _used = value; //~ ERROR binding `value` isn't initialized\n         //~^ NOTE `value` used here but it isn't initialized"}, {"sha": "c7373b5be9d8dc7471d2b14543fefb08ce4a5b71", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -40,19 +40,19 @@ LL |     let mut value = NonCopy{};\n LL |         let _used2 = value;\n    |                      ^^^^^ value moved here, in previous iteration of loop\n \n-error[E0381]: binding `value` isn't initialized\n+error[E0381]: used binding `value` isn't initialized\n   --> $DIR/issue-72649-uninit-in-loop.rs:61:21\n    |\n LL |         let value: NonCopy;\n-   |             ----- variable declared here\n+   |             ----- binding declared here but left uninitialized\n LL |         let _used = value;\n    |                     ^^^^^ `value` used here but it isn't initialized\n \n-error[E0381]: binding `value` isn't initialized\n+error[E0381]: used binding `value` isn't initialized\n   --> $DIR/issue-72649-uninit-in-loop.rs:69:21\n    |\n LL |     let mut value: NonCopy;\n-   |         --------- variable declared here\n+   |         --------- binding declared here but left uninitialized\n LL |     loop {\n LL |         let _used = value;\n    |                     ^^^^^ `value` used here but it isn't initialized"}, {"sha": "344a6bbf0c92c77b192298f983efc3e988d59efc", "filename": "src/test/ui/moves/move-into-dead-array-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `a` isn't initialized\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/move-into-dead-array-1.rs:14:5\n    |\n LL |     let mut a: [D; 4];\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     a[i] = d();\n    |     ^^^^ `a` used here but it isn't initialized\n "}, {"sha": "e75f2b1c0894c63b17a3a5eedd53aeff5533cb28", "filename": "src/test/ui/moves/move-of-addr-of-mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: binding `x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/move-of-addr-of-mut.rs:8:5\n    |\n LL |     let mut x: S;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     std::ptr::addr_of_mut!(x);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `x` borrowed here but it isn't initialized\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `std::ptr::addr_of_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f56b6294c2093b35d140028923a7d315dae4f44d", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,16 +1,16 @@\n-error[E0381]: binding `d` isn't initialized\n+error[E0381]: assigned binding `d` isn't initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:28:5\n    |\n LL |     let d: D;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     d.x = 10;\n    |     ^^^^^^^^ `d` assigned here but it isn't initialized\n \n-error[E0381]: binding `d` isn't initialized\n+error[E0381]: assigned binding `d` isn't initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:33:5\n    |\n LL |     let mut d: D;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     d.x = 10;\n    |     ^^^^^^^^ `d` assigned here but it isn't initialized\n \n@@ -24,25 +24,25 @@ LL |     drop(d);\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n-error[E0381]: binding `d.s` isn't fully initialized\n+error[E0381]: partially assigned binding `d.s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:45:5\n    |\n LL |     let d: D;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ `d.s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `d.s` isn't fully initialized\n+error[E0381]: partially assigned binding `d.s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:50:5\n    |\n LL |     let mut d: D;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ `d.s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:56:5"}, {"sha": "2f5883b156300cdb42142f10180a6a6f54ce9329", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,22 +1,22 @@\n-error[E0381]: binding `s` isn't fully initialized\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:97:5\n    |\n LL |     let s: S<B>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:103:5\n    |\n LL |     let t: T;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:109:5\n@@ -38,25 +38,25 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: binding `s` isn't fully initialized\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:123:5\n    |\n LL |     let s: S<B>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10;\n    |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:129:5\n    |\n LL |     let t: T;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10;\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:135:5\n@@ -78,45 +78,45 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: binding `s` isn't fully initialized\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:149:5\n    |\n LL |     let s: S<Void>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10;\n    |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `t` isn't fully initialized\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n    |\n LL |     let t: Tvoid;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10;\n    |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:170:5\n    |\n LL |     let q: Q<S<B>>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n    |\n LL |     let q: Q<T>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `q.r`\n   --> $DIR/issue-21232-partial-init-and-use.rs:182:5\n@@ -138,25 +138,25 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:196:5\n    |\n LL |     let q: Q<S<B>>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:202:5\n    |\n LL |     let q: Q<T>;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `q.r`\n   --> $DIR/issue-21232-partial-init-and-use.rs:208:5\n@@ -178,25 +178,25 @@ LL |     q.r.f.0 = 10;\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:222:5\n    |\n LL |     let mut q: Q<S<Void>>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:228:5\n    |\n LL |     let mut q: Q<Tvoid>;\n-   |         ----- variable declared here\n+   |         ----- binding declared here but left uninitialized\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n    |\n-   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate, or use `std::mem::MaybeUninit`\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:245:13"}, {"sha": "39933db36480389b824164fcf6440d43841f4962", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,11 +1,9 @@\n-error[E0381]: binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` isn't initialized in all conditions\n   --> $DIR/match-cfg-fake-edges.rs:21:13\n    |\n LL |     let x;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n-LL |         _ if {\n-   |         - `x` is uninitialized if this pattern is matched\n LL |             x;\n    |             ^ `x` used here but it isn't initialized in all conditions\n "}, {"sha": "664f36f695cf3ce12b37dbf7741960c17a8cd16a", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -33,11 +33,11 @@ LL |     match t {\n LL |     x;\n    |     - borrow later used here\n \n-error[E0381]: binding `n` isn't initialized\n+error[E0381]: used binding `n` isn't initialized\n   --> $DIR/match-on-borrowed.rs:93:11\n    |\n LL |     let n: Never;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     match n {}\n    |           ^ `n` used here but it isn't initialized\n "}, {"sha": "a3d8c608f4b8b4527aba0612cf9de23f86f79a61", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,28 +1,28 @@\n-error[E0381]: binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` isn't initialized in all conditions\n   --> $DIR/chains-without-let.rs:3:34\n    |\n LL |     let z;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     if true && { z = 3; true} && z == 3 {}\n    |                  -----           ^ `z` used here but it isn't initialized in all conditions\n    |                  |\n    |                  binding initialized here in some conditions\n \n-error[E0381]: binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` isn't initialized in all conditions\n   --> $DIR/chains-without-let.rs:9:31\n    |\n LL |     let z;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     true && { z = 3; true} && z == 3;\n    |               -----           ^ `z` used here but it isn't initialized in all conditions\n    |               |\n    |               binding initialized here in some conditions\n \n-error[E0381]: binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` isn't initialized in all conditions\n   --> $DIR/chains-without-let.rs:15:36\n    |\n LL |     let z;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n LL |     if false || { z = 3; false} || z == 3 {}\n    |                   -----            ^ `z` used here but it isn't initialized in all conditions\n    |                   |"}, {"sha": "72e732599c00ead65a2ca33894fcadf1ad55ea18", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: binding `cfg_res` isn't initialized in all conditions\n+error[E0381]: used binding `cfg_res` isn't initialized in all conditions\n   --> $DIR/try-block-opt-init.rs:15:5\n    |\n LL |     let cfg_res;\n-   |         ------- variable declared here\n+   |         ------- binding declared here but left uninitialized\n ...\n LL |         cfg_res = 5;\n    |         ----------- binding initialized here in some conditions\n ...\n LL |     assert_eq!(cfg_res, 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ `cfg_res` borrowed here but it isn't initialized in all conditions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ `cfg_res` used here but it isn't initialized in all conditions\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "95c209f47c92a450b236dd0ebfa3dd14ef5b0295", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cb1874cd6567b68ee6d3aba60449771cf868d5a/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr?ref=9cb1874cd6567b68ee6d3aba60449771cf868d5a", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: binding `y` isn't initialized\n+error[E0381]: used binding `y` isn't initialized\n   --> $DIR/privately-uninhabited-mir-call.rs:28:5\n    |\n LL |     let y: &mut u32;\n-   |         - variable declared here\n+   |         - binding declared here but left uninitialized\n ...\n LL |     *y = 2;\n    |     ^^^^^^ `y` used here but it isn't initialized"}]}