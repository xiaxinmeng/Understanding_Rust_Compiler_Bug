{"sha": "7f94b314cead7059a71a265a8b64905ef2511796", "node_id": "C_kwDOAAsO6NoAKDdmOTRiMzE0Y2VhZDcwNTlhNzFhMjY1YThiNjQ5MDVlZjI1MTE3OTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T18:03:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T18:03:00Z"}, "message": "Auto merge of #110281 - ozkanonur:multiarch-compatible-sysroot-finding, r=jackh726\n\nmake sysroot finding compatible with multiarch systems\n\nTested on Debian 11 multiarch, worked just fine.\n\nresolves #109994", "tree": {"sha": "021f39b2d5b9db8dfeb0fa5476366fd0411216b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021f39b2d5b9db8dfeb0fa5476366fd0411216b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f94b314cead7059a71a265a8b64905ef2511796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f94b314cead7059a71a265a8b64905ef2511796", "html_url": "https://github.com/rust-lang/rust/commit/7f94b314cead7059a71a265a8b64905ef2511796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f94b314cead7059a71a265a8b64905ef2511796/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915aa06700af4a2363639bae70201cd7387470ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/915aa06700af4a2363639bae70201cd7387470ad", "html_url": "https://github.com/rust-lang/rust/commit/915aa06700af4a2363639bae70201cd7387470ad"}, {"sha": "2e98368c2f1a4cbefa3c8f43f550a7fc1831636e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e98368c2f1a4cbefa3c8f43f550a7fc1831636e", "html_url": "https://github.com/rust-lang/rust/commit/2e98368c2f1a4cbefa3c8f43f550a7fc1831636e"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "7fdbd48d563348335492b5c462d0550ce6508da1", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f94b314cead7059a71a265a8b64905ef2511796/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f94b314cead7059a71a265a8b64905ef2511796/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=7f94b314cead7059a71a265a8b64905ef2511796", "patch": "@@ -227,28 +227,29 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n         ))?;\n \n         // if `dir` points target's dir, move up to the sysroot\n-        if dir.ends_with(crate::config::host_triple()) {\n+        let mut sysroot_dir = if dir.ends_with(crate::config::host_triple()) {\n             dir.parent() // chop off `$target`\n                 .and_then(|p| p.parent()) // chop off `rustlib`\n-                .and_then(|p| {\n-                    // chop off `lib` (this could be also $arch dir if the host sysroot uses a\n-                    // multi-arch layout like Debian or Ubuntu)\n-                    match p.parent() {\n-                        Some(p) => match p.file_name() {\n-                            Some(f) if f == \"lib\" => p.parent(), // first chop went for $arch, so chop again for `lib`\n-                            _ => Some(p),\n-                        },\n-                        None => None,\n-                    }\n-                })\n+                .and_then(|p| p.parent()) // chop off `lib`\n                 .map(|s| s.to_owned())\n-                .ok_or(format!(\n-                    \"Could not move 3 levels upper using `parent()` on {}\",\n-                    dir.display()\n-                ))\n+                .ok_or_else(|| {\n+                    format!(\"Could not move 3 levels upper using `parent()` on {}\", dir.display())\n+                })?\n         } else {\n-            Ok(dir.to_owned())\n+            dir.to_owned()\n+        };\n+\n+        // On multiarch linux systems, there will be multiarch directory named\n+        // with the architecture(e.g `x86_64-linux-gnu`) under the `lib` directory.\n+        // Which cause us to mistakenly end up in the lib directory instead of the sysroot directory.\n+        if sysroot_dir.ends_with(\"lib\") {\n+            sysroot_dir =\n+                sysroot_dir.parent().map(|real_sysroot| real_sysroot.to_owned()).ok_or_else(\n+                    || format!(\"Could not move to parent path of {}\", sysroot_dir.display()),\n+                )?\n         }\n+\n+        Ok(sysroot_dir)\n     }\n \n     // Use env::args().next() to get the path of the executable without"}]}