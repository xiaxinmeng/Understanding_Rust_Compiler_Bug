{"sha": "19c7619dcda902acafa927b0b8511ca8ecce13a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Yzc2MTlkY2RhOTAyYWNhZmE5MjdiMGI4NTExY2E4ZWNjZTEzYTQ=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-11-02T20:58:12Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-12-04T18:43:02Z"}, "message": "IntoInnerError: Provide into_parts\n\nIn particular, IntoIneerError only currently provides .error() which\nreturns a reference, not an owned value.  This is not helpful and\nmeans that a caller of BufWriter::into_inner cannot acquire an owned\nio::Error which seems quite wrong.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "5331a71d2124434be5a6d28bf2d40440a8b0c7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5331a71d2124434be5a6d28bf2d40440a8b0c7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c7619dcda902acafa927b0b8511ca8ecce13a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c7619dcda902acafa927b0b8511ca8ecce13a4", "html_url": "https://github.com/rust-lang/rust/commit/19c7619dcda902acafa927b0b8511ca8ecce13a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c7619dcda902acafa927b0b8511ca8ecce13a4/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5d697004d8bf3ce783d02f2e4a1c8354281d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5d697004d8bf3ce783d02f2e4a1c8354281d78", "html_url": "https://github.com/rust-lang/rust/commit/db5d697004d8bf3ce783d02f2e4a1c8354281d78"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "0b58e55ed1731fe9816306fa2cc1088ad8534f8b", "filename": "library/std/src/io/buffered/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19c7619dcda902acafa927b0b8511ca8ecce13a4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c7619dcda902acafa927b0b8511ca8ecce13a4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs?ref=19c7619dcda902acafa927b0b8511ca8ecce13a4", "patch": "@@ -126,6 +126,30 @@ impl<W> IntoInnerError<W> {\n     pub fn into_inner(self) -> W {\n         self.0\n     }\n+\n+    /// Consumes the [`IntoInnerError`] and returns the error which caused the call to\n+    /// [`BufWriter::into_inner()`] to fail, and the underlying writer.\n+    ///\n+    /// This can be used to simply obtain ownership of the underlying error; it can also be used for\n+    /// advanced error recovery.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// #![feature(io_into_inner_error_parts)]\n+    /// use std::io::{BufWriter, ErrorKind, Write};\n+    ///\n+    /// let mut not_enough_space = [0u8; 10];\n+    /// let mut stream = BufWriter::new(not_enough_space.as_mut());\n+    /// write!(stream, \"this cannot be actually written\").unwrap();\n+    /// let into_inner_err = stream.into_inner().expect_err(\"now we discover it's too small\");\n+    /// let (err, recovered_writer) = into_inner_err.into_parts();\n+    /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n+    /// assert_eq!(recovered_writer.buffer(), b\"t be actually written\");\n+    /// ```\n+    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    pub fn into_parts(self) -> (Error, W) {\n+        (self.1, self.0)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}