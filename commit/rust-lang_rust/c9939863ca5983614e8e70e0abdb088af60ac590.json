{"sha": "c9939863ca5983614e8e70e0abdb088af60ac590", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTM5ODYzY2E1OTgzNjE0ZThlNzBlMGFiZGIwODhhZjYwYWM1OTA=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-02T17:53:44Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:43:57Z"}, "message": "Fix the IntTypeExt::to_ty() lifetime bounds", "tree": {"sha": "1b3bc2099ac9934898970836c06f5d1693ed6d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3bc2099ac9934898970836c06f5d1693ed6d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9939863ca5983614e8e70e0abdb088af60ac590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9939863ca5983614e8e70e0abdb088af60ac590", "html_url": "https://github.com/rust-lang/rust/commit/c9939863ca5983614e8e70e0abdb088af60ac590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9939863ca5983614e8e70e0abdb088af60ac590/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64182a587c0c26559b166cbf45ab33f10b332ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/64182a587c0c26559b166cbf45ab33f10b332ffc", "html_url": "https://github.com/rust-lang/rust/commit/64182a587c0c26559b166cbf45ab33f10b332ffc"}], "stats": {"total": 68, "additions": 9, "deletions": 59}, "files": [{"sha": "6863468ec0d5b64a52d581691a0e279869ae87b4", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -17,8 +17,8 @@ use mir::*;\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use syntax::attr;\n use hir;\n+use ty::util::IntTypeExt;\n \n #[derive(Copy, Clone, Debug)]\n pub enum LvalueTy<'tcx> {\n@@ -172,13 +172,7 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::Discriminant(ref lval) => {\n                 if let ty::TyAdt(adt_def, _) = lval.ty(mir, tcx).to_ty(tcx).sty {\n-                    // FIXME: Why this does not work?\n-                    // Some(adt_def.discr_ty.to_ty(tcx))\n-                    let ty = match adt_def.discr_ty {\n-                        attr::SignedInt(i) => tcx.mk_mach_int(i),\n-                        attr::UnsignedInt(i) => tcx.mk_mach_uint(i),\n-                    };\n-                    Some(ty)\n+                    Some(adt_def.discr_ty.to_ty(tcx))\n                 } else {\n                     None\n                 }"}, {"sha": "70ae799d3506fcd4b1c754544e70b58a5dd96376", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -453,13 +453,8 @@ impl Integer {\n     /// signed discriminant range and #[repr] attribute.\n     /// N.B.: u64 values above i64::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n-<<<<<<< HEAD\n-    fn repr_discr(tcx: TyCtxt, ty: Ty, repr: &ReprOptions, min: i64, max: i64)\n+    fn repr_discr(tcx: TyCtxt, ty: Ty, repr: &ReprOptions, min: i128, max: i128)\n                       -> (Integer, bool) {\n-=======\n-    pub fn repr_discr(tcx: TyCtxt, hints: &[attr::ReprAttr], min: i128, max: i128)\n-    -> (Integer, bool) {\n->>>>>>> cade130ae8... AdtDef now contains discr_ty same as layouted\n         // Theoretically, negative values could be larger in unsigned representation\n         // than the unsigned representation of the signed minimum. However, if there\n         // are any negative values, the only valid unsigned representation is u64\n@@ -470,7 +465,6 @@ impl Integer {\n         let mut min_from_extern = None;\n         let min_default = I8;\n \n-<<<<<<< HEAD\n         if let Some(ity) = repr.int {\n             let discr = Integer::from_attr(&tcx.data_layout, ity);\n             let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n@@ -489,36 +483,6 @@ impl Integer {\n                 // lower bound.  However, we don't run on those yet...?\n                 \"arm\" => min_from_extern = Some(I32),\n                 _ => min_from_extern = Some(I32),\n-=======\n-        for &r in hints.iter() {\n-            match r {\n-                attr::ReprInt(ity) => {\n-                    let discr = Integer::from_attr(&tcx.data_layout, ity);\n-                    let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n-                    if discr < fit {\n-                        bug!(\"Integer::repr_discr: `#[repr]` hint too small for \\\n-                              discriminant range of enum\")\n-                    }\n-                    return (discr, ity.is_signed());\n-                }\n-                attr::ReprExtern => {\n-                    match &tcx.sess.target.target.arch[..] {\n-                        // WARNING: the ARM EABI has two variants; the one corresponding\n-                        // to `at_least == I32` appears to be used on Linux and NetBSD,\n-                        // but some systems may use the variant corresponding to no\n-                        // lower bound.  However, we don't run on those yet...?\n-                        \"arm\" => min_from_extern = Some(I32),\n-                        _ => min_from_extern = Some(I32),\n-                    }\n-                }\n-                attr::ReprAny => {},\n-                attr::ReprPacked => {\n-                    bug!(\"Integer::repr_discr: found #[repr(packed)] on enum\");\n-                }\n-                attr::ReprSimd => {\n-                    bug!(\"Integer::repr_discr: found #[repr(simd)] on enum\");\n-                }\n->>>>>>> cade130ae8... AdtDef now contains discr_ty same as layouted\n             }\n         }\n "}, {"sha": "0281e53427d6d5317cb01d665d87547db30df5b9", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -39,14 +39,14 @@ use rustc_i128::i128;\n use hir;\n \n pub trait IntTypeExt {\n-    fn to_ty<'a, 'tcx>(self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_ty<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>;\n     fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)\n                            -> Option<Disr>;\n     fn initial_discriminant<'a, 'tcx>(&self, _: TyCtxt<'a, 'tcx, 'tcx>) -> Disr;\n }\n \n impl IntTypeExt for attr::IntType {\n-    fn to_ty<'a, 'gcx, 'tcx>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match self {\n             SignedInt(i) => tcx.mk_mach_int(i),\n             UnsignedInt(i) => tcx.mk_mach_uint(i),"}, {"sha": "7521b750d5a098d8186ed6a3ed4f9a9b5caeb557", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -706,8 +706,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             switch_ty: discr_ty,\n                             values: From::from(values),\n                             targets: blocks,\n-                            // adt_def: adt,\n-                            // targets: variant_drops\n                         }\n                     }),\n                     is_cleanup: c.is_cleanup,"}, {"sha": "d9c2e6bb090712884efd40598a5ce7211153ce02", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -22,10 +22,10 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::{ConstVal, ConstInt};\n use rustc::ty::{self, Ty};\n+use rustc::ty::util::IntTypeExt;\n use rustc::mir::*;\n use rustc::hir::RangeEnd;\n use syntax_pos::Span;\n-use syntax::attr;\n use std::cmp::Ordering;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -212,13 +212,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);\n-                // FIXME: WHY THIS DOES NOT WORK?!\n-                // let discr_ty = adt_def.discr_ty.to_ty(tcx);\n-                let discr_ty = match adt_def.discr_ty {\n-                    attr::SignedInt(i) => tcx.mk_mach_int(i),\n-                    attr::UnsignedInt(i) => tcx.mk_mach_uint(i),\n-                };\n-\n+                let discr_ty = adt_def.discr_ty.to_ty(tcx);\n                 let discr = self.temp(discr_ty);\n                 self.cfg.push_assign(block, source_info, &discr,\n                                      Rvalue::Discriminant(lvalue.clone()));"}, {"sha": "0810bfcadca3070f4b48c106ea7061bf093cabf4", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -438,7 +438,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let enum_ty = discr_lvalue.ty.to_ty(bcx.tcx());\n                 let discr_ty = rvalue.ty(&*self.mir, bcx.tcx()).unwrap();\n                 let discr_type = type_of::immediate_type_of(bcx.ccx, discr_ty);\n-                // FIXME: inline this\n                 let discr = adt::trans_get_discr(&bcx, enum_ty, discr_lvalue.llval, None, true);\n                 let discr = if common::val_ty(discr) == Type::i1(bcx.ccx) {\n                     bcx.zext(discr, discr_type)"}, {"sha": "2f8258ef616f9d65ac1ada9fc095123ccdb15ca3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9939863ca5983614e8e70e0abdb088af60ac590/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c9939863ca5983614e8e70e0abdb088af60ac590", "patch": "@@ -1047,7 +1047,8 @@ fn evaluate_disr_expr(ccx: &CrateCtxt, repr_ty: attr::IntType, body: hir::BodyId\n     let hint = UncheckedExprHint(ty_hint);\n     match ConstContext::new(ccx.tcx, body).eval(e, hint) {\n         Ok(ConstVal::Integral(i)) => {\n-            // FIXME: eval should return an error if the hint is wrong\n+            // FIXME: eval should return an error if the hint does not match the type of the body.\n+            // i.e. eventually the match below would not exist.\n             match (repr_ty, i) {\n                 (attr::SignedInt(ast::IntTy::I8), ConstInt::I8(_)) |\n                 (attr::SignedInt(ast::IntTy::I16), ConstInt::I16(_)) |"}]}