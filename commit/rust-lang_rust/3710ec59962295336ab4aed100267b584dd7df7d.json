{"sha": "3710ec59962295336ab4aed100267b584dd7df7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTBlYzU5OTYyMjk1MzM2YWI0YWVkMTAwMjY3YjU4NGRkN2RmN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T11:35:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T11:35:54Z"}, "message": "Auto merge of #4080 - rust-lang:rustup, r=oli-obk\n\nRustup to rustc 1.36.0-nightly (acc7e652f 2019-05-10)\n\nFixes breakages from https://github.com/rust-lang/rust/pull/59288\n\nNot finished yet, help appreciated.\n\nTodo:\n\n - [x] Needs to build\n - [x] Util should handle DropTemps, https://github.com/rust-lang/rust-clippy/pull/4080#discussion_r283079202\n - [x] Author lint should spit out higher::if_block checks\n - [x] Unsure what to do in consts.rs\n - [x] Needs to pass tests", "tree": {"sha": "a618fe591066924cdc16ae2483a4b15b59a45bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a618fe591066924cdc16ae2483a4b15b59a45bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3710ec59962295336ab4aed100267b584dd7df7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3710ec59962295336ab4aed100267b584dd7df7d", "html_url": "https://github.com/rust-lang/rust/commit/3710ec59962295336ab4aed100267b584dd7df7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3710ec59962295336ab4aed100267b584dd7df7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74aac9d0c8e35b17659198844ae71a58d685daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74aac9d0c8e35b17659198844ae71a58d685daf", "html_url": "https://github.com/rust-lang/rust/commit/c74aac9d0c8e35b17659198844ae71a58d685daf"}, {"sha": "19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "html_url": "https://github.com/rust-lang/rust/commit/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d"}], "stats": {"total": 240, "additions": 136, "deletions": 104}, "files": [{"sha": "05d3ea6b2748362448dc024b1ba51a2e2e77d06a", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -72,7 +72,7 @@ const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::If(check, then, _) = &expr.node {\n+        if let Some((check, then, _)) = higher::if_block(&expr) {\n             if let ExprKind::Block(block, _) = &check.node {\n                 if block.rules == DefaultBlock {\n                     if block.stmts.is_empty() {"}, {"sha": "c96c7e7e857a3b4dc777bc546f34fc855e176eaa", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, sext, unsext};\n+use crate::utils::{clip, higher, sext, unsext};\n use if_chain::if_chain;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n@@ -15,7 +15,6 @@ use std::convert::TryFrom;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{FloatTy, LitKind};\n-use syntax::ptr::P;\n use syntax_pos::symbol::{LocalInternedString, Symbol};\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n@@ -222,10 +221,12 @@ pub struct ConstEvalLateContext<'a, 'tcx: 'a> {\n impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr) -> Option<Constant> {\n+        if let Some((ref cond, ref then, otherwise)) = higher::if_block(&e) {\n+            return self.ifthenelse(cond, then, otherwise);\n+        }\n         match e.node {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id),\n             ExprKind::Block(ref block, _) => self.block(block),\n-            ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, otherwise),\n             ExprKind::Lit(ref lit) => Some(lit_to_constant(&lit.node, self.tables.expr_ty(e))),\n             ExprKind::Array(ref vec) => self.multi(vec).map(Constant::Vec),\n             ExprKind::Tup(ref tup) => self.multi(tup).map(Constant::Tuple),\n@@ -358,10 +359,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    fn ifthenelse(&mut self, cond: &Expr, then: &P<Expr>, otherwise: &Option<P<Expr>>) -> Option<Constant> {\n+    fn ifthenelse(&mut self, cond: &Expr, then: &Expr, otherwise: Option<&Expr>) -> Option<Constant> {\n         if let Some(Constant::Bool(b)) = self.expr(cond) {\n             if b {\n-                self.expr(&**then)\n+                self.expr(&*then)\n             } else {\n                 otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }"}, {"sha": "c08d6851aa0137c8ac9b6bd383cd5fe6f603acea", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{get_parent_expr, higher, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -109,13 +109,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if !in_macro(expr.span) {\n             // skip ifs directly in else, it will be checked in the parent if\n-            if let Some(&Expr {\n-                node: ExprKind::If(_, _, Some(ref else_expr)),\n-                ..\n-            }) = get_parent_expr(cx, expr)\n-            {\n-                if else_expr.hir_id == expr.hir_id {\n-                    return;\n+            if let Some(expr) = get_parent_expr(cx, expr) {\n+                if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {\n+                    if else_expr.hir_id == expr.hir_id {\n+                        return;\n+                    }\n                 }\n             }\n \n@@ -236,7 +234,7 @@ fn if_sequence(mut expr: &Expr) -> (SmallVec<[&Expr; 1]>, SmallVec<[&Block; 1]>)\n     let mut conds = SmallVec::new();\n     let mut blocks: SmallVec<[&Block; 1]> = SmallVec::new();\n \n-    while let ExprKind::If(ref cond, ref then_expr, ref else_expr) = expr.node {\n+    while let Some((ref cond, ref then_expr, ref else_expr)) = higher::if_block(&expr) {\n         conds.push(&**cond);\n         if let ExprKind::Block(ref block, _) = then_expr.node {\n             blocks.push(block);"}, {"sha": "551e0bb848d8b57476aa1cf84696015e52744561", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -41,7 +41,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.node {\n+        if let Some((ref check, ref then_block, ref else_block)) = higher::if_block(&expr) {\n             if let ExprKind::Unary(UnOp::UnNot, ref check) = check.node {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`"}, {"sha": "8e0fa1bf2e267f580c59188837cfd47ba83f5444", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -74,13 +74,6 @@ impl ImplicitReturn {\n                     Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n                 }\n             },\n-            ExprKind::If(.., if_expr, else_expr) => {\n-                Self::expr_match(cx, if_expr);\n-\n-                if let Some(else_expr) = else_expr {\n-                    Self::expr_match(cx, else_expr);\n-                }\n-            },\n             ExprKind::Match(.., arms, source) => {\n                 let check_all_arms = match source {\n                     MatchSource::IfLetDesugar {"}, {"sha": "990d8facd13473137606b8858aedad4b1a31cbb4", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::{higher, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Res;\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 if let hir::StmtKind::Local(ref local) = stmt.node;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.node;\n                 if let hir::StmtKind::Expr(ref if_) = expr.node;\n-                if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n+                if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n                 if !used_in_expr(cx, canonical_id, cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.node;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);"}, {"sha": "c67edc00e6b368977a6a09934f8c6b0722401756", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -686,14 +686,6 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Assign(ref e1, ref e2)\n         | ExprKind::AssignOp(_, ref e1, ref e2)\n         | ExprKind::Index(ref e1, ref e2) => never_loop_expr_all(&mut [&**e1, &**e2].iter().cloned(), main_loop_id),\n-        ExprKind::If(ref e, ref e2, ref e3) => {\n-            let e1 = never_loop_expr(e, main_loop_id);\n-            let e2 = never_loop_expr(e2, main_loop_id);\n-            let e3 = e3\n-                .as_ref()\n-                .map_or(NeverLoopResult::Otherwise, |e| never_loop_expr(e, main_loop_id));\n-            combine_seq(e1, combine_branches(e2, e3))\n-        },\n         ExprKind::Loop(ref b, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n@@ -2204,7 +2196,7 @@ fn is_loop(expr: &Expr) -> bool {\n \n fn is_conditional(expr: &Expr) -> bool {\n     match expr.node {\n-        ExprKind::If(..) | ExprKind::Match(..) => true,\n+        ExprKind::Match(..) => true,\n         _ => false,\n     }\n }"}, {"sha": "f8cde663d899a5ad333cacf436fec833eb037f38", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1266,7 +1266,6 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             hir::ExprKind::Call(..)\n             | hir::ExprKind::MethodCall(..)\n             // These variants are debatable or require further examination\n-            | hir::ExprKind::If(..)\n             | hir::ExprKind::Match(..)\n             | hir::ExprKind::Block{ .. } => true,\n             _ => false,"}, {"sha": "a28e6fa88bbe718aad0bb4d0f071653284285b78", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -89,12 +89,6 @@ fn check_expression<'a, 'tcx: 'a>(\n                 (false, false)\n             }\n         },\n-        // There must be an else_arm or there will be a type error\n-        hir::ExprKind::If(_, ref if_arm, Some(ref else_arm)) => {\n-            let if_check = check_expression(cx, arg_id, if_arm);\n-            let else_check = check_expression(cx, arg_id, else_arm);\n-            (if_check.0 | else_check.0, if_check.1 | else_check.1)\n-        },\n         hir::ExprKind::Match(_, ref arms, _) => {\n             let mut found_mapping = false;\n             let mut found_filtering = false;"}, {"sha": "0404bc41570f1b74e09b612b923c183612e92e20", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{in_macro, span_lint, span_lint_and_sugg};\n+use crate::utils::{higher, in_macro, span_lint, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -59,7 +59,7 @@ declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use self::Expression::*;\n-        if let ExprKind::If(ref pred, ref then_block, Some(ref else_expr)) = e.node {\n+        if let Some((ref pred, ref then_block, Some(ref else_expr))) = higher::if_block(&e) {\n             let reduce = |ret, not| {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let snip = Sugg::hir_with_applicability(cx, pred, \"<predicate>\", &mut applicability);\n@@ -119,7 +119,7 @@ fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) -> bool\n     let parent_node = cx.tcx.hir().get_by_hir_id(parent_id);\n \n     if let rustc::hir::Node::Expr(e) = parent_node {\n-        if let ExprKind::If(_, _, _) = e.node {\n+        if higher::if_block(&e).is_some() {\n             return true;\n         }\n     }"}, {"sha": "743c0c4224a2f9520747d7e571bed594cf204a6d", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -8,7 +8,7 @@ use syntax::ptr::P;\n \n use crate::utils::paths::*;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{match_type, span_lint_and_then, SpanlessEq};\n+use crate::utils::{higher, match_type, span_lint_and_then, SpanlessEq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator.\n@@ -48,7 +48,7 @@ impl QuestionMark {\n     /// If it matches, it will suggest to use the question mark operator instead\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::If(if_expr, body, else_) = &expr.node;\n+            if let Some((if_expr, body, else_)) = higher::if_block(&expr);\n             if let ExprKind::MethodCall(segment, _, args) = &if_expr.node;\n             if segment.ident.name == \"is_none\";\n             if Self::expression_returns_none(cx, body);"}, {"sha": "2d85189d111da2dd397696fe4dd0b7676fd5398b", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -319,13 +319,6 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n                 check_expr(cx, e, bindings)\n             }\n         },\n-        ExprKind::If(ref cond, ref then, ref otherwise) => {\n-            check_expr(cx, cond, bindings);\n-            check_expr(cx, &**then, bindings);\n-            if let Some(ref o) = *otherwise {\n-                check_expr(cx, o, bindings);\n-            }\n-        },\n         ExprKind::While(ref cond, ref block, _) => {\n             check_expr(cx, cond, bindings);\n             check_block(cx, block, bindings);"}, {"sha": "348579f75d187c89b28034b3b17c6d76d9f3a201", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n+use crate::utils::{higher::if_block, in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use syntax::source_map::Span;\n@@ -130,7 +130,7 @@ impl<'a, 'tcx: 'a> UnwrappableVariablesVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        if let ExprKind::If(cond, then, els) = &expr.node {\n+        if let Some((cond, then, els)) = if_block(&expr) {\n             walk_expr(self, cond);\n             self.visit_branch(cond, then, false);\n             if let Some(els) = els {"}, {"sha": "5b88494ae7b7186685e1572fd4902ca702582cbc", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::utils::get_attr;\n+use crate::utils::{get_attr, higher};\n use rustc::hir;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n@@ -187,6 +187,32 @@ struct PrintVisitor {\n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr) {\n+        // handle if desugarings\n+        // TODO add more desugarings here\n+        if let Some((cond, then, opt_else)) = higher::if_block(&expr) {\n+            let cond_pat = self.next(\"cond\");\n+            let then_pat = self.next(\"then\");\n+            if let Some(else_) = opt_else {\n+                let else_pat = self.next(\"else_\");\n+                println!(\n+                    \"    if let Some((ref {}, ref {}, Some({}))) = higher::if_block(&{});\",\n+                    cond_pat, then_pat, else_pat, self.current\n+                );\n+                self.current = else_pat;\n+                self.visit_expr(else_);\n+            } else {\n+                println!(\n+                    \"    if let Some((ref {}, ref {}, None)) = higher::if_block(&{});\",\n+                    cond_pat, then_pat, self.current\n+                );\n+            }\n+            self.current = cond_pat;\n+            self.visit_expr(cond);\n+            self.current = then_pat;\n+            self.visit_expr(then);\n+            return;\n+        }\n+\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.node\", self.current);\n         match expr.node {\n@@ -296,25 +322,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n-            ExprKind::If(ref cond, ref then, ref opt_else) => {\n-                let cond_pat = self.next(\"cond\");\n-                let then_pat = self.next(\"then\");\n-                if let Some(ref else_) = *opt_else {\n-                    let else_pat = self.next(\"else_\");\n-                    println!(\n-                        \"If(ref {}, ref {}, Some(ref {})) = {};\",\n-                        cond_pat, then_pat, else_pat, current\n-                    );\n-                    self.current = else_pat;\n-                    self.visit_expr(else_);\n-                } else {\n-                    println!(\"If(ref {}, ref {}, None) = {};\", cond_pat, then_pat, current);\n-                }\n-                self.current = cond_pat;\n-                self.visit_expr(cond);\n-                self.current = then_pat;\n-                self.visit_expr(then);\n-            },\n             ExprKind::While(ref cond, ref body, _) => {\n                 let cond_pat = self.next(\"cond\");\n                 let body_pat = self.next(\"body\");\n@@ -684,6 +691,10 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             \"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause\n         ),\n+        hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n+            \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n+            contains_else_clause\n+        ),\n         hir::MatchSource::AwaitDesugar => \"MatchSource::AwaitDesugar\".to_string(),\n     }\n }"}, {"sha": "5c9f5e25f4d844afc3488d4a1627b80f68ea2a6f", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -199,6 +199,27 @@ pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)>\n     None\n }\n \n+/// Recover the essential nodes of a desugared if block\n+/// `if cond { then } else { els }` becomes `(cond, then, Some(els))`\n+pub fn if_block(expr: &hir::Expr) -> Option<(&hir::Expr, &hir::Expr, Option<&hir::Expr>)> {\n+    if let hir::ExprKind::Match(ref cond, ref arms, hir::MatchSource::IfDesugar { contains_else_clause }) = expr.node {\n+        let cond = if let hir::ExprKind::DropTemps(ref cond) = cond.node {\n+            cond\n+        } else {\n+            panic!(\"If block desugar must contain DropTemps\");\n+        };\n+        let then = &arms[0].body;\n+        let els = if contains_else_clause {\n+            Some(&*arms[1].body)\n+        } else {\n+            None\n+        };\n+        Some((cond, then, els))\n+    } else {\n+        None\n+    }\n+}\n+\n /// Represent the pre-expansion arguments of a `vec!` invocation.\n pub enum VecArgs<'a> {\n     /// `vec![elem; len]`"}, {"sha": "de12990046781950b3eb86171d18c6d5d713b46b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -114,9 +114,6 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Index(ref la, ref li), &ExprKind::Index(ref ra, ref ri)) => {\n                 self.eq_expr(la, ra) && self.eq_expr(li, ri)\n             },\n-            (&ExprKind::If(ref lc, ref lt, ref le), &ExprKind::If(ref rc, ref rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n-            },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n@@ -493,15 +490,6 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _, _) -> _ = ExprKind::InlineAsm;\n                 c.hash(&mut self.s);\n             },\n-            ExprKind::If(ref cond, ref t, ref e) => {\n-                let c: fn(_, _, _) -> _ = ExprKind::If;\n-                c.hash(&mut self.s);\n-                self.hash_expr(cond);\n-                self.hash_expr(&**t);\n-                if let Some(ref e) = *e {\n-                    self.hash_expr(e);\n-                }\n-            },\n             ExprKind::Lit(ref l) => {\n                 let c: fn(_) -> _ = ExprKind::Lit;\n                 c.hash(&mut self.s);"}, {"sha": "633ebb3dd4234e75fec70fd4ae77b842814a8da6", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -209,15 +209,6 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             print_expr(cx, e, indent + 1);\n             println!(\"{}target type: {:?}\", ind, target);\n         },\n-        hir::ExprKind::If(ref e, _, ref els) => {\n-            println!(\"{}If\", ind);\n-            println!(\"{}condition:\", ind);\n-            print_expr(cx, e, indent + 1);\n-            if let Some(ref els) = *els {\n-                println!(\"{}else:\", ind);\n-                print_expr(cx, els, indent + 1);\n-            }\n-        },\n         hir::ExprKind::While(ref cond, _, _) => {\n             println!(\"{}While\", ind);\n             println!(\"{}condition:\", ind);"}, {"sha": "7ebaeb0951f7477ebe2f22a049446c2ffec6df99", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -40,6 +40,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n+use syntax::ext::hygiene::ExpnFormat;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{keywords, Symbol};\n \n@@ -90,7 +91,15 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n \n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n-    span.ctxt().outer().expn_info().is_some()\n+    if let Some(info) = span.ctxt().outer().expn_info() {\n+        if let ExpnFormat::CompilerDesugaring(..) = info.format {\n+            false\n+        } else {\n+            true\n+        }\n+    } else {\n+        false\n+    }\n }\n \n // If the snippet is empty, it's an attribute that was inserted during macro"}, {"sha": "7d029d0f61e2d5667ee9bd55316be84b4ab37ebf", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -94,7 +94,6 @@ impl<'a> Sugg<'a> {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Closure(.., _)\n-            | hir::ExprKind::If(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             hir::ExprKind::Continue(..)"}, {"sha": "2e9cb1466d0b5616a85770274cff4b602e7b687d", "filename": "tests/ui/author/if.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.rs?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -0,0 +1,10 @@\n+#[allow(clippy::all)]\n+\n+fn main() {\n+    #[clippy::author]\n+    let _ = if true {\n+        1 == 1;\n+    } else {\n+        2 == 2;\n+    };\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/author/if.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stderr?ref=3710ec59962295336ab4aed100267b584dd7df7d"}, {"sha": "bff6546a9314bf28c3e24203525f55a7ff1f6663", "filename": "tests/ui/author/if.stdout", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -0,0 +1,27 @@\n+if_chain! {\n+    if let StmtKind::Local(ref local) = stmt.node;\n+    if let Some(ref init) = local.init;\n+    if let Some((ref cond, ref then, Some(else_))) = higher::if_block(&init);\n+    if let ExprKind::Block(ref block) = else_.node;\n+    if let StmtKind::Semi(ref e, _) = block.node\n+    if let ExprKind::Binary(ref op, ref left, ref right) = e.node;\n+    if BinOpKind::Eq == op.node;\n+    if let ExprKind::Lit(ref lit) = left.node;\n+    if let LitKind::Int(2, _) = lit.node;\n+    if let ExprKind::Lit(ref lit1) = right.node;\n+    if let LitKind::Int(2, _) = lit1.node;\n+    if let ExprKind::Lit(ref lit2) = cond.node;\n+    if let LitKind::Bool(true) = lit2.node;\n+    if let ExprKind::Block(ref block1) = then.node;\n+    if let StmtKind::Semi(ref e1, _) = block1.node\n+    if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.node;\n+    if BinOpKind::Eq == op1.node;\n+    if let ExprKind::Lit(ref lit3) = left1.node;\n+    if let LitKind::Int(1, _) = lit3.node;\n+    if let ExprKind::Lit(ref lit4) = right1.node;\n+    if let LitKind::Int(1, _) = lit4.node;\n+    if let PatKind::Wild = local.pat.node;\n+    then {\n+        // report your lint here\n+    }\n+}"}, {"sha": "f5342be631b04888fb1ceddd7fe49fa3ff6f16a4", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n+    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n \n     let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();"}, {"sha": "931e4880f938b47c0ffb6277a75f3d01f1b41d62", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3710ec59962295336ab4aed100267b584dd7df7d/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=3710ec59962295336ab4aed100267b584dd7df7d", "patch": "@@ -1,15 +1,21 @@\n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:15:23\n+  --> $DIR/into_iter_on_ref.rs:13:24\n    |\n-LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n-   |                       ^^^^^^^^^ help: call directly: `iter`\n+LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n+   |                        ^^^^^^^^^ help: call directly: `iter`\n    |\n note: lint level defined here\n   --> $DIR/into_iter_on_ref.rs:4:9\n    |\n LL | #![deny(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: this .into_iter() call is equivalent to .iter() and will not move the array\n+  --> $DIR/into_iter_on_ref.rs:15:23\n+   |\n+LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n+   |                       ^^^^^^^^^ help: call directly: `iter`\n+\n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n   --> $DIR/into_iter_on_ref.rs:17:30\n    |\n@@ -168,5 +174,5 @@ error: this .into_iter() call is equivalent to .iter() and will not move the Pat\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}]}