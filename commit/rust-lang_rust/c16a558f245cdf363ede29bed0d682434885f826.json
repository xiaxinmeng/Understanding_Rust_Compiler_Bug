{"sha": "c16a558f245cdf363ede29bed0d682434885f826", "node_id": "C_kwDOAAsO6NoAKGMxNmE1NThmMjQ1Y2RmMzYzZWRlMjliZWQwZDY4MjQzNDg4NWY4MjY", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-28T13:06:46Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-04-03T19:29:57Z"}, "message": "Replace LinkArgs with Cow<'static, str>", "tree": {"sha": "558dd0b026e3c8235aff20a60fec57ddd7a3ecf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558dd0b026e3c8235aff20a60fec57ddd7a3ecf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16a558f245cdf363ede29bed0d682434885f826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16a558f245cdf363ede29bed0d682434885f826", "html_url": "https://github.com/rust-lang/rust/commit/c16a558f245cdf363ede29bed0d682434885f826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16a558f245cdf363ede29bed0d682434885f826/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce61d4044d7621fd190a2ddd1f51fa78e2941518", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce61d4044d7621fd190a2ddd1f51fa78e2941518", "html_url": "https://github.com/rust-lang/rust/commit/ce61d4044d7621fd190a2ddd1f51fa78e2941518"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "40fe3c86e43012de988d042744fd15d05f2981b2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c16a558f245cdf363ede29bed0d682434885f826", "patch": "@@ -40,6 +40,7 @@ use std::ffi::OsString;\n use std::fs::{File, OpenOptions};\n use std::io::{BufWriter, Write};\n use std::lazy::OnceCell;\n+use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -1586,7 +1587,7 @@ fn add_post_link_objects(\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     if let Some(args) = sess.target.pre_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n@@ -1634,23 +1635,23 @@ fn add_late_link_args(\n         });\n     if any_dynamic_crate {\n         if let Some(args) = sess.target.late_link_args_dynamic.get(&flavor) {\n-            cmd.args(args);\n+            cmd.args(args.iter().map(Deref::deref));\n         }\n     } else {\n         if let Some(args) = sess.target.late_link_args_static.get(&flavor) {\n-            cmd.args(args);\n+            cmd.args(args.iter().map(Deref::deref));\n         }\n     }\n     if let Some(args) = sess.target.late_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     if let Some(args) = sess.target.post_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n }\n "}, {"sha": "c288e8b0e9ea3ae6fcdc38b4d4e92488ce354857", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=c16a558f245cdf363ede29bed0d682434885f826", "patch": "@@ -17,7 +17,7 @@ pub fn target(target_cpu: &'static str) -> Target {\n             linker: Some(\"avr-gcc\".into()),\n             executables: true,\n             eh_frame_header: false,\n-            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n+            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu).into()])]\n                 .into_iter()\n                 .collect(),\n             late_link_args: [(LinkerFlavor::Gcc, vec![\"-lgcc\".into()])].into_iter().collect(),"}, {"sha": "96623e1c1630cb991edf2ad4f64782cf69337769", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=c16a558f245cdf363ede29bed0d682434885f826", "patch": "@@ -459,7 +459,7 @@ impl fmt::Display for LinkOutputKind {\n     }\n }\n \n-pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n+pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<Cow<'static, str>>>;\n \n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n pub enum SplitDebuginfo {\n@@ -1978,7 +1978,7 @@ impl Target {\n                             .map(|(i,s)| {\n                                 let s = s.as_string().ok_or_else(||\n                                     format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n-                                Ok(s.into())\n+                                Ok(s.to_string().into())\n                             })\n                             .collect::<Result<Vec<_>, String>>()?;\n "}, {"sha": "de7b7374af3145f9bb04d5dabb02ff30c599e9fd", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=c16a558f245cdf363ede29bed0d682434885f826", "patch": "@@ -5,9 +5,9 @@ use std::collections::BTreeMap;\n pub fn options() -> TargetOptions {\n     let mut lld_args = Vec::new();\n     let mut clang_args = Vec::new();\n-    let mut arg = |arg: &str| {\n+    let mut arg = |arg: &'static str| {\n         lld_args.push(arg.into());\n-        clang_args.push(format!(\"-Wl,{}\", arg));\n+        clang_args.push(format!(\"-Wl,{}\", arg).into());\n     };\n \n     // By default LLD only gives us one page of stack (64k) which is a"}, {"sha": "47c70513faf88f71eddc89a14c0236c0c77fc8de", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16a558f245cdf363ede29bed0d682434885f826/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=c16a558f245cdf363ede29bed0d682434885f826", "patch": "@@ -68,7 +68,7 @@ pub fn target() -> Target {\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n             LinkerFlavor::Lld(LldFlavor::Ld),\n-            PRE_LINK_ARGS.iter().cloned().map(String::from).collect(),\n+            PRE_LINK_ARGS.iter().cloned().map(Cow::from).collect(),\n         ))\n         .collect(),\n         override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(Cow::from).collect()),"}]}