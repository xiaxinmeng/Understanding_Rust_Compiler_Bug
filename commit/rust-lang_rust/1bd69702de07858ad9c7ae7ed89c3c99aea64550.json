{"sha": "1bd69702de07858ad9c7ae7ed89c3c99aea64550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDY5NzAyZGUwNzg1OGFkOWM3YWU3ZWQ4OWMzYzk5YWVhNjQ1NTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T17:35:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T17:36:21Z"}, "message": "Account for `Self` as a type param", "tree": {"sha": "833948c489ef166c2ae76b5c2f8dafde455d4e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833948c489ef166c2ae76b5c2f8dafde455d4e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd69702de07858ad9c7ae7ed89c3c99aea64550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd69702de07858ad9c7ae7ed89c3c99aea64550", "html_url": "https://github.com/rust-lang/rust/commit/1bd69702de07858ad9c7ae7ed89c3c99aea64550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd69702de07858ad9c7ae7ed89c3c99aea64550/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f213acf4db81a33308ab2d53b5927108d63a2d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f213acf4db81a33308ab2d53b5927108d63a2d7f", "html_url": "https://github.com/rust-lang/rust/commit/f213acf4db81a33308ab2d53b5927108d63a2d7f"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "5f14f799fc7aa89868ae29a70191967ce33803ed", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=1bd69702de07858ad9c7ae7ed89c3c99aea64550", "patch": "@@ -6,6 +6,7 @@ use crate::infer::{Subtype, TyCtxtInferExt, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -124,15 +125,17 @@ impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n         match arg.kind {\n-            hir::TyKind::Slice(_) | hir::TyKind::Tup(_) | hir::TyKind::Array(..) => {\n-                hir::intravisit::walk_ty(self, arg);\n+            hir::TyKind::Rptr(_, ref mut_ty) => {\n+                // We don't want to suggest looking into borrowing `&T` or `&Self`.\n+                hir::intravisit::walk_ty(self, mut_ty.ty);\n+                return;\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n                 [segment]\n                     if segment\n                         .res\n                         .map(|res| match res {\n-                            hir::def::Res::Def(hir::def::DefKind::TyParam, _) => true,\n+                            Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _) => true,\n                             _ => false,\n                         })\n                         .unwrap_or(false) =>\n@@ -143,5 +146,6 @@ impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n             },\n             _ => {}\n         }\n+        hir::intravisit::walk_ty(self, arg);\n     }\n }"}, {"sha": "99013d32ab8d09891a1a13df118826baee0e5864", "filename": "src/test/ui/traits/self-without-lifetime-constraint.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs?ref=1bd69702de07858ad9c7ae7ed89c3c99aea64550", "patch": "@@ -0,0 +1,53 @@\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum ValueRef<'a> {\n+    Null,\n+    Integer(i64),\n+    Real(f64),\n+    Text(&'a [u8]),\n+    Blob(&'a [u8]),\n+}\n+\n+impl<'a> ValueRef<'a> {\n+    pub fn as_str(&self) -> FromSqlResult<&'a str, &'a &'a str> {\n+        match *self {\n+            ValueRef::Text(t) => {\n+                std::str::from_utf8(t).map_err(|_| FromSqlError::InvalidType).map(|x| (x, &x))\n+            }\n+            _ => Err(FromSqlError::InvalidType),\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+#[non_exhaustive]\n+pub enum FromSqlError {\n+    InvalidType\n+}\n+\n+impl fmt::Display for FromSqlError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"InvalidType\")\n+    }\n+}\n+\n+impl Error for FromSqlError {}\n+\n+pub type FromSqlResult<T, K> = Result<(T, K), FromSqlError>;\n+\n+pub trait FromSql: Sized {\n+    fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+}\n+\n+impl FromSql for &str {\n+    fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        value.as_str()\n+    }\n+}\n+\n+pub fn main() {\n+    println!(\"{}\", \"Hello World\");\n+}"}, {"sha": "6c7abe753e2bf254d7265234a6f39103cc33e7b8", "filename": "src/test/ui/traits/self-without-lifetime-constraint.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bd69702de07858ad9c7ae7ed89c3c99aea64550/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr?ref=1bd69702de07858ad9c7ae7ed89c3c99aea64550", "patch": "@@ -0,0 +1,19 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/self-without-lifetime-constraint.rs:45:5\n+   |\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+   |     -------------------------------------------------------------------- expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+...\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+   |\n+   = note: expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n+              found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/self-without-lifetime-constraint.rs:41:60\n+   |\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+   |                                                            ^^^^ consider borrowing this type parameter in the trait\n+\n+error: aborting due to previous error\n+"}]}