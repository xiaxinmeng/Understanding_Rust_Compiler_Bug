{"sha": "4e08bab87dbddea55247013bab9735fa2148ec84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDhiYWI4N2RiZGRlYTU1MjQ3MDEzYmFiOTczNWZhMjE0OGVjODQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-28T22:26:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:25:54Z"}, "message": "Increase accuracy of lifetime bound on trait object impl suggestion", "tree": {"sha": "968799d399f34371f60995ff790a10607ca16dfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/968799d399f34371f60995ff790a10607ca16dfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e08bab87dbddea55247013bab9735fa2148ec84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e08bab87dbddea55247013bab9735fa2148ec84", "html_url": "https://github.com/rust-lang/rust/commit/4e08bab87dbddea55247013bab9735fa2148ec84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e08bab87dbddea55247013bab9735fa2148ec84/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6513148c146c36b0d1649cdb65a3a4737599252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6513148c146c36b0d1649cdb65a3a4737599252f", "html_url": "https://github.com/rust-lang/rust/commit/6513148c146c36b0d1649cdb65a3a4737599252f"}], "stats": {"total": 435, "additions": 321, "deletions": 114}, "files": [{"sha": "6474dc318d329f73854c2c0526b8f075589c7f0b", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -2198,7 +2198,17 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+#[derive(\n+    Copy,\n+    Clone,\n+    PartialEq,\n+    RustcEncodable,\n+    RustcDecodable,\n+    Debug,\n+    HashStable_Generic,\n+    Eq,\n+    Hash\n+)]\n pub enum Defaultness {\n     Default { has_value: bool },\n     Final,"}, {"sha": "c63464e5baec9e3b1a71409ad0402cc1a710684e", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -36,12 +36,13 @@ use crate::traits::{Obligation, PredicateObligations};\n \n use rustc_ast::ast;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n@@ -367,10 +368,11 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         };\n \n         debug!(\"generalize: for_universe = {:?}\", for_universe);\n+        debug!(\"generalize: trace = {:?}\", self.trace);\n \n         let mut generalize = Generalizer {\n             infcx: self.infcx,\n-            span: self.trace.cause.span,\n+            cause: &self.trace.cause,\n             for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),\n             for_universe,\n             ambient_variance,\n@@ -414,7 +416,7 @@ struct Generalizer<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n     /// The span, used when creating new type variables and things.\n-    span: Span,\n+    cause: &'cx ObligationCause<'tcx>,\n \n     /// The vid of the type variable that is in the process of being\n     /// instantiated; if we find this within the type we are folding,\n@@ -639,7 +641,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n \n         // FIXME: This is non-ideal because we don't give a\n         // very descriptive origin for this region variable.\n-        Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))\n+        Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))\n     }\n \n     fn consts("}, {"sha": "ff905faa95a9fe627e85e4b433c303218f5ef493", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -2010,7 +2010,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::MiscVariable(_) => String::new(),\n             infer::PatternRegion(_) => \" for pattern\".to_string(),\n             infer::AddrOfRegion(_) => \" for borrow expression\".to_string(),\n-            infer::Autoref(_) => \" for autoref\".to_string(),\n+            infer::Autoref(_, _) => \" for autoref\".to_string(),\n             infer::Coercion(_) => \" for automatic coercion\".to_string(),\n             infer::LateBoundRegion(_, br, infer::FnCall) => {\n                 format!(\" for lifetime parameter {}in function call\", br_string(br))"}, {"sha": "0aa1d65612ee6bb813e05467fd0ee824b7444353", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 136, "deletions": 48, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -2,14 +2,14 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::{SubregionOrigin, TypeTrace};\n+use crate::traits::ObligationCauseCode;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_hir::{\n-    GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, Path, PolyTraitRef, TraitRef,\n-    TyKind,\n-};\n-use rustc_middle::ty::{self, RegionKind, Ty, TypeFoldable, TypeVisitor};\n+use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n+use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n+use rustc_span::Span;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n@@ -27,6 +27,39 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ) if **sub_r == RegionKind::ReStatic => {\n                 (var_origin, sub_origin, sub_r, sup_origin, sup_r)\n             }\n+            RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::Subtype(box TypeTrace { cause, .. }),\n+                sub_r,\n+                sup_r,\n+            ) if **sub_r == RegionKind::ReStatic => {\n+                // This is for the implicit `'static` requirement coming from `impl dyn Trait {}`.\n+                if let ObligationCauseCode::UnifyReceiver(assoc) = &cause.code {\n+                    let param = self.find_param_with_region(sup_r, sub_r)?;\n+                    let lifetime = if sup_r.has_name() {\n+                        format!(\"lifetime `{}`\", sup_r)\n+                    } else {\n+                        \"an anonymous lifetime `'_`\".to_string()\n+                    };\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n+                        cause.span,\n+                        E0759,\n+                        \"cannot infer an appropriate lifetime\"\n+                    );\n+                    err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n+                    err.span_label(\n+                        cause.span,\n+                        \"...is captured and required to live as long as `'static` here\",\n+                    );\n+                    if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &assoc.container) {\n+                        err.emit();\n+                        return Some(ErrorReported);\n+                    } else {\n+                        err.cancel();\n+                    }\n+                }\n+                return None;\n+            }\n             _ => return None,\n         };\n         debug!(\n@@ -96,7 +129,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             );\n         }\n \n-        self.find_impl_on_dyn_trait(&mut err, param.param_ty);\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n+            if let ObligationCauseCode::UnifyReceiver(assoc) = &cause.code {\n+                self.find_impl_on_dyn_trait(&mut err, param.param_ty, &assoc.container);\n+            }\n+        }\n \n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n         debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n@@ -222,63 +259,86 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n     /// When we call a method coming from an `impl Foo for dyn Bar`, `dyn Bar` introduces a default\n     /// `'static` obligation. Find `impl` blocks that are implemented\n-    fn find_impl_on_dyn_trait(&self, err: &mut DiagnosticBuilder<'_>, ty: Ty<'_>) -> bool {\n+    fn find_impl_on_dyn_trait(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        ty: Ty<'_>,\n+        container: &AssocItemContainer,\n+    ) -> bool {\n         let tcx = self.tcx();\n+        let mut suggested = false;\n \n         // Find the trait object types in the argument.\n         let mut v = TraitObjectVisitor(vec![]);\n         v.visit_ty(ty);\n-        debug!(\"TraitObjectVisitor {:?}\", v.0);\n \n-        // Find all the `impl`s in the local scope that can be called on the type parameter.\n-        // FIXME: this doesn't find `impl dyn Trait { /**/ }`.\n+        let container_id = match container {\n+            // When the obligation comes from an `impl Foo for dyn Bar {}`, we\n+            // have the `DefId` of the `trait` itself, not the relevant `impl`\n+            // block. Because of this, we have to look at all the `trait`s\n+            // available, and filter out all that are not of `Foo` (this `def_id`)\n+            // and not of `Bar` (the `filter_map` later in this method).\n+            AssocItemContainer::TraitContainer(def_id) => def_id,\n+\n+            // When the obligation comes from an `impl dyn Trait {}`, we already\n+            // have the `DefId` of the relevant `Item`, so we use it directly.\n+            AssocItemContainer::ImplContainer(def_id) => {\n+                if let Some(Node::Item(Item { kind: ItemKind::Impl { self_ty, .. }, .. })) =\n+                    tcx.hir().get_if_local(*def_id)\n+                {\n+                    for found_did in &v.0 {\n+                        let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n+                        hir_v.visit_ty(self_ty);\n+                        if let [span] = &hir_v.0[..] {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_hi(),\n+                                \"this `impl` introduces an implicit `'static` requirement, \\\n+                                 consider changing it\",\n+                                \" + '_\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            suggested = true;\n+                        }\n+                    }\n+                }\n+                return suggested;\n+            }\n+        };\n+\n+        // Find all the `impl`s in the local scope that can be called on the type parameter. And\n+        // retain all that are `impl`s of the trait that originated the `'static` obligation.\n+        // This doesn't find `impl dyn Trait { /**/ }`, but that case is handled above.\n         let impl_self_tys = tcx\n             .all_traits(LOCAL_CRATE)\n             .iter()\n             .flat_map(|trait_did| tcx.hir().trait_impls(*trait_did))\n             .filter_map(|impl_node| {\n                 let impl_did = tcx.hir().local_def_id(*impl_node);\n-                if let Some(Node::Item(Item { kind: ItemKind::Impl { self_ty, .. }, .. })) =\n-                    tcx.hir().get_if_local(impl_did.to_def_id())\n-                {\n-                    Some(self_ty)\n-                } else {\n-                    None\n+                match tcx.hir().get_if_local(impl_did.to_def_id()) {\n+                    Some(Node::Item(Item {\n+                        kind: ItemKind::Impl { self_ty, of_trait: Some(of_trait), .. },\n+                        ..\n+                    })) if of_trait.trait_def_id() == Some(*container_id) => Some(self_ty),\n+                    _ => None,\n                 }\n             });\n-        let mut suggested = false;\n+\n+        // Given all the `impl`s of the relevant `trait`, look for those that are implemented for\n+        // the trait object in the `fn` parameter type.\n         for self_ty in impl_self_tys {\n-            if let TyKind::TraitObject(\n-                poly_trait_refs,\n-                Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n-            ) = self_ty.kind\n-            {\n-                for p in poly_trait_refs {\n-                    if let PolyTraitRef {\n-                        trait_ref:\n-                            TraitRef { path: Path { res: Res::Def(DefKind::Trait, did), .. }, .. },\n-                        ..\n-                    } = p\n-                    {\n-                        for found_did in &v.0 {\n-                            if did == found_did {\n-                                // We've found an `impl Foo for dyn Bar {}`.\n-                                // FIXME: we should change this so it also works for\n-                                // `impl Foo for Box<dyn Bar> {}`.\n-                                err.span_suggestion_verbose(\n-                                    self_ty.span.shrink_to_hi(),\n-                                    \"this `impl` introduces an implicit `'static` requirement, \\\n-                                     consider changing it\",\n-                                    \" + '_\".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                suggested = true;\n-                            }\n-                        }\n-                    }\n+            for found_did in &v.0 {\n+                let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n+                hir_v.visit_ty(self_ty);\n+                if let [span] = &hir_v.0[..] {\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"this `impl` introduces an implicit `'static` requirement, \\\n+                            consider changing it\",\n+                        \" + '_\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    suggested = true;\n                 }\n-                err.emit();\n-                return Some(ErrorReported);\n             }\n         }\n         suggested\n@@ -301,3 +361,31 @@ impl TypeVisitor<'_> for TraitObjectVisitor {\n         }\n     }\n }\n+\n+/// Collect all `hir::Ty<'_>` `Span`s for trait objects with an implicit lifetime.\n+struct HirTraitObjectVisitor(Vec<Span>, DefId);\n+\n+impl<'tcx> Visitor<'tcx> for HirTraitObjectVisitor {\n+    type Map = ErasedMap<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {\n+        match t.kind {\n+            TyKind::TraitObject(\n+                poly_trait_refs,\n+                Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+            ) => {\n+                for ptr in poly_trait_refs {\n+                    if Some(self.1) == ptr.trait_ref.trait_def_id() {\n+                        self.0.push(ptr.span);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        walk_ty(self, t);\n+    }\n+}"}, {"sha": "28e9dd90cfd674531eafece5122db6f3410fa2f5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -7,20 +7,18 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::{self, DefIdTree, Region, Ty};\n use rustc_span::Span;\n \n-// The struct contains the information about the anonymous region\n-// we are searching for.\n+/// Information about the anonymous region we are searching for.\n #[derive(Debug)]\n pub(super) struct AnonymousParamInfo<'tcx> {\n-    // the parameter corresponding to the anonymous region\n+    /// The parameter corresponding to the anonymous region.\n     pub param: &'tcx hir::Param<'tcx>,\n-    // the type corresponding to the anonymopus region parameter\n+    /// The type corresponding to the anonymous region parameter.\n     pub param_ty: Ty<'tcx>,\n-    // the ty::BoundRegion corresponding to the anonymous region\n+    /// The ty::BoundRegion corresponding to the anonymous region.\n     pub bound_region: ty::BoundRegion,\n-    // param_ty_span contains span of parameter type\n+    /// The `Span` of the parameter type.\n     pub param_ty_span: Span,\n-    // corresponds to id the argument is the first parameter\n-    // in the declaration\n+    /// Signals that the argument is the first parameter in the declaration.\n     pub is_first: bool,\n }\n "}, {"sha": "3744ad5d0324a59ebd145ae16ca0537210feb11d", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -463,7 +463,7 @@ pub enum RegionVariableOrigin {\n     AddrOfRegion(Span),\n \n     /// Regions created as part of an autoref of a method receiver\n-    Autoref(Span),\n+    Autoref(Span, ty::AssocItem),\n \n     /// Regions created as part of an automatic coercion\n     Coercion(Span),\n@@ -1800,15 +1800,15 @@ impl<'tcx> SubregionOrigin<'tcx> {\n impl RegionVariableOrigin {\n     pub fn span(&self) -> Span {\n         match *self {\n-            MiscVariable(a) => a,\n-            PatternRegion(a) => a,\n-            AddrOfRegion(a) => a,\n-            Autoref(a) => a,\n-            Coercion(a) => a,\n-            EarlyBoundRegion(a, ..) => a,\n-            LateBoundRegion(a, ..) => a,\n+            MiscVariable(a)\n+            | PatternRegion(a)\n+            | AddrOfRegion(a)\n+            | Autoref(a, _)\n+            | Coercion(a)\n+            | EarlyBoundRegion(a, ..)\n+            | LateBoundRegion(a, ..)\n+            | UpvarRegion(_, a) => a,\n             BoundRegionInCoherence(_) => rustc_span::DUMMY_SP,\n-            UpvarRegion(_, a) => a,\n             NLL(..) => bug!(\"NLL variable used with `span`\"),\n         }\n     }"}, {"sha": "bacb7fa153e43b1a0cca8d8f5272ec5c71d749f5", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -13,6 +13,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "c066ea831b29877f1b7c6028a311edec604c4771", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -300,6 +300,8 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Method receiver\n     MethodReceiver,\n \n+    UnifyReceiver(Rc<ty::AssocItem>),\n+\n     /// `return` with no expression\n     ReturnNoExpression,\n "}, {"sha": "61ef0821733e8b386fe4a1a7c2e8afd6df18ecdf", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -213,6 +213,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::StartFunctionType => Some(super::StartFunctionType),\n             super::IntrinsicType => Some(super::IntrinsicType),\n             super::MethodReceiver => Some(super::MethodReceiver),\n+            super::UnifyReceiver(ref assoc) => Some(super::UnifyReceiver(assoc.clone())),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n             super::TrivialBound => Some(super::TrivialBound),\n         }"}, {"sha": "9007bd99d7e4b6e8df08b1dbc00477781a0a4d79", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -136,7 +136,7 @@ pub struct ResolverOutputs {\n     pub extern_prelude: FxHashMap<Symbol, bool>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Hash)]\n pub enum AssocItemContainer {\n     TraitContainer(DefId),\n     ImplContainer(DefId),\n@@ -184,7 +184,7 @@ pub enum ImplPolarity {\n     Reservation,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable, Eq, Hash)]\n pub struct AssocItem {\n     pub def_id: DefId,\n     #[stable_hasher(project(name))]\n@@ -199,7 +199,7 @@ pub struct AssocItem {\n     pub fn_has_self_parameter: bool,\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable, Eq, Hash)]\n pub enum AssocKind {\n     Const,\n     Fn,\n@@ -316,7 +316,7 @@ impl<'tcx> AssociatedItems<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Copy, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Copy, RustcEncodable, RustcDecodable, HashStable, Hash)]\n pub enum Visibility {\n     /// Visible everywhere (including in other crates).\n     Public,"}, {"sha": "e94b44d879533c09284dd0382c3bb982f2518854", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -1706,6 +1706,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::IntrinsicType\n             | ObligationCauseCode::MethodReceiver\n             | ObligationCauseCode::ReturnNoExpression\n+            | ObligationCauseCode::UnifyReceiver(_)\n             | ObligationCauseCode::MiscObligation => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "58cbe8b2479d69895b9139952b1279164a0a80ed", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -6,6 +6,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::GenericArg;\n use rustc_hir as hir;\n use rustc_infer::infer::{self, InferOk};\n+use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -15,6 +16,7 @@ use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n use std::ops::Deref;\n+use std::rc::Rc;\n \n struct ConfirmContext<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -91,7 +93,11 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // signature (which is also done during probing).\n         let method_sig_rcvr =\n             self.normalize_associated_types_in(self.span, &method_sig.inputs()[0]);\n-        self.unify_receivers(self_ty, method_sig_rcvr);\n+        debug!(\n+            \"confirm: self_ty={:?} method_sig_rcvr={:?} method_sig={:?} method_predicates={:?}\",\n+            self_ty, method_sig_rcvr, method_sig, method_predicates\n+        );\n+        self.unify_receivers(self_ty, method_sig_rcvr, &pick);\n \n         let (method_sig, method_predicates) =\n             self.normalize_associated_types_in(self.span, &(method_sig, method_predicates));\n@@ -150,7 +156,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n \n         if let Some(mutbl) = pick.autoref {\n-            let region = self.next_region_var(infer::Autoref(self.span));\n+            let region = self.next_region_var(infer::Autoref(self.span, pick.item));\n             target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl, ty: target });\n             let mutbl = match mutbl {\n                 hir::Mutability::Not => AutoBorrowMutability::Not,\n@@ -334,8 +340,18 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         )\n     }\n \n-    fn unify_receivers(&mut self, self_ty: Ty<'tcx>, method_self_ty: Ty<'tcx>) {\n-        match self.at(&self.misc(self.span), self.param_env).sup(method_self_ty, self_ty) {\n+    fn unify_receivers(\n+        &mut self,\n+        self_ty: Ty<'tcx>,\n+        method_self_ty: Ty<'tcx>,\n+        pick: &probe::Pick<'tcx>,\n+    ) {\n+        debug!(\n+            \"unify_receivers: self_ty={:?} method_self_ty={:?} span={:?} pick={:?}\",\n+            self_ty, method_self_ty, self.span, pick\n+        );\n+        let cause = self.cause(self.span, ObligationCauseCode::UnifyReceiver(Rc::new(pick.item)));\n+        match self.at(&cause, self.param_env).sup(method_self_ty, self_ty) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n             }"}, {"sha": "dd53ee06ff5ee15ebe52677caadb987cb2041be6", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6513148c146c36b0d1649cdb65a3a4737599252f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6513148c146c36b0d1649cdb65a3a4737599252f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs?ref=6513148c146c36b0d1649cdb65a3a4737599252f", "patch": "@@ -1,14 +0,0 @@\n-trait OtherTrait<'a> {}\n-impl<'a> OtherTrait<'a> for &'a () {}\n-\n-trait ObjectTrait {}\n-\n-impl dyn ObjectTrait {\n-    fn use_self(&self) -> &() { panic!() }\n-}\n-\n-fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-    val.use_self() //~ ERROR mismatched types\n-}\n-\n-fn main() {}"}, {"sha": "4618b540c70ee018162aad71d72c9dcd89d20b37", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-without-suggestion.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6513148c146c36b0d1649cdb65a3a4737599252f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6513148c146c36b0d1649cdb65a3a4737599252f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-without-suggestion.stderr?ref=6513148c146c36b0d1649cdb65a3a4737599252f", "patch": "@@ -1,18 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs:11:9\n-   |\n-LL |     val.use_self()\n-   |         ^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&(dyn ObjectTrait + 'static)`\n-              found reference `&(dyn ObjectTrait + 'a)`\n-note: the lifetime `'a` as defined on the function body at 10:11...\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-without-suggestion.rs:10:11\n-   |\n-LL | fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |           ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "62cf9b989bb4d19b515f079361beb7c3337d7c71", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.fixed", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -9,10 +9,12 @@ mod foo {\n     trait MyTrait {\n         fn use_self(&self) -> &();\n     }\n+    trait Irrelevant {}\n \n     impl MyTrait for dyn ObjectTrait + '_ {\n         fn use_self(&self) -> &() { panic!() }\n     }\n+    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n         val.use_self() //~ ERROR cannot infer an appropriate lifetime\n@@ -24,14 +26,48 @@ mod bar {\n     trait MyTrait {\n         fn use_self(&self) -> &();\n     }\n+    trait Irrelevant {}\n \n     impl MyTrait for dyn ObjectTrait + '_ {\n         fn use_self(&self) -> &() { panic!() }\n     }\n+    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n         val.use_self() //~ ERROR cannot infer an appropriate lifetime\n     }\n }\n \n+mod baz {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait + '_> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for Box<dyn ObjectTrait> {}\n+\n+    fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n+        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+    }\n+}\n+\n+mod bat {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+\n+    impl dyn ObjectTrait + '_ {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+    }\n+}\n+\n fn main() {}"}, {"sha": "00f65a2348935e93ddebef3f98108e1c02124eeb", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -0,0 +1,22 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                   --- `val` is a reference that is only valid in the function body\n+LL |         val.use_self()\n+   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                   --- `val` is a reference that is only valid in the function body\n+LL |         val.use_self()\n+   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "28a599d12bfd1df0793535ed61edee17b1625407", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -9,10 +9,12 @@ mod foo {\n     trait MyTrait {\n         fn use_self(&self) -> &();\n     }\n+    trait Irrelevant {}\n \n     impl MyTrait for dyn ObjectTrait {\n         fn use_self(&self) -> &() { panic!() }\n     }\n+    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n         val.use_self() //~ ERROR cannot infer an appropriate lifetime\n@@ -24,14 +26,48 @@ mod bar {\n     trait MyTrait {\n         fn use_self(&self) -> &();\n     }\n+    trait Irrelevant {}\n \n     impl MyTrait for dyn ObjectTrait {\n         fn use_self(&self) -> &() { panic!() }\n     }\n+    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n         val.use_self() //~ ERROR cannot infer an appropriate lifetime\n     }\n }\n \n+mod baz {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for Box<dyn ObjectTrait> {}\n+\n+    fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n+        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+    }\n+}\n+\n+mod bat {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+\n+    impl dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+    }\n+}\n+\n fn main() {}"}, {"sha": "1a03590febe4624fbd3d9c37e95ab7f9d44e866f", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e08bab87dbddea55247013bab9735fa2148ec84/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=4e08bab87dbddea55247013bab9735fa2148ec84", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:18:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n@@ -12,7 +12,20 @@ LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n \n error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:33:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:13\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                        ------------------- this data with lifetime `'a`...\n+LL |         val.use_self()\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |\n+help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+   |\n+LL |     impl dyn ObjectTrait + '_ {\n+   |                          ^^^^\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:37:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n@@ -24,6 +37,19 @@ help: this `impl` introduces an implicit `'static` requirement, consider changin\n LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:54:13\n+   |\n+LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n+   |                        ----------------------------- this data with lifetime `'a`...\n+LL |         val.use_self()\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |\n+help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+   |\n+LL |     impl MyTrait for Box<dyn ObjectTrait + '_> {\n+   |                                          ^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0759`."}]}