{"sha": "ed9740846b8fc813a763778e792589c17b359b45", "node_id": "C_kwDOAAsO6NoAKGVkOTc0MDg0NmI4ZmM4MTNhNzYzNzc4ZTc5MjU4OWMxN2IzNTliNDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-02T15:12:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-02T15:12:21Z"}, "message": "Rollup merge of #102098 - xfix:weak-upgrade-fetch-update, r=Mark-Simulacrum\n\nUse fetch_update in sync::Weak::upgrade\n\nUsing `fetch_update` makes it more clear that it's CAS loop then manually implementing one.", "tree": {"sha": "b19f1358b1f4cb531a894f6295e5759df96949e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19f1358b1f4cb531a894f6295e5759df96949e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9740846b8fc813a763778e792589c17b359b45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOapVCRBK7hj4Ov3rIwAASPcIAJuaE3J/XgCdnQpBhIU9stST\nf0Jyxf7y9UzeqlUv6mWj8q32mwBOkn8geXJ22tEs9Q7kVJmHanzPgEwHt+na2ro1\noPdSsiTax4O1ghSi5PSiJxgPCVkT4jslJwKYGuaHxwwrh01POV7xd0WLyZHQuCRK\nqLeEzH+g6oSomx0RWGEl7Iay+uvu3y0GfyLEROdzWm7iDvHqXUyDC6x1FG6x8eDk\nmbD5V8VFSxmxtVea2tTj9r7FahXQr3QzVy9M8GhrZrDprL+dUoaUA+fjkBaXwCpn\nJFYQRDQ+l7EojKUS1LaieuvSwDDNoEisjUy4lFnyAg6ozvKjcM5iUGGwGbzOcAs=\n=PVEL\n-----END PGP SIGNATURE-----\n", "payload": "tree b19f1358b1f4cb531a894f6295e5759df96949e8\nparent 13f47f608e8e9fcdd60f64688e12f5f4c2f7c317\nparent 80c8680a0c0d5b174744c2e56667808be21aeade\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1664723541 +0530\ncommitter GitHub <noreply@github.com> 1664723541 +0530\n\nRollup merge of #102098 - xfix:weak-upgrade-fetch-update, r=Mark-Simulacrum\n\nUse fetch_update in sync::Weak::upgrade\n\nUsing `fetch_update` makes it more clear that it's CAS loop then manually implementing one.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9740846b8fc813a763778e792589c17b359b45", "html_url": "https://github.com/rust-lang/rust/commit/ed9740846b8fc813a763778e792589c17b359b45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9740846b8fc813a763778e792589c17b359b45/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f47f608e8e9fcdd60f64688e12f5f4c2f7c317", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f47f608e8e9fcdd60f64688e12f5f4c2f7c317", "html_url": "https://github.com/rust-lang/rust/commit/13f47f608e8e9fcdd60f64688e12f5f4c2f7c317"}, {"sha": "80c8680a0c0d5b174744c2e56667808be21aeade", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c8680a0c0d5b174744c2e56667808be21aeade", "html_url": "https://github.com/rust-lang/rust/commit/80c8680a0c0d5b174744c2e56667808be21aeade"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "d0e5b6f4d820160295635052acf550eed7ddf183", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ed9740846b8fc813a763778e792589c17b359b45/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9740846b8fc813a763778e792589c17b359b45/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ed9740846b8fc813a763778e792589c17b359b45", "patch": "@@ -1980,33 +1980,26 @@ impl<T: ?Sized> Weak<T> {\n         // We use a CAS loop to increment the strong count instead of a\n         // fetch_add as this function should never take the reference count\n         // from zero to one.\n-        let inner = self.inner()?;\n-\n-        // Relaxed load because any write of 0 that we can observe\n-        // leaves the field in a permanently zero state (so a\n-        // \"stale\" read of 0 is fine), and any other value is\n-        // confirmed via the CAS below.\n-        let mut n = inner.strong.load(Relaxed);\n-\n-        loop {\n-            if n == 0 {\n-                return None;\n-            }\n-\n-            // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n-            if n > MAX_REFCOUNT {\n-                abort();\n-            }\n-\n+        self.inner()?\n+            .strong\n             // Relaxed is fine for the failure case because we don't have any expectations about the new state.\n             // Acquire is necessary for the success case to synchronise with `Arc::new_cyclic`, when the inner\n             // value can be initialized after `Weak` references have already been created. In that case, we\n             // expect to observe the fully initialized value.\n-            match inner.strong.compare_exchange_weak(n, n + 1, Acquire, Relaxed) {\n-                Ok(_) => return Some(unsafe { Arc::from_inner(self.ptr) }), // null checked above\n-                Err(old) => n = old,\n-            }\n-        }\n+            .fetch_update(Acquire, Relaxed, |n| {\n+                // Any write of 0 we can observe leaves the field in permanently zero state.\n+                if n == 0 {\n+                    return None;\n+                }\n+                // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n+                if n > MAX_REFCOUNT {\n+                    abort();\n+                }\n+                Some(n + 1)\n+            })\n+            .ok()\n+            // null checked above\n+            .map(|_| unsafe { Arc::from_inner(self.ptr) })\n     }\n \n     /// Gets the number of strong (`Arc`) pointers pointing to this allocation."}]}