{"sha": "32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd", "node_id": "C_kwDOAAsO6NoAKDMyYWE0YzAzZDkxZjdiYjVjMjJmODZiOGRhM2YxNzQ2ZTkzM2U4ZmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-27T06:46:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-27T06:46:52Z"}, "message": "Rollup merge of #109587 - cjgillot:no-hashmap-fingerprint, r=Nilstrieb\n\nUse an IndexVec to debug fingerprints.\n\nUncontroversial part of https://github.com/rust-lang/rust/pull/109050", "tree": {"sha": "eb70094ae8e04d5c21d57d19f5d616042714df80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb70094ae8e04d5c21d57d19f5d616042714df80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkITvcCRBK7hj4Ov3rIwAA9jEIAKfApAm4N/S4nTxAHZHE1dY/\npdhTb483+GUTEJJe8W7Q+z+CP5ZZAyroKqysYp8pqnVIIu50oKpzShiWNPwcT0Wn\n1e6cG6lqaCtTqCuieHwMjYp1YPPq4Fw+w7b31xjymaESseDeiMoRWv+QN0ee1mUv\nPlCDjx0XgYaFZMpdJXfn8ukhKxccesBPGC3VKcHT1U1WPArr37UnBRDF/4a/MHSG\nBdZmehfoXaexEEQ9NN9gv8THTDzUi8/gOvlIUf+WvmoJmANda02yoWlyPLCgcQZ9\nEin5d0kBFuNEJzURUbs05kwnYlougikG0hJ+rfy5YbMPY0pH6U2M3vNxS7gRY9E=\n=ZN9P\n-----END PGP SIGNATURE-----\n", "payload": "tree eb70094ae8e04d5c21d57d19f5d616042714df80\nparent 704991c959f8507b92a6440b5be0ad89e41682a3\nparent 5e49f099a9a6a4bf9776315e19b58b09fb159f87\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679899612 +0200\ncommitter GitHub <noreply@github.com> 1679899612 +0200\n\nRollup merge of #109587 - cjgillot:no-hashmap-fingerprint, r=Nilstrieb\n\nUse an IndexVec to debug fingerprints.\n\nUncontroversial part of https://github.com/rust-lang/rust/pull/109050\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd", "html_url": "https://github.com/rust-lang/rust/commit/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704991c959f8507b92a6440b5be0ad89e41682a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/704991c959f8507b92a6440b5be0ad89e41682a3", "html_url": "https://github.com/rust-lang/rust/commit/704991c959f8507b92a6440b5be0ad89e41682a3"}, {"sha": "5e49f099a9a6a4bf9776315e19b58b09fb159f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e49f099a9a6a4bf9776315e19b58b09fb159f87", "html_url": "https://github.com/rust-lang/rust/commit/5e49f099a9a6a4bf9776315e19b58b09fb159f87"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "2ff7de8cb9efc8f60e1602749208f4c339b19dc9", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=32aa4c03d91f7bb5c22f86b8da3f1746e933e8fd", "patch": "@@ -1065,7 +1065,7 @@ pub(super) struct CurrentDepGraph<K: DepKind> {\n     /// This is used to verify that fingerprints do not change between the creation of a node\n     /// and its recomputation.\n     #[cfg(debug_assertions)]\n-    fingerprints: Lock<FxHashMap<DepNode<K>, Fingerprint>>,\n+    fingerprints: Lock<IndexVec<DepNodeIndex, Option<Fingerprint>>>,\n \n     /// Used to trap when a specific edge is added to the graph.\n     /// This is used for debug purposes and is only active with `debug_assertions`.\n@@ -1151,7 +1151,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             #[cfg(debug_assertions)]\n             forbidden_edge,\n             #[cfg(debug_assertions)]\n-            fingerprints: Lock::new(Default::default()),\n+            fingerprints: Lock::new(IndexVec::from_elem_n(None, new_node_count_estimate)),\n             total_read_count: AtomicU64::new(0),\n             total_duplicate_read_count: AtomicU64::new(0),\n             node_intern_event_id,\n@@ -1163,14 +1163,8 @@ impl<K: DepKind> CurrentDepGraph<K> {\n         if let Some(forbidden_edge) = &self.forbidden_edge {\n             forbidden_edge.index_to_node.lock().insert(dep_node_index, key);\n         }\n-        match self.fingerprints.lock().entry(key) {\n-            Entry::Vacant(v) => {\n-                v.insert(fingerprint);\n-            }\n-            Entry::Occupied(o) => {\n-                assert_eq!(*o.get(), fingerprint, \"Unstable fingerprints for {:?}\", key);\n-            }\n-        }\n+        let previous = *self.fingerprints.lock().get_or_insert_with(dep_node_index, || fingerprint);\n+        assert_eq!(previous, fingerprint, \"Unstable fingerprints for {:?}\", key);\n     }\n \n     /// Writes the node to the current dep-graph and allocates a `DepNodeIndex` for it."}]}