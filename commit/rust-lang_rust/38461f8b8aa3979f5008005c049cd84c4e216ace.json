{"sha": "38461f8b8aa3979f5008005c049cd84c4e216ace", "node_id": "C_kwDOAAsO6NoAKDM4NDYxZjhiOGFhMzk3OWY1MDA4MDA1YzA0OWNkODRjNGUyMTZhY2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-01T18:10:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T18:10:19Z"}, "message": "Rollup merge of #108394 - ferrocene:pa-open, r=ozkanonur\n\nMake `x doc --open` work on every book\n\nBefore this PR, the `--open` flag had to be configured explicitly for every book, and most of them didn't configure it, resulting in the flag silently failing in all but two books.\n\nIn this PR, the code to check for the `--open` flag is in the underlying `RustbookSrc` step rather than all the individual steps. This is done by passing the parent step as a field of `RustbookSrc`, so that we can check for the correct step in `maybe_open_in_browser`.\n\nThis was part of a larger change that in the end wasn't worth it. Still, I think it could be useful as-is.", "tree": {"sha": "0ac0e63d89df1ef9545f2de885dfe474494d0d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac0e63d89df1ef9545f2de885dfe474494d0d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38461f8b8aa3979f5008005c049cd84c4e216ace", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/5ULCRBK7hj4Ov3rIwAAGHYIAFmIYR57WXZS39rt72KGRyAR\nlpL32rRVKj6JP/kRntf4LNYpGOb9mRC8eUP7/64s1n8UE3H98Jgb3N3SQ5kCxqk5\n8qEG5klLz1nbUGj77xT1s1mHncqJgQnWjJe5Q4e4N7k7/2OhAP9UwXnfcb9wtOhT\n7/QUcT8YGTzdybW3OFzw2V7L1mqYVXpsq7CdowuzFveiYRrp0bzsrsKveLsRUtOJ\nhDjNEMwEYHJuqAmR6CHct96N0tiA7Tt0IF14n/lpwYimgEq1g3UC7SkQrpOis7Xy\njl2/7kMtm5G1omdpgFEmIy3RphtrFMY0YPuClZQ710OH+O9piJdACvIfdmwSvmI=\n=IwfZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ac0e63d89df1ef9545f2de885dfe474494d0d61\nparent f03e5345aa5bbee3c35a394238431b1267f7ab93\nparent 317be6172af280ab0f8565f2fb5ffa2bcd3b2712\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677694219 +0530\ncommitter GitHub <noreply@github.com> 1677694219 +0530\n\nRollup merge of #108394 - ferrocene:pa-open, r=ozkanonur\n\nMake `x doc --open` work on every book\n\nBefore this PR, the `--open` flag had to be configured explicitly for every book, and most of them didn't configure it, resulting in the flag silently failing in all but two books.\n\nIn this PR, the code to check for the `--open` flag is in the underlying `RustbookSrc` step rather than all the individual steps. This is done by passing the parent step as a field of `RustbookSrc`, so that we can check for the correct step in `maybe_open_in_browser`.\n\nThis was part of a larger change that in the end wasn't worth it. Still, I think it could be useful as-is.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38461f8b8aa3979f5008005c049cd84c4e216ace", "html_url": "https://github.com/rust-lang/rust/commit/38461f8b8aa3979f5008005c049cd84c4e216ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38461f8b8aa3979f5008005c049cd84c4e216ace/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03e5345aa5bbee3c35a394238431b1267f7ab93", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03e5345aa5bbee3c35a394238431b1267f7ab93", "html_url": "https://github.com/rust-lang/rust/commit/f03e5345aa5bbee3c35a394238431b1267f7ab93"}, {"sha": "317be6172af280ab0f8565f2fb5ffa2bcd3b2712", "url": "https://api.github.com/repos/rust-lang/rust/commits/317be6172af280ab0f8565f2fb5ffa2bcd3b2712", "html_url": "https://github.com/rust-lang/rust/commit/317be6172af280ab0f8565f2fb5ffa2bcd3b2712"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "cc80763ef4495386f7d05f00b828f96a89a70c96", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/38461f8b8aa3979f5008005c049cd84c4e216ace/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38461f8b8aa3979f5008005c049cd84c4e216ace/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=38461f8b8aa3979f5008005c049cd84c4e216ace", "patch": "@@ -62,6 +62,7 @@ macro_rules! book {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n                     src: INTERNER.intern_path(builder.src.join($path)),\n+                    parent: Some(self),\n                 })\n             }\n         }\n@@ -119,18 +120,20 @@ impl Step for UnstableBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n             src: INTERNER.intern_path(builder.md_doc_out(self.target).join(\"unstable-book\")),\n+            parent: Some(self),\n         })\n     }\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-struct RustbookSrc {\n+struct RustbookSrc<P: Step> {\n     target: TargetSelection,\n     name: Interned<String>,\n     src: Interned<PathBuf>,\n+    parent: Option<P>,\n }\n \n-impl Step for RustbookSrc {\n+impl<P: Step> Step for RustbookSrc<P> {\n     type Output = ();\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -152,13 +155,18 @@ impl Step for RustbookSrc {\n         let index = out.join(\"index.html\");\n         let rustbook = builder.tool_exe(Tool::Rustbook);\n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n-        if builder.config.dry_run() || up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n-            return;\n+\n+        if !builder.config.dry_run() && !(up_to_date(&src, &index) || up_to_date(&rustbook, &index))\n+        {\n+            builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n+            let _ = fs::remove_dir_all(&out);\n+\n+            builder.run(rustbook_cmd.arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n         }\n-        builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n-        let _ = fs::remove_dir_all(&out);\n \n-        builder.run(rustbook_cmd.arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n+        if self.parent.is_some() {\n+            builder.maybe_open_in_browser::<P>(index)\n+        }\n     }\n }\n \n@@ -205,6 +213,7 @@ impl Step for TheBook {\n             target,\n             name: INTERNER.intern_str(\"book\"),\n             src: INTERNER.intern_path(builder.src.join(&relative_path)),\n+            parent: Some(self),\n         });\n \n         // building older edition redirects\n@@ -213,6 +222,9 @@ impl Step for TheBook {\n                 target,\n                 name: INTERNER.intern_string(format!(\"book/{}\", edition)),\n                 src: INTERNER.intern_path(builder.src.join(&relative_path).join(edition)),\n+                // There should only be one book that is marked as the parent for each target, so\n+                // treat the other editions as not having a parent.\n+                parent: Option::<Self>::None,\n             });\n         }\n \n@@ -228,10 +240,6 @@ impl Step for TheBook {\n \n             invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n-\n-        let out = builder.doc_out(target);\n-        let index = out.join(\"book\").join(\"index.html\");\n-        builder.maybe_open_in_browser::<Self>(index);\n     }\n }\n \n@@ -1032,10 +1040,7 @@ impl Step for RustcBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n+            parent: Some(self),\n         });\n-\n-        let out = builder.doc_out(self.target);\n-        let index = out.join(\"rustc\").join(\"index.html\");\n-        builder.maybe_open_in_browser::<Self>(index);\n     }\n }"}]}