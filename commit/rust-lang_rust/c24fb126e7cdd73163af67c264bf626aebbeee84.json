{"sha": "c24fb126e7cdd73163af67c264bf626aebbeee84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNGZiMTI2ZTdjZGQ3MzE2M2FmNjdjMjY0YmY2MjZhZWJiZWVlODQ=", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-07-29T04:00:13Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-07-29T04:00:13Z"}, "message": "duration div mul extras", "tree": {"sha": "f1fb9b0e439db9cc118cb8952b3d19b74c19243c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fb9b0e439db9cc118cb8952b3d19b74c19243c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24fb126e7cdd73163af67c264bf626aebbeee84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJbXTvNAAoJEBOpOZ+3fjNcbg4QAJR9h+3fGvWkJNXbiFaka84D\nVBNklL0o1M1eESshP63HWMfntVdiEEHsmcGLD91ol6Aiw71Qyvw7ZJHgi6add4zy\nm0daufkg8p1s8pTNujf1yfsrPa4dtASJ+3Bwu7nkKzlnpHndA5MzkVOxfFBkDFHP\nkQlJjEOu3OUkcIG+UUffxURYY5Ou9S685kyz/a5dkPEgKxyym48rcF4JQm8obEju\nbVPZgRn7YOkQmtMfR/dAlT89ua3SUsTv5EWsFcEYXeWCN2SicwVbJPeMUJwb/Dh2\nXXHjHPGUeGF3i6u8wtsRnwlqVjO+7ZGDcaDgAHLt99TMBh3dcjZO+m08Nr1E3q8r\n4JtUsZnlJLbZMmS+l/64T7vx1SO7davbNu9UVSD1KQejg2DPtoU1cumOJne3p+fV\nTeTSTesMqVlC2Y0yCNlO5VNiBgyc126HJwgCwcugyz5612nnbcIyP6dP9PvYC8Gb\nqxkZSu0RkSF1fsMGsVtXUTLKv17EhpVh9Mf2nm89MLnJ/oQsNUNieegX2GZsFv31\nwi5gDG8XHVpW5DhQ+PSKBneCWASJ0jLDdj3fxp3PK3MSXBo7392Z3lethyWbKur/\ng9w1xZkMy5yCZlfvXJqsez8j1JRutBR2B9BgZ+eoefHTqCCtdY4CE3riKcbwCK6I\n8YlALMjW0kN78/MGc/nl\n=71na\n-----END PGP SIGNATURE-----", "payload": "tree f1fb9b0e439db9cc118cb8952b3d19b74c19243c\nparent c7cba3d33f564be140275c4fb9e33c6dc2c97b21\nauthor \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1532836813 +0300\ncommitter \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1532836813 +0300\n\nduration div mul extras\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24fb126e7cdd73163af67c264bf626aebbeee84", "html_url": "https://github.com/rust-lang/rust/commit/c24fb126e7cdd73163af67c264bf626aebbeee84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24fb126e7cdd73163af67c264bf626aebbeee84/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cba3d33f564be140275c4fb9e33c6dc2c97b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cba3d33f564be140275c4fb9e33c6dc2c97b21", "html_url": "https://github.com/rust-lang/rust/commit/c7cba3d33f564be140275c4fb9e33c6dc2c97b21"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "fcd2726b84dea79c31cacf3fd8be7893d1e4fb15", "filename": "src/libcore/time.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c24fb126e7cdd73163af67c264bf626aebbeee84/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24fb126e7cdd73163af67c264bf626aebbeee84/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=c24fb126e7cdd73163af67c264bf626aebbeee84", "patch": "@@ -24,6 +24,7 @@\n use fmt;\n use iter::Sum;\n use ops::{Add, Sub, Mul, Div, AddAssign, SubAssign, MulAssign, DivAssign};\n+use {u64, u128};\n \n const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -501,13 +502,81 @@ impl Mul<u32> for Duration {\n     }\n }\n \n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl Mul<Duration> for u32 {\n+    type Output = Duration;\n+\n+    fn mul(self, rhs: Duration) -> Duration {\n+        rhs.checked_mul(self).expect(\"overflow when multiplying scalar by duration\")\n+    }\n+}\n+\n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl Mul<f64> for Duration {\n+    type Output = Duration;\n+\n+    fn mul(self, rhs: f64) -> Duration {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos_f64 = rhs * (NPS * (self.secs as f64) + (self.nanos as f64));\n+        if !nanos_f64.is_finite() {\n+            panic!(\"got non-finite value when multiplying duration by float\");\n+        }\n+        if nanos_f64 > (u128::MAX as f64) {\n+            panic!(\"overflow when multiplying duration by float\");\n+        };\n+        let nanos_u128 = nanos_f64 as u128;\n+        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n+        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n+        if secs > (u64::MAX as u128) {\n+            panic!(\"overflow when multiplying duration by float\");\n+        }\n+        Duration {\n+            secs: secs as u64,\n+            nanos: nanos as u32,\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl Mul<Duration> for f64 {\n+    type Output = Duration;\n+\n+    fn mul(self, rhs: Duration) -> Duration {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos_f64 = self * (NPS * (rhs.secs as f64) + (rhs.nanos as f64));\n+        if !nanos_f64.is_finite() {\n+            panic!(\"got non-finite value when multiplying float by duration\");\n+        }\n+        if nanos_f64 > (u128::MAX as f64) {\n+            panic!(\"overflow when multiplying float by duration\");\n+        };\n+        let nanos_u128 = nanos_f64 as u128;\n+        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n+        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n+        if secs > (u64::MAX as u128) {\n+            panic!(\"overflow when multiplying float by duration\");\n+        }\n+        Duration {\n+            secs: secs as u64,\n+            nanos: nanos as u32,\n+        }\n+    }\n+}\n+\n #[stable(feature = \"time_augmented_assignment\", since = \"1.9.0\")]\n impl MulAssign<u32> for Duration {\n     fn mul_assign(&mut self, rhs: u32) {\n         *self = *self * rhs;\n     }\n }\n \n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl MulAssign<f64> for Duration {\n+    fn mul_assign(&mut self, rhs: f64) {\n+        *self = *self * rhs;\n+    }\n+}\n+\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Div<u32> for Duration {\n     type Output = Duration;\n@@ -517,13 +586,59 @@ impl Div<u32> for Duration {\n     }\n }\n \n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl Div<f64> for Duration {\n+    type Output = Duration;\n+\n+    fn div(self, rhs: f64) -> Duration {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos_f64 = (NPS * (self.secs as f64) + (self.nanos as f64)) / rhs;\n+        if !nanos_f64.is_finite() {\n+            panic!(\"got non-finite value when dividing duration by float\");\n+        }\n+        if nanos_f64 > (u128::MAX as f64) {\n+            panic!(\"overflow when dividing duration by float\");\n+        };\n+        let nanos_u128 = nanos_f64 as u128;\n+        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n+        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n+        if secs > (u64::MAX as u128) {\n+            panic!(\"overflow when dividing duration by float\");\n+        }\n+        Duration {\n+            secs: secs as u64,\n+            nanos: nanos as u32,\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl Div<Duration> for Duration {\n+    type Output = f64;\n+\n+    fn div(self, rhs: Duration) -> f64 {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos1 = NPS * (self.secs as f64) + (self.nanos as f64);\n+        let nanos2 = NPS * (rhs.secs as f64) + (rhs.nanos as f64);\n+        nanos1/nanos2\n+    }\n+}\n+\n #[stable(feature = \"time_augmented_assignment\", since = \"1.9.0\")]\n impl DivAssign<u32> for Duration {\n     fn div_assign(&mut self, rhs: u32) {\n         *self = *self / rhs;\n     }\n }\n \n+#[stable(feature = \"duration_mul_div_extras\", since = \"1.29.0\")]\n+impl DivAssign<f64> for Duration {\n+    fn div_assign(&mut self, rhs: f64) {\n+        *self = *self / rhs;\n+    }\n+}\n+\n+\n macro_rules! sum_durations {\n     ($iter:expr) => {{\n         let mut total_secs: u64 = 0;"}, {"sha": "640902426cdd2f6e63b6437dabe4d5bcdfd54fa7", "filename": "src/libstd/time.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c24fb126e7cdd73163af67c264bf626aebbeee84/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24fb126e7cdd73163af67c264bf626aebbeee84/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=c24fb126e7cdd73163af67c264bf626aebbeee84", "patch": "@@ -590,4 +590,30 @@ mod tests {\n         let hundred_twenty_years = thirty_years * 4;\n         assert!(a < hundred_twenty_years);\n     }\n+\n+    #[test]\n+    fn duration_float_ops() {\n+        let dur = Duration::new(2, 700_000_000);\n+\n+        let dur2 = 3.14*dur;\n+        assert_eq!(dur2, dur*3.14);\n+        assert_eq!(dur2.as_secs(), 8);\n+        assert_eq!(dur2.subsec_nanos(), 478_000_000);\n+\n+        let dur3 = 3.14e5*dur;\n+        assert_eq!(dur3, dur*3.14e5);\n+        assert_eq!(dur3.as_secs(), 847_800);\n+        assert_eq!(dur3.subsec_nanos(), 0);\n+\n+        let dur4 = dur/3.14;\n+        assert_eq!(dur4.as_secs(), 0);\n+        assert_eq!(dur4.subsec_nanos(), 859_872_611);\n+\n+        let dur5 = dur/3.14e5;\n+        assert_eq!(dur5.as_secs(), 0);\n+        // we are using truncation and not rounding\n+        assert_eq!(dur5.subsec_nanos(), 8598);\n+\n+        assert_eq!(dur/Duration::new(5, 400_000_000), 0.5);\n+    }\n }"}]}