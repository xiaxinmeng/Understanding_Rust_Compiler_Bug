{"sha": "4910fe6889174a432201958043e19e2222e46b69", "node_id": "C_kwDOAAsO6NoAKDQ5MTBmZTY4ODkxNzRhNDMyMjAxOTU4MDQzZTE5ZTIyMjJlNDZiNjk", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-11-28T19:31:22Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-11-28T20:03:58Z"}, "message": "Fix incorrect usage of `EvaluatedToOk` when evaluating `TypeOutlives`\n\nA global predicate is not guarnatenteed to outlive all regions.\nIf the predicate involves late-bound regions, then it may fail\nto outlive other regions (e.g. `for<'b> &'b bool: 'static` does not\nhold)\n\nWe now only produce `EvaluatedToOk` when a global predicate has no\nlate-bound regions - in that case, the ony region that can be present\nin the type is 'static", "tree": {"sha": "7973428d3accd803a432cd9d00ab724721e607d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7973428d3accd803a432cd9d00ab724721e607d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4910fe6889174a432201958043e19e2222e46b69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmGj4K8ACgkQtAh+UQ6Y\nsWTVsRAAp+wTIjaVQBtlZk2cax00vofGLObkSre9WkKgNE0f16FIByyM2HNUnD19\nWeufWQqwQeDZlfoMEYa4QvVQDsRrfJ1AfiEbdWGmoFNrMShi2W/sib+ThO3EQoE0\ncktrwdNk9jZ9PtRzJoeJJyXJsYBxvZeacurDl7HGwFEqwAq8HdU4tELCIUwfcO9D\nf8PvPnvaY2G3yyqjctOT0z/yr2AzA/y8Ce8fxzQjREoo7nyAk2NoAf3p3LnZ/q1L\nimSBtLz6o8FByDGv6sLy4vxjt9Tqt6DCidHoSqJTlVGtnh09fmlWzvqVoqMJUyDc\ndQjyLNVyMptjFbjjT9PqGhiosl679X4XPhv/I23Cv2xIuRHyGQ5mBmzRElc7yP2p\nyFoP489/fHOaMIfUZyrWdhZFzX2HcgD/X6DwOn3nxT/KLRR6WpOVIsRvzN/5DAva\ntUydMACaXN9VtR5vAbcphBKPTfwEDrLPycnQxMQdDcCRuGkAOwz7gt51WxHpwkmY\nQMU/tZ+ERlSK9+kM85Z2I4okRIeAclKScB7Yhat9OeFVJqL4OhegbNpnp40kK9KP\nm6jeC899yMG/uFOMXT+JUjDxtag6UvzKwyttdNv9zYAl6+7bQNDYS3Ml8Pndz0gt\nXx/jZayCrP4n727BJCsChIW1hfut1n7vxVRiw5D19Ib+DI0lo0s=\n=C3YN\n-----END PGP SIGNATURE-----", "payload": "tree 7973428d3accd803a432cd9d00ab724721e607d6\nparent e6d2de9483a27f846f003fc745713339a9122473\nauthor Aaron Hill <aa1ronham@gmail.com> 1638127882 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1638129838 -0500\n\nFix incorrect usage of `EvaluatedToOk` when evaluating `TypeOutlives`\n\nA global predicate is not guarnatenteed to outlive all regions.\nIf the predicate involves late-bound regions, then it may fail\nto outlive other regions (e.g. `for<'b> &'b bool: 'static` does not\nhold)\n\nWe now only produce `EvaluatedToOk` when a global predicate has no\nlate-bound regions - in that case, the ony region that can be present\nin the type is 'static\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4910fe6889174a432201958043e19e2222e46b69", "html_url": "https://github.com/rust-lang/rust/commit/4910fe6889174a432201958043e19e2222e46b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4910fe6889174a432201958043e19e2222e46b69/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d2de9483a27f846f003fc745713339a9122473", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d2de9483a27f846f003fc745713339a9122473", "html_url": "https://github.com/rust-lang/rust/commit/e6d2de9483a27f846f003fc745713339a9122473"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "ee16d6b3cfbe3a9b35e594ab027127d87c7a0fb7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4910fe6889174a432201958043e19e2222e46b69/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4910fe6889174a432201958043e19e2222e46b69/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=4910fe6889174a432201958043e19e2222e46b69", "patch": "@@ -558,7 +558,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 },\n \n                 ty::PredicateKind::TypeOutlives(pred) => {\n-                    if pred.0.is_known_global() {\n+                    // A global type with no late-bound regions can only\n+                    // contain the \"'static\" lifetime (any other lifetime\n+                    // would either be late-bound or local), so it is guaranteed\n+                    // to outlive any other lifetime\n+                    if pred.0.is_global(self.infcx.tcx) && !pred.0.has_late_bound_regions() {\n                         Ok(EvaluatedToOk)\n                     } else {\n                         Ok(EvaluatedToOkModuloRegions)"}, {"sha": "f0c0dd3ed95788616e4f8f40e7785c3820c6c22d", "filename": "src/test/ui/traits/project-modulo-regions.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.rs?ref=4910fe6889174a432201958043e19e2222e46b69", "patch": "@@ -0,0 +1,55 @@\n+// revisions: with_clause without_clause\n+// Tests that `EvaluatedToOkModuloRegions` from a projection sub-obligation\n+// is correctly propagated\n+\n+#![feature(rustc_attrs)]\n+\n+trait MyTrait {\n+    type Assoc;\n+}\n+\n+struct MyStruct;\n+\n+impl MyTrait for MyStruct {\n+    // Evaluating this projection will result in `EvaluatedToOkModuloRegions`\n+    // (when `with_clause` is enabled)\n+    type Assoc = <Bar as MyTrait>::Assoc;\n+}\n+\n+struct Bar;\n+\n+// The `where` clause on this impl will cause us to produce `EvaluatedToOkModuloRegions`\n+// when evaluating a projection involving this impl\n+#[cfg(with_clause)]\n+impl MyTrait for Bar where for<'b> &'b (): 'b {\n+    type Assoc = bool;\n+}\n+\n+// This impl tests that the `EvaluatedToOkModuoRegions` result that we get\n+// is really due to the `where` clause on the `with_clause` impl\n+#[cfg(without_clause)]\n+impl MyTrait for Bar {\n+    type Assoc = bool;\n+}\n+\n+// The implementation of `#[rustc_evaluate_where_clauses]` doesn't perform\n+// normalization, so we need to place the projection predicate behind a normal\n+// trait predicate\n+struct Helper {}\n+trait HelperTrait {}\n+impl HelperTrait for Helper where <MyStruct as MyTrait>::Assoc: Sized {}\n+\n+// Evaluating this 'where' clause will (recursively) end up evaluating\n+// `for<'b> &'b (): 'b`, which will produce `EvaluatedToOkModuloRegions`\n+#[rustc_evaluate_where_clauses]\n+fn test(val: MyStruct) where Helper: HelperTrait  {\n+    panic!()\n+}\n+\n+fn foo(val: MyStruct) {\n+    test(val);\n+    //[with_clause]~^     ERROR evaluate(Binder(TraitPredicate(<Helper as HelperTrait>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //[without_clause]~^^ ERROR evaluate(Binder(TraitPredicate(<Helper as HelperTrait>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+}\n+\n+fn main() {}"}, {"sha": "2434c32c8188266fe99ea9e5e9079135d8cea46f", "filename": "src/test/ui/traits/project-modulo-regions.with_clause.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.with_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.with_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.with_clause.stderr?ref=4910fe6889174a432201958043e19e2222e46b69", "patch": "@@ -0,0 +1,11 @@\n+error: evaluate(Binder(TraitPredicate(<Helper as HelperTrait>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/project-modulo-regions.rs:50:5\n+   |\n+LL | fn test(val: MyStruct) where Helper: HelperTrait  {\n+   |                                      ----------- predicate\n+...\n+LL |     test(val);\n+   |     ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d35690d5f0fe87ea581df6948b5a7ee64a683c3", "filename": "src/test/ui/traits/project-modulo-regions.without_clause.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.without_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4910fe6889174a432201958043e19e2222e46b69/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.without_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fproject-modulo-regions.without_clause.stderr?ref=4910fe6889174a432201958043e19e2222e46b69", "patch": "@@ -0,0 +1,11 @@\n+error: evaluate(Binder(TraitPredicate(<Helper as HelperTrait>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/project-modulo-regions.rs:50:5\n+   |\n+LL | fn test(val: MyStruct) where Helper: HelperTrait  {\n+   |                                      ----------- predicate\n+...\n+LL |     test(val);\n+   |     ^^^^\n+\n+error: aborting due to previous error\n+"}]}