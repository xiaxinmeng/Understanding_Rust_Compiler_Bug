{"sha": "229e01d11fc5e6e34488beb5da05702de5eac632", "node_id": "C_kwDOAAsO6NoAKDIyOWUwMWQxMWZjNWU2ZTM0NDg4YmViNWRhMDU3MDJkZTVlYWM2MzI", "commit": {"author": {"name": "Maik Allg\u00f6wer", "email": "maik@llgoewer.de", "date": "2022-03-10T23:16:45Z"}, "committer": {"name": "Maik Allg\u00f6wer", "email": "maik@llgoewer.de", "date": "2022-03-10T23:29:43Z"}, "message": "Improve doc wording for retain on some collections", "tree": {"sha": "8711b69625b4918b3976e9dd888c3116cd49e534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8711b69625b4918b3976e9dd888c3116cd49e534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/229e01d11fc5e6e34488beb5da05702de5eac632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/229e01d11fc5e6e34488beb5da05702de5eac632", "html_url": "https://github.com/rust-lang/rust/commit/229e01d11fc5e6e34488beb5da05702de5eac632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/229e01d11fc5e6e34488beb5da05702de5eac632/comments", "author": {"login": "allgoewer", "id": 6408150, "node_id": "MDQ6VXNlcjY0MDgxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6408150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allgoewer", "html_url": "https://github.com/allgoewer", "followers_url": "https://api.github.com/users/allgoewer/followers", "following_url": "https://api.github.com/users/allgoewer/following{/other_user}", "gists_url": "https://api.github.com/users/allgoewer/gists{/gist_id}", "starred_url": "https://api.github.com/users/allgoewer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allgoewer/subscriptions", "organizations_url": "https://api.github.com/users/allgoewer/orgs", "repos_url": "https://api.github.com/users/allgoewer/repos", "events_url": "https://api.github.com/users/allgoewer/events{/privacy}", "received_events_url": "https://api.github.com/users/allgoewer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "allgoewer", "id": 6408150, "node_id": "MDQ6VXNlcjY0MDgxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6408150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allgoewer", "html_url": "https://github.com/allgoewer", "followers_url": "https://api.github.com/users/allgoewer/followers", "following_url": "https://api.github.com/users/allgoewer/following{/other_user}", "gists_url": "https://api.github.com/users/allgoewer/gists{/gist_id}", "starred_url": "https://api.github.com/users/allgoewer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allgoewer/subscriptions", "organizations_url": "https://api.github.com/users/allgoewer/orgs", "repos_url": "https://api.github.com/users/allgoewer/repos", "events_url": "https://api.github.com/users/allgoewer/events{/privacy}", "received_events_url": "https://api.github.com/users/allgoewer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4e0677190b82e61dc507e3e72caf89da8e5e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4e0677190b82e61dc507e3e72caf89da8e5e28", "html_url": "https://github.com/rust-lang/rust/commit/5f4e0677190b82e61dc507e3e72caf89da8e5e28"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "eff21e5c11e7c8d751b674cf0511d7663b42eede", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -779,7 +779,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns\n+    /// In other words, remove all elements `e` for which `f(&e)` returns\n     /// `false`. The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "12c995255800510206a16563bddd4c9342d73e8e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -963,7 +963,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in ascending key order.\n     ///\n     /// # Examples"}, {"sha": "c6a15953e8710a8b3c5fdde773bdb58f0b906507", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -873,7 +873,7 @@ impl<T> BTreeSet<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in ascending order.\n     ///\n     /// # Examples"}, {"sha": "c3cabc754e6a8069c4846121c39650317ffb3eb6", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -2119,7 +2119,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///\n@@ -2158,7 +2158,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "b898bd8743f63fe232c4b21c98d89ab3371f3f17", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -1424,7 +1424,7 @@ impl<T, A: Allocator> Vec<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "59dc13246aa3a00d5cff8c6458adcd7d4ffd931a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -621,7 +621,7 @@ impl<K, V, S> HashMap<K, V, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "4fd6996269e501aed1a3e4b30de49e445bcaeaf2", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e01d11fc5e6e34488beb5da05702de5eac632/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=229e01d11fc5e6e34488beb5da05702de5eac632", "patch": "@@ -300,7 +300,7 @@ impl<T, S> HashSet<T, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}]}