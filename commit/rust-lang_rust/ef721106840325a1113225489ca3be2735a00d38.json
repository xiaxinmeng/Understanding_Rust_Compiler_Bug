{"sha": "ef721106840325a1113225489ca3be2735a00d38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzIxMTA2ODQwMzI1YTExMTMyMjU0ODljYTNiZTI3MzVhMDBkMzg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-18T18:12:32Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-18T18:12:32Z"}, "message": "Fix `new_without_default` with lts and generics", "tree": {"sha": "eab4be2203201be4fd2e2cc8e52769a50e7e57e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab4be2203201be4fd2e2cc8e52769a50e7e57e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef721106840325a1113225489ca3be2735a00d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef721106840325a1113225489ca3be2735a00d38", "html_url": "https://github.com/rust-lang/rust/commit/ef721106840325a1113225489ca3be2735a00d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef721106840325a1113225489ca3be2735a00d38/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075040b03488b35ae1ed01cbb38fb716f85d4f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/075040b03488b35ae1ed01cbb38fb716f85d4f93", "html_url": "https://github.com/rust-lang/rust/commit/075040b03488b35ae1ed01cbb38fb716f85d4f93"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "461d1f5bebd909e7928dd6ed5bae53a478c32477", "filename": "src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef721106840325a1113225489ca3be2735a00d38/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef721106840325a1113225489ca3be2735a00d38/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=ef721106840325a1113225489ca3be2735a00d38", "patch": "@@ -51,6 +51,7 @@ impl LateLintPass for NewWithoutDefault {\n                 let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id))).ty;\n \n                 if_let_chain!{[\n+                    self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     let Some(ret_ty) = return_ty(cx.tcx.node_id_to_type(id)),\n                     same_tys(cx, self_ty, ret_ty),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &DEFAULT_TRAIT_PATH),"}, {"sha": "16174e434d4a84402a0f6e62e66a5b511580aeeb", "filename": "src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef721106840325a1113225489ca3be2735a00d38/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef721106840325a1113225489ca3be2735a00d38/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=ef721106840325a1113225489ca3be2735a00d38", "patch": "@@ -270,6 +270,7 @@ pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>,\n                                   -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n+    let ty = cx.tcx.erase_regions(&ty);\n     let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None, ProjectionMode::Any);\n     let obligation = traits::predicate_for_trait_def(cx.tcx,\n                                                      traits::ObligationCause::dummy(),"}, {"sha": "30015f6c9e8bd83d72cab54ae1945e8065e534e4", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ef721106840325a1113225489ca3be2735a00d38/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef721106840325a1113225489ca3be2735a00d38/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=ef721106840325a1113225489ca3be2735a00d38", "patch": "@@ -32,13 +32,36 @@ impl Params {\n     fn new(_: u32) -> Self { Params }\n }\n \n-struct Generics<'a, T> {\n-    foo: &'a bool,\n+struct GenericsOk<T> {\n     bar: T,\n }\n \n-impl<'c, V> Generics<'c, V> {\n-    fn new<'b>() -> Generics<'b, V> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+impl<U> Default for GenericsOk<U> {\n+    fn default() -> Self { unimplemented!(); }\n+}\n+\n+impl<'c, V> GenericsOk<V> {\n+    fn new() -> GenericsOk<V> { unimplemented!() }\n+}\n+\n+struct LtOk<'a> {\n+    foo: &'a bool,\n+}\n+\n+impl<'b> Default for LtOk<'b> {\n+    fn default() -> Self { unimplemented!(); }\n+}\n+\n+impl<'c> LtOk<'c> {\n+    fn new() -> LtOk<'c> { unimplemented!() }\n+}\n+\n+struct LtKo<'a> {\n+    foo: &'a bool,\n+}\n+\n+impl<'c> LtKo<'c> {\n+    fn new() -> LtKo<'c> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n }\n \n fn main() {}"}]}