{"sha": "7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjE3NWYzMGNkNjA1ZjliZTZkNDViMWQ5ZjhmOTBkNmY5MWNlYjE=", "commit": {"author": {"name": "Gabriel Smith", "email": "ga29smith@gmail.com", "date": "2019-03-01T03:52:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "impl fold_const for RegionFudger\n\nSigned-off-by: Gabriel Smith <ga29smith@gmail.com>", "tree": {"sha": "b7650c80cb30cff0830c186dd5d93533a8339bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7650c80cb30cff0830c186dd5d93533a8339bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "html_url": "https://github.com/rust-lang/rust/commit/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1/comments", "author": {"login": "yodaldevoid", "id": 1204409, "node_id": "MDQ6VXNlcjEyMDQ0MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1204409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yodaldevoid", "html_url": "https://github.com/yodaldevoid", "followers_url": "https://api.github.com/users/yodaldevoid/followers", "following_url": "https://api.github.com/users/yodaldevoid/following{/other_user}", "gists_url": "https://api.github.com/users/yodaldevoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/yodaldevoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yodaldevoid/subscriptions", "organizations_url": "https://api.github.com/users/yodaldevoid/orgs", "repos_url": "https://api.github.com/users/yodaldevoid/repos", "events_url": "https://api.github.com/users/yodaldevoid/events{/privacy}", "received_events_url": "https://api.github.com/users/yodaldevoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1b2acf12319b060c26722ddae93c45801a1fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1b2acf12319b060c26722ddae93c45801a1fce", "html_url": "https://github.com/rust-lang/rust/commit/ef1b2acf12319b060c26722ddae93c45801a1fce"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "ac758add872fec534165980eac6a409079abfe89", "filename": "src/librustc/infer/const_variable.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1/src%2Flibrustc%2Finfer%2Fconst_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1/src%2Flibrustc%2Finfer%2Fconst_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fconst_variable.rs?ref=7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "patch": "@@ -5,6 +5,7 @@ use crate::ty::{self, InferConst};\n \n use std::cmp;\n use std::marker::PhantomData;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n \n@@ -23,6 +24,8 @@ pub enum ConstVariableOrigin {\n     SubstitutionPlaceholder(Span),\n }\n \n+pub type ConstVariableMap<'tcx> = FxHashMap<ty::ConstVid<'tcx>, ConstVariableOrigin>;\n+\n struct ConstVariableData {\n     origin: ConstVariableOrigin,\n }\n@@ -184,6 +187,32 @@ impl<'tcx> ConstVariableTable<'tcx> {\n         self.values.commit(snapshot);\n         self.relations.commit(relation_snapshot);\n     }\n+\n+    /// Returns a map `{V1 -> V2}`, where the keys `{V1}` are\n+    /// const-variables created during the snapshot, and the values\n+    /// `{V2}` are the root variables that they were unified with,\n+    /// along with their origin.\n+    pub fn consts_created_since_snapshot(\n+        &mut self,\n+        s: &Snapshot<'tcx>\n+    ) -> ConstVariableMap<'tcx> {\n+        let actions_since_snapshot = self.values.actions_since_snapshot(&s.snapshot);\n+\n+        actions_since_snapshot\n+            .iter()\n+            .filter_map(|action| match action {\n+                &sv::UndoLog::NewElem(index) => Some(ty::ConstVid {\n+                    index: index as u32,\n+                    phantom: PhantomData,\n+                }),\n+                _ => None,\n+            })\n+            .map(|vid| {\n+                let origin = self.values.get(vid.index as usize).origin.clone();\n+                (vid, origin)\n+            })\n+            .collect()\n+    }\n }\n \n impl<'tcx> ut::UnifyKey for ty::ConstVid<'tcx> {"}, {"sha": "5bb007dbb0081a111870a580cc83a303ded51163", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=7bf175f30cd605f9be6d45b1d9f8f90d6f91ceb1", "patch": "@@ -1,5 +1,6 @@\n use crate::ty::{self, Ty, TyCtxt, TyVid, IntVid, FloatVid, RegionVid};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::mir::interpret::ConstValue;\n \n use super::InferCtxt;\n use super::RegionVariableOrigin;\n@@ -176,6 +177,33 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n-        ct // FIXME(const_generics)\n+        if let ty::LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Infer(ty::InferConst::Var(vid)),\n+            ty,\n+        }) = *ct {\n+            match self.const_variables.get(&vid) {\n+                None => {\n+                    // This variable was created before the\n+                    // \"fudging\".  Since we refresh all\n+                    // variables to their binding anyhow, we know\n+                    // that it is unbound, so we can just return\n+                    // it.\n+                    debug_assert!(\n+                        self.infcx.const_unification_table.borrow_mut()\n+                        .probe(vid)\n+                        .is_unknown()\n+                    );\n+                    ct\n+                }\n+                Some(&origin) => {\n+                    // This variable was created during the\n+                    // fudging. Recreate it with a fresh variable\n+                    // here.\n+                    self.infcx.next_const_var(ty, origin)\n+                }\n+            }\n+        } else {\n+            ct.super_fold_with(self)\n+        }\n     }\n }"}]}