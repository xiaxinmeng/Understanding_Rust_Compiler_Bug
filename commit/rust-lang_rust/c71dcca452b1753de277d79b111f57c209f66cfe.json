{"sha": "c71dcca452b1753de277d79b111f57c209f66cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MWRjY2E0NTJiMTc1M2RlMjc3ZDc5YjExMWY1N2MyMDlmNjZjZmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-02T14:50:06Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-12-06T11:59:53Z"}, "message": "add test for const eval errors in patterns", "tree": {"sha": "93892cecde3cab82ca98bfd908bddd4273b31a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93892cecde3cab82ca98bfd908bddd4273b31a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71dcca452b1753de277d79b111f57c209f66cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71dcca452b1753de277d79b111f57c209f66cfe", "html_url": "https://github.com/rust-lang/rust/commit/c71dcca452b1753de277d79b111f57c209f66cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71dcca452b1753de277d79b111f57c209f66cfe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e1276a694f9b0e738a6a2068cff101a051b0a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1276a694f9b0e738a6a2068cff101a051b0a35", "html_url": "https://github.com/rust-lang/rust/commit/5e1276a694f9b0e738a6a2068cff101a051b0a35"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "ecc43d21a4612cedcc6e6f16f31ca323c3f6ecf7", "filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c71dcca452b1753de277d79b111f57c209f66cfe/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71dcca452b1753de277d79b111f57c209f66cfe/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs?ref=c71dcca452b1753de277d79b111f57c209f66cfe", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+enum Cake {\n+    BlackForest,\n+    Marmor,\n+}\n+use Cake::*;\n+\n+const BOO: (Cake, Cake) = (Marmor, BlackForest);\n+//~^ ERROR: constant evaluation error: non-constant path in constant expression [E0471]\n+const FOO: Cake = BOO.1;\n+\n+const fn foo() -> Cake {\n+    Marmor //~ ERROR: constant evaluation error: non-constant path in constant expression [E0471]\n+    //~^ ERROR: non-constant path in constant expression\n+}\n+\n+const WORKS: Cake = Marmor;\n+\n+const GOO: Cake = foo();\n+\n+fn main() {\n+    match BlackForest {\n+        FOO => println!(\"hi\"), //~ NOTE: in pattern here\n+        GOO => println!(\"meh\"), //~ NOTE: in pattern here\n+        WORKS => println!(\"m\u00f6p\"),\n+        _ => println!(\"bye\"),\n+    }\n+}"}]}