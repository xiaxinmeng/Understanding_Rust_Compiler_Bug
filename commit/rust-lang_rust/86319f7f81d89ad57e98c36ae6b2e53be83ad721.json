{"sha": "86319f7f81d89ad57e98c36ae6b2e53be83ad721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MzE5ZjdmODFkODlhZDU3ZTk4YzM2YWU2YjJlNTNiZTgzYWQ3MjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-01T07:27:42Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-01T07:27:42Z"}, "message": "Rollup merge of #33973 - zackmdavis:stable_features_warning_notes_version_stabilized, r=brson\n\nstable features lint warning mentions version stabilized\n\nTo accomplish this, we alter the checks in `rustc::middle::stability` to\nuse the `StabilityLevel` defined in `syntax::attr` (which includes the\nversion in which the feature was stabilized) rather than the local\n`StabilityLevel` in the same module, and make the\n`declared_stable_lang_features` field of\n`syntax::feature_gate::Features` hold a Vec of feature-name, span\ntuples (in analogy to the `declared_lib_features` field) rather than\njust spans.\n\nFixes #33394.\n\n![stable_features_version_lint_before_and_after](https://cloud.githubusercontent.com/assets/1076988/15659237/5d952a3a-267c-11e6-9181-c9e612eefd7d.png)\n\nr? @brson (tagging Brian because he [wrote](https://github.com/rust-lang/rust/pull/21958) the lint)", "tree": {"sha": "ec448e6d90eaf788ba8094da899b8dfb9583e1b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec448e6d90eaf788ba8094da899b8dfb9583e1b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86319f7f81d89ad57e98c36ae6b2e53be83ad721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86319f7f81d89ad57e98c36ae6b2e53be83ad721", "html_url": "https://github.com/rust-lang/rust/commit/86319f7f81d89ad57e98c36ae6b2e53be83ad721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86319f7f81d89ad57e98c36ae6b2e53be83ad721/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e214c3e2da41a2f561bdff13c01a21278a65403b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e214c3e2da41a2f561bdff13c01a21278a65403b", "html_url": "https://github.com/rust-lang/rust/commit/e214c3e2da41a2f561bdff13c01a21278a65403b"}, {"sha": "06c9e0f5f80d2a2bad9e7b90af73b8dc89f756c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c9e0f5f80d2a2bad9e7b90af73b8dc89f756c6", "html_url": "https://github.com/rust-lang/rust/commit/06c9e0f5f80d2a2bad9e7b90af73b8dc89f756c6"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "eb1fb43789f996485d78d204155647906888f683", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=86319f7f81d89ad57e98c36ae6b2e53be83ad721", "patch": "@@ -26,7 +26,7 @@ use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n@@ -37,6 +37,7 @@ use hir::pat_util::EnumerateAndAdjustIterator;\n \n use std::mem::replace;\n use std::cmp::Ordering;\n+use std::ops::Deref;\n \n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Copy, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n@@ -322,7 +323,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors. Returns a list of all\n /// features used.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                          -> FnvHashMap<InternedString, StabilityLevel> {\n+                                          -> FnvHashMap<InternedString, attr::StabilityLevel> {\n     let _task = tcx.dep_graph.in_task(DepNode::StabilityCheck);\n     let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n \n@@ -343,7 +344,7 @@ pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     active_features: FnvHashSet<InternedString>,\n-    used_features: FnvHashMap<InternedString, StabilityLevel>,\n+    used_features: FnvHashMap<InternedString, attr::StabilityLevel>,\n     // Within a block where feature gate checking can be skipped.\n     in_skip_block: u32,\n }\n@@ -367,7 +368,8 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         match *stab {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(), Unstable);\n+                self.used_features.insert(feature.clone(),\n+                                          attr::Unstable { reason: reason.clone(), issue: issue });\n \n                 if !self.active_features.contains(feature) {\n                     let msg = match *reason {\n@@ -380,7 +382,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             }\n             Some(&Stability { ref level, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(), StabilityLevel::from_attr_level(level));\n+                self.used_features.insert(feature.clone(), level.clone());\n \n                 // Stable APIs are always ok to call and deprecated APIs are\n                 // handled by a lint.\n@@ -716,28 +718,32 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(sess: &Session,\n                                        lib_features_used: &FnvHashMap<InternedString,\n-                                                                      StabilityLevel>) {\n+                                                                      attr::StabilityLevel>) {\n     let ref declared_lib_features = sess.features.borrow().declared_lib_features;\n     let mut remaining_lib_features: FnvHashMap<InternedString, Span>\n         = declared_lib_features.clone().into_iter().collect();\n \n-    let stable_msg = \"this feature is stable. attribute no longer needed\";\n+    fn format_stable_since_msg(version: &str) -> String {\n+        format!(\"this feature has been stable since {}. Attribute no longer needed\", version)\n+    }\n \n-    for &span in &sess.features.borrow().declared_stable_lang_features {\n+    for &(ref stable_lang_feature, span) in &sess.features.borrow().declared_stable_lang_features {\n+        let version = find_lang_feature_accepted_version(stable_lang_feature.deref())\n+            .expect(\"unexpectedly couldn't find version feature was stabilized\");\n         sess.add_lint(lint::builtin::STABLE_FEATURES,\n                       ast::CRATE_NODE_ID,\n                       span,\n-                      stable_msg.to_string());\n+                      format_stable_since_msg(version));\n     }\n \n     for (used_lib_feature, level) in lib_features_used {\n         match remaining_lib_features.remove(used_lib_feature) {\n             Some(span) => {\n-                if *level == Stable {\n+                if let &attr::StabilityLevel::Stable { since: ref version } = level {\n                     sess.add_lint(lint::builtin::STABLE_FEATURES,\n                                   ast::CRATE_NODE_ID,\n                                   span,\n-                                  stable_msg.to_string());\n+                                  format_stable_since_msg(version.deref()));\n                 }\n             }\n             None => ( /* used but undeclared, handled during the previous ast visit */ )"}, {"sha": "08e593ca74780407515b2bcd252310f093e927a5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=86319f7f81d89ad57e98c36ae6b2e53be83ad721", "patch": "@@ -59,8 +59,8 @@ macro_rules! declare_features {\n \n         /// A set of features to be used by later passes.\n         pub struct Features {\n-            /// spans of #![feature] attrs for stable language features. for error reporting\n-            pub declared_stable_lang_features: Vec<Span>,\n+            /// #![feature] attrs for stable language features, for error reporting\n+            pub declared_stable_lang_features: Vec<(InternedString, Span)>,\n             /// #![feature] attrs for non-language (library) features\n             pub declared_lib_features: Vec<(InternedString, Span)>,\n             $(pub $feature: bool),+\n@@ -753,6 +753,10 @@ pub fn check_attribute(attr: &ast::Attribute, handler: &Handler,\n     cx.check_attribute(attr, true);\n }\n \n+pub fn find_lang_feature_accepted_version(feature: &str) -> Option<&'static str> {\n+    ACCEPTED_FEATURES.iter().find(|t| t.0 == feature).map(|t| t.1)\n+}\n+\n fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n     if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n         let issue = info.2;\n@@ -1191,7 +1195,7 @@ pub fn get_features(span_handler: &Handler, krate: &ast::Crate) -> Features {\n                     }\n                     else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n                         .find(|& &(n, _, _)| name == n) {\n-                        features.declared_stable_lang_features.push(mi.span);\n+                        features.declared_stable_lang_features.push((name, mi.span));\n                     } else {\n                         features.declared_lib_features.push((name, mi.span));\n                     }"}, {"sha": "6f8c95c384032c343b99df245b2c5003a04b74af", "filename": "src/test/compile-fail/stable-features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319f7f81d89ad57e98c36ae6b2e53be83ad721/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstable-features.rs?ref=86319f7f81d89ad57e98c36ae6b2e53be83ad721", "patch": "@@ -12,8 +12,8 @@\n // language and lib features.\n \n #![deny(stable_features)]\n-#![feature(test_accepted_feature)] //~ ERROR this feature is stable\n-#![feature(rust1)] //~ ERROR this feature is stable\n+#![feature(test_accepted_feature)] //~ ERROR this feature has been stable since 1.0.0\n+#![feature(rust1)] //~ ERROR this feature has been stable since 1.0.0\n \n fn main() {\n     let _foo: Vec<()> = Vec::new();"}]}