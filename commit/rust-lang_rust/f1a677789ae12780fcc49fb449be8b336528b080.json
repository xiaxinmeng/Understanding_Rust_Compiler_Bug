{"sha": "f1a677789ae12780fcc49fb449be8b336528b080", "node_id": "C_kwDOAAsO6NoAKGYxYTY3Nzc4OWFlMTI3ODBmY2M0OWZiNDQ5YmU4YjMzNjUyOGIwODA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-10T18:00:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T18:00:07Z"}, "message": "Rollup merge of #94644 - m-ou-se:scoped-threads-drop-soundness, r=joshtriplett\n\nFix soundness issue in scoped threads.\n\nThis was discovered in https://github.com/rust-lang/rust/pull/94559#discussion_r820116323\n\nThe `scope()` function returns when all threads are finished, but I accidentally considered a thread 'finished' before dropping their panic payload or ignored return value.\n\nSo if a thread returned (or panics with) something that in its `Drop` implementation still uses borrowed stuff, it goes wrong.\n\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=2a1f19ac4676cdabe43e24e536ff9358", "tree": {"sha": "f680578ac869a1fcf3d959b783664f0a6d3024b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f680578ac869a1fcf3d959b783664f0a6d3024b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a677789ae12780fcc49fb449be8b336528b080", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKjynCRBK7hj4Ov3rIwAA/2wIAIEfIjhl3RHY4BNQbP036lEh\nXv9/Eym9VMKWqZBCOHdrZnWkAkrVJnaQeLdmAz1g6SrLcxU5dR3oZq8nXXdRPAtJ\n4f/v0iw5USsMhbtaNGrbzKkPephMjZSV+5OLPm8RRpZ952biLy71nIonXz5XrUpp\nO7bL7OTeIT+qOxA6CU26YZvXkGhOi49UydYfinEFaIKpkmoJGhIRNeAoam0jIWIV\nEO6r2iYHE+8zELrZej/1JiSroVmQ+tSOYwpfTGDcsufghQqUH3V99lzG7keehXEA\n+8mkmVhuTBmRjVHs2Glkc7gVZKhVtqp+I3WMnyI1bJ2O7+rg5ahkJkF6OqG8ndU=\n=w5yp\n-----END PGP SIGNATURE-----\n", "payload": "tree f680578ac869a1fcf3d959b783664f0a6d3024b0\nparent b5127202b278cc87e7577cea4165b4e39c60f1e2\nparent b97d87518d19e418220f726e774ffceadb4d33b9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646935207 +0100\ncommitter GitHub <noreply@github.com> 1646935207 +0100\n\nRollup merge of #94644 - m-ou-se:scoped-threads-drop-soundness, r=joshtriplett\n\nFix soundness issue in scoped threads.\n\nThis was discovered in https://github.com/rust-lang/rust/pull/94559#discussion_r820116323\n\nThe `scope()` function returns when all threads are finished, but I accidentally considered a thread 'finished' before dropping their panic payload or ignored return value.\n\nSo if a thread returned (or panics with) something that in its `Drop` implementation still uses borrowed stuff, it goes wrong.\n\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=2a1f19ac4676cdabe43e24e536ff9358\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a677789ae12780fcc49fb449be8b336528b080", "html_url": "https://github.com/rust-lang/rust/commit/f1a677789ae12780fcc49fb449be8b336528b080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a677789ae12780fcc49fb449be8b336528b080/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5127202b278cc87e7577cea4165b4e39c60f1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5127202b278cc87e7577cea4165b4e39c60f1e2", "html_url": "https://github.com/rust-lang/rust/commit/b5127202b278cc87e7577cea4165b4e39c60f1e2"}, {"sha": "b97d87518d19e418220f726e774ffceadb4d33b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97d87518d19e418220f726e774ffceadb4d33b9", "html_url": "https://github.com/rust-lang/rust/commit/b97d87518d19e418220f726e774ffceadb4d33b9"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "ad3b8cd5c433e5f39e0ca92ecc6867cc2a303231", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f1a677789ae12780fcc49fb449be8b336528b080", "patch": "@@ -364,6 +364,11 @@ extern crate std as realstd;\n #[macro_use]\n mod macros;\n \n+// The runtime entry point and a few unstable public functions used by the\n+// compiler\n+#[macro_use]\n+pub mod rt;\n+\n // The Rust prelude\n pub mod prelude;\n \n@@ -548,11 +553,6 @@ pub mod arch {\n #[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n pub use std_detect::is_x86_feature_detected;\n \n-// The runtime entry point and a few unstable public functions used by the\n-// compiler\n-#[macro_use]\n-pub mod rt;\n-\n // Platform-abstraction modules\n mod sys;\n mod sys_common;"}, {"sha": "74b29454b94a4896c9297eee061b6de0b684150f", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=f1a677789ae12780fcc49fb449be8b336528b080", "patch": "@@ -1287,12 +1287,31 @@ unsafe impl<'scope, T: Sync> Sync for Packet<'scope, T> {}\n \n impl<'scope, T> Drop for Packet<'scope, T> {\n     fn drop(&mut self) {\n+        // If this packet was for a thread that ran in a scope, the thread\n+        // panicked, and nobody consumed the panic payload, we make sure\n+        // the scope function will panic.\n+        let unhandled_panic = matches!(self.result.get_mut(), Some(Err(_)));\n+        // Drop the result without causing unwinding.\n+        // This is only relevant for threads that aren't join()ed, as\n+        // join() will take the `result` and set it to None, such that\n+        // there is nothing left to drop here.\n+        // If this panics, we should handle that, because we're outside the\n+        // outermost `catch_unwind` of our thread.\n+        // We just abort in that case, since there's nothing else we can do.\n+        // (And even if we tried to handle it somehow, we'd also need to handle\n+        // the case where the panic payload we get out of it also panics on\n+        // drop, and so on. See issue #86027.)\n+        if let Err(_) = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+            *self.result.get_mut() = None;\n+        })) {\n+            rtabort!(\"thread result panicked on drop\");\n+        }\n         // Book-keeping so the scope knows when it's done.\n         if let Some(scope) = self.scope {\n-            // If this packet was for a thread that ran in a scope, the thread\n-            // panicked, and nobody consumed the panic payload, we make sure\n-            // the scope function will panic.\n-            let unhandled_panic = matches!(self.result.get_mut(), Some(Err(_)));\n+            // Now that there will be no more user code running on this thread\n+            // that can use 'scope, mark the thread as 'finished'.\n+            // It's important we only do this after the `result` has been dropped,\n+            // since dropping it might still use things it borrowed from 'scope.\n             scope.decrement_num_running_threads(unhandled_panic);\n         }\n     }"}, {"sha": "7386fe1c442abd6a268a08b79fdc0383c76c6fb8", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a677789ae12780fcc49fb449be8b336528b080/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=f1a677789ae12780fcc49fb449be8b336528b080", "patch": "@@ -4,10 +4,11 @@ use crate::mem;\n use crate::panic::panic_any;\n use crate::result;\n use crate::sync::{\n+    atomic::{AtomicBool, Ordering},\n     mpsc::{channel, Sender},\n     Arc, Barrier,\n };\n-use crate::thread::{self, ThreadId};\n+use crate::thread::{self, Scope, ThreadId};\n use crate::time::Duration;\n use crate::time::Instant;\n \n@@ -293,5 +294,25 @@ fn test_thread_id_not_equal() {\n     assert!(thread::current().id() != spawned_id);\n }\n \n-// NOTE: the corresponding test for stderr is in ui/thread-stderr, due\n-// to the test harness apparently interfering with stderr configuration.\n+#[test]\n+fn test_scoped_threads_drop_result_before_join() {\n+    let actually_finished = &AtomicBool::new(false);\n+    struct X<'scope, 'env>(&'scope Scope<'scope, 'env>, &'env AtomicBool);\n+    impl Drop for X<'_, '_> {\n+        fn drop(&mut self) {\n+            thread::sleep(Duration::from_millis(20));\n+            let actually_finished = self.1;\n+            self.0.spawn(move || {\n+                thread::sleep(Duration::from_millis(20));\n+                actually_finished.store(true, Ordering::Relaxed);\n+            });\n+        }\n+    }\n+    thread::scope(|s| {\n+        s.spawn(move || {\n+            thread::sleep(Duration::from_millis(20));\n+            X(s, actually_finished)\n+        });\n+    });\n+    assert!(actually_finished.load(Ordering::Relaxed));\n+}"}]}