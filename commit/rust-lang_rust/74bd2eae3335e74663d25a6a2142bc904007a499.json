{"sha": "74bd2eae3335e74663d25a6a2142bc904007a499", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YmQyZWFlMzMzNWU3NDY2M2QyNWE2YTIxNDJiYzkwNDAwN2E0OTk=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-19T23:21:42Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-19T23:26:38Z"}, "message": "impl Default for LangString, replacing all_false by default", "tree": {"sha": "a1823c05d3343825df35fcc78733b4bb5b2d5205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1823c05d3343825df35fcc78733b4bb5b2d5205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74bd2eae3335e74663d25a6a2142bc904007a499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74bd2eae3335e74663d25a6a2142bc904007a499", "html_url": "https://github.com/rust-lang/rust/commit/74bd2eae3335e74663d25a6a2142bc904007a499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74bd2eae3335e74663d25a6a2142bc904007a499/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6b06a03a00a7c9f156bff130b72e90b79e1127", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b06a03a00a7c9f156bff130b72e90b79e1127", "html_url": "https://github.com/rust-lang/rust/commit/1b6b06a03a00a7c9f156bff130b72e90b79e1127"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "82982a1b43ec0bd9e696be2f791485415ac5cb3d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74bd2eae3335e74663d25a6a2142bc904007a499/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bd2eae3335e74663d25a6a2142bc904007a499/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=74bd2eae3335e74663d25a6a2142bc904007a499", "patch": "@@ -204,7 +204,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 CodeBlockKind::Fenced(ref lang) => {\n                     LangString::parse_without_check(&lang, self.check_error_codes, false)\n                 }\n-                CodeBlockKind::Indented => LangString::all_false(),\n+                CodeBlockKind::Indented => Default::default(),\n             };\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(kind)));\n@@ -665,7 +665,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n                 let block_info = match kind {\n                     CodeBlockKind::Fenced(ref lang) => {\n                         if lang.is_empty() {\n-                            LangString::all_false()\n+                            Default::default()\n                         } else {\n                             LangString::parse(\n                                 lang,\n@@ -675,7 +675,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n                             )\n                         }\n                     }\n-                    CodeBlockKind::Indented => LangString::all_false(),\n+                    CodeBlockKind::Indented => Default::default(),\n                 };\n                 if !block_info.rust {\n                     continue;\n@@ -778,22 +778,24 @@ crate enum Ignore {\n     Some(Vec<String>),\n }\n \n-impl LangString {\n-    fn all_false() -> LangString {\n-        LangString {\n+impl Default for LangString {\n+    fn default() -> Self {\n+        Self {\n             original: String::new(),\n             should_panic: false,\n             no_run: false,\n             ignore: Ignore::None,\n-            rust: true, // NB This used to be `notrust = false`\n+            rust: true,\n             test_harness: false,\n             compile_fail: false,\n             error_codes: Vec::new(),\n             allow_fail: false,\n             edition: None,\n         }\n     }\n+}\n \n+impl LangString {\n     fn parse_without_check(\n         string: &str,\n         allow_error_code_check: ErrorCodes,\n@@ -811,7 +813,7 @@ impl LangString {\n         let allow_error_code_check = allow_error_code_check.as_bool();\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n-        let mut data = LangString::all_false();\n+        let mut data = LangString::default();\n         let mut ignores = vec![];\n \n         data.original = string.to_owned();\n@@ -1233,7 +1235,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n                 CodeBlockKind::Fenced(syntax) => {\n                     let syntax = syntax.as_ref();\n                     let lang_string = if syntax.is_empty() {\n-                        LangString::all_false()\n+                        Default::default()\n                     } else {\n                         LangString::parse(&*syntax, ErrorCodes::Yes, false, Some(extra_info))\n                     };"}, {"sha": "9da3072ec282fbd247abf096e2d000a65331a9db", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74bd2eae3335e74663d25a6a2142bc904007a499/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bd2eae3335e74663d25a6a2142bc904007a499/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=74bd2eae3335e74663d25a6a2142bc904007a499", "patch": "@@ -56,71 +56,59 @@ fn test_lang_string_parse() {\n         assert_eq!(LangString::parse(s, ErrorCodes::Yes, true, None), lg)\n     }\n \n-    t(LangString::all_false());\n-    t(LangString { original: \"rust\".into(), ..LangString::all_false() });\n-    t(LangString { original: \"sh\".into(), rust: false, ..LangString::all_false() });\n-    t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..LangString::all_false() });\n+    t(Default::default());\n+    t(LangString { original: \"rust\".into(), ..Default::default() });\n+    t(LangString { original: \"sh\".into(), rust: false, ..Default::default() });\n+    t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..Default::default() });\n     t(LangString {\n         original: \"ignore-foo\".into(),\n         ignore: Ignore::Some(vec![\"foo\".to_string()]),\n-        ..LangString::all_false()\n-    });\n-    t(LangString {\n-        original: \"should_panic\".into(),\n-        should_panic: true,\n-        ..LangString::all_false()\n-    });\n-    t(LangString { original: \"no_run\".into(), no_run: true, ..LangString::all_false() });\n-    t(LangString {\n-        original: \"test_harness\".into(),\n-        test_harness: true,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n+    t(LangString { original: \"should_panic\".into(), should_panic: true, ..Default::default() });\n+    t(LangString { original: \"no_run\".into(), no_run: true, ..Default::default() });\n+    t(LangString { original: \"test_harness\".into(), test_harness: true, ..Default::default() });\n     t(LangString {\n         original: \"compile_fail\".into(),\n         no_run: true,\n         compile_fail: true,\n-        ..LangString::all_false()\n-    });\n-    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..LangString::all_false() });\n-    t(LangString {\n-        original: \"{.no_run .example}\".into(),\n-        no_run: true,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n+    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..Default::default() });\n+    t(LangString { original: \"{.no_run .example}\".into(), no_run: true, ..Default::default() });\n     t(LangString {\n         original: \"{.sh .should_panic}\".into(),\n         should_panic: true,\n         rust: false,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n-    t(LangString { original: \"{.example .rust}\".into(), ..LangString::all_false() });\n+    t(LangString { original: \"{.example .rust}\".into(), ..Default::default() });\n     t(LangString {\n         original: \"{.test_harness .rust}\".into(),\n         test_harness: true,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n     t(LangString {\n         original: \"text, no_run\".into(),\n         no_run: true,\n         rust: false,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n     t(LangString {\n         original: \"text,no_run\".into(),\n         no_run: true,\n         rust: false,\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n     t(LangString {\n         original: \"edition2015\".into(),\n         edition: Some(Edition::Edition2015),\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n     t(LangString {\n         original: \"edition2018\".into(),\n         edition: Some(Edition::Edition2018),\n-        ..LangString::all_false()\n+        ..Default::default()\n     });\n }\n "}]}