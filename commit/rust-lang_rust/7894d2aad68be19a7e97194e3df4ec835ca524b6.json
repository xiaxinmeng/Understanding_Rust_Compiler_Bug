{"sha": "7894d2aad68be19a7e97194e3df4ec835ca524b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTRkMmFhZDY4YmUxOWE3ZTk3MTk0ZTNkZjRlYzgzNWNhNTI0YjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-12T08:38:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-12T08:38:37Z"}, "message": "Rollup merge of #37481 - estebank:lifetime-help-removal-for-impl, r=eddyb\n\nDon't provide hint to add lifetime on impl items\n\n``` rust\nuse std::str::FromStr;\n\npub struct Foo<'a> {\n    field: &'a str,\n}\n\nimpl<'a> FromStr for Foo<'a> {\n    type Err = ();\n    fn from_str(path: &str) -> Result<Self, ()> {\n        Ok(Foo { field: path })\n    }\n}\n```\n\nwould give the following hint:\n\n``` nocode\nhelp: consider using an explicit lifetime parameter as shown: fn from_str(path: &'a str) -> Result<Self, ()>\n  --> <anon>:9:5\n   |\n9  |     fn from_str(path: &str) -> Result<Self, ()> {\n   |     ^\n```\n\nwhich is never correct, since then there will be a lifetime mismatch between the `impl` and the trait.\n\nRemove this hint for all `impl` items.\n\nRe: #37363.", "tree": {"sha": "cf5f3a5d4208804ca365ce362eada9d94a2299c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf5f3a5d4208804ca365ce362eada9d94a2299c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7894d2aad68be19a7e97194e3df4ec835ca524b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7894d2aad68be19a7e97194e3df4ec835ca524b6", "html_url": "https://github.com/rust-lang/rust/commit/7894d2aad68be19a7e97194e3df4ec835ca524b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7894d2aad68be19a7e97194e3df4ec835ca524b6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66da9a291152feeedc9bb53f23f4577478b377e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66da9a291152feeedc9bb53f23f4577478b377e1", "html_url": "https://github.com/rust-lang/rust/commit/66da9a291152feeedc9bb53f23f4577478b377e1"}, {"sha": "87b6d386541c6f7a409775296da1cda2da469c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b6d386541c6f7a409775296da1cda2da469c36", "html_url": "https://github.com/rust-lang/rust/commit/87b6d386541c6f7a409775296da1cda2da469c36"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "75334a517fb3bd3ef7c29d94a8bc1fb4c201aee0", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=7894d2aad68be19a7e97194e3df4ec835ca524b6", "patch": "@@ -1052,21 +1052,28 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     match item.node {\n                         hir::ItemFn(ref fn_decl, unsafety, constness, _, ref gen, _) => {\n                             Some((fn_decl, gen, unsafety, constness, item.name, item.span))\n-                        },\n-                        _ => None\n+                        }\n+                        _ => None,\n                     }\n                 }\n                 ast_map::NodeImplItem(item) => {\n-                    match item.node {\n-                        hir::ImplItemKind::Method(ref sig, _) => {\n-                            Some((&sig.decl,\n-                                  &sig.generics,\n-                                  sig.unsafety,\n-                                  sig.constness,\n-                                  item.name,\n-                                  item.span))\n+                    let id = self.tcx.map.get_parent(item.id);\n+                    if let Some(ast_map::NodeItem(parent_scope)) = self.tcx.map.find(id) {\n+                        if let hir::ItemImpl(_, _, _, None, _, _) = parent_scope.node {\n+                            // this impl scope implements a trait, do not recomend\n+                            // using explicit lifetimes (#37363)\n+                            return;\n                         }\n-                        _ => None,\n+                    }\n+                    if let hir::ImplItemKind::Method(ref sig, _) = item.node {\n+                        Some((&sig.decl,\n+                              &sig.generics,\n+                              sig.unsafety,\n+                              sig.constness,\n+                              item.name,\n+                              item.span))\n+                    } else {\n+                        None\n                     }\n                 },\n                 ast_map::NodeTraitItem(item) => {\n@@ -1079,12 +1086,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                   item.name,\n                                   item.span))\n                         }\n-                        _ => None\n+                        _ => None,\n                     }\n                 }\n-                _ => None\n+                _ => None,\n             },\n-            None => None\n+            None => None,\n         };\n         let (fn_decl, generics, unsafety, constness, name, span)\n                                     = node_inner.expect(\"expect item fn\");"}, {"sha": "4323929e2e37a7cc07827fa3cccbde3cb06d72dd", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=7894d2aad68be19a7e97194e3df4ec835ca524b6", "patch": "@@ -49,8 +49,6 @@ struct Baz<'x> {\n \n impl<'a> Baz<'a> {\n     fn baz2<'b>(&self, x: &isize) -> (&'b isize, &'b isize) {\n-        //~^ HELP consider using an explicit lifetime parameter as shown: fn baz2<'b>(&self, x: &'\n-        // FIXME #35038: The above suggestion is different on Linux and Mac.\n         (self.bar, x) //~ ERROR E0312\n         //~^ ERROR E0312\n     }"}, {"sha": "603f55af465f47f8c6b23f6592659a79b02a2c15", "filename": "src/test/ui/lifetimes/consider-using-explicit-lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.rs?ref=7894d2aad68be19a7e97194e3df4ec835ca524b6", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::str::FromStr;\n+\n+pub struct Foo<'a> {\n+    field: &'a str,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar(path: &str) -> Result<Self, ()> {\n+        Ok(Foo { field: path })\n+    }\n+}\n+\n+impl<'a> FromStr for Foo<'a> {\n+    type Err = ();\n+    fn from_str(path: &str) -> Result<Self, ()> {\n+        Ok(Foo { field: path })\n+    }\n+}"}, {"sha": "353e251369a10092e3b54fb3895025f33927f847", "filename": "src/test/ui/lifetimes/consider-using-explicit-lifetime.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7894d2aad68be19a7e97194e3df4ec835ca524b6/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fconsider-using-explicit-lifetime.stderr?ref=7894d2aad68be19a7e97194e3df4ec835ca524b6", "patch": "@@ -0,0 +1,22 @@\n+error: main function not found\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/consider-using-explicit-lifetime.rs:19:12\n+   |\n+19 |         Ok(Foo { field: path })\n+   |            ^^^\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/consider-using-explicit-lifetime.rs:26:12\n+   |\n+26 |         Ok(Foo { field: path })\n+   |            ^^^\n+   |\n+help: consider using an explicit lifetime parameter as shown: fn from_str(path: &'a str) -> Result<Self, ()>\n+  --> $DIR/consider-using-explicit-lifetime.rs:25:5\n+   |\n+25 |     fn from_str(path: &str) -> Result<Self, ()> {\n+   |     ^\n+\n+error: aborting due to 2 previous errors\n+"}]}