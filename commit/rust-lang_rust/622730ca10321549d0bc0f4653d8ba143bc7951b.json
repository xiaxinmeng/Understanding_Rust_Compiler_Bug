{"sha": "622730ca10321549d0bc0f4653d8ba143bc7951b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjczMGNhMTAzMjE1NDlkMGJjMGY0NjUzZDhiYTE0M2JjNzk1MWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-09T14:54:54Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-09T15:06:58Z"}, "message": "Remove some out-dated comments from CGU partitioning docs.", "tree": {"sha": "d69f7ffd71c2d12eed98265337938a8fc2a3ebe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69f7ffd71c2d12eed98265337938a8fc2a3ebe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622730ca10321549d0bc0f4653d8ba143bc7951b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622730ca10321549d0bc0f4653d8ba143bc7951b", "html_url": "https://github.com/rust-lang/rust/commit/622730ca10321549d0bc0f4653d8ba143bc7951b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622730ca10321549d0bc0f4653d8ba143bc7951b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f90947c2c27d5d4ae30ccc0e83ffc95a8597128", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f90947c2c27d5d4ae30ccc0e83ffc95a8597128", "html_url": "https://github.com/rust-lang/rust/commit/5f90947c2c27d5d4ae30ccc0e83ffc95a8597128"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "d1d167306c1fdb9fff02e4d06850415204b9bfae", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/622730ca10321549d0bc0f4653d8ba143bc7951b/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622730ca10321549d0bc0f4653d8ba143bc7951b/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=622730ca10321549d0bc0f4653d8ba143bc7951b", "patch": "@@ -53,8 +53,6 @@\n //! - One for \"stable\", that is non-generic, code\n //! - One for more \"volatile\" code, i.e. monomorphized instances of functions\n //!   defined in that module\n-//! - Code for monomorphized instances of functions from external crates gets\n-//!   placed into every codegen unit that uses that instance.\n //!\n //! In order to see why this heuristic makes sense, let's take a look at when a\n //! codegen unit can get invalidated:\n@@ -82,17 +80,6 @@\n //! side-effect of references a little by at least not touching the non-generic\n //! code of the module.\n //!\n-//! As another optimization, monomorphized functions from external crates get\n-//! some special handling. Since we assume that the definition of such a\n-//! function changes rather infrequently compared to local items, we can just\n-//! instantiate external functions in every codegen unit where it is referenced\n-//! -- without having to fear that doing this will cause a lot of unnecessary\n-//! re-compilations. If such a reference is added or removed, the codegen unit\n-//! has to be re-translated anyway.\n-//! (Note that this only makes sense if external crates actually don't change\n-//! frequently. For certain multi-crate projects this might not be a valid\n-//! assumption).\n-//!\n //! A Note on Inlining\n //! ------------------\n //! As briefly mentioned above, in order for LLVM to be able to inline a\n@@ -107,10 +94,9 @@\n //!   inlined, so it can distribute function instantiations accordingly. Since\n //!   there is no way of knowing for sure which functions LLVM will decide to\n //!   inline in the end, we apply a heuristic here: Only functions marked with\n-//!   #[inline] and (as stated above) functions from external crates are\n-//!   considered for inlining by the partitioner. The current implementation\n-//!   will not try to determine if a function is likely to be inlined by looking\n-//!   at the functions definition.\n+//!   #[inline] are considered for inlining by the partitioner. The current\n+//!   implementation will not try to determine if a function is likely to be\n+//!   inlined by looking at the functions definition.\n //!\n //! Note though that as a side-effect of creating a codegen units per\n //! source-level module, functions from the same module will be available for"}]}