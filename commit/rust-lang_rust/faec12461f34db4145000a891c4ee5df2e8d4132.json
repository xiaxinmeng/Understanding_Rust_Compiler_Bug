{"sha": "faec12461f34db4145000a891c4ee5df2e8d4132", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZWMxMjQ2MWYzNGRiNDE0NTAwMGE4OTFjNGVlNWRmMmU4ZDQxMzI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T14:41:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T14:41:31Z"}, "message": "Use custom driver for sysroot building too\n\nThis required another custom driver to ensure that build scripts are\nbuilt using cg_llvm instead of cg_clif.\n\nAfter this change only rustdoc still uses -Zcodegen-backend", "tree": {"sha": "e5319be8db9e4b7497e076dc0c431c9a02ead321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5319be8db9e4b7497e076dc0c431c9a02ead321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faec12461f34db4145000a891c4ee5df2e8d4132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faec12461f34db4145000a891c4ee5df2e8d4132", "html_url": "https://github.com/rust-lang/rust/commit/faec12461f34db4145000a891c4ee5df2e8d4132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faec12461f34db4145000a891c4ee5df2e8d4132/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c352f91b40a3533d49cc1c1ef58f9e656409cce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c352f91b40a3533d49cc1c1ef58f9e656409cce5", "html_url": "https://github.com/rust-lang/rust/commit/c352f91b40a3533d49cc1c1ef58f9e656409cce5"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "04c82ca2a512855fee6d3776c07970e63a3ca510", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faec12461f34db4145000a891c4ee5df2e8d4132/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/faec12461f34db4145000a891c4ee5df2e8d4132/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=faec12461f34db4145000a891c4ee5df2e8d4132", "patch": "@@ -16,8 +16,8 @@ rm -r sysroot/ 2>/dev/null || true\n \n # Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n # build scripts are still compiled using cg_llvm.\n-export RUSTC=rustc\n-export RUSTFLAGS=$RUSTFLAGS\" -Ztrim-diagnostic-paths=no -Zcodegen-backend=$(pwd)/../target/\"$CHANNEL\"/librustc_codegen_cranelift.\"$dylib_ext\" --sysroot $(pwd)/sysroot\"\n+export RUSTC=$(pwd)/../\"target/\"$CHANNEL\"/cg_clif_build_sysroot\"\n+export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n \n # Build libs\n export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\""}, {"sha": "b7524993ad77dc1f5b2078bbb267ef6f9ee00644", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faec12461f34db4145000a891c4ee5df2e8d4132/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faec12461f34db4145000a891c4ee5df2e8d4132/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=faec12461f34db4145000a891c4ee5df2e8d4132", "patch": "@@ -13,11 +13,11 @@ use rustc_session::early_error;\n use rustc_target::spec::PanicStrategy;\n \n #[derive(Default)]\n-pub struct TimePassesCallbacks {\n+pub struct CraneliftPassesCallbacks {\n     time_passes: bool,\n }\n \n-impl rustc_driver::Callbacks for TimePassesCallbacks {\n+impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         // If a --prints=... option has been given, we don't print the \"total\"\n         // time because it will mess up the --prints output. See #64339.\n@@ -47,7 +47,7 @@ impl rustc_driver::Callbacks for TimePassesCallbacks {\n fn main() {\n     let start = std::time::Instant::now();\n     rustc_driver::init_rustc_env_logger();\n-    let mut callbacks = TimePassesCallbacks::default();\n+    let mut callbacks = CraneliftPassesCallbacks::default();\n     rustc_driver::install_ice_hook();\n     let exit_code = rustc_driver::catch_with_exit_code(|| {\n         let mut use_jit = false;"}, {"sha": "fe8bcf8b791502643e965947f6f4d43f75008448", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/faec12461f34db4145000a891c4ee5df2e8d4132/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faec12461f34db4145000a891c4ee5df2e8d4132/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=faec12461f34db4145000a891c4ee5df2e8d4132", "patch": "@@ -0,0 +1,112 @@\n+//! The only difference between this and cg_clif.rs is that this binary defaults to using cg_llvm\n+//! instead of cg_clif and requires `--clif` to use cg_clif and that this binary doesn't have JIT\n+//! support.\n+//! This is necessary as with Cargo `RUSTC` applies to both target crates and host crates. The host\n+//! crates must be built with cg_llvm as we are currently building a sysroot for cg_clif.\n+//! `RUSTFLAGS` however is only applied to target crates, so `--clif` would only be passed to the\n+//! target crates.\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+extern crate rustc_driver;\n+extern crate rustc_interface;\n+extern crate rustc_session;\n+extern crate rustc_target;\n+\n+use std::path::PathBuf;\n+\n+use rustc_interface::interface;\n+use rustc_session::config::ErrorOutputType;\n+use rustc_session::early_error;\n+use rustc_target::spec::PanicStrategy;\n+\n+fn find_sysroot() -> String {\n+    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    match (home, toolchain) {\n+        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n+            .to_owned(),\n+    }\n+}\n+\n+pub struct CraneliftPassesCallbacks {\n+    use_clif: bool,\n+}\n+\n+impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        if !self.use_clif {\n+            config.opts.maybe_sysroot = Some(PathBuf::from(find_sysroot()));\n+            return;\n+        }\n+\n+        // FIXME workaround for an ICE\n+        config.opts.debugging_opts.trim_diagnostic_paths = false;\n+\n+        config.opts.cg.panic = Some(PanicStrategy::Abort);\n+        config.opts.debugging_opts.panic_abort_tests = true;\n+        config.opts.maybe_sysroot = Some(\n+            std::env::current_exe()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .join(\"build_sysroot\")\n+                .join(\"sysroot\"),\n+        );\n+    }\n+}\n+\n+fn main() {\n+    rustc_driver::init_rustc_env_logger();\n+    rustc_driver::install_ice_hook();\n+    let exit_code = rustc_driver::catch_with_exit_code(|| {\n+        let mut use_clif = false;\n+\n+        let args = std::env::args_os()\n+            .enumerate()\n+            .map(|(i, arg)| {\n+                arg.into_string().unwrap_or_else(|arg| {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n+                    )\n+                })\n+            })\n+            .filter(|arg| {\n+                if arg == \"--clif\" {\n+                    use_clif = true;\n+                    false\n+                } else {\n+                    true\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        let mut callbacks = CraneliftPassesCallbacks { use_clif };\n+\n+        rustc_driver::run_compiler(\n+            &args,\n+            &mut callbacks,\n+            None,\n+            None,\n+            if use_clif {\n+                Some(Box::new(move |_| {\n+                    Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n+                        config: rustc_codegen_cranelift::BackendConfig { use_jit: false },\n+                    })\n+                }))\n+            } else {\n+                None\n+            },\n+        )\n+    });\n+    std::process::exit(exit_code)\n+}"}]}