{"sha": "88ecdd0804be7c5643eafa4e1960f5e0176903b3", "node_id": "C_kwDOAAsO6NoAKDg4ZWNkZDA4MDRiZTdjNTY0M2VhZmE0ZTE5NjBmNWUwMTc2OTAzYjM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T14:10:48Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T14:45:11Z"}, "message": "Extract some util functions", "tree": {"sha": "ed76f88e3cd682124bac8fba6897f1173256c7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed76f88e3cd682124bac8fba6897f1173256c7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ecdd0804be7c5643eafa4e1960f5e0176903b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ecdd0804be7c5643eafa4e1960f5e0176903b3", "html_url": "https://github.com/rust-lang/rust/commit/88ecdd0804be7c5643eafa4e1960f5e0176903b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ecdd0804be7c5643eafa4e1960f5e0176903b3/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90bb7a34764b460681dca1efb333ff378478dbd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bb7a34764b460681dca1efb333ff378478dbd8", "html_url": "https://github.com/rust-lang/rust/commit/90bb7a34764b460681dca1efb333ff378478dbd8"}], "stats": {"total": 131, "additions": 68, "deletions": 63}, "files": [{"sha": "9b189ea1ef8fb102396b7cefa76829bcff426ee5", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=88ecdd0804be7c5643eafa4e1960f5e0176903b3", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::expr_or_init;\n-use clippy_utils::ty::is_isize_or_usize;\n+use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n use rustc_ast::ast;\n use rustc_attr::IntType;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, FloatTy, Ty, VariantDiscr};\n+use rustc_middle::ty::{self, FloatTy, Ty};\n \n use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n \n@@ -117,17 +117,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n             {\n                 let i = def.variant_index_with_ctor_id(id);\n                 let variant = &def.variants[i];\n-                let nbits: u64 = match variant.discr {\n-                    VariantDiscr::Explicit(id) => utils::read_explicit_enum_value(cx.tcx, id).unwrap().nbits(),\n-                    VariantDiscr::Relative(x) => {\n-                        match def.variants[(i.as_usize() - x as usize).into()].discr {\n-                            VariantDiscr::Explicit(id) => {\n-                                utils::read_explicit_enum_value(cx.tcx, id).unwrap().add(x).nbits()\n-                            }\n-                            VariantDiscr::Relative(_) => (32 - x.leading_zeros()).into(),\n-                        }\n-                    }\n-                };\n+                let nbits = utils::enum_value_nbits(get_discriminant_value(cx.tcx, def, i));\n                 (nbits, Some(variant))\n             } else {\n                 (utils::enum_ty_to_nbits(def, cx.tcx), None)"}, {"sha": "bbed766c47a8526f45c9ec90fd34b3b6b57b18e9", "filename": "clippy_lints/src/casts/utils.rs", "status": "modified", "additions": 7, "deletions": 49, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Futils.rs?ref=88ecdd0804be7c5643eafa4e1960f5e0176903b3", "patch": "@@ -1,7 +1,5 @@\n-use rustc_middle::mir::interpret::{ConstValue, Scalar};\n+use clippy_utils::ty::{read_explicit_enum_value, EnumValue};\n use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TyCtxt, UintTy, VariantDiscr};\n-use rustc_span::def_id::DefId;\n-use rustc_target::abi::Size;\n \n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n@@ -27,53 +25,13 @@ pub(super) fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n     }\n }\n \n-pub(super) enum EnumValue {\n-    Unsigned(u128),\n-    Signed(i128),\n-}\n-impl EnumValue {\n-    pub(super) fn add(self, n: u32) -> Self {\n-        match self {\n-            Self::Unsigned(x) => Self::Unsigned(x + u128::from(n)),\n-            Self::Signed(x) => Self::Signed(x + i128::from(n)),\n-        }\n-    }\n-\n-    pub(super) fn nbits(self) -> u64 {\n-        match self {\n-            Self::Unsigned(x) => 128 - x.leading_zeros(),\n-            Self::Signed(x) if x < 0 => 128 - (-(x + 1)).leading_zeros() + 1,\n-            Self::Signed(x) => 128 - x.leading_zeros(),\n-        }\n-        .into()\n-    }\n-}\n-\n-#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n-pub(super) fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n-    if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n-        match tcx.type_of(id).kind() {\n-            ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n-                1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n-                2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n-                4 => i128::from(value.assert_bits(Size::from_bytes(4)) as u32 as i32),\n-                8 => i128::from(value.assert_bits(Size::from_bytes(8)) as u64 as i64),\n-                16 => value.assert_bits(Size::from_bytes(16)) as i128,\n-                _ => return None,\n-            })),\n-            ty::Uint(_) => Some(EnumValue::Unsigned(match value.size().bytes() {\n-                1 => value.assert_bits(Size::from_bytes(1)),\n-                2 => value.assert_bits(Size::from_bytes(2)),\n-                4 => value.assert_bits(Size::from_bytes(4)),\n-                8 => value.assert_bits(Size::from_bytes(8)),\n-                16 => value.assert_bits(Size::from_bytes(16)),\n-                _ => return None,\n-            })),\n-            _ => None,\n-        }\n-    } else {\n-        None\n+pub(super) fn enum_value_nbits(value: EnumValue) -> u64 {\n+    match value {\n+        EnumValue::Unsigned(x) => 128 - x.leading_zeros(),\n+        EnumValue::Signed(x) if x < 0 => 128 - (-(x + 1)).leading_zeros() + 1,\n+        EnumValue::Signed(x) => 128 - x.leading_zeros(),\n     }\n+    .into()\n }\n \n pub(super) fn enum_ty_to_nbits(adt: &AdtDef, tcx: TyCtxt<'_>) -> u64 {"}, {"sha": "7d74b69906d9dcf78bee4ddc95ab3e3fab0798b7", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ecdd0804be7c5643eafa4e1960f5e0176903b3/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=88ecdd0804be7c5643eafa4e1960f5e0176903b3", "patch": "@@ -10,12 +10,14 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy,\n+    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n+use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use std::iter;\n@@ -515,3 +517,58 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         }\n     }\n }\n+\n+#[derive(Clone, Copy)]\n+pub enum EnumValue {\n+    Unsigned(u128),\n+    Signed(i128),\n+}\n+impl core::ops::Add<u32> for EnumValue {\n+    type Output = Self;\n+    fn add(self, n: u32) -> Self::Output {\n+        match self {\n+            Self::Unsigned(x) => Self::Unsigned(x + u128::from(n)),\n+            Self::Signed(x) => Self::Signed(x + i128::from(n)),\n+        }\n+    }\n+}\n+\n+/// Attempts to read the given constant as though it were an an enum value.\n+#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n+pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n+    if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n+        match tcx.type_of(id).kind() {\n+            ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n+                1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n+                2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n+                4 => i128::from(value.assert_bits(Size::from_bytes(4)) as u32 as i32),\n+                8 => i128::from(value.assert_bits(Size::from_bytes(8)) as u64 as i64),\n+                16 => value.assert_bits(Size::from_bytes(16)) as i128,\n+                _ => return None,\n+            })),\n+            ty::Uint(_) => Some(EnumValue::Unsigned(match value.size().bytes() {\n+                1 => value.assert_bits(Size::from_bytes(1)),\n+                2 => value.assert_bits(Size::from_bytes(2)),\n+                4 => value.assert_bits(Size::from_bytes(4)),\n+                8 => value.assert_bits(Size::from_bytes(8)),\n+                16 => value.assert_bits(Size::from_bytes(16)),\n+                _ => return None,\n+            })),\n+            _ => None,\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Gets the value of the given variant.\n+pub fn get_discriminant_value(tcx: TyCtxt<'_>, adt: &'_ AdtDef, i: VariantIdx) -> EnumValue {\n+    let variant = &adt.variants[i];\n+    match variant.discr {\n+        VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap(),\n+        VariantDiscr::Relative(x) => match adt.variants[(i.as_usize() - x as usize).into()].discr {\n+            VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap() + x,\n+            VariantDiscr::Relative(_) => EnumValue::Unsigned(x.into()),\n+        },\n+    }\n+}"}]}