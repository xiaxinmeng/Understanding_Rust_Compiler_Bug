{"sha": "7a7ae993ce694bf75a11632b394916e055a4d8ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2FlOTkzY2U2OTRiZjc1YTExNjMyYjM5NDkxNmUwNTVhNGQ4ZWM=", "commit": {"author": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-06-30T20:05:05Z"}, "committer": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-07-02T19:36:02Z"}, "message": "collections::bitv: correct use of Vec<T>::grow\n\nThe argument passed to Vec::grow is the number of elements to grow\nthe vector by, not the target number of elements. The old `Bitv`\ncode did the wrong thing, allocating more memory than it needed to.", "tree": {"sha": "d98130c7d7839d812ba7e9af82d9ef3048e598a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98130c7d7839d812ba7e9af82d9ef3048e598a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7ae993ce694bf75a11632b394916e055a4d8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ae993ce694bf75a11632b394916e055a4d8ec", "html_url": "https://github.com/rust-lang/rust/commit/7a7ae993ce694bf75a11632b394916e055a4d8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ae993ce694bf75a11632b394916e055a4d8ec/comments", "author": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a698b81ebfe02a614f9b41e68c6b604597a81229", "url": "https://api.github.com/repos/rust-lang/rust/commits/a698b81ebfe02a614f9b41e68c6b604597a81229", "html_url": "https://github.com/rust-lang/rust/commit/a698b81ebfe02a614f9b41e68c6b604597a81229"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "18e3390dff52504a2da7bafb189a2f249df4bd12", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ae993ce694bf75a11632b394916e055a4d8ec/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ae993ce694bf75a11632b394916e055a4d8ec/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=7a7ae993ce694bf75a11632b394916e055a4d8ec", "patch": "@@ -515,9 +515,10 @@ impl BitvSet {\n     /// Grows the vector to be able to store bits with indices `[0, size - 1]`\n     fn grow(&mut self, size: uint) {\n         let &BitvSet(ref mut bitv) = self;\n+        let old_size = bitv.storage.len();\n         let size = (size + uint::BITS - 1) / uint::BITS;\n-        if bitv.storage.len() < size {\n-            bitv.storage.grow(size, &0);\n+        if old_size < size {\n+            bitv.storage.grow(size - old_size, &0);\n         }\n     }\n \n@@ -1253,14 +1254,22 @@ mod tests {\n \n     #[test]\n     fn test_bitv_set_basic() {\n+        // calculate nbits with uint::BITS granularity\n+        fn calc_nbits(bits: uint) -> uint {\n+            uint::BITS * ((bits + uint::BITS - 1) / uint::BITS)\n+        }\n+\n         let mut b = BitvSet::new();\n+        assert_eq!(b.capacity(), calc_nbits(0));\n         assert!(b.insert(3));\n+        assert_eq!(b.capacity(), calc_nbits(3));\n         assert!(!b.insert(3));\n         assert!(b.contains(&3));\n         assert!(b.insert(4));\n         assert!(!b.insert(4));\n         assert!(b.contains(&3));\n         assert!(b.insert(400));\n+        assert_eq!(b.capacity(), calc_nbits(400));\n         assert!(!b.insert(400));\n         assert!(b.contains(&400));\n         assert_eq!(b.len(), 3);"}]}