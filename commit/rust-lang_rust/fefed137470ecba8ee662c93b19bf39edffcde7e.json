{"sha": "fefed137470ecba8ee662c93b19bf39edffcde7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZmVkMTM3NDcwZWNiYThlZTY2MmM5M2IxOWJmMzllZGZmY2RlN2U=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-17T11:37:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-03T09:30:14Z"}, "message": "Support test header directives in run-make mode too.", "tree": {"sha": "2e1e5edc28d76086d93c158aa6d53aaf22703fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1e5edc28d76086d93c158aa6d53aaf22703fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fefed137470ecba8ee662c93b19bf39edffcde7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fefed137470ecba8ee662c93b19bf39edffcde7e", "html_url": "https://github.com/rust-lang/rust/commit/fefed137470ecba8ee662c93b19bf39edffcde7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fefed137470ecba8ee662c93b19bf39edffcde7e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d58ab3dbb8bb1d86cf74435655e088083b2c80b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d58ab3dbb8bb1d86cf74435655e088083b2c80b6", "html_url": "https://github.com/rust-lang/rust/commit/d58ab3dbb8bb1d86cf74435655e088083b2c80b6"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "32a0b75b33dd38339cbf7958079d162943fb6799", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fefed137470ecba8ee662c93b19bf39edffcde7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefed137470ecba8ee662c93b19bf39edffcde7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=fefed137470ecba8ee662c93b19bf39edffcde7e", "patch": "@@ -419,6 +419,15 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }\n+\n+    let comment = if testfile.to_string_lossy().ends_with(\".rs\") {\n+        \"//\"\n+    } else {\n+        \"#\"\n+    };\n+\n+    let comment_with_brace = comment.to_string() + \"[\";\n+\n     let rdr = BufReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {\n         // Assume that any directives will be found before the first\n@@ -428,10 +437,11 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;\n-        } else if ln.starts_with(\"//[\") {\n+        } else if ln.starts_with(&comment_with_brace) {\n             // A comment like `//[foo]` is specific to revision `foo`\n             if let Some(close_brace) = ln.find(']') {\n-                let lncfg = &ln[3..close_brace];\n+                let open_brace = ln.find('[').unwrap();\n+                let lncfg = &ln[open_brace + 1 .. close_brace];\n                 let matches = match cfg {\n                     Some(s) => s == &lncfg[..],\n                     None => false,\n@@ -440,11 +450,11 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n                     it(ln[(close_brace + 1) ..].trim_left());\n                 }\n             } else {\n-                panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\",\n-                       ln)\n+                panic!(\"malformed condition directive: expected `{}foo]`, found `{}`\",\n+                        comment_with_brace, ln)\n             }\n-        } else if ln.starts_with(\"//\") {\n-            it(ln[2..].trim_left());\n+        } else if ln.starts_with(comment) {\n+            it(ln[comment.len() ..].trim_left());\n         }\n     }\n     return;"}, {"sha": "d65a8d6a7dbf5d098edb1e2dc8e82ccb632da872", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fefed137470ecba8ee662c93b19bf39edffcde7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefed137470ecba8ee662c93b19bf39edffcde7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=fefed137470ecba8ee662c93b19bf39edffcde7e", "patch": "@@ -610,7 +610,12 @@ pub fn is_test(file_name: &OsString) -> bool {\n }\n \n pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn {\n-    let early_props = EarlyProps::from_file(config, &testpaths.file);\n+\n+    let early_props = if config.mode == Mode::RunMake {\n+        EarlyProps::from_file(config, &testpaths.file.join(\"Makefile\"))\n+    } else {\n+        EarlyProps::from_file(config, &testpaths.file)\n+    };\n \n     // The `should-fail` annotation doesn't apply to pretty tests,\n     // since we run the pretty printer across all tests by default."}]}