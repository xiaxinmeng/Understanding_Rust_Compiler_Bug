{"sha": "a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "node_id": "C_kwDOAAsO6NoAKGE1ZjBhOWI3ZWQ4MDg0ZWJjMjcxOTJmZTc3ZWNiMGU3NGYxZjVmNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T13:26:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T13:26:38Z"}, "message": "Auto merge of #2435 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "9959e1f30583d0e4d846ee7abb02f6e2715f9aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9959e1f30583d0e4d846ee7abb02f6e2715f9aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "html_url": "https://github.com/rust-lang/rust/commit/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdb720329d7674a878a8252fe4b79ef93d6ffec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdb720329d7674a878a8252fe4b79ef93d6ffec", "html_url": "https://github.com/rust-lang/rust/commit/8fdb720329d7674a878a8252fe4b79ef93d6ffec"}, {"sha": "3ee56989c7f3d355b32f194fca03c0e47a3bd445", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee56989c7f3d355b32f194fca03c0e47a3bd445", "html_url": "https://github.com/rust-lang/rust/commit/3ee56989c7f3d355b32f194fca03c0e47a3bd445"}], "stats": {"total": 79, "additions": 27, "deletions": 52}, "files": [{"sha": "c710735735c7cf7247646fc06c100b04d29333a3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1 +1 @@\n-41419e70366962c9a878bfe673ef4df38db6f7f1\n+35a061724802377a21fc6dac1ebcbb9b8d1f558a"}, {"sha": "c00344b6de23a200d721a64f6753fec8f713302a", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,11 +1,11 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n //@compile-flags: -Zmir-opt-level=0\n-//@error-pattern: memory access failed: null pointer is a dangling pointer\n \n #[allow(deref_nullptr)]\n fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated.\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+    //~^ERROR: memory access failed: null pointer is a dangling pointer\n }"}, {"sha": "17ac04a706fff2ffdf117cfb23bfffa718139175", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,19 +1,13 @@\n error: Undefined Behavior: memory access failed: null pointer is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/null_pointer_write_zst.rs:LL:CC\n    |\n-LL |         copy_nonoverlapping(&src as *const T, dst, 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n+LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::write::<[u8; 0]>` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n-  --> $DIR/null_pointer_write_zst.rs:LL:CC\n-   |\n-LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "30900a85d003f53d3e35404da071613b5383bfd1", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,10 +1,8 @@\n // We want to control preemption here.\n //@compile-flags: -Zmiri-preemption-rate=0\n //@ignore-target-windows: Concurrency on Windows is not supported yet.\n-#![feature(core_intrinsics)]\n \n-use std::intrinsics;\n-use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -23,8 +21,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            //Equivalent to: (&*c.0).load(Ordering::SeqCst)\n-            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n+            (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "e7a219e1235269a6dc170b8c267c47a364becb1b", "filename": "tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n-LL |             intrinsics::atomic_load_seqcst(c.0 as *mut usize)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+LL |             (&*c.0).load(Ordering::SeqCst)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "1a79dde0b08ac3a54efa26a33d441069aaed01e2", "filename": "tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,10 +1,8 @@\n // We want to control preemption here.\n //@compile-flags: -Zmiri-preemption-rate=0\n //@ignore-target-windows: Concurrency on Windows is not supported yet.\n-#![feature(core_intrinsics)]\n \n-use std::intrinsics::atomic_store;\n-use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -23,8 +21,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            //Equivalent to: (&*c.0).store(32, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 32); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n+            (&*c.0).store(32, Ordering::SeqCst); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "e9c6005f27e6bd3178553464257cd0e588bc14cc", "filename": "tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n-LL |             atomic_store(c.0 as *mut usize, 32);\n+LL |             (&*c.0).store(32, Ordering::SeqCst);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior"}, {"sha": "04015c2d14205c6715aae577ea49a5faa52e8058", "filename": "tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,10 +1,8 @@\n // We want to control preemption here.\n //@compile-flags: -Zmiri-preemption-rate=0\n //@ignore-target-windows: Concurrency on Windows is not supported yet.\n-#![feature(core_intrinsics)]\n \n-use std::intrinsics::atomic_store;\n-use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -23,8 +21,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            //Equivalent to: (&*c.0).store(64, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 64); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n+            (&*c.0).store(64, Ordering::SeqCst); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "5ecc4ca04026320337e88348b1c71e91edfce256", "filename": "tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n    |\n-LL |             atomic_store(c.0 as *mut usize, 64);\n+LL |             (&*c.0).store(64, Ordering::SeqCst);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior"}, {"sha": "08bc096d6c366d1861931e4964768864936cd50c", "filename": "tests/fail/intrinsics/write_bytes_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,9 +1,9 @@\n-//@error-pattern: overflow computing total size of `write_bytes`\n use std::mem;\n \n fn main() {\n     let mut y = 0;\n     unsafe {\n         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+        //~^ ERROR: overflow computing total size of `write_bytes`\n     }\n }"}, {"sha": "47610b06230121c8cd37d1adf8add1095ede8eda", "filename": "tests/fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,19 +1,13 @@\n error: Undefined Behavior: overflow computing total size of `write_bytes`\n-  --> RUSTLIB/core/src/intrinsics.rs:LL:CC\n+  --> $DIR/write_bytes_overflow.rs:LL:CC\n    |\n-LL |         write_bytes(dst, val, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `write_bytes`\n+LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `write_bytes`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::intrinsics::write_bytes::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n-  --> $DIR/write_bytes_overflow.rs:LL:CC\n-   |\n-LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1c0b1c2be8fdaaac7c1df61db8cd478cdc12accf", "filename": "tests/fail/weak_memory/racing_mixed_size_read.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -2,10 +2,8 @@\n //@compile-flags: -Zmiri-preemption-rate=0\n //@ignore-target-windows: Concurrency on Windows is not supported yet.\n \n-#![feature(core_intrinsics)]\n-\n-use std::sync::atomic::AtomicU32;\n use std::sync::atomic::Ordering::*;\n+use std::sync::atomic::{AtomicU16, AtomicU32};\n use std::thread::spawn;\n \n fn static_atomic(val: u32) -> &'static AtomicU32 {\n@@ -31,8 +29,8 @@ pub fn main() {\n         let x_ptr = x as *const AtomicU32 as *const u32;\n         let x_split = split_u32_ptr(x_ptr);\n         unsafe {\n-            let hi = &(*x_split)[0] as *const u16;\n-            std::intrinsics::atomic_load_relaxed(hi); //~ ERROR: imperfectly overlapping\n+            let hi = x_split as *const u16 as *const AtomicU16;\n+            (*hi).load(Relaxed); //~ ERROR: imperfectly overlapping\n         }\n     });\n "}, {"sha": "8dbf9e6948bd7975a7a0ca4a153e3b7a305abe9d", "filename": "tests/fail/weak_memory/racing_mixed_size_read.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.stderr?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -1,8 +1,8 @@\n error: unsupported operation: racy imperfectly overlapping atomic access is not possible in the C++20 memory model, and not supported by Miri's weak memory emulation\n   --> $DIR/racing_mixed_size_read.rs:LL:CC\n    |\n-LL |             std::intrinsics::atomic_load_relaxed(hi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ racy imperfectly overlapping atomic access is not possible in the C++20 memory model, and not supported by Miri's weak memory emulation\n+LL |             (*hi).load(Relaxed);\n+   |             ^^^^^^^^^^^^^^^^^^^ racy imperfectly overlapping atomic access is not possible in the C++20 memory model, and not supported by Miri's weak memory emulation\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: backtrace:"}, {"sha": "d98fba26ffa80df251a754bab2a2da99241b26bf", "filename": "tests/pass/weak_memory/extra_cpp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -5,7 +5,6 @@\n // but doable in safe (at least sound) Rust.\n \n #![feature(atomic_from_mut)]\n-#![feature(core_intrinsics)]\n \n use std::sync::atomic::Ordering::*;\n use std::sync::atomic::{AtomicU16, AtomicU32};"}, {"sha": "f5c6021a4a85b5b5668e2b3f950333c177320b86", "filename": "tests/pass/weak_memory/extra_cpp_unsafe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs?ref=a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "patch": "@@ -7,7 +7,6 @@\n // memory model in the future.\n \n #![feature(atomic_from_mut)]\n-#![feature(core_intrinsics)]\n \n use std::sync::atomic::AtomicU32;\n use std::sync::atomic::Ordering::*;\n@@ -27,7 +26,7 @@ fn racing_mixed_atomicity_read() {\n \n     let j2 = spawn(move || {\n         let x_ptr = x as *const AtomicU32 as *const u32;\n-        unsafe { std::intrinsics::atomic_load_relaxed(x_ptr) }\n+        unsafe { x_ptr.read() }\n     });\n \n     let r1 = j1.join().unwrap();"}]}