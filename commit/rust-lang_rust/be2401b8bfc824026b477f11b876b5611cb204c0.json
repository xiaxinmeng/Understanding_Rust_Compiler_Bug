{"sha": "be2401b8bfc824026b477f11b876b5611cb204c0", "node_id": "C_kwDOAAsO6NoAKGJlMjQwMWI4YmZjODI0MDI2YjQ3N2YxMWI4NzZiNTYxMWNiMjA0YzA", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-09-27T01:43:35Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-10-23T21:18:09Z"}, "message": "Split phase change from `MirPass`", "tree": {"sha": "9f45d3c5b4364c1b000336a2b7c1852bd69a1d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f45d3c5b4364c1b000336a2b7c1852bd69a1d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2401b8bfc824026b477f11b876b5611cb204c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2401b8bfc824026b477f11b876b5611cb204c0", "html_url": "https://github.com/rust-lang/rust/commit/be2401b8bfc824026b477f11b876b5611cb204c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2401b8bfc824026b477f11b876b5611cb204c0/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca6777c014813e3bdb98d155562fc3d111d86dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca6777c014813e3bdb98d155562fc3d111d86dd", "html_url": "https://github.com/rust-lang/rust/commit/1ca6777c014813e3bdb98d155562fc3d111d86dd"}], "stats": {"total": 177, "additions": 101, "deletions": 76}, "files": [{"sha": "f3ae16da43bd1062ba2ae3b303b53a886321f13a", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=be2401b8bfc824026b477f11b876b5611cb204c0", "patch": "@@ -41,10 +41,6 @@ pub struct PromoteTemps<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n-    fn phase_change(&self) -> Option<MirPhase> {\n-        Some(MirPhase::Analysis(AnalysisPhase::Initial))\n-    }\n-\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         //"}, {"sha": "3b80af184be47e2dc21bb5b80fab37e6ca899119", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=be2401b8bfc824026b477f11b876b5611cb204c0", "patch": "@@ -116,11 +116,6 @@ pub trait MirPass<'tcx> {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n \n-    /// If this pass causes the MIR to enter a new phase, return that phase.\n-    fn phase_change(&self) -> Option<MirPhase> {\n-        None\n-    }\n-\n     fn is_mir_dump_enabled(&self) -> bool {\n         true\n     }\n@@ -145,6 +140,35 @@ impl MirPhase {\n     }\n }\n \n+impl Display for MirPhase {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            MirPhase::Built => write!(f, \"built\"),\n+            MirPhase::Analysis(p) => write!(f, \"analysis-{}\", p),\n+            MirPhase::Runtime(p) => write!(f, \"runtime-{}\", p),\n+        }\n+    }\n+}\n+\n+impl Display for AnalysisPhase {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            AnalysisPhase::Initial => write!(f, \"initial\"),\n+            AnalysisPhase::PostCleanup => write!(f, \"post_cleanup\"),\n+        }\n+    }\n+}\n+\n+impl Display for RuntimePhase {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            RuntimePhase::Initial => write!(f, \"initial\"),\n+            RuntimePhase::PostCleanup => write!(f, \"post_cleanup\"),\n+            RuntimePhase::Optimized => write!(f, \"optimized\"),\n+        }\n+    }\n+}\n+\n /// Where a specific `mir::Body` comes from.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable, TypeVisitable)]\n@@ -207,6 +231,9 @@ pub struct Body<'tcx> {\n     /// us to see the difference and forego optimization on the inlined promoted items.\n     pub phase: MirPhase,\n \n+    /// How many passses we have executed since starting the current phase. Used for debug output.\n+    pub pass_count: usize,\n+\n     pub source: MirSource<'tcx>,\n \n     /// A list of source scopes; these are referenced by statements\n@@ -292,6 +319,7 @@ impl<'tcx> Body<'tcx> {\n \n         let mut body = Body {\n             phase: MirPhase::Built,\n+            pass_count: 1,\n             source,\n             basic_blocks: BasicBlocks::new(basic_blocks),\n             source_scopes,\n@@ -325,6 +353,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n         let mut body = Body {\n             phase: MirPhase::Built,\n+            pass_count: 1,\n             source: MirSource::item(CRATE_DEF_ID.to_def_id()),\n             basic_blocks: BasicBlocks::new(basic_blocks),\n             source_scopes: IndexVec::new(),"}, {"sha": "5be2232547bd60e8eeb787845ba1529feb141b2e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=be2401b8bfc824026b477f11b876b5611cb204c0", "patch": "@@ -71,7 +71,6 @@ mod inline;\n mod instcombine;\n mod lower_intrinsics;\n mod lower_slice_len;\n-mod marker;\n mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n@@ -303,6 +302,7 @@ fn mir_const<'tcx>(\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck, // Just a lint\n         ],\n+        None,\n     );\n     tcx.alloc_steal_mir(body)\n }\n@@ -342,6 +342,7 @@ fn mir_promoted<'tcx>(\n             &simplify::SimplifyCfg::new(\"promote-consts\"),\n             &coverage::InstrumentCoverage,\n         ],\n+        Some(MirPhase::Analysis(AnalysisPhase::Initial)),\n     );\n \n     let promoted = promote_pass.promoted_fragments.into_inner();\n@@ -409,10 +410,8 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n             pm::run_passes(\n                 tcx,\n                 &mut body,\n-                &[\n-                    &const_prop::ConstProp,\n-                    &marker::PhaseChange(MirPhase::Runtime(RuntimePhase::Optimized)),\n-                ],\n+                &[&const_prop::ConstProp],\n+                Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n             );\n         }\n     }\n@@ -474,6 +473,7 @@ fn run_analysis_to_runtime_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>\n                 &remove_uninit_drops::RemoveUninitDrops,\n                 &simplify::SimplifyCfg::new(\"remove-false-edges\"),\n             ],\n+            None,\n         );\n         check_consts::post_drop_elaboration::check_live_drops(tcx, &body); // FIXME: make this a MIR lint\n     }\n@@ -498,10 +498,9 @@ fn run_analysis_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &cleanup_post_borrowck::CleanupNonCodegenStatements,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n         &deref_separator::Derefer,\n-        &marker::PhaseChange(MirPhase::Analysis(AnalysisPhase::PostCleanup)),\n     ];\n \n-    pm::run_passes(tcx, body, passes);\n+    pm::run_passes(tcx, body, passes, Some(MirPhase::Analysis(AnalysisPhase::PostCleanup)));\n }\n \n /// Returns the sequence of passes that lowers analysis to runtime MIR.\n@@ -526,9 +525,8 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // CTFE support for aggregates.\n         &deaggregator::Deaggregator,\n         &Lint(const_prop_lint::ConstProp),\n-        &marker::PhaseChange(MirPhase::Runtime(RuntimePhase::Initial)),\n     ];\n-    pm::run_passes_no_validate(tcx, body, passes);\n+    pm::run_passes_no_validate(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::Initial)));\n }\n \n /// Returns the sequence of passes that do the initial cleanup of runtime MIR.\n@@ -537,10 +535,9 @@ fn run_runtime_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &elaborate_box_derefs::ElaborateBoxDerefs,\n         &lower_intrinsics::LowerIntrinsics,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n-        &marker::PhaseChange(MirPhase::Runtime(RuntimePhase::PostCleanup)),\n     ];\n \n-    pm::run_passes(tcx, body, passes);\n+    pm::run_passes(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::PostCleanup)));\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -591,10 +588,10 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &deduplicate_blocks::DeduplicateBlocks,\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n             &add_call_guards::CriticalCallEdges,\n-            &marker::PhaseChange(MirPhase::Runtime(RuntimePhase::Optimized)),\n             // Dump the end result for testing and debugging purposes.\n             &dump_mir::Marker(\"PreCodegen\"),\n         ],\n+        Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n     );\n }\n "}, {"sha": "06819fc1d37d483da63f99204788b29035ce45ba", "filename": "compiler/rustc_mir_transform/src/marker.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca6777c014813e3bdb98d155562fc3d111d86dd/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs?ref=1ca6777c014813e3bdb98d155562fc3d111d86dd", "patch": "@@ -1,20 +0,0 @@\n-use std::borrow::Cow;\n-\n-use crate::MirPass;\n-use rustc_middle::mir::{Body, MirPhase};\n-use rustc_middle::ty::TyCtxt;\n-\n-/// Changes the MIR phase without changing the MIR itself.\n-pub struct PhaseChange(pub MirPhase);\n-\n-impl<'tcx> MirPass<'tcx> for PhaseChange {\n-    fn phase_change(&self) -> Option<MirPhase> {\n-        Some(self.0)\n-    }\n-\n-    fn name(&self) -> Cow<'_, str> {\n-        Cow::from(format!(\"PhaseChange-{:?}\", self.0))\n-    }\n-\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n-}"}, {"sha": "230c6a7cb4b00e438ca32ca439fea4b52930bc0d", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 56, "deletions": 33, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=be2401b8bfc824026b477f11b876b5611cb204c0", "patch": "@@ -66,10 +66,6 @@ where\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         self.1.run_pass(tcx, body)\n     }\n-\n-    fn phase_change(&self) -> Option<MirPhase> {\n-        self.1.phase_change()\n-    }\n }\n \n /// Run the sequence of passes without validating the MIR after each pass. The MIR is still\n@@ -78,31 +74,35 @@ pub fn run_passes_no_validate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     passes: &[&dyn MirPass<'tcx>],\n+    phase_change: Option<MirPhase>,\n ) {\n-    run_passes_inner(tcx, body, passes, false);\n+    run_passes_inner(tcx, body, passes, phase_change, false);\n }\n \n-pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n-    run_passes_inner(tcx, body, passes, true);\n+/// The optional `phase_change` is applied after executing all the passes, if present\n+pub fn run_passes<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    passes: &[&dyn MirPass<'tcx>],\n+    phase_change: Option<MirPhase>,\n+) {\n+    run_passes_inner(tcx, body, passes, phase_change, true);\n }\n \n fn run_passes_inner<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     passes: &[&dyn MirPass<'tcx>],\n+    phase_change: Option<MirPhase>,\n     validate_each: bool,\n ) {\n-    let start_phase = body.phase;\n-    let mut cnt = 0;\n-\n     let validate = validate_each & tcx.sess.opts.unstable_opts.validate_mir;\n     let overridden_passes = &tcx.sess.opts.unstable_opts.mir_enable_passes;\n     trace!(?overridden_passes);\n \n     for pass in passes {\n         let name = pass.name();\n \n-        // Gather information about what we should be doing for this pass\n         let overridden =\n             overridden_passes.iter().rev().find(|(s, _)| s == &*name).map(|(_name, polarity)| {\n                 trace!(\n@@ -112,55 +112,78 @@ fn run_passes_inner<'tcx>(\n                 );\n                 *polarity\n             });\n-        let is_enabled = overridden.unwrap_or_else(|| pass.is_enabled(&tcx.sess));\n-        let new_phase = pass.phase_change();\n-        let dump_enabled = (is_enabled && pass.is_mir_dump_enabled()) || new_phase.is_some();\n-        let validate = (validate && is_enabled)\n-            || new_phase == Some(MirPhase::Runtime(RuntimePhase::Optimized));\n+        if !overridden.unwrap_or_else(|| pass.is_enabled(&tcx.sess)) {\n+            continue;\n+        }\n+\n+        let dump_enabled = pass.is_mir_dump_enabled();\n \n         if dump_enabled {\n-            dump_mir(tcx, body, start_phase, &name, cnt, false);\n-        }\n-        if is_enabled {\n-            pass.run_pass(tcx, body);\n+            dump_mir_for_pass(tcx, body, &name, false);\n         }\n-        if dump_enabled {\n-            dump_mir(tcx, body, start_phase, &name, cnt, true);\n-            cnt += 1;\n+        if validate {\n+            validate_body(tcx, body, format!(\"before pass {}\", name));\n         }\n-        if let Some(new_phase) = pass.phase_change() {\n-            if body.phase >= new_phase {\n-                panic!(\"Invalid MIR phase transition from {:?} to {:?}\", body.phase, new_phase);\n-            }\n \n-            body.phase = new_phase;\n+        pass.run_pass(tcx, body);\n+\n+        if dump_enabled {\n+            dump_mir_for_pass(tcx, body, &name, true);\n         }\n         if validate {\n             validate_body(tcx, body, format!(\"after pass {}\", name));\n         }\n+\n+        body.pass_count += 1;\n+    }\n+\n+    if let Some(new_phase) = phase_change {\n+        if body.phase >= new_phase {\n+            panic!(\"Invalid MIR phase transition from {:?} to {:?}\", body.phase, new_phase);\n+        }\n+\n+        body.phase = new_phase;\n+\n+        dump_mir_for_phase_change(tcx, body);\n+        if validate || new_phase == MirPhase::Runtime(RuntimePhase::Optimized) {\n+            validate_body(tcx, body, format!(\"after phase change to {}\", new_phase));\n+        }\n+\n+        body.pass_count = 1;\n     }\n }\n \n pub fn validate_body<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n     validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);\n }\n \n-pub fn dump_mir<'tcx>(\n+pub fn dump_mir_for_pass<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n-    phase: MirPhase,\n     pass_name: &str,\n-    cnt: usize,\n     is_after: bool,\n ) {\n-    let phase_index = phase.phase_index();\n+    let phase_index = body.phase.phase_index();\n \n     mir::dump_mir(\n         tcx,\n-        Some(&format_args!(\"{:03}-{:03}\", phase_index, cnt)),\n+        Some(&format_args!(\"{:03}-{:03}\", phase_index, body.pass_count)),\n         pass_name,\n         if is_after { &\"after\" } else { &\"before\" },\n         body,\n         |_, _| Ok(()),\n     );\n }\n+\n+pub fn dump_mir_for_phase_change<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n+    let phase_index = body.phase.phase_index();\n+\n+    mir::dump_mir(\n+        tcx,\n+        Some(&format_args!(\"{:03}-000\", phase_index)),\n+        &format!(\"{}\", body.phase),\n+        &\"after\",\n+        body,\n+        |_, _| Ok(()),\n+    )\n+}"}, {"sha": "c19380ef89cc5c5e02f0c028d42846553b7848c2", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2401b8bfc824026b477f11b876b5611cb204c0/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=be2401b8bfc824026b477f11b876b5611cb204c0", "patch": "@@ -17,7 +17,7 @@ use std::iter;\n \n use crate::util::expand_aggregate;\n use crate::{\n-    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, deref_separator, marker,\n+    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, deref_separator,\n     pass_manager as pm, remove_noop_landing_pads, simplify,\n };\n use rustc_middle::mir::patch::MirPatch;\n@@ -97,8 +97,8 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             &simplify::SimplifyCfg::new(\"make_shim\"),\n             &add_call_guards::CriticalCallEdges,\n             &abort_unwinding_calls::AbortUnwindingCalls,\n-            &marker::PhaseChange(MirPhase::Runtime(RuntimePhase::Optimized)),\n         ],\n+        Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n     );\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);"}]}