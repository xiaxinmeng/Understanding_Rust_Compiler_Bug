{"sha": "6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYmM4YmJlYjAwNWY1ZDNmMmIwMGQxYWUxZjE4MDQxMTZlM2E4ZjU=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-16T16:30:08Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-16T16:30:08Z"}, "message": "feat: improve dot completions with scoring\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "9b0ea7f19402ee17602e7b38d934ae19301e2dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0ea7f19402ee17602e7b38d934ae19301e2dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "html_url": "https://github.com/rust-lang/rust/commit/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06076f95a7ca764696b055eb754e163f884eefaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/06076f95a7ca764696b055eb754e163f884eefaa", "html_url": "https://github.com/rust-lang/rust/commit/06076f95a7ca764696b055eb754e163f884eefaa"}], "stats": {"total": 216, "additions": 103, "deletions": 113}, "files": [{"sha": "38c8aed8d549a6b66a573577fc1e4bf0a12877f9", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -29,7 +29,7 @@ use crate::{\n };\n \n pub use crate::completion::completion_item::{\n-    CompletionItem, CompletionItemKind, InsertTextFormat,\n+    CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n };\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -94,8 +94,8 @@ pub(crate) fn completions(\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n \n-    // Reorder completion items if there is a sort_option\n-    acc.sort(&ctx);\n+    // Compute score for completion items\n+    acc.compute_score(&ctx);\n \n     Some(acc)\n }"}, {"sha": "174b39964cd28e8b0fb0679cb3bafe177fd6e969", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 43, "deletions": 71, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -6,12 +6,11 @@ use hir::{\n     Type,\n };\n \n-use crate::completion::completion_item::CompletionKind;\n use crate::{\n     call_info::call_info,\n     completion::{\n         completion_context::CompletionContext,\n-        completion_item::{Completions, SortOption},\n+        completion_item::{CompletionKind, Completions, ScoreOption},\n     },\n     // CallInfo,\n     CompletionItem,\n@@ -49,40 +48,12 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Ty\n     for receiver in receiver.autoderef(ctx.db) {\n         let fields = receiver.fields(ctx.db);\n \n-        // If we use this implementation we can delete call_info in the CompletionContext\n         if let Some(record_field) = &ctx.record_field_syntax {\n-            acc.with_sort_option(SortOption::RecordField(record_field.clone()));\n+            acc.with_score_option(ScoreOption::RecordField(record_field.clone()));\n         } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n-            acc.with_sort_option(SortOption::CallFn(call_info));\n+            acc.with_score_option(ScoreOption::CallFn(call_info));\n         }\n \n-        // // For Call Fn\n-        // if let Some(call_info) = &ctx.call_info {\n-        //     if let Some(active_parameter_type) = call_info.active_parameter_type() {\n-        //         let active_parameter_name = call_info.active_parameter_name().unwrap();\n-        //         fields.sort_by(|a, b| {\n-        //             // For the same type\n-        //             if active_parameter_type == a.1.display(ctx.db).to_string() {\n-        //                 // If same type + same name then go top position\n-        //                 if active_parameter_name == a.0.name(ctx.db).to_string() {\n-        //                     Ordering::Less\n-        //                 } else {\n-        //                     if active_parameter_type == b.1.display(ctx.db).to_string() {\n-        //                         Ordering::Equal\n-        //                     } else {\n-        //                         Ordering::Less\n-        //                     }\n-        //                 }\n-        //             } else {\n-        //                 Ordering::Greater\n-        //             }\n-        //         });\n-        //     }\n-        // }\n-\n-        // For Lit struct fields\n-        // ---\n-\n         for (field, ty) in fields {\n             if ctx.scope().module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the\n@@ -116,20 +87,13 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{\n-        test_utils::{do_completion, do_completion_without_sort},\n-        CompletionItem, CompletionKind,\n-    };\n+    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n \n     fn do_ref_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)\n     }\n \n-    fn do_ref_completion_without_sort(code: &str) -> Vec<CompletionItem> {\n-        do_completion_without_sort(code, CompletionKind::Reference)\n-    }\n-\n     #[test]\n     fn test_struct_field_completion() {\n         assert_debug_snapshot!(\n@@ -159,7 +123,7 @@ mod tests {\n     #[test]\n     fn test_struct_field_completion_in_func_call() {\n         assert_debug_snapshot!(\n-        do_ref_completion_without_sort(\n+        do_ref_completion(\n                 r\"\n                 struct A { another_field: i64, the_field: u32, my_string: String }\n                 fn test(my_param: u32) -> u32 { my_param }\n@@ -170,14 +134,6 @@ mod tests {\n         ),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [201; 201),\n-                delete: [201; 201),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-            },\n             CompletionItem {\n                 label: \"another_field\",\n                 source_range: [201; 201),\n@@ -194,6 +150,15 @@ mod tests {\n                 kind: Field,\n                 detail: \"{unknown}\",\n             },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [201; 201),\n+                delete: [201; 201),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeMatch,\n+            },\n         ]\n         \"###\n         );\n@@ -202,7 +167,7 @@ mod tests {\n     #[test]\n     fn test_struct_field_completion_in_func_call_with_type_and_name() {\n         assert_debug_snapshot!(\n-        do_ref_completion_without_sort(\n+        do_ref_completion(\n                 r\"\n                 struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n                 fn test(the_field: u32) -> u32 { the_field }\n@@ -214,12 +179,12 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"the_field\",\n+                label: \"another_field\",\n                 source_range: [208; 208),\n                 delete: [208; 208),\n-                insert: \"the_field\",\n+                insert: \"another_field\",\n                 kind: Field,\n-                detail: \"u32\",\n+                detail: \"i64\",\n             },\n             CompletionItem {\n                 label: \"another_good_type\",\n@@ -228,14 +193,16 @@ mod tests {\n                 insert: \"another_good_type\",\n                 kind: Field,\n                 detail: \"u32\",\n+                score: TypeMatch,\n             },\n             CompletionItem {\n-                label: \"another_field\",\n+                label: \"the_field\",\n                 source_range: [208; 208),\n                 delete: [208; 208),\n-                insert: \"another_field\",\n+                insert: \"the_field\",\n                 kind: Field,\n-                detail: \"i64\",\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n             },\n         ]\n         \"###\n@@ -245,7 +212,7 @@ mod tests {\n     #[test]\n     fn test_struct_field_completion_in_record_lit() {\n         assert_debug_snapshot!(\n-        do_ref_completion_without_sort(\n+        do_ref_completion(\n                 r\"\n                 struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n                 struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n@@ -259,12 +226,12 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"the_field\",\n+                label: \"another_field\",\n                 source_range: [270; 270),\n                 delete: [270; 270),\n-                insert: \"the_field\",\n+                insert: \"another_field\",\n                 kind: Field,\n-                detail: \"u32\",\n+                detail: \"i64\",\n             },\n             CompletionItem {\n                 label: \"another_good_type\",\n@@ -273,14 +240,16 @@ mod tests {\n                 insert: \"another_good_type\",\n                 kind: Field,\n                 detail: \"u32\",\n+                score: TypeMatch,\n             },\n             CompletionItem {\n-                label: \"another_field\",\n+                label: \"the_field\",\n                 source_range: [270; 270),\n                 delete: [270; 270),\n-                insert: \"another_field\",\n+                insert: \"the_field\",\n                 kind: Field,\n-                detail: \"i64\",\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n             },\n         ]\n         \"###\n@@ -290,7 +259,7 @@ mod tests {\n     #[test]\n     fn test_struct_field_completion_in_record_lit_and_fn_call() {\n         assert_debug_snapshot!(\n-        do_ref_completion_without_sort(\n+        do_ref_completion(\n                 r\"\n                 struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n                 struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n@@ -311,6 +280,7 @@ mod tests {\n                 insert: \"another_field\",\n                 kind: Field,\n                 detail: \"i64\",\n+                score: TypeMatch,\n             },\n             CompletionItem {\n                 label: \"another_good_type\",\n@@ -336,7 +306,7 @@ mod tests {\n     #[test]\n     fn test_struct_field_completion_in_fn_call_and_record_lit() {\n         assert_debug_snapshot!(\n-        do_ref_completion_without_sort(\n+        do_ref_completion(\n                 r\"\n                 struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n                 struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n@@ -351,12 +321,12 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"the_field\",\n+                label: \"another_field\",\n                 source_range: [328; 328),\n                 delete: [328; 328),\n-                insert: \"the_field\",\n+                insert: \"another_field\",\n                 kind: Field,\n-                detail: \"u32\",\n+                detail: \"i64\",\n             },\n             CompletionItem {\n                 label: \"another_good_type\",\n@@ -365,14 +335,16 @@ mod tests {\n                 insert: \"another_good_type\",\n                 kind: Field,\n                 detail: \"u32\",\n+                score: TypeMatch,\n             },\n             CompletionItem {\n-                label: \"another_field\",\n+                label: \"the_field\",\n                 source_range: [328; 328),\n                 delete: [328; 328),\n-                insert: \"another_field\",\n+                insert: \"the_field\",\n                 kind: Field,\n-                detail: \"i64\",\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n             },\n         ]\n         \"###"}, {"sha": "84d51bafee97da9109c9cbc9556b635f776147e8", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -53,6 +53,9 @@ pub struct CompletionItem {\n     /// If completing a function call, ask the editor to show parameter popup\n     /// after completion.\n     trigger_call_info: bool,\n+\n+    /// Score is usefull to pre select or display in better order completion items\n+    score: Option<CompletionScore>,\n }\n \n // We use custom debug for CompletionItem to make `insta`'s diffs more readable.\n@@ -82,6 +85,9 @@ impl fmt::Debug for CompletionItem {\n         if self.deprecated {\n             s.field(\"deprecated\", &true);\n         }\n+        if let Some(score) = &self.score {\n+            s.field(\"score\", score);\n+        }\n         if self.trigger_call_info {\n             s.field(\"trigger_call_info\", &true);\n         }\n@@ -149,6 +155,7 @@ impl CompletionItem {\n             text_edit: None,\n             deprecated: None,\n             trigger_call_info: None,\n+            score: None,\n         }\n     }\n     /// What user sees in pop-up in the UI.\n@@ -188,6 +195,10 @@ impl CompletionItem {\n         self.deprecated\n     }\n \n+    pub fn score(&self) -> Option<CompletionScore> {\n+        self.score.clone()\n+    }\n+\n     pub fn trigger_call_info(&self) -> bool {\n         self.trigger_call_info\n     }\n@@ -208,6 +219,7 @@ pub(crate) struct Builder {\n     text_edit: Option<TextEdit>,\n     deprecated: Option<bool>,\n     trigger_call_info: Option<bool>,\n+    score: Option<CompletionScore>,\n }\n \n impl Builder {\n@@ -237,6 +249,7 @@ impl Builder {\n             completion_kind: self.completion_kind,\n             deprecated: self.deprecated.unwrap_or(false),\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n+            score: self.score,\n         }\n     }\n     pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n@@ -287,6 +300,10 @@ impl Builder {\n         self.deprecated = Some(deprecated);\n         self\n     }\n+    pub(crate) fn set_score(mut self, score: CompletionScore) -> Builder {\n+        self.score = Some(score);\n+        self\n+    }\n     pub(crate) fn trigger_call_info(mut self) -> Builder {\n         self.trigger_call_info = Some(true);\n         self\n@@ -300,16 +317,22 @@ impl<'a> Into<CompletionItem> for Builder {\n }\n \n #[derive(Debug)]\n-pub(crate) enum SortOption {\n+pub(crate) enum ScoreOption {\n     CallFn(CallInfo),\n     RecordField(RecordField),\n }\n \n+#[derive(Debug, Clone)]\n+pub enum CompletionScore {\n+    TypeMatch,\n+    TypeAndNameMatch,\n+}\n+\n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n pub(crate) struct Completions {\n     buf: Vec<CompletionItem>,\n-    sort_option: Option<SortOption>,\n+    score_option: Option<ScoreOption>,\n }\n \n impl Completions {\n@@ -324,17 +347,17 @@ impl Completions {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n \n-    pub(crate) fn with_sort_option(&mut self, sort_option: SortOption) {\n-        self.sort_option = Some(sort_option);\n+    pub(crate) fn with_score_option(&mut self, score_option: ScoreOption) {\n+        self.score_option = Some(score_option);\n     }\n \n-    pub(crate) fn sort(&mut self, ctx: &CompletionContext) {\n-        if self.sort_option.is_none() {\n+    pub(crate) fn compute_score(&mut self, ctx: &CompletionContext) {\n+        if self.score_option.is_none() {\n             return;\n         }\n \n-        let (active_name, active_type) = match self.sort_option.as_ref().unwrap() {\n-            SortOption::CallFn(call_info) => {\n+        let (active_name, active_type) = match self.score_option.as_ref().unwrap() {\n+            ScoreOption::CallFn(call_info) => {\n                 if call_info.active_parameter_type().is_none()\n                     || call_info.active_parameter_name().is_none()\n                 {\n@@ -345,7 +368,7 @@ impl Completions {\n                     call_info.active_parameter_type().unwrap(),\n                 )\n             }\n-            SortOption::RecordField(record_field) => {\n+            ScoreOption::RecordField(record_field) => {\n                 if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n                     (\n                         struct_field.name(ctx.db).to_string(),\n@@ -357,26 +380,19 @@ impl Completions {\n             }\n         };\n \n-        self.buf.sort_by(|a, b| {\n+        for completion_item in &mut self.buf {\n             // For the same type\n-            if let Some(a_parameter_type) = &a.detail {\n+            if let Some(a_parameter_type) = &completion_item.detail {\n                 if &active_type == a_parameter_type {\n                     // If same type + same name then go top position\n-                    if active_name != a.label {\n-                        if let Some(b_parameter_type) = &b.detail {\n-                            if &active_type == b_parameter_type {\n-                                return Ordering::Equal;\n-                            }\n-                        }\n+                    if active_name == completion_item.label {\n+                        completion_item.score = Some(CompletionScore::TypeAndNameMatch);\n+                    } else {\n+                        completion_item.score = Some(CompletionScore::TypeMatch);\n                     }\n-                    Ordering::Less\n-                } else {\n-                    Ordering::Greater\n                 }\n-            } else {\n-                Ordering::Greater\n             }\n-        });\n+        }\n     }\n }\n "}, {"sha": "55f75b15aa1f8dd38d85c60267804ca01384a9b4", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -367,7 +367,7 @@ mod tests {\n         ra_fixture: &str,\n         options: CompletionConfig,\n     ) -> Vec<CompletionItem> {\n-        do_completion_with_options(ra_fixture, CompletionKind::Reference, &options, true)\n+        do_completion_with_options(ra_fixture, CompletionKind::Reference, &options)\n     }\n \n     #[test]"}, {"sha": "eb90b5279c463e5589fdbf36e96f8e5971169291", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -7,18 +7,13 @@ use crate::{\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_options(code, kind, &CompletionConfig::default(), true)\n-}\n-\n-pub(crate) fn do_completion_without_sort(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_options(code, kind, &CompletionConfig::default(), false)\n+    do_completion_with_options(code, kind, &CompletionConfig::default())\n }\n \n pub(crate) fn do_completion_with_options(\n     code: &str,\n     kind: CompletionKind,\n     options: &CompletionConfig,\n-    sort_by_key: bool,\n ) -> Vec<CompletionItem> {\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n@@ -29,8 +24,6 @@ pub(crate) fn do_completion_with_options(\n     let completion_items: Vec<CompletionItem> = completions.into();\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();\n-    if sort_by_key {\n-        kind_completions.sort_by_key(|c| c.label().to_owned());\n-    }\n+    kind_completions.sort_by_key(|c| c.label().to_owned());\n     kind_completions\n }"}, {"sha": "ddaa30a1606b2643aa017e0e96f8b5c48a214e47", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -67,7 +67,9 @@ use crate::display::ToNav;\n pub use crate::{\n     assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n-    completion::{CompletionConfig, CompletionItem, CompletionItemKind, InsertTextFormat},\n+    completion::{\n+        CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n+    },\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,"}, {"sha": "f47d931fdac829cb0777b5e2f8ce74c418644d21", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "patch": "@@ -9,10 +9,10 @@ use lsp_types::{\n     TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, WorkspaceEdit,\n };\n use ra_ide::{\n-    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n-    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag,\n-    InlayHint, InlayKind, InsertTextFormat, LineCol, LineIndex, NavigationTarget, RangeInfo,\n-    ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n+    translate_offset_with_edit, CompletionItem, CompletionItemKind, CompletionScore, FileId,\n+    FilePosition, FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier,\n+    HighlightTag, InlayHint, InlayKind, InsertTextFormat, LineCol, LineIndex, NavigationTarget,\n+    RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -147,7 +147,6 @@ impl ConvWith<(&LineIndex, LineEndings, usize)> for CompletionItem {\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n             text_edit: Some(text_edit),\n-            sort_text: Some(format!(\"{:02}\", ctx.2)),\n             additional_text_edits: Some(additional_text_edits),\n             documentation: self.documentation().map(|it| it.conv()),\n             deprecated: Some(self.deprecated()),\n@@ -164,6 +163,14 @@ impl ConvWith<(&LineIndex, LineEndings, usize)> for CompletionItem {\n             ..Default::default()\n         };\n \n+        if let Some(score) = self.score() {\n+            match score {\n+                CompletionScore::TypeAndNameMatch => res.preselect = Some(true),\n+                CompletionScore::TypeMatch => {}\n+            }\n+            res.sort_text = Some(format!(\"{:02}\", ctx.2));\n+        }\n+\n         if self.deprecated() {\n             res.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n         }"}]}