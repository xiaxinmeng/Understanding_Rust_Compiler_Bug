{"sha": "d8190afbcb9b15eb8e04d3860a5bd018568a3980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MTkwYWZiY2I5YjE1ZWI4ZTA0ZDM4NjBhNWJkMDE4NTY4YTM5ODA=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-27T23:25:40Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-27T23:31:03Z"}, "message": "Fix alignment of stores to scalar pair\n\nThe alignment for the second element of a scalar pair is not the\nsame as for the first element. Make sure it is computed correctly\nbased on the element size.", "tree": {"sha": "f26626950c6a75fc397c42275a343d5d797e66d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26626950c6a75fc397c42275a343d5d797e66d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8190afbcb9b15eb8e04d3860a5bd018568a3980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8190afbcb9b15eb8e04d3860a5bd018568a3980", "html_url": "https://github.com/rust-lang/rust/commit/d8190afbcb9b15eb8e04d3860a5bd018568a3980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8190afbcb9b15eb8e04d3860a5bd018568a3980/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb", "html_url": "https://github.com/rust-lang/rust/commit/6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "fefbc14e4973c481b9ee29c7a955e173b7b3d7a0", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8190afbcb9b15eb8e04d3860a5bd018568a3980/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8190afbcb9b15eb8e04d3860a5bd018568a3980/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=d8190afbcb9b15eb8e04d3860a5bd018568a3980", "patch": "@@ -331,11 +331,21 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandValue<V> {\n                 bx.store_with_flags(val, dest.llval, dest.align, flags);\n             }\n             OperandValue::Pair(a, b) => {\n-                for (i, &x) in [a, b].iter().enumerate() {\n-                    let llptr = bx.struct_gep(dest.llval, i as u64);\n-                    let val = base::from_immediate(bx, x);\n-                    bx.store_with_flags(val, llptr, dest.align, flags);\n-                }\n+                let (a_scalar, b_scalar) = match dest.layout.abi {\n+                    layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n+                    _ => bug!(\"store_with_flags: invalid ScalarPair layout: {:#?}\", dest.layout)\n+                };\n+                let b_offset = a_scalar.value.size(bx).align_to(b_scalar.value.align(bx).abi);\n+\n+                let llptr = bx.struct_gep(dest.llval, 0);\n+                let val = base::from_immediate(bx, a);\n+                let align = dest.align;\n+                bx.store_with_flags(val, llptr, align, flags);\n+\n+                let llptr = bx.struct_gep(dest.llval, 1);\n+                let val = base::from_immediate(bx, b);\n+                let align = dest.align.restrict_for_offset(b_offset);\n+                bx.store_with_flags(val, llptr, align, flags);\n             }\n         }\n     }"}, {"sha": "2c33f558931ed12ef0ee75d33e1730d8245f285d", "filename": "src/test/codegen/issue-56267.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8190afbcb9b15eb8e04d3860a5bd018568a3980/src%2Ftest%2Fcodegen%2Fissue-56267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8190afbcb9b15eb8e04d3860a5bd018568a3980/src%2Ftest%2Fcodegen%2Fissue-56267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56267.rs?ref=d8190afbcb9b15eb8e04d3860a5bd018568a3980", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type=\"rlib\"]\n+\n+#[allow(dead_code)]\n+pub struct Foo<T> {\n+    foo: u64,\n+    bar: T,\n+}\n+\n+// The store writing to bar.1 should have alignment 4. Not checking\n+// other stores here, as the alignment will be platform-dependent.\n+\n+// CHECK: store i32 [[TMP1:%.+]], i32* [[TMP2:%.+]], align 4\n+#[no_mangle]\n+pub fn test(x: (i32, i32)) -> Foo<(i32, i32)> {\n+    Foo { foo: 0, bar: x }\n+}"}]}