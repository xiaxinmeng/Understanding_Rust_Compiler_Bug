{"sha": "337a97d3741bb78319cde745119cf96941b78325", "node_id": "C_kwDOAAsO6NoAKDMzN2E5N2QzNzQxYmI3ODMxOWNkZTc0NTExOWNmOTY5NDFiNzgzMjU", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-12-23T18:54:14Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-01-11T22:35:08Z"}, "message": "add checks for the signature of the  lang item", "tree": {"sha": "e1a564cb922042c09fd3e3e062523cda035f85e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a564cb922042c09fd3e3e062523cda035f85e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/337a97d3741bb78319cde745119cf96941b78325", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmO/OZ8ACgkQ+boUO5X/\nbYKrahAAl4qDmzxYWx3UBaGGHgTEKgISSqlLwcdzLxS/fPlca2J2KxlmyFIc1CNq\n7eSaXjmwwXvR8DfkWdOjjiOY1bLgMtVhkNzTocYPRjd7O8SAp+QRQu7XONaFGlEI\nbjVujyTq5Qp+jry0b7xdjcNZtNow2ClM0/GYG7ljGU+/DaKL0z64yirv+20zkBWM\nOuCr2UIn86UgBaDlMIZrRuBQmEmLbKvJHsUmSz/2b1n/hppdWYDdcH8NOAWxIi6b\nNpA2ZedZ4BHCztIhEI+Jh2f+eywpGzCZ78qJBtbSk89yiBOS/GKCVCpoThJSMUHh\newcJKgbBnvF49NJzPaIVcNSJe4Y9yRJ4W5FY+Io8y7xkSyZ7w+jLB0oFNVhIFsHR\nDZQRyc8tXKFEOpjrnbTXjVZfXNhgcq980JFlswAriX3x1hX62ymULxbxuPr3O2ZM\ndRtxy7JVq3hviMFwFl0bHCkfd5xUGwhuNnsxPDaxI4Yc90Qeg7P41ZUvzwEOAMK3\n1c0rncgEDHdG4eFWNp0Su6adtaJWzsxoyeHiKwcG2VP9ftpWW/QUFzSx8Kmb2XKU\njvhekPQphL5bEA+nGor3Fu3BmopU9Ould9Zgj2aERk/+gnCC4lcnmbDbNOeTdFwZ\n1wPlcDvHlaqQcztXOtiNHGEJiXNcc+Zs7Ealr6NOczcjQ5sMIi8=\n=q+wl\n-----END PGP SIGNATURE-----", "payload": "tree e1a564cb922042c09fd3e3e062523cda035f85e2\nparent ef4046e4f3932991971cdb64915172899532aece\nauthor asquared31415 <34665709+asquared31415@users.noreply.github.com> 1671821654 -0500\ncommitter David Tolnay <dtolnay@gmail.com> 1673476508 -0800\n\nadd checks for the signature of the  lang item\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/337a97d3741bb78319cde745119cf96941b78325", "html_url": "https://github.com/rust-lang/rust/commit/337a97d3741bb78319cde745119cf96941b78325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/337a97d3741bb78319cde745119cf96941b78325/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 408, "additions": 405, "deletions": 3}, "files": [{"sha": "ca72b7faa9289b64f3f069e6adb0c07265347b8c", "filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -46,3 +46,14 @@ hir_typeck_add_missing_parentheses_in_range = you must surround the range in par\n \n hir_typeck_op_trait_generic_params =\n     `{$method_name}` must not have any generic parameters\n+\n+hir_typeck_lang_start_incorrect_number_params = incorrect number of parameters for the `start` lang item\n+hir_typeck_lang_start_incorrect_number_params_note_expected_count = the `start` lang item should have four parameters, but found {$found_param_count}\n+\n+hir_typeck_lang_start_expected_sig_note = the `start` lang item should have the signature `fn(fn() -> T, isize, *const *const u8, u8) -> isize`\n+\n+hir_typeck_lang_start_incorrect_param = parameter {$param_num} of the `start` lang item is incorrect\n+    .suggestion = change the type from `{$found_ty}` to `{$expected_ty}`\n+\n+hir_typeck_lang_start_incorrect_ret_ty = the return type of the `start` lang item is incorrect\n+    .suggestion = change the type from `{$found_ty}` to `{$expected_ty}`"}, {"sha": "57feefbcab6c8cc25b246e313fbf2fbd39f2dced", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 132, "deletions": 1, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -1,4 +1,7 @@\n use crate::coercion::CoerceMany;\n+use crate::errors::{\n+    LangStartIncorrectNumberArgs, LangStartIncorrectParam, LangStartIncorrectRetTy,\n+};\n use crate::gather_locals::GatherLocalsVisitor;\n use crate::FnCtxt;\n use crate::GeneratorTypes;\n@@ -9,8 +12,9 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir_analysis::check::fn_maybe_err;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::RegionVariableOrigin;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Binder, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefId;\n+use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use std::cell::RefCell;\n \n@@ -168,6 +172,10 @@ pub(super) fn check_fn<'a, 'tcx>(\n         check_panic_info_fn(tcx, panic_impl_did.expect_local(), fn_sig, decl, declared_ret_ty);\n     }\n \n+    if let Some(lang_start_defid) = tcx.lang_items().start_fn() && lang_start_defid == hir.local_def_id(fn_id).to_def_id() {\n+        check_lang_start_fn(tcx, fn_sig, decl, fn_def_id);\n+    }\n+\n     gen_ty\n }\n \n@@ -223,3 +231,126 @@ fn check_panic_info_fn(\n         tcx.sess.span_err(span, \"should have no const parameters\");\n     }\n }\n+\n+fn check_lang_start_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_sig: ty::FnSig<'tcx>,\n+    decl: &'tcx hir::FnDecl<'tcx>,\n+    def_id: LocalDefId,\n+) {\n+    let inputs = fn_sig.inputs();\n+\n+    let arg_count = inputs.len();\n+    if arg_count != 4 {\n+        tcx.sess.emit_err(LangStartIncorrectNumberArgs {\n+            params_span: tcx.def_span(def_id),\n+            found_param_count: arg_count,\n+        });\n+    }\n+\n+    // only check args if they should exist by checking the count\n+    // note: this does not handle args being shifted or their order swapped very nicely\n+    // but it's a lang item, users shouldn't frequently encounter this\n+\n+    // first arg is `main: fn() -> T`\n+    if let Some(&main_arg) = inputs.get(0) {\n+        // make a Ty for the generic on the fn for diagnostics\n+        // FIXME: make the lang item generic checks check for the right generic *kind*\n+        // for example `start`'s generic should be a type parameter\n+        let generics = tcx.generics_of(def_id);\n+        let fn_generic = generics.param_at(0, tcx);\n+        let generic_tykind =\n+            ty::Param(ty::ParamTy { index: fn_generic.index, name: fn_generic.name });\n+        let generic_ty = tcx.mk_ty(generic_tykind);\n+        let expected_fn_sig =\n+            tcx.mk_fn_sig([].iter(), &generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n+        let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));\n+\n+        // we emit the same error to suggest changing the arg no matter what's wrong with the arg\n+        let emit_main_fn_arg_err = || {\n+            tcx.sess.emit_err(LangStartIncorrectParam {\n+                param_span: decl.inputs[0].span,\n+                param_num: 1,\n+                expected_ty: expected_ty,\n+                found_ty: main_arg,\n+            });\n+        };\n+\n+        if let ty::FnPtr(main_fn_sig) = main_arg.kind() {\n+            let main_fn_inputs = main_fn_sig.inputs();\n+            if main_fn_inputs.iter().count() != 0 {\n+                emit_main_fn_arg_err();\n+            }\n+\n+            let output = main_fn_sig.output();\n+            output.map_bound(|ret_ty| {\n+                // if the output ty is a generic, it's probably the right one\n+                if !matches!(ret_ty.kind(), ty::Param(_)) {\n+                    emit_main_fn_arg_err();\n+                }\n+            });\n+        } else {\n+            emit_main_fn_arg_err();\n+        }\n+    }\n+\n+    // second arg is isize\n+    if let Some(&argc_arg) = inputs.get(1) {\n+        if argc_arg != tcx.types.isize {\n+            tcx.sess.emit_err(LangStartIncorrectParam {\n+                param_span: decl.inputs[1].span,\n+                param_num: 2,\n+                expected_ty: tcx.types.isize,\n+                found_ty: argc_arg,\n+            });\n+        }\n+    }\n+\n+    // third arg is `*const *const u8`\n+    if let Some(&argv_arg) = inputs.get(2) {\n+        let mut argv_is_okay = false;\n+        if let ty::RawPtr(outer_ptr) = argv_arg.kind() {\n+            if outer_ptr.mutbl.is_not() {\n+                if let ty::RawPtr(inner_ptr) = outer_ptr.ty.kind() {\n+                    if inner_ptr.mutbl.is_not() && inner_ptr.ty == tcx.types.u8 {\n+                        argv_is_okay = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if !argv_is_okay {\n+            let inner_ptr_ty =\n+                tcx.mk_ptr(ty::TypeAndMut { mutbl: hir::Mutability::Not, ty: tcx.types.u8 });\n+            let expected_ty =\n+                tcx.mk_ptr(ty::TypeAndMut { mutbl: hir::Mutability::Not, ty: inner_ptr_ty });\n+            tcx.sess.emit_err(LangStartIncorrectParam {\n+                param_span: decl.inputs[2].span,\n+                param_num: 3,\n+                expected_ty,\n+                found_ty: argv_arg,\n+            });\n+        }\n+    }\n+\n+    // fourth arg is `sigpipe: u8`\n+    if let Some(&sigpipe_arg) = inputs.get(3) {\n+        if sigpipe_arg != tcx.types.u8 {\n+            tcx.sess.emit_err(LangStartIncorrectParam {\n+                param_span: decl.inputs[3].span,\n+                param_num: 4,\n+                expected_ty: tcx.types.u8,\n+                found_ty: sigpipe_arg,\n+            });\n+        }\n+    }\n+\n+    // output type is isize\n+    if fn_sig.output() != tcx.types.isize {\n+        tcx.sess.emit_err(LangStartIncorrectRetTy {\n+            ret_span: decl.output.span(),\n+            expected_ty: tcx.types.isize,\n+            found_ty: fn_sig.output(),\n+        });\n+    }\n+}"}, {"sha": "5b4fd5e4a5283833b8eaa051df969a021e165161", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -172,3 +172,36 @@ impl AddToDiagnostic for TypeMismatchFruTypo {\n         );\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_lang_start_incorrect_number_params)]\n+#[note(hir_typeck_lang_start_incorrect_number_params_note_expected_count)]\n+#[note(hir_typeck_lang_start_expected_sig_note)]\n+pub struct LangStartIncorrectNumberArgs {\n+    #[primary_span]\n+    pub params_span: Span,\n+    pub found_param_count: usize,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_lang_start_incorrect_param)]\n+pub struct LangStartIncorrectParam<'tcx> {\n+    #[primary_span]\n+    #[suggestion(style = \"short\", code = \"{expected_ty}\", applicability = \"machine-applicable\")]\n+    pub param_span: Span,\n+\n+    pub param_num: usize,\n+    pub expected_ty: Ty<'tcx>,\n+    pub found_ty: Ty<'tcx>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_lang_start_incorrect_ret_ty)]\n+pub struct LangStartIncorrectRetTy<'tcx> {\n+    #[primary_span]\n+    #[suggestion(style = \"short\", code = \"{expected_ty}\", applicability = \"machine-applicable\")]\n+    pub ret_span: Span,\n+\n+    pub expected_ty: Ty<'tcx>,\n+    pub found_ty: Ty<'tcx>,\n+}"}, {"sha": "1af77d1a25b2d09df7873e047e2dccffd92216d9", "filename": "src/tools/clippy/tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -15,7 +15,7 @@ pub trait Copy {}\n pub unsafe trait Freeze {}\n \n #[lang = \"start\"]\n-fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n     0\n }\n "}, {"sha": "22939e87912c1a32f96cb1133cb8ef8e284855e4", "filename": "tests/run-make-fulldeps/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -11,7 +11,7 @@ trait Sized {}\n auto trait Freeze {}\n \n #[lang = \"start\"]\n-fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n     0\n }\n "}, {"sha": "65c99a93c75112a5fb9a9caeabc09720dc8c4d25", "filename": "tests/ui/lang-items/start_lang_item_args.argc.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argc.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: parameter 2 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:75:38\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: i8, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                                      ^^ help: change the type from `i8` to `isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0947a9b3e933afa8682e61c2919a9b09159c0d6", "filename": "tests/ui/lang-items/start_lang_item_args.argv.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: parameter 3 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:89:52\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: u8, _sigpipe: u8) -> isize {\n+   |                                                    ^^ help: change the type from `u8` to `*const *const u8`\n+\n+error: aborting due to previous error\n+"}, {"sha": "08efd5088f99b424228d4c5a84d7912853ebb76b", "filename": "tests/ui/lang-items/start_lang_item_args.argv_inner_ptr.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv_inner_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv_inner_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.argv_inner_ptr.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,13 @@\n+error: parameter 3 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:82:52\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const usize, _sigpipe: u8) -> isize {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change the type from `*const *const usize` to `*const *const u8`\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                                                    ~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "c20a744661d495146c77dd9cd089814f10b8cd1f", "filename": "tests/ui/lang-items/start_lang_item_args.main_args.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_args.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,13 @@\n+error: parameter 1 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:61:20\n+   |\n+LL | fn start<T>(_main: fn(i32) -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                    ^^^^^^^^^^^^\n+   |\n+help: change the type from `fn(i32) -> T` to `fn() -> T`\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                    ~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "8f967252f49bec92057907697b12002b30cd5603", "filename": "tests/ui/lang-items/start_lang_item_args.main_ret.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ret.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,13 @@\n+error: parameter 1 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:68:20\n+   |\n+LL | fn start<T>(_main: fn() -> u16, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                    ^^^^^^^^^^^\n+   |\n+help: change the type from `fn() -> u16` to `fn() -> T`\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                    ~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "deb37b868ea89c59c6b9b36e4dcf8f26b9080148", "filename": "tests/ui/lang-items/start_lang_item_args.main_ty.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.main_ty.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: parameter 1 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:54:20\n+   |\n+LL | fn start<T>(_main: u64, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+   |                    ^^^ help: change the type from `u64` to `fn() -> T`\n+\n+error: aborting due to previous error\n+"}, {"sha": "004c2a67f62f19fea0294a477b10c0d7305d1c95", "filename": "tests/ui/lang-items/start_lang_item_args.missing_all_args.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_all_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_all_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_all_args.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,11 @@\n+error: incorrect number of parameters for the `start` lang item\n+  --> $DIR/start_lang_item_args.rs:15:1\n+   |\n+LL | fn start<T>() -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `start` lang item should have four parameters, but found 0\n+   = note: the `start` lang item should have the signature `fn(fn() -> T, isize, *const *const u8, u8) -> isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d8285b59000aa5f59835af7aedf3f3e38f4034b", "filename": "tests/ui/lang-items/start_lang_item_args.missing_ret.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_ret.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: the return type of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:29:84\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) {}\n+   |                                                                                    ^ help: change the type from `()` to `isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e545a750f24a9320cf739757d2396035f15f46f8", "filename": "tests/ui/lang-items/start_lang_item_args.missing_sigpipe_arg.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_sigpipe_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_sigpipe_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.missing_sigpipe_arg.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,11 @@\n+error: incorrect number of parameters for the `start` lang item\n+  --> $DIR/start_lang_item_args.rs:22:1\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `start` lang item should have four parameters, but found 3\n+   = note: the `start` lang item should have the signature `fn(fn() -> T, isize, *const *const u8, u8) -> isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0dbfba39cb60526be5eebe8b4607de7d2079cd3d", "filename": "tests/ui/lang-items/start_lang_item_args.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.rs?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,101 @@\n+// check-fail\n+// revisions: missing_all_args missing_sigpipe_arg missing_ret start_ret too_many_args\n+// revisions: main_ty main_args main_ret argc argv_inner_ptr argv sigpipe\n+\n+#![feature(lang_items, no_core)]\n+#![no_core]\n+\n+#[lang = \"copy\"]\n+pub trait Copy {}\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[cfg(missing_all_args)]\n+#[lang = \"start\"]\n+fn start<T>() -> isize {\n+    //[missing_all_args]~^ ERROR incorrect number of parameters\n+    100\n+}\n+\n+#[cfg(missing_sigpipe_arg)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+    //[missing_sigpipe_arg]~^ ERROR incorrect number of parameters\n+    100\n+}\n+\n+#[cfg(missing_ret)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) {}\n+//[missing_ret]~^ ERROR the return type of the `start` lang item is incorrect\n+\n+#[cfg(start_ret)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> u8 {\n+    //[start_ret]~^ ERROR the return type of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(too_many_args)]\n+#[lang = \"start\"]\n+fn start<T>(\n+    //[too_many_args]~^ ERROR incorrect number of parameters\n+    _main: fn() -> T,\n+    _argc: isize,\n+    _argv: *const *const u8,\n+    _sigpipe: u8,\n+    _extra_arg: (),\n+) -> isize {\n+    100\n+}\n+\n+#[cfg(main_ty)]\n+#[lang = \"start\"]\n+fn start<T>(_main: u64, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+    //[main_ty]~^ ERROR parameter 1 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(main_args)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn(i32) -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+    //[main_args]~^ ERROR parameter 1 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(main_ret)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> u16, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+    //[main_ret]~^ ERROR parameter 1 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(argc)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: i8, _argv: *const *const u8, _sigpipe: u8) -> isize {\n+    //[argc]~^ ERROR parameter 2 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(argv_inner_ptr)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const usize, _sigpipe: u8) -> isize {\n+    //[argv_inner_ptr]~^ ERROR parameter 3 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(argv)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: u8, _sigpipe: u8) -> isize {\n+    //[argv]~^ ERROR parameter 3 of the `start` lang item is incorrect\n+    100\n+}\n+\n+#[cfg(sigpipe)]\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: i64) -> isize {\n+    //[sigpipe]~^ ERROR parameter 4 of the `start` lang item is incorrect\n+    100\n+}\n+\n+fn main() {}"}, {"sha": "b20ae3128013311e170e2672232e057af3acbd3b", "filename": "tests/ui/lang-items/start_lang_item_args.sigpipe.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.sigpipe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.sigpipe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.sigpipe.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: parameter 4 of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:96:80\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: i64) -> isize {\n+   |                                                                                ^^^ help: change the type from `i64` to `u8`\n+\n+error: aborting due to previous error\n+"}, {"sha": "935d5f3c8b4261e979b76212f4c3ff963fd223f3", "filename": "tests/ui/lang-items/start_lang_item_args.start_ret.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.start_ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.start_ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.start_ret.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,8 @@\n+error: the return type of the `start` lang item is incorrect\n+  --> $DIR/start_lang_item_args.rs:34:87\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> u8 {\n+   |                                                                                       ^^ help: change the type from `u8` to `isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "30a7ed18a3d23f1a13df37ec5b34ffc6b1f85402", "filename": "tests/ui/lang-items/start_lang_item_args.too_many_args.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a97d3741bb78319cde745119cf96941b78325/tests%2Fui%2Flang-items%2Fstart_lang_item_args.too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fstart_lang_item_args.too_many_args.stderr?ref=337a97d3741bb78319cde745119cf96941b78325", "patch": "@@ -0,0 +1,17 @@\n+error: incorrect number of parameters for the `start` lang item\n+  --> $DIR/start_lang_item_args.rs:41:1\n+   |\n+LL | / fn start<T>(\n+LL | |\n+LL | |     _main: fn() -> T,\n+LL | |     _argc: isize,\n+...  |\n+LL | |     _extra_arg: (),\n+LL | | ) -> isize {\n+   | |__________^\n+   |\n+   = note: the `start` lang item should have four parameters, but found 5\n+   = note: the `start` lang item should have the signature `fn(fn() -> T, isize, *const *const u8, u8) -> isize`\n+\n+error: aborting due to previous error\n+"}]}