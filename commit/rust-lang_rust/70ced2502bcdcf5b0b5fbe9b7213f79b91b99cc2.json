{"sha": "70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "node_id": "C_kwDOAAsO6NoAKDcwY2VkMjUwMmJjZGNmNWIwYjVmYmU5YjcyMTNmNzliOTFiOTljYzI", "commit": {"author": {"name": "Shivani Bhardwaj", "email": "shivanib134@gmail.com", "date": "2022-01-27T08:17:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-27T08:43:51Z"}, "message": "Add test for help output with -W", "tree": {"sha": "a201b5d496266c39b6cdb3e182e0ef66863cf035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a201b5d496266c39b6cdb3e182e0ef66863cf035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "html_url": "https://github.com/rust-lang/rust/commit/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/comments", "author": {"login": "inashivb", "id": 57791542, "node_id": "MDQ6VXNlcjU3NzkxNTQy", "avatar_url": "https://avatars.githubusercontent.com/u/57791542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inashivb", "html_url": "https://github.com/inashivb", "followers_url": "https://api.github.com/users/inashivb/followers", "following_url": "https://api.github.com/users/inashivb/following{/other_user}", "gists_url": "https://api.github.com/users/inashivb/gists{/gist_id}", "starred_url": "https://api.github.com/users/inashivb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inashivb/subscriptions", "organizations_url": "https://api.github.com/users/inashivb/orgs", "repos_url": "https://api.github.com/users/inashivb/repos", "events_url": "https://api.github.com/users/inashivb/events{/privacy}", "received_events_url": "https://api.github.com/users/inashivb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed62a09de1c8f6d83a17bddc3358b51ff3e88584", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed62a09de1c8f6d83a17bddc3358b51ff3e88584", "html_url": "https://github.com/rust-lang/rust/commit/ed62a09de1c8f6d83a17bddc3358b51ff3e88584"}], "stats": {"total": 195, "additions": 195, "deletions": 0}, "files": [{"sha": "8ababbf5b4ebd76659800c295e8aef5aab9030db", "filename": "src/test/run-make/issue-88756-opt-help/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile?ref=70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "patch": "@@ -0,0 +1,4 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTDOC) -W help 2>&1 | diff - output-default.stdout"}, {"sha": "9b742753f25b6b86300baaad0b3f3b97b463072c", "filename": "src/test/run-make/issue-88756-opt-help/README.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md?ref=70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "patch": "@@ -0,0 +1 @@\n+This is a test to verify that `rustdoc` behaves the same as rustc and prints out help output for its options like -W (#88756)."}, {"sha": "89153a7645107dc3c17ca79b5e153e8b13430464", "filename": "src/test/run-make/issue-88756-opt-help/output-default.stdout", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout?ref=70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "patch": "@@ -0,0 +1,189 @@\n+    -W                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -W                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -W               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -W                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -W                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -W                                ast-json=val -- print the AST as JSON and halt (default: no)\n+    -W                       ast-json-noexpand=val -- print the pre-expansion AST as JSON and halt (default: no)\n+    -W                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -W                                borrowck=val -- select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\n+    -W                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -W                           cf-protection=val -- instrument control-flow architecture protection\n+    -W               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -W                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -W                         codegen-backend=val -- the backend to use\n+    -W                             combine-cgu=val -- combine CGUs into a single one\n+    -W                              crate-attr=val -- inject the given attribute in the crate\n+    -W                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -W                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -W                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -W                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -W                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -W                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -W                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -W                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -W                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -W                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -W                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -W                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -W                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -W            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -W                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -W                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -W                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -W                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -W              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -W                                    fuel=val -- set the optimization fuel quota for a crate\n+    -W                       function-sections=val -- whether each function should go in its own section\n+    -W                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -W                                  gcc-ld=val -- implementation of ld used by cc\n+    -W                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -W                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -W                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -W                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -W                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -W                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -W                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -W              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -W                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -W                              inline-mir=val -- enable MIR inlining (default: no)\n+    -W                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -W               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -W                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -W                             input-stats=val -- gather statistics about the input (default: no)\n+    -W                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -W                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -W                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -W                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -W                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -W                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -W                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -W                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -W                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -W                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -W                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -W                              meta-stats=val -- gather metadata statistics (default: no)\n+    -W                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -W                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -W                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -W                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -W                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -W                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -W                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -W                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -W                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -W                              no-codegen=val -- run all passes except codegen; no output\n+    -W              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -W                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -W                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -W                                 no-link=val -- compile without linking\n+    -W                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -W                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -W                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -W                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -W                                     oom=val -- panic strategy for out-of-memory handling\n+    -W                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -W                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -W                           panic-in-drop=val -- panic strategy for panics in drops\n+    -W                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -W                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -W pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -W                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -W                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -W                            polymorphize=val -- perform polymorphization analysis\n+    -W                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -W                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -W           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -W                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -W                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -W                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -W                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -W                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -W                                 profile=val -- insert profiling code (default: no)\n+    -W                        profile-closures=val -- profile size of closures\n+    -W                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -W                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -W                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -W                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -W                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -W                             layout-seed=val -- seed layout randomization\n+    -W                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -W                             relro-level=val -- choose which RELRO level to use\n+    -W                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -W         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -W                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -W                               sanitizer=val -- use a sanitizer\n+    -W          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -W                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -W                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -W                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -W                            self-profile=val -- run the self profiler and output the raw event data\n+    -W                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -W                          share-generics=val -- make the current crate share its generic instantiations\n+    -W                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -W                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -W                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -W                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -W                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -W                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -W                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -W                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -W                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -W                                   teach=val -- show extended diagnostic help (default: no)\n+    -W                               temps-dir=val -- the directory the intermediate files are written to\n+    -W                          terminal-width=val -- set the current terminal width\n+    -W                          translate-lang=val -- language identifier for diagnostic output\n+    -W                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -W        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -W                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -W                                 thinlto=val -- enable ThinLTO when possible\n+    -W                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -W                                 threads=val -- use a thread pool with N threads\n+    -W                                    time=val -- measure time of rustc processes (default: no)\n+    -W                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -W                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -W                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -W                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -W                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -W                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -W                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -W                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -W            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -W          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -W                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -W                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -W                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -W                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -W                            validate-mir=val -- validate MIR after each transformation\n+    -W                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -W                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -W                         wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/issue-88756-opt-help/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs?ref=70ced2502bcdcf5b0b5fbe9b7213f79b91b99cc2", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}]}