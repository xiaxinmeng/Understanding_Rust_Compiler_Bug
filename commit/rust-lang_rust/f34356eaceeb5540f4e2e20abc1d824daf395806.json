{"sha": "f34356eaceeb5540f4e2e20abc1d824daf395806", "node_id": "C_kwDOAAsO6NoAKGYzNDM1NmVhY2VlYjU1NDBmNGUyZTIwYWJjMWQ4MjRkYWYzOTU4MDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T09:01:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T09:01:37Z"}, "message": "Auto merge of #105554 - matthiaskrgr:rollup-ir60gc7, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105411 (Introduce `with_forced_trimmed_paths`)\n - #105532 (Document behaviour of `--remap-path-prefix` with several matches)\n - #105537 (compiler: remove unnecessary imports and qualified paths)\n - #105539 (rustdoc: Only hide lines starting with `#` in rust code blocks )\n - #105546 (Add some regression tests for #44454)\n - #105547 (Add regression test for #104582)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "943d4c0b629b383abb9eb37494290f199fcfabfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943d4c0b629b383abb9eb37494290f199fcfabfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34356eaceeb5540f4e2e20abc1d824daf395806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34356eaceeb5540f4e2e20abc1d824daf395806", "html_url": "https://github.com/rust-lang/rust/commit/f34356eaceeb5540f4e2e20abc1d824daf395806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34356eaceeb5540f4e2e20abc1d824daf395806/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ddfeb5a88352aa6d157f722976937da7b97307", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ddfeb5a88352aa6d157f722976937da7b97307", "html_url": "https://github.com/rust-lang/rust/commit/b3ddfeb5a88352aa6d157f722976937da7b97307"}, {"sha": "49027dbc02392f22f204577b2cfa9a4aba35e76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/49027dbc02392f22f204577b2cfa9a4aba35e76e", "html_url": "https://github.com/rust-lang/rust/commit/49027dbc02392f22f204577b2cfa9a4aba35e76e"}], "stats": {"total": 658, "additions": 438, "deletions": 220}, "files": [{"sha": "4ca59144b29902ebf2377ae220e5c9f8678f9a10", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(feature = \"nightly\", feature(step_trait, rustc_attrs, min_specialization))]\n \n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n #[cfg(feature = \"nightly\")]\n use std::iter::Step;"}, {"sha": "2286712f02565974f2623901844c82328e562ff6", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,7 +2,6 @@ use crate::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use crate::{Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n \n use core::cmp::{self, Ordering};\n-use core::convert::TryFrom;\n use core::fmt::{self, Write};\n use core::marker::PhantomData;\n use core::mem;"}, {"sha": "4fae5ef845f7d95a2cfb947a25daeada6e46cdf7", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -28,7 +28,7 @@ use smallvec::SmallVec;\n use std::alloc::Layout;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n-use std::marker::{PhantomData, Send};\n+use std::marker::PhantomData;\n use std::mem::{self, MaybeUninit};\n use std::ptr::{self, NonNull};\n use std::slice;"}, {"sha": "74a0c13b23f7424b8408403661b28bebbea8a568", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -33,7 +33,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n use thin_vec::{thin_vec, ThinVec};"}, {"sha": "4b2850336a03db2479ec59804de725eb26ff23ae", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -22,7 +22,6 @@\n //!   Moreover, a switch to, e.g., `P<'a, T>` would be easy and mostly automated.\n \n use std::fmt::{self, Debug, Display};\n-use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::{slice, vec};\n "}, {"sha": "29a5eb4b7c509260a9034296eec158af8abcb123", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -362,7 +362,7 @@ impl TokenStream {\n     }\n }\n \n-impl iter::FromIterator<TokenTree> for TokenStream {\n+impl FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {\n         TokenStream::new(iter.into_iter().collect::<Vec<TokenTree>>())\n     }"}, {"sha": "5d7397977e9849f79f1a2ea680ca0cb0c8697a2c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -456,8 +456,8 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n     }\n \n     // Drop AST to free memory\n-    std::mem::drop(ast_index);\n-    sess.time(\"drop_ast\", || std::mem::drop(krate));\n+    drop(ast_index);\n+    sess.time(\"drop_ast\", || drop(krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.unstable_opts.keep_hygiene_data {"}, {"sha": "7da9bdc38a2a8cd3d0b32d031afd5d7ebbf3f3e8", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,8 +4,6 @@ use rustc_expand::base::{self, DummyResult};\n use rustc_session::errors::report_lit_error;\n use rustc_span::symbol::Symbol;\n \n-use std::string::String;\n-\n pub fn expand_concat(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: rustc_span::Span,"}, {"sha": "664697e0edaa406f5018d4a014fe7973730785f8", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -41,7 +41,6 @@ use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_target::abi::{Align, Size, VariantIdx};\n \n use std::collections::BTreeSet;\n-use std::convert::TryFrom;\n use std::time::{Duration, Instant};\n \n use itertools::Itertools;"}, {"sha": "319f2b2c25ebf320f71c6d0fe83bca042fe3f191", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,4 @@\n use std::borrow::Cow;\n-use std::convert::TryInto;\n \n use either::{Left, Right};\n "}, {"sha": "b1fdeb01b100abd58f5b0b44c678b07ffc2ebe75", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,4 @@\n use std::assert_matches::assert_matches;\n-use std::convert::TryFrom;\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::{Float, FloatConvert};"}, {"sha": "b9be7fa48000be54ddef02808aa26b3a100ec2fb", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,8 +2,6 @@\n //! looking at their MIR. Intrinsics/functions supported here are shared by CTFE\n //! and miri.\n \n-use std::convert::TryFrom;\n-\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,"}, {"sha": "77c7b4bacb8c8a96d68b42704478166e754d0772", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryFrom;\n-\n use rustc_ast::Mutability;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;"}, {"sha": "949f95c5fa81c2a8909ac6fd353b8578946b9535", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryFrom;\n-\n use rustc_apfloat::Float;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};"}, {"sha": "e4f716c31945c68aacdfce6490c13a7116824508", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution."}, {"sha": "fc65306e440a9912ead726d9d4ca871cd5eae3be", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,6 @@\n //! That's useful because it means other passes (e.g. promotion) can rely on `const`s\n //! to be const-safe.\n \n-use std::convert::TryFrom;\n use std::fmt::{Display, Write};\n use std::num::NonZeroUsize;\n "}, {"sha": "10783c5ed1d1cd7389fd67f5aa72e83f74763108", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n-use std::convert::TryFrom;\n use std::iter::TrustedLen;\n \n /// Expand `lhs = Rvalue::Aggregate(kind, operands)` into assignments to the fields."}, {"sha": "b6e866f15efe3c576285798a16b4d9ce9d051afb", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n use crate::stable_hasher;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n \n #[cfg(test)]"}, {"sha": "b31092eca9837bb0a0c5536b1be7e05c188fcbf5", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -9,7 +9,6 @@ use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n-use std::cmp::Ord;\n use std::ops::Range;\n \n #[cfg(test)]"}, {"sha": "94232bb7626ec885327699322d6d1357b4a9da40", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,3 @@\n-use std::cmp::Ord;\n-\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n "}, {"sha": "d1d92b905b82e0b9da4db953f10c263d8bce4838", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -867,11 +867,9 @@ where\n /////////////////////////////////////////////////////////////////////////////\n \n use std::borrow::Borrow;\n-use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n-use std::convert::From;\n+use std::cmp::Ordering;\n use std::fmt::{self, Debug};\n use std::hash::{Hash, Hasher};\n-use std::marker::{Send, Sync};\n \n impl<O, T: ?Sized> Deref for OwningRef<O, T> {\n     type Target = T;\n@@ -1096,7 +1094,6 @@ where\n // std types integration and convenience type defs\n /////////////////////////////////////////////////////////////////////////////\n \n-use std::boxed::Box;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "a9b187c4ce0a79f979ae4c562ebe56ab598c40bb", "filename": "compiler/rustc_data_structures/src/owning_ref/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,7 @@\n mod owning_ref {\n     use super::super::OwningRef;\n     use super::super::{BoxRef, Erased, ErasedBoxRef, RcRef};\n-    use std::cmp::{Ord, Ordering, PartialEq, PartialOrd};\n+    use std::cmp::Ordering;\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::HashMap;\n     use std::hash::{Hash, Hasher};\n@@ -368,7 +368,7 @@ mod owning_handle {\n mod owning_ref_mut {\n     use super::super::BoxRef;\n     use super::super::{BoxRefMut, Erased, ErasedBoxRefMut, OwningRefMut};\n-    use std::cmp::{Ord, Ordering, PartialEq, PartialOrd};\n+    use std::cmp::Ordering;\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::HashMap;\n     use std::hash::{Hash, Hasher};"}, {"sha": "1d4014f05acdc3e5a208d301ebd534a504fb411c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -86,7 +86,6 @@ use crate::fx::FxHashMap;\n \n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n-use std::convert::Into;\n use std::error::Error;\n use std::fs;\n use std::path::Path;"}, {"sha": "03ff5e5b3751fe502d5c1c3c0265dc9c07c74aa8", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,7 +1,6 @@\n use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n-use std::iter::FromIterator;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n "}, {"sha": "7af5c14942adf8c30ac0c0bc898655b97251a708", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,7 +1,6 @@\n //! A variant of `SortedMap` that preserves insertion order.\n \n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n \n use crate::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "bca6c0955b905f8732fb72b598fc75e62d924152", "filename": "compiler/rustc_data_structures/src/sso/either_iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,7 +1,5 @@\n use std::fmt;\n-use std::iter::ExactSizeIterator;\n use std::iter::FusedIterator;\n-use std::iter::Iterator;\n \n /// Iterator which may contain instance of\n /// one of two specific implementations."}, {"sha": "7cdac58197714840081099415c7fadd866b76f75", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,6 @@ use crate::fx::FxHashMap;\n use arrayvec::ArrayVec;\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n use std::ops::Index;\n \n // For pointer-sized arguments arrays"}, {"sha": "a4b40138933dedc2cf12c370df798509f1aca3f7", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n \n use super::map::SsoHashMap;\n "}, {"sha": "ed5341c40ef08b70ee2fae389ad86b949f80ba8b", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -138,7 +138,7 @@ cfg_if! {\n             }\n         }\n \n-        pub use std::iter::Iterator as ParallelIterator;\n+        pub use Iterator as ParallelIterator;\n \n         pub fn par_iter<T: IntoIterator>(t: T) -> T::IntoIter {\n             t.into_iter()"}, {"sha": "b0315c93d934d7a359266dd89ddfa86268c5d4a4", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -76,7 +76,7 @@ where\n     fn drop(&mut self) {\n         // No need to drop the tag, as it's Copy\n         unsafe {\n-            std::mem::drop(P::from_usize(self.raw.pointer_raw()));\n+            drop(P::from_usize(self.raw.pointer_raw()));\n         }\n     }\n }"}, {"sha": "2417df66bb9d8a2b0dd0d4ac09744a0d8dba0cdc", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n use std::borrow::Borrow;\n use std::fmt::Debug;\n-use std::iter::FromIterator;\n use std::slice::Iter;\n use std::vec::IntoIter;\n "}, {"sha": "711eed2b2723118a11a64ceeb11f01ca651f30da", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -45,7 +45,6 @@ use rustc_target::json::ToJson;\n \n use std::borrow::Cow;\n use std::cmp::max;\n-use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n use std::fs;"}, {"sha": "7c0719dc217d06089d726acca31a965d7a99a69f", "filename": "compiler/rustc_error_codes/src/error_codes/E0492.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -55,7 +55,6 @@ wrapper:\n \n ```\n use std::cell::Cell;\n-use std::marker::Sync;\n \n struct NotThreadSafe<T> {\n     value: Cell<T>,"}, {"sha": "628cb90903feedebcfe049f7cfeef978e6f053e3", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -59,7 +59,7 @@ into_diagnostic_arg_using_display!(\n     i128,\n     u128,\n     std::io::Error,\n-    std::boxed::Box<dyn std::error::Error>,\n+    Box<dyn std::error::Error>,\n     std::num::NonZeroU32,\n     hir::Target,\n     Edition,"}, {"sha": "86d867f6f277fcc4a3b5acc0f6c8aef3cbb631dc", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -34,7 +34,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, FileName, RealFileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n-use std::default::Default;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;"}, {"sha": "e870aa543d0b5ce9737ae0deb2b0ae7de088714e", "filename": "compiler/rustc_hir/src/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -6,7 +6,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-use std::iter::{Enumerate, ExactSizeIterator};\n+use std::iter::Enumerate;\n \n pub struct EnumerateAndAdjust<I> {\n     enumerate: Enumerate<I>,"}, {"sha": "69eb96fe8e9251871a8031c05f8278c5e2965dd3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -31,7 +31,6 @@ use rustc_trait_selection::traits::{\n };\n \n use std::cell::LazyCell;\n-use std::convert::TryInto;\n use std::iter;\n use std::ops::{ControlFlow, Deref};\n "}, {"sha": "d1d328128bc15a145f7b60835cdfe62f7733beae", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -30,8 +30,6 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use std::iter::FromIterator;\n-use std::vec::Vec;\n \n const LOADED_FROM_DISK: Symbol = sym::loaded_from_disk;\n const EXCEPT: Symbol = sym::except;"}, {"sha": "1fd2b9b0d7b7b5a58b4d291cf039575a08715e48", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -113,7 +113,6 @@ use rustc_span::Symbol;\n \n use std::fs as std_fs;\n use std::io::{self, ErrorKind};\n-use std::mem;\n use std::path::{Path, PathBuf};\n use std::time::{Duration, SystemTime, UNIX_EPOCH};\n \n@@ -305,7 +304,7 @@ pub fn prepare_session_directory(\n             }\n \n             delete_session_dir_lock_file(sess, &lock_file_path);\n-            mem::drop(directory_lock);\n+            drop(directory_lock);\n         }\n     }\n }\n@@ -864,7 +863,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n                     // Let's make it explicit that the file lock is released at this point,\n                     // or rather, that we held on to it until here\n-                    mem::drop(lock);\n+                    drop(lock);\n                 }\n                 Err(_) => {\n                     debug!(\n@@ -898,7 +897,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n         // Let's make it explicit that the file lock is released at this point,\n         // or rather, that we held on to it until here\n-        mem::drop(lock);\n+        drop(lock);\n     }\n \n     Ok(())"}, {"sha": "c18a911b2fbcd4db06dfe417f9efbfee8579a4a2", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n use std::marker::PhantomData;\n use std::ops::{Index, IndexMut, RangeBounds};\n use std::slice;"}, {"sha": "e903cb86dd20438a9264fcdf67bfedf6f3783cb4", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -25,7 +25,6 @@ use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrate\n use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n \n use std::collections::{BTreeMap, BTreeSet};\n-use std::iter::FromIterator;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n "}, {"sha": "50d6d5b9bab91a0bc08807c708ad7f02858d2842", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -34,7 +34,6 @@ pub use crate::cursor::Cursor;\n use self::LiteralKind::*;\n use self::TokenKind::*;\n use crate::cursor::EOF_CHAR;\n-use std::convert::TryFrom;\n \n /// Parsed token.\n /// It doesn't contain information about data that has been parsed,"}, {"sha": "8446da6098ee9641764fa423412368ebbbd524c4", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -16,7 +16,6 @@ use rustc_target::abi::{Abi, Size, WrappingRange};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n-use std::cmp;\n use std::iter;\n use std::ops::ControlFlow;\n \n@@ -531,7 +530,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n             _ => {}\n         };\n \n-        fn is_valid<T: cmp::PartialOrd>(binop: hir::BinOp, v: T, min: T, max: T) -> bool {\n+        fn is_valid<T: PartialOrd>(binop: hir::BinOp, v: T, min: T, max: T) -> bool {\n             match binop.node {\n                 hir::BinOpKind::Lt => v > min && v <= max,\n                 hir::BinOpKind::Le => v >= min && v < max,"}, {"sha": "716655c7f144d7de62e0d5c1bc64ee9a703c5b55", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty::ParameterizedOverTcx;\n use rustc_serialize::opaque::FileEncoder;\n use rustc_serialize::Encoder as _;\n use rustc_span::hygiene::MacroKind;\n-use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n "}, {"sha": "0b55757eb038298d32ee3598e9a07fe5732e0d15", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,6 @@\n use rustc_macros::HashStable;\n use rustc_span::Symbol;\n \n-use std::cmp::Ord;\n use std::fmt::{self, Debug, Formatter};\n \n rustc_index::newtype_index! {"}, {"sha": "8fe349d9640dafd776814d0feb5f9b8175a7e92f", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -95,7 +95,6 @@ mod pointer;\n mod queries;\n mod value;\n \n-use std::convert::TryFrom;\n use std::fmt;\n use std::io;\n use std::io::{Read, Write};"}, {"sha": "b0830991076206930b030985cdab10732d551744", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,6 @@ use super::{AllocId, InterpResult};\n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "88fb14eb359424e468ac55f953092fbc18cae2ee", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,4 +1,3 @@\n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n use either::{Either, Left, Right};"}, {"sha": "db4fe6f886b2549044777dd6f0e7b399fc0c3bfc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -36,7 +36,6 @@ use rustc_span::{Span, DUMMY_SP};\n use either::Either;\n \n use std::borrow::Cow;\n-use std::convert::TryInto;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{ControlFlow, Index, IndexMut};\n use std::{iter, mem};"}, {"sha": "d40d7de5f315fc3a18194348caf84fe05baeb8c4", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,6 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n-use std::iter::FromIterator;\n \n pub mod type_op {\n     use crate::ty::fold::TypeFoldable;"}, {"sha": "2a8a4d598882d0c0cd1b83abed69dd574fdc866d", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,7 +2,6 @@ use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_target::abi::Size;\n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n use std::num::NonZeroU8;\n "}, {"sha": "d9721863a58c801fa49c21594cfc26309a2dc47d", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryInto;\n-\n use super::Const;\n use crate::mir;\n use crate::mir::interpret::{AllocId, ConstValue, Scalar};"}, {"sha": "4e113d72469c81d34eb10e25e952742ff9876174", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n-use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::print::{with_forced_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n@@ -162,17 +162,29 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ),\n             RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n             ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n-                report_maybe_different(\n-                    f,\n-                    &values.expected.sort_string(tcx),\n-                    &values.found.sort_string(tcx),\n-                )\n+                let (mut expected, mut found) = with_forced_trimmed_paths!((\n+                    values.expected.sort_string(tcx),\n+                    values.found.sort_string(tcx),\n+                ));\n+                if expected == found {\n+                    expected = values.expected.sort_string(tcx);\n+                    found = values.found.sort_string(tcx);\n+                }\n+                report_maybe_different(f, &expected, &found)\n             }),\n             Traits(values) => ty::tls::with(|tcx| {\n+                let (mut expected, mut found) = with_forced_trimmed_paths!((\n+                    tcx.def_path_str(values.expected),\n+                    tcx.def_path_str(values.found),\n+                ));\n+                if expected == found {\n+                    expected = tcx.def_path_str(values.expected);\n+                    found = tcx.def_path_str(values.found);\n+                }\n                 report_maybe_different(\n                     f,\n-                    &format!(\"trait `{}`\", tcx.def_path_str(values.expected)),\n-                    &format!(\"trait `{}`\", tcx.def_path_str(values.found)),\n+                    &format!(\"trait `{expected}`\"),\n+                    &format!(\"trait `{found}`\"),\n                 )\n             }),\n             IntMismatch(ref values) => {\n@@ -999,14 +1011,16 @@ fn foo(&self) -> Self::T { String::new() }\n         let mut short;\n         loop {\n             // Look for the longest properly trimmed path that still fits in lenght_limit.\n-            short = FmtPrinter::new_with_limit(\n-                self,\n-                hir::def::Namespace::TypeNS,\n-                rustc_session::Limit(type_limit),\n-            )\n-            .pretty_print_type(ty)\n-            .expect(\"could not write to `String`\")\n-            .into_buffer();\n+            short = with_forced_trimmed_paths!(\n+                FmtPrinter::new_with_limit(\n+                    self,\n+                    hir::def::Namespace::TypeNS,\n+                    rustc_session::Limit(type_limit),\n+                )\n+                .pretty_print_type(ty)\n+                .expect(\"could not write to `String`\")\n+                .into_buffer()\n+            );\n             if short.len() <= length_limit || type_limit == 0 {\n                 break;\n             }"}, {"sha": "6bf42f81f131e6e447537bd290a3263fb054f715", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefKey, DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::LangItem;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n@@ -23,7 +23,6 @@ use smallvec::SmallVec;\n use std::cell::Cell;\n use std::char;\n use std::collections::BTreeMap;\n-use std::convert::TryFrom;\n use std::fmt::{self, Write as _};\n use std::iter;\n use std::ops::{ControlFlow, Deref, DerefMut};\n@@ -63,6 +62,7 @@ thread_local! {\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = const { Cell::new(false) };\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = const { Cell::new(false) };\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n+    static FORCE_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n }\n@@ -116,6 +116,7 @@ define_helper!(\n     /// of various rustc types, for example `std::vec::Vec` would be trimmed to `Vec`,\n     /// if no other `Vec` is found.\n     fn with_no_trimmed_paths(NoTrimmedGuard, NO_TRIMMED_PATH);\n+    fn with_forced_trimmed_paths(ForceTrimmedGuard, FORCE_TRIMMED_PATH);\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n@@ -295,11 +296,89 @@ pub trait PrettyPrinter<'tcx>:\n         self.try_print_visible_def_path_recur(def_id, &mut callers)\n     }\n \n+    // Given a `DefId`, produce a short name. For types and traits, it prints *only* its name,\n+    // For associated items on traits it prints out the trait's name and the associated item's name.\n+    // For enum variants, if they have an unique name, then we only print the name, otherwise we\n+    // print the enum name and the variant name. Otherwise, we do not print anything and let the\n+    // caller use the `print_def_path` fallback.\n+    fn force_print_trimmed_def_path(\n+        mut self,\n+        def_id: DefId,\n+    ) -> Result<(Self::Path, bool), Self::Error> {\n+        let key = self.tcx().def_key(def_id);\n+        let visible_parent_map = self.tcx().visible_parent_map(());\n+        let kind = self.tcx().def_kind(def_id);\n+\n+        let get_local_name = |this: &Self, name, def_id, key: DefKey| {\n+            if let Some(visible_parent) = visible_parent_map.get(&def_id)\n+                && let actual_parent = this.tcx().opt_parent(def_id)\n+                && let DefPathData::TypeNs(_) = key.disambiguated_data.data\n+                && Some(*visible_parent) != actual_parent\n+            {\n+                this\n+                    .tcx()\n+                    .module_children(visible_parent)\n+                    .iter()\n+                    .filter(|child| child.res.opt_def_id() == Some(def_id))\n+                    .find(|child| child.vis.is_public() && child.ident.name != kw::Underscore)\n+                    .map(|child| child.ident.name)\n+                    .unwrap_or(name)\n+            } else {\n+                name\n+            }\n+        };\n+        if let DefKind::Variant = kind\n+            && let Some(symbol) = self.tcx().trimmed_def_paths(()).get(&def_id)\n+        {\n+            // If `Assoc` is unique, we don't want to talk about `Trait::Assoc`.\n+            self.write_str(get_local_name(&self, *symbol, def_id, key).as_str())?;\n+            return Ok((self, true));\n+        }\n+        if let Some(symbol) = key.get_opt_name() {\n+            if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = kind\n+                && let Some(parent) = self.tcx().opt_parent(def_id)\n+                && let parent_key = self.tcx().def_key(parent)\n+                && let Some(symbol) = parent_key.get_opt_name()\n+            {\n+                // Trait\n+                self.write_str(get_local_name(&self, symbol, parent, parent_key).as_str())?;\n+                self.write_str(\"::\")?;\n+            } else if let DefKind::Variant = kind\n+                && let Some(parent) = self.tcx().opt_parent(def_id)\n+                && let parent_key = self.tcx().def_key(parent)\n+                && let Some(symbol) = parent_key.get_opt_name()\n+            {\n+                // Enum\n+\n+                // For associated items and variants, we want the \"full\" path, namely, include\n+                // the parent type in the path. For example, `Iterator::Item`.\n+                self.write_str(get_local_name(&self, symbol, parent, parent_key).as_str())?;\n+                self.write_str(\"::\")?;\n+            } else if let DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Trait\n+                | DefKind::TyAlias | DefKind::Fn | DefKind::Const | DefKind::Static(_) = kind\n+            {\n+            } else {\n+                // If not covered above, like for example items out of `impl` blocks, fallback.\n+                return Ok((self, false));\n+            }\n+            self.write_str(get_local_name(&self, symbol, def_id, key).as_str())?;\n+            return Ok((self, true));\n+        }\n+        Ok((self, false))\n+    }\n+\n     /// Try to see if this path can be trimmed to a unique symbol name.\n     fn try_print_trimmed_def_path(\n         mut self,\n         def_id: DefId,\n     ) -> Result<(Self::Path, bool), Self::Error> {\n+        if FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            let (s, trimmed) = self.force_print_trimmed_def_path(def_id)?;\n+            if trimmed {\n+                return Ok((s, true));\n+            }\n+            self = s;\n+        }\n         if !self.tcx().sess.opts.unstable_opts.trim_diagnostic_paths\n             || matches!(self.tcx().sess.opts.trimmed_def_paths, TrimmedDefPaths::Never)\n             || NO_TRIMMED_PATH.with(|flag| flag.get())"}, {"sha": "802925dfb043e3eafb4f70304a50cf359f0cb78b", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,4 +1,3 @@\n-use std::convert::TryFrom;\n use std::fmt;\n \n use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar};"}, {"sha": "7edcd46a34f293a542e1f2df59bc6f55f07a7bce", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -30,7 +30,6 @@ mod test;\n mod util;\n \n use std::borrow::Borrow;\n-use std::convert::TryFrom;\n use std::mem;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "cbd494862a01f09ee0debdb8d4bd0eacae39f3d9", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::thir::*;\n use rustc_middle::ty;\n use rustc_middle::ty::TypeVisitable;\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn field_match_pairs<'pat>("}, {"sha": "18e9c69c4870e3b8796c5b01e1e2b73c3c6c0d18", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -45,7 +45,7 @@\n use std::cell::Cell;\n use std::cmp::{self, max, min, Ordering};\n use std::fmt;\n-use std::iter::{once, IntoIterator};\n+use std::iter::once;\n use std::ops::RangeInclusive;\n \n use smallvec::{smallvec, SmallVec};"}, {"sha": "8fdac7b2cf501e1540a526392a1cde97c7397216", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -26,7 +26,7 @@\n //! ## `PartialOrd`\n //!\n //! Given that they represent partially ordered sets, you may be surprised that [`JoinSemiLattice`]\n-//! and [`MeetSemiLattice`] do not have [`PartialOrd`][std::cmp::PartialOrd] as a supertrait. This\n+//! and [`MeetSemiLattice`] do not have [`PartialOrd`] as a supertrait. This\n //! is because most standard library types use lexicographic ordering instead of set inclusion for\n //! their `PartialOrd` impl. Since we do not actually need to compare lattice elements to run a\n //! dataflow analysis, there's no need for a newtype wrapper with a custom `PartialOrd` impl. The"}, {"sha": "8212a7b523bbc98d5d1e4d8d76e57864432d61df", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -35,7 +35,6 @@ use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Vis\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n pub struct SimplifyCfg {\n     label: String,"}, {"sha": "703ed09a254a96899d2019a1d29afba864a4bb97", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -20,7 +20,6 @@ use rustc_middle::ty::{\n     Const, Ty, TyCtxt,\n };\n use rustc_span::symbol::sym;\n-use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n use crate::errors::UnusedGenericParams;"}, {"sha": "686454a8f18117f1323fa6dcea384719770e604f", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -6,7 +6,6 @@ use rustc_ast::attr;\n use rustc_ast::token::{self, Delimiter, Nonterminal};\n use rustc_errors::{error_code, fluent, Diagnostic, IntoDiagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n-use std::convert::TryInto;\n \n // Public for rustfmt usage\n #[derive(Debug)]"}, {"sha": "b97f22417cb7bdcc82482abf2a6314d4ff664c03", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::PResult;\n use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Span, DUMMY_SP};\n \n-use std::convert::TryInto;\n use std::ops::Range;\n \n /// A wrapper type to ensure that the parser handles outer attributes correctly."}, {"sha": "7ebcda249e23ae5fd9862a445c5753dd40931d4b", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -21,7 +21,6 @@ use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-use std::convert::TryFrom;\n use std::mem;\n use thin_vec::ThinVec;\n use tracing::debug;"}, {"sha": "0e7d628c1eb630c030946079bfaa9259a3785c01", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -46,7 +46,7 @@ impl DepNodeIndex {\n     pub const FOREVER_RED_NODE: DepNodeIndex = DepNodeIndex::from_u32(1);\n }\n \n-impl std::convert::From<DepNodeIndex> for QueryInvocationId {\n+impl From<DepNodeIndex> for QueryInvocationId {\n     #[inline]\n     fn from(dep_node_index: DepNodeIndex) -> Self {\n         QueryInvocationId(dep_node_index.as_u32())"}, {"sha": "d292f4beef2ebccc33f0bebfa0894a7d756e5a1a", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -22,7 +22,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable};\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n // The maximum value of `SerializedDepNodeIndex` leaves the upper two bits\n // unused so that we can store multiple index types in `CompressedHybridIndex`,"}, {"sha": "f65846fc77f6e5114bfd384ce37c013c61e10e62", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::vec::{Idx, IndexVec};\n-use std::default::Default;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;"}, {"sha": "701bbde6ad23f92d89169ce3aa3e3c7bc278685c", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -22,8 +22,8 @@ use {\n     rustc_data_structures::{jobserver, OnDrop},\n     rustc_rayon_core as rayon_core,\n     rustc_span::DUMMY_SP,\n-    std::iter::{self, FromIterator},\n-    std::{mem, process},\n+    std::iter,\n+    std::process,\n };\n \n /// Represents a span and a query key.\n@@ -247,7 +247,7 @@ impl QueryLatch {\n             jobserver::release_thread();\n             waiter.condvar.wait(&mut info);\n             // Release the lock before we potentially block in `acquire_thread`\n-            mem::drop(info);\n+            drop(info);\n             jobserver::acquire_thread();\n         }\n     }"}, {"sha": "6c310abf10ac537f78b66ef160e7acd5466eb19a", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -36,7 +36,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n use std::cell::Cell;\n-use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::io::BufWriter;"}, {"sha": "0e0ebc79eb2e3dfdb7c65855491987d8724ee200", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,5 @@\n use crate::leb128::{self, largest_max_leb128_len};\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n use std::mem::MaybeUninit;"}, {"sha": "6de564a3a069225ebee1f06be5418c9de0e1cac1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -32,7 +32,7 @@ use std::collections::btree_map::{\n use std::collections::{BTreeMap, BTreeSet};\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::{self, FromIterator};\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n "}, {"sha": "1855a49c1ecdf36b331a92e362feaa3f54eec1d5", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -3,7 +3,6 @@\n use smallvec::{smallvec, SmallVec};\n use std::env;\n use std::fs;\n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n use crate::search_paths::{PathKind, SearchPath};"}, {"sha": "43a3172270733ffebdc86005de630265f1b206a3", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -15,11 +15,10 @@ pub use crate::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n+use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::Ordering;\n-use std::{clone::Clone, cmp};\n-use std::{convert::TryFrom, unreachable};\n \n use std::fs;\n use std::io;"}, {"sha": "d0fe598ce086e89cbec966c1924baef30de064a7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::sync::Lock;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n-use std::cmp::{Ord, PartialEq, PartialOrd};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n@@ -1974,7 +1973,6 @@ pub mod kw {\n /// For example `sym::rustfmt` or `sym::u8`.\n pub mod sym {\n     use super::Symbol;\n-    use std::convert::TryInto;\n \n     #[doc(inline)]\n     pub use super::sym_generated::*;"}, {"sha": "dc2cc23ffb1e40c61448af0651d18615c59eb8c9", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -18,7 +18,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n #[macro_use]"}, {"sha": "be994eda14c004aecca3d9e0c7e3e5bf7d8f5eb0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -45,9 +45,7 @@ use rustc_span::symbol::{sym, Symbol};\n use serde_json::Value;\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n-use std::convert::TryFrom;\n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;"}, {"sha": "9f5814a6bda738c7e275c6f2a7d935c0e87a5d9e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -36,7 +36,7 @@ use std::fmt;\n use super::InferCtxtPrivExt;\n use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::print::{with_forced_trimmed_paths, with_no_trimmed_paths};\n \n #[derive(Debug)]\n pub enum GeneratorInteriorOrUpvar {\n@@ -2412,6 +2412,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::BindingObligation(item_def_id, span)\n             | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n+                let short_item_name = with_forced_trimmed_paths!(tcx.def_path_str(item_def_id));\n                 let mut multispan = MultiSpan::from(span);\n                 let sm = tcx.sess.source_map();\n                 if let Some(ident) = tcx.opt_item_ident(item_def_id) {\n@@ -2424,9 +2425,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n-                let descr = format!(\"required by a bound in `{}`\", item_name);\n+                let descr = format!(\"required by a bound in `{item_name}`\");\n                 if span.is_visible(sm) {\n-                    let msg = format!(\"required by this bound in `{}`\", item_name);\n+                    let msg = format!(\"required by this bound in `{short_item_name}`\");\n                     multispan.push_span_label(span, msg);\n                     err.span_note(multispan, &descr);\n                 } else {"}, {"sha": "9aa2be124e294871f24d11a82d2d168755d5fc00", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,6 +1,6 @@\n #![allow(rustc::usage_of_ty_tykind)]\n \n-use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n+use std::cmp::Ordering;\n use std::{fmt, hash};\n \n use crate::DebruijnIndex;"}, {"sha": "d4d26654ed114fa7cb3bc3ff3302500838d54ccf", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -434,6 +434,9 @@ replacement is purely textual, with no consideration of the current system's\n pathname syntax. For example `--remap-path-prefix foo=bar` will match\n `foo/lib.rs` but not `./foo/lib.rs`.\n \n+When multiple remappings are given and several of them match, the **last**\n+matching one is applied.\n+\n <a id=\"option-json\"></a>\n ## `--json`: configure json messages printed by the compiler\n "}, {"sha": "1e1c657b0bf22f7d71306f57099be4ac8d9c3145", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -246,8 +246,6 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 _ => {}\n             }\n         }\n-        let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n-        let text = lines.intersperse(\"\\n\".into()).collect::<String>();\n \n         let parse_result = match kind {\n             CodeBlockKind::Fenced(ref lang) => {\n@@ -260,7 +258,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                                  <pre class=\\\"language-{}\\\"><code>{}</code></pre>\\\n                              </div>\",\n                             lang,\n-                            Escape(&text),\n+                            Escape(&origtext),\n                         )\n                         .into(),\n                     ));\n@@ -270,6 +268,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             CodeBlockKind::Indented => Default::default(),\n         };\n \n+        let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n+        let text = lines.intersperse(\"\\n\".into()).collect::<String>();\n+\n         compile_fail = parse_result.compile_fail;\n         should_panic = parse_result.should_panic;\n         ignore = parse_result.ignore;"}, {"sha": "68b31a6ee083d1f82b1bfcfa4131913e451cd0e9", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -309,3 +309,40 @@ fn test_find_testable_code_line() {\n     t(\"```rust\\n```\\n```rust\\n```\", &[1, 3]);\n     t(\"```rust\\n```\\n ```rust\\n```\", &[1, 3]);\n }\n+\n+#[test]\n+fn test_ascii_with_prepending_hashtag() {\n+    fn t(input: &str, expect: &str) {\n+        let mut map = IdMap::new();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: &mut map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_offset: HeadingOffset::H2,\n+        }\n+        .into_string();\n+        assert_eq!(output, expect, \"original: {}\", input);\n+    }\n+\n+    t(\n+        r#\"```ascii\n+#..#.####.#....#.....##..\n+#..#.#....#....#....#..#.\n+####.###..#....#....#..#.\n+#..#.#....#....#....#..#.\n+#..#.#....#....#....#..#.\n+#..#.####.####.####..##..\n+```\"#,\n+        \"<div class=\\\"example-wrap\\\"><pre class=\\\"language-ascii\\\"><code>\\\n+#..#.####.#....#.....##..\n+#..#.#....#....#....#..#.\n+####.###..#....#....#..#.\n+#..#.#....#....#....#..#.\n+#..#.#....#....#....#..#.\n+#..#.####.####.####..##..\n+</code></pre></div>\",\n+    );\n+}"}, {"sha": "d4fc723fa8176c07eabcedbf0a8aaf54d9c4d98f", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -19,7 +19,7 @@ note: required by a bound in `a::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:14:19\n    |\n LL |     pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^^^^^ required by this bound in `a::bar`\n+   |                   ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:56:5\n@@ -51,7 +51,7 @@ note: required by a bound in `b::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:28:19\n    |\n LL |     pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^ required by this bound in `b::bar`\n+   |                   ^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:63:5\n@@ -83,7 +83,7 @@ note: required by a bound in `c::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:42:19\n    |\n LL |     pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^^^^ required by this bound in `c::bar`\n+   |                   ^^^^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:70:5"}, {"sha": "cdf97bd88fd236cf10c097e75947f08356db71c3", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -14,7 +14,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:17:5\n@@ -28,7 +28,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:20:19\n@@ -46,7 +46,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:20:5\n@@ -60,7 +60,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:23:5\n@@ -74,7 +74,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:25:5\n@@ -88,7 +88,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:19\n@@ -106,7 +106,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:35:5\n@@ -120,7 +120,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:38:19\n@@ -138,7 +138,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:38:5\n@@ -152,7 +152,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:41:5\n@@ -166,7 +166,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:43:5\n@@ -180,7 +180,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "f021f102933414fb5f4bb2b460246d84c1d52717", "filename": "src/test/ui/diagnostic-width/long-E0308.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,9 +1,20 @@\n // compile-flags: --diagnostic-width=60\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n-struct Atype<T, K>(T, K);\n-struct Btype<T, K>(T, K);\n-struct Ctype<T, K>(T, K);\n+mod a {\n+    // Force the \"short path for unique types\" machinery to trip up\n+    pub struct Atype;\n+    pub struct Btype;\n+    pub struct Ctype;\n+}\n+\n+mod b {\n+    pub struct Atype<T, K>(T, K);\n+    pub struct Btype<T, K>(T, K);\n+    pub struct Ctype<T, K>(T, K);\n+}\n+\n+use b::*;\n \n fn main() {\n     let x: Atype<"}, {"sha": "1c99898bc8329fc03ec2699ff0cf5937cf9cdfab", "filename": "src/test/ui/diagnostic-width/long-E0308.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:33:9\n+  --> $DIR/long-E0308.rs:44:9\n    |\n LL |        let x: Atype<\n    |  _____________-\n@@ -24,7 +24,7 @@ LL |  |     ))))))))))))))))))))))))))))));\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:46:26\n+  --> $DIR/long-E0308.rs:57:26\n    |\n LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  __________________________^\n@@ -40,7 +40,7 @@ LL | |     ))))))))))))))))))))))));\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:77:9\n+  --> $DIR/long-E0308.rs:88:9\n    |\n LL |       let x: Atype<\n    |  ____________-\n@@ -59,7 +59,7 @@ LL | |     > = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:80:17\n+  --> $DIR/long-E0308.rs:91:17\n    |\n LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  ____________--___^"}, {"sha": "87560c4c79735a9d83508be7d61b2e77a40c7893", "filename": "src/test/ui/disambiguate-identical-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/disambiguate-identical-names.rs:13:10\n    |\n LL |     test(&v);\n-   |     ---- ^^ expected struct `std::vec::Vec`, found struct `HashMap`\n+   |     ---- ^^ expected struct `Vec`, found struct `HashMap`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a3f4d21ca94bd882f67d9fd074e2ecbf9fac18bb", "filename": "src/test/ui/dyn-star/no-implicit-dyn-star.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/no-implicit-dyn-star.rs:6:48\n    |\n LL |     dyn_star_foreign::require_dyn_star_display(1usize);\n-   |     ------------------------------------------ ^^^^^^ expected trait object `dyn std::fmt::Display`, found `usize`\n+   |     ------------------------------------------ ^^^^^^ expected trait object `dyn Display`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "83ee04d5a6c600c1b66be81974620cbf4545b219", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `foo_defn::Foo::Bar`\n   --> $DIR/auxiliary/foo_defn.rs:4:15\n    |\n LL |     type Bar: AsRef<()>;\n-   |               ^^^^^^^^^ required by this bound in `foo_defn::Foo::Bar`\n+   |               ^^^^^^^^^ required by this bound in `Foo::Bar`\n \n error: aborting due to previous error\n "}, {"sha": "095a1c6af37bcb5eb5946dbab8120bd91e4bca45", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n-   |             ^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "2ea3205dcd4acef72ba300757f41be06c3f0f11b", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n-   |             ^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "bbdf0c83f6203f073c9ba9f9876b239a5be4924a", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |            ^ expected struct `std::ops::Range`, found integer\n+   |            ^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -17,7 +17,7 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n-   |               expected struct `std::ops::Range`, found integer\n+   |               expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |               --  ^^^ expected struct `std::ops::Range`, found integer\n+   |               --  ^^^ expected struct `Range`, found integer\n    |               |\n    |               this is of type `{integer}`\n    |"}, {"sha": "3ee26f74a787be7424d2f48ad65f0be1e8fb4260", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -15,7 +15,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected struct `a::Bar`, found opaque type\n+   |                              expected struct `Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n    = note: expected fn pointer `fn(&a::Bar, &(a::Bar, i32)) -> _`\n@@ -38,7 +38,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected opaque type, found struct `b::Bar`\n+   |                              expected opaque type, found struct `Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n    = note: expected fn pointer `fn(&b::Bar, &(b::Foo, i32)) -> _`"}, {"sha": "22c4055f54be31f93e2049780682bdf5a5bf255b", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `fold`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(B, Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `fold`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::fold`\n \n error: aborting due to previous error\n "}, {"sha": "58d9b564427a723fd3583c954a26eae550fbbdd4", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -18,7 +18,7 @@ note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n+   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:13:10"}, {"sha": "c28986a29854b0dfa4a241115a2391e980bfe4ba", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n+   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14"}, {"sha": "3188cd80cca8325037f4bf9f6a139b993b642021", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -26,7 +26,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ce38c3320bb354ac11ec64c6058de2cc14254788", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:14\n@@ -28,7 +28,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "544b1da178a3d96bfed1d5f654444b110d7d07d2", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "65ef124a46302ec2197356494f86495325f8d16e", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -19,7 +19,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                ^ required by this bound in `collect`\n+   |                ^ required by this bound in `Iterator::collect`\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n   --> $DIR/collect-into-slice.rs:6:30\n@@ -34,7 +34,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5a46027dd52ba9c8fd50cb06bc0805267f01987b", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "a4b4968b7d24c98011d4184c5ad7af63024ab124", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n   --> $DIR/recursion4.rs:19:9\n@@ -26,7 +26,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bf78a079cdfa9fd766e270a488ae65ac63c299a0", "filename": "src/test/ui/let-else/let-else-deref-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL |         let Bar(z) = x;\n    |             ^^^^^^   - this expression has type `&mut irrefutable::Foo`\n    |             |\n-   |             expected struct `irrefutable::Foo`, found struct `irrefutable::Bar`\n+   |             expected struct `Foo`, found struct `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d7b32e025a0864cfb60454c6eb0e2f3b3737de9", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:28:8\n    |\n LL |     if 1..(end + 1).is_empty() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:34:8\n    |\n LL |     if 1..(end + 1).is_sorted() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:40:21\n    |\n LL |     let _res: i32 = 3..6.take(2).sum();\n-   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Range`\n    |               |\n    |               expected due to this\n    |\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:45:21\n    |\n LL |     let _sum: i32 = 3..6.sum();\n-   |               ---   ^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               ---   ^^^^^^^^^^ expected `i32`, found struct `Range`\n    |               |\n    |               expected due to this\n    |\n@@ -158,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:62:8\n    |\n LL |     if 1..end.error_method() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "a2bf2e8d5b7b330661a6ff1e753bcf7127a076eb", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -130,7 +130,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -146,7 +146,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -163,7 +163,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -177,7 +177,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "f2e2a4c7fd5fe3671451333ade9f09ed547a89a1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -28,7 +28,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -44,7 +44,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b3509abbf84eb9a1841125543b1094e404fd48d3", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         P: FnMut(&Self::Item) -> bool,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::filter`\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}, {"sha": "fdd92cbfc44370ba06c3c492ca72851eb9c5b294", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:22:17\n    |\n LL |     needs_ready(Some(0));\n-   |     ----------- ^^^^^^^ expected struct `std::future::Ready`, found enum `Option`\n+   |     ----------- ^^^^^^^ expected struct `Ready`, found enum `Option`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "c3103671178b5adc7e06d7e19decb33b13745048", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -14,7 +14,7 @@ note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n   --> $DIR/sum.rs:7:5\n@@ -32,7 +32,7 @@ note: required by a bound in `std::iter::Iterator::product`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         P: Product<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::product`\n+   |            ^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::product`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "070dc844563c9aabca3407b3442117c824d224a3", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "9eec169404cdf2e72373789c1fc88fdb1f222d6e", "filename": "src/test/ui/range/issue-54505.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "d08d9b1345d4ad516edfeedd474037174d985e6c", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     demo(tell(1)..tell(10));\n    |     ---- ^^^^^^^^^^^^^^^^^\n    |     |    |\n-   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    expected `&Range<usize>`, found struct `Range`\n    |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     demo(1..10);\n    |     ---- ^^^^^\n    |     |    |\n-   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    expected `&Range<usize>`, found struct `Range`\n    |     |    help: consider borrowing here: `&(1..10)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "3028f8dbdbf771e947270f6fbfa874a561dcaf7f", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -1516,7 +1516,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:157:8\n    |\n LL |     if true..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1545,7 +1545,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1554,7 +1554,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:171:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1565,7 +1565,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1574,7 +1574,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1585,7 +1585,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |            |\n-   |            expected fn pointer, found struct `std::ops::Range`\n+   |            expected fn pointer, found struct `Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1607,7 +1607,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:182:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1618,7 +1618,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1639,7 +1639,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:190:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1710,7 +1710,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:249:11\n    |\n LL |     while true..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1739,7 +1739,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1748,7 +1748,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:263:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1759,7 +1759,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1768,7 +1768,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1779,7 +1779,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |               |\n-   |               expected fn pointer, found struct `std::ops::Range`\n+   |               expected fn pointer, found struct `Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1801,7 +1801,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:274:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1812,7 +1812,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1833,7 +1833,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:282:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1883,7 +1883,7 @@ error[E0308]: mismatched types\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |          |\n-   |          expected `bool`, found struct `std::ops::Range`\n+   |          expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`"}, {"sha": "9b751d1b66c54d79547acb96e05a76068f2079e1", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-record-suggestion.rs:23:20\n    |\n LL |     let q = B { b: 1..Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `std::ops::Range`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `Range`\n    |\n    = note: expected type `u32`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "4cb595c32c0611ebad6ca6950c6eb56ebac0f969", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -80,7 +80,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Foo<T>: Sized {\n@@ -96,7 +96,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bar: std::fmt::Display + Sized {\n@@ -112,7 +112,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Baz: Sized where Self: std::fmt::Display {\n@@ -128,7 +128,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n@@ -144,7 +144,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bat<T>: std::fmt::Display + Sized {"}, {"sha": "34eaa8322c8701e70f451c34a510a4567055d18d", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:2:18\n    |\n LL |     let _: f64 = 0..10;\n-   |            ---   ^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            ---   ^^^^^ expected `f64`, found struct `Range`\n    |            |\n    |            expected due to this\n    |\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:5:18\n    |\n LL |     let _: f64 = std::ops::Range { start: 0, end: 1 };\n-   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `Range`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "bbaf3188a8963bd4735aa1c7ae115df660675a1e", "filename": "src/test/ui/traits/object/issue-44454-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,22 @@\n+// Taken from https://github.com/rust-lang/rust/issues/44454#issue-256435333\n+\n+trait Animal<X>: 'static {}\n+\n+fn foo<Y, X>()\n+where\n+    Y: Animal<X> + ?Sized,\n+{\n+    // `Y` implements `Animal<X>` so `Y` is 'static.\n+    baz::<Y>()\n+}\n+\n+fn bar<'a>(_arg: &'a i32) {\n+    foo::<dyn Animal<&'a i32>, &'a i32>() //~ ERROR: lifetime may not live long enough\n+}\n+\n+fn baz<T: 'static + ?Sized>() {}\n+\n+fn main() {\n+    let a = 5;\n+    bar(&a);\n+}"}, {"sha": "859487f50ac1ec6373edecfe9a10738332f55c8b", "filename": "src/test/ui/traits/object/issue-44454-1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-1.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-44454-1.rs:14:5\n+   |\n+LL | fn bar<'a>(_arg: &'a i32) {\n+   |        -- lifetime `'a` defined here\n+LL |     foo::<dyn Animal<&'a i32>, &'a i32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f5178bcdbe224011b134946f9120d52ce40dbcad", "filename": "src/test/ui/traits/object/issue-44454-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,22 @@\n+// Taken from https://github.com/rust-lang/rust/issues/44454#issuecomment-1175925928\n+\n+trait Trait<ARG: 'static>: 'static {\n+    type Assoc: AsRef<str>;\n+}\n+\n+fn hr<T: ?Sized, ARG>(x: T::Assoc) -> Box<dyn AsRef<str> + 'static>\n+where\n+    T: Trait<ARG>\n+{\n+    Box::new(x)\n+}\n+\n+fn extend_lt<'a>(x: &'a str) -> Box<dyn AsRef<str> + 'static> {\n+    type DynTrait = dyn for<'a> Trait<&'a str, Assoc = &'a str>;\n+    hr::<DynTrait, _>(x) //~ ERROR: borrowed data escapes outside of function\n+}\n+\n+fn main() {\n+    let extended = extend_lt(&String::from(\"hello\"));\n+    println!(\"{}\", extended.as_ref().as_ref());\n+}"}, {"sha": "7f574769b7f60ed39aa0f4779f09a94c0aba12f3", "filename": "src/test/ui/traits/object/issue-44454-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-2.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,17 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-44454-2.rs:16:5\n+   |\n+LL | fn extend_lt<'a>(x: &'a str) -> Box<dyn AsRef<str> + 'static> {\n+   |              --  - `x` is a reference that is only valid in the function body\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |     type DynTrait = dyn for<'a> Trait<&'a str, Assoc = &'a str>;\n+LL |     hr::<DynTrait, _>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "bff727035346405c006b9365637a671359b7b3e0", "filename": "src/test/ui/traits/object/issue-44454-3.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,33 @@\n+// Taken from https://github.com/rust-lang/rust/issues/44454#issuecomment-1332781290\n+\n+use std::any::Any;\n+\n+trait Animal<X>: 'static {}\n+\n+trait Projector {\n+    type Foo;\n+}\n+\n+impl<X> Projector for dyn Animal<X> {\n+    type Foo = X;\n+}\n+\n+fn make_static<'a, T>(t: &'a T) -> &'static T {\n+    let x: <dyn Animal<&'a T> as Projector>::Foo = t;\n+    let any = generic::<dyn Animal<&'a T>, &'a T>(x);\n+    //~^ ERROR: lifetime may not live long enough\n+    any.downcast_ref::<&'static T>().unwrap()\n+}\n+\n+fn generic<T: Projector + Animal<U> + ?Sized, U>(x: <T as Projector>::Foo) -> Box<dyn Any> {\n+    make_static_any(x)\n+}\n+\n+fn make_static_any<U: 'static>(u: U) -> Box<dyn Any> {\n+    Box::new(u)\n+}\n+\n+fn main() {\n+    let a = make_static(&\"salut\".to_string());\n+    println!(\"{}\", *a);\n+}"}, {"sha": "294684d26bdfc8defe8e4a565d6fe414eb2e58d5", "filename": "src/test/ui/traits/object/issue-44454-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-44454-3.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-44454-3.rs:17:15\n+   |\n+LL | fn make_static<'a, T>(t: &'a T) -> &'static T {\n+   |                -- lifetime `'a` defined here\n+LL |     let x: <dyn Animal<&'a T> as Projector>::Foo = t;\n+LL |     let any = generic::<dyn Animal<&'a T>, &'a T>(x);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9765fbd47ff465daf1afaf57991872a4cb6ed83e", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -36,7 +36,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -82,7 +82,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:31:20\n@@ -95,7 +95,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "fc85ec933155621972a0d939cfa0e981f1741dc1", "filename": "src/test/ui/type/type-ascription-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:53:5\n    |\n LL |     (S .. S): S;\n-   |     ^^^^^^^^ expected struct `S`, found struct `std::ops::Range`\n+   |     ^^^^^^^^ expected struct `S`, found struct `Range`\n    |\n    = note: expected struct `S`\n               found struct `std::ops::Range<S>`"}, {"sha": "104669dadbea15dfc322f6f78a1379304cda7a4c", "filename": "src/test/ui/typeck/issue-104582.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.rs?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,5 @@\n+fn main(){\n+    let my_var: String(String?);\n+    //~^ ERROR: invalid `?` in type\n+    //~| ERROR: parenthesized type parameters may only be used with a `Fn` trait\n+}"}, {"sha": "61b6b23642cced454f4f281e5590e02af68d76f2", "filename": "src/test/ui/typeck/issue-104582.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104582.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -0,0 +1,25 @@\n+error: invalid `?` in type\n+  --> $DIR/issue-104582.rs:2:30\n+   |\n+LL |     let my_var: String(String?);\n+   |                              ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL |     let my_var: String(Option<String>);\n+   |                        +++++++      ~\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-104582.rs:2:17\n+   |\n+LL |     let my_var: String(String?);\n+   |                 ^^^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let my_var: String<String?>;\n+   |                       ~       ~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "876ac2c67ef3f34cf19718cff61a7a2bb65dc5a7", "filename": "src/test/ui/typeck/issue-13853.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34356eaceeb5540f4e2e20abc1d824daf395806/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr?ref=f34356eaceeb5540f4e2e20abc1d824daf395806", "patch": "@@ -5,7 +5,7 @@ LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n    |                  - this type parameter              - expected `I` because of return type\n ...\n LL |         self.iter()\n-   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n+   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `Iter`\n    |\n    = note: expected type parameter `I`\n                       found struct `std::slice::Iter<'_, N>`"}]}