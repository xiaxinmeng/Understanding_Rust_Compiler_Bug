{"sha": "98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDFkYjdmZTM2ZmU1NDU0OTM3ZjQwZDlmY2I0ZmU5N2YzNmJiZWI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-01-31T03:32:08Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:31:37Z"}, "message": "If is now always a SwitchInt in MIR", "tree": {"sha": "5719c195fd5b4ae6c3869860f356b0b99c45353b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5719c195fd5b4ae6c3869860f356b0b99c45353b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "html_url": "https://github.com/rust-lang/rust/commit/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "html_url": "https://github.com/rust-lang/rust/commit/779c6b6cb8f5db7d862723701b0d4dc01c7712c3"}], "stats": {"total": 178, "additions": 76, "deletions": 102}, "files": [{"sha": "fa7ba3e6a62a3eaf092b17774c23917ce3acccd2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -453,12 +453,6 @@ pub enum TerminatorKind<'tcx> {\n         target: BasicBlock,\n     },\n \n-    /// jump to branch 0 if this lvalue evaluates to true\n-    If {\n-        cond: Operand<'tcx>,\n-        targets: (BasicBlock, BasicBlock),\n-    },\n-\n     /// lvalue evaluates to some enum; jump depending on the branch\n     Switch {\n         discr: Lvalue<'tcx>,\n@@ -470,7 +464,7 @@ pub enum TerminatorKind<'tcx> {\n     /// to one of the targets, and otherwise fallback to `otherwise`\n     SwitchInt {\n         /// discriminant value being tested\n-        discr: Lvalue<'tcx>,\n+        discr: Operand<'tcx>,\n \n         /// type of value being tested\n         switch_ty: Ty<'tcx>,\n@@ -550,7 +544,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b).into_cow(),\n-            If { targets: (b1, b2), .. } => vec![b1, b2].into_cow(),\n             Switch { targets: ref b, .. } => b[..].into_cow(),\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n             Resume => (&[]).into_cow(),\n@@ -580,7 +573,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref mut b } => vec![b],\n-            If { targets: (ref mut b1, ref mut b2), .. } => vec![b1, b2],\n             Switch { targets: ref mut b, .. } => b.iter_mut().collect(),\n             SwitchInt { targets: ref mut b, .. } => b.iter_mut().collect(),\n             Resume => Vec::new(),\n@@ -659,7 +651,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         use self::TerminatorKind::*;\n         match *self {\n             Goto { .. } => write!(fmt, \"goto\"),\n-            If { cond: ref lv, .. } => write!(fmt, \"if({:?})\", lv),\n             Switch { discr: ref lv, .. } => write!(fmt, \"switch({:?})\", lv),\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n             Return => write!(fmt, \"return\"),\n@@ -710,7 +701,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             Return | Resume | Unreachable => vec![],\n             Goto { .. } => vec![\"\".into()],\n-            If { .. } => vec![\"true\".into(), \"false\".into()],\n             Switch { ref adt_def, .. } => {\n                 adt_def.variants\n                        .iter()"}, {"sha": "1e27a02287fd17ff7c55fc1e4ea9b434f0176ef8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -14,7 +14,6 @@ use ty::subst::Substs;\n use ty::{ClosureSubsts, Region, Ty};\n use mir::*;\n use rustc_const_math::ConstUsize;\n-use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n@@ -363,14 +362,6 @@ macro_rules! make_mir_visitor {\n                         self.visit_branch(block, target);\n                     }\n \n-                    TerminatorKind::If { ref $($mutability)* cond,\n-                                         ref $($mutability)* targets } => {\n-                        self.visit_operand(cond, source_location);\n-                        for &target in targets.as_slice() {\n-                            self.visit_branch(block, target);\n-                        }\n-                    }\n-\n                     TerminatorKind::Switch { ref $($mutability)* discr,\n                                              adt_def: _,\n                                              ref targets } => {\n@@ -384,7 +375,7 @@ macro_rules! make_mir_visitor {\n                                                 ref $($mutability)* switch_ty,\n                                                 ref $($mutability)* values,\n                                                 ref targets } => {\n-                        self.visit_lvalue(discr, LvalueContext::Inspect, source_location);\n+                        self.visit_operand(discr, source_location);\n                         self.visit_ty(switch_ty);\n                         for value in values {\n                             self.visit_const_val(value, source_location);"}, {"sha": "8dd591fa2e7783349158901d2ae6b4e55e92bc4b", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -454,10 +454,6 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n             }\n-            mir::TerminatorKind::If { ref targets, .. } => {\n-                self.propagate_bits_into_entry_set_for(in_out, changed, &targets.0);\n-                self.propagate_bits_into_entry_set_for(in_out, changed, &targets.1);\n-            }\n             mir::TerminatorKind::Switch { ref targets, .. } |\n             mir::TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {"}, {"sha": "45f534767e4e74460db672e202cc559e46538d6b", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -813,9 +813,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             (true, false) => on_set,\n             (true, true) => {\n                 let flag = self.drop_flag(c.path).unwrap();\n-                self.new_block(c, is_cleanup, TerminatorKind::If {\n-                    cond: Operand::Consume(flag),\n-                    targets: (on_set, on_unset)\n+                let boolty = self.tcx.types.bool;\n+                self.new_block(c, is_cleanup, TerminatorKind::SwitchInt {\n+                    discr: Operand::Consume(flag),\n+                    switch_ty: boolty,\n+                    values: vec![ConstVal::Bool(true)],\n+                    targets: vec![on_set, on_unset],\n                 })\n             }\n         }"}, {"sha": "9e7e5ec9ee8613d71277e523c58bc100a87f8197", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -464,7 +464,6 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 self.gather_move(loc, &Lvalue::Local(RETURN_POINTER));\n             }\n \n-            TerminatorKind::If { .. } |\n             TerminatorKind::Assert { .. } |\n             TerminatorKind::SwitchInt { .. } |\n             TerminatorKind::Switch { .. } => {"}, {"sha": "2b4336ba66f0797249989cbd187ae1b0c920338a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -15,6 +15,7 @@ use build::expr::category::{Category, RvalueFunc};\n use hair::*;\n use rustc::ty;\n use rustc::mir::*;\n+use rustc::middle::const_val::ConstVal;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n@@ -69,9 +70,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let mut then_block = this.cfg.start_new_block();\n                 let mut else_block = this.cfg.start_new_block();\n-                this.cfg.terminate(block, source_info, TerminatorKind::If {\n-                    cond: operand,\n-                    targets: (then_block, else_block)\n+                this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+                    discr: operand,\n+                    switch_ty: this.hir.bool_ty(),\n+                    values: vec![ConstVal::Bool(true)],\n+                    targets: vec![then_block, else_block],\n                 });\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n@@ -111,16 +114,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let lhs = unpack!(block = this.as_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => (else_block, false_block),\n-                    LogicalOp::Or => (true_block, else_block),\n+                    LogicalOp::And => vec![else_block, false_block],\n+                    LogicalOp::Or => vec![true_block, else_block],\n                 };\n-                this.cfg.terminate(block, source_info,\n-                                   TerminatorKind::If { cond: lhs, targets: blocks });\n+                this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+                    discr: lhs,\n+                    switch_ty: this.hir.bool_ty(),\n+                    values: vec![ConstVal::Bool(true)],\n+                    targets: blocks,\n+                });\n \n                 let rhs = unpack!(else_block = this.as_operand(else_block, rhs));\n-                this.cfg.terminate(else_block, source_info, TerminatorKind::If {\n-                    cond: rhs,\n-                    targets: (true_block, false_block)\n+                this.cfg.terminate(else_block, source_info, TerminatorKind::SwitchInt {\n+                    discr: rhs,\n+                    switch_ty: this.hir.bool_ty(),\n+                    values: vec![ConstVal::Bool(true)],\n+                    targets: vec![true_block, false_block],\n                 });\n \n                 this.cfg.push_assign_constant(\n@@ -180,9 +189,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                 loop_block_end = this.as_operand(loop_block, cond_expr));\n                             body_block = this.cfg.start_new_block();\n                             this.cfg.terminate(loop_block_end, source_info,\n-                                               TerminatorKind::If {\n-                                                   cond: cond,\n-                                                   targets: (body_block, exit_block)\n+                                               TerminatorKind::SwitchInt {\n+                                                   discr: cond,\n+                                                   switch_ty: this.hir.bool_ty(),\n+                                                   values: vec![ConstVal::Bool(true)],\n+                                                   targets: vec![body_block, exit_block],\n                                                });\n \n                             // if the test is false, there's no `break` to assign `destination`, so"}, {"sha": "0898d06d2e470431fc5404d60c0c9e5c9856455d", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -672,9 +672,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let source_info = self.source_info(guard.span);\n             let cond = unpack!(block = self.as_operand(block, guard));\n             let otherwise = self.cfg.start_new_block();\n-            self.cfg.terminate(block, source_info,\n-                               TerminatorKind::If { cond: cond,\n-                                                    targets: (arm_block, otherwise)});\n+            self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+                discr: cond,\n+                switch_ty: self.hir.bool_ty(),\n+                values: vec![ConstVal::Bool(true)],\n+                targets: vec![arm_block, otherwise],\n+            });\n             Some(otherwise)\n         } else {\n             let source_info = self.source_info(candidate.span);"}, {"sha": "291bd65d577752d8cfb198516c259d39a8d1f939", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -221,10 +221,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             v => span_bug!(test.span, \"expected boolean value but got {:?}\", v)\n                         };\n \n-                        (targets,\n-                         TerminatorKind::If {\n-                             cond: Operand::Consume(lvalue.clone()),\n-                             targets: (true_bb, else_bb)\n+                        (targets, TerminatorKind::SwitchInt {\n+                             discr: Operand::Consume(lvalue.clone()),\n+                             switch_ty: self.hir.bool_ty(),\n+                             values: vec![ConstVal::Bool(true)],\n+                             targets: vec![true_bb, else_bb]\n                          })\n \n                     }\n@@ -240,7 +241,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                         (targets.clone(),\n                          TerminatorKind::SwitchInt {\n-                             discr: lvalue.clone(),\n+                             discr: Operand::Consume(lvalue.clone()),\n                              switch_ty: switch_ty,\n                              values: options.clone(),\n                              targets: targets\n@@ -314,9 +315,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                     // check the result\n                     let block = self.cfg.start_new_block();\n-                    self.cfg.terminate(eq_block, source_info, TerminatorKind::If {\n-                        cond: Operand::Consume(eq_result),\n-                        targets: (block, fail),\n+                    self.cfg.terminate(eq_block, source_info, TerminatorKind::SwitchInt {\n+                        discr: Operand::Consume(eq_result),\n+                        switch_ty: self.hir.bool_ty(),\n+                        values: vec![ConstVal::Bool(true)],\n+                        targets: vec![block, fail],\n                     });\n \n                     vec![block, fail]\n@@ -362,9 +365,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // branch based on result\n                 let target_blocks: Vec<_> = vec![self.cfg.start_new_block(),\n                                                  self.cfg.start_new_block()];\n-                self.cfg.terminate(block, source_info, TerminatorKind::If {\n-                    cond: Operand::Consume(result),\n-                    targets: (target_blocks[0], target_blocks[1])\n+                self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+                    discr: Operand::Consume(result),\n+                    switch_ty: self.hir.bool_ty(),\n+                    values: vec![ConstVal::Bool(true)],\n+                    targets: target_blocks.clone(),\n                 });\n \n                 target_blocks\n@@ -389,9 +394,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // branch based on result\n         let target_block = self.cfg.start_new_block();\n-        self.cfg.terminate(block, source_info, TerminatorKind::If {\n-            cond: Operand::Consume(result),\n-            targets: (target_block, fail_block)\n+        self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n+            discr: Operand::Consume(result),\n+            switch_ty: self.hir.bool_ty(),\n+            values: vec![ConstVal::Bool(true)],\n+            targets: vec![target_block, fail_block]\n         });\n \n         target_block"}, {"sha": "4ac67cfb2fca10fb935c06b486859fc9b6f4babb", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -134,7 +134,8 @@ pub enum ExprKind<'tcx> {\n         op: LogicalOp,\n         lhs: ExprRef<'tcx>,\n         rhs: ExprRef<'tcx>,\n-    },\n+    }, // NOT overloaded!\n+       // LogicalOp is distinct from BinaryOp because of lazy evaluation of the operands.\n     Unary {\n         op: UnOp,\n         arg: ExprRef<'tcx>,"}, {"sha": "425df65659c6fdebd862a5ba9742c69723750069", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -28,7 +28,6 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n-            TerminatorKind::If { .. } |\n             TerminatorKind::Switch { .. } |\n             TerminatorKind::SwitchInt { .. } => {\n                 /* nothing to do */"}, {"sha": "bda4c94625f8bad0b7911b01f71320bb06cdd64e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -394,7 +394,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                     return Qualif::empty();\n                 }\n \n-                TerminatorKind::If {..} |\n                 TerminatorKind::Switch {..} |\n                 TerminatorKind::SwitchInt {..} |\n                 TerminatorKind::DropAndReplace { .. } |"}, {"sha": "1127f50fe508c1c5fd9f9bb250efad32e8143f53", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -209,7 +209,6 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     // turn a branch with all successors identical to a goto\n     fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {\n         match terminator.kind {\n-            TerminatorKind::If { .. } |\n             TerminatorKind::Switch { .. } |\n             TerminatorKind::SwitchInt { .. } => {},\n             _ => return false"}, {"sha": "424250586b16277b15fdee43ca065f3ae3b7378b", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -30,17 +30,17 @@ impl<'l, 'tcx> MirPass<'tcx> for SimplifyBranches<'l> {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {\n-                TerminatorKind::If { ref targets, cond: Operand::Constant(Constant {\n-                    literal: Literal::Value {\n-                        value: ConstVal::Bool(cond)\n-                    }, ..\n-                }) } => {\n-                    if cond {\n-                        TerminatorKind::Goto { target: targets.0 }\n-                    } else {\n-                        TerminatorKind::Goto { target: targets.1 }\n-                    }\n-                }\n+                // TerminatorKind::If { ref targets, cond: Operand::Constant(Constant {\n+                //     literal: Literal::Value {\n+                //         value: ConstVal::Bool(cond)\n+                //     }, ..\n+                // }) } => {\n+                //     if cond {\n+                //         TerminatorKind::Goto { target: targets.0 }\n+                //     } else {\n+                //         TerminatorKind::Goto { target: targets.1 }\n+                //     }\n+                // }\n \n                 TerminatorKind::Assert { target, cond: Operand::Constant(Constant {\n                     literal: Literal::Value {"}, {"sha": "9d2ad314386581c58fe0b2a22e4cb9180b8fbd7b", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -423,18 +423,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                  lv_ty, rv_ty, terr);\n                 }\n             }\n-\n-            TerminatorKind::If { ref cond, .. } => {\n-                let cond_ty = cond.ty(mir, tcx);\n-                match cond_ty.sty {\n-                    ty::TyBool => {}\n-                    _ => {\n-                        span_mirbug!(self, term, \"bad If ({:?}, not bool\", cond_ty);\n-                    }\n-                }\n-            }\n             TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {\n-                let discr_ty = discr.ty(mir, tcx).to_ty(tcx);\n+                let discr_ty = discr.ty(mir, tcx);\n                 if let Err(terr) = self.sub_types(discr_ty, switch_ty) {\n                     span_mirbug!(self, term, \"bad SwitchInt ({:?} on {:?}): {:?}\",\n                                  switch_ty, discr_ty, terr);\n@@ -603,10 +593,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         match block.terminator().kind {\n             TerminatorKind::Goto { target } =>\n                 self.assert_iscleanup(mir, block, target, is_cleanup),\n-            TerminatorKind::If { targets: (on_true, on_false), .. } => {\n-                self.assert_iscleanup(mir, block, on_true, is_cleanup);\n-                self.assert_iscleanup(mir, block, on_false, is_cleanup);\n-            }\n             TerminatorKind::Switch { ref targets, .. } |\n             TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {"}, {"sha": "fef61128d04e5746e7b992d4bad61dd6c680b2f3", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -148,7 +148,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"TerminatorKind\", kind);\n         self.record(match *kind {\n             TerminatorKind::Goto { .. } => \"TerminatorKind::Goto\",\n-            TerminatorKind::If { .. } => \"TerminatorKind::If\",\n             TerminatorKind::Switch { .. } => \"TerminatorKind::Switch\",\n             TerminatorKind::SwitchInt { .. } => \"TerminatorKind::SwitchInt\",\n             TerminatorKind::Resume => \"TerminatorKind::Resume\","}, {"sha": "97118a7206299afa5f0e4faf6324a9264b3dce62", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -204,7 +204,6 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::Resume |\n                 TerminatorKind::Return |\n                 TerminatorKind::Unreachable |\n-                TerminatorKind::If { .. } |\n                 TerminatorKind::Switch { .. } |\n                 TerminatorKind::SwitchInt { .. } => {\n                     /* nothing to do */"}, {"sha": "b22c16a2955bda94b3de9952f782b62363ef598e", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -136,14 +136,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 funclet_br(self, bcx, target);\n             }\n \n-            mir::TerminatorKind::If { ref cond, targets: (true_bb, false_bb) } => {\n-                let cond = self.trans_operand(&bcx, cond);\n-\n-                let lltrue = llblock(self, true_bb);\n-                let llfalse = llblock(self, false_bb);\n-                bcx.cond_br(cond.immediate(), lltrue, llfalse);\n-            }\n-\n             mir::TerminatorKind::Switch { ref discr, ref adt_def, ref targets } => {\n                 let discr_lvalue = self.trans_lvalue(&bcx, discr);\n                 let ty = discr_lvalue.ty.to_ty(bcx.tcx());\n@@ -180,10 +172,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n+                // TODO: cond_br if only 1 value\n                 let (otherwise, targets) = targets.split_last().unwrap();\n-                let lv = self.trans_lvalue(&bcx, discr);\n-                let discr = bcx.load(lv.llval, lv.alignment.to_align());\n-                let discr = base::to_immediate(&bcx, discr, switch_ty);\n+                let discr = self.trans_operand(&bcx, discr).immediate();\n                 let switch = bcx.switch(discr, llblock(self, *otherwise), values.len());\n                 for (value, target) in values.iter().zip(targets) {\n                     let val = Const::from_constval(bcx.ccx, value.clone(), switch_ty);"}, {"sha": "2231c3c242285e68c30ca4b59521ffbdd99f437e", "filename": "src/test/ui/custom-derive/issue-36935.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs?ref=98d1db7fe36fe5454937f40d9fcb4fe97f36bbeb", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:plugin.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}]}