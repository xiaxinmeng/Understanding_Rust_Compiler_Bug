{"sha": "bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYTc2MWRjNWQ2ZDEzZmFkYzdhMmYzYzIyMmViZGM4NmIzZGE0ZDM=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-17T01:30:37Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-17T01:34:31Z"}, "message": "move to separate pass, cache layouts", "tree": {"sha": "b999a658254a514558f1a90849f71d42ca3fcc43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b999a658254a514558f1a90849f71d42ca3fcc43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "html_url": "https://github.com/rust-lang/rust/commit/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90562b401ee63d05d2c96bb2240074dd528d9371", "url": "https://api.github.com/repos/rust-lang/rust/commits/90562b401ee63d05d2c96bb2240074dd528d9371", "html_url": "https://github.com/rust-lang/rust/commit/90562b401ee63d05d2c96bb2240074dd528d9371"}], "stats": {"total": 78, "additions": 52, "deletions": 26}, "files": [{"sha": "bad82fe893eb8cf87e795798361098fe40f7c92d", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "patch": "@@ -12,12 +12,10 @@ pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let param_env = tcx.param_env(body.source.def_id());\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n-        let ctx = InstCombineContext { tcx, local_decls, param_env };\n+        let ctx = InstCombineContext { tcx, local_decls };\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n-                ctx.combine_zst(&statement.source_info, &mut statement.kind);\n                 match statement.kind {\n                     StatementKind::Assign(box (_place, ref mut rvalue)) => {\n                         ctx.combine_bool_cmp(&statement.source_info, rvalue);\n@@ -34,7 +32,6 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n struct InstCombineContext<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n     local_decls: &'a LocalDecls<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n@@ -44,28 +41,6 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n         })\n     }\n \n-    /// Remove assignments to inhabited ZST places.\n-    fn combine_zst(&self, source_info: &SourceInfo, kind: &mut StatementKind<'tcx>) {\n-        match kind {\n-            StatementKind::Assign(box (place, _)) => {\n-                let place_ty = place.ty(self.local_decls, self.tcx).ty;\n-                if let Ok(layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n-                    if layout.is_zst() && !layout.abi.is_uninhabited() {\n-                        if self.tcx.consider_optimizing(|| {\n-                            format!(\n-                                \"InstCombine ZST - Place: {:?} SourceInfo: {:?}\",\n-                                place, source_info\n-                            )\n-                        }) {\n-                            *kind = StatementKind::Nop;\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-\n     /// Transform boolean comparisons into logical operations.\n     fn combine_bool_cmp(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         match rvalue {"}, {"sha": "c9187fdecedaf547f31b52cc67dfda872022dbe3", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "patch": "@@ -44,6 +44,7 @@ pub mod promote_consts;\n pub mod remove_noop_landing_pads;\n pub mod remove_storage_markers;\n pub mod remove_unneeded_drops;\n+pub mod remove_zsts;\n pub mod required_consts;\n pub mod rustc_peek;\n pub mod simplify;\n@@ -494,6 +495,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     // The main optimizations that we do on MIR.\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n         &remove_storage_markers::RemoveStorageMarkers,\n+        &remove_zsts::RemoveZsts,\n         &const_goto::ConstGoto,\n         &remove_unneeded_drops::RemoveUnneededDrops,\n         &match_branches::MatchBranchSimplification,"}, {"sha": "838ffe9b596eb7f78c5c2f1d556950316db85456", "filename": "compiler/rustc_mir/src/transform/remove_zsts.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs?ref=bca761dc5d6d13fadc7a2f3c222ebdc86b3da4d3", "patch": "@@ -0,0 +1,49 @@\n+//! Removes assignments to ZST places.\n+\n+use crate::transform::MirPass;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::mir::{Body, StatementKind};\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct RemoveZsts;\n+\n+impl<'tcx> MirPass<'tcx> for RemoveZsts {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(body.source.def_id());\n+\n+        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+\n+        let mut is_zst_cache = FxHashMap::default();\n+\n+        for block in basic_blocks.iter_mut() {\n+            for statement in block.statements.iter_mut() {\n+                match statement.kind {\n+                    StatementKind::Assign(box (place, _)) => {\n+                        let place_ty = place.ty(local_decls, tcx).ty;\n+\n+                        let is_inhabited_zst = *is_zst_cache.entry(place_ty).or_insert_with(|| {\n+                            if let Ok(layout) = tcx.layout_of(param_env.and(place_ty)) {\n+                                if layout.is_zst() && !layout.abi.is_uninhabited() {\n+                                    return true;\n+                                }\n+                            }\n+                            false\n+                        });\n+\n+                        if is_inhabited_zst {\n+                            if tcx.consider_optimizing(|| {\n+                                format!(\n+                                    \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n+                                    place, statement.source_info\n+                                )\n+                            }) {\n+                                statement.make_nop();\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+    }\n+}"}]}