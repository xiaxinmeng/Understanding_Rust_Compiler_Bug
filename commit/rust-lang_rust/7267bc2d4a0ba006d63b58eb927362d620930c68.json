{"sha": "7267bc2d4a0ba006d63b58eb927362d620930c68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjdiYzJkNGEwYmEwMDZkNjNiNThlYjkyNzM2MmQ2MjA5MzBjNjg=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T11:50:17Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T11:50:17Z"}, "message": "librustc_metadata => 2018", "tree": {"sha": "a18dd7febfa6c43c9a431e33ff5e6a029fe2b5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a18dd7febfa6c43c9a431e33ff5e6a029fe2b5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7267bc2d4a0ba006d63b58eb927362d620930c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7267bc2d4a0ba006d63b58eb927362d620930c68", "html_url": "https://github.com/rust-lang/rust/commit/7267bc2d4a0ba006d63b58eb927362d620930c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7267bc2d4a0ba006d63b58eb927362d620930c68/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efdda10cdde386ea3e470ba2b482fdc73c12001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efdda10cdde386ea3e470ba2b482fdc73c12001", "html_url": "https://github.com/rust-lang/rust/commit/1efdda10cdde386ea3e470ba2b482fdc73c12001"}], "stats": {"total": 133, "additions": 67, "deletions": 66}, "files": [{"sha": "e234f4f88070382f99d9c9a85dcb9d8f2018f8bd", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_metadata\"\n@@ -14,7 +15,7 @@ log = \"0.4\"\n memmap = \"0.6\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n serialize = { path = \"../libserialize\" }\n stable_deref_trait = \"1.0.0\""}, {"sha": "0b4c8a5367c15b7fe8bc4c4273ccbda231ae7d66", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,9 +1,9 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n-use cstore::{self, CStore, CrateSource, MetadataBlob};\n-use locator::{self, CratePaths};\n-use decoder::proc_macro_def_path_table;\n-use schema::CrateRoot;\n+use crate::cstore::{self, CStore, CrateSource, MetadataBlob};\n+use crate::locator::{self, CratePaths};\n+use crate::decoder::proc_macro_def_path_table;\n+use crate::schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n \n use rustc::hir::def_id::CrateNum;\n@@ -29,8 +29,9 @@ use syntax::attr;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax::visit;\n+use syntax::{span_err, span_fatal};\n use syntax_pos::{Span, DUMMY_SP};\n-use log;\n+use log::{debug, info, log_enabled};\n \n pub struct Library {\n     pub dylib: Option<(PathBuf, PathKind)>,\n@@ -342,7 +343,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn load(&mut self, locate_ctxt: &mut locator::Context) -> Option<LoadResult> {\n+    fn load(&mut self, locate_ctxt: &mut locator::Context<'_>) -> Option<LoadResult> {\n         let library = locate_ctxt.maybe_load_library_crate()?;\n \n         // In the case that we're loading a crate, but not matching\n@@ -427,7 +428,7 @@ impl<'a> CrateLoader<'a> {\n         // The map from crate numbers in the crate we're resolving to local crate numbers.\n         // We map 0 and all other holes in the map to our parent crate. The \"additional\"\n         // self-dependencies should be harmless.\n-        ::std::iter::once(krate).chain(crate_root.crate_deps\n+        std::iter::once(krate).chain(crate_root.crate_deps\n                                                  .decode(metadata)\n                                                  .map(|dep| {\n             info!(\"resolving dep crate {} hash: `{}` extra filename: `{}`\", dep.name, dep.hash,\n@@ -522,7 +523,7 @@ impl<'a> CrateLoader<'a> {\n     fn load_derive_macros(&mut self, root: &CrateRoot, dylib: Option<PathBuf>, span: Span)\n                           -> Vec<(ast::Name, Lrc<SyntaxExtension>)> {\n         use std::{env, mem};\n-        use dynamic_lib::DynamicLibrary;\n+        use crate::dynamic_lib::DynamicLibrary;\n         use proc_macro::bridge::client::ProcMacro;\n         use syntax_ext::deriving::custom::ProcMacroDerive;\n         use syntax_ext::proc_macro_impl::{AttrProcMacro, BangProcMacro};\n@@ -996,7 +997,7 @@ impl<'a> CrateLoader<'a> {\n                        item.ident, orig_name);\n                 let orig_name = match orig_name {\n                     Some(orig_name) => {\n-                        ::validate_crate_name(Some(self.sess), &orig_name.as_str(),\n+                        crate::validate_crate_name(Some(self.sess), &orig_name.as_str(),\n                                             Some(item.span));\n                         orig_name\n                     }"}, {"sha": "a2f69bc45634dfe56689a0af428cd5413f2a02a1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,7 +1,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use schema;\n+use crate::schema;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n@@ -19,7 +19,7 @@ pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePrefere\n pub use rustc::middle::cstore::NativeLibraryKind::*;\n pub use rustc::middle::cstore::{CrateSource, LibSource, ForeignModule};\n \n-pub use cstore_impl::{provide, provide_extern};\n+pub use crate::cstore_impl::{provide, provide_extern};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external"}, {"sha": "49a3e335e34179eec2798c85af5d8b78ec1e12f3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,9 +1,9 @@\n-use cstore::{self, LoadedMacro};\n-use encoder;\n-use link_args;\n-use native_libs;\n-use foreign_modules;\n-use schema;\n+use crate::cstore::{self, LoadedMacro};\n+use crate::encoder;\n+use crate::link_args;\n+use crate::native_libs;\n+use crate::foreign_modules;\n+use crate::schema;\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n@@ -51,7 +51,7 @@ macro_rules! provide {\n                     index: CRATE_DEF_INDEX\n                 });\n                 let dep_node = def_path_hash\n-                    .to_dep_node(::rustc::dep_graph::DepKind::CrateMetadata);\n+                    .to_dep_node(rustc::dep_graph::DepKind::CrateMetadata);\n                 // The DepNodeIndex of the DepNode::CrateMetadata should be\n                 // cached somewhere, so that we can use read_index().\n                 $tcx.dep_graph.read(dep_node);\n@@ -421,7 +421,7 @@ impl cstore::CStore {\n             use syntax::ext::base::SyntaxExtension;\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n \n-            let client = ::proc_macro::bridge::client::Client::expand1(::proc_macro::quote);\n+            let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n                 expander: Box::new(BangProcMacro { client }),\n                 allow_internal_unstable: true,"}, {"sha": "6d7907b096ac67dceafcf2c3e9a1f0ba4337afd4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,7 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n-use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n-use schema::*;\n+use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n+use crate::schema::*;\n \n use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash, Definitions};\n@@ -34,6 +34,7 @@ use syntax::symbol::InternedString;\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::hygiene::Mark;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n+use log::debug;\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,\n@@ -545,7 +546,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn get_variant(&self,\n                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                   item: &Entry,\n+                   item: &Entry<'_>,\n                    index: DefIndex,\n                    adt_kind: ty::AdtKind)\n                    -> ty::VariantDef"}, {"sha": "c27d13be4935839357e58ec2020ad8e0049ea9c3", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_diagnostics, register_long_diagnostics};\n+\n register_long_diagnostics! {\n E0454: r##\"\n A link name was given with an empty name. Erroneous code example:"}, {"sha": "b9dc4195cb228dbbba9a28bc4dc952405ae16b98", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -76,7 +76,6 @@ impl DynamicLibrary {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use libc;\n     use std::mem;\n \n     #[test]\n@@ -127,7 +126,6 @@ mod tests {\n \n #[cfg(unix)]\n mod dl {\n-    use libc;\n     use std::ffi::{CStr, OsStr, CString};\n     use std::os::unix::prelude::*;\n     use std::ptr;"}, {"sha": "d68ab9750b9701c207c481f07b8f97d1b5799c87", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,7 +1,7 @@\n-use index::Index;\n-use index_builder::{FromId, IndexBuilder, Untracked};\n-use isolated_encoder::IsolatedEncoder;\n-use schema::*;\n+use crate::index::Index;\n+use crate::index_builder::{FromId, IndexBuilder, Untracked};\n+use crate::isolated_encoder::IsolatedEncoder;\n+use crate::schema::*;\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -34,6 +34,7 @@ use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax_pos::{self, hygiene, FileName, SourceFile, Span};\n+use log::{debug, trace};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -1521,7 +1522,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(&mut self,\n-                               exported_symbols: &[(ExportedSymbol, SymbolExportLevel)])\n+                               exported_symbols: &[(ExportedSymbol<'_>, SymbolExportLevel)])\n                                -> EncodedExportedSymbols {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates."}, {"sha": "18f30383090cd7d11ac64525a59cda720ff1e1ed", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,9 +1,10 @@\n-use schema::*;\n+use crate::schema::*;\n \n use rustc::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace};\n use rustc_serialize::opaque::Encoder;\n use std::slice;\n use std::u32;\n+use log::debug;\n \n /// While we are generating the metadata, we also track the position\n /// of each DefIndex. It is not required that all definitions appear\n@@ -24,12 +25,12 @@ impl Index {\n         }\n     }\n \n-    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry>) {\n+    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry<'_>>) {\n         assert!(def_id.is_local());\n         self.record_index(def_id.index, entry);\n     }\n \n-    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry>) {\n+    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n         let space_index = item.address_space().index();"}, {"sha": "4175f7acd06889a8694d853166b4d463a4a9b2c5", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -45,10 +45,10 @@\n //! give a callback fn, rather than taking a closure: it allows us to\n //! easily control precisely what data is given to that fn.\n \n-use encoder::EncodeContext;\n-use index::Index;\n-use schema::*;\n-use isolated_encoder::IsolatedEncoder;\n+use crate::encoder::EncodeContext;\n+use crate::index::Index;\n+use crate::schema::*;\n+use crate::isolated_encoder::IsolatedEncoder;\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -133,21 +133,21 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n /// `DefId` index, or implement the `read` method so that it can add\n /// a read of whatever dep-graph nodes are appropriate.\n pub trait DepGraphRead {\n-    fn read(&self, tcx: TyCtxt);\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>);\n }\n \n impl DepGraphRead for DefId {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n impl DepGraphRead for ast::NodeId {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n impl<T> DepGraphRead for Option<T>\n     where T: DepGraphRead\n {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         match *self {\n             Some(ref v) => v.read(tcx),\n             None => (),\n@@ -158,7 +158,7 @@ impl<T> DepGraphRead for Option<T>\n impl<T> DepGraphRead for [T]\n     where T: DepGraphRead\n {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         for i in self {\n             i.read(tcx);\n         }\n@@ -171,7 +171,7 @@ macro_rules! read_tuple {\n             where $($name: DepGraphRead),*\n         {\n             #[allow(non_snake_case)]\n-            fn read(&self, tcx: TyCtxt) {\n+            fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n                 let &($(ref $name),*) = self;\n                 $($name.read(tcx);)*\n             }\n@@ -184,7 +184,7 @@ read_tuple!(A, B, C);\n macro_rules! read_hir {\n     ($t:ty) => {\n         impl<'tcx> DepGraphRead for &'tcx $t {\n-            fn read(&self, tcx: TyCtxt) {\n+            fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n                 tcx.hir().read(self.id);\n             }\n         }\n@@ -208,7 +208,7 @@ read_hir!(hir::MacroDef);\n pub struct Untracked<T>(pub T);\n \n impl<T> DepGraphRead for Untracked<T> {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n /// Newtype that can be used to package up misc data extracted from a\n@@ -218,7 +218,7 @@ impl<T> DepGraphRead for Untracked<T> {\n pub struct FromId<T>(pub ast::NodeId, pub T);\n \n impl<T> DepGraphRead for FromId<T> {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         tcx.hir().read(self.0);\n     }\n }"}, {"sha": "e879a73e650bb026b0e9c902a703c4185a6f9544", "filename": "src/librustc_metadata/isolated_encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fisolated_encoder.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,5 +1,5 @@\n-use encoder::EncodeContext;\n-use schema::{Lazy, LazySeq};\n+use crate::encoder::EncodeContext;\n+use crate::schema::{Lazy, LazySeq};\n use rustc::ty::TyCtxt;\n use rustc_serialize::Encodable;\n "}, {"sha": "c8891296417d8081b38bf64be02f9881c8e83f57", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -15,23 +15,15 @@\n \n #![recursion_limit=\"256\"]\n \n+#![deny(rust_2018_idioms)]\n+\n extern crate libc;\n-#[macro_use]\n-extern crate log;\n-extern crate memmap;\n-extern crate stable_deref_trait;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate flate2;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n-extern crate rustc_errors as errors;\n-extern crate syntax_ext;\n extern crate proc_macro;\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_target;\n #[macro_use]\n extern crate rustc_data_structures;\n "}, {"sha": "f120072b37c05cd1e0462a73fec98898b4bf6e2a", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -212,9 +212,9 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::locator or metadata::creader for all the juicy details!\n \n-use cstore::{MetadataRef, MetadataBlob};\n-use creader::Library;\n-use schema::{METADATA_HEADER, rustc_version};\n+use crate::cstore::{MetadataRef, MetadataBlob};\n+use crate::creader::Library;\n+use crate::schema::{METADATA_HEADER, rustc_version};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n@@ -226,6 +226,7 @@ use rustc::util::nodemap::FxHashMap;\n \n use errors::DiagnosticBuilder;\n use syntax::symbol::Symbol;\n+use syntax::struct_span_err;\n use syntax_pos::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n@@ -241,6 +242,8 @@ use flate2::read::DeflateDecoder;\n \n use rustc_data_structures::owning_ref::OwningRef;\n \n+use log::{debug, info, warn};\n+\n pub struct CrateMismatch {\n     path: PathBuf,\n     got: String,\n@@ -283,7 +286,7 @@ enum CrateFlavor {\n }\n \n impl fmt::Display for CrateFlavor {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match *self {\n             CrateFlavor::Rlib => \"rlib\",\n             CrateFlavor::Rmeta => \"rmeta\",\n@@ -600,7 +603,7 @@ impl<'a> Context<'a> {\n             }\n         }\n \n-        let mut err: Option<DiagnosticBuilder> = None;\n+        let mut err: Option<DiagnosticBuilder<'_>> = None;\n         for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n             let (hash, metadata) ="}, {"sha": "118fb203c69a1ad3f6e50ce35503a5fdfc580a36", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -9,6 +9,7 @@ use syntax::attr;\n use syntax::source_map::Span;\n use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::Symbol;\n+use syntax::{span_err, struct_span_err};\n \n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {"}, {"sha": "af79ea37dff55eb9010ce826109923ab024685b4", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267bc2d4a0ba006d63b58eb927362d620930c68/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=7267bc2d4a0ba006d63b58eb927362d620930c68", "patch": "@@ -1,4 +1,4 @@\n-use index;\n+use crate::index;\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -518,7 +518,7 @@ pub enum AssociatedContainer {\n     ImplFinal,\n }\n \n-impl_stable_hash_for!(enum ::schema::AssociatedContainer {\n+impl_stable_hash_for!(enum crate::schema::AssociatedContainer {\n     TraitRequired,\n     TraitWithDefault,\n     ImplDefault,"}]}