{"sha": "6568ef338efe046f23d3c9e2623ba0a392c85def", "node_id": "C_kwDOAAsO6NoAKDY1NjhlZjMzOGVmZTA0NmYyM2QzYzllMjYyM2JhMGEzOTJjODVkZWY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T00:43:34Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:24:25Z"}, "message": "Remove `path_span` argument to the `visit_path_segment` methods.\n\nThe `visit_path_segment` method of both the AST and HIR visitors has a\n`path_span` argument that isn't necessary. This commit removes it.\n\nThere are two very small and inconsequential functional changes.\n\n- One call to `NodeCollector::insert` now is passed a path segment\n  identifier span instead of a full path span. This span is only used in\na panic message printed in the case of an internal compiler bug.\n\n- Likewise, one call to `LifetimeCollectVisitor::record_elided_anchor`\n  now uses a path segment identifier span instead of a full path span.\n  This span is used to make some `'_` lifetimes.", "tree": {"sha": "90a798eedb8027878a512813a9dd56e17bc35e74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a798eedb8027878a512813a9dd56e17bc35e74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6568ef338efe046f23d3c9e2623ba0a392c85def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6568ef338efe046f23d3c9e2623ba0a392c85def", "html_url": "https://github.com/rust-lang/rust/commit/6568ef338efe046f23d3c9e2623ba0a392c85def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6568ef338efe046f23d3c9e2623ba0a392c85def/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "html_url": "https://github.com/rust-lang/rust/commit/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772"}], "stats": {"total": 132, "additions": 57, "deletions": 75}, "files": [{"sha": "039ff4ded114216eb248f6244f8c0356bffc64b6", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -201,11 +201,11 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_use_tree(&mut self, use_tree: &'ast UseTree, id: NodeId, _nested: bool) {\n         walk_use_tree(self, use_tree, id)\n     }\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n-        walk_path_segment(self, path_span, path_segment)\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n+        walk_path_segment(self, path_segment)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n-        walk_generic_args(self, path_span, generic_args)\n+    fn visit_generic_args(&mut self, generic_args: &'ast GenericArgs) {\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n         walk_generic_arg(self, generic_arg)\n@@ -435,7 +435,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n \n pub fn walk_path<'a, V: Visitor<'a>>(visitor: &mut V, path: &'a Path) {\n     for segment in &path.segments {\n-        visitor.visit_path_segment(path.span, segment);\n+        visitor.visit_path_segment(segment);\n     }\n }\n \n@@ -457,18 +457,14 @@ pub fn walk_use_tree<'a, V: Visitor<'a>>(visitor: &mut V, use_tree: &'a UseTree,\n     }\n }\n \n-pub fn walk_path_segment<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    path_span: Span,\n-    segment: &'a PathSegment,\n-) {\n+pub fn walk_path_segment<'a, V: Visitor<'a>>(visitor: &mut V, segment: &'a PathSegment) {\n     visitor.visit_ident(segment.ident);\n     if let Some(ref args) = segment.args {\n-        visitor.visit_generic_args(path_span, args);\n+        visitor.visit_generic_args(args);\n     }\n }\n \n-pub fn walk_generic_args<'a, V>(visitor: &mut V, _path_span: Span, generic_args: &'a GenericArgs)\n+pub fn walk_generic_args<'a, V>(visitor: &mut V, generic_args: &'a GenericArgs)\n where\n     V: Visitor<'a>,\n {\n@@ -502,7 +498,7 @@ where\n pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'a AssocConstraint) {\n     visitor.visit_ident(constraint.ident);\n     if let Some(ref gen_args) = constraint.gen_args {\n-        visitor.visit_generic_args(gen_args.span(), gen_args);\n+        visitor.visit_generic_args(gen_args);\n     }\n     match constraint.kind {\n         AssocConstraintKind::Equality { ref term } => match term {\n@@ -800,7 +796,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _span) => {\n-            visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_path_segment(segment);\n             visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "cb1f11d8abc1ba3926b7f6d29c8779f3bee8fa1a", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -245,9 +245,9 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment<'hir>) {\n-        self.insert(path_span, path_segment.hir_id, Node::PathSegment(path_segment));\n-        intravisit::walk_path_segment(self, path_span, path_segment);\n+    fn visit_path_segment(&mut self, path_segment: &'hir PathSegment<'hir>) {\n+        self.insert(path_segment.ident.span, path_segment.hir_id, Node::PathSegment(path_segment));\n+        intravisit::walk_path_segment(self, path_segment);\n     }\n \n     fn visit_ty(&mut self, ty: &'hir Ty<'hir>) {"}, {"sha": "914fc5f58da140a7110f3a380b9e0788ad4db42c", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -63,9 +63,9 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n         self.record_lifetime_use(*lifetime);\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n-        self.record_elided_anchor(path_segment.id, path_span);\n-        visit::walk_path_segment(self, path_span, path_segment);\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n+        self.record_elided_anchor(path_segment.id, path_segment.ident.span);\n+        visit::walk_path_segment(self, path_segment);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {"}, {"sha": "595a655f30f48fc705299720b679a309b016e929", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -223,11 +223,9 @@ impl<'a> AstValidator<'a> {\n                 for (i, segment) in path.segments.iter().enumerate() {\n                     // Allow `impl Trait` iff we're on the final path segment\n                     if i == path.segments.len() - 1 {\n-                        self.visit_path_segment(path.span, segment);\n+                        self.visit_path_segment(segment);\n                     } else {\n-                        self.with_banned_impl_trait(|this| {\n-                            this.visit_path_segment(path.span, segment)\n-                        });\n+                        self.with_banned_impl_trait(|this| this.visit_path_segment(segment));\n                     }\n                 }\n             }\n@@ -1293,7 +1291,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     // Mirrors `visit::walk_generic_args`, but tracks relevant state.\n-    fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n+    fn visit_generic_args(&mut self, generic_args: &'a GenericArgs) {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 self.check_generic_args_before_constraints(data);"}, {"sha": "87b5c7fbf26cdc63d52b41c24bf28709a77a379f", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -115,9 +115,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_use_tree(self, use_tree, id)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &GenericArgs) {\n+    fn visit_generic_args(&mut self, generic_args: &GenericArgs) {\n         self.count += 1;\n-        walk_generic_args(self, path_span, generic_args)\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_assoc_constraint(&mut self, constraint: &AssocConstraint) {\n         self.count += 1;"}, {"sha": "91a8f44fc26c3aa2ce33d39941b8c089d239ed56", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -420,17 +420,18 @@ pub trait Visitor<'v>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, span: Span) {\n-        walk_qpath(self, qpath, id, span)\n+    // The span is that of the surrounding type/pattern/expr/whatever.\n+    fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, _span: Span) {\n+        walk_qpath(self, qpath, id)\n     }\n     fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {\n         walk_path(self, path)\n     }\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment<'v>) {\n-        walk_path_segment(self, path_span, path_segment)\n+    fn visit_path_segment(&mut self, path_segment: &'v PathSegment<'v>) {\n+        walk_path_segment(self, path_segment)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'v GenericArgs<'v>) {\n-        walk_generic_args(self, path_span, generic_args)\n+    fn visit_generic_args(&mut self, generic_args: &'v GenericArgs<'v>) {\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding<'v>) {\n         walk_assoc_type_binding(self, type_binding)\n@@ -693,48 +694,35 @@ pub fn walk_inf<'v, V: Visitor<'v>>(visitor: &mut V, inf: &'v InferArg) {\n     visitor.visit_id(inf.hir_id);\n }\n \n-pub fn walk_qpath<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    qpath: &'v QPath<'v>,\n-    id: HirId,\n-    span: Span,\n-) {\n+pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath<'v>, id: HirId) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n             walk_list!(visitor, visit_ty, maybe_qself);\n             visitor.visit_path(path, id)\n         }\n         QPath::TypeRelative(ref qself, ref segment) => {\n             visitor.visit_ty(qself);\n-            visitor.visit_path_segment(span, segment);\n+            visitor.visit_path_segment(segment);\n         }\n         QPath::LangItem(..) => {}\n     }\n }\n \n pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>) {\n     for segment in path.segments {\n-        visitor.visit_path_segment(path.span, segment);\n+        visitor.visit_path_segment(segment);\n     }\n }\n \n-pub fn walk_path_segment<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    path_span: Span,\n-    segment: &'v PathSegment<'v>,\n-) {\n+pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V, segment: &'v PathSegment<'v>) {\n     visitor.visit_ident(segment.ident);\n     visitor.visit_id(segment.hir_id);\n     if let Some(ref args) = segment.args {\n-        visitor.visit_generic_args(path_span, args);\n+        visitor.visit_generic_args(args);\n     }\n }\n \n-pub fn walk_generic_args<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    _path_span: Span,\n-    generic_args: &'v GenericArgs<'v>,\n-) {\n+pub fn walk_generic_args<'v, V: Visitor<'v>>(visitor: &mut V, generic_args: &'v GenericArgs<'v>) {\n     walk_list!(visitor, visit_generic_arg, generic_args.args);\n     walk_list!(visitor, visit_assoc_type_binding, generic_args.bindings);\n }\n@@ -745,7 +733,7 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n ) {\n     visitor.visit_id(type_binding.hir_id);\n     visitor.visit_ident(type_binding.ident);\n-    visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n+    visitor.visit_generic_args(type_binding.gen_args);\n     match type_binding.kind {\n         TypeBindingKind::Equality { ref term } => match term {\n             Term::Ty(ref ty) => visitor.visit_ty(ty),\n@@ -822,9 +810,9 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericB\n         GenericBound::Trait(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        GenericBound::LangItemTrait(_, span, hir_id, args) => {\n+        GenericBound::LangItemTrait(_, _span, hir_id, args) => {\n             visitor.visit_id(hir_id);\n-            visitor.visit_generic_args(span, args);\n+            visitor.visit_generic_args(args);\n         }\n         GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n@@ -1095,7 +1083,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::MethodCall(ref segment, receiver, arguments, _) => {\n-            visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_path_segment(segment);\n             visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "c96e900a9746012fc03a2dd857acdfbff7509e4d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -1467,7 +1467,7 @@ impl TypeAliasBounds {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help(span, fluent::lint::builtin_type_alias_bounds_help);\n                 }\n-                intravisit::walk_qpath(self, qpath, id, span)\n+                intravisit::walk_qpath(self, qpath, id)\n             }\n         }\n "}, {"sha": "5afe51d44d39f16ac10a2237b1b0503b48a97c99", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -266,9 +266,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_path(self, p);\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, s: &'a ast::PathSegment) {\n+    fn visit_path_segment(&mut self, s: &'a ast::PathSegment) {\n         self.check_id(s.id);\n-        ast_visit::walk_path_segment(self, path_span, s);\n+        ast_visit::walk_path_segment(self, s);\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {"}, {"sha": "d602b1a05ced7bd65bc880a1e3af8a494de73fb9", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -447,14 +447,14 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_path(self, path)\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v hir::PathSegment<'v>) {\n+    fn visit_path_segment(&mut self, path_segment: &'v hir::PathSegment<'v>) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n-        hir_visit::walk_path_segment(self, path_span, path_segment)\n+        hir_visit::walk_path_segment(self, path_segment)\n     }\n \n-    fn visit_generic_args(&mut self, sp: Span, ga: &'v hir::GenericArgs<'v>) {\n+    fn visit_generic_args(&mut self, ga: &'v hir::GenericArgs<'v>) {\n         self.record(\"GenericArgs\", Id::None, ga);\n-        hir_visit::walk_generic_args(self, sp, ga)\n+        hir_visit::walk_generic_args(self, ga)\n     }\n \n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding<'v>) {\n@@ -652,21 +652,21 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // one non-inline use (in `ast::Path::segments`). The latter case is more\n     // common than the former case, so we implement this visitor and tolerate\n     // the double counting in the former case.\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {\n+    fn visit_path_segment(&mut self, path_segment: &'v ast::PathSegment) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n-        ast_visit::walk_path_segment(self, path_span, path_segment)\n+        ast_visit::walk_path_segment(self, path_segment)\n     }\n \n     // `GenericArgs` has one inline use (in `ast::AssocConstraint::gen_args`) and one\n     // non-inline use (in `ast::PathSegment::args`). The latter case is more\n     // common, so we implement `visit_generic_args` and tolerate the double\n     // counting in the former case.\n-    fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n+    fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n             [AngleBracketed, Parenthesized]\n         );\n-        ast_visit::walk_generic_args(self, sp, g)\n+        ast_visit::walk_generic_args(self, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {"}, {"sha": "edc1b90c9e55ac1b12aa299b79c97b562dec2b8a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -1315,7 +1315,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             }\n         }\n \n-        intravisit::walk_qpath(self, qpath, id, span);\n+        intravisit::walk_qpath(self, qpath, id);\n     }\n \n     // Check types of patterns."}, {"sha": "0aea90bb5aaf3e19a619365c21ef039bb1d8a746", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -1030,7 +1030,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         if let Some(ref gen_args) = constraint.gen_args {\n             // Forbid anonymous lifetimes in GAT parameters until proper semantics are decided.\n             self.with_lifetime_rib(LifetimeRibKind::AnonymousReportError, |this| {\n-                this.visit_generic_args(gen_args.span(), gen_args)\n+                this.visit_generic_args(gen_args)\n             });\n         }\n         match constraint.kind {\n@@ -1044,10 +1044,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n         if let Some(ref args) = path_segment.args {\n             match &**args {\n-                GenericArgs::AngleBracketed(..) => visit::walk_generic_args(self, path_span, args),\n+                GenericArgs::AngleBracketed(..) => visit::walk_generic_args(self, args),\n                 GenericArgs::Parenthesized(p_args) => {\n                     // Probe the lifetime ribs to know how to behave.\n                     for rib in self.lifetime_ribs.iter().rev() {\n@@ -1078,7 +1078,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // We have nowhere to introduce generics.  Code is malformed,\n                             // so use regular lifetime resolution to avoid spurious errors.\n                             LifetimeRibKind::Item | LifetimeRibKind::Generics { .. } => {\n-                                visit::walk_generic_args(self, path_span, args);\n+                                visit::walk_generic_args(self, args);\n                                 break;\n                             }\n                             LifetimeRibKind::AnonymousCreateParameter { .. }\n@@ -3798,7 +3798,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 for argument in arguments {\n                     self.resolve_expr(argument, None);\n                 }\n-                self.visit_path_segment(expr.span, segment);\n+                self.visit_path_segment(segment);\n             }\n \n             ExprKind::Call(ref callee, ref arguments) => {"}, {"sha": "14fa283657afdb985d51ec8948a141ed61d1a074", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -1827,7 +1827,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n                     // is, those would be potentially inputs to\n                     // projections\n                     if let Some(last_segment) = path.segments.last() {\n-                        self.visit_path_segment(path.span, last_segment);\n+                        self.visit_path_segment(last_segment);\n                     }\n                 }\n "}, {"sha": "8bd42d8d21653fa77b57ed4284351ea76ea86ce0", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568ef338efe046f23d3c9e2623ba0a392c85def/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=6568ef338efe046f23d3c9e2623ba0a392c85def", "patch": "@@ -1306,7 +1306,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 if let hir::QPath::Resolved(_, path) = path {\n                     self.write_sub_paths_truncated(path);\n                 }\n-                intravisit::walk_qpath(self, path, t.hir_id, t.span);\n+                intravisit::walk_qpath(self, path, t.hir_id);\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 self.visit_ty(ty);"}]}