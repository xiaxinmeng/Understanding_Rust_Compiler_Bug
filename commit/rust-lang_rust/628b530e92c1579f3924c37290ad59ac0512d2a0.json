{"sha": "628b530e92c1579f3924c37290ad59ac0512d2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOGI1MzBlOTJjMTU3OWYzOTI0YzM3MjkwYWQ1OWFjMDUxMmQyYTA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T15:50:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T15:50:31Z"}, "message": "Some more Ty displaying cleanup", "tree": {"sha": "88a7e3863c78703618dc0252da132693056e4d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88a7e3863c78703618dc0252da132693056e4d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628b530e92c1579f3924c37290ad59ac0512d2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628b530e92c1579f3924c37290ad59ac0512d2a0", "html_url": "https://github.com/rust-lang/rust/commit/628b530e92c1579f3924c37290ad59ac0512d2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628b530e92c1579f3924c37290ad59ac0512d2a0/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76572e67eabffa959c665f8450dbb12d71848aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/76572e67eabffa959c665f8450dbb12d71848aba", "html_url": "https://github.com/rust-lang/rust/commit/76572e67eabffa959c665f8450dbb12d71848aba"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "884cea52a7d2559c3ef346fca8f50254d4de79ef", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/628b530e92c1579f3924c37290ad59ac0512d2a0/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b530e92c1579f3924c37290ad59ac0512d2a0/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=628b530e92c1579f3924c37290ad59ac0512d2a0", "patch": "@@ -304,8 +304,8 @@ impl HirDisplay for Ty {\n         match self {\n             Ty::Bool => write!(f, \"bool\")?,\n             Ty::Char => write!(f, \"char\")?,\n-            Ty::Int(t) => write!(f, \"{}\", t.ty_to_string())?,\n-            Ty::Float(t) => write!(f, \"{}\", t.ty_to_string())?,\n+            Ty::Int(t) => write!(f, \"{}\", t)?,\n+            Ty::Float(t) => write!(f, \"{}\", t)?,\n             Ty::Str => write!(f, \"str\")?,\n             Ty::Slice(t) | Ty::Array(t) => {\n                 write!(f, \"[{}]\", t.display(f.db))?;"}, {"sha": "30aeac48e6f1505617d08a330585b3942c02a683", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/628b530e92c1579f3924c37290ad59ac0512d2a0/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b530e92c1579f3924c37290ad59ac0512d2a0/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=628b530e92c1579f3924c37290ad59ac0512d2a0", "patch": "@@ -10,14 +10,6 @@ pub enum UncertainIntTy {\n }\n \n impl UncertainIntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n-            UncertainIntTy::Unknown => \"{integer}\",\n-            UncertainIntTy::Signed(ty) => ty.ty_to_string(),\n-            UncertainIntTy::Unsigned(ty) => ty.ty_to_string(),\n-        }\n-    }\n-\n     pub fn from_name(name: &Name) -> Option<UncertainIntTy> {\n         if let Some(ty) = IntTy::from_name(name) {\n             Some(UncertainIntTy::Signed(ty))\n@@ -29,20 +21,23 @@ impl UncertainIntTy {\n     }\n }\n \n+impl fmt::Display for UncertainIntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            UncertainIntTy::Unknown => write!(f, \"{{integer}}\"),\n+            UncertainIntTy::Signed(ty) => write!(f, \"{}\", ty),\n+            UncertainIntTy::Unsigned(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq, Hash, Copy)]\n pub enum UncertainFloatTy {\n     Unknown,\n     Known(FloatTy),\n }\n \n impl UncertainFloatTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n-            UncertainFloatTy::Unknown => \"{float}\",\n-            UncertainFloatTy::Known(ty) => ty.ty_to_string(),\n-        }\n-    }\n-\n     pub fn from_name(name: &Name) -> Option<UncertainFloatTy> {\n         if let Some(ty) = FloatTy::from_name(name) {\n             Some(UncertainFloatTy::Known(ty))\n@@ -52,6 +47,15 @@ impl UncertainFloatTy {\n     }\n }\n \n+impl fmt::Display for UncertainFloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            UncertainFloatTy::Unknown => write!(f, \"{{float}}\"),\n+            UncertainFloatTy::Known(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n pub enum IntTy {\n     Isize,\n@@ -70,22 +74,19 @@ impl fmt::Debug for IntTy {\n \n impl fmt::Display for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl IntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n+        let s = match *self {\n             IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n             IntTy::I16 => \"i16\",\n             IntTy::I32 => \"i32\",\n             IntTy::I64 => \"i64\",\n             IntTy::I128 => \"i128\",\n-        }\n+        };\n+        write!(f, \"{}\", s)\n     }\n+}\n \n+impl IntTy {\n     pub fn from_name(name: &Name) -> Option<IntTy> {\n         match name.as_known_name()? {\n             KnownName::Isize => Some(IntTy::Isize),\n@@ -109,18 +110,21 @@ pub enum UintTy {\n     U128,\n }\n \n-impl UintTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n+impl fmt::Display for UintTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let s = match *self {\n             UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n             UintTy::U16 => \"u16\",\n             UintTy::U32 => \"u32\",\n             UintTy::U64 => \"u64\",\n             UintTy::U128 => \"u128\",\n-        }\n+        };\n+        write!(f, \"{}\", s)\n     }\n+}\n \n+impl UintTy {\n     pub fn from_name(name: &Name) -> Option<UintTy> {\n         match name.as_known_name()? {\n             KnownName::Usize => Some(UintTy::Usize),\n@@ -140,12 +144,6 @@ impl fmt::Debug for UintTy {\n     }\n }\n \n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Copy, PartialOrd, Ord)]\n pub enum FloatTy {\n     F32,"}]}