{"sha": "d9fd5eaae86fe9b21ec38da6acda296e64f4e93d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZmQ1ZWFhZTg2ZmU5YjIxZWMzOGRhNmFjZGEyOTZlNjRmNGU5M2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-06-20T15:52:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-06-20T15:54:45Z"}, "message": "cfg_eval: Replace multiple `unwrap`s with a single `unwrap`", "tree": {"sha": "0b94a0fda19e1994198cb62fea0709b6584623cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b94a0fda19e1994198cb62fea0709b6584623cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d", "html_url": "https://github.com/rust-lang/rust/commit/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0729f37877d32565a6829327db84a84b27fc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0729f37877d32565a6829327db84a84b27fc3b", "html_url": "https://github.com/rust-lang/rust/commit/3f0729f37877d32565a6829327db84a84b27fc3b"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "d7b46f282151fe32ac11e8dc1432d98f0ba58bb6", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9fd5eaae86fe9b21ec38da6acda296e64f4e93d/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=d9fd5eaae86fe9b21ec38da6acda296e64f4e93d", "patch": "@@ -36,48 +36,48 @@ crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Annotatable {\n         },\n     }\n     .configure_annotatable(annotatable)\n+    // Since the item itself has already been configured by the `InvocationCollector`,\n+    // we know that fold result vector will contain exactly one element.\n+    .unwrap()\n }\n \n struct CfgEval<'a, 'b> {\n     cfg: &'a mut StripUnconfigured<'b>,\n }\n \n-fn flat_map_annotatable(vis: &mut impl MutVisitor, annotatable: Annotatable) -> Annotatable {\n-    // Since the item itself has already been configured by the InvocationCollector,\n-    // we know that fold result vector will contain exactly one element\n+fn flat_map_annotatable(\n+    vis: &mut impl MutVisitor,\n+    annotatable: Annotatable,\n+) -> Option<Annotatable> {\n     match annotatable {\n-        Annotatable::Item(item) => Annotatable::Item(vis.flat_map_item(item).pop().unwrap()),\n+        Annotatable::Item(item) => vis.flat_map_item(item).pop().map(Annotatable::Item),\n         Annotatable::TraitItem(item) => {\n-            Annotatable::TraitItem(vis.flat_map_trait_item(item).pop().unwrap())\n+            vis.flat_map_trait_item(item).pop().map(Annotatable::TraitItem)\n         }\n         Annotatable::ImplItem(item) => {\n-            Annotatable::ImplItem(vis.flat_map_impl_item(item).pop().unwrap())\n+            vis.flat_map_impl_item(item).pop().map(Annotatable::ImplItem)\n         }\n         Annotatable::ForeignItem(item) => {\n-            Annotatable::ForeignItem(vis.flat_map_foreign_item(item).pop().unwrap())\n+            vis.flat_map_foreign_item(item).pop().map(Annotatable::ForeignItem)\n         }\n         Annotatable::Stmt(stmt) => {\n-            Annotatable::Stmt(stmt.map(|stmt| vis.flat_map_stmt(stmt).pop().unwrap()))\n+            vis.flat_map_stmt(stmt.into_inner()).pop().map(P).map(Annotatable::Stmt)\n         }\n-        Annotatable::Expr(mut expr) => Annotatable::Expr({\n+        Annotatable::Expr(mut expr) => {\n             vis.visit_expr(&mut expr);\n-            expr\n-        }),\n-        Annotatable::Arm(arm) => Annotatable::Arm(vis.flat_map_arm(arm).pop().unwrap()),\n-        Annotatable::ExprField(field) => {\n-            Annotatable::ExprField(vis.flat_map_expr_field(field).pop().unwrap())\n+            Some(Annotatable::Expr(expr))\n         }\n-        Annotatable::PatField(fp) => {\n-            Annotatable::PatField(vis.flat_map_pat_field(fp).pop().unwrap())\n+        Annotatable::Arm(arm) => vis.flat_map_arm(arm).pop().map(Annotatable::Arm),\n+        Annotatable::ExprField(field) => {\n+            vis.flat_map_expr_field(field).pop().map(Annotatable::ExprField)\n         }\n+        Annotatable::PatField(fp) => vis.flat_map_pat_field(fp).pop().map(Annotatable::PatField),\n         Annotatable::GenericParam(param) => {\n-            Annotatable::GenericParam(vis.flat_map_generic_param(param).pop().unwrap())\n-        }\n-        Annotatable::Param(param) => Annotatable::Param(vis.flat_map_param(param).pop().unwrap()),\n-        Annotatable::FieldDef(sf) => {\n-            Annotatable::FieldDef(vis.flat_map_field_def(sf).pop().unwrap())\n+            vis.flat_map_generic_param(param).pop().map(Annotatable::GenericParam)\n         }\n-        Annotatable::Variant(v) => Annotatable::Variant(vis.flat_map_variant(v).pop().unwrap()),\n+        Annotatable::Param(param) => vis.flat_map_param(param).pop().map(Annotatable::Param),\n+        Annotatable::FieldDef(sf) => vis.flat_map_field_def(sf).pop().map(Annotatable::FieldDef),\n+        Annotatable::Variant(v) => vis.flat_map_variant(v).pop().map(Annotatable::Variant),\n     }\n }\n \n@@ -122,11 +122,11 @@ impl CfgEval<'_, '_> {\n         self.cfg.configure(node)\n     }\n \n-    pub fn configure_annotatable(&mut self, mut annotatable: Annotatable) -> Annotatable {\n+    fn configure_annotatable(&mut self, mut annotatable: Annotatable) -> Option<Annotatable> {\n         // Tokenizing and re-parsing the `Annotatable` can have a significant\n         // performance impact, so try to avoid it if possible\n         if !CfgFinder::has_cfg_or_cfg_attr(&annotatable) {\n-            return annotatable;\n+            return Some(annotatable);\n         }\n \n         // The majority of parsed attribute targets will never need to have early cfg-expansion"}]}