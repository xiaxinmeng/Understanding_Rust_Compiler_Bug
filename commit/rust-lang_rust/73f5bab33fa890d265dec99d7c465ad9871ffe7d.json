{"sha": "73f5bab33fa890d265dec99d7c465ad9871ffe7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZjViYWIzM2ZhODkwZDI2NWRlYzk5ZDdjNDY1YWQ5ODcxZmZlN2Q=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-27T19:01:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-28T02:11:09Z"}, "message": "rustc_mir: enforce that arguments are replaced with Local's only.", "tree": {"sha": "6b98b1b76f368af1c6905de554d0d2a7d372f17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b98b1b76f368af1c6905de554d0d2a7d372f17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73f5bab33fa890d265dec99d7c465ad9871ffe7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73f5bab33fa890d265dec99d7c465ad9871ffe7d", "html_url": "https://github.com/rust-lang/rust/commit/73f5bab33fa890d265dec99d7c465ad9871ffe7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73f5bab33fa890d265dec99d7c465ad9871ffe7d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0477319afb369d0e2bdb29b813ef10660a6594f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0477319afb369d0e2bdb29b813ef10660a6594f5", "html_url": "https://github.com/rust-lang/rust/commit/0477319afb369d0e2bdb29b813ef10660a6594f5"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "bd3662ca7ce344e5f5848fb014a6ebca787f0b82", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/73f5bab33fa890d265dec99d7c465ad9871ffe7d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f5bab33fa890d265dec99d7c465ad9871ffe7d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=73f5bab33fa890d265dec99d7c465ad9871ffe7d", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     }\n \n     fn cast_box_free_arg(&self, arg: Lvalue<'tcx>, ptr_ty: Ty<'tcx>,\n-                         callsite: &CallSite<'tcx>, caller_mir: &mut Mir<'tcx>) -> Operand<'tcx> {\n+                         callsite: &CallSite<'tcx>, caller_mir: &mut Mir<'tcx>) -> Local {\n         let arg = Rvalue::Ref(\n             self.tcx.types.re_erased,\n             BorrowKind::Mut,\n@@ -539,25 +539,24 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let cast_tmp = LocalDecl::new_temp(ptr_ty, callsite.location.span);\n         let cast_tmp = caller_mir.local_decls.push(cast_tmp);\n-        let cast_tmp = Lvalue::Local(cast_tmp);\n \n         let cast_stmt = Statement {\n             source_info: callsite.location,\n-            kind: StatementKind::Assign(cast_tmp.clone(), raw_ptr)\n+            kind: StatementKind::Assign(Lvalue::Local(cast_tmp), raw_ptr)\n         };\n \n         caller_mir[callsite.bb]\n             .statements.push(cast_stmt);\n \n-        Operand::Consume(cast_tmp)\n+        cast_tmp\n     }\n \n     fn make_call_args(\n         &self,\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n         caller_mir: &mut Mir<'tcx>,\n-    ) -> Vec<Operand<'tcx>> {\n+    ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n         // There is a bit of a mismatch between the *caller* of a closure and the *callee*.\n@@ -589,14 +588,15 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_mir);\n             assert!(args.next().is_none());\n \n+            let tuple = Lvalue::Local(tuple);\n             let tuple_tys = if let ty::TyTuple(s, _) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n                 s\n             } else {\n                 bug!(\"Closure arguments are not passed as a tuple\");\n             };\n \n             // The `closure_ref` in our example above.\n-            let closure_ref_arg = iter::once(Operand::Consume(self_));\n+            let closure_ref_arg = iter::once(self_);\n \n             // The `tmp0`, `tmp1`, and `tmp2` in our example abonve.\n             let tuple_tmp_args =\n@@ -605,14 +605,13 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     let tuple_field = Operand::Consume(tuple.clone().field(Field::new(i), ty));\n \n                     // Spill to a local to make e.g. `tmp0`.\n-                    let tmp = self.create_temp_if_necessary(tuple_field, callsite, caller_mir);\n-                    Operand::Consume(tmp)\n+                    self.create_temp_if_necessary(tuple_field, callsite, caller_mir)\n                 });\n \n             closure_ref_arg.chain(tuple_tmp_args).collect()\n         } else {\n             args.into_iter()\n-                .map(|a| Operand::Consume(self.create_temp_if_necessary(a, callsite, caller_mir)))\n+                .map(|a| self.create_temp_if_necessary(a, callsite, caller_mir))\n                 .collect()\n         }\n     }\n@@ -624,14 +623,14 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n         caller_mir: &mut Mir<'tcx>,\n-    ) -> Lvalue<'tcx> {\n+    ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries.\n \n         if let Operand::Consume(Lvalue::Local(local)) = arg {\n             if caller_mir.local_kind(local) == LocalKind::Temp {\n                 // Reuse the operand if it's a temporary already\n-                return Lvalue::Local(local);\n+                return local;\n             }\n         }\n \n@@ -643,11 +642,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n         let arg_tmp = caller_mir.local_decls.push(arg_tmp);\n-        let arg_tmp = Lvalue::Local(arg_tmp);\n \n         let stmt = Statement {\n             source_info: callsite.location,\n-            kind: StatementKind::Assign(arg_tmp.clone(), arg),\n+            kind: StatementKind::Assign(Lvalue::Local(arg_tmp), arg),\n         };\n         caller_mir[callsite.bb].statements.push(stmt);\n         arg_tmp\n@@ -693,7 +691,7 @@ fn subst_and_normalize<'a, 'tcx: 'a>(\n  */\n struct Integrator<'a, 'tcx: 'a> {\n     block_idx: usize,\n-    args: &'a [Operand<'tcx>],\n+    args: &'a [Local],\n     local_map: IndexVec<Local, Local>,\n     scope_map: IndexVec<VisibilityScope, VisibilityScope>,\n     promoted_map: IndexVec<Promoted, Promoted>,\n@@ -710,15 +708,6 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n         debug!(\"Updating target `{:?}`, new: `{:?}`\", tgt, new);\n         new\n     }\n-\n-    fn arg_index(&self, arg: Local) -> Option<usize> {\n-        let idx = arg.index();\n-        if idx > 0 && idx <= self.args.len() {\n-            Some(idx - 1)\n-        } else {\n-            None\n-        }\n-    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n@@ -737,13 +726,8 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n         let idx = local.index() - 1;\n         if idx < self.args.len() {\n-            match self.args[idx] {\n-                Operand::Consume(Lvalue::Local(l)) => {\n-                    *local = l;\n-                    return;\n-                },\n-                ref op => bug!(\"Arg operand `{:?}` is {:?}, not local\", idx, op)\n-            }\n+            *local = self.args[idx];\n+            return;\n         }\n         *local = self.local_map[Local::new(idx - self.args.len())];\n     }\n@@ -760,17 +744,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n-        if let Operand::Consume(Lvalue::Local(arg)) = *operand {\n-            if let Some(idx) = self.arg_index(arg) {\n-                let new_arg = self.args[idx].clone();\n-                *operand = new_arg;\n-                return;\n-            }\n-        }\n-        self.super_operand(operand, location);\n-    }\n-\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}]}