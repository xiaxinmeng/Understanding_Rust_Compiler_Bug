{"sha": "5c10185aeedd45af551ec3e49304f9e94226c21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTAxODVhZWVkZDQ1YWY1NTFlYzNlNDkzMDRmOWU5NDIyNmMyMWE=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2018-05-16T02:15:43Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2018-05-16T17:19:45Z"}, "message": "tidy: Add a check for empty UI test files\n\nCheck for empty `.stderr` and `.stdout` files in UI test directories.\nEmpty files could  still pass testing for `compile-pass` tests with no output\nso they can get into the repo accidentally, but they are not necessary and can\nbe removed.", "tree": {"sha": "69750a05d494cec4a1970f7c17fb774cb9168c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69750a05d494cec4a1970f7c17fb774cb9168c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c10185aeedd45af551ec3e49304f9e94226c21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c10185aeedd45af551ec3e49304f9e94226c21a", "html_url": "https://github.com/rust-lang/rust/commit/5c10185aeedd45af551ec3e49304f9e94226c21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c10185aeedd45af551ec3e49304f9e94226c21a/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e325d0141ce8d86524f55c2df53835aab895096", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e325d0141ce8d86524f55c2df53835aab895096", "html_url": "https://github.com/rust-lang/rust/commit/0e325d0141ce8d86524f55c2df53835aab895096"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "c15744078077e3d376347c5a518064308f7db9ae", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5c10185aeedd45af551ec3e49304f9e94226c21a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10185aeedd45af551ec3e49304f9e94226c21a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=5c10185aeedd45af551ec3e49304f9e94226c21a", "patch": "@@ -10,32 +10,49 @@\n \n //! Tidy check to ensure that there are no stray `.stderr` files in UI test directories.\n \n+use std::fs;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n-                     &mut |_| false,\n-                     &mut |file_path| {\n-        if let Some(ext) = file_path.extension() {\n-            if ext == \"stderr\" || ext == \"stdout\" {\n-                // Test output filenames have the format:\n-                // $testname.stderr\n-                // $testname.$mode.stderr\n-                // $testname.$revision.stderr\n-                // $testname.$revision.$mode.stderr\n-                //\n-                // For now, just make sure that there is a corresponding\n-                // $testname.rs file.\n-                let testname = file_path.file_name().unwrap()\n-                                        .to_str().unwrap()\n-                                        .splitn(2, '.').next().unwrap();\n-                if !file_path.with_file_name(testname)\n-                             .with_extension(\"rs\")\n-                             .exists() {\n-                    println!(\"Stray file with UI testing output: {:?}\", file_path);\n-                    *bad = true;\n+    super::walk_many(\n+        &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n+        &mut |_| false,\n+        &mut |file_path| {\n+            if let Some(ext) = file_path.extension() {\n+                if ext == \"stderr\" || ext == \"stdout\" {\n+                    // Test output filenames have the format:\n+                    // $testname.stderr\n+                    // $testname.$mode.stderr\n+                    // $testname.$revision.stderr\n+                    // $testname.$revision.$mode.stderr\n+                    //\n+                    // For now, just make sure that there is a corresponding\n+                    // $testname.rs file.\n+                    let testname = file_path\n+                        .file_name()\n+                        .unwrap()\n+                        .to_str()\n+                        .unwrap()\n+                        .splitn(2, '.')\n+                        .next()\n+                        .unwrap();\n+                    if !file_path\n+                        .with_file_name(testname)\n+                        .with_extension(\"rs\")\n+                        .exists()\n+                    {\n+                        println!(\"Stray file with UI testing output: {:?}\", file_path);\n+                        *bad = true;\n+                    }\n+\n+                    if let Ok(metadata) = fs::metadata(file_path) {\n+                        if metadata.len() == 0 {\n+                            println!(\"Empty file with UI testing output: {:?}\", file_path);\n+                            *bad = true;\n+                        }\n+                    }\n                 }\n             }\n-        }\n-    });\n+        },\n+    );\n }"}]}