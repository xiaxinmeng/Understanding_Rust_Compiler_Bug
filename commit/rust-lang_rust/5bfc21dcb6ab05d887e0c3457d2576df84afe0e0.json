{"sha": "5bfc21dcb6ab05d887e0c3457d2576df84afe0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmMyMWRjYjZhYjA1ZDg4N2UwYzM0NTdkMjU3NmRmODRhZmUwZTA=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-11-08T21:20:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-08T21:20:57Z"}, "message": "Rollup merge of #37610 - oldmanmike:unary-and-binary-tests, r=michaelwoerister\n\nAdd unary and binary tests for incr-comp\n\nThis is my draft of tests for unary and binary expressions as desired by #37520 for use in the test suite for hashes in incremental compilation. Feedback would be wonderful, if there's any changes I need to make I would appreciate the code review.\n\n?r @michaelwoerister", "tree": {"sha": "7062e6e60df9783ab9de1ea1c8d7c04d81b325e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7062e6e60df9783ab9de1ea1c8d7c04d81b325e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0", "html_url": "https://github.com/rust-lang/rust/commit/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2fd20152b9d523cb603ddb59e779c29a287ee43", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fd20152b9d523cb603ddb59e779c29a287ee43", "html_url": "https://github.com/rust-lang/rust/commit/d2fd20152b9d523cb603ddb59e779c29a287ee43"}, {"sha": "5a2997d3d8fca8292a7b1fa34ef65a56434d5a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2997d3d8fca8292a7b1fa34ef65a56434d5a16", "html_url": "https://github.com/rust-lang/rust/commit/5a2997d3d8fca8292a7b1fa34ef65a56434d5a16"}], "stats": {"total": 514, "additions": 514, "deletions": 0}, "files": [{"sha": "2c0ca0043122ccb7440a557357353b20acdb77bc", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "added", "additions": 514, "deletions": 0, "changes": 514, "blob_url": "https://github.com/rust-lang/rust/blob/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfc21dcb6ab05d887e0c3457d2576df84afe0e0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=5bfc21dcb6ab05d887e0c3457d2576df84afe0e0", "patch": "@@ -0,0 +1,514 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for unary and binary expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change constant operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_negation() -> i32 {\n+    -10\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_negation() -> i32 {\n+    -1\n+}\n+\n+\n+\n+// Change constant operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_bitwise_not() -> i32 {\n+    !100\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_bitwise_not() -> i32 {\n+    !99\n+}\n+\n+\n+\n+// Change variable operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n+    -x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n+    -y\n+}\n+\n+\n+\n+// Change variable operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n+    !x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n+    !y\n+}\n+\n+\n+\n+// Change variable operand of deref --------------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n+    *x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n+    *y\n+}\n+\n+\n+\n+// Change first constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_const_add() -> i32 {\n+    2 + 3\n+}\n+\n+\n+\n+// Change second constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_const_add() -> i32 {\n+    1 + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+\n+\n+// Change first variable operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n+    a + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n+    b + 2\n+}\n+\n+\n+\n+// Change second variable operand of addition ----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n+    1 + b\n+}\n+\n+\n+\n+// Change operator from + to - -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 - a\n+}\n+\n+\n+\n+// Change operator from + to * -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 * a\n+}\n+\n+\n+\n+// Change operator from + to / -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 / a\n+}\n+\n+\n+\n+// Change operator from + to % -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 % a\n+}\n+\n+\n+\n+// Change operator from && to || -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a && b\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a || b\n+}\n+\n+\n+\n+// Change operator from & to | -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 | a\n+}\n+\n+\n+\n+// Change operator from & to ^ -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 ^ a\n+}\n+\n+\n+\n+// Change operator from & to << ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a << 1\n+}\n+\n+\n+\n+// Change operator from & to >> ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a >> 1\n+}\n+\n+\n+\n+// Change operator from == to != -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a != 1\n+}\n+\n+\n+\n+// Change operator from == to < ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a < 1\n+}\n+\n+\n+\n+// Change operator from == to > ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a > 1\n+}\n+\n+\n+\n+// Change operator from == to <= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a <= 1\n+}\n+\n+\n+\n+// Change operator from == to >= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a >= 1\n+}\n+\n+\n+\n+// Change type in cast expression ----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as i32;\n+    let c = b as u64;\n+    c\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as u32;\n+    let c = b as u64;\n+    c\n+}\n+\n+\n+\n+// Change value in cast expression ---------------------------------------------\n+#[cfg(cfail1)]\n+pub fn value_cast(a: u32) -> i32 {\n+    1 as i32\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn value_cast(a: u32) -> i32 {\n+    2 as i32\n+}\n+\n+\n+\n+// Change l-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn lvalue() -> i32 {\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 9;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn lvalue() -> i32 {\n+    let mut x = 10;\n+    let mut y = 11;\n+    y = 9;\n+    x\n+}\n+\n+\n+\n+// Change r-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn rvalue() -> i32 {\n+    let mut x = 10;\n+    x = 9;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn rvalue() -> i32 {\n+    let mut x = 10;\n+    x = 8;\n+    x\n+}\n+\n+\n+\n+// Change index into slice -----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[i]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[j]\n+}"}]}