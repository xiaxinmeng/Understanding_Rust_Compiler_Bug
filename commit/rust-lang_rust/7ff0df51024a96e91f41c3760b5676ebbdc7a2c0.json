{"sha": "7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "node_id": "C_kwDOAAsO6NoAKDdmZjBkZjUxMDI0YTk2ZTkxZjQxYzM3NjBiNTY3NmViYmRjN2EyYzA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-18T17:55:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-19T12:56:31Z"}, "message": "Fix \"Remove src_files and remove_file\"", "tree": {"sha": "8edbf86c1312908227b499fb3e53a6edbfc9fcfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edbf86c1312908227b499fb3e53a6edbfc9fcfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "html_url": "https://github.com/rust-lang/rust/commit/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43929a8a75d85ae3939a80703bdd827e81c51ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/43929a8a75d85ae3939a80703bdd827e81c51ba5", "html_url": "https://github.com/rust-lang/rust/commit/43929a8a75d85ae3939a80703bdd827e81c51ba5"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "e9b074e183796404b8f44c4f51f5dc242eb0e809", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "patch": "@@ -92,7 +92,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         enum BuilderKind {\n             Bsd(ar::Builder<File>),\n             Gnu(ar::GnuBuilder<File>),\n@@ -191,6 +191,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             )\n         };\n \n+        let any_members = !entries.is_empty();\n+\n         // Add all files\n         for (entry_name, data) in entries.into_iter() {\n             let header = ar::Header::new(entry_name, data.len() as u64);\n@@ -216,6 +218,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                 self.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n             }\n         }\n+\n+        any_members\n     }\n \n     fn inject_dll_import_lib("}, {"sha": "999a54495eec05c18314300ee6603f7520c895ea", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "patch": "@@ -100,7 +100,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -133,6 +133,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             BuilderKind::Bsd(ar::Builder::new(File::create(&self.config.dst).unwrap()))\n         };\n \n+        let any_members = !self.entries.is_empty();\n+\n         // Add all files\n         for (entry_name, entry) in self.entries.into_iter() {\n             match entry {\n@@ -193,6 +195,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         if !status.success() {\n             self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n         }\n+\n+        any_members\n     }\n \n     fn inject_dll_import_lib(&mut self, _lib_name: &str, _dll_imports: &[DllImport], _tmpdir: &MaybeTempDir) {"}, {"sha": "1f4bfffaafef777aa3299eb5804433efdcfdf52c", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "patch": "@@ -97,13 +97,14 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         let kind = self.llvm_archive_kind().unwrap_or_else(|kind| {\n             self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n         });\n \n-        if let Err(e) = self.build_with_llvm(kind) {\n-            self.sess.fatal(&format!(\"failed to build archive: {}\", e));\n+        match self.build_with_llvm(kind) {\n+            Ok(any_members) => any_members,\n+            Err(e) => self.sess.fatal(&format!(\"failed to build archive: {}\", e)),\n         }\n     }\n \n@@ -270,7 +271,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         kind.parse().map_err(|_| kind)\n     }\n \n-    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n+    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<bool> {\n         let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n@@ -353,7 +354,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n                 };\n                 Err(io::Error::new(io::ErrorKind::Other, msg))\n             } else {\n-                Ok(())\n+                Ok(!members.is_empty())\n             };\n             for member in members {\n                 llvm::LLVMRustArchiveMemberFree(member);"}, {"sha": "d2dd3fbcc99244f53b25d5fafb1e65f50eb06ac1", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "patch": "@@ -50,7 +50,7 @@ pub trait ArchiveBuilder<'a> {\n     where\n         F: FnMut(&str) -> bool + 'static;\n \n-    fn build(self);\n+    fn build(self) -> bool;\n \n     fn inject_dll_import_lib(\n         &mut self,"}, {"sha": "b39a9c988c669f3961cb154964568694fc456117", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "patch": "@@ -2503,8 +2503,9 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             }) {\n                 sess.fatal(&format!(\"failed to build archive from rlib: {}\", e));\n             }\n-            archive.build();\n-            link_upstream(&dst);\n+            if archive.build() {\n+                link_upstream(&dst);\n+            }\n         });\n     }\n "}]}