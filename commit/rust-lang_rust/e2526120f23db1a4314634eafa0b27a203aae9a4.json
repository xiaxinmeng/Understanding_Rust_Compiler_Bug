{"sha": "e2526120f23db1a4314634eafa0b27a203aae9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNTI2MTIwZjIzZGIxYTQzMTQ2MzRlYWZhMGIyN2EyMDNhYWU5YTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-29T08:40:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:33:42Z"}, "message": "Use Arena inside hir::StructField.", "tree": {"sha": "79516787e7fe63c033313d43939e8f3596e3b4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79516787e7fe63c033313d43939e8f3596e3b4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2526120f23db1a4314634eafa0b27a203aae9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2526120f23db1a4314634eafa0b27a203aae9a4", "html_url": "https://github.com/rust-lang/rust/commit/e2526120f23db1a4314634eafa0b27a203aae9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2526120f23db1a4314634eafa0b27a203aae9a4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1c88be46a1d541ab09214a3b894192e19b554a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1c88be46a1d541ab09214a3b894192e19b554a", "html_url": "https://github.com/rust-lang/rust/commit/4f1c88be46a1d541ab09214a3b894192e19b554a"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "494b8ca8f4f76df18bf9590d35f2ed2fa90c0a85", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -131,7 +131,7 @@ macro_rules! arena_types {\n             [] impl_item_ref: rustc::hir::ImplItemRef,\n             [] macro_def: rustc::hir::MacroDef<$tcx>,\n             [] path: rustc::hir::Path,\n-            [] struct_field: rustc::hir::StructField,\n+            [] struct_field: rustc::hir::StructField<$tcx>,\n             [] trait_item_ref: rustc::hir::TraitItemRef,\n             [] ty: rustc::hir::Ty,\n             [] variant: rustc::hir::Variant<$tcx>,"}, {"sha": "37ee672291eca38047162940bb4658f1d4bd7529", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -324,7 +324,7 @@ pub trait Visitor<'v>: Sized {\n                           _: Span) {\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &'v StructField) {\n+    fn visit_struct_field(&mut self, s: &'v StructField<'v>) {\n         walk_struct_field(self, s)\n     }\n     fn visit_enum_def(&mut self,\n@@ -955,12 +955,12 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n-pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n+pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField<'v>) {\n     visitor.visit_id(struct_field.hir_id);\n     visitor.visit_vis(&struct_field.vis);\n     visitor.visit_ident(struct_field.ident);\n     visitor.visit_ty(&struct_field.ty);\n-    walk_list!(visitor, visit_attribute, &struct_field.attrs);\n+    walk_list!(visitor, visit_attribute, struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {"}, {"sha": "d79f1bfa6809457d7461b0759e04024d393c4b6f", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -791,7 +791,7 @@ impl LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n+    fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField<'hir> {\n         let ty = if let TyKind::Path(ref qself, ref path) = f.ty.kind {\n             let t = self.lower_path_ty(\n                 &f.ty,\n@@ -800,9 +800,10 @@ impl LoweringContext<'_, 'hir> {\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n                 ImplTraitContext::disallowed()\n             );\n-            P(t)\n+            self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::disallowed())\n+            let t = self.lower_ty(&f.ty, ImplTraitContext::disallowed());\n+            self.arena.alloc(t.into_inner())\n         };\n         hir::StructField {\n             span: f.span,\n@@ -814,7 +815,7 @@ impl LoweringContext<'_, 'hir> {\n             },\n             vis: self.lower_visibility(&f.vis, None),\n             ty,\n-            attrs: self.lower_attrs(&f.attrs),\n+            attrs: self.lower_attrs_arena(&f.attrs),\n         }\n     }\n "}, {"sha": "faf2a0c7010e725d480b37537c4c4c87683f66cf", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_struct_field(&mut self, field: &'hir StructField) {\n+    fn visit_struct_field(&mut self, field: &'hir StructField<'hir>) {\n         self.insert(field.span, field.hir_id, Node::Field(field));\n         self.with_parent(field.hir_id, |this| {\n             intravisit::walk_struct_field(this, field);"}, {"sha": "c6409f8d4651a90740aea73d1e054f15a301f361", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -1251,7 +1251,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n impl Named for Item<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ForeignItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for Variant<'_> { fn name(&self) -> Name { self.ident.name } }\n-impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n+impl Named for StructField<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem<'_> { fn name(&self) -> Name { self.ident.name } }\n "}, {"sha": "25fc365b4ec096c6cedde9c4dfe50bc06198985d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -2377,17 +2377,17 @@ impl VisibilityKind {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct StructField {\n+pub struct StructField<'hir> {\n     pub span: Span,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n     pub vis: Visibility,\n     pub hir_id: HirId,\n-    pub ty: P<Ty>,\n-    pub attrs: HirVec<Attribute>,\n+    pub ty: &'hir Ty,\n+    pub attrs: &'hir [Attribute],\n }\n \n-impl StructField {\n+impl StructField<'_> {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n         let first = self.ident.as_str().as_bytes()[0];\n@@ -2401,11 +2401,11 @@ pub enum VariantData<'hir> {\n     /// A struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(&'hir [StructField], /* recovered */ bool),\n+    Struct(&'hir [StructField<'hir>], /* recovered */ bool),\n     /// A tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(&'hir [StructField], HirId),\n+    Tuple(&'hir [StructField<'hir>], HirId),\n     /// A unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n@@ -2414,7 +2414,7 @@ pub enum VariantData<'hir> {\n \n impl VariantData<'hir> {\n     /// Return the fields of this variant.\n-    pub fn fields(&self) -> &'hir [StructField] {\n+    pub fn fields(&self) -> &'hir [StructField<'hir>] {\n         match *self {\n             VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => fields,\n             _ => &[],\n@@ -2792,7 +2792,7 @@ pub enum Node<'hir> {\n     TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem<'hir>),\n     Variant(&'hir Variant<'hir>),\n-    Field(&'hir StructField),\n+    Field(&'hir StructField<'hir>),\n     AnonConst(&'hir AnonConst),\n     Expr(&'hir Expr),\n     Stmt(&'hir Stmt),"}, {"sha": "7f19ec60f53641dbdeaa2f9d4d194576f4379a52", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -1000,7 +1000,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         lint_callback!(self, check_struct_def_post, s);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n         self.with_lint_attrs(s.hir_id, &s.attrs, |cx| {\n             lint_callback!(cx, check_struct_field, s);\n             hir_visit::walk_struct_field(cx, s);"}, {"sha": "86c7d55156075d1a51ebaada9a41907fb7860294", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -130,7 +130,7 @@ macro_rules! late_lint_methods {\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n             fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n-            fn check_struct_field(a: &$hir hir::StructField);\n+            fn check_struct_field(a: &$hir hir::StructField<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n             fn check_variant_post(a: &$hir hir::Variant<$hir>);\n             fn check_lifetime(a: &$hir hir::Lifetime);\n@@ -622,7 +622,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         })\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n         self.with_lint_attrs(s.hir_id, &s.attrs, |builder| {\n             intravisit::walk_struct_field(builder, s);\n         })"}, {"sha": "e1838b13fefb908e0a246847e33da23b522ab343", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             })\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n         self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n@@ -387,7 +387,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n         self.check_missing_stability(s.hir_id, s.span, \"field\");\n         intravisit::walk_struct_field(self, s);\n     }"}, {"sha": "44b610e487bee28e5326f0281993f8d9b9314c8e", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -177,7 +177,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n         intravisit::walk_impl_item(self, impl_item);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n         self.process_attrs(s.hir_id, &s.attrs);\n         intravisit::walk_struct_field(self, s);\n     }"}, {"sha": "b83bfedc82421a8002e8e973817ab4e69909dd72", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -473,7 +473,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, sf: &hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, sf: &hir::StructField<'_>) {\n         if !sf.is_positional() {\n             self.check_missing_docs_attrs(cx,\n                                           Some(sf.hir_id),\n@@ -1001,7 +1001,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n                           foreign_item.span, true);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField<'_>) {\n         self.perform_lint(cx, \"field\", field.hir_id, &field.vis, field.span, false);\n     }\n "}, {"sha": "e9c5f90d9dcff15d4d921786e6ab43ff3a2e02cb", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -727,7 +727,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.kind[def_id] <- EntryKind::Field);\n         record!(self.per_def.visibility[def_id] <- field.vis);\n         record!(self.per_def.span[def_id] <- self.tcx.def_span(def_id));\n-        record!(self.per_def.attributes[def_id] <- &variant_data.fields()[field_index].attrs);\n+        record!(self.per_def.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);"}, {"sha": "3edd010f3115c7e53c77bcd281b9e19a940e09a1", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -495,7 +495,7 @@ impl DeadVisitor<'tcx> {\n         should_warn && !self.symbol_is_live(item.hir_id)\n     }\n \n-    fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n+    fn should_warn_about_field(&mut self, field: &hir::StructField<'_>) -> bool {\n         let field_type = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n         !field.is_positional()\n             && !self.symbol_is_live(field.hir_id)\n@@ -629,7 +629,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n-    fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, field: &'tcx hir::StructField<'tcx>) {\n         if self.should_warn_about_field(&field) {\n             self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"field\", \"read\");\n         }"}, {"sha": "9ea7423540141a57c8bde7678994242ffcbcd851", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -203,7 +203,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param_bound(self, bounds)\n     }\n \n-    fn visit_struct_field(&mut self, s: &'v hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'v hir::StructField<'v>) {\n         self.record(\"StructField\", Id::Node(s.hir_id), s);\n         hir_visit::walk_struct_field(self, s)\n     }"}, {"sha": "d8d554bad2ca967427ac7b853c341df79d145536", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -1647,7 +1647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n         if s.vis.node.is_pub() || self.in_variant {\n             intravisit::walk_struct_field(self, s);\n         }"}, {"sha": "9e2860946425cf0e2ea77cf3a4c02a5f03bed4e1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -684,7 +684,7 @@ impl Visitor<'tcx> for ClauseDumper<'tcx> {\n         intravisit::walk_impl_item(self, impl_item);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n         self.process_attrs(s.hir_id, &s.attrs);\n         intravisit::walk_struct_field(self, s);\n     }"}, {"sha": "4825eb1ebd57cac7ca249f559bc897a55737114f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -1743,7 +1743,7 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     }\n }\n \n-impl Clean<Item> for hir::StructField {\n+impl Clean<Item> for hir::StructField<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n "}, {"sha": "ae62b743f9d8cdd37234e5123b5d64d105f83d88", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2526120f23db1a4314634eafa0b27a203aae9a4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e2526120f23db1a4314634eafa0b27a203aae9a4", "patch": "@@ -89,7 +89,7 @@ pub struct Struct<'hir> {\n     pub name: Name,\n     pub generics: &'hir hir::Generics,\n     pub attrs: &'hir [ast::Attribute],\n-    pub fields: &'hir [hir::StructField],\n+    pub fields: &'hir [hir::StructField<'hir>],\n     pub whence: Span,\n }\n \n@@ -100,7 +100,7 @@ pub struct Union<'hir> {\n     pub name: Name,\n     pub generics: &'hir hir::Generics,\n     pub attrs: &'hir [ast::Attribute],\n-    pub fields: &'hir [hir::StructField],\n+    pub fields: &'hir [hir::StructField<'hir>],\n     pub whence: Span,\n }\n "}]}