{"sha": "c379f604f12520f92783501417d8bd392dd40339", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNzlmNjA0ZjEyNTIwZjkyNzgzNTAxNDE3ZDhiZDM5MmRkNDAzMzk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-10-02T20:36:07Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-10-02T20:36:07Z"}, "message": "remove the \"don't add `_ WF` obligation\" hack\n\nit doesn't seem to be necessary and is potentially harmful.", "tree": {"sha": "99e121e80ede53f875815895dfb7050cd87333ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e121e80ede53f875815895dfb7050cd87333ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c379f604f12520f92783501417d8bd392dd40339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c379f604f12520f92783501417d8bd392dd40339", "html_url": "https://github.com/rust-lang/rust/commit/c379f604f12520f92783501417d8bd392dd40339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c379f604f12520f92783501417d8bd392dd40339/comments", "author": null, "committer": null, "parents": [{"sha": "e650491f209a4c76dbd31ed1cdc390dd13c3d1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e650491f209a4c76dbd31ed1cdc390dd13c3d1e9", "html_url": "https://github.com/rust-lang/rust/commit/e650491f209a4c76dbd31ed1cdc390dd13c3d1e9"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "278aa9450eeeb82290bf1aa72283319ec7691707", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c379f604f12520f92783501417d8bd392dd40339/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c379f604f12520f92783501417d8bd392dd40339/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c379f604f12520f92783501417d8bd392dd40339", "patch": "@@ -1557,21 +1557,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn to_ty(&self, ast_t: &hir::Ty) -> Ty<'tcx> {\n         let t = ast_ty_to_ty(self, self, ast_t);\n-\n-        // Generally speaking, we must check that types entered by the\n-        // user are well-formed. This is not true for `_`, since those\n-        // types are generated by inference. Now, you might think that\n-        // we could as well generate a WF obligation -- but\n-        // unfortunately that breaks code like `foo as *const _`,\n-        // because those type variables wind up being unconstrained\n-        // until very late. Nasty. Probably it'd be best to refactor\n-        // that code path, but that's tricky because of\n-        // defaults. Argh!\n-        match ast_t.node {\n-            hir::TyInfer => { }\n-            _ => { self.register_wf_obligation(t, ast_t.span, traits::MiscObligation); }\n-        }\n-\n+        self.register_wf_obligation(t, ast_t.span, traits::MiscObligation);\n         t\n     }\n "}]}