{"sha": "2867d1f24a57364ac09da6bab089255d92a3bb68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NjdkMWYyNGE1NzM2NGFjMDlkYTZiYWIwODkyNTVkOTJhM2JiNjg=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-08-11T19:29:44Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-08-11T19:29:44Z"}, "message": "Sort most attributes alphabetically", "tree": {"sha": "e1c5dd7e8a4cba28809e887728752d59b23370ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c5dd7e8a4cba28809e887728752d59b23370ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2867d1f24a57364ac09da6bab089255d92a3bb68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2867d1f24a57364ac09da6bab089255d92a3bb68", "html_url": "https://github.com/rust-lang/rust/commit/2867d1f24a57364ac09da6bab089255d92a3bb68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2867d1f24a57364ac09da6bab089255d92a3bb68/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6faad3ec3aba8e9ea7c68331b7c6561890929658", "url": "https://api.github.com/repos/rust-lang/rust/commits/6faad3ec3aba8e9ea7c68331b7c6561890929658", "html_url": "https://github.com/rust-lang/rust/commit/6faad3ec3aba8e9ea7c68331b7c6561890929658"}], "stats": {"total": 180, "additions": 90, "deletions": 90}, "files": [{"sha": "231e15d6609d8e4fbd3cb5d3e90c45a37ff0f414", "filename": "src/doc/rust.md", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/2867d1f24a57364ac09da6bab089255d92a3bb68/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2867d1f24a57364ac09da6bab089255d92a3bb68/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=2867d1f24a57364ac09da6bab089255d92a3bb68", "patch": "@@ -1870,13 +1870,13 @@ type int8_t = i8;\n - `crate_id` - specify the this crate's crate ID.\n - `crate_type` - see [linkage](#linkage).\n - `feature` - see [compiler features](#compiler-features).\n+- `no_builtins` - disable optimizing certain code patterns to invocations of\n+                  library functions that are assumed to exist\n - `no_main` - disable emitting the `main` symbol. Useful when some other\n   object being linked to defines `main`.\n - `no_start` - disable linking to the `native` crate, which specifies the\n   \"start\" language item.\n - `no_std` - disable linking to the `std` crate.\n-- `no_builtins` - disable optimizing certain code patterns to invocations of\n-                  library functions that are assumed to exist\n \n ### Module-only attributes\n \n@@ -1890,10 +1890,10 @@ type int8_t = i8;\n \n ### Function-only attributes\n \n-- `plugin_registrar` - mark this function as the registration point for\n-  compiler plugins, such as loadable syntax extensions.\n - `main` - indicates that this function should be passed to the entry point,\n   rather than the function in the crate root named `main`.\n+- `plugin_registrar` - mark this function as the registration point for\n+  compiler plugins, such as loadable syntax extensions.\n - `start` - indicates that this function should be used as the entry point,\n   overriding the \"start\" language item.  See the \"start\" [language\n   item](#language-items) for more details.\n@@ -1932,6 +1932,12 @@ interpreted:\n   symbol for this item to its identifier.\n - `packed` - on structs or enums, eliminate any padding that would be used to\n   align fields.\n+- `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n+  compilation the crate should be loaded for. Currently, there are two\n+  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n+  crate at compile-time and use any syntax extensions or lints that the crate\n+  defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n+  both at runtime and compiletime.\n - `repr` - on C-like enums, this sets the underlying type used for\n   representation. Useful for FFI. Takes one argument, which is the primitive\n   type this enum should be represented for, or `C`, which specifies that it\n@@ -1949,12 +1955,6 @@ interpreted:\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute.\n-- `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n-  compilation the crate should be loaded for. Currently, there are two\n-  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n-  crate at compile-time and use any syntax extensions or lints that the crate\n-  defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n-  both at runtime and compiletime.\n \n ### Conditional compilation\n \n@@ -2021,12 +2021,12 @@ which the attribute applies.\n \n For any lint check `C`:\n \n- * `warn(C)` warns about violations of `C` but continues compilation,\n- * `deny(C)` signals an error after encountering a violation of `C`,\n  * `allow(C)` overrides the check for `C` so that violations will go\n     unreported,\n+ * `deny(C)` signals an error after encountering a violation of `C`,\n  * `forbid(C)` is the same as `deny(C)`, but also forbids changing the lint\n-    level afterwards.\n+    level afterwards,\n+ * `warn(C)` warns about violations of `C` but continues compilation.\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.\n@@ -2105,16 +2105,16 @@ A complete list of the built-in language items follows:\n \n #### Built-in Traits\n \n+* `copy`\n+  : Types that do not move ownership when used by-value.\n+* `drop`\n+  : Have destructors.\n * `send`\n   : Able to be sent across task boundaries.\n * `sized`\n   : Has a size known at compile time.\n-* `copy`\n-  : Types that do not move ownership when used by-value.\n * `sync`\n   : Able to be safely shared between tasks when aliased.\n-* `drop`\n-  : Have destructors.\n \n #### Operators\n \n@@ -2166,10 +2166,10 @@ These are functions:\n \n #### Types\n \n-* `unsafe`\n-  : A type whose contents can be mutated through an immutable reference\n * `type_id`\n   : The type returned by the `type_id` intrinsic.\n+* `unsafe`\n+  : A type whose contents can be mutated through an immutable reference\n \n #### Marker types\n \n@@ -2276,12 +2276,12 @@ Supported traits for `deriving` are:\n * Comparison traits: `PartialEq`, `Eq`, `PartialOrd`, `Ord`.\n * Serialization: `Encodable`, `Decodable`. These require `serialize`.\n * `Clone`, to create `T` from `&T` via a copy.\n-* `Hash`, to iterate over the bytes in a data type.\n-* `Rand`, to create a random instance of a data type.\n * `Default`, to create an empty instance of a data type.\n-* `Zero`, to create a zero instance of a numeric data type.\n * `FromPrimitive`, to create an instance from a numeric primitive.\n+* `Hash`, to iterate over the bytes in a data type.\n+* `Rand`, to create a random instance of a data type.\n * `Show`, to format a value using the `{}` formatter.\n+* `Zero`, to create a zero instance of a numeric data type.\n \n ### Stability\n \n@@ -2375,34 +2375,48 @@ considered off, and using the features will result in a compiler error.\n \n The currently implemented features of the reference compiler are:\n \n-* `macro_rules` - The definition of new macros. This does not encompass\n-                  macro-invocation, that is always enabled by default, this only\n-                  covers the definition of new macros. There are currently\n-                  various problems with invoking macros, how they interact with\n-                  their environment, and possibly how they are used outside of\n-                  location in which they are defined. Macro definitions are\n-                  likely to change slightly in the future, so they are currently\n-                  hidden behind this feature.\n+* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n+          useful, but the exact syntax for this feature along with its semantics\n+          are likely to change, so this macro usage must be opted into.\n+\n+* `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n+                    ways insufficient for concatenating identifiers, and may\n+                    be removed entirely for something more wholsome.\n+\n+* `default_type_params` - Allows use of default type parameters. The future of\n+                          this feature is uncertain.\n \n * `globs` - Importing everything in a module through `*`. This is currently a\n             large source of bugs in name resolution for Rust, and it's not clear\n             whether this will continue as a feature or not. For these reasons,\n             the glob import statement has been hidden behind this feature flag.\n \n-* `struct_variant` - Structural enum variants (those with named fields). It is\n-                     currently unknown whether this style of enum variant is as\n-                     fully supported as the tuple-forms, and it's not certain\n-                     that this style of variant should remain in the language.\n-                     For now this style of variant is hidden behind a feature\n-                     flag.\n+* `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n+                 are inherently unstable and no promise about them is made.\n \n-* `once_fns` - Onceness guarantees a closure is only executed once. Defining a\n-               closure as `once` is unlikely to be supported going forward. So\n-               they are hidden behind this feature until they are to be removed.\n+* `lang_items` - Allows use of the `#[lang]` attribute. Like `intrinsics`,\n+                 lang items are inherently unstable and no promise about\n+                 them is made.\n \n-* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n-          useful, but the exact syntax for this feature along with its semantics\n-          are likely to change, so this macro usage must be opted into.\n+* `link_args` - This attribute is used to specify custom flags to the linker,\n+                but usage is strongly discouraged. The compiler's usage of the\n+                system linker is not guaranteed to continue in the future, and\n+                if the system linker is not used then specifying custom flags\n+                doesn't have much meaning.\n+\n+* `linkage` - Allows use of the `linkage` attribute, which is not portable.\n+\n+* `log_syntax` - Allows use of the `log_syntax` macro attribute, which is a\n+                 nasty hack that will certainly be removed.\n+\n+* `macro_rules` - The definition of new macros. This does not encompass\n+                  macro-invocation, that is always enabled by default, this only\n+                  covers the definition of new macros. There are currently\n+                  various problems with invoking macros, how they interact with\n+                  their environment, and possibly how they are used outside of\n+                  location in which they are defined. Macro definitions are\n+                  likely to change slightly in the future, so they are currently\n+                  hidden behind this feature.\n \n * `managed_boxes` - Usage of `@` is gated due to many\n                     planned changes to this feature. In the past, this has meant\n@@ -2417,20 +2431,14 @@ The currently implemented features of the reference compiler are:\n                        now until the specification of identifiers is fully\n                        fleshed out.\n \n-* `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n-                   and should be seen as unstable. This attribute is used to\n-                   declare a `static` as being unique per-thread leveraging\n-                   LLVM's implementation which works in concert with the kernel\n-                   loader and dynamic linker. This is not necessarily available\n-                   on all platforms, and usage of it is discouraged (rust\n-                   focuses more on task-local data instead of thread-local\n-                   data).\n+* `once_fns` - Onceness guarantees a closure is only executed once. Defining a\n+               closure as `once` is unlikely to be supported going forward. So\n+               they are hidden behind this feature until they are to be removed.\n \n-* `link_args` - This attribute is used to specify custom flags to the linker,\n-                but usage is strongly discouraged. The compiler's usage of the\n-                system linker is not guaranteed to continue in the future, and\n-                if the system linker is not used then specifying custom flags\n-                doesn't have much meaning.\n+* `overloaded_calls` - Allow implementing the `Fn*` family of traits on user\n+                       types, allowing overloading the call operator (`()`).\n+                       This feature may still undergo changes before being\n+                       stabilized.\n \n * `phase` - Usage of the `#[phase]` attribute allows loading compiler plugins\n             for custom lints or syntax extensions. The implementation is considered\n@@ -2442,56 +2450,48 @@ The currently implemented features of the reference compiler are:\n                        in need of a overhaul, and it is not clear that plugins\n                        defined using this will continue to work.\n \n-* `log_syntax` - Allows use of the `log_syntax` macro attribute, which is a\n-                 nasty hack that will certainly be removed.\n-\n-* `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n-                   hack that will certainly be removed.\n-\n-* `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n-                    ways insufficient for concatenating identifiers, and may\n-                    be removed entirely for something more wholsome.\n-\n-* `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,\n-                        which is considered wildly unsafe and will be\n-                        obsoleted by language improvements.\n-\n-* `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n-                 are inherently unstable and no promise about them is made.\n-\n-* `lang_items` - Allows use of the `#[lang]` attribute. Like `intrinsics`,\n-                 lang items are inherently unstable and no promise about\n-                 them is made.\n-\n-* `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n-           not the SIMD interface we want to expose in the long term.\n-\n-* `default_type_params` - Allows use of default type parameters. The future of\n-                          this feature is uncertain.\n-\n * `quote` - Allows use of the `quote_*!` family of macros, which are\n             implemented very poorly and will likely change significantly\n             with a proper implementation.\n \n-* `linkage` - Allows use of the `linkage` attribute, which is not portable.\n+* `rustc_diagnostic_macros`- A mysterious feature, used in the implementation\n+                             of rustc, not meant for mortals.\n+\n+* `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n+           not the SIMD interface we want to expose in the long term.\n \n * `struct_inherit` - Allows using struct inheritance, which is barely\n                      implemented and will probably be removed. Don't use this.\n \n-* `overloaded_calls` - Allow implementing the `Fn*` family of traits on user\n-                       types, allowing overloading the call operator (`()`).\n-                       This feature may still undergo changes before being\n-                       stabilized.\n+* `struct_variant` - Structural enum variants (those with named fields). It is\n+                     currently unknown whether this style of enum variant is as\n+                     fully supported as the tuple-forms, and it's not certain\n+                     that this style of variant should remain in the language.\n+                     For now this style of variant is hidden behind a feature\n+                     flag.\n+\n+* `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n+                   and should be seen as unstable. This attribute is used to\n+                   declare a `static` as being unique per-thread leveraging\n+                   LLVM's implementation which works in concert with the kernel\n+                   loader and dynamic linker. This is not necessarily available\n+                   on all platforms, and usage of it is discouraged (rust\n+                   focuses more on task-local data instead of thread-local\n+                   data).\n+\n+* `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n+                   hack that will certainly be removed.\n \n * `unboxed_closure_sugar` - Allows using `|Foo| -> Bar` as a trait bound\n                             meaning one of the `Fn` traits.  Still\n                             experimental.\n \n-* `rustc_diagnostic_macros`- A mysterious feature, used in the implementation\n-                             of rustc, not meant for mortals.\n-\n * `unboxed_closures` - A work in progress feature with many known bugs.\n \n+* `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,\n+                        which is considered wildly unsafe and will be\n+                        obsoleted by language improvements.\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if"}]}