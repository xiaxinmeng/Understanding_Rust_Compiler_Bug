{"sha": "5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNTA1Yjc1YjFkMGJmOGFiNjNjMjZlOTMxN2ZhOWJjNzk0YjA4NmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-17T12:54:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T15:49:38Z"}, "message": "Permit DST types to unify like other types.\n\nAlso:\n1. stop eagerly coercing from `[T, ..n]` to `[T]` only do so if requested.\n2. permit error to be interact more freely.\n\nFixes #17178.", "tree": {"sha": "53a36a244ac8750a5bb678e40a3841012a97a70c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a36a244ac8750a5bb678e40a3841012a97a70c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "html_url": "https://github.com/rust-lang/rust/commit/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a1936d26d03759d80f2f53411c883cc3462ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a1936d26d03759d80f2f53411c883cc3462ef4", "html_url": "https://github.com/rust-lang/rust/commit/e6a1936d26d03759d80f2f53411c883cc3462ef4"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "e44aa3e8221b8e09547ce3d94558ec82a6c1b412", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "patch": "@@ -72,7 +72,6 @@ use middle::typeck::infer::{CoerceResult, resolve_type, Coercion};\n use middle::typeck::infer::combine::{CombineFields, Combine};\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n-use util::common::indenter;\n use util::ppaux;\n use util::ppaux::Repr;\n \n@@ -93,7 +92,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         debug!(\"Coerce.tys({} => {})\",\n                a.repr(self.get_ref().infcx.tcx),\n                b.repr(self.get_ref().infcx.tcx));\n-        let _indent = indenter();\n \n         // Special case: if the subtype is a sized array literal (`[T, ..n]`),\n         // then it would get auto-borrowed to `&[T, ..n]` and then DST-ified\n@@ -411,7 +409,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         self.unpack_actual_value(ty_b, |sty_b|\n             match (sty_a, sty_b) {\n-                (&ty::ty_vec(t_a, Some(len)), _) => {\n+                (&ty::ty_vec(t_a, Some(len)), &ty::ty_vec(_, None)) => {\n                     let ty = ty::mk_vec(tcx, t_a, None);\n                     Some((ty, ty::UnsizeLength(len)))\n                 }"}, {"sha": "d2e062a20d2ec8f1b928ce642f6632c10e6ecbe9", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "patch": "@@ -363,28 +363,6 @@ pub fn super_fn_sigs<'tcx, C: Combine<'tcx>>(this: &C,\n \n pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n \n-    // This is a horrible hack - historically, [T] was not treated as a type,\n-    // so, for example, &T and &[U] should not unify. In fact the only thing\n-    // &[U] should unify with is &[T]. We preserve that behaviour with this\n-    // check.\n-    fn check_ptr_to_unsized<'tcx, C: Combine<'tcx>>(this: &C,\n-                                                    a: ty::t,\n-                                                    b: ty::t,\n-                                                    a_inner: ty::t,\n-                                                    b_inner: ty::t,\n-                                                    result: ty::t) -> cres<ty::t> {\n-        match (&ty::get(a_inner).sty, &ty::get(b_inner).sty) {\n-            (&ty::ty_vec(_, None), &ty::ty_vec(_, None)) |\n-            (&ty::ty_str, &ty::ty_str) |\n-            (&ty::ty_trait(..), &ty::ty_trait(..)) => Ok(result),\n-            (&ty::ty_vec(_, None), _) | (_, &ty::ty_vec(_, None)) |\n-            (&ty::ty_str, _) | (_, &ty::ty_str) |\n-            (&ty::ty_trait(..), _) | (_, &ty::ty_trait(..))\n-                => Err(ty::terr_sorts(expected_found(this, a, b))),\n-            _ => Ok(result),\n-        }\n-    }\n-\n     let tcx = this.infcx().tcx;\n     let a_sty = &ty::get(a).sty;\n     let b_sty = &ty::get(b).sty;\n@@ -402,6 +380,10 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n                     b.repr(this.infcx().tcx)).as_slice());\n       }\n \n+      (&ty::ty_err, _) | (_, &ty::ty_err) => {\n+          Ok(ty::mk_err())\n+      }\n+\n         // Relate integral variables to other types\n         (&ty::ty_infer(IntVar(a_id)), &ty::ty_infer(IntVar(b_id))) => {\n             try!(this.infcx().simple_vars(this.a_is_expected(),\n@@ -442,8 +424,7 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n       (&ty::ty_bool, _) |\n       (&ty::ty_int(_), _) |\n       (&ty::ty_uint(_), _) |\n-      (&ty::ty_float(_), _) |\n-      (&ty::ty_err, _) => {\n+      (&ty::ty_float(_), _) => {\n         if ty::get(a).sty == ty::get(b).sty {\n             Ok(a)\n         } else {\n@@ -494,13 +475,13 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n       }\n \n       (&ty::ty_uniq(a_inner), &ty::ty_uniq(b_inner)) => {\n-            let typ = try!(this.tys(a_inner, b_inner));\n-            check_ptr_to_unsized(this, a, b, a_inner, b_inner, ty::mk_uniq(tcx, typ))\n+          let typ = try!(this.tys(a_inner, b_inner));\n+          Ok(ty::mk_uniq(tcx, typ))\n       }\n \n       (&ty::ty_ptr(ref a_mt), &ty::ty_ptr(ref b_mt)) => {\n-            let mt = try!(this.mts(a_mt, b_mt));\n-            check_ptr_to_unsized(this, a, b, a_mt.ty, b_mt.ty, ty::mk_ptr(tcx, mt))\n+          let mt = try!(this.mts(a_mt, b_mt));\n+          Ok(ty::mk_ptr(tcx, mt))\n       }\n \n       (&ty::ty_rptr(a_r, ref a_mt), &ty::ty_rptr(b_r, ref b_mt)) => {\n@@ -516,7 +497,7 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n                 }\n                 _ => try!(this.mts(a_mt, b_mt))\n             };\n-            check_ptr_to_unsized(this, a, b, a_mt.ty, b_mt.ty, ty::mk_rptr(tcx, r, mt))\n+            Ok(ty::mk_rptr(tcx, r, mt))\n       }\n \n       (&ty::ty_vec(a_t, sz_a), &ty::ty_vec(b_t, sz_b)) => {"}, {"sha": "cc9ea6528ee84a2f566994a67a72657a54768b1d", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "patch": "@@ -139,30 +139,21 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n                     .relate_vars(a_id, SubtypeOf, b_id);\n                 Ok(a)\n             }\n-            // The vec/str check here and below is so that we don't unify\n-            // T with [T], this is necessary so we reflect subtyping of references\n-            // (&T does not unify with &[T]) where that in turn is to reflect\n-            // the historical non-typedness of [T].\n-            (&ty::ty_infer(TyVar(_)), &ty::ty_str) |\n-            (&ty::ty_infer(TyVar(_)), &ty::ty_vec(_, None)) => {\n-                Err(ty::terr_sorts(expected_found(self, a, b)))\n-            }\n             (&ty::ty_infer(TyVar(a_id)), _) => {\n                 try!(self.fields\n                        .switch_expected()\n                        .instantiate(b, SupertypeOf, a_id));\n                 Ok(a)\n             }\n-\n-            (&ty::ty_str, &ty::ty_infer(TyVar(_))) |\n-            (&ty::ty_vec(_, None), &ty::ty_infer(TyVar(_))) => {\n-                Err(ty::terr_sorts(expected_found(self, a, b)))\n-            }\n             (_, &ty::ty_infer(TyVar(b_id))) => {\n                 try!(self.fields.instantiate(a, SubtypeOf, b_id));\n                 Ok(a)\n             }\n \n+            (&ty::ty_err, _) | (_, &ty::ty_err) => {\n+                Ok(ty::mk_err())\n+            }\n+\n             (_, &ty::ty_bot) => {\n                 Err(ty::terr_sorts(expected_found(self, a, b)))\n             }"}]}