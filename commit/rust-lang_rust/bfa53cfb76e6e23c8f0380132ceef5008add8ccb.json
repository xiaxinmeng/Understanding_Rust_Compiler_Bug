{"sha": "bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTUzY2ZiNzZlNmUyM2M4ZjAzODAxMzJjZWVmNTAwOGFkZDhjY2I=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-09-27T13:22:02Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:27Z"}, "message": "Fix i128 alignment calculation", "tree": {"sha": "441d82c0843a964480e8090c9452d54bbcc8b07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/441d82c0843a964480e8090c9452d54bbcc8b07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "html_url": "https://github.com/rust-lang/rust/commit/bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa53cfb76e6e23c8f0380132ceef5008add8ccb/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff620e0edd4928468e59a09e83092742082838b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff620e0edd4928468e59a09e83092742082838b", "html_url": "https://github.com/rust-lang/rust/commit/4ff620e0edd4928468e59a09e83092742082838b"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "d930d5d2246019acb41595f3da8d0e289898b233", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bfa53cfb76e6e23c8f0380132ceef5008add8ccb/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa53cfb76e6e23c8f0380132ceef5008add8ccb/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "patch": "@@ -57,8 +57,7 @@ impl Default for TargetDataLayout {\n             i16_align: Align::from_bits(16, 16).unwrap(),\n             i32_align: Align::from_bits(32, 32).unwrap(),\n             i64_align: Align::from_bits(32, 64).unwrap(),\n-            // FIXME: i128 is correct?\n-            i128_align: Align::from_bits(64, 128).unwrap(),\n+            i128_align: Align::from_bits(32, 64).unwrap(),\n             f32_align: Align::from_bits(32, 32).unwrap(),\n             f64_align: Align::from_bits(64, 64).unwrap(),\n             pointer_size: Size::from_bits(64),\n@@ -103,6 +102,7 @@ impl TargetDataLayout {\n         };\n \n         let mut dl = TargetDataLayout::default();\n+        let mut i128_align_src = 64;\n         for spec in sess.target.target.data_layout.split(\"-\") {\n             match &spec.split(\":\").collect::<Vec<_>>()[..] {\n                 &[\"e\"] => dl.endian = Endian::Little,\n@@ -115,20 +115,28 @@ impl TargetDataLayout {\n                     dl.pointer_align = align(a, p);\n                 }\n                 &[s, ref a..] if s.starts_with(\"i\") => {\n-                    let ty_align = match s[1..].parse::<u64>() {\n-                        Ok(1) => &mut dl.i8_align,\n-                        Ok(8) => &mut dl.i8_align,\n-                        Ok(16) => &mut dl.i16_align,\n-                        Ok(32) => &mut dl.i32_align,\n-                        Ok(64) => &mut dl.i64_align,\n-                        Ok(128) => &mut dl.i128_align,\n-                        Ok(_) => continue,\n+                    let bits = match s[1..].parse::<u64>() {\n+                        Ok(bits) => bits,\n                         Err(_) => {\n                             size(&s[1..], \"i\"); // For the user error.\n                             continue;\n                         }\n                     };\n-                    *ty_align = align(a, s);\n+                    let a = align(a, s);\n+                    match bits {\n+                        1 => dl.i1_align = a,\n+                        8 => dl.i8_align = a,\n+                        16 => dl.i16_align = a,\n+                        32 => dl.i32_align = a,\n+                        64 => dl.i64_align = a,\n+                        _ => {}\n+                    }\n+                    if bits >= i128_align_src && bits <= 128 {\n+                        // Default alignment for i128 is decided by taking the alignment of\n+                        // largest-sized i{64...128}.\n+                        i128_align_src = bits;\n+                        dl.i128_align = a;\n+                    }\n                 }\n                 &[s, ref a..] if s.starts_with(\"v\") => {\n                     let v_size = size(&s[1..], \"v\");"}]}