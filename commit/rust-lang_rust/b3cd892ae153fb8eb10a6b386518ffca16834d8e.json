{"sha": "b3cd892ae153fb8eb10a6b386518ffca16834d8e", "node_id": "C_kwDOAAsO6NoAKGIzY2Q4OTJhZTE1M2ZiOGViMTBhNmIzODY1MThmZmNhMTY4MzRkOGU", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-06-06T10:05:07Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-06-06T10:05:07Z"}, "message": "Avoid creating `SmallVec`s in `global_llvm_features`", "tree": {"sha": "c1f5b533ce22274c17a0ac4323eda93f21f2118d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f5b533ce22274c17a0ac4323eda93f21f2118d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cd892ae153fb8eb10a6b386518ffca16834d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cd892ae153fb8eb10a6b386518ffca16834d8e", "html_url": "https://github.com/rust-lang/rust/commit/b3cd892ae153fb8eb10a6b386518ffca16834d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cd892ae153fb8eb10a6b386518ffca16834d8e/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35035cefc709abddabfb28ecc6a326458d46ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35035cefc709abddabfb28ecc6a326458d46ce2", "html_url": "https://github.com/rust-lang/rust/commit/c35035cefc709abddabfb28ecc6a326458d46ce2"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "ce6c6e3215c9b430efa46ce5f1726dd1cf8403f9", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b3cd892ae153fb8eb10a6b386518ffca16834d8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cd892ae153fb8eb10a6b386518ffca16834d8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=b3cd892ae153fb8eb10a6b386518ffca16834d8e", "patch": "@@ -218,15 +218,17 @@ pub fn check_tied_features(\n     sess: &Session,\n     features: &FxHashMap<&str, bool>,\n ) -> Option<&'static [&'static str]> {\n-    for tied in tied_target_features(sess) {\n-        // Tied features must be set to the same value, or not set at all\n-        let mut tied_iter = tied.iter();\n-        let enabled = features.get(tied_iter.next().unwrap());\n-        if tied_iter.any(|f| enabled != features.get(f)) {\n-            return Some(tied);\n+    if !features.is_empty() {\n+        for tied in tied_target_features(sess) {\n+            // Tied features must be set to the same value, or not set at all\n+            let mut tied_iter = tied.iter();\n+            let enabled = features.get(tied_iter.next().unwrap());\n+            if tied_iter.any(|f| enabled != features.get(f)) {\n+                return Some(tied);\n+            }\n         }\n     }\n-    None\n+    return None;\n }\n \n // Used to generate cfg variables and apply features\n@@ -440,6 +442,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n \n     // -Ctarget-features\n     let supported_features = supported_target_features(sess);\n+    let mut featsmap = FxHashMap::default();\n     let feats = sess\n         .opts\n         .cg\n@@ -485,35 +488,36 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                 }\n                 diag.emit();\n             }\n-            Some((enable_disable, feature))\n+\n+            if diagnostics {\n+                // FIXME(nagisa): figure out how to not allocate a full hashset here.\n+                featsmap.insert(feature, enable_disable == '+');\n+            }\n+\n+            // rustc-specific features do not get passed down to LLVM\u2026\n+            if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n+                return None;\n+            }\n+            // ... otherwise though we run through `to_llvm_features` when\n+            // passing requests down to LLVM. This means that all in-language\n+            // features also work on the command line instead of having two\n+            // different names when the LLVM name and the Rust name differ.\n+            Some(\n+                to_llvm_features(sess, feature)\n+                    .into_iter()\n+                    .map(move |f| format!(\"{}{}\", enable_disable, f)),\n+            )\n         })\n-        .collect::<SmallVec<[(char, &str); 8]>>();\n-\n-    if diagnostics {\n-        // FIXME(nagisa): figure out how to not allocate a full hashset here.\n-        let featmap = feats.iter().map(|&(flag, feat)| (feat, flag == '+')).collect();\n-        if let Some(f) = check_tied_features(sess, &featmap) {\n-            sess.err(&format!(\n-                \"target features {} must all be enabled or disabled together\",\n-                f.join(\", \")\n-            ));\n-        }\n+        .flatten();\n+    features.extend(feats);\n+\n+    if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n+        sess.err(&format!(\n+            \"target features {} must all be enabled or disabled together\",\n+            f.join(\", \")\n+        ));\n     }\n \n-    features.extend(feats.into_iter().flat_map(|(enable_disable, feature)| {\n-        // rustc-specific features do not get passed down to LLVM\u2026\n-        if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n-            return SmallVec::<[_; 2]>::new();\n-        }\n-        // ... otherwise though we run through `to_llvm_features` when\n-        // passing requests down to LLVM. This means that all in-language\n-        // features also work on the command line instead of having two\n-        // different names when the LLVM name and the Rust name differ.\n-        to_llvm_features(sess, feature)\n-            .into_iter()\n-            .map(|f| format!(\"{}{}\", enable_disable, f))\n-            .collect()\n-    }));\n     features\n }\n "}]}