{"sha": "b29e299c180ca62403595b7b25f23545943d38b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWUyOTljMTgwY2E2MjQwMzU5NWI3YjI1ZjIzNTQ1OTQzZDM4YjE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-19T10:30:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-19T10:30:01Z"}, "message": "Rollup merge of #32329 - sfackler:assert-recover-safe-pub, r=aturon\n\nMake AssertRecoverSafe's field public\n\nIt's basically the very definition of a newtype, so we might as well\nmake things easy on people and let them construct and access it\ndirectly.\n\nr? @aturon", "tree": {"sha": "1086104c2bff6ab8f71d3585c1a31c29294cc0a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1086104c2bff6ab8f71d3585c1a31c29294cc0a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29e299c180ca62403595b7b25f23545943d38b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29e299c180ca62403595b7b25f23545943d38b1", "html_url": "https://github.com/rust-lang/rust/commit/b29e299c180ca62403595b7b25f23545943d38b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29e299c180ca62403595b7b25f23545943d38b1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5dceba8fae2a77ae652d348a4d757a6a52fe16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5dceba8fae2a77ae652d348a4d757a6a52fe16c", "html_url": "https://github.com/rust-lang/rust/commit/d5dceba8fae2a77ae652d348a4d757a6a52fe16c"}, {"sha": "797d520d2baa6a9264060b657c3aeeed8c709167", "url": "https://api.github.com/repos/rust-lang/rust/commits/797d520d2baa6a9264060b657c3aeeed8c709167", "html_url": "https://github.com/rust-lang/rust/commit/797d520d2baa6a9264060b657c3aeeed8c709167"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "331e3431cee847d06eeb36cc5749f289570ee704", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b29e299c180ca62403595b7b25f23545943d38b1/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e299c180ca62403595b7b25f23545943d38b1/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b29e299c180ca62403595b7b25f23545943d38b1", "patch": "@@ -257,10 +257,10 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n \n     match {\n-        let b_sess = AssertRecoverSafe::new(&sess);\n-        let b_cstore = AssertRecoverSafe::new(&cstore);\n-        let b_cfg = AssertRecoverSafe::new(cfg.clone());\n-        let b_control = AssertRecoverSafe::new(&control);\n+        let b_sess = AssertRecoverSafe(&sess);\n+        let b_cstore = AssertRecoverSafe(&cstore);\n+        let b_cfg = AssertRecoverSafe(cfg.clone());\n+        let b_control = AssertRecoverSafe(&control);\n \n         panic::recover(|| {\n             driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),"}, {"sha": "f278994988736b347adf8aa4d7cde68d1cdfc33e", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b29e299c180ca62403595b7b25f23545943d38b1/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e299c180ca62403595b7b25f23545943d38b1/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=b29e299c180ca62403595b7b25f23545943d38b1", "patch": "@@ -161,7 +161,7 @@ pub trait RefRecoverSafe {}\n /// // });\n ///\n /// // This, however, will compile due to the `AssertRecoverSafe` wrapper\n-/// let result = panic::recover(AssertRecoverSafe::new(|| {\n+/// let result = panic::recover(AssertRecoverSafe(|| {\n ///     variable += 3;\n /// }));\n /// // ...\n@@ -185,15 +185,15 @@ pub trait RefRecoverSafe {}\n /// let other_capture = 3;\n ///\n /// let result = {\n-///     let mut wrapper = AssertRecoverSafe::new(&mut variable);\n+///     let mut wrapper = AssertRecoverSafe(&mut variable);\n ///     panic::recover(move || {\n ///         **wrapper += other_capture;\n ///     })\n /// };\n /// // ...\n /// ```\n #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n-pub struct AssertRecoverSafe<T>(T);\n+pub struct AssertRecoverSafe<T>(pub T);\n \n // Implementations of the `RecoverSafe` trait:\n //\n@@ -230,12 +230,16 @@ impl<T> RefRecoverSafe for AssertRecoverSafe<T> {}\n impl<T> AssertRecoverSafe<T> {\n     /// Creates a new `AssertRecoverSafe` wrapper around the provided type.\n     #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n+    #[rustc_deprecated(reason = \"the type's field is now public, construct it directly\",\n+                       since = \"1.9.0\")]\n     pub fn new(t: T) -> AssertRecoverSafe<T> {\n         AssertRecoverSafe(t)\n     }\n \n     /// Consumes the `AssertRecoverSafe`, returning the wrapped value.\n     #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n+    #[rustc_deprecated(reason = \"the type's field is now public, access it directly\",\n+                       since = \"1.9.0\")]\n     pub fn into_inner(self) -> T {\n         self.0\n     }"}, {"sha": "7fbd8dc4786baf1de47c2d7735e6700c8fe11b18", "filename": "src/test/run-pass/binary-heap-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29e299c180ca62403595b7b25f23545943d38b1/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e299c180ca62403595b7b25f23545943d38b1/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs?ref=b29e299c180ca62403595b7b25f23545943d38b1", "patch": "@@ -70,7 +70,7 @@ fn test_integrity() {\n             {\n                 // push the panicking item to the heap and catch the panic\n                 let thread_result = {\n-                    let mut heap_ref = AssertRecoverSafe::new(&mut heap);\n+                    let mut heap_ref = AssertRecoverSafe(&mut heap);\n                     panic::recover(move || {\n                         heap_ref.push(panic_item);\n                     })"}]}