{"sha": "dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGJhYTQ4YWM1YTg2ODEwYWVhMTdhY2NkMmY4NTE5NGRjOGNmZDM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-17T10:34:55Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:08:06Z"}, "message": "rustc_metadata: move opt_item_name to TyCtxt::item_name.", "tree": {"sha": "4cdb60cd8a8272a23ddc1ac4fe29c11cee885e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cdb60cd8a8272a23ddc1ac4fe29c11cee885e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "html_url": "https://github.com/rust-lang/rust/commit/dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc26a23301d8c435fae647174bd2906babbdb2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc26a23301d8c435fae647174bd2906babbdb2f9", "html_url": "https://github.com/rust-lang/rust/commit/dc26a23301d8c435fae647174bd2906babbdb2f9"}], "stats": {"total": 106, "additions": 51, "deletions": 55}, "files": [{"sha": "af751e51d931e1aff09c9b5aa92fb23cc75c2aa6", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fnv::FnvHashMap;\n use std::fmt::Write;\n use std::hash::{Hash, Hasher, SipHasher};\n use syntax::{ast, visit};\n-use syntax::parse::token::InternedString;\n+use syntax::parse::token::{self, InternedString};\n use ty::TyCtxt;\n use util::nodemap::NodeMap;\n \n@@ -326,6 +326,30 @@ impl Definitions {\n }\n \n impl DefPathData {\n+    pub fn get_opt_name(&self) -> Option<ast::Name> {\n+        use self::DefPathData::*;\n+        match *self {\n+            TypeNs(ref name) |\n+            ValueNs(ref name) |\n+            Module(ref name) |\n+            MacroDef(ref name) |\n+            TypeParam(ref name) |\n+            LifetimeDef(ref name) |\n+            EnumVariant(ref name) |\n+            Binding(ref name) |\n+            Field(ref name) => Some(token::intern(name)),\n+\n+            Impl |\n+            CrateRoot |\n+            InlinedRoot(_) |\n+            Misc |\n+            ClosureExpr |\n+            StructCtor |\n+            Initializer |\n+            ImplTrait => None\n+        }\n+    }\n+\n     pub fn as_interned_str(&self) -> InternedString {\n         use self::DefPathData::*;\n         match *self {"}, {"sha": "2ebf7ba6d53d24f740b312b79d640d9a721ba244", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -132,7 +132,6 @@ pub trait CrateStore<'tcx> {\n     fn item_type<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                      -> Ty<'tcx>;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n-    fn opt_item_name(&self, def: DefId) -> Option<ast::Name>;\n     fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> ty::GenericPredicates<'tcx>;\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n@@ -293,7 +292,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n         bug!(\"visible_parent_map\")\n     }\n-    fn opt_item_name(&self, def: DefId) -> Option<ast::Name> { bug!(\"opt_item_name\") }\n     fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> ty::GenericPredicates<'tcx> { bug!(\"item_predicates\") }\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n@@ -424,4 +422,4 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n \n pub trait MacroLoader {\n      fn load_crate(&mut self, extern_crate: &ast::Item, allows_macros: bool) -> Vec<LoadedMacro>;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ca12dde73b84b3316adc67a2a2397028c95c56c6", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -138,7 +138,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            cur_path.push(self.sess.cstore.opt_item_name(cur_def).unwrap_or_else(||\n+            cur_path.push(self.sess.cstore.def_key(cur_def)\n+                              .disambiguated_data.data.get_opt_name().unwrap_or_else(||\n                 token::intern(\"<unnamed>\")));\n             match visible_parent_map.get(&cur_def) {\n                 Some(&def) => cur_def = def,"}, {"sha": "d7076ddf0445d33b0d3dfd73fceefdadc6dac685", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -21,7 +21,7 @@ use dep_graph::{self, DepNode};\n use hir::map as ast_map;\n use middle;\n use hir::def::{Def, PathResolution, ExportMap};\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region::{CodeExtent, ROOT_CODE_EXTENT};\n use traits;\n@@ -43,7 +43,7 @@ use std::slice;\n use std::vec::IntoIter;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n-use syntax::parse::token::InternedString;\n+use syntax::parse::token::{self, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_const_math::ConstInt;\n@@ -2390,10 +2390,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn item_name(self, id: DefId) -> ast::Name {\n         if let Some(id) = self.map.as_local_node_id(id) {\n             self.map.name(id)\n+        } else if id.index == CRATE_DEF_INDEX {\n+            token::intern(&self.sess.cstore.original_crate_name(id.krate))\n         } else {\n-            self.sess.cstore.opt_item_name(id).unwrap_or_else(|| {\n-                bug!(\"item_name: no name for {:?}\", self.def_path(id));\n-            })\n+            let def_key = self.sess.cstore.def_key(id);\n+            // The name of a StructCtor is that of its struct parent.\n+            if let ast_map::DefPathData::StructCtor = def_key.disambiguated_data.data {\n+                self.item_name(DefId {\n+                    krate: id.krate,\n+                    index: def_key.parent.unwrap()\n+                })\n+            } else {\n+                def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {\n+                    bug!(\"item_name: no name for {:?}\", self.def_path(id));\n+                })\n+            }\n         }\n     }\n "}, {"sha": "7013720224a6407b507d31c09a74041bad4bf2dc", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -127,16 +127,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(did.krate).get_fn_arg_names(did.index)\n     }\n \n-    fn opt_item_name(&self, def: DefId) -> Option<ast::Name> {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        let cdata = self.get_crate_data(def.krate);\n-        if def.index == CRATE_DEF_INDEX {\n-            Some(token::intern(&cdata.name()))\n-        } else {\n-            cdata.maybe_get_item_name(def.index)\n-        }\n-    }\n-\n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>\n     {\n         self.dep_graph.read(DepNode::MetaData(def_id));"}, {"sha": "d98e8d62c2d157e3dc8d152d94c1fc37ba7de9d2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -43,7 +43,6 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, NodeId};\n use syntax::codemap;\n-use syntax::parse::token;\n use syntax_pos::{self, Span, BytePos, Pos};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n@@ -469,32 +468,6 @@ impl<'tcx> EntryKind<'tcx> {\n     }\n }\n \n-fn def_key_name(def_key: &hir_map::DefKey) -> Option<ast::Name> {\n-    match def_key.disambiguated_data.data {\n-        DefPathData::TypeNs(ref name) |\n-        DefPathData::ValueNs(ref name) |\n-        DefPathData::Module(ref name) |\n-        DefPathData::MacroDef(ref name) |\n-        DefPathData::TypeParam(ref name) |\n-        DefPathData::LifetimeDef(ref name) |\n-        DefPathData::EnumVariant(ref name) |\n-        DefPathData::Field(ref name) |\n-        DefPathData::Binding(ref name) => {\n-            Some(token::intern(name))\n-        }\n-\n-        DefPathData::InlinedRoot(_) => bug!(\"unexpected DefPathData\"),\n-\n-        DefPathData::CrateRoot |\n-        DefPathData::Misc |\n-        DefPathData::Impl |\n-        DefPathData::ClosureExpr |\n-        DefPathData::StructCtor |\n-        DefPathData::Initializer |\n-        DefPathData::ImplTrait => None\n-    }\n-}\n-\n impl<'a, 'tcx> CrateMetadata {\n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n@@ -518,7 +491,8 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn item_name(&self, item: &Entry<'tcx>) -> ast::Name {\n-        def_key_name(&item.def_key.decode(self)).expect(\"no name in item_name\")\n+        item.def_key.decode(self).disambiguated_data.data.get_opt_name()\n+            .expect(\"no name in item_name\")\n     }\n \n     pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n@@ -708,7 +682,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     _ => {}\n                 }\n \n-                if let Some(name) = def_key_name(&child.def_key.decode(self)) {\n+                let def_key = child.def_key.decode(self);\n+                if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n                     callback(def::Export {\n                         def_id: self.local_def_id(child_index),\n                         name: name\n@@ -724,10 +699,6 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn maybe_get_item_name(&self, id: DefIndex) -> Option<ast::Name> {\n-        def_key_name(&self.entry(id).def_key.decode(self))\n-    }\n-\n     pub fn maybe_get_item_ast(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)\n                               -> Option<&'tcx InlinedItem> {\n         debug!(\"Looking up item: {:?}\", id);\n@@ -757,7 +728,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let parent_and_name = || {\n             let def_key = item.def_key.decode(self);\n             (self.local_def_id(def_key.parent.unwrap()),\n-             def_key_name(&def_key).unwrap())\n+             def_key.disambiguated_data.data.get_opt_name().unwrap())\n         };\n \n         Some(match item.kind {"}, {"sha": "3c5e9e6cd3a99ab679c420a17d2d041e4de95261", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadbaa48ac5a86810aea17accd2f85194dc8cfd3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=dadbaa48ac5a86810aea17accd2f85194dc8cfd3", "patch": "@@ -436,7 +436,8 @@ impl<'b> Resolver<'b> {\n                 let trait_item_def_ids = self.session.cstore.impl_or_trait_items(def_id);\n                 for &trait_item_def in &trait_item_def_ids {\n                     let trait_item_name =\n-                        self.session.cstore.opt_item_name(trait_item_def)\n+                        self.session.cstore.def_key(trait_item_def)\n+                            .disambiguated_data.data.get_opt_name()\n                             .expect(\"opt_item_name returned None for trait\");\n \n                     debug!(\"(building reduced graph for external crate) ... adding trait item \\"}]}