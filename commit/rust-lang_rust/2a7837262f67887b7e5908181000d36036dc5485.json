{"sha": "2a7837262f67887b7e5908181000d36036dc5485", "node_id": "C_kwDOAAsO6NoAKDJhNzgzNzI2MmY2Nzg4N2I3ZTU5MDgxODEwMDBkMzYwMzZkYzU0ODU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-25T20:53:03Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-25T20:57:05Z"}, "message": "diagnostics: correct generic bounds with doubled colon\n\nFixes #95208", "tree": {"sha": "f3354f1b77d58c5bb6c456bfb21b92b18e642467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3354f1b77d58c5bb6c456bfb21b92b18e642467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7837262f67887b7e5908181000d36036dc5485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7837262f67887b7e5908181000d36036dc5485", "html_url": "https://github.com/rust-lang/rust/commit/2a7837262f67887b7e5908181000d36036dc5485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7837262f67887b7e5908181000d36036dc5485/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09be68c869d95fe1df0f74a228569101c4e76be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/09be68c869d95fe1df0f74a228569101c4e76be7", "html_url": "https://github.com/rust-lang/rust/commit/09be68c869d95fe1df0f74a228569101c4e76be7"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "534fd0d4816dd98ea1b1911c629dc2c3cecc5c7f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -2369,6 +2369,34 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    crate fn maybe_recover_bounds_doubled_colon(&mut self, ty: &Ty) -> PResult<'a, ()> {\n+        let TyKind::Path(qself, path) = &ty.kind else { return Ok(()) };\n+        let qself_position = qself.as_ref().map(|qself| qself.position);\n+        for (i, segments) in path.segments.windows(2).enumerate() {\n+            if qself_position.map(|pos| i < pos).unwrap_or(false) {\n+                continue;\n+            }\n+            if let [a, b] = segments {\n+                let (a_span, b_span) = (a.span(), b.span());\n+                let between_span = a_span.shrink_to_hi().to(b_span.shrink_to_lo());\n+                if self.span_to_snippet(between_span).as_ref().map(|a| &a[..]) == Ok(\":: \") {\n+                    let mut err = self.struct_span_err(\n+                        path.span.shrink_to_hi(),\n+                        \"expected `:` followed by trait or lifetime\",\n+                    );\n+                    err.span_suggestion(\n+                        between_span,\n+                        \"use single colon\",\n+                        \": \".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    return Err(err);\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     /// Parse and throw away a parenthesized comma separated\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {"}, {"sha": "29fe2b761018e8fa40619f065e2e5bb884cb07f5", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -312,6 +312,7 @@ impl<'a> Parser<'a> {\n                 id: ast::DUMMY_NODE_ID,\n             }))\n         } else {\n+            self.maybe_recover_bounds_doubled_colon(&ty)?;\n             self.unexpected()\n         }\n     }"}, {"sha": "608b4a20fbc867e20ed75565d51faa7d7d2b7ce8", "filename": "src/test/ui/generics/issue-95208-ignore-qself.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "da7efd576d1cf91a3f071f678417122c5223be2a", "filename": "src/test/ui/generics/issue-95208-ignore-qself.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item:: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "acbc1300d00fd5ddf3feca7e5fde8ce5f03a7e37", "filename": "src/test/ui/generics/issue-95208-ignore-qself.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,10 @@\n+error: expected `:` followed by trait or lifetime\n+  --> $DIR/issue-95208-ignore-qself.rs:6:88\n+   |\n+LL | impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item:: std::fmt::Display {\n+   |                                                                    ---                 ^\n+   |                                                                    |\n+   |                                                                    help: use single colon: `:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a0b1e886ca26887935098d9ae3cedfb72f0e5362", "filename": "src/test/ui/generics/issue-95208.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T> Struct<T> where T: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "0e3083484ff15bac186be3b13d3b047120ec737a", "filename": "src/test/ui/generics/issue-95208.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T> Struct<T> where T:: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "559527663e8a8e9e8b801e529b0bf19152ae96d4", "filename": "src/test/ui/generics/issue-95208.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a7837262f67887b7e5908181000d36036dc5485/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr?ref=2a7837262f67887b7e5908181000d36036dc5485", "patch": "@@ -0,0 +1,10 @@\n+error: expected `:` followed by trait or lifetime\n+  --> $DIR/issue-95208.rs:6:46\n+   |\n+LL | impl<T> Struct<T> where T:: std::fmt::Display {\n+   |                          ---                 ^\n+   |                          |\n+   |                          help: use single colon: `:`\n+\n+error: aborting due to previous error\n+"}]}