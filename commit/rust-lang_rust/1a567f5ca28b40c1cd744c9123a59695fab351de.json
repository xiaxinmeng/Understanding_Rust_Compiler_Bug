{"sha": "1a567f5ca28b40c1cd744c9123a59695fab351de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNTY3ZjVjYTI4YjQwYzFjZDc0NGM5MTIzYTU5Njk1ZmFiMzUxZGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-05T15:53:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-05T15:56:13Z"}, "message": "Reduce copy-paste", "tree": {"sha": "de4f1deb1cbf454662371e55f5827521ad62b471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4f1deb1cbf454662371e55f5827521ad62b471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a567f5ca28b40c1cd744c9123a59695fab351de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a567f5ca28b40c1cd744c9123a59695fab351de", "html_url": "https://github.com/rust-lang/rust/commit/1a567f5ca28b40c1cd744c9123a59695fab351de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a567f5ca28b40c1cd744c9123a59695fab351de/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0ce1ae418a2f3f4fc125bd701cdb327f607002", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0ce1ae418a2f3f4fc125bd701cdb327f607002", "html_url": "https://github.com/rust-lang/rust/commit/0c0ce1ae418a2f3f4fc125bd701cdb327f607002"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "6fa947759174c7114bbc5aeae3377ca8ff665f82", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1a567f5ca28b40c1cd744c9123a59695fab351de/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a567f5ca28b40c1cd744c9123a59695fab351de/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=1a567f5ca28b40c1cd744c9123a59695fab351de", "patch": "@@ -2,8 +2,8 @@\n use either::Either;\n \n use hir_def::{\n-    child_from_source::ChildFromSource, nameres::ModuleSource, AstItemDef, EnumVariantId,\n-    LocationCtx, ModuleId, VariantId,\n+    child_from_source::ChildFromSource, nameres::ModuleSource, AstItemDef, EnumVariantId, ImplId,\n+    LocationCtx, ModuleId, TraitId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -53,24 +53,18 @@ impl FromSource for Trait {\n impl FromSource for Function {\n     type Ast = ast::FnDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n-            Container::Trait(it) => it.id.child_from_source(db, src),\n-            Container::ImplBlock(it) => it.id.child_from_source(db, src),\n-            Container::Module(it) => it.id.child_from_source(db, src),\n-        }\n-        .map(Function::from)\n+        Container::find(db, src.as_ref().map(|it| it.syntax()))?\n+            .child_from_source(db, src)\n+            .map(Function::from)\n     }\n }\n \n impl FromSource for Const {\n     type Ast = ast::ConstDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n-            Container::Trait(it) => it.id.child_from_source(db, src),\n-            Container::ImplBlock(it) => it.id.child_from_source(db, src),\n-            Container::Module(it) => it.id.child_from_source(db, src),\n-        }\n-        .map(Const::from)\n+        Container::find(db, src.as_ref().map(|it| it.syntax()))?\n+            .child_from_source(db, src)\n+            .map(Const::from)\n     }\n }\n impl FromSource for Static {\n@@ -86,12 +80,9 @@ impl FromSource for Static {\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n-            Container::Trait(it) => it.id.child_from_source(db, src),\n-            Container::ImplBlock(it) => it.id.child_from_source(db, src),\n-            Container::Module(it) => it.id.child_from_source(db, src),\n-        }\n-        .map(TypeAlias::from)\n+        Container::find(db, src.as_ref().map(|it| it.syntax()))?\n+            .child_from_source(db, src)\n+            .map(TypeAlias::from)\n     }\n }\n \n@@ -263,3 +254,22 @@ impl Container {\n         Some(Container::Module(c))\n     }\n }\n+\n+impl<CHILD, SOURCE> ChildFromSource<CHILD, SOURCE> for Container\n+where\n+    TraitId: ChildFromSource<CHILD, SOURCE>,\n+    ImplId: ChildFromSource<CHILD, SOURCE>,\n+    ModuleId: ChildFromSource<CHILD, SOURCE>,\n+{\n+    fn child_from_source(\n+        &self,\n+        db: &impl DefDatabase,\n+        child_source: InFile<SOURCE>,\n+    ) -> Option<CHILD> {\n+        match self {\n+            Container::Trait(it) => it.id.child_from_source(db, child_source),\n+            Container::ImplBlock(it) => it.id.child_from_source(db, child_source),\n+            Container::Module(it) => it.id.child_from_source(db, child_source),\n+        }\n+    }\n+}"}]}