{"sha": "28034bb2f88105c0810a99cd345853e51a650c27", "node_id": "C_kwDOAAsO6NoAKDI4MDM0YmIyZjg4MTA1YzA4MTBhOTljZDM0NTg1M2U1MWE2NTBjMjc", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-11-20T04:15:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-20T04:15:59Z"}, "message": "Rollup merge of #104608 - Nilstrieb:fixmed, r=compiler-errors\n\nCleanup macro matching recovery\n\nThe retry has been implemented already in #104335. Also removes a `HACK` comment that's not really needed anymore because the \"don't recover during macro matching\" isn't really a hack but correct behavior.", "tree": {"sha": "c37b9e784046a68cc1abad86f44949c0b1cc671d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c37b9e784046a68cc1abad86f44949c0b1cc671d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28034bb2f88105c0810a99cd345853e51a650c27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjean/CRBK7hj4Ov3rIwAAXDMIADffBT1H158YzkORcIaCVdWV\nB/BTfW5YugCXIHHFma2+cNY3bXCd011UUMW9uxS1c55iyZgo9Ju4BFbZFKBRzMm/\nS1p6Ao7on9Mio7UHVh5sntZlCw/t8qbJW233d3yXN27RhTqkXn+NDSUKP5G8crMN\nPbQh2t48x+jo46WpuRe8B5VF5cT7iLvVunEbygBVFfTvRV8Se6zzOXodRUErR4HT\neR24K1Uqh38/Z8SENh2ekN9aUiajwZ8AdhhZoZIQnpox5oTKiTY1CBha2d9W6xbz\nYDha+n1kumWh+9t7wcOfsEBhhJIwAqmNX52CHqCIs+WjbmiJlGCi717t2TqSc1U=\n=q5Xt\n-----END PGP SIGNATURE-----\n", "payload": "tree c37b9e784046a68cc1abad86f44949c0b1cc671d\nparent 3e937d02a012dbce129cc7773517a9bb24f5bf93\nparent 825b8db34ad908298fd8200a8fecfb7bdc146bdc\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1668917759 +0900\ncommitter GitHub <noreply@github.com> 1668917759 +0900\n\nRollup merge of #104608 - Nilstrieb:fixmed, r=compiler-errors\n\nCleanup macro matching recovery\n\nThe retry has been implemented already in #104335. Also removes a `HACK` comment that's not really needed anymore because the \"don't recover during macro matching\" isn't really a hack but correct behavior.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28034bb2f88105c0810a99cd345853e51a650c27", "html_url": "https://github.com/rust-lang/rust/commit/28034bb2f88105c0810a99cd345853e51a650c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28034bb2f88105c0810a99cd345853e51a650c27/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e937d02a012dbce129cc7773517a9bb24f5bf93", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e937d02a012dbce129cc7773517a9bb24f5bf93", "html_url": "https://github.com/rust-lang/rust/commit/3e937d02a012dbce129cc7773517a9bb24f5bf93"}, {"sha": "825b8db34ad908298fd8200a8fecfb7bdc146bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/825b8db34ad908298fd8200a8fecfb7bdc146bdc", "html_url": "https://github.com/rust-lang/rust/commit/825b8db34ad908298fd8200a8fecfb7bdc146bdc"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "6c7063ca28b35b5fcc580180d41fe5a3e90872ba", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28034bb2f88105c0810a99cd345853e51a650c27/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28034bb2f88105c0810a99cd345853e51a650c27/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=28034bb2f88105c0810a99cd345853e51a650c27", "patch": "@@ -495,7 +495,6 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n     // hacky, but speeds up the `html5ever` benchmark significantly. (Issue\n     // 68836 suggests a more comprehensive but more complex change to deal with\n     // this situation.)\n-    // FIXME(Nilstrieb): Stop recovery from happening on this parser and retry later with recovery if the macro failed to match.\n     let parser = parser_from_cx(sess, arg.clone(), T::recovery());\n     // Try each arm's matchers.\n     let mut tt_parser = TtParser::new(name);"}, {"sha": "fe7401786a0291ebf8e20dc56d3dddca76c816d3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28034bb2f88105c0810a99cd345853e51a650c27/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28034bb2f88105c0810a99cd345853e51a650c27/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=28034bb2f88105c0810a99cd345853e51a650c27", "patch": "@@ -2078,12 +2078,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == TokenKind::Semi\n             && matches!(self.token_cursor.frame.delim_sp, Some((Delimiter::Parenthesis, _)))\n-            // HACK: This is needed so we can detect whether we're inside a macro,\n-            // where regular assumptions about what tokens can follow other tokens\n-            // don't necessarily apply.\n             && self.may_recover()\n-            // FIXME(Nilstrieb): Remove this check once `may_recover` actually stops recovery\n-            && self.subparser_name.is_none()\n         {\n             // It is likely that the closure body is a block but where the\n             // braces have been removed. We will recover and eat the next"}]}