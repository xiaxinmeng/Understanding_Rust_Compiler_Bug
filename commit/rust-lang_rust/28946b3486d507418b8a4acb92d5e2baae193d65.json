{"sha": "28946b3486d507418b8a4acb92d5e2baae193d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTQ2YjM0ODZkNTA3NDE4YjhhNGFjYjkyZDVlMmJhYWUxOTNkNjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-09T19:34:23Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-10T21:30:11Z"}, "message": "Track span of function in method calls, and use this in #[track_caller]\n\nFixes #69977\n\nWhen we parse a chain of method calls like `foo.a().b().c()`, each\n`MethodCallExpr` gets assigned a span that starts at the beginning of\nthe call chain (`foo`). While this is useful for diagnostics, it means\nthat `Location::caller` will return the same location for every call\nin a call chain.\n\nThis PR makes us separately record the span of the function name and\narguments for a method call (e.g. `b()` in `foo.a().b().c()`). This\n`Span` is passed through HIR lowering and MIR building to\n`TerminatorKind::Call`, where it is used in preference to\n`Terminator.source_info.span` when determining `Location::caller`.\n\nThis new span is also useful for diagnostics where we want to emphasize\na particular method call - for an example, see\nhttps://github.com/rust-lang/rust/pull/72389#discussion_r436035990", "tree": {"sha": "cdbadae12d6f219305db1970a86feda27bf92c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdbadae12d6f219305db1970a86feda27bf92c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28946b3486d507418b8a4acb92d5e2baae193d65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7hUOMACgkQtAh+UQ6Y\nsWQJgQ/+PWyDhN54ToH2jejCCcmSJNwSYx7e5ICZGujXId1/C1yOkmfKeNZZ0P0Y\nBW0sgozhgvioC2Fn3rFwTdwVleFRd7qGbGHauPI2/AlRxOZPRZFEN4UFgysP6+jk\nZy5rz9a0aWc8nCeODhGyh0Mq8skLBoczE/Mx+o9I6e9P4YlUzQC4w/BVqW9OF2bZ\nIciFLR7RD4czdw/S30b0BMF3wRgcariM5nkXdke6NjjXwa+MuHPEBaSm7N7Y92y2\n944kTRDwAA28/SOErm2DnzfPRoq6FTq+XuVCtLX5IWcl4aXoBhQh7CgASJP9j5mD\nMVaW+49J7xCPJUXCIYpv/YwWSPq7QUKcW/VBHZYIUY4f3kDfem5wjBXGFbk2GJFG\nRBB5F9xfLMbFyRS9wV7X6G2/mQ2mLBQgjeXhXYo5+HXOdYi47XUoAG7ivXsPvgab\nFY4w6EpoU4RatKeI4rx7XvtczPy4Qmpc0AColzYTxhGK0jp30Rqu/ZtYWb/ZEkji\nBdCN/gG4xnHCAt60bhg4Kt6wIE4RU7ch8QRjKkAj9q1owWLHx82t+o24pYNM5fuv\nDF1da4ajjjTa5tjQY6gxUhDr+UqoBe1/fePsehHGUZz+Bt/jTFILIUDcnbSZnKI9\n4hW4YvH8UkbjoPiU3tHrmcdnzn4hmPYAbq2L9yh0FG4Asr0kMYQ=\n=3OZY\n-----END PGP SIGNATURE-----", "payload": "tree cdbadae12d6f219305db1970a86feda27bf92c33\nparent bb8674837a9cc5225020e07fc3f164762bb4c11c\nauthor Aaron Hill <aa1ronham@gmail.com> 1591731263 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1591824611 -0400\n\nTrack span of function in method calls, and use this in #[track_caller]\n\nFixes #69977\n\nWhen we parse a chain of method calls like `foo.a().b().c()`, each\n`MethodCallExpr` gets assigned a span that starts at the beginning of\nthe call chain (`foo`). While this is useful for diagnostics, it means\nthat `Location::caller` will return the same location for every call\nin a call chain.\n\nThis PR makes us separately record the span of the function name and\narguments for a method call (e.g. `b()` in `foo.a().b().c()`). This\n`Span` is passed through HIR lowering and MIR building to\n`TerminatorKind::Call`, where it is used in preference to\n`Terminator.source_info.span` when determining `Location::caller`.\n\nThis new span is also useful for diagnostics where we want to emphasize\na particular method call - for an example, see\nhttps://github.com/rust-lang/rust/pull/72389#discussion_r436035990\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28946b3486d507418b8a4acb92d5e2baae193d65", "html_url": "https://github.com/rust-lang/rust/commit/28946b3486d507418b8a4acb92d5e2baae193d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28946b3486d507418b8a4acb92d5e2baae193d65/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8674837a9cc5225020e07fc3f164762bb4c11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c", "html_url": "https://github.com/rust-lang/rust/commit/bb8674837a9cc5225020e07fc3f164762bb4c11c"}], "stats": {"total": 191, "additions": 141, "deletions": 50}, "files": [{"sha": "5012fbb30b0f003718736fb15383b3126f21ab79", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1165,7 +1165,9 @@ pub enum ExprKind {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n-    MethodCall(PathSegment, Vec<P<Expr>>),\n+    /// The `Span` is the span of the function, without the dot and receiver\n+    /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n+    MethodCall(PathSegment, Vec<P<Expr>>, Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (e.g., `a + b`, `a * b`)."}, {"sha": "f0441c6b885d34837e90fd0e14f4c049937bd8d3", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1111,11 +1111,12 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(f);\n             visit_exprs(args, vis);\n         }\n-        ExprKind::MethodCall(PathSegment { ident, id, args }, exprs) => {\n+        ExprKind::MethodCall(PathSegment { ident, id, args }, exprs, span) => {\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n             visit_opt(args, |args| vis.visit_generic_args(args));\n             visit_exprs(exprs, vis);\n+            vis.visit_span(span);\n         }\n         ExprKind::Binary(_binop, lhs, rhs) => {\n             vis.visit_expr(lhs);"}, {"sha": "d8b44a22f2c92b340ea03a3644943e5df358a2e0", "filename": "src/librustc_ast/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fparser.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -394,7 +394,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        ast::ExprKind::MethodCall(.., ref exprs) => {\n+        ast::ExprKind::MethodCall(.., ref exprs, _) => {\n             // X { y: 1 }.bar(...)\n             contains_exterior_struct_lit(&exprs[0])\n         }"}, {"sha": "ccab46703dffe796e65c01f19de9e117f78ffe3a", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -726,7 +726,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, ref arguments) => {\n+        ExprKind::MethodCall(ref segment, ref arguments, _span) => {\n             visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "af7b851954acc4e124ba9967a88b7ec4a48f3de5", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -39,7 +39,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let f = self.lower_expr(f);\n                     hir::ExprKind::Call(f, self.lower_exprs(args))\n                 }\n-                ExprKind::MethodCall(ref seg, ref args) => {\n+                ExprKind::MethodCall(ref seg, ref args, span) => {\n                     let hir_seg = self.arena.alloc(self.lower_path_segment(\n                         e.span,\n                         seg,\n@@ -50,7 +50,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         None,\n                     ));\n                     let args = self.lower_exprs(args);\n-                    hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n+                    hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args, span)\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                     let binop = self.lower_binop(binop);"}, {"sha": "ca37bd6cf81109a590edddf4a6bf6cc96c1467b1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1818,7 +1818,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args[..]);\n             }\n-            ast::ExprKind::MethodCall(ref segment, ref args) => {\n+            ast::ExprKind::MethodCall(ref segment, ref args, _) => {\n                 self.print_expr_method_call(segment, &args[..]);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {"}, {"sha": "74d7fc16215800530c4d547ff26bdd5d6c6d4519", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -530,6 +530,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         args: &Vec<mir::Operand<'tcx>>,\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n+        fn_span: Span,\n     ) {\n         let span = terminator.source_info.span;\n         // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n@@ -634,7 +635,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         if intrinsic == Some(\"caller_location\") {\n             if let Some((_, target)) = destination.as_ref() {\n-                let location = self.get_caller_location(&mut bx, span);\n+                let location = self.get_caller_location(&mut bx, fn_span);\n \n                 if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n                     location.val.store(&mut bx, tmp);\n@@ -798,7 +799,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args.len() + 1,\n                 \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n             );\n-            let location = self.get_caller_location(&mut bx, span);\n+            let location = self.get_caller_location(&mut bx, fn_span);\n+            debug!(\n+                \"codegen_call_terminator({:?}): location={:?} (fn_span {:?})\",\n+                terminator, location, fn_span\n+            );\n+\n             let last_arg = fn_abi.args.last().unwrap();\n             self.codegen_argument(&mut bx, location, &mut llargs, last_arg);\n         }\n@@ -1016,6 +1022,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 ref destination,\n                 cleanup,\n                 from_hir_call: _,\n+                fn_span,\n             } => {\n                 self.codegen_call_terminator(\n                     helper,\n@@ -1025,6 +1032,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     args,\n                     destination,\n                     cleanup,\n+                    fn_span,\n                 );\n             }\n             mir::TerminatorKind::GeneratorDrop | mir::TerminatorKind::Yield { .. } => {"}, {"sha": "20d2ea0a215d4ac8ced615dda3f0443944b7a9dd", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -272,7 +272,7 @@ impl<'a> ExtCtxt<'a> {\n     ) -> P<ast::Expr> {\n         args.insert(0, expr);\n         let segment = ast::PathSegment::from_ident(ident.with_span_pos(span));\n-        self.expr(span, ast::ExprKind::MethodCall(segment, args))\n+        self.expr(span, ast::ExprKind::MethodCall(segment, args, span))\n     }\n     pub fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n         self.expr(b.span, ast::ExprKind::Block(b, None))"}, {"sha": "6b751456618e974a987f21c771157c9ab672b2b8", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1371,7 +1371,7 @@ pub struct Expr<'hir> {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Expr<'static>, 64);\n+rustc_data_structures::static_assert_size!(Expr<'static>, 72);\n \n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1568,12 +1568,14 @@ pub enum ExprKind<'hir> {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    /// The final `Span` represents the span of the function and arguments\n+    /// (e.g. `foo::<Bar, Baz>(a, b, c, d)` in `x.foo::<Bar, Baz>(a, b, c, d)`\n     ///\n     /// To resolve the called method to a `DefId`, call [`type_dependent_def_id`] with\n     /// the `hir_id` of the `MethodCall` node itself.\n     ///\n     /// [`type_dependent_def_id`]: ../ty/struct.TypeckTables.html#method.type_dependent_def_id\n-    MethodCall(&'hir PathSegment<'hir>, Span, &'hir [Expr<'hir>]),\n+    MethodCall(&'hir PathSegment<'hir>, Span, &'hir [Expr<'hir>], Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(&'hir [Expr<'hir>]),\n     /// A binary operation (e.g., `a + b`, `a * b`)."}, {"sha": "6bc899622a36303ade661ef72df1718b4385f97b", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1090,7 +1090,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, _, arguments) => {\n+        ExprKind::MethodCall(ref segment, _, arguments, _) => {\n             visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "f30f9944e5800b48cc451084ebbec03511572dc4", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1286,7 +1286,7 @@ impl<'a> State<'a> {\n             hir::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(&func, args);\n             }\n-            hir::ExprKind::MethodCall(ref segment, _, ref args) => {\n+            hir::ExprKind::MethodCall(ref segment, _, ref args, _) => {\n                 self.print_expr_method_call(segment, args);\n             }\n             hir::ExprKind::Binary(op, ref lhs, ref rhs) => {\n@@ -2469,7 +2469,7 @@ fn contains_exterior_struct_lit(value: &hir::Expr<'_>) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        hir::ExprKind::MethodCall(.., ref exprs) => {\n+        hir::ExprKind::MethodCall(.., ref exprs, _) => {\n             // `X { y: 1 }.bar(...)`\n             contains_exterior_struct_lit(&exprs[0])\n         }"}, {"sha": "c72ea699f90ac12442263695e02d33e2c226d3b3", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::MethodCall(_, call_span, exprs) = expr.kind {\n+        if let ExprKind::MethodCall(_, call_span, exprs, _) = expr.kind {\n             if call_span == self.target_span\n                 && Some(self.target)\n                     == self.infcx.in_progress_tables.and_then(|tables| {\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // 3 |     let _ = x.sum() as f64;\n             //   |               ^^^ cannot infer type for `S`\n             span\n-        } else if let Some(ExprKind::MethodCall(_, call_span, _)) =\n+        } else if let Some(ExprKind::MethodCall(_, call_span, _, _)) =\n             local_visitor.found_method_call.map(|e| &e.kind)\n         {\n             // Point at the call instead of the whole expression:"}, {"sha": "5b282c4203400bb2bec0e70a669c1c545f350845", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -24,7 +24,7 @@ declare_lint_pass!(\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIntoIter {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         // We only care about method call expressions.\n-        if let hir::ExprKind::MethodCall(call, span, args) = &expr.kind {\n+        if let hir::ExprKind::MethodCall(call, span, args, _) = &expr.kind {\n             if call.ident.name != sym::into_iter {\n                 return;\n             }"}, {"sha": "aa0dd9c83113ba16c516a1c858b925c85254638c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1899,7 +1899,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         }\n                     }\n                 }\n-            } else if let hir::ExprKind::MethodCall(_, _, ref args) = expr.kind {\n+            } else if let hir::ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n                 // Find problematic calls to `MaybeUninit::assume_init`.\n                 let def_id = cx.tables.type_dependent_def_id(expr.hir_id)?;\n                 if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {"}, {"sha": "8196b37391b21cdb044fd25df5ef32c1c48eedc5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -526,7 +526,7 @@ trait UnusedDelimLint {\n                 let (args_to_check, ctx) = match *call_or_other {\n                     Call(_, ref args) => (&args[..], UnusedDelimsCtx::FunctionArg),\n                     // first \"argument\" is self (which sometimes needs delims)\n-                    MethodCall(_, ref args) => (&args[1..], UnusedDelimsCtx::MethodArg),\n+                    MethodCall(_, ref args, _) => (&args[1..], UnusedDelimsCtx::MethodArg),\n                     // actual catch-all arm\n                     _ => {\n                         return;"}, {"sha": "6ffed52440016705cfdb8763b072f3ca904f1655", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1131,6 +1131,7 @@ pub enum TerminatorKind<'tcx> {\n         /// `true` if this is from a call in HIR rather than from an overloaded\n         /// operator. True for overloaded function call.\n         from_hir_call: bool,\n+        fn_span: Span,\n     },\n \n     /// Jump to the target if the condition has the expected value,"}, {"sha": "3f5d528d9e7c4a3219b3c315970331bfc4ab9daf", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 resume_arg: resume_arg.fold_with(folder),\n                 drop,\n             },\n-            Call { ref func, ref args, ref destination, cleanup, from_hir_call } => {\n+            Call { ref func, ref args, ref destination, cleanup, from_hir_call, fn_span } => {\n                 let dest =\n                     destination.as_ref().map(|&(ref loc, dest)| (loc.fold_with(folder), dest));\n \n@@ -52,6 +52,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     destination: dest,\n                     cleanup,\n                     from_hir_call,\n+                    fn_span,\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {"}, {"sha": "966a709c8a2ce9f6d1dd7a589b0b8dd62ecaea34", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -492,6 +492,7 @@ macro_rules! make_mir_visitor {\n                         destination,\n                         cleanup: _,\n                         from_hir_call: _,\n+                        fn_span: _\n                     } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {"}, {"sha": "18a6189507090c2ba16dc9f90e498a7b0002831d", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -142,6 +142,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.consume_operand(location, func);\n                 for arg in args {"}, {"sha": "786424e870f8edb7bfe93306f548bdff93867ab4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -699,6 +699,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 ref destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.consume_operand(loc, (func, span), flow_state);\n                 for arg in args {"}, {"sha": "6c9cb529dc2f3bdc8b817d89139b0dc8d28839de", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -467,7 +467,7 @@ impl Direction for Forward {\n                 propagate(target, exit_state);\n             }\n \n-            Call { cleanup, destination, ref func, ref args, from_hir_call: _ } => {\n+            Call { cleanup, destination, ref func, ref args, from_hir_call: _, fn_span: _ } => {\n                 if let Some(unwind) = cleanup {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n                         propagate(unwind, exit_state);"}, {"sha": "4f6ccdafdda18bb713da955c16c6001d50d0340c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -401,6 +401,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 ref destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.gather_operand(func);\n                 for arg in args {"}, {"sha": "ddeed92f851248709ec48d8198660d7dbcb84dda", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1,6 +1,7 @@\n use std::convert::TryFrom;\n \n use rustc_hir::lang_items::PanicLocationLangItem;\n+use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::subst::Subst;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::LayoutOf;\n@@ -14,19 +15,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first callsite in a\n     /// frame which is not `#[track_caller]`.\n     crate fn find_closest_untracked_caller_location(&self) -> Span {\n-        self.stack()\n+        let frame = self\n+            .stack()\n             .iter()\n             .rev()\n             // Find first non-`#[track_caller]` frame.\n-            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            .find(|frame| {\n+                debug!(\n+                    \"find_closest_untracked_caller_location: checking frame {:?}\",\n+                    frame.instance\n+                );\n+                !frame.instance.def.requires_caller_location(*self.tcx)\n+            })\n             // Assert that there is always such a frame.\n-            .unwrap()\n-            .current_source_info()\n-            // Assert that the frame we look at is actually executing code currently\n-            // (`current_source_info` is None when we are unwinding and the frame does\n-            // not require cleanup).\n-            .unwrap()\n-            .span\n+            .unwrap();\n+        let loc = frame.loc.unwrap();\n+        let block = &frame.body.basic_blocks()[loc.block];\n+        assert_eq!(block.statements.len(), loc.statement_index);\n+        debug!(\n+            \"find_closest_untracked_caller_location:: got terminator {:?} ({:?})\",\n+            block.terminator(),\n+            block.terminator().kind\n+        );\n+        if let TerminatorKind::Call { fn_span, .. } = block.terminator().kind {\n+            return fn_span;\n+        }\n+        unreachable!();\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}, {"sha": "cd7621ea9752b4ebc51a0d40394b060bb7a74346", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -56,6 +56,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 destination,\n                 ref cleanup,\n                 from_hir_call: _from_hir_call,\n+                fn_span: _,\n             } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;"}, {"sha": "f95fd9b9e90c562f51b31024f7795957268934f9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -460,6 +460,7 @@ impl CloneShimBuilder<'tcx> {\n                 destination: Some((dest, next)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: true,\n+                fn_span: self.span,\n             },\n             false,\n         );\n@@ -788,6 +789,7 @@ fn build_call_shim<'tcx>(\n                 None\n             },\n             from_hir_call: true,\n+            fn_span: span,\n         },\n         false,\n     );"}, {"sha": "e1311ccd3746fbb1b346c482ed1a7e9c17b01ab7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             };\n \n             match terminator.kind {\n-                TerminatorKind::Call { mut func, mut args, from_hir_call, .. } => {\n+                TerminatorKind::Call { mut func, mut args, from_hir_call, fn_span, .. } => {\n                     self.visit_operand(&mut func, loc);\n                     for arg in &mut args {\n                         self.visit_operand(arg, loc);\n@@ -925,6 +925,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             cleanup: None,\n                             destination: Some((Place::from(new_temp), new_target)),\n                             from_hir_call,\n+                            fn_span,\n                         },\n                         ..terminator\n                     };"}, {"sha": "4c8fc49099b2af109b4e5b9278f2d59df278b9e7", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -368,7 +368,14 @@ fn check_terminator(\n             Err((span, \"const fn generators are unstable\".into()))\n         }\n \n-        TerminatorKind::Call { func, args, from_hir_call: _, destination: _, cleanup: _ } => {\n+        TerminatorKind::Call {\n+            func,\n+            args,\n+            from_hir_call: _,\n+            destination: _,\n+            cleanup: _,\n+            fn_span: _,\n+        } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(def_id, _) = fn_ty.kind {\n                 if !crate::const_eval::is_min_const_fn(tcx, def_id) {"}, {"sha": "a1345452ca9793e63de8a4e905f45e26de7feb04", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -644,6 +644,7 @@ where\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),\n                     from_hir_call: true,\n+                    fn_span: self.source_info.span,\n                 },\n                 source_info: self.source_info,\n             }),\n@@ -988,6 +989,7 @@ where\n             destination: Some((unit_temp, target)),\n             cleanup: None,\n             from_hir_call: false,\n+            fn_span: self.source_info.span,\n         }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n "}, {"sha": "76096fc2299fba3b1d02b8dfe1b7a412566711cd", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 });\n                 exit_block.unit()\n             }\n-            ExprKind::Call { ty, fun, args, from_hir_call } => {\n+            ExprKind::Call { ty, fun, args, from_hir_call, fn_span } => {\n                 let intrinsic = match ty.kind {\n                     ty::FnDef(def_id, _) => {\n                         let f = ty.fn_sig(this.hir.tcx());\n@@ -206,6 +206,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     this.record_operands_moved(&args);\n \n+                    debug!(\"into_expr: fn_span={:?}\", fn_span);\n+\n                     this.cfg.terminate(\n                         block,\n                         source_info,\n@@ -222,6 +224,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 Some((destination, success))\n                             },\n                             from_hir_call,\n+                            fn_span\n                         },\n                     );\n                     success.unit()"}, {"sha": "3e7bfc7d59b9b58d416c1da4368430fb5b660dab", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -443,6 +443,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 destination: Some((eq_result, eq_block)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: false,\n+                fn_span: source_info.span\n             },\n         );\n "}, {"sha": "971a89796e281c6bd8ba70faf8630d545f21d12a", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -139,11 +139,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n     let kind = match expr.kind {\n         // Here comes the interesting stuff:\n-        hir::ExprKind::MethodCall(_, method_span, ref args) => {\n+        hir::ExprKind::MethodCall(_, method_span, ref args, fn_span) => {\n             // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n             let expr = method_callee(cx, expr, method_span, None);\n             let args = args.iter().map(|e| e.to_ref()).collect();\n-            ExprKind::Call { ty: expr.ty, fun: expr.to_ref(), args, from_hir_call: true }\n+            ExprKind::Call { ty: expr.ty, fun: expr.to_ref(), args, from_hir_call: true, fn_span }\n         }\n \n         hir::ExprKind::Call(ref fun, ref args) => {\n@@ -170,6 +170,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                     fun: method.to_ref(),\n                     args: vec![fun.to_ref(), tupled_args.to_ref()],\n                     from_hir_call: true,\n+                    fn_span: expr.span,\n                 }\n             } else {\n                 let adt_data =\n@@ -215,6 +216,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n                         from_hir_call: true,\n+                        fn_span: expr.span,\n                     }\n                 }\n             }\n@@ -1024,7 +1026,7 @@ fn overloaded_operator<'a, 'tcx>(\n     args: Vec<ExprRef<'tcx>>,\n ) -> ExprKind<'tcx> {\n     let fun = method_callee(cx, expr, expr.span, None);\n-    ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false }\n+    ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false, fn_span: expr.span }\n }\n \n fn overloaded_place<'a, 'tcx>(\n@@ -1060,7 +1062,13 @@ fn overloaded_place<'a, 'tcx>(\n         temp_lifetime,\n         ty: ref_ty,\n         span: expr.span,\n-        kind: ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false },\n+        kind: ExprKind::Call {\n+            ty: fun.ty,\n+            fun: fun.to_ref(),\n+            args,\n+            from_hir_call: false,\n+            fn_span: expr.span,\n+        },\n     };\n \n     // construct and return a deref wrapper `*foo()`"}, {"sha": "140b8bbe15e3d6adf5884ca39591aac898438145", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -146,6 +146,7 @@ crate enum ExprKind<'tcx> {\n         // Whether this is from a call in HIR, rather than from an overloaded\n         // operator. True for overloaded function call.\n         from_hir_call: bool,\n+        fn_span: Span,\n     },\n     Deref {\n         arg: ExprRef<'tcx>,"}, {"sha": "49a5c8801766c5521de580d6d8d170bbd52a81a2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -639,7 +639,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"?\",\n                     ExprKind::Field(_, _) => \"a field access\",\n-                    ExprKind::MethodCall(_, _) => \"a method call\",\n+                    ExprKind::MethodCall(_, _, _) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n                     ExprKind::Await(_) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n@@ -865,6 +865,7 @@ impl<'a> Parser<'a> {\n             return self.mk_await_expr(self_arg, lo);\n         }\n \n+        let fn_span_lo = self.token.span;\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n \n@@ -873,8 +874,9 @@ impl<'a> Parser<'a> {\n             let mut args = self.parse_paren_expr_seq()?;\n             args.insert(0, self_arg);\n \n+            let fn_span = fn_span_lo.to(self.prev_token.span);\n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args), AttrVec::new()))\n+            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))\n         } else {\n             // Field access `expr.f`\n             if let Some(args) = segment.args {"}, {"sha": "ff5dabd5418c9187d99bed46609d97eb8e95e983", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&f, succ)\n             }\n \n-            hir::ExprKind::MethodCall(.., ref args) => {\n+            hir::ExprKind::MethodCall(.., ref args, _) => {\n                 let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(\n                     m,"}, {"sha": "d54ec2eca8c97ed004c9ccdc9681d9c9d4f03b62", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1302,7 +1302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     return;\n                 }\n             }\n-            hir::ExprKind::MethodCall(_, span, _) => {\n+            hir::ExprKind::MethodCall(_, span, _, _) => {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n                 if let Some(def_id) = self.tables.type_dependent_def_id(expr.hir_id) {"}, {"sha": "7166fef2d13952420262c0045bb8874730e06140", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -2117,7 +2117,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(ref segment, ref arguments) => {\n+            ExprKind::MethodCall(ref segment, ref arguments, _) => {\n                 let mut arguments = arguments.iter();\n                 self.resolve_expr(arguments.next().unwrap(), Some(expr));\n                 for argument in arguments {"}, {"sha": "39cb39ba619ffb9da01c8e3ea1af35bcfe71c711", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -1375,7 +1375,9 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n                 let res = self.save_ctxt.get_path_res(hir_expr.hir_id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_res(res), *base)\n             }\n-            hir::ExprKind::MethodCall(ref seg, _, args) => self.process_method_call(ex, seg, args),\n+            hir::ExprKind::MethodCall(ref seg, _, args, _) => {\n+                self.process_method_call(ex, seg, args)\n+            }\n             hir::ExprKind::Field(ref sub_ex, _) => {\n                 self.visit_expr(&sub_ex);\n "}, {"sha": "c097787e4722dd9d7a74217f48e1403b4bf63c3a", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (method_path, method_span, method_expr) = match (hir, closure_params_len) {\n             (\n                 Some(Node::Expr(hir::Expr {\n-                    kind: hir::ExprKind::MethodCall(path, span, expr),\n+                    kind: hir::ExprKind::MethodCall(path, span, expr, _),\n                     ..\n                 })),\n                 1,\n@@ -455,7 +455,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     let mut sugg_sp = sp;\n-                    if let hir::ExprKind::MethodCall(ref segment, sp, ref args) = expr.kind {\n+                    if let hir::ExprKind::MethodCall(ref segment, sp, ref args, _) = expr.kind {\n                         let clone_trait = self.tcx.require_lang_item(CloneTraitLangItem, Some(sp));\n                         if let ([arg], Some(true), sym::clone) = (\n                             &args[..],"}, {"sha": "c6a9a37e4407fec77d835eace540fbda0f9426aa", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Call(ref callee, _) => {\n                 self.warn_if_unreachable(expr.hir_id, callee.span, \"call\")\n             }\n-            ExprKind::MethodCall(_, ref span, _) => {\n+            ExprKind::MethodCall(_, ref span, _, _) => {\n                 self.warn_if_unreachable(expr.hir_id, *span, \"call\")\n             }\n             _ => self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\"),\n@@ -262,7 +262,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::Block(ref body, _) => self.check_block_with_expected(&body, expected),\n             ExprKind::Call(ref callee, ref args) => self.check_call(expr, &callee, args, expected),\n-            ExprKind::MethodCall(ref segment, span, ref args) => {\n+            ExprKind::MethodCall(ref segment, span, ref args, _) => {\n                 self.check_method_call(expr, segment, span, args, expected, needs)\n             }\n             ExprKind::Cast(ref e, ref t) => self.check_expr_cast(e, t, expr),"}, {"sha": "b2aeed09469a7af4944c5c4a49ba1fcbe7c6af4c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -3912,7 +3912,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  sugg_unit: bool| {\n             let (span, start_span, args) = match &expr.kind {\n                 hir::ExprKind::Call(hir::Expr { span, .. }, args) => (*span, *span, &args[..]),\n-                hir::ExprKind::MethodCall(path_segment, span, args) => (\n+                hir::ExprKind::MethodCall(path_segment, span, args, _) => (\n                     *span,\n                     // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n                     path_segment"}, {"sha": "6baadb8febd3689724696c7c8d5916abcb863287", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(args);\n             }\n \n-            hir::ExprKind::MethodCall(.., ref args) => {\n+            hir::ExprKind::MethodCall(.., ref args, _) => {\n                 // callee.m(args)\n                 self.consume_exprs(args);\n             }"}, {"sha": "3f1c8f7abe8b8c6c5979b03cb641895f855e8a7e", "filename": "src/test/ui/rfc-2091-track-caller/call-chain.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28946b3486d507418b8a4acb92d5e2baae193d65/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs?ref=28946b3486d507418b8a4acb92d5e2baae193d65", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+use std::panic::Location;\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[track_caller]\n+    fn check_loc(&self, line: u32, col: u32) -> &Self {\n+        let loc = Location::caller();\n+        assert_eq!(loc.file(), file!(), \"file mismatch\");\n+        assert_eq!(loc.line(), line, \"line mismatch\");\n+        assert_eq!(loc.column(), col, \"column mismatch\");\n+        self\n+    }\n+}\n+\n+fn main() {\n+    // Tests that when `Location::caller` is used in a method chain,\n+    // it points to the start of the correct call (the first character after the dot)\n+    // instead of to the very first expression in the chain\n+    let foo = Foo;\n+    foo.\n+        check_loc(line!(), 9).check_loc(line!(), 31)\n+        .check_loc(line!(), 10);\n+}"}]}