{"sha": "3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "node_id": "C_kwDOAAsO6NoAKDNiNWIyZWQwMWE1YjMyYWZmMDVkZDdmY2FmMjQ0MzU4YmNiZmEwY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T03:05:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T03:05:57Z"}, "message": "Auto merge of #10492 - schubart:collection_is_never_read_unit_type, r=Manishearth\n\n`collection_is_never_read`: Handle unit type\n\nchangelog: [`collection_is_never_read`]: Fix false negative\nfixes: #10488", "tree": {"sha": "4fc441dce78428f48d9ca11f54a3ed585ddebf96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc441dce78428f48d9ca11f54a3ed585ddebf96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "html_url": "https://github.com/rust-lang/rust/commit/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ec2e192f58aa4fc82e3b4551e16e0f83d368569", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec2e192f58aa4fc82e3b4551e16e0f83d368569", "html_url": "https://github.com/rust-lang/rust/commit/5ec2e192f58aa4fc82e3b4551e16e0f83d368569"}, {"sha": "3d711455c21fca69cad5de32385da90a4902c67c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d711455c21fca69cad5de32385da90a4902c67c", "html_url": "https://github.com/rust-lang/rust/commit/3d711455c21fca69cad5de32385da90a4902c67c"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "5e2eb5789f6271bc4a05c38d609397cc7a417267", "filename": "clippy_lints/src/collection_is_never_read.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "patch": "@@ -101,21 +101,34 @@ fn has_no_read_access<'tcx>(cx: &LateContext<'tcx>, id: HirId, block: &'tcx Bloc\n             return ControlFlow::Continue(());\n         }\n \n-        // Method call on `id` in a statement ignores any return value, so it's not a read access:\n+        // Look for method call with receiver `id`. It might be a non-read access:\n         //\n-        // id.foo(...); // Not reading `id`.\n+        // id.foo(args)\n         //\n         // Only assuming this for \"official\" methods defined on the type. For methods defined in extension\n         // traits (identified as local, based on the orphan rule), pessimistically assume that they might\n         // have side effects, so consider them a read.\n         if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n             && let ExprKind::MethodCall(_, receiver, _, _) = parent.kind\n             && path_to_local_id(receiver, id)\n-            && let Some(Node::Stmt(..)) = get_parent_node(cx.tcx, parent.hir_id)\n             && let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n             && !method_def_id.is_local()\n         {\n-            return ControlFlow::Continue(());\n+            // The method call is a statement, so the return value is not used. That's not a read access:\n+            //\n+            // id.foo(args);\n+            if let Some(Node::Stmt(..)) = get_parent_node(cx.tcx, parent.hir_id) {\n+                return ControlFlow::Continue(());\n+            }\n+\n+            // The method call is not a statement, so its return value is used somehow but its type is the\n+            // unit type, so this is not a real read access. Examples:\n+            //\n+            // let y = x.clear();\n+            // println!(\"{:?}\", x.clear());\n+            if cx.typeck_results().expr_ty(parent).is_unit() {\n+                return ControlFlow::Continue(());\n+            }\n         }\n \n         // Any other access to `id` is a read access. Stop searching."}, {"sha": "01259a983ab6fa03301ceec65c69364c6e00f5eb", "filename": "tests/ui/collection_is_never_read.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "patch": "@@ -84,13 +84,18 @@ fn shadowing_2() {\n }\n \n #[allow(clippy::let_unit_value)]\n-fn fake_read() {\n-    let mut x = vec![1, 2, 3]; // Ok\n+fn fake_read_1() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n     x.reverse();\n-    // `collection_is_never_read` gets fooled, but other lints should catch this.\n     let _: () = x.clear();\n }\n \n+fn fake_read_2() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    x.reverse();\n+    println!(\"{:?}\", x.push(5));\n+}\n+\n fn assignment() {\n     let mut x = vec![1, 2, 3]; // WARNING\n     let y = vec![4, 5, 6]; // Ok"}, {"sha": "cf51a53686f2d290a7dbe28cdbf6cb371bc48456", "filename": "tests/ui/collection_is_never_read.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/tests%2Fui%2Fcollection_is_never_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb/tests%2Fui%2Fcollection_is_never_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.stderr?ref=3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "patch": "@@ -25,40 +25,52 @@ LL |     let mut x = HashMap::new(); // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:95:5\n+  --> $DIR/collection_is_never_read.rs:88:5\n    |\n LL |     let mut x = vec![1, 2, 3]; // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:102:5\n+  --> $DIR/collection_is_never_read.rs:94:5\n    |\n LL |     let mut x = vec![1, 2, 3]; // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:119:5\n+  --> $DIR/collection_is_never_read.rs:100:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:107:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:124:5\n    |\n LL |     let mut x = HashSet::new(); // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:133:5\n+  --> $DIR/collection_is_never_read.rs:138:5\n    |\n LL |     let x = vec![1, 2, 3]; // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:169:5\n+  --> $DIR/collection_is_never_read.rs:174:5\n    |\n LL |     let mut s = String::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:182:5\n+  --> $DIR/collection_is_never_read.rs:187:5\n    |\n LL |     let mut s = String::from(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}]}