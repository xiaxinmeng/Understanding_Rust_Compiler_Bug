{"sha": "24922b7a828361399aeed73a802e786f035a6d4f", "node_id": "C_kwDOAAsO6NoAKDI0OTIyYjdhODI4MzYxMzk5YWVlZDczYTgwMmU3ODZmMDM1YTZkNGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T12:29:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T12:29:52Z"}, "message": "Rollup merge of #100753 - LuisCardosoOliveira:translation-migrate-session, r=davidtwco\n\ntranslations(rustc_session): migrates `rustc_session` to use `SessionDiagnostic` - Pt. 1\n\n## Description\n\nThis is the first PR for the migration of the module `rustc_session`. You can follow my progress [here](https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883).\n\nThe PR migrates the files `cgu_reuse_tracker` and `parse.rs` to use `SessionDiagnostic `.", "tree": {"sha": "b510e0c9bf7cb4ea567e0cfbced93fba2dc8c9d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b510e0c9bf7cb4ea567e0cfbced93fba2dc8c9d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24922b7a828361399aeed73a802e786f035a6d4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD1RACRBK7hj4Ov3rIwAAOYIIAKdp75YZ1L0R4GDZ5IZge5Bp\nHtna9LIv+yZVANj6BfYc3/jAx6BBfZZAWvL2VgjAnNNoNfSedneInOcKWaon5BAy\nsrB2z9exO1FgTDmaq81+0K9SzxXb/g+/5IbeKz/d4VVwre9JyubrQPXDhqBFFikj\n9+E2Uxp3tCpE64NRx7RN7wtEe5vKCdwm/XjxdXzGHBZMcc0/PduMx2HLXG52hvsQ\nBLukmabs5oSNZ6tRRwdymZcVTnB8fGyOePu2cAwo+YJ+q7cUJEApyMIBcw/XalaI\nRPVSpPnpbFmJMJ/T9nnCT8fJ7mLe9VzgkXnivB12nQXJy6E/owflZM1xjs0/89Y=\n=ecmA\n-----END PGP SIGNATURE-----\n", "payload": "tree b510e0c9bf7cb4ea567e0cfbced93fba2dc8c9d9\nparent 6c4bda6de456460520aa450d7ed10a1b3d9fa205\nparent 2c77f3e9c5804edc0bb520c7b4774424cea6beb0\nauthor Ralf Jung <post@ralfj.de> 1661948992 +0200\ncommitter GitHub <noreply@github.com> 1661948992 +0200\n\nRollup merge of #100753 - LuisCardosoOliveira:translation-migrate-session, r=davidtwco\n\ntranslations(rustc_session): migrates `rustc_session` to use `SessionDiagnostic` - Pt. 1\n\n## Description\n\nThis is the first PR for the migration of the module `rustc_session`. You can follow my progress [here](https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883).\n\nThe PR migrates the files `cgu_reuse_tracker` and `parse.rs` to use `SessionDiagnostic `.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24922b7a828361399aeed73a802e786f035a6d4f", "html_url": "https://github.com/rust-lang/rust/commit/24922b7a828361399aeed73a802e786f035a6d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24922b7a828361399aeed73a802e786f035a6d4f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4bda6de456460520aa450d7ed10a1b3d9fa205", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4bda6de456460520aa450d7ed10a1b3d9fa205", "html_url": "https://github.com/rust-lang/rust/commit/6c4bda6de456460520aa450d7ed10a1b3d9fa205"}, {"sha": "2c77f3e9c5804edc0bb520c7b4774424cea6beb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c77f3e9c5804edc0bb520c7b4774424cea6beb0", "html_url": "https://github.com/rust-lang/rust/commit/2c77f3e9c5804edc0bb520c7b4774424cea6beb0"}], "stats": {"total": 129, "additions": 110, "deletions": 19}, "files": [{"sha": "68f3b19b715ad7563a672184f44ce9aa895f7aa0", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -1892,7 +1892,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             }\n         });\n \n-        sess.cgu_reuse_tracker.check_expected_reuse(sess.diagnostic());\n+        sess.cgu_reuse_tracker.check_expected_reuse(sess);\n \n         sess.abort_if_errors();\n "}, {"sha": "983e5cee8237d801c8295fb85e706c993f0d5e7e", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -0,0 +1,16 @@\n+session_incorrect_cgu_reuse_type =\n+    CGU-reuse for `{$cgu_user_name}` is `{$actual_reuse}` but should be {$at_least ->\n+    [one] {\"at least \"}\n+    *[other] {\"\"}\n+    }`{$expected_reuse}`\n+\n+session_cgu_not_recorded =\n+    CGU-reuse for `{$cgu_user_name}` is (mangled: `{$cgu_name}`) was not recorded`\n+\n+session_feature_gate_error = {$explain}\n+\n+session_feature_diagnostic_for_issue =\n+    see issue #{$n} <https://github.com/rust-lang/rust/issues/{$n}> for more information\n+\n+session_feature_diagnostic_help =\n+    add `#![feature({$feature})]` to the crate attributes to enable"}, {"sha": "254e96ddd6359349e80087530020063b2c8c131e", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -41,6 +41,7 @@ fluent_messages! {\n     const_eval => \"../locales/en-US/const_eval.ftl\",\n     driver => \"../locales/en-US/driver.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n+    session => \"../locales/en-US/session.ftl\",\n     interface => \"../locales/en-US/interface.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     lint => \"../locales/en-US/lint.ftl\","}, {"sha": "2a4a772f61085dfe13dfba1a48d4944cd39e0f56", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -2,8 +2,13 @@\n //! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n+use crate::errors::{CguNotRecorded, IncorrectCguReuseType};\n+use crate::Session;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_span::{Span, Symbol};\n+use std::borrow::Cow;\n+use std::fmt::{self};\n use std::sync::{Arc, Mutex};\n use tracing::debug;\n \n@@ -14,6 +19,22 @@ pub enum CguReuse {\n     PostLto,\n }\n \n+impl fmt::Display for CguReuse {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            CguReuse::No => write!(f, \"No\"),\n+            CguReuse::PreLto => write!(f, \"PreLto \"),\n+            CguReuse::PostLto => write!(f, \"PostLto \"),\n+        }\n+    }\n+}\n+\n+impl IntoDiagnosticArg for CguReuse {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.to_string()))\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq)]\n pub enum ComparisonKind {\n     Exact,\n@@ -84,7 +105,7 @@ impl CguReuseTracker {\n         }\n     }\n \n-    pub fn check_expected_reuse(&self, diag: &rustc_errors::Handler) {\n+    pub fn check_expected_reuse(&self, sess: &Session) {\n         if let Some(ref data) = self.data {\n             let data = data.lock().unwrap();\n \n@@ -98,19 +119,17 @@ impl CguReuseTracker {\n                     };\n \n                     if error {\n-                        let at_least = if at_least { \"at least \" } else { \"\" };\n-                        let msg = format!(\n-                            \"CGU-reuse for `{cgu_user_name}` is `{actual_reuse:?}` but \\\n-                                           should be {at_least}`{expected_reuse:?}`\"\n-                        );\n-                        diag.span_err(error_span.0, &msg);\n+                        let at_least = if at_least { 1 } else { 0 };\n+                        IncorrectCguReuseType {\n+                            span: error_span.0,\n+                            cgu_user_name: &cgu_user_name,\n+                            actual_reuse,\n+                            expected_reuse,\n+                            at_least,\n+                        };\n                     }\n                 } else {\n-                    let msg = format!(\n-                        \"CGU-reuse for `{cgu_user_name}` (mangled: `{cgu_name}`) was \\\n-                                       not recorded\"\n-                    );\n-                    diag.span_fatal(error_span.0, &msg)\n+                    sess.emit_fatal(CguNotRecorded { cgu_user_name, cgu_name });\n                 }\n             }\n         }"}, {"sha": "7252f1799dac178297ebcb0d024fea2444256e2f", "filename": "compiler/rustc_session/src/errors.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -0,0 +1,45 @@\n+use std::num::NonZeroU32;\n+\n+use crate as rustc_session;\n+use crate::cgu_reuse_tracker::CguReuse;\n+use rustc_errors::MultiSpan;\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::incorrect_cgu_reuse_type)]\n+pub struct IncorrectCguReuseType<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub cgu_user_name: &'a str,\n+    pub actual_reuse: CguReuse,\n+    pub expected_reuse: CguReuse,\n+    pub at_least: u8,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::cgu_not_recorded)]\n+pub struct CguNotRecorded<'a> {\n+    pub cgu_user_name: &'a str,\n+    pub cgu_name: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::feature_gate_error, code = \"E0658\")]\n+pub struct FeatureGateError<'a> {\n+    #[primary_span]\n+    pub span: MultiSpan,\n+    pub explain: &'a str,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(session::feature_diagnostic_for_issue)]\n+pub struct FeatureDiagnosticForIssue {\n+    pub n: NonZeroU32,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[help(session::feature_diagnostic_help)]\n+pub struct FeatureDiagnosticHelp {\n+    pub feature: Symbol,\n+}"}, {"sha": "429475c573c8e8d01202e46d7ed7a1c8957ffd97", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -12,6 +12,7 @@\n \n #[macro_use]\n extern crate rustc_macros;\n+pub mod errors;\n \n pub mod cgu_reuse_tracker;\n pub mod utils;"}, {"sha": "ebec754dcffb841b063ed5ea0b4415bee8822345", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24922b7a828361399aeed73a802e786f035a6d4f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=24922b7a828361399aeed73a802e786f035a6d4f", "patch": "@@ -2,6 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n+use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError};\n use crate::lint::{\n     builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n };\n@@ -11,7 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n     DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n@@ -112,7 +113,7 @@ pub fn feature_err_issue<'a>(\n             .map(|err| err.cancel());\n     }\n \n-    let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n+    let mut err = sess.create_err(FeatureGateError { span, explain });\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n     err\n }\n@@ -130,6 +131,8 @@ pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explai\n ///\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.\n+#[allow(rustc::diagnostic_outside_of_impl)]\n+#[allow(rustc::untranslatable_diagnostic)]\n pub fn feature_warn_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n@@ -172,14 +175,12 @@ pub fn add_feature_diagnostics_for_issue<'a>(\n     issue: GateIssue,\n ) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n-        err.note(&format!(\n-            \"see issue #{n} <https://github.com/rust-lang/rust/issues/{n}> for more information\"\n-        ));\n+        err.subdiagnostic(FeatureDiagnosticForIssue { n });\n     }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n     if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({feature})]` to the crate attributes to enable\"));\n+        err.subdiagnostic(FeatureDiagnosticHelp { feature });\n     }\n }\n \n@@ -372,6 +373,8 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -380,16 +383,22 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.span_diagnostic.struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}]}