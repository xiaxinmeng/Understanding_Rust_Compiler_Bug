{"sha": "fa61678a7d471cfc8bf166979674d4574a5d3bec", "node_id": "C_kwDOAAsO6NoAKGZhNjE2NzhhN2Q0NzFjZmM4YmYxNjY5Nzk2NzRkNDU3NGE1ZDNiZWM", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T09:26:24Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T09:34:22Z"}, "message": "Fix leaking in inplace collection when destructor panics", "tree": {"sha": "547dec33259cee732b5c40e6b5948c1d192e6d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/547dec33259cee732b5c40e6b5948c1d192e6d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa61678a7d471cfc8bf166979674d4574a5d3bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa61678a7d471cfc8bf166979674d4574a5d3bec", "html_url": "https://github.com/rust-lang/rust/commit/fa61678a7d471cfc8bf166979674d4574a5d3bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa61678a7d471cfc8bf166979674d4574a5d3bec/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e530cb08950f1d03ab733e43ecec2802d099cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e530cb08950f1d03ab733e43ecec2802d099cf", "html_url": "https://github.com/rust-lang/rust/commit/36e530cb08950f1d03ab733e43ecec2802d099cf"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "359f1a9cec251528cfda8d01c0d9bf9362667218", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=fa61678a7d471cfc8bf166979674d4574a5d3bec", "patch": "@@ -138,7 +138,7 @@ use core::iter::{InPlaceIterable, SourceIter, TrustedRandomAccessNoCoerce};\n use core::mem::{self, ManuallyDrop};\n use core::ptr::{self};\n \n-use super::{InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n+use super::{InPlaceDrop, InPlaceDstBufDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n@@ -193,12 +193,16 @@ where\n \n         // Drop any remaining values at the tail of the source but prevent drop of the allocation\n         // itself once IntoIter goes out of scope.\n-        // If the drop panics then we also leak any elements collected into dst_buf.\n+        // If the drop panics then we also try to drop the destination buffer and its elements.\n+        // This is safe because `forget_allocation_drop_remaining` forgets the allocation *before*\n+        // trying to drop the remaining elements.\n         //\n         // Note: This access to the source wouldn't be allowed by the TrustedRandomIteratorNoCoerce\n         // contract (used by SpecInPlaceCollect below). But see the \"O(1) collect\" section in the\n         // module documenttation why this is ok anyway.\n+        let dst_guard = InPlaceDstBufDrop { ptr: dst_buf, len, cap };\n         src.forget_allocation_drop_remaining();\n+        mem::forget(dst_guard);\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n "}, {"sha": "25ca33c6a7bf0576921f249fcf48782663bf6c87", "filename": "library/alloc/src/vec/in_place_drop.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs?ref=fa61678a7d471cfc8bf166979674d4574a5d3bec", "patch": "@@ -22,3 +22,18 @@ impl<T> Drop for InPlaceDrop<T> {\n         }\n     }\n }\n+\n+// A helper struct for in-place collection that drops the destination allocation and elements,\n+// to avoid leaking them if some other destructor panics.\n+pub(super) struct InPlaceDstBufDrop<T> {\n+    pub(super) ptr: *mut T,\n+    pub(super) len: usize,\n+    pub(super) cap: usize,\n+}\n+\n+impl<T> Drop for InPlaceDstBufDrop<T> {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { super::Vec::from_raw_parts(self.ptr, self.len, self.cap) };\n+    }\n+}"}, {"sha": "acfbb98272dd51b339bfb01bafb48567f35bcaf8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61678a7d471cfc8bf166979674d4574a5d3bec/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=fa61678a7d471cfc8bf166979674d4574a5d3bec", "patch": "@@ -125,7 +125,7 @@ use self::set_len_on_drop::SetLenOnDrop;\n mod set_len_on_drop;\n \n #[cfg(not(no_global_oom_handling))]\n-use self::in_place_drop::InPlaceDrop;\n+use self::in_place_drop::{InPlaceDrop, InPlaceDstBufDrop};\n \n #[cfg(not(no_global_oom_handling))]\n mod in_place_drop;"}]}