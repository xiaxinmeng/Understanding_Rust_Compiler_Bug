{"sha": "75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YWQ4MzljZDI2YzFkYTE3ZmU2YmEzYWFlMTE1M2VlOTZkZTI2Yzg=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T06:04:37Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T06:04:37Z"}, "message": "Do not trigger `manual_memcpy` for `RangeTo`", "tree": {"sha": "7adb6836821c86457996c37544b2f8a8b25e8822", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7adb6836821c86457996c37544b2f8a8b25e8822"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "html_url": "https://github.com/rust-lang/rust/commit/75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37261a904ce2fbd4137180500c57f75f29945828", "url": "https://api.github.com/repos/rust-lang/rust/commits/37261a904ce2fbd4137180500c57f75f29945828", "html_url": "https://github.com/rust-lang/rust/commit/37261a904ce2fbd4137180500c57f75f29945828"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "ca61c97e3e3fcc17a289d7f249530acbe1039d75", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "patch": "@@ -951,7 +951,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n ) {\n     if let Some(higher::Range {\n         start: Some(start),\n-        ref end,\n+        end: Some(end),\n         limits,\n     }) = higher::range(cx, arg)\n     {\n@@ -990,35 +990,31 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                 }\n             };\n \n-            let print_limit = |end: &Option<&Expr<'_>>, offset: Offset, var_name: &str| {\n-                if let Some(end) = *end {\n-                    if_chain! {\n-                        if let ExprKind::MethodCall(ref method, _, ref len_args) = end.kind;\n-                        if method.ident.name == sym!(len);\n-                        if len_args.len() == 1;\n-                        if let Some(arg) = len_args.get(0);\n-                        if snippet(cx, arg.span, \"??\") == var_name;\n-                        then {\n-                            return if offset.negate {\n-                                format!(\"({} - {})\", snippet(cx, end.span, \"<src>.len()\"), offset.value)\n-                            } else {\n-                                String::new()\n-                            };\n-                        }\n+            let print_limit = |end: &Expr<'_>, offset: Offset, var_name: &str| {\n+                if_chain! {\n+                    if let ExprKind::MethodCall(ref method, _, ref len_args) = end.kind;\n+                    if method.ident.name == sym!(len);\n+                    if len_args.len() == 1;\n+                    if let Some(arg) = len_args.get(0);\n+                    if snippet(cx, arg.span, \"??\") == var_name;\n+                    then {\n+                        return if offset.negate {\n+                            format!(\"({} - {})\", snippet(cx, end.span, \"<src>.len()\"), offset.value)\n+                        } else {\n+                            String::new()\n+                        };\n                     }\n+                }\n \n-                    let end_str = match limits {\n-                        ast::RangeLimits::Closed => {\n-                            let end = sugg::Sugg::hir(cx, end, \"<count>\");\n-                            format!(\"{}\", end + sugg::ONE)\n-                        },\n-                        ast::RangeLimits::HalfOpen => format!(\"{}\", snippet(cx, end.span, \"..\")),\n-                    };\n+                let end_str = match limits {\n+                    ast::RangeLimits::Closed => {\n+                        let end = sugg::Sugg::hir(cx, end, \"<count>\");\n+                        format!(\"{}\", end + sugg::ONE)\n+                    },\n+                    ast::RangeLimits::HalfOpen => format!(\"{}\", snippet(cx, end.span, \"..\")),\n+                };\n \n-                    print_sum(&Offset::positive(end_str), &offset)\n-                } else {\n-                    \"..\".into()\n-                }\n+                print_sum(&Offset::positive(end_str), &offset)\n             };\n \n             // The only statements in the for loops can be indexed assignments from"}, {"sha": "1f41838fa169e4ce21b9cdc10e313eda3871892b", "filename": "tests/ui/manual_memcpy.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/tests%2Fui%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/tests%2Fui%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.rs?ref=75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "patch": "@@ -98,6 +98,11 @@ pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n     for i in from..from + 3 {\n         dst[i] = src[i - from];\n     }\n+\n+    // `RangeTo` `for` loop - don't trigger lint\n+    for i in 0.. {\n+        dst[i] = src[i];\n+    }\n }\n \n #[warn(clippy::needless_range_loop, clippy::manual_memcpy)]"}, {"sha": "95114c46f368dfc45681b61b87e3bdf0c9842267", "filename": "tests/ui/manual_memcpy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/tests%2Fui%2Fmanual_memcpy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75ad839cd26c1da17fe6ba3aae1153ee96de26c8/tests%2Fui%2Fmanual_memcpy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.stderr?ref=75ad839cd26c1da17fe6ba3aae1153ee96de26c8", "patch": "@@ -67,7 +67,7 @@ LL |     for i in from..from + 3 {\n    |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[..(from + 3 - from)])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/manual_memcpy.rs:105:14\n+  --> $DIR/manual_memcpy.rs:110:14\n    |\n LL |     for i in 0..src.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`"}]}