{"sha": "7a1cae59acf72f821343b2ba10ef69fb92a5b952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMWNhZTU5YWNmNzJmODIxMzQzYjJiYTEwZWY2OWZiOTJhNWI5NTI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T06:40:39Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T06:40:39Z"}, "message": "Merge #1337\n\n1337: Move syntax errors our of syntax tree r=matklad a=matklad\n\nI am not really sure if it's a good idea, but `SyntaxError` do not really belong to a `SyntaxTree`. So let's just store them on the side?\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "26e606ccd132a24e9bc89cf174e4adadf60c5992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e606ccd132a24e9bc89cf174e4adadf60c5992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1cae59acf72f821343b2ba10ef69fb92a5b952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1cae59acf72f821343b2ba10ef69fb92a5b952", "html_url": "https://github.com/rust-lang/rust/commit/7a1cae59acf72f821343b2ba10ef69fb92a5b952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1cae59acf72f821343b2ba10ef69fb92a5b952/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b0d84cb8faefedde7ace4ff152a2a13408e79e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d84cb8faefedde7ace4ff152a2a13408e79e5d", "html_url": "https://github.com/rust-lang/rust/commit/b0d84cb8faefedde7ace4ff152a2a13408e79e5d"}, {"sha": "80a17251473bd6213a4c8a51ea7f732394d173c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a17251473bd6213a4c8a51ea7f732394d173c5", "html_url": "https://github.com/rust-lang/rust/commit/80a17251473bd6213a4c8a51ea7f732394d173c5"}], "stats": {"total": 1392, "additions": 705, "deletions": 687}, "files": [{"sha": "1d58d9e7104a367472c51a63e91ca21f4287ba6f", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -71,7 +71,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     where\n         F: FnOnce(AssistCtx<DB>) -> T,\n     {\n-        let source_file = &db.parse(frange.file_id);\n+        let source_file = &db.parse(frange.file_id).tree;\n         let assist =\n             if should_compute_edit { Assist::Resolved(vec![]) } else { Assist::Unresolved(vec![]) };\n "}, {"sha": "cabb3d862f2b009d9d4dabafaea3d890c199ff6c", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -283,7 +283,7 @@ impl AstBuilder<ast::NameRef> {\n }\n \n fn ast_node_from_file_text<N: AstNode>(text: &str) -> TreeArc<N> {\n-    let file = SourceFile::parse(text);\n+    let file = SourceFile::parse(text).tree;\n     let res = file.syntax().descendants().find_map(N::cast).unwrap().to_owned();\n     res\n }\n@@ -292,7 +292,7 @@ mod tokens {\n     use once_cell::sync::Lazy;\n     use ra_syntax::{AstNode, SourceFile, TreeArc, SyntaxToken, SyntaxKind::*, T};\n \n-    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\").tree);\n \n     pub(crate) fn comma() -> SyntaxToken<'static> {\n         SOURCE_FILE\n@@ -326,7 +326,7 @@ mod tokens {\n \n     impl WsBuilder {\n         pub(crate) fn new(text: &str) -> WsBuilder {\n-            WsBuilder(SourceFile::parse(text))\n+            WsBuilder(SourceFile::parse(text).ok().unwrap())\n         }\n         pub(crate) fn ws(&self) -> SyntaxToken<'_> {\n             self.0.syntax().first_child_or_token().unwrap().as_token().unwrap()"}, {"sha": "c9ca13bbc80f2cce9e72352d80474960b21fad85", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -34,7 +34,7 @@ fn main() -> Result<()> {\n             if !matches.is_present(\"no-dump\") {\n                 println!(\"{}\", file.syntax().debug_dump());\n             }\n-            ::std::mem::forget(file);\n+            std::mem::forget(file);\n         }\n         (\"symbols\", _) => {\n             let file = file()?;\n@@ -60,11 +60,11 @@ fn main() -> Result<()> {\n \n fn file() -> Result<TreeArc<SourceFile>> {\n     let text = read_stdin()?;\n-    Ok(SourceFile::parse(&text))\n+    Ok(SourceFile::parse(&text).tree)\n }\n \n fn read_stdin() -> Result<String> {\n     let mut buff = String::new();\n-    ::std::io::stdin().read_to_string(&mut buff)?;\n+    std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }"}, {"sha": "7c49c585bcaa282161cd9fa46fb905b9b58cac19", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -4,7 +4,7 @@ mod input;\n \n use std::{panic, sync::Arc};\n \n-use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n+use ra_syntax::{TextUnit, TextRange, SourceFile, Parse};\n use relative_path::RelativePathBuf;\n use ra_prof::profile;\n \n@@ -74,7 +74,7 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n-    fn parse(&self, file_id: FileId) -> TreeArc<SourceFile>;\n+    fn parse(&self, file_id: FileId) -> Parse;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -98,7 +98,7 @@ fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<Cra\n     Arc::new(res)\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n+fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse {\n     let _p = profile(\"parse_query\");\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)"}, {"sha": "69496b6242ddb85b7e003f380b3f67391e7c5c8c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -116,7 +116,7 @@ impl ModuleSource {\n     ) -> ModuleSource {\n         match (file_id, decl_id) {\n             (Some(file_id), _) => {\n-                let source_file = db.parse(file_id);\n+                let source_file = db.parse(file_id).tree;\n                 ModuleSource::SourceFile(source_file)\n             }\n             (None, Some(item_id)) => {"}, {"sha": "83d226fc15e60b1c7181dc02dc91a20c4bc0d70f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -190,7 +190,7 @@ mod tests {\n         };\n \n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).ok().unwrap();\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n \n@@ -288,7 +288,7 @@ mod tests {\n         let (off, code) = extract_offset(code);\n \n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).ok().unwrap();\n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n             .expect(\"failed to find a name at the target offset\");\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();"}, {"sha": "2816144a74779b0cd8383f15a12eebb79c2e1294", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n         let source_map = self.func.body_source_map(db);\n         let file_id = self.func.source(db).0;\n-        let source_file = db.parse(file_id.original_file(db));\n+        let source_file = db.parse(file_id.original_file(db)).tree;\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)\n             .map(|ptr| ptr.to_node(source_file.syntax()))"}, {"sha": "06b6888f42490afddfa41127309546a7501e40f8", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -64,7 +64,7 @@ impl HirFileId {\n         db.check_canceled();\n         let _p = profile(\"parse_or_expand_query\");\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).syntax().to_owned()),\n+            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree.syntax().to_owned()),\n             HirFileIdRepr::Macro(macro_file) => {\n                 let macro_call_id = macro_file.macro_call_id;\n                 let tt = db"}, {"sha": "860e10069439b444b74bbcb26fcae180f184e8a9", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -46,7 +46,7 @@ pub fn module_from_declaration(\n \n /// Locates the module by position in the source code.\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n         Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n         _ => module_from_file_id(db, position.file_id.into()),"}, {"sha": "da9aeec6dca3222dc141675c8621b3645326ebfa", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 128, "deletions": 112, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -59,7 +59,7 @@ fn test() {\n     let b: usize = 1;\n     let c = b;\n }\n-}\"#),\n+\"#),\n         @r###\"\n [11; 71) '{     ...= b; }': ()\n [21; 22) 'a': isize\n@@ -85,7 +85,7 @@ fn test() {\n     a();\n     b::c();\n }\n-}\"#),\n+\"#),\n         @r###\"\n [15; 20) '{ 1 }': u32\n [17; 18) '1': u32\n@@ -1004,7 +1004,7 @@ fn infer_tuple_struct_generics() {\n     assert_snapshot_matches!(\n         infer(r#\"\n struct A<T>(T);\n-enum Option<T> { Some(T), None };\n+enum Option<T> { Some(T), None }\n use Option::*;\n \n fn test() {\n@@ -1017,22 +1017,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[77; 185) '{     ...one; }': ()\n-[83; 84) 'A': A<i32>(T) -> A<T>\n-[83; 88) 'A(42)': A<i32>\n-[85; 87) '42': i32\n-[94; 95) 'A': A<u128>(T) -> A<T>\n-[94; 103) 'A(42u128)': A<u128>\n-[96; 102) '42u128': u128\n-[109; 113) 'Some': Some<&str>(T) -> Option<T>\n-[109; 118) 'Some(\"x\")': Option<&str>\n-[114; 117) '\"x\"': &str\n-[124; 136) 'Option::Some': Some<&str>(T) -> Option<T>\n-[124; 141) 'Option...e(\"x\")': Option<&str>\n-[137; 140) '\"x\"': &str\n-[147; 151) 'None': Option<{unknown}>\n-[161; 162) 'x': Option<i64>\n-[178; 182) 'None': Option<i64>\"###\n+   \u22ee\n+   \u22ee[76; 184) '{     ...one; }': ()\n+   \u22ee[82; 83) 'A': A<i32>(T) -> A<T>\n+   \u22ee[82; 87) 'A(42)': A<i32>\n+   \u22ee[84; 86) '42': i32\n+   \u22ee[93; 94) 'A': A<u128>(T) -> A<T>\n+   \u22ee[93; 102) 'A(42u128)': A<u128>\n+   \u22ee[95; 101) '42u128': u128\n+   \u22ee[108; 112) 'Some': Some<&str>(T) -> Option<T>\n+   \u22ee[108; 117) 'Some(\"x\")': Option<&str>\n+   \u22ee[113; 116) '\"x\"': &str\n+   \u22ee[123; 135) 'Option::Some': Some<&str>(T) -> Option<T>\n+   \u22ee[123; 140) 'Option...e(\"x\")': Option<&str>\n+   \u22ee[136; 139) '\"x\"': &str\n+   \u22ee[146; 150) 'None': Option<{unknown}>\n+   \u22ee[160; 161) 'x': Option<i64>\n+   \u22ee[177; 181) 'None': Option<i64>\n+    \"###\n     );\n }\n \n@@ -1268,7 +1270,7 @@ impl Struct {\n     const FOO: u32 = 1;\n }\n \n-enum Enum;\n+enum Enum {}\n \n impl Enum {\n     const BAR: u32 = 2;\n@@ -1291,24 +1293,26 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[52; 53) '1': u32\n-[103; 104) '2': u32\n-[211; 212) '5': u32\n-[227; 305) '{     ...:ID; }': ()\n-[237; 238) 'x': u32\n-[241; 252) 'Struct::FOO': u32\n-[262; 263) 'y': u32\n-[266; 275) 'Enum::BAR': u32\n-[285; 286) 'z': {unknown}\n-[289; 302) 'TraitTest::ID': {unknown}\"###\n+   \u22ee\n+   \u22ee[52; 53) '1': u32\n+   \u22ee[105; 106) '2': u32\n+   \u22ee[213; 214) '5': u32\n+   \u22ee[229; 307) '{     ...:ID; }': ()\n+   \u22ee[239; 240) 'x': u32\n+   \u22ee[243; 254) 'Struct::FOO': u32\n+   \u22ee[264; 265) 'y': u32\n+   \u22ee[268; 277) 'Enum::BAR': u32\n+   \u22ee[287; 288) 'z': {unknown}\n+   \u22ee[291; 304) 'TraitTest::ID': {unknown}\n+    \"###\n     );\n }\n \n #[test]\n fn infer_associated_method_struct() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A { x: u32 };\n+struct A { x: u32 }\n \n impl A {\n     fn new() -> A {\n@@ -1321,23 +1325,25 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[50; 76) '{     ...     }': A\n-[60; 70) 'A { x: 0 }': A\n-[67; 68) '0': u32\n-[89; 123) '{     ...a.x; }': ()\n-[99; 100) 'a': A\n-[103; 109) 'A::new': fn new() -> A\n-[103; 111) 'A::new()': A\n-[117; 118) 'a': A\n-[117; 120) 'a.x': u32\"###\n+   \u22ee\n+   \u22ee[49; 75) '{     ...     }': A\n+   \u22ee[59; 69) 'A { x: 0 }': A\n+   \u22ee[66; 67) '0': u32\n+   \u22ee[88; 122) '{     ...a.x; }': ()\n+   \u22ee[98; 99) 'a': A\n+   \u22ee[102; 108) 'A::new': fn new() -> A\n+   \u22ee[102; 110) 'A::new()': A\n+   \u22ee[116; 117) 'a': A\n+   \u22ee[116; 119) 'a.x': u32\n+    \"###\n     );\n }\n \n #[test]\n fn infer_associated_method_enum() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-enum A { B, C };\n+enum A { B, C }\n \n impl A {\n     pub fn b() -> A {\n@@ -1355,19 +1361,21 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[48; 68) '{     ...     }': A\n-[58; 62) 'A::B': A\n-[89; 109) '{     ...     }': A\n-[99; 103) 'A::C': A\n-[122; 179) '{     ...  c; }': ()\n-[132; 133) 'a': A\n-[136; 140) 'A::b': fn b() -> A\n-[136; 142) 'A::b()': A\n-[148; 149) 'a': A\n-[159; 160) 'c': A\n-[163; 167) 'A::c': fn c() -> A\n-[163; 169) 'A::c()': A\n-[175; 176) 'c': A\"###\n+   \u22ee\n+   \u22ee[47; 67) '{     ...     }': A\n+   \u22ee[57; 61) 'A::B': A\n+   \u22ee[88; 108) '{     ...     }': A\n+   \u22ee[98; 102) 'A::C': A\n+   \u22ee[121; 178) '{     ...  c; }': ()\n+   \u22ee[131; 132) 'a': A\n+   \u22ee[135; 139) 'A::b': fn b() -> A\n+   \u22ee[135; 141) 'A::b()': A\n+   \u22ee[147; 148) 'a': A\n+   \u22ee[158; 159) 'c': A\n+   \u22ee[162; 166) 'A::c': fn c() -> A\n+   \u22ee[162; 168) 'A::c()': A\n+   \u22ee[174; 175) 'c': A\n+    \"###\n     );\n }\n \n@@ -1540,7 +1548,7 @@ fn test() {\n fn infer_type_alias() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A<X, Y> { x: X, y: Y };\n+struct A<X, Y> { x: X, y: Y }\n type Foo = A<u32, i128>;\n type Bar<T> = A<T, u128>;\n type Baz<U, V> = A<V, U>;\n@@ -1554,22 +1562,24 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n }\n \"#),\n         @r###\"\n-[117; 118) 'x': A<u32, i128>\n-[125; 126) 'y': A<&str, u128>\n-[139; 140) 'z': A<u8, i8>\n-[155; 212) '{     ...z.y; }': ()\n-[161; 162) 'x': A<u32, i128>\n-[161; 164) 'x.x': u32\n-[170; 171) 'x': A<u32, i128>\n-[170; 173) 'x.y': i128\n-[179; 180) 'y': A<&str, u128>\n-[179; 182) 'y.x': &str\n-[188; 189) 'y': A<&str, u128>\n-[188; 191) 'y.y': u128\n-[197; 198) 'z': A<u8, i8>\n-[197; 200) 'z.x': u8\n-[206; 207) 'z': A<u8, i8>\n-[206; 209) 'z.y': i8\"###\n+   \u22ee\n+   \u22ee[116; 117) 'x': A<u32, i128>\n+   \u22ee[124; 125) 'y': A<&str, u128>\n+   \u22ee[138; 139) 'z': A<u8, i8>\n+   \u22ee[154; 211) '{     ...z.y; }': ()\n+   \u22ee[160; 161) 'x': A<u32, i128>\n+   \u22ee[160; 163) 'x.x': u32\n+   \u22ee[169; 170) 'x': A<u32, i128>\n+   \u22ee[169; 172) 'x.y': i128\n+   \u22ee[178; 179) 'y': A<&str, u128>\n+   \u22ee[178; 181) 'y.x': &str\n+   \u22ee[187; 188) 'y': A<&str, u128>\n+   \u22ee[187; 190) 'y.y': u128\n+   \u22ee[196; 197) 'z': A<u8, i8>\n+   \u22ee[196; 199) 'z.x': u8\n+   \u22ee[205; 206) 'z': A<u8, i8>\n+   \u22ee[205; 208) 'z.y': i8\n+    \"###\n     )\n }\n \n@@ -1578,7 +1588,7 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n fn recursive_type_alias() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A<X> {};\n+struct A<X> {}\n type Foo = Foo;\n type Bar = A<Bar>;\n fn test(x: Foo) {}\n@@ -1795,18 +1805,21 @@ fn infer_std_crash_3() {\n     assert_snapshot_matches!(\n         infer(r#\"\n pub fn compute() {\n-    match _ {\n+    match nope!() {\n         SizeSkeleton::Pointer { non_zero: true, tail } => {}\n     }\n }\n \"#),\n         @r###\"\n-[18; 102) '{     ...   } }': ()\n-[24; 100) 'match ...     }': ()\n-[42; 88) 'SizeSk...tail }': {unknown}\n-[76; 80) 'true': {unknown}\n-[82; 86) 'tail': {unknown}\n-[92; 94) '{}': ()\"###\n+   \u22ee\n+   \u22ee[18; 108) '{     ...   } }': ()\n+   \u22ee[24; 106) 'match ...     }': ()\n+   \u22ee[30; 37) 'nope!()': {unknown}\n+   \u22ee[48; 94) 'SizeSk...tail }': {unknown}\n+   \u22ee[82; 86) 'true': {unknown}\n+   \u22ee[88; 92) 'tail': {unknown}\n+   \u22ee[98; 100) '{}': ()\n+    \"###\n     );\n }\n \n@@ -1817,20 +1830,21 @@ fn infer_std_crash_4() {\n         infer(r#\"\n pub fn primitive_type() {\n     match *self {\n-        BorrowedRef { type_: box Primitive(p), ..} => {},\n+        BorrowedRef { type_: Primitive(p), ..} => {},\n     }\n }\n \"#),\n         @r###\"\n-[25; 110) '{     ...   } }': ()\n-[31; 108) 'match ...     }': ()\n-[37; 42) '*self': {unknown}\n-[38; 42) 'self': {unknown}\n-[53; 95) 'Borrow...), ..}': {unknown}\n-[74; 77) 'box': {unknown}\n-[78; 87) 'Primitive': {unknown}\n-[88; 89) 'p': {unknown}\n-[99; 101) '{}': ()\"###\n+   \u22ee\n+   \u22ee[25; 106) '{     ...   } }': ()\n+   \u22ee[31; 104) 'match ...     }': ()\n+   \u22ee[37; 42) '*self': {unknown}\n+   \u22ee[38; 42) 'self': {unknown}\n+   \u22ee[53; 91) 'Borrow...), ..}': {unknown}\n+   \u22ee[74; 86) 'Primitive(p)': {unknown}\n+   \u22ee[84; 85) 'p': {unknown}\n+   \u22ee[95; 97) '{}': ()\n+    \"###\n     );\n }\n \n@@ -2304,27 +2318,29 @@ trait Into<T> {\n     fn into(self) -> T;\n }\n struct S;\n-impl Into<u32> for S;\n-impl Into<u64> for S;\n+impl Into<u32> for S {}\n+impl Into<u64> for S {}\n fn test() {\n     let x: u32 = S.into();\n     let y: u64 = S.into();\n     let z = Into::<u64>::into(S);\n }\n \"#),\n         @r###\"\n-[29; 33) 'self': Self\n-[107; 198) '{     ...(S); }': ()\n-[117; 118) 'x': u32\n-[126; 127) 'S': S\n-[126; 134) 'S.into()': u32\n-[144; 145) 'y': u64\n-[153; 154) 'S': S\n-[153; 161) 'S.into()': u64\n-[171; 172) 'z': {unknown}\n-[175; 192) 'Into::...::into': {unknown}\n-[175; 195) 'Into::...nto(S)': {unknown}\n-[193; 194) 'S': S\"###\n+   \u22ee\n+   \u22ee[29; 33) 'self': Self\n+   \u22ee[111; 202) '{     ...(S); }': ()\n+   \u22ee[121; 122) 'x': u32\n+   \u22ee[130; 131) 'S': S\n+   \u22ee[130; 138) 'S.into()': u32\n+   \u22ee[148; 149) 'y': u64\n+   \u22ee[157; 158) 'S': S\n+   \u22ee[157; 165) 'S.into()': u64\n+   \u22ee[175; 176) 'z': {unknown}\n+   \u22ee[179; 196) 'Into::...::into': {unknown}\n+   \u22ee[179; 199) 'Into::...nto(S)': {unknown}\n+   \u22ee[197; 198) 'S': S\n+    \"###\n     );\n }\n \n@@ -2617,7 +2633,7 @@ fn method_resolution_where_clause_1() {\n trait Clone {}\n trait Trait { fn foo(self) -> u128; }\n struct S;\n-impl Clone for S {};\n+impl Clone for S {}\n impl<T> Trait for T where T: Clone {}\n fn test() { S.foo()<|>; }\n \"#,\n@@ -2634,7 +2650,7 @@ trait Into<T> { fn into(self) -> T; }\n trait From<T> { fn from(other: T) -> Self; }\n struct S1;\n struct S2;\n-impl From<S2> for S1 {};\n+impl From<S2> for S1 {}\n impl<T, U> Into<U> for T where U: From<T> {}\n fn test() { S2.into()<|>; }\n \"#,\n@@ -2651,7 +2667,7 @@ trait Into<T> { fn into(self) -> T; }\n trait From<T> { fn from(other: T) -> Self; }\n struct S1;\n struct S2;\n-impl From<S2> for S1 {};\n+impl From<S2> for S1 {}\n impl<T, U: From<T>> Into<U> for T {}\n fn test() { S2.into()<|>; }\n \"#,\n@@ -2680,8 +2696,8 @@ fn method_resolution_slow() {\n //- /main.rs\n trait SendX {}\n \n-struct S1; impl SendX for S1;\n-struct S2; impl SendX for S2;\n+struct S1; impl SendX for S1 {}\n+struct S2; impl SendX for S2 {}\n struct U1;\n \n trait Trait { fn method(self); }\n@@ -2702,7 +2718,7 @@ fn test() { (S {}).method()<|>; }\n }\n \n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n-    let file = db.parse(pos.file_id);\n+    let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();\n     let analyzer = SourceAnalyzer::new(db, pos.file_id, expr.syntax(), Some(pos.offset));\n     let ty = analyzer.type_of(db, expr).unwrap();\n@@ -2716,7 +2732,7 @@ fn type_at(content: &str) -> String {\n \n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).ok().unwrap();\n \n     let mut acc = String::new();\n     acc.push_str(\"\\n\");\n@@ -2794,7 +2810,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     \",\n     );\n     {\n-        let file = db.parse(pos.file_id);\n+        let file = db.parse(pos.file_id).ok().unwrap();\n         let node =\n             algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n@@ -2815,7 +2831,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     db.query_mut(ra_db::FileTextQuery).set(pos.file_id, Arc::new(new_text));\n \n     {\n-        let file = db.parse(pos.file_id);\n+        let file = db.parse(pos.file_id).ok().unwrap();\n         let node =\n             algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {"}, {"sha": "5d43282fd47e0ffd7b98a0e40c9388bbf8e95f47", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -10,7 +10,7 @@ use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n \n     // Find the calling expression and it's NameRef"}, {"sha": "4b597afc04afba104032f4c751820ea56f7ac176", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -138,7 +138,7 @@ impl LibraryData {\n         files: Vec<(FileId, RelativePathBuf, Arc<String>)>,\n     ) -> LibraryData {\n         let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, _, text)| {\n-            let file = SourceFile::parse(text);\n+            let file = SourceFile::parse(text).tree;\n             (*file_id, file)\n         }));\n         let mut root_change = RootChange::default();"}, {"sha": "3a75bbf9218a8fb06ff672ba90775875c1f1a997", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -51,8 +51,8 @@ pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind,\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n-    let original_file = db.parse(position.file_id);\n-    let ctx = CompletionContext::new(db, &original_file, position)?;\n+    let original_parse = db.parse(position.file_id);\n+    let ctx = CompletionContext::new(db, &original_parse, position)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "bda7d9bb24c2044e0b974b6557ba54e35276bfb2", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,6 +1,6 @@\n use ra_text_edit::AtomTextEdit;\n use ra_syntax::{\n-    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange, SyntaxToken,\n+    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange, SyntaxToken, Parse,\n     ast,\n     algo::{find_token_at_offset, find_covering_element, find_node_at_offset},\n     SyntaxKind::*,\n@@ -43,11 +43,12 @@ pub(crate) struct CompletionContext<'a> {\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a db::RootDatabase,\n-        original_file: &'a SourceFile,\n+        original_parse: &'a Parse,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n-        let token = find_token_at_offset(original_file.syntax(), position.offset).left_biased()?;\n+        let token =\n+            find_token_at_offset(original_parse.tree.syntax(), position.offset).left_biased()?;\n         let analyzer =\n             hir::SourceAnalyzer::new(db, position.file_id, token.parent(), Some(position.offset));\n         let mut ctx = CompletionContext {\n@@ -69,7 +70,7 @@ impl<'a> CompletionContext<'a> {\n             dot_receiver: None,\n             is_call: false,\n         };\n-        ctx.fill(original_file, position.offset);\n+        ctx.fill(&original_parse, position.offset);\n         Some(ctx)\n     }\n \n@@ -82,13 +83,13 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {\n+    fn fill(&mut self, original_parse: &'a Parse, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion.\n         let file = {\n             let edit = AtomTextEdit::insert(offset, \"intellijRulezz\".to_string());\n-            original_file.reparse(&edit)\n+            original_parse.reparse(&edit).tree\n         };\n \n         // First, let's try to complete a reference to some declaration.\n@@ -99,7 +100,7 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n-            self.classify_name_ref(original_file, name_ref);\n+            self.classify_name_ref(&original_parse.tree, name_ref);\n         }\n \n         // Otherwise, see if this is a declaration. We can use heuristics to"}, {"sha": "a2a8c1e4f786acaa5250557871ab4260b7f7b946", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -4,7 +4,7 @@ use itertools::Itertools;\n use hir::{source_binder, diagnostics::{Diagnostic as _, DiagnosticSink}};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    T, Location, SourceFile, TextRange, SyntaxNode,\n+    T, Location, TextRange, SyntaxNode,\n     ast::{self, AstNode, NamedFieldList, NamedField},\n };\n use ra_assists::ast_editor::{AstEditor, AstBuilder};\n@@ -21,10 +21,17 @@ pub enum Severity {\n \n pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic> {\n     let _p = profile(\"diagnostics\");\n-    let source_file = db.parse(file_id);\n+    let parse = db.parse(file_id);\n     let mut res = Vec::new();\n \n-    syntax_errors(&mut res, &source_file);\n+    res.extend(parse.errors.iter().map(|err| Diagnostic {\n+        range: location_to_range(err.location()),\n+        message: format!(\"Syntax Error: {}\", err),\n+        severity: Severity::Error,\n+        fix: None,\n+    }));\n+\n+    let source_file = parse.tree;\n \n     for node in source_file.syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, node);\n@@ -51,8 +58,6 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         })\n     })\n     .on::<hir::diagnostics::MissingFields, _>(|d| {\n-        let file_id = d.file().original_file(db);\n-        let source_file = db.parse(file_id);\n         let syntax_node = d.syntax_node_ptr();\n         let node = NamedFieldList::cast(syntax_node.to_node(source_file.syntax())).unwrap();\n         let mut ast_editor = AstEditor::new(node);\n@@ -77,21 +82,11 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     drop(sink);\n     res.into_inner()\n }\n-\n-fn syntax_errors(acc: &mut Vec<Diagnostic>, source_file: &SourceFile) {\n-    fn location_to_range(location: Location) -> TextRange {\n-        match location {\n-            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-            Location::Range(range) => range,\n-        }\n+fn location_to_range(location: Location) -> TextRange {\n+    match location {\n+        Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n+        Location::Range(range) => range,\n     }\n-\n-    acc.extend(source_file.errors().into_iter().map(|err| Diagnostic {\n-        range: location_to_range(err.location()),\n-        message: format!(\"Syntax Error: {}\", err),\n-        severity: Severity::Error,\n-        fix: None,\n-    }));\n }\n \n fn check_unnecessary_braces_in_use_statement(\n@@ -177,6 +172,7 @@ fn check_struct_shorthand_initialization(\n mod tests {\n     use test_utils::assert_eq_text;\n     use insta::assert_debug_snapshot_matches;\n+    use ra_syntax::SourceFile;\n \n     use crate::mock_analysis::single_file;\n \n@@ -185,7 +181,7 @@ mod tests {\n     type DiagnosticChecker = fn(&mut Vec<Diagnostic>, FileId, &SyntaxNode) -> Option<()>;\n \n     fn check_not_applicable(code: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(code);\n+        let file = SourceFile::parse(code).tree;\n         let mut diagnostics = Vec::new();\n         for node in file.syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);\n@@ -194,7 +190,7 @@ mod tests {\n     }\n \n     fn check_apply(before: &str, after: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(before);\n+        let file = SourceFile::parse(before).tree;\n         let mut diagnostics = Vec::new();\n         for node in file.syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);"}, {"sha": "ae729614f78669a5fc555f2cc0192b77b062e100", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -79,7 +79,7 @@ impl NavigationTarget {\n         file_id: FileId,\n         pat: AstPtr<ast::Pat>,\n     ) -> NavigationTarget {\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).tree;\n         let (name, full_range) = match pat.to_node(file.syntax()).kind() {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n@@ -290,7 +290,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.parse(self.file_id());\n+        let source_file = db.parse(self.file_id()).tree;\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()"}, {"sha": "24ab7b59cfe78b79c816da7a5acf2715b5bd71ad", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -183,7 +183,9 @@ fn obsolete() {}\n #[deprecated(note = \"for awhile\")]\n fn very_obsolete() {}\n \"#,\n-        );\n+        )\n+        .ok()\n+        .unwrap();\n         let structure = file_structure(&file);\n         assert_debug_snapshot_matches!(\"file_structure\", structure);\n     }"}, {"sha": "00c445310e222cb5b4d4b693dd43efb2bdbb7b6d", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -11,7 +11,7 @@ use crate::{FileRange, db::RootDatabase};\n \n // FIXME: restore macro support\n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n-    let source_file = db.parse(frange.file_id);\n+    let source_file = db.parse(frange.file_id).tree;\n     try_extend_selection(source_file.syntax(), frange.range).unwrap_or(frange.range)\n }\n \n@@ -212,7 +212,7 @@ mod tests {\n \n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n-        let file = SourceFile::parse(&before);\n+        let file = SourceFile::parse(&before).tree;\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n             range = try_extend_selection(file.syntax(), range).unwrap();"}, {"sha": "b50bbee38b420e78b04a90fce0b94027167b8454", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -191,7 +191,7 @@ mod tests {\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n         let (ranges, text) = extract_ranges(text, \"fold\");\n-        let file = SourceFile::parse(&text);\n+        let file = SourceFile::parse(&text).tree;\n         let folds = folding_ranges(&file);\n \n         assert_eq!("}, {"sha": "4f8554625bbe80562f39b30e00df05d04c912472", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n         let navs = reference_definition(db, position.file_id, name_ref).to_vec();"}, {"sha": "0f638b170c0132759a62fa80a552beccf73707be", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n \n     let node = find_token_at_offset(file.syntax(), position.offset).find_map(|token| {\n         token"}, {"sha": "a390dab65da17c0014b74006ee6e57a6c633b72d", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -68,7 +68,7 @@ impl HoverResult {\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let mut res = HoverResult::new();\n \n     let mut range = None;\n@@ -120,7 +120,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n-    let file = db.parse(frange.file_id);\n+    let file = db.parse(frange.file_id).tree;\n     let syntax = file.syntax();\n     let leaf_node = find_covering_element(syntax, frange.range);\n     // if we picked identifier, expand to pattern/expression"}, {"sha": "b80238d9e0464618d7109c52425d17ff3d5f3aeb", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -11,7 +11,7 @@ pub(crate) fn goto_implementation(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n \n     let module = source_binder::module_from_position(db, position)?;"}, {"sha": "3978e9635855d266e1d333f005d7fe89e2284adc", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -506,7 +506,7 @@ fn foo() {\n \n     fn check_join_lines_sel(before: &str, after: &str) {\n         let (sel, before) = extract_range(before);\n-        let file = SourceFile::parse(&before);\n+        let file = SourceFile::parse(&before).tree;\n         let result = join_lines(&file, sel);\n         let actual = result.apply(&before);\n         assert_eq_text!(after, &actual);"}, {"sha": "2fe46cd133ea3cfaa7eaf157b7399117255001b3", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -314,7 +314,7 @@ impl Analysis {\n \n     /// Gets the syntax tree of the file.\n     pub fn parse(&self, file_id: FileId) -> TreeArc<SourceFile> {\n-        self.db.parse(file_id).clone()\n+        self.db.parse(file_id).tree\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n@@ -331,7 +331,7 @@ impl Analysis {\n     /// Returns position of the matching brace (all types of braces are\n     /// supported).\n     pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n-        let file = self.db.parse(position.file_id);\n+        let file = self.db.parse(position.file_id).tree;\n         matching_brace::matching_brace(&file, position.offset)\n     }\n \n@@ -344,7 +344,7 @@ impl Analysis {\n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let file = self.db.parse(frange.file_id);\n+        let file = self.db.parse(frange.file_id).tree;\n         let file_edit = SourceFileEdit {\n             file_id: frange.file_id,\n             edit: join_lines::join_lines(&file, frange.range),\n@@ -362,7 +362,7 @@ impl Analysis {\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.parse(position.file_id);\n+        let file = self.db.parse(position.file_id).tree;\n         let edit = typing::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::source_file_edit(\n             \"add semicolon\",\n@@ -378,13 +378,13 @@ impl Analysis {\n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.db.parse(file_id);\n+        let file = self.db.parse(file_id).tree;\n         file_structure(&file)\n     }\n \n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let file = self.db.parse(file_id);\n+        let file = self.db.parse(file_id).tree;\n         folding_ranges::folding_ranges(&file)\n     }\n "}, {"sha": "7f3e65b460cefd2e0c0adbbb7409d4321f42bd95", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -31,7 +31,7 @@ mod tests {\n     fn test_matching_brace() {\n         fn do_check(before: &str, after: &str) {\n             let (pos, before) = extract_offset(before);\n-            let file = SourceFile::parse(&before);\n+            let file = SourceFile::parse(&before).tree;\n             let new_pos = match matching_brace(&file, pos) {\n                 None => pos,\n                 Some(pos) => pos,"}, {"sha": "a75042b76aaee6d85cb38c59e13d94ca88204850", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn find_all_refs(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<ReferenceSearchResult> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let (binding, analyzer) = find_binding(db, &file, position)?;\n     let declaration = NavigationTarget::from_bind_pat(position.file_id, binding);\n \n@@ -99,7 +99,7 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let source_file = db.parse(position.file_id);\n+    let source_file = db.parse(position.file_id).tree;\n     let syntax = source_file.syntax();\n \n     if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {"}, {"sha": "afe629d5016f7711491e2e6ee91a5c1994b07d52", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -22,7 +22,7 @@ pub enum RunnableKind {\n }\n \n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n     source_file.syntax().descendants().filter_map(|i| runnable(db, file_id, i)).collect()\n }\n "}, {"sha": "821106fea1fb16026aa270c696c1ef1a016a0ccb", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -4,7 +4,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_syntax::{AstNode, TreeArc, SourceFile};\n+use ra_syntax::{AstNode, Parse};\n use ra_db::{\n     ParseQuery, FileTextQuery, SourceRootId,\n     salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n@@ -72,17 +72,17 @@ impl fmt::Display for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, TreeArc<SourceFile>>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<FileId, TreeArc<SourceFile>>>,\n+        T: IntoIterator<Item = TableEntry<FileId, Parse>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {\n             res.total += 1;\n             if let Some(value) = entry.value {\n                 res.retained += 1;\n-                res.retained_size += value.syntax().memory_size_of_subtree();\n+                res.retained_size += value.tree.syntax().memory_size_of_subtree();\n             }\n         }\n         res"}, {"sha": "a6cd7bf610bbae537a874be54654133a1eed5103", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -63,7 +63,7 @@ pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n \n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     let symbols = source_file_to_file_symbols(&source_file, file_id);\n "}, {"sha": "bf4e9c9d1489017c4f7b63c6b9af9f0d675ac5b0", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -32,7 +32,7 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n         fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n@@ -177,7 +177,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n }\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     fn rainbowify(seed: u64) -> String {\n         use rand::prelude::*;"}, {"sha": "7165fa97a1ed949418b091ec5e0369eb76e3b183", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn syntax_tree(\n     text_range: Option<TextRange>,\r\n ) -> String {\r\n     if let Some(text_range) = text_range {\r\n-        let file = db.parse(file_id);\r\n+        let file = db.parse(file_id).tree;\r\n         let node = match algo::find_covering_element(file.syntax(), text_range) {\r\n             SyntaxElement::Node(node) => node,\r\n             SyntaxElement::Token(token) => {\r\n@@ -27,7 +27,7 @@ pub(crate) fn syntax_tree(\n \r\n         node.debug_dump()\r\n     } else {\r\n-        db.parse(file_id).syntax().debug_dump()\r\n+        db.parse(file_id).tree.syntax().debug_dump()\r\n     }\r\n }\r\n \r\n@@ -84,8 +84,8 @@ fn syntax_tree_for_token(node: SyntaxToken, text_range: TextRange) -> Option<Str\n \r\n     // If the \"file\" parsed without errors,\r\n     // return its syntax\r\n-    if parsed.errors().is_empty() {\r\n-        return Some(parsed.syntax().debug_dump());\r\n+    if parsed.errors.is_empty() {\r\n+        return Some(parsed.tree.syntax().debug_dump());\r\n     }\r\n \r\n     None\r"}, {"sha": "6e0d883b46abaaed6320ae65e55ed3c6c27054a1", "filename": "crates/ra_ide_api/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -9,7 +9,7 @@ pub fn check_action<F: Fn(&SourceFile, TextUnit) -> Option<TextEdit>>(\n     f: F,\n ) {\n     let (before_cursor_pos, before) = extract_offset(before);\n-    let file = SourceFile::parse(&before);\n+    let file = SourceFile::parse(&before).ok().unwrap();\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.apply(&before);\n     let actual_cursor_pos ="}, {"sha": "63bc0cf88ce7ec74066ca2ef273d5e216d41f54b", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -10,7 +10,7 @@ use ra_db::{FilePosition, SourceDatabase};\n use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let comment = find_token_at_offset(file.syntax(), position.offset)\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n@@ -85,7 +85,7 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n }\n \n pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     assert_eq!(file.syntax().text().char_at(position.offset), Some('.'));\n \n     let whitespace = find_token_at_offset(file.syntax(), position.offset)\n@@ -138,7 +138,7 @@ mod tests {\n             let mut edit = TextEditBuilder::default();\n             edit.insert(offset, \"=\".to_string());\n             let before = edit.finish().apply(&before);\n-            let file = SourceFile::parse(&before);\n+            let file = SourceFile::parse(&before).tree;\n             if let Some(result) = on_eq_typed(&file, offset) {\n                 let actual = result.apply(&before);\n                 assert_eq_text!(after, &actual);"}, {"sha": "a0bd0c5f883922dfc0c602f4a72cd8a5309bf3b7", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -597,7 +597,7 @@ mod tests {\n     }\n \n     fn create_rules(macro_definition: &str) -> crate::MacroRules {\n-        let source_file = ast::SourceFile::parse(macro_definition);\n+        let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n@@ -609,7 +609,7 @@ mod tests {\n         rules: &crate::MacroRules,\n         invocation: &str,\n     ) -> Result<tt::Subtree, ExpandError> {\n-        let source_file = ast::SourceFile::parse(invocation);\n+        let source_file = ast::SourceFile::parse(invocation).ok().unwrap();\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n "}, {"sha": "d8fe293c74f25485fca225a0566bf12858bb6302", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -175,7 +175,7 @@ mod tests {\n     }\n \n     fn create_rules(macro_definition: &str) -> Result<crate::MacroRules, ParseError> {\n-        let source_file = ast::SourceFile::parse(macro_definition);\n+        let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n "}, {"sha": "dce82f33d20a7d494bd40d1d470e4b2cc06e5331", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -56,8 +56,9 @@ where\n     if tree_sink.roots.len() != 1 {\n         return Err(ExpandError::ConversionError);\n     }\n-\n-    Ok(tree_sink.inner.finish())\n+    //FIXME: would be cool to report errors\n+    let (tree, _errors) = tree_sink.inner.finish();\n+    Ok(tree)\n }\n \n /// Parses the token tree (result of macro expansion) to an expression\n@@ -383,7 +384,7 @@ mod tests {\n             }\n             \"#,\n         );\n-        let expansion = expand(&rules, \"literals!(foo)\");\n+        let expansion = expand(&rules, \"literals!(foo);\");\n         let buffer = tt::buffer::TokenBuffer::new(&[expansion.clone().into()]);\n         let mut tt_src = SubtreeTokenSource::new(&buffer);\n         let mut tokens = vec![];\n@@ -422,7 +423,7 @@ mod tests {\n             }\n             \"#,\n         );\n-        let expansion = expand(&rules, \"stmts!()\");\n+        let expansion = expand(&rules, \"stmts!();\");\n         assert!(token_tree_to_expr(&expansion).is_err());\n     }\n }"}, {"sha": "1db35cd8d3b0c21b2922d66e4b18d9534704db2e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 81, "deletions": 82, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -29,11 +29,11 @@ macro_rules! impl_froms {\n impl_froms!(TokenTree: Leaf, Subtree);\n \"#;\n \n-    let source_file = ast::SourceFile::parse(macro_definition);\n+    let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-    let source_file = ast::SourceFile::parse(macro_invocation);\n+    let source_file = ast::SourceFile::parse(macro_invocation).ok().unwrap();\n     let macro_invocation =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n@@ -49,7 +49,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n }\n \n pub(crate) fn create_rules(macro_definition: &str) -> MacroRules {\n-    let source_file = ast::SourceFile::parse(macro_definition);\n+    let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n@@ -58,7 +58,7 @@ pub(crate) fn create_rules(macro_definition: &str) -> MacroRules {\n }\n \n pub(crate) fn expand(rules: &MacroRules, invocation: &str) -> tt::Subtree {\n-    let source_file = ast::SourceFile::parse(invocation);\n+    let source_file = ast::SourceFile::parse(invocation).ok().unwrap();\n     let macro_invocation =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n@@ -95,7 +95,7 @@ pub(crate) fn expand_to_expr(\n pub(crate) fn text_to_tokentree(text: &str) -> tt::Subtree {\n     // wrap the given text to a macro call\n     let wrapped = format!(\"wrap_macro!( {} )\", text);\n-    let wrapped = ast::SourceFile::parse(&wrapped);\n+    let wrapped = ast::SourceFile::parse(&wrapped).tree;\n     let wrapped = wrapped.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n     let mut wrapped = ast_to_token_tree(wrapped).unwrap().0;\n     wrapped.delimiter = tt::Delimiter::None;\n@@ -294,7 +294,7 @@ fn test_match_group_pattern_with_multiple_defs() {\n         macro_rules! foo {\n             ($ ($ i:ident),*) => ( struct Bar { $ (\n                 fn $ i {}\n-            )*} );            \n+            )*} );\n         }\n \"#,\n     );\n@@ -314,7 +314,7 @@ fn test_match_group_pattern_with_multiple_statement() {\n         macro_rules! foo {\n             ($ ($ i:ident),*) => ( fn baz { $ (\n                 $ i ();\n-            )*} );            \n+            )*} );\n         }\n \"#,\n     );\n@@ -329,7 +329,7 @@ fn test_match_group_pattern_with_multiple_statement_without_semi() {\n         macro_rules! foo {\n             ($ ($ i:ident),*) => ( fn baz { $ (\n                 $i()\n-            );*} );            \n+            );*} );\n         }\n \"#,\n     );\n@@ -344,7 +344,7 @@ fn test_match_group_empty_fixed_token() {\n         macro_rules! foo {\n             ($ ($ i:ident)* #abc) => ( fn baz { $ (\n                 $ i ();\n-            )*} );            \n+            )*} );\n         }\n \"#,\n     );\n@@ -356,10 +356,10 @@ fn test_match_group_empty_fixed_token() {\n fn test_match_group_in_subtree() {\n     let rules = create_rules(\n         r#\"\n-        macro_rules! foo {            \n+        macro_rules! foo {\n             (fn $name:ident {$($i:ident)*} ) => ( fn $name() { $ (\n                 $ i ();\n-            )*} );            \n+            )*} );\n         }\"#,\n     );\n \n@@ -370,15 +370,15 @@ fn test_match_group_in_subtree() {\n fn test_match_group_with_multichar_sep() {\n     let rules = create_rules(\n         r#\"\n-        macro_rules! foo {            \n-            (fn $name:ident {$($i:literal)*} ) => ( fn $name() -> bool { $($i)&&*} );            \n+        macro_rules! foo {\n+            (fn $name:ident {$($i:literal)*} ) => ( fn $name() -> bool { $($i)&&*} );\n         }\"#,\n     );\n \n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        \"foo! (fn baz {true true} )\",\n+        \"foo! (fn baz {true true} );\",\n         \"fn baz () -> bool {true &&true}\",\n     );\n }\n@@ -387,24 +387,24 @@ fn test_match_group_with_multichar_sep() {\n fn test_match_group_zero_match() {\n     let rules = create_rules(\n         r#\"\n-        macro_rules! foo {            \n-            ( $($i:ident)* ) => ();            \n+        macro_rules! foo {\n+            ( $($i:ident)* ) => ();\n         }\"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, \"foo! ()\", \"\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ();\", \"\");\n }\n \n #[test]\n fn test_match_group_in_group() {\n     let rules = create_rules(\n         r#\"\n-        macro_rules! foo {            \n+        macro_rules! foo {\n             { $( ( $($i:ident)* ) )* } => ( $( ( $($i)* ) )* );\n         }\"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, \"foo! ( (a b) )\", \"(a b)\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ( (a b) );\", \"(a b)\");\n }\n \n #[test]\n@@ -418,7 +418,7 @@ fn test_expand_to_item_list() {\n             }\n             \",\n     );\n-    let expansion = expand(&rules, \"structs!(Foo, Bar)\");\n+    let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n     let tree = token_tree_to_macro_items(&expansion);\n     assert_eq!(\n         tree.unwrap().syntax().debug_dump().trim(),\n@@ -490,7 +490,7 @@ fn test_expand_literals_to_token_tree() {\n             }\n             \"#,\n     );\n-    let expansion = expand(&rules, \"literals!(foo)\");\n+    let expansion = expand(&rules, \"literals!(foo);\");\n     let stm_tokens = &to_subtree(&expansion.token_trees[0]).token_trees;\n \n     // [let] [a] [=] ['c'] [;]\n@@ -586,7 +586,7 @@ fn test_match_literal() {\n     }\n \"#,\n     );\n-    assert_expansion(MacroKind::Items, &rules, \"foo! ['(']\", \"fn foo () {}\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ['('];\", \"fn foo () {}\");\n }\n \n // The following tests are port from intellij-rust directly\n@@ -651,7 +651,7 @@ fn test_expr() {\n         r#\"\n         macro_rules! foo {\n             ($ i:expr) => {\n-                 fn bar() { $ i; } \n+                 fn bar() { $ i; }\n             }\n         }\n \"#,\n@@ -671,7 +671,7 @@ fn test_expr_order() {\n         r#\"\n         macro_rules! foo {\n             ($ i:expr) => {\n-                 fn bar() { $ i * 2; } \n+                 fn bar() { $ i * 2; }\n             }\n         }\n \"#,\n@@ -725,7 +725,7 @@ fn test_last_expr() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        \"vec!(1,2,3)\",\n+        \"vec!(1,2,3);\",\n         \"{let mut v = Vec :: new () ; v . push (1) ; v . push (2) ; v . push (3) ; v}\",\n     );\n }\n@@ -896,13 +896,13 @@ fn test_meta_doc_comments() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        r#\"foo! { \n+        r#\"foo! {\n             /// Single Line Doc 1\n-            /** \n+            /**\n                 MultiLines Doc\n             */\n         }\"#,\n-        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\" \\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n+        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\"\\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n     );\n }\n \n@@ -950,7 +950,7 @@ fn test_literal() {\n         }\n \"#,\n     );\n-    assert_expansion(MacroKind::Items, &rules, r#\"foo!(u8 0)\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+    assert_expansion(MacroKind::Items, &rules, r#\"foo!(u8 0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n }\n \n #[test]\n@@ -984,7 +984,7 @@ macro_rules! foo {\n         bar!($a);\n         fn $b() -> u8 {$c}\n     }\n-}        \n+}\n \"#,\n     );\n     assert_expansion(\n@@ -1017,12 +1017,12 @@ fn test_vec() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        r#\"vec![1u32,2]\"#,\n+        r#\"vec![1u32,2];\"#,\n         r#\"{let mut v = Vec :: new () ; v . push (1u32) ; v . push (2) ; v}\"#,\n     );\n \n     assert_eq!(\n-        expand_to_expr(&rules, r#\"vec![1u32,2]\"#).syntax().debug_dump().trim(),\n+        expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax().debug_dump().trim(),\n         r#\"BLOCK_EXPR@[0; 45)\n   BLOCK@[0; 45)\n     L_CURLY@[0; 1) \"{\"\n@@ -1119,7 +1119,7 @@ macro_rules! STRUCT {\n     // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/shared/d3d9caps.rs\n     assert_expansion(MacroKind::Items, &rules, r#\"STRUCT!{struct D3DVSHADERCAPS2_0 {Caps: u8,}}\"#,\n         \"# [repr (C)] # [derive (Copy)] pub struct D3DVSHADERCAPS2_0 {pub Caps : u8 ,} impl Clone for D3DVSHADERCAPS2_0 {# [inline] fn clone (& self) -> D3DVSHADERCAPS2_0 {* self}} # [cfg (feature = \\\"impl-default\\\")] impl Default for D3DVSHADERCAPS2_0 {# [inline] fn default () -> D3DVSHADERCAPS2_0 {unsafe {$crate :: _core :: mem :: zeroed ()}}}\");\n-    assert_expansion(MacroKind::Items, &rules, r#\"STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\"#, \n+    assert_expansion(MacroKind::Items, &rules, r#\"STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\"#,\n         \"# [repr (C)] # [derive (Copy)] # [cfg_attr (target_arch = \\\"x86\\\" , repr (packed))] pub struct D3DCONTENTPROTECTIONCAPS {pub Caps : u8 ,} impl Clone for D3DCONTENTPROTECTIONCAPS {# [inline] fn clone (& self) -> D3DCONTENTPROTECTIONCAPS {* self}} # [cfg (feature = \\\"impl-default\\\")] impl Default for D3DCONTENTPROTECTIONCAPS {# [inline] fn default () -> D3DCONTENTPROTECTIONCAPS {unsafe {$crate :: _core :: mem :: zeroed ()}}}\");\n }\n \n@@ -1136,11 +1136,11 @@ macro_rules! int_base {\n             }\n         }\n     }\n-}            \n+}\n \"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, r#\" int_base!{Binary for isize as usize -> Binary}\"#, \n+    assert_expansion(MacroKind::Items, &rules, r#\" int_base!{Binary for isize as usize -> Binary}\"#,\n         \"# [stable (feature = \\\"rust1\\\" , since = \\\"1.0.0\\\")] impl fmt ::Binary for isize {fn fmt (& self , f : & mut fmt :: Formatter < \\'_ >) -> fmt :: Result {Binary . fmt_int (* self as usize , f)}}\"\n         );\n }\n@@ -1150,7 +1150,7 @@ fn test_generate_pattern_iterators() {\n     // from https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/str/mod.rs\n     let rules = create_rules(\n         r#\"\n-macro_rules! generate_pattern_iterators {        \n+macro_rules! generate_pattern_iterators {\n         { double ended; with $(#[$common_stability_attribute:meta])*,\n                            $forward_iterator:ident,\n                            $reverse_iterator:ident, $iterty:ty\n@@ -1161,7 +1161,7 @@ macro_rules! generate_pattern_iterators {\n \"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, r#\"generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str )\"#, \n+    assert_expansion(MacroKind::Items, &rules, r#\"generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str );\"#,\n         \"fn foo () {}\");\n }\n \n@@ -1170,7 +1170,7 @@ fn test_impl_fn_for_zst() {\n     // from https://github.com/rust-lang/rust/blob/5d20ff4d2718c820632b38c1e49d4de648a9810b/src/libcore/internal_macros.rs\n     let rules = create_rules(\n         r#\"\n-macro_rules! impl_fn_for_zst  {        \n+macro_rules! impl_fn_for_zst  {\n         {  $( $( #[$attr: meta] )*\n         struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n             |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n@@ -1208,27 +1208,26 @@ $body: block; )+\n         )+\n }\n         }\n-}\n \"#,\n     );\n \n     assert_expansion(MacroKind::Items, &rules, r#\"\n-impl_fn_for_zst !   { \n-     # [ derive ( Clone ) ] \n-     struct   CharEscapeDebugContinue   impl   Fn   =   | c :   char |   ->   char :: EscapeDebug   { \n-         c . escape_debug_ext ( false ) \n-     } ; \n-\n-     # [ derive ( Clone ) ] \n-     struct   CharEscapeUnicode   impl   Fn   =   | c :   char |   ->   char :: EscapeUnicode   { \n-         c . escape_unicode ( ) \n-     } ; \n-     # [ derive ( Clone ) ] \n-     struct   CharEscapeDefault   impl   Fn   =   | c :   char |   ->   char :: EscapeDefault   { \n-         c . escape_default ( ) \n-     } ; \n+impl_fn_for_zst !   {\n+     # [ derive ( Clone ) ]\n+     struct   CharEscapeDebugContinue   impl   Fn   =   | c :   char |   ->   char :: EscapeDebug   {\n+         c . escape_debug_ext ( false )\n+     } ;\n+\n+     # [ derive ( Clone ) ]\n+     struct   CharEscapeUnicode   impl   Fn   =   | c :   char |   ->   char :: EscapeUnicode   {\n+         c . escape_unicode ( )\n+     } ;\n+     # [ derive ( Clone ) ]\n+     struct   CharEscapeDefault   impl   Fn   =   | c :   char |   ->   char :: EscapeDefault   {\n+         c . escape_default ( )\n+     } ;\n  }\n-\"#, \n+\"#,\n         \"# [derive (Clone)] struct CharEscapeDebugContinue ; impl Fn < (char ,) > for CharEscapeDebugContinue {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeDebug {{c . escape_debug_ext (false)}}} impl FnMut < (char ,) > for CharEscapeDebugContinue {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeDebug {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeDebugContinue {type Output = char :: EscapeDebug ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeDebug {Fn :: call (& self , (c ,))}} # [derive (Clone)] struct CharEscapeUnicode ; impl Fn < (char ,) > for CharEscapeUnicode {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeUnicode {{c . escape_unicode ()}}} impl FnMut < (char ,) > for CharEscapeUnicode {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeUnicode {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeUnicode {type Output = char :: EscapeUnicode ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeUnicode {Fn :: call (& self , (c ,))}} # [derive (Clone)] struct CharEscapeDefault ; impl Fn < (char ,) > for CharEscapeDefault {# [inline] extern \\\"rust-call\\\" fn call (& self , (c ,) : (char ,)) -> char :: EscapeDefault {{c . escape_default ()}}} impl FnMut < (char ,) > for CharEscapeDefault {# [inline] extern \\\"rust-call\\\" fn call_mut (& mut self , (c ,) : (char ,)) -> char :: EscapeDefault {Fn :: call (&* self , (c ,))}} impl FnOnce < (char ,) > for CharEscapeDefault {type Output = char :: EscapeDefault ; # [inline] extern \\\"rust-call\\\" fn call_once (self , (c ,) : (char ,)) -> char :: EscapeDefault {Fn :: call (& self , (c ,))}}\");\n }\n \n@@ -1263,7 +1262,7 @@ fn test_cfg_if_items() {\n \"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, r#\"__cfg_if_items ! { ( rustdoc , ) ; ( ( ) ( # [ cfg ( any ( target_os = \"redox\" , unix ) ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as unix ; # [ cfg ( windows ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as windows ; # [ cfg ( any ( target_os = \"linux\" , target_os = \"l4re\" ) ) ] pub mod linux ; ) ) , }\"#,         \n+    assert_expansion(MacroKind::Items, &rules, r#\"__cfg_if_items ! { ( rustdoc , ) ; ( ( ) ( # [ cfg ( any ( target_os = \"redox\" , unix ) ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as unix ; # [ cfg ( windows ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as windows ; # [ cfg ( any ( target_os = \"linux\" , target_os = \"l4re\" ) ) ] pub mod linux ; ) ) , }\"#,\n         \"__cfg_if_items ! {(rustdoc ,) ;}\");\n }\n \n@@ -1294,23 +1293,23 @@ fn test_cfg_if_main() {\n     );\n \n     assert_expansion(MacroKind::Items, &rules, r#\"\n-cfg_if !   { \n-     if   # [ cfg ( target_env   =   \"msvc\" ) ]   { \n-         // no extra unwinder support needed \n-     }   else   if   # [ cfg ( all ( target_arch   =   \"wasm32\" ,   not ( target_os   =   \"emscripten\" ) ) ) ]   { \n-         // no unwinder on the system! \n-     }   else   { \n-         mod   libunwind ; \n-         pub   use   libunwind :: * ; \n-     } \n- }        \n-\"#,         \n+cfg_if !   {\n+     if   # [ cfg ( target_env   =   \"msvc\" ) ]   {\n+         // no extra unwinder support needed\n+     }   else   if   # [ cfg ( all ( target_arch   =   \"wasm32\" ,   not ( target_os   =   \"emscripten\" ) ) ) ]   {\n+         // no unwinder on the system!\n+     }   else   {\n+         mod   libunwind ;\n+         pub   use   libunwind :: * ;\n+     }\n+ }\n+\"#,\n         \"__cfg_if_items ! {() ; ((target_env = \\\"msvc\\\") ()) , ((all (target_arch = \\\"wasm32\\\" , not (target_os = \\\"emscripten\\\"))) ()) , (() (mod libunwind ; pub use libunwind :: * ;)) ,}\");\n \n     assert_expansion(MacroKind::Items, &rules, r#\"\n-cfg_if ! { @ __apply cfg ( all ( not ( any ( not ( any ( target_os = \"solaris\" , target_os = \"illumos\" ) ) ) ) ) ) , }    \n+cfg_if ! { @ __apply cfg ( all ( not ( any ( not ( any ( target_os = \"solaris\" , target_os = \"illumos\" ) ) ) ) ) ) , }\n \"#,\n-        \"\"    \n+        \"\"\n     );\n }\n \n@@ -1329,16 +1328,16 @@ macro_rules! arbitrary {\n                 $logic\n             }\n         }\n-    };  \n-   \n+    };\n+\n }\"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, r#\"arbitrary !   ( [ A : Arbitrary ] \n-        Vec < A > , \n-        VecStrategy < A :: Strategy > , \n-        RangedParams1 < A :: Parameters > ; \n-        args =>   { let product_unpack !   [ range , a ] = args ; vec ( any_with :: < A >   ( a ) , range ) } \n+    assert_expansion(MacroKind::Items, &rules, r#\"arbitrary !   ( [ A : Arbitrary ]\n+        Vec < A > ,\n+        VecStrategy < A :: Strategy > ,\n+        RangedParams1 < A :: Parameters > ;\n+        args =>   { let product_unpack !   [ range , a ] = args ; vec ( any_with :: < A >   ( a ) , range ) }\n     ) ;\"#,\n     \"impl <A : Arbitrary > $crate :: arbitrary :: Arbitrary for Vec < A > {type Parameters = RangedParams1 < A :: Parameters > ; type Strategy = VecStrategy < A :: Strategy > ; fn arbitrary_with (args : Self :: Parameters) -> Self :: Strategy {{let product_unpack ! [range , a] = args ; vec (any_with :: < A > (a) , range)}}}\");\n }\n@@ -1350,7 +1349,7 @@ fn test_old_ridl() {\n     let rules = create_rules(\n         r#\"\n #[macro_export]\n-macro_rules! RIDL {    \n+macro_rules! RIDL {\n     (interface $interface:ident ($vtbl:ident) : $pinterface:ident ($pvtbl:ident)\n         {$(\n             fn $method:ident(&mut self $(,$p:ident : $t:ty)*) -> $rtr:ty\n@@ -1360,7 +1359,7 @@ macro_rules! RIDL {\n             $(pub unsafe fn $method(&mut self) -> $rtr {\n                 ((*self.lpVtbl).$method)(self $(,$p)*)\n             })+\n-        }        \n+        }\n     };\n }\"#,\n     );\n@@ -1388,11 +1387,11 @@ macro_rules! quick_error {\n         quick_error!(ENUM_DEFINITION [enum $name $( #[$meta] )*]\n             body []\n             queue [$(\n-                $( #[$imeta] )*                      \n-                => \n-                $iitem: $imode [$( $ivar: $ityp ),*]                       \n+                $( #[$imeta] )*\n+                =>\n+                $iitem: $imode [$( $ivar: $ityp ),*]\n             )*]\n-        );        \n+        );\n };\n \n }\n@@ -1403,7 +1402,7 @@ macro_rules! quick_error {\n         &rules,\n         r#\"\n quick_error ! (SORT [enum Wrapped # [derive (Debug)]] items [\n-        => One : UNIT [] {} \n+        => One : UNIT [] {}\n         => Two : TUPLE [s :String] {display (\"two: {}\" , s) from ()}\n     ] buf [] queue []) ;\n \"#,"}, {"sha": "319110b6a7bd6add47ab6f2872bf5565ecc6bdc4", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -80,7 +80,9 @@ fn test_doc_comment_none() {\n         // non-doc\n         mod foo {}\n         \"#,\n-    );\n+    )\n+    .ok()\n+    .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n     assert!(module.doc_comment_text().is_none());\n }\n@@ -93,7 +95,9 @@ fn test_doc_comment_of_items() {\n         // non-doc\n         mod foo {}\n         \"#,\n-    );\n+    )\n+    .ok()\n+    .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n     assert_eq!(\"doc\", module.doc_comment_text().unwrap());\n }\n@@ -110,7 +114,9 @@ fn test_doc_comment_preserves_indents() {\n         /// ```\n         mod foo {}\n         \"#,\n-    );\n+    )\n+    .ok()\n+    .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n     assert_eq!(\"doc1\\n```\\nfn foo() {\\n    // ...\\n}\\n```\", module.doc_comment_text().unwrap());\n }\n@@ -133,7 +139,9 @@ where\n    for<'a> F: Fn(&'a str)\n {}\n         \"#,\n-    );\n+    )\n+    .ok()\n+    .unwrap();\n     let where_clause = file.syntax().descendants().find_map(WhereClause::cast).unwrap();\n \n     let mut predicates = where_clause.predicates();"}, {"sha": "6a9905bd14f8653468ce985a2797041e40187488", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -5,12 +5,11 @@ use std::str::{self, FromStr};\n fn check_file_invariants(file: &SourceFile) {\n     let root = file.syntax();\n     validation::validate_block_structure(root);\n-    let _ = file.errors();\n }\n \n pub fn check_parser(text: &str) {\n     let file = SourceFile::parse(text);\n-    check_file_invariants(&file);\n+    check_file_invariants(&file.tree);\n }\n \n #[derive(Debug, Clone)]\n@@ -44,16 +43,18 @@ impl CheckReparse {\n     }\n \n     pub fn run(&self) {\n-        let file = SourceFile::parse(&self.text);\n-        let new_file = file.reparse(&self.edit);\n-        check_file_invariants(&new_file);\n-        assert_eq!(&new_file.syntax().text().to_string(), &self.edited_text);\n+        let parse = SourceFile::parse(&self.text);\n+        let new_parse = parse.reparse(&self.edit);\n+        check_file_invariants(&new_parse.tree);\n+        assert_eq!(&new_parse.tree.syntax().text().to_string(), &self.edited_text);\n         let full_reparse = SourceFile::parse(&self.edited_text);\n-        for (a, b) in new_file.syntax().descendants().zip(full_reparse.syntax().descendants()) {\n+        for (a, b) in\n+            new_parse.tree.syntax().descendants().zip(full_reparse.tree.syntax().descendants())\n+        {\n             if (a.kind(), a.range()) != (b.kind(), b.range()) {\n-                eprint!(\"original:\\n{}\", file.syntax().debug_dump());\n-                eprint!(\"reparsed:\\n{}\", new_file.syntax().debug_dump());\n-                eprint!(\"full reparse:\\n{}\", full_reparse.syntax().debug_dump());\n+                eprint!(\"original:\\n{}\", parse.tree.syntax().debug_dump());\n+                eprint!(\"reparsed:\\n{}\", new_parse.tree.syntax().debug_dump());\n+                eprint!(\"full reparse:\\n{}\", full_reparse.tree.syntax().debug_dump());\n                 assert_eq!(\n                     format!(\"{:?}\", a),\n                     format!(\"{:?}\", b),"}, {"sha": "930a643b745b077ffd7b5a5a9188c77fb0d2377b", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 64, "deletions": 30, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -31,6 +31,12 @@ pub mod ast;\n #[doc(hidden)]\n pub mod fuzz;\n \n+use std::{sync::Arc, fmt::Write};\n+\n+use ra_text_edit::AtomTextEdit;\n+\n+use crate::syntax_node::GreenNode;\n+\n pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use ra_parser::SyntaxKind;\n pub use ra_parser::T;\n@@ -43,45 +49,72 @@ pub use crate::{\n     parsing::{tokenize, classify_literal, Token},\n };\n \n-use ra_text_edit::AtomTextEdit;\n-use crate::syntax_node::GreenNode;\n-\n-/// `SourceFile` represents a parse tree for a single Rust file.\n-pub use crate::ast::SourceFile;\n+/// `Parse` is the result of the parsing: a syntax tree and a collection of\n+/// errors.\n+///\n+/// Note that we always produce a syntax tree, even for completely invalid\n+/// files.\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Parse {\n+    pub tree: TreeArc<SourceFile>,\n+    pub errors: Arc<Vec<SyntaxError>>,\n+}\n \n-impl SourceFile {\n-    fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SourceFile> {\n-        let root = SyntaxNode::new(green, errors);\n-        if cfg!(debug_assertions) {\n-            validation::validate_block_structure(&root);\n+impl Parse {\n+    pub fn ok(self) -> Result<TreeArc<SourceFile>, Arc<Vec<SyntaxError>>> {\n+        if self.errors.is_empty() {\n+            Ok(self.tree)\n+        } else {\n+            Err(self.errors)\n         }\n-        assert_eq!(root.kind(), SyntaxKind::SOURCE_FILE);\n-        TreeArc::cast(root)\n     }\n \n-    pub fn parse(text: &str) -> TreeArc<SourceFile> {\n-        let (green, errors) = parsing::parse_text(text);\n-        SourceFile::new(green, errors)\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse {\n+        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n     }\n \n-    pub fn reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {\n-        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    pub fn debug_dump(&self) -> String {\n+        let mut buf = self.tree.syntax().debug_dump();\n+        for err in self.errors.iter() {\n+            writeln!(buf, \"err: `{}`\", err).unwrap();\n+        }\n+        buf\n     }\n \n-    pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<TreeArc<SourceFile>> {\n-        parsing::incremental_reparse(self.syntax(), edit, self.errors())\n-            .map(|(green_node, errors, _reparsed_range)| SourceFile::new(green_node, errors))\n+    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse> {\n+        // FIXME: validation errors are not handled here\n+        parsing::incremental_reparse(self.tree.syntax(), edit, self.errors.to_vec()).map(\n+            |(green_node, errors, _reparsed_range)| Parse {\n+                tree: SourceFile::new(green_node),\n+                errors: Arc::new(errors),\n+            },\n+        )\n     }\n \n-    fn full_reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {\n-        let text = edit.apply(self.syntax().text().to_string());\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse {\n+        let text = edit.apply(self.tree.syntax().text().to_string());\n         SourceFile::parse(&text)\n     }\n+}\n+\n+/// `SourceFile` represents a parse tree for a single Rust file.\n+pub use crate::ast::SourceFile;\n+\n+impl SourceFile {\n+    fn new(green: GreenNode) -> TreeArc<SourceFile> {\n+        let root = SyntaxNode::new(green);\n+        if cfg!(debug_assertions) {\n+            validation::validate_block_structure(&root);\n+        }\n+        assert_eq!(root.kind(), SyntaxKind::SOURCE_FILE);\n+        TreeArc::cast(root)\n+    }\n \n-    pub fn errors(&self) -> Vec<SyntaxError> {\n-        let mut errors = self.syntax.root_data().to_vec();\n-        errors.extend(validation::validate(self));\n-        errors\n+    pub fn parse(text: &str) -> Parse {\n+        let (green, mut errors) = parsing::parse_text(text);\n+        let tree = SourceFile::new(green);\n+        errors.extend(validation::validate(&tree));\n+        Parse { tree, errors: Arc::new(errors) }\n     }\n }\n \n@@ -98,14 +131,15 @@ fn api_walkthrough() {\n     \";\n     // `SourceFile` is the main entry point.\n     //\n-    // Note how `parse` does not return a `Result`: even completely invalid\n-    // source code might be parsed.\n-    let file = SourceFile::parse(source_code);\n+    // The `parse` method returns a `Parse` -- a pair of syntax tree and a list\n+    // of errors. That is, syntax tree is constructed even in presence of errors.\n+    let parse = SourceFile::parse(source_code);\n+    assert!(parse.errors.is_empty());\n \n     // Due to the way ownership is set up, owned syntax Nodes always live behind\n     // a `TreeArc` smart pointer. `TreeArc` is roughly an `std::sync::Arc` which\n     // points to the whole file instead of an individual node.\n-    let file: TreeArc<SourceFile> = file;\n+    let file: TreeArc<SourceFile> = parse.tree;\n \n     // `SourceFile` is the root of the syntax tree. We can iterate file's items:\n     let mut func = None;"}, {"sha": "cf27a339343cd6009a0430e0fa98aa534394979f", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -166,9 +166,11 @@ fn merge_errors(\n \n #[cfg(test)]\n mod tests {\n+    use std::sync::Arc;\n+\n     use test_utils::{extract_range, assert_eq_text};\n \n-    use crate::{SourceFile, AstNode};\n+    use crate::{SourceFile, AstNode, Parse};\n     use super::*;\n \n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n@@ -181,14 +183,14 @@ mod tests {\n             let f = SourceFile::parse(&before);\n             let edit = AtomTextEdit { delete: range, insert: replace_with.to_string() };\n             let (green, new_errors, range) =\n-                incremental_reparse(f.syntax(), &edit, f.errors()).unwrap();\n+                incremental_reparse(f.tree.syntax(), &edit, f.errors.to_vec()).unwrap();\n             assert_eq!(range.len(), reparsed_len.into(), \"reparsed fragment has wrong length\");\n-            SourceFile::new(green, new_errors)\n+            Parse { tree: SourceFile::new(green), errors: Arc::new(new_errors) }\n         };\n \n         assert_eq_text!(\n-            &fully_reparsed.syntax().debug_dump(),\n-            &incrementally_reparsed.syntax().debug_dump(),\n+            &fully_reparsed.tree.syntax().debug_dump(),\n+            &incrementally_reparsed.tree.syntax().debug_dump(),\n         );\n     }\n "}, {"sha": "10cddb852833bf47ac8b85c68dd40d3975c894fd", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -76,7 +76,7 @@ impl<N: AstNode> From<AstPtr<N>> for SyntaxNodePtr {\n fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode, SourceFile};\n \n-    let file = SourceFile::parse(\"struct Foo { f: u32, }\");\n+    let file = SourceFile::parse(\"struct Foo { f: u32, }\").ok().unwrap();\n     let field = file.syntax().descendants().find_map(ast::NamedFieldDef::cast).unwrap();\n     let ptr = SyntaxNodePtr::new(field.syntax());\n     let field_syntax = ptr.to_node(file.syntax());"}, {"sha": "4105b52209490e55ca0be8fbf4dae1d7c3406a8c", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -9,7 +9,6 @@\n use std::{\n     ops::RangeInclusive,\n     fmt::{self, Write},\n-    any::Any,\n     borrow::Borrow,\n     iter::successors,\n };\n@@ -133,10 +132,8 @@ pub enum Direction {\n }\n \n impl SyntaxNode {\n-    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SyntaxNode> {\n-        let errors: Option<Box<Any + Send + Sync>> =\n-            if errors.is_empty() { None } else { Some(Box::new(errors)) };\n-        let ptr = TreeArc(rowan::SyntaxNode::new(green, errors));\n+    pub(crate) fn new(green: GreenNode) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(rowan::SyntaxNode::new(green, None));\n         TreeArc::cast(ptr)\n     }\n \n@@ -259,37 +256,18 @@ impl SyntaxNode {\n     }\n \n     pub fn debug_dump(&self) -> String {\n-        let mut errors: Vec<_> = match self.ancestors().find_map(SourceFile::cast) {\n-            Some(file) => file.errors(),\n-            None => self.root_data().to_vec(),\n-        };\n-        errors.sort_by_key(|e| e.offset());\n-        let mut err_pos = 0;\n         let mut level = 0;\n         let mut buf = String::new();\n-        macro_rules! indent {\n-            () => {\n-                for _ in 0..level {\n-                    buf.push_str(\"  \");\n-                }\n-            };\n-        }\n \n         for event in self.preorder_with_tokens() {\n             match event {\n                 WalkEvent::Enter(element) => {\n-                    indent!();\n+                    for _ in 0..level {\n+                        buf.push_str(\"  \");\n+                    }\n                     match element {\n                         SyntaxElement::Node(node) => writeln!(buf, \"{:?}\", node).unwrap(),\n-                        SyntaxElement::Token(token) => {\n-                            writeln!(buf, \"{:?}\", token).unwrap();\n-                            let off = token.range().end();\n-                            while err_pos < errors.len() && errors[err_pos].offset() <= off {\n-                                indent!();\n-                                writeln!(buf, \"err: `{}`\", errors[err_pos]).unwrap();\n-                                err_pos += 1;\n-                            }\n-                        }\n+                        SyntaxElement::Token(token) => writeln!(buf, \"{:?}\", token).unwrap(),\n                     }\n                     level += 1;\n                 }\n@@ -298,23 +276,10 @@ impl SyntaxNode {\n         }\n \n         assert_eq!(level, 0);\n-        for err in errors[err_pos..].iter() {\n-            writeln!(buf, \"err: `{}`\", err).unwrap();\n-        }\n \n         buf\n     }\n \n-    pub(crate) fn root_data(&self) -> &[SyntaxError] {\n-        match self.0.root_data() {\n-            None => &[],\n-            Some(data) => {\n-                let data: &Vec<SyntaxError> = std::any::Any::downcast_ref(data).unwrap();\n-                data.as_slice()\n-            }\n-        }\n-    }\n-\n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n         self.0.replace_with(replacement)\n     }\n@@ -386,7 +351,7 @@ impl SyntaxNode {\n         let len = new_children.iter().map(|it| it.text_len()).sum::<TextUnit>();\n         let new_node = GreenNode::new(rowan::SyntaxKind(self.kind() as u16), new_children);\n         let new_file_node = self.replace_with(new_node);\n-        let file = SourceFile::new(new_file_node, Vec::new());\n+        let file = SourceFile::new(new_file_node);\n \n         // FIXME: use a more elegant way to re-fetch the node (#1185), make\n         // `range` private afterwards\n@@ -629,13 +594,13 @@ impl SyntaxTreeBuilder {\n         (green, self.errors)\n     }\n \n-    pub fn finish(self) -> TreeArc<SyntaxNode> {\n+    pub fn finish(self) -> (TreeArc<SyntaxNode>, Vec<SyntaxError>) {\n         let (green, errors) = self.finish_raw();\n-        let node = SyntaxNode::new(green, errors);\n+        let node = SyntaxNode::new(green);\n         if cfg!(debug_assertions) {\n             crate::validation::validate_block_structure(&node);\n         }\n-        node\n+        (node, errors)\n     }\n \n     pub fn token(&mut self, kind: SyntaxKind, text: SmolStr) {"}, {"sha": "0662052c5a758abdd33b4bf887c46e2945cb46a1", "filename": "crates/ra_syntax/tests/data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -18,7 +18,6 @@ SOURCE_FILE@[0; 34)\n             PATH_SEGMENT@[18; 21)\n               NAME_REF@[18; 21)\n                 IDENT@[18; 21) \"u32\"\n-                err: `expected COMMA`\n       WHITESPACE@[21; 26) \"\\n    \"\n       NAMED_FIELD_DEF@[26; 32)\n         NAME@[26; 27)\n@@ -32,3 +31,4 @@ SOURCE_FILE@[0; 34)\n                 IDENT@[29; 32) \"u32\"\n       WHITESPACE@[32; 33) \"\\n\"\n       R_CURLY@[33; 34) \"}\"\n+err: `expected COMMA`"}, {"sha": "45044fe0afda240d475b1ba310e7471d68f4b82d", "filename": "crates/ra_syntax/tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,9 +1,7 @@\n SOURCE_FILE@[0; 21)\n   ERROR@[0; 2)\n     IF_KW@[0; 2) \"if\"\n-    err: `expected an item`\n   WHITESPACE@[2; 3) \" \"\n-  err: `expected an item`\n   ERROR@[3; 8)\n     MATCH_KW@[3; 8) \"match\"\n   WHITESPACE@[8; 10) \"\\n\\n\"\n@@ -16,3 +14,5 @@ SOURCE_FILE@[0; 21)\n     NAMED_FIELD_DEF_LIST@[19; 21)\n       L_CURLY@[19; 20) \"{\"\n       R_CURLY@[20; 21) \"}\"\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "1506acdfd70fe7fec60a7022f8079b81722746c7", "filename": "crates/ra_syntax/tests/data/parser/err/0002_duplicate_shebang.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,7 +1,7 @@\n SOURCE_FILE@[0; 42)\n   SHEBANG@[0; 20) \"#!/use/bin/env rusti\"\n   WHITESPACE@[20; 21) \"\\n\"\n-  err: `expected an item`\n   ERROR@[21; 41)\n     SHEBANG@[21; 41) \"#!/use/bin/env rusti\"\n   WHITESPACE@[41; 42) \"\\n\"\n+err: `expected an item`"}, {"sha": "586baf1bbd0eec6e8f6aec8a87f4eaca20708dac", "filename": "crates/ra_syntax/tests/data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 40)\n       COMMA@[36; 37) \",\"\n       WHITESPACE@[37; 38) \"\\n\"\n       R_CURLY@[38; 39) \"}\"\n-      err: `expected item, found `;`\n-consider removing this semicolon`\n   ERROR@[39; 40)\n     SEMI@[39; 40) \";\"\n+err: `expected item, found `;`\n+consider removing this semicolon`"}, {"sha": "a7022391209962a91367da3982011558cea3bc20", "filename": "crates/ra_syntax/tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -9,8 +9,8 @@ SOURCE_FILE@[0; 12)\n             NAME_REF@[4; 7)\n               IDENT@[4; 7) \"foo\"\n         COLONCOLON@[7; 9) \"::\"\n-        err: `expected identifier`\n         PATH_SEGMENT@[9; 11)\n           ERROR@[9; 11)\n             INT_NUMBER@[9; 11) \"92\"\n     SEMI@[11; 12) \";\"\n+err: `expected identifier`"}, {"sha": "9a6da88feb88cb759cafaa3ae8488886c5dcaf01", "filename": "crates/ra_syntax/tests/data/parser/err/0005_attribute_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -49,7 +49,7 @@ SOURCE_FILE@[0; 54)\n           L_CURLY@[50; 51) \"{\"\n           WHITESPACE@[51; 52) \"\\n\"\n           R_CURLY@[52; 53) \"}\"\n-          err: `expected R_PAREN`\n-          err: `expected R_BRACK`\n-          err: `expected an item`\n   WHITESPACE@[53; 54) \"\\n\"\n+err: `expected R_PAREN`\n+err: `expected R_BRACK`\n+err: `expected an item`"}, {"sha": "5effbb60f40f7f633f0d342a808327544eeda314", "filename": "crates/ra_syntax/tests/data/parser/err/0006_named_field_recovery.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -23,25 +23,17 @@ SOURCE_FILE@[0; 74)\n       VISIBILITY@[27; 30)\n         PUB_KW@[27; 30) \"pub\"\n       WHITESPACE@[30; 31) \" \"\n-      err: `expected field declaration`\n       ERROR@[31; 33)\n         INT_NUMBER@[31; 33) \"92\"\n-        err: `expected COMMA`\n       WHITESPACE@[33; 38) \"\\n    \"\n-      err: `expected field declaration`\n       ERROR@[38; 39)\n         PLUS@[38; 39) \"+\"\n-        err: `expected COMMA`\n       WHITESPACE@[39; 40) \" \"\n-      err: `expected field declaration`\n       ERROR@[40; 41)\n         MINUS@[40; 41) \"-\"\n-        err: `expected COMMA`\n       WHITESPACE@[41; 42) \" \"\n-      err: `expected field declaration`\n       ERROR@[42; 43)\n         STAR@[42; 43) \"*\"\n-        err: `expected COMMA`\n       WHITESPACE@[43; 48) \"\\n    \"\n       NAMED_FIELD_DEF@[48; 58)\n         VISIBILITY@[48; 51)\n@@ -72,3 +64,11 @@ SOURCE_FILE@[0; 74)\n       WHITESPACE@[71; 72) \"\\n\"\n       R_CURLY@[72; 73) \"}\"\n   WHITESPACE@[73; 74) \"\\n\"\n+err: `expected field declaration`\n+err: `expected COMMA`\n+err: `expected field declaration`\n+err: `expected COMMA`\n+err: `expected field declaration`\n+err: `expected COMMA`\n+err: `expected field declaration`\n+err: `expected COMMA`"}, {"sha": "ff59f5d7127002864f67e0ea332f57f2cc253325", "filename": "crates/ra_syntax/tests/data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,7 +1,6 @@\n SOURCE_FILE@[0; 31)\n   ERROR@[0; 1)\n     R_CURLY@[0; 1) \"}\"\n-    err: `unmatched `}``\n   WHITESPACE@[1; 3) \"\\n\\n\"\n   STRUCT_DEF@[3; 12)\n     STRUCT_KW@[3; 9) \"struct\"\n@@ -10,7 +9,6 @@ SOURCE_FILE@[0; 31)\n       IDENT@[10; 11) \"S\"\n     SEMI@[11; 12) \";\"\n   WHITESPACE@[12; 14) \"\\n\\n\"\n-  err: `unmatched `}``\n   ERROR@[14; 15)\n     R_CURLY@[14; 15) \"}\"\n   WHITESPACE@[15; 17) \"\\n\\n\"\n@@ -26,7 +24,9 @@ SOURCE_FILE@[0; 31)\n       L_CURLY@[25; 26) \"{\"\n       R_CURLY@[26; 27) \"}\"\n   WHITESPACE@[27; 29) \"\\n\\n\"\n-  err: `unmatched `}``\n   ERROR@[29; 30)\n     R_CURLY@[29; 30) \"}\"\n   WHITESPACE@[30; 31) \"\\n\"\n+err: `unmatched `}``\n+err: `unmatched `}``\n+err: `unmatched `}``"}, {"sha": "75f6b3b9c6fbe0ba49a4fb88df36ebdca8149f06", "filename": "crates/ra_syntax/tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -18,13 +18,10 @@ SOURCE_FILE@[0; 95)\n       PATH_SEGMENT@[14; 17)\n         NAME_REF@[14; 17)\n           IDENT@[14; 17) \"bar\"\n-          err: `expected EXCL`\n     TOKEN_TREE@[17; 19)\n       L_PAREN@[17; 18) \"(\"\n       R_PAREN@[18; 19) \")\"\n-      err: `expected SEMI`\n   WHITESPACE@[19; 20) \" \"\n-  err: `expected an item`\n   ERROR@[20; 80)\n     L_CURLY@[20; 21) \"{\"\n     WHITESPACE@[21; 26) \"\\n    \"\n@@ -75,3 +72,6 @@ SOURCE_FILE@[0; 95)\n       WHITESPACE@[92; 93) \"\\n\"\n       R_CURLY@[93; 94) \"}\"\n   WHITESPACE@[94; 95) \"\\n\"\n+err: `expected EXCL`\n+err: `expected SEMI`\n+err: `expected an item`"}, {"sha": "8aa8c3ef42db51688bd67dcdf15dc3f7bf34582b", "filename": "crates/ra_syntax/tests/data/parser/err/0009_broken_struct_type_parameter.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -6,25 +6,17 @@ SOURCE_FILE@[0; 43)\n       IDENT@[7; 8) \"S\"\n     TYPE_PARAM_LIST@[8; 11)\n       L_ANGLE@[8; 9) \"<\"\n-      err: `expected type parameter`\n       ERROR@[9; 11)\n         INT_NUMBER@[9; 11) \"90\"\n-        err: `expected COMMA`\n-        err: `expected R_ANGLE`\n-        err: `expected `;`, `{`, or `(``\n   WHITESPACE@[11; 12) \" \"\n-  err: `expected an item`\n   ERROR@[12; 13)\n     PLUS@[12; 13) \"+\"\n   WHITESPACE@[13; 14) \" \"\n-  err: `expected an item`\n   ERROR@[14; 15)\n     INT_NUMBER@[14; 15) \"2\"\n-    err: `expected an item`\n   ERROR@[15; 16)\n     R_ANGLE@[15; 16) \">\"\n   WHITESPACE@[16; 17) \" \"\n-  err: `expected an item`\n   ERROR@[17; 31)\n     L_CURLY@[17; 18) \"{\"\n     WHITESPACE@[18; 23) \"\\n    \"\n@@ -34,12 +26,9 @@ SOURCE_FILE@[0; 43)\n           PATH_SEGMENT@[23; 24)\n             NAME_REF@[23; 24)\n               IDENT@[23; 24) \"f\"\n-              err: `expected SEMI`\n-              err: `expected expression`\n     EXPR_STMT@[24; 25)\n       ERROR@[24; 25)\n         COLON@[24; 25) \":\"\n-        err: `expected SEMI`\n     WHITESPACE@[25; 26) \" \"\n     PATH_EXPR@[26; 29)\n       PATH@[26; 29)\n@@ -56,3 +45,14 @@ SOURCE_FILE@[0; 43)\n       IDENT@[40; 41) \"T\"\n     SEMI@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\"\n+err: `expected type parameter`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected `;`, `{`, or `(``\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`"}, {"sha": "22a1727f089210cfd2d414450f837fdaccbdacd9", "filename": "crates/ra_syntax/tests/data/parser/err/0010_unsafe_lambda_block.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -23,7 +23,6 @@ SOURCE_FILE@[0; 42)\n             TUPLE_TYPE@[22; 24)\n               L_PAREN@[22; 23) \"(\"\n               R_PAREN@[23; 24) \")\"\n-              err: `expected `{``\n           WHITESPACE@[24; 25) \" \"\n           BLOCK_EXPR@[25; 38)\n             UNSAFE_KW@[25; 31) \"unsafe\"\n@@ -40,3 +39,4 @@ SOURCE_FILE@[0; 42)\n       WHITESPACE@[39; 40) \"\\n\"\n       R_CURLY@[40; 41) \"}\"\n   WHITESPACE@[41; 42) \"\\n\"\n+err: `expected `{``"}, {"sha": "ee2a29d9f33d5548924872d68083d749e3b85b3b", "filename": "crates/ra_syntax/tests/data/parser/err/0011_extern_struct.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -2,7 +2,6 @@ SOURCE_FILE@[0; 19)\n   ERROR@[0; 6)\n     ABI@[0; 6)\n       EXTERN_KW@[0; 6) \"extern\"\n-      err: `expected fn, trait or impl`\n   WHITESPACE@[6; 7) \" \"\n   STRUCT_DEF@[7; 18)\n     STRUCT_KW@[7; 13) \"struct\"\n@@ -11,3 +10,4 @@ SOURCE_FILE@[0; 19)\n       IDENT@[14; 17) \"Foo\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n+err: `expected fn, trait or impl`"}, {"sha": "1f5cc55c0e6618ddbe46e7a19e0071b11894cbe6", "filename": "crates/ra_syntax/tests/data/parser/err/0013_invalid_type.txt", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0013_invalid_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0013_invalid_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0013_invalid_type.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -43,47 +43,47 @@ SOURCE_FILE@[0; 86)\n                                     IDENT@[63; 66) \"Box\"\n                                   TYPE_ARG_LIST@[66; 68)\n                                     L_ANGLE@[66; 67) \"<\"\n-                                    err: `expected type`\n                                     TYPE_ARG@[67; 68)\n                                       ERROR@[67; 68)\n                                         AT@[67; 68) \"@\"\n-                                        err: `expected COMMA`\n-                                        err: `expected R_ANGLE`\n-                                        err: `expected COMMA`\n-                                        err: `expected R_ANGLE`\n-                                        err: `expected COMMA`\n-                                        err: `expected R_ANGLE`\n-                                        err: `expected COMMA`\n       WHITESPACE@[68; 69) \" \"\n       POS_FIELD_DEF@[69; 72)\n         PATH_TYPE@[69; 72)\n           PATH@[69; 72)\n             PATH_SEGMENT@[69; 72)\n               NAME_REF@[69; 72)\n                 IDENT@[69; 72) \"Any\"\n-                err: `expected COMMA`\n-                err: `expected a type`\n-                err: `expected R_PAREN`\n-                err: `expected SEMI`\n-                err: `expected an item`\n       ERROR@[72; 72)\n   ERROR@[72; 73)\n     R_ANGLE@[72; 73) \">\"\n-    err: `expected an item`\n   ERROR@[73; 74)\n     COMMA@[73; 74) \",\"\n   WHITESPACE@[74; 79) \"\\n    \"\n-  err: `expected an item`\n   ERROR@[79; 80)\n     R_ANGLE@[79; 80) \">\"\n-    err: `expected an item`\n   ERROR@[80; 81)\n     R_ANGLE@[80; 81) \">\"\n   WHITESPACE@[81; 82) \"\\n\"\n-  err: `expected an item`\n   ERROR@[82; 83)\n     R_PAREN@[82; 83) \")\"\n-    err: `expected an item`\n   ERROR@[83; 84)\n     SEMI@[83; 84) \";\"\n   WHITESPACE@[84; 86) \"\\n\\n\"\n+err: `expected type`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected COMMA`\n+err: `expected COMMA`\n+err: `expected a type`\n+err: `expected R_PAREN`\n+err: `expected SEMI`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "276a58b6969664a87b191d0490acd3cb501be7d6", "filename": "crates/ra_syntax/tests/data/parser/err/0014_where_no_bounds.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -23,9 +23,9 @@ SOURCE_FILE@[0; 23)\n             PATH_SEGMENT@[18; 19)\n               NAME_REF@[18; 19)\n                 IDENT@[18; 19) \"T\"\n-                err: `expected colon`\n     WHITESPACE@[19; 20) \" \"\n     BLOCK@[20; 22)\n       L_CURLY@[20; 21) \"{\"\n       R_CURLY@[21; 22) \"}\"\n   WHITESPACE@[22; 23) \"\\n\"\n+err: `expected colon`"}, {"sha": "8f93b832d3e830da27a25e00ce2f10c3b69675f4", "filename": "crates/ra_syntax/tests/data/parser/err/0015_curly_in_params.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -6,19 +6,19 @@ SOURCE_FILE@[0; 14)\n       IDENT@[3; 6) \"foo\"\n     PARAM_LIST@[6; 7)\n       L_PAREN@[6; 7) \"(\"\n-      err: `expected value parameter`\n-      err: `expected R_PAREN`\n-      err: `expected a block`\n-      err: `unmatched `}``\n   ERROR@[7; 8)\n     R_CURLY@[7; 8) \"}\"\n-    err: `expected an item`\n   ERROR@[8; 9)\n     R_PAREN@[8; 9) \")\"\n   WHITESPACE@[9; 10) \" \"\n-  err: `expected an item`\n   ERROR@[10; 13)\n     L_CURLY@[10; 11) \"{\"\n     WHITESPACE@[11; 12) \"\\n\"\n     R_CURLY@[12; 13) \"}\"\n   WHITESPACE@[13; 14) \"\\n\"\n+err: `expected value parameter`\n+err: `expected R_PAREN`\n+err: `expected a block`\n+err: `unmatched `}``\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "105e45a35c7dde89a6c5039f6334290d4334cfcf", "filename": "crates/ra_syntax/tests/data/parser/err/0016_missing_semi.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0016_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0016_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0016_missing_semi.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -29,7 +29,6 @@ SOURCE_FILE@[0; 56)\n               INT_NUMBER@[31; 32) \"2\"\n             WHITESPACE@[32; 37) \"\\n    \"\n             R_PAREN@[37; 38) \")\"\n-            err: `expected SEMI`\n       WHITESPACE@[38; 43) \"\\n    \"\n       EXPR_STMT@[43; 53)\n         RETURN_EXPR@[43; 52)\n@@ -41,3 +40,4 @@ SOURCE_FILE@[0; 56)\n       WHITESPACE@[53; 54) \"\\n\"\n       R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \"\\n\"\n+err: `expected SEMI`"}, {"sha": "7517406200e648926806f9d3e1c9fd3de07576d0", "filename": "crates/ra_syntax/tests/data/parser/err/0017_incomplete_binexpr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -40,7 +40,7 @@ SOURCE_FILE@[0; 47)\n           INT_NUMBER@[41; 42) \"1\"\n         WHITESPACE@[42; 43) \" \"\n         PLUS@[43; 44) \"+\"\n-        err: `expected expression`\n       WHITESPACE@[44; 45) \"\\n\"\n       R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\"\n+err: `expected expression`"}, {"sha": "82908b8f2468e39967655b601c200f78f50d65f6", "filename": "crates/ra_syntax/tests/data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -21,9 +21,6 @@ SOURCE_FILE@[0; 183)\n           PARAM@[33; 34)\n             REF_PAT@[33; 34)\n               AMP@[33; 34) \"&\"\n-              err: `expected pattern`\n-              err: `expected COLON`\n-              err: `expected type`\n           R_PAREN@[34; 35) \")\"\n         WHITESPACE@[35; 36) \" \"\n         RET_TYPE@[36; 46)\n@@ -124,8 +121,11 @@ SOURCE_FILE@[0; 183)\n         WHITESPACE@[169; 170) \" \"\n         NAME@[170; 180)\n           IDENT@[170; 180) \"set_parent\"\n-          err: `expected function arguments`\n-          err: `expected a block`\n       WHITESPACE@[180; 181) \"\\n\"\n       R_CURLY@[181; 182) \"}\"\n   WHITESPACE@[182; 183) \"\\n\"\n+err: `expected pattern`\n+err: `expected COLON`\n+err: `expected type`\n+err: `expected function arguments`\n+err: `expected a block`"}, {"sha": "4a1b84ee50f601616898ecac8af8c59b1a1af7f3", "filename": "crates/ra_syntax/tests/data/parser/err/0019_let_recover.txt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -19,8 +19,6 @@ SOURCE_FILE@[0; 139)\n             IDENT@[19; 22) \"foo\"\n         WHITESPACE@[22; 23) \" \"\n         EQ@[23; 24) \"=\"\n-        err: `expected expression`\n-        err: `expected SEMI`\n       WHITESPACE@[24; 29) \"\\n    \"\n       LET_STMT@[29; 41)\n         LET_KW@[29; 32) \"let\"\n@@ -37,8 +35,6 @@ SOURCE_FILE@[0; 139)\n       WHITESPACE@[41; 46) \"\\n    \"\n       LET_STMT@[46; 49)\n         LET_KW@[46; 49) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n       WHITESPACE@[49; 54) \"\\n    \"\n       LET_STMT@[54; 67)\n         LET_KW@[54; 57) \"let\"\n@@ -55,8 +51,6 @@ SOURCE_FILE@[0; 139)\n       WHITESPACE@[67; 72) \"\\n    \"\n       LET_STMT@[72; 75)\n         LET_KW@[72; 75) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n       WHITESPACE@[75; 80) \"\\n    \"\n       EXPR_STMT@[80; 90)\n         IF_EXPR@[80; 90)\n@@ -72,8 +66,6 @@ SOURCE_FILE@[0; 139)\n       WHITESPACE@[90; 95) \"\\n    \"\n       LET_STMT@[95; 98)\n         LET_KW@[95; 98) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n       WHITESPACE@[98; 103) \"\\n    \"\n       EXPR_STMT@[103; 116)\n         WHILE_EXPR@[103; 116)\n@@ -89,8 +81,6 @@ SOURCE_FILE@[0; 139)\n       WHITESPACE@[116; 121) \"\\n    \"\n       LET_STMT@[121; 124)\n         LET_KW@[121; 124) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n       WHITESPACE@[124; 129) \"\\n    \"\n       LOOP_EXPR@[129; 136)\n         LOOP_KW@[129; 133) \"loop\"\n@@ -101,3 +91,13 @@ SOURCE_FILE@[0; 139)\n       WHITESPACE@[136; 137) \"\\n\"\n       R_CURLY@[137; 138) \"}\"\n   WHITESPACE@[138; 139) \"\\n\"\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected SEMI`"}, {"sha": "d7ac73afa1b851738ee887929018bd761ac57b23", "filename": "crates/ra_syntax/tests/data/parser/err/0020_fn_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0020_fn_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0020_fn_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0020_fn_recover.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,9 +1,6 @@\n SOURCE_FILE@[0; 16)\n   FN_DEF@[0; 2)\n     FN_KW@[0; 2) \"fn\"\n-    err: `expected a name`\n-    err: `expected function arguments`\n-    err: `expected a block`\n   WHITESPACE@[2; 4) \"\\n\\n\"\n   FN_DEF@[4; 15)\n     FN_KW@[4; 6) \"fn\"\n@@ -18,3 +15,6 @@ SOURCE_FILE@[0; 16)\n       L_CURLY@[13; 14) \"{\"\n       R_CURLY@[14; 15) \"}\"\n   WHITESPACE@[15; 16) \"\\n\"\n+err: `expected a name`\n+err: `expected function arguments`\n+err: `expected a block`"}, {"sha": "086224eeef0b252fc0da9e6730d834bdd21a652b", "filename": "crates/ra_syntax/tests/data/parser/err/0021_incomplete_param.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0021_incomplete_param.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -23,12 +23,12 @@ SOURCE_FILE@[0; 22)\n         BIND_PAT@[15; 16)\n           NAME@[15; 16)\n             IDENT@[15; 16) \"y\"\n-            err: `expected COLON`\n-            err: `expected type`\n       R_PAREN@[16; 17) \")\"\n     WHITESPACE@[17; 18) \" \"\n     BLOCK@[18; 21)\n       L_CURLY@[18; 19) \"{\"\n       WHITESPACE@[19; 20) \"\\n\"\n       R_CURLY@[20; 21) \"}\"\n   WHITESPACE@[21; 22) \"\\n\"\n+err: `expected COLON`\n+err: `expected type`"}, {"sha": "d7a5fa1d22edd1bccb787dc403cc091fc91d1c62", "filename": "crates/ra_syntax/tests/data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -21,34 +21,23 @@ SOURCE_FILE@[0; 112)\n           LITERAL@[13; 14)\n             INT_NUMBER@[13; 14) \"2\"\n           COMMA@[14; 15) \",\"\n-          err: `expected expression`\n-          err: `expected R_BRACK`\n-          err: `expected SEMI`\n       WHITESPACE@[15; 16) \" \"\n-      err: `expected expression`\n       EXPR_STMT@[16; 17)\n         ERROR@[16; 17)\n           AT@[16; 17) \"@\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[17; 18)\n         ERROR@[17; 18)\n           COMMA@[17; 18) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[18; 19) \" \"\n       STRUCT_DEF@[19; 26)\n         STRUCT_KW@[19; 25) \"struct\"\n-        err: `expected a name`\n         ERROR@[25; 26)\n           COMMA@[25; 26) \",\"\n-          err: `expected `;`, `{`, or `(``\n       WHITESPACE@[26; 27) \" \"\n       LET_STMT@[27; 31)\n         LET_KW@[27; 30) \"let\"\n-        err: `expected pattern`\n         ERROR@[30; 31)\n           R_BRACK@[30; 31) \"]\"\n-          err: `expected SEMI`\n       WHITESPACE@[31; 32) \" \"\n       R_CURLY@[32; 33) \"}\"\n   WHITESPACE@[33; 34) \"\\n\"\n@@ -80,35 +69,22 @@ SOURCE_FILE@[0; 112)\n             LITERAL@[50; 51)\n               INT_NUMBER@[50; 51) \"2\"\n             COMMA@[51; 52) \",\"\n-            err: `expected expression`\n-            err: `expected SEMI`\n       WHITESPACE@[52; 53) \" \"\n-      err: `expected expression`\n       EXPR_STMT@[53; 54)\n         ERROR@[53; 54)\n           AT@[53; 54) \"@\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[54; 55)\n         ERROR@[54; 55)\n           COMMA@[54; 55) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[55; 56) \" \"\n       IMPL_BLOCK@[56; 60)\n         IMPL_KW@[56; 60) \"impl\"\n-        err: `expected type`\n-        err: `expected `{``\n-        err: `expected expression`\n       EXPR_STMT@[60; 61)\n         ERROR@[60; 61)\n           COMMA@[60; 61) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[61; 62) \" \"\n       LET_STMT@[62; 65)\n         LET_KW@[62; 65) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n-        err: `expected expression`\n       ERROR@[65; 66)\n         R_PAREN@[65; 66) \")\"\n       WHITESPACE@[66; 67) \" \"\n@@ -145,45 +121,69 @@ SOURCE_FILE@[0; 112)\n             LITERAL@[89; 90)\n               INT_NUMBER@[89; 90) \"2\"\n             COMMA@[90; 91) \",\"\n-            err: `expected expression`\n-            err: `expected SEMI`\n       WHITESPACE@[91; 92) \" \"\n-      err: `expected expression`\n       EXPR_STMT@[92; 93)\n         ERROR@[92; 93)\n           AT@[92; 93) \"@\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[93; 94)\n         ERROR@[93; 94)\n           COMMA@[93; 94) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[94; 95) \" \"\n-      err: `expected expression`\n       EXPR_STMT@[95; 96)\n         ERROR@[95; 96)\n           R_BRACK@[95; 96) \"]\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[96; 97)\n         ERROR@[96; 97)\n           COMMA@[96; 97) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[97; 98) \" \"\n       TRAIT_DEF@[98; 104)\n         TRAIT_KW@[98; 103) \"trait\"\n-        err: `expected a name`\n         ERROR@[103; 104)\n           COMMA@[103; 104) \",\"\n-          err: `expected `{``\n       WHITESPACE@[104; 105) \" \"\n       LET_STMT@[105; 108)\n         LET_KW@[105; 108) \"let\"\n-        err: `expected pattern`\n-        err: `expected SEMI`\n-        err: `expected expression`\n       ERROR@[108; 109)\n         R_PAREN@[108; 109) \")\"\n       WHITESPACE@[109; 110) \" \"\n       R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n+err: `expected expression`\n+err: `expected R_BRACK`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected a name`\n+err: `expected `;`, `{`, or `(``\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected type`\n+err: `expected `{``\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected a name`\n+err: `expected `{``\n+err: `expected pattern`\n+err: `expected SEMI`\n+err: `expected expression`"}, {"sha": "143600e67082b05e71657f4b776096856850ba01", "filename": "crates/ra_syntax/tests/data/parser/err/0023_mismatched_paren.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0023_mismatched_paren.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -31,13 +31,13 @@ SOURCE_FILE@[0; 94)\n           COMMA@[44; 45) \",\"\n           WHITESPACE@[45; 46) \" \"\n           FLOAT_NUMBER@[46; 49) \"2.0\"\n-          err: `unmatched `}``\n       WHITESPACE@[49; 54) \"\\n    \"\n       R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \" \"\n   COMMENT@[56; 91) \"//~ ERROR incorrect c ...\"\n   WHITESPACE@[91; 92) \"\\n\"\n-  err: `unmatched `}``\n   ERROR@[92; 93)\n     R_CURLY@[92; 93) \"}\"\n   WHITESPACE@[93; 94) \"\\n\"\n+err: `unmatched `}``\n+err: `unmatched `}``"}, {"sha": "4f505fa76cdfa90189a39eb4cceb86a81d281af3", "filename": "crates/ra_syntax/tests/data/parser/err/0024_many_type_parens.txt", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0024_many_type_parens.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0024_many_type_parens.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0024_many_type_parens.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -103,8 +103,6 @@ SOURCE_FILE@[0; 240)\n                                 NAME_REF@[83; 87)\n                                   IDENT@[83; 87) \"Copy\"\n                           R_PAREN@[87; 88) \")\"\n-                          err: `expected COMMA`\n-                          err: `expected R_ANGLE`\n             WHITESPACE@[88; 89) \" \"\n             PLUS@[89; 90) \"+\"\n             WHITESPACE@[90; 91) \" \"\n@@ -141,8 +139,6 @@ SOURCE_FILE@[0; 240)\n                           LIFETIME@[117; 119) \"\\'a\"\n                         R_ANGLE@[119; 120) \">\"\n               R_PAREN@[120; 121) \")\"\n-              err: `expected SEMI`\n-              err: `expected expression`\n       EXPR_STMT@[121; 123)\n         ERROR@[121; 122)\n           R_ANGLE@[121; 122) \">\"\n@@ -165,54 +161,35 @@ SOURCE_FILE@[0; 240)\n                 TYPE_ARG@[139; 141)\n                   PAREN_TYPE@[139; 141)\n                     L_PAREN@[139; 140) \"(\"\n-                    err: `expected type`\n                     ERROR@[140; 141)\n                       QUESTION@[140; 141) \"?\"\n-                      err: `expected R_PAREN`\n-                      err: `expected COMMA`\n-                      err: `expected R_ANGLE`\n-                      err: `expected SEMI`\n       EXPR_STMT@[141; 146)\n         PATH_EXPR@[141; 146)\n           PATH@[141; 146)\n             PATH_SEGMENT@[141; 146)\n               NAME_REF@[141; 146)\n                 IDENT@[141; 146) \"Sized\"\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[146; 147)\n         ERROR@[146; 147)\n           R_PAREN@[146; 147) \")\"\n-          err: `expected SEMI`\n       WHITESPACE@[147; 148) \" \"\n-      err: `expected expression`\n       EXPR_STMT@[148; 149)\n         ERROR@[148; 149)\n           PLUS@[148; 149) \"+\"\n-          err: `expected SEMI`\n       WHITESPACE@[149; 150) \" \"\n       EXPR_STMT@[150; 151)\n         PAREN_EXPR@[150; 151)\n           L_PAREN@[150; 151) \"(\"\n-          err: `expected expression`\n-          err: `expected R_PAREN`\n-          err: `expected SEMI`\n       EXPR_STMT@[151; 157)\n         FOR_EXPR@[151; 157)\n           FOR_KW@[151; 154) \"for\"\n-          err: `expected pattern`\n           ERROR@[154; 155)\n             L_ANGLE@[154; 155) \"<\"\n-            err: `expected IN_KW`\n-            err: `expected expression`\n           ERROR@[155; 157)\n             LIFETIME@[155; 157) \"\\'a\"\n-            err: `expected a block`\n-            err: `expected expression`\n       EXPR_STMT@[157; 158)\n         ERROR@[157; 158)\n           R_ANGLE@[157; 158) \">\"\n-          err: `expected SEMI`\n       WHITESPACE@[158; 159) \" \"\n       EXPR_STMT@[159; 180)\n         BIN_EXPR@[159; 180)\n@@ -225,11 +202,9 @@ SOURCE_FILE@[0; 240)\n                       NAME_REF@[159; 164)\n                         IDENT@[159; 164) \"Trait\"\n                 L_ANGLE@[164; 165) \"<\"\n-                err: `expected expression`\n                 ERROR@[165; 167)\n                   LIFETIME@[165; 167) \"\\'a\"\n               R_ANGLE@[167; 168) \">\"\n-              err: `expected expression`\n               ERROR@[168; 169)\n                 R_PAREN@[168; 169) \")\"\n             WHITESPACE@[169; 170) \" \"\n@@ -244,10 +219,8 @@ SOURCE_FILE@[0; 240)\n                       IDENT@[173; 177) \"Copy\"\n               R_PAREN@[177; 178) \")\"\n           R_ANGLE@[178; 179) \">\"\n-          err: `expected expression`\n           ERROR@[179; 180)\n             SEMI@[179; 180) \";\"\n-            err: `expected SEMI`\n       WHITESPACE@[180; 185) \"\\n    \"\n       LET_STMT@[185; 235)\n         LET_KW@[185; 188) \"let\"\n@@ -288,8 +261,6 @@ SOURCE_FILE@[0; 240)\n                                       LIFETIME@[211; 213) \"\\'a\"\n                                     R_ANGLE@[213; 214) \">\"\n                           R_PAREN@[214; 215) \")\"\n-                          err: `expected COMMA`\n-                          err: `expected R_ANGLE`\n             WHITESPACE@[215; 216) \" \"\n             PLUS@[216; 217) \"+\"\n             WHITESPACE@[217; 218) \" \"\n@@ -313,12 +284,41 @@ SOURCE_FILE@[0; 240)\n                     NAME_REF@[229; 234)\n                       IDENT@[229; 234) \"Sized\"\n               R_PAREN@[234; 235) \")\"\n-              err: `expected SEMI`\n-              err: `expected expression`\n       EXPR_STMT@[235; 237)\n         ERROR@[235; 236)\n           R_ANGLE@[235; 236) \">\"\n         SEMI@[236; 237) \";\"\n       WHITESPACE@[237; 238) \"\\n\"\n       R_CURLY@[238; 239) \"}\"\n   WHITESPACE@[239; 240) \"\\n\"\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected type`\n+err: `expected R_PAREN`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected SEMI`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected R_PAREN`\n+err: `expected SEMI`\n+err: `expected pattern`\n+err: `expected IN_KW`\n+err: `expected expression`\n+err: `expected a block`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected expression`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected COMMA`\n+err: `expected R_ANGLE`\n+err: `expected SEMI`\n+err: `expected expression`"}, {"sha": "a1bd8647aa7d177c6bde15a98cea1aab09d76b12", "filename": "crates/ra_syntax/tests/data/parser/err/0025_nope.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -50,14 +50,10 @@ SOURCE_FILE@[0; 575)\n                 NAME@[91; 94)\n                   IDENT@[91; 94) \"abc\"\n                 COLON@[94; 95) \":\"\n-                err: `expected type`\n-                err: `expected COMMA`\n               WHITESPACE@[95; 96) \" \"\n-              err: `expected field`\n               ERROR@[96; 98)\n                 L_CURLY@[96; 97) \"{\"\n                 R_CURLY@[97; 98) \"}\"\n-                err: `expected field declaration`\n               ERROR@[98; 99)\n                 COMMA@[98; 99) \",\"\n               WHITESPACE@[99; 100) \" \"\n@@ -159,17 +155,11 @@ SOURCE_FILE@[0; 575)\n                           PATH_SEGMENT@[368; 371)\n                             NAME_REF@[368; 371)\n                               IDENT@[368; 371) \"i32\"\n-                              err: `expected COMMA`\n                     WHITESPACE@[371; 372) \" \"\n-                    err: `expected a type`\n-                    err: `expected R_PAREN`\n-                    err: `expected COMMA`\n-                    err: `expected enum variant`\n                     ERROR@[372; 372)\n                 ERROR@[372; 374)\n                   L_CURLY@[372; 373) \"{\"\n                   R_CURLY@[373; 374) \"}\"\n-                  err: `expected enum variant`\n                 ERROR@[374; 375)\n                   R_PAREN@[374; 375) \")\"\n                 WHITESPACE@[375; 376) \" \"\n@@ -192,7 +182,6 @@ SOURCE_FILE@[0; 575)\n         WHITESPACE@[505; 506) \" \"\n         EQ@[506; 507) \"=\"\n         WHITESPACE@[507; 508) \" \"\n-        err: `expected expression`\n         ERROR@[508; 509)\n           UNDERSCORE@[508; 509) \"_\"\n         SEMI@[509; 510) \";\"\n@@ -201,3 +190,14 @@ SOURCE_FILE@[0; 575)\n       WHITESPACE@[572; 573) \"\\n\"\n       R_CURLY@[573; 574) \"}\"\n   WHITESPACE@[574; 575) \"\\n\"\n+err: `expected type`\n+err: `expected COMMA`\n+err: `expected field`\n+err: `expected field declaration`\n+err: `expected COMMA`\n+err: `expected a type`\n+err: `expected R_PAREN`\n+err: `expected COMMA`\n+err: `expected enum variant`\n+err: `expected enum variant`\n+err: `expected expression`"}, {"sha": "f473718dc58e803c48b6ad7690f9762982e73d50", "filename": "crates/ra_syntax/tests/data/parser/err/0026_imp_recovery.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0026_imp_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0026_imp_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0026_imp_recovery.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -16,8 +16,6 @@ SOURCE_FILE@[0; 38)\n                   NAME_REF@[8; 13)\n                     IDENT@[8; 13) \"Clone\"\n       R_ANGLE@[13; 14) \">\"\n-      err: `expected trait or type`\n-      err: `expected `{``\n   WHITESPACE@[14; 15) \"\\n\"\n   IMPL_BLOCK@[15; 37)\n     IMPL_KW@[15; 19) \"impl\"\n@@ -47,3 +45,5 @@ SOURCE_FILE@[0; 38)\n       L_CURLY@[35; 36) \"{\"\n       R_CURLY@[36; 37) \"}\"\n   WHITESPACE@[37; 38) \"\\n\"\n+err: `expected trait or type`\n+err: `expected `{``"}, {"sha": "5a2b52d05449af2a7e1dcd751893bd27f0fe9d7e", "filename": "crates/ra_syntax/tests/data/parser/err/0027_incomplere_where_for.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -19,10 +19,10 @@ SOURCE_FILE@[0; 30)\n             LIFETIME_PARAM@[23; 25)\n               LIFETIME@[23; 25) \"\\'a\"\n             R_ANGLE@[25; 26) \">\"\n-            err: `expected a path`\n-            err: `expected colon`\n     WHITESPACE@[26; 27) \"\\n\"\n     BLOCK@[27; 29)\n       L_CURLY@[27; 28) \"{\"\n       R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n+err: `expected a path`\n+err: `expected colon`"}, {"sha": "8a59a5ac351a1cb8f57e78e6be6cd2a24a1be6fb", "filename": "crates/ra_syntax/tests/data/parser/err/0028_macro_2.0.txt", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0028_macro_2.0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0028_macro_2.0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0028_macro_2.0.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -4,7 +4,6 @@ SOURCE_FILE@[0; 349)\n       PATH_SEGMENT@[0; 5)\n         NAME_REF@[0; 5)\n           IDENT@[0; 5) \"macro\"\n-          err: `expected EXCL`\n     WHITESPACE@[5; 6) \" \"\n     NAME@[6; 21)\n       IDENT@[6; 21) \"parse_use_trees\"\n@@ -28,9 +27,7 @@ SOURCE_FILE@[0; 349)\n         R_PAREN@[38; 39) \")\"\n       STAR@[39; 40) \"*\"\n       R_PAREN@[40; 41) \")\"\n-      err: `expected SEMI`\n   WHITESPACE@[41; 42) \" \"\n-  err: `expected an item`\n   ERROR@[42; 93)\n     L_CURLY@[42; 43) \"{\"\n     WHITESPACE@[43; 48) \"\\n    \"\n@@ -85,7 +82,6 @@ SOURCE_FILE@[0; 349)\n             PATH_SEGMENT@[134; 139)\n               NAME_REF@[134; 139)\n                 IDENT@[134; 139) \"macro\"\n-                err: `expected SEMI`\n       WHITESPACE@[139; 140) \" \"\n       EXPR_STMT@[140; 154)\n         CALL_EXPR@[140; 154)\n@@ -98,175 +94,112 @@ SOURCE_FILE@[0; 349)\n             L_PAREN@[150; 151) \"(\"\n             ARRAY_EXPR@[151; 154)\n               L_BRACK@[151; 152) \"[\"\n-              err: `expected expression`\n               ERROR@[152; 153)\n                 DOLLAR@[152; 153) \"$\"\n-                err: `expected COMMA`\n               PAREN_EXPR@[153; 154)\n                 L_PAREN@[153; 154) \"(\"\n-                err: `expected expression`\n-                err: `expected R_PAREN`\n-                err: `expected COMMA`\n-                err: `expected expression`\n-                err: `expected R_BRACK`\n-                err: `expected COMMA`\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[154; 155)\n         ERROR@[154; 155)\n           DOLLAR@[154; 155) \"$\"\n-          err: `expected SEMI`\n       EXPR_STMT@[155; 160)\n         PATH_EXPR@[155; 160)\n           PATH@[155; 160)\n             PATH_SEGMENT@[155; 160)\n               NAME_REF@[155; 160)\n                 IDENT@[155; 160) \"input\"\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[160; 161)\n         ERROR@[160; 161)\n           COLON@[160; 161) \":\"\n-          err: `expected SEMI`\n       EXPR_STMT@[161; 165)\n         PATH_EXPR@[161; 165)\n           PATH@[161; 165)\n             PATH_SEGMENT@[161; 165)\n               NAME_REF@[161; 165)\n                 IDENT@[161; 165) \"expr\"\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[165; 166)\n         ERROR@[165; 166)\n           R_PAREN@[165; 166) \")\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[166; 167)\n         ERROR@[166; 167)\n           COMMA@[166; 167) \",\"\n-          err: `expected SEMI`\n       EXPR_STMT@[167; 170)\n         PREFIX_EXPR@[167; 170)\n           STAR@[167; 168) \"*\"\n           WHITESPACE@[168; 169) \" \"\n-          err: `expected expression`\n           ERROR@[169; 170)\n             DOLLAR@[169; 170) \"$\"\n-            err: `expected SEMI`\n       EXPR_STMT@[170; 171)\n         PAREN_EXPR@[170; 171)\n           L_PAREN@[170; 171) \"(\"\n-          err: `expected expression`\n-          err: `expected R_PAREN`\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[171; 172)\n         ERROR@[171; 172)\n           COMMA@[171; 172) \",\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[172; 173)\n         ERROR@[172; 173)\n           R_PAREN@[172; 173) \")\"\n-          err: `expected SEMI`\n       EXPR_STMT@[173; 175)\n         PREFIX_EXPR@[173; 175)\n           STAR@[173; 174) \"*\"\n-          err: `expected expression`\n           ERROR@[174; 175)\n             R_BRACK@[174; 175) \"]\"\n-            err: `expected SEMI`\n-            err: `expected expression`\n       EXPR_STMT@[175; 176)\n         ERROR@[175; 176)\n           COMMA@[175; 176) \",\"\n-          err: `expected SEMI`\n       WHITESPACE@[176; 177) \" \"\n       EXPR_STMT@[177; 180)\n         ARRAY_EXPR@[177; 180)\n           L_BRACK@[177; 178) \"[\"\n-          err: `expected expression`\n           ERROR@[178; 179)\n             DOLLAR@[178; 179) \"$\"\n-            err: `expected COMMA`\n           PAREN_EXPR@[179; 180)\n             L_PAREN@[179; 180) \"(\"\n-            err: `expected expression`\n-            err: `expected R_PAREN`\n-            err: `expected COMMA`\n-            err: `expected expression`\n-            err: `expected R_BRACK`\n-            err: `expected SEMI`\n-            err: `expected expression`\n       EXPR_STMT@[180; 181)\n         ERROR@[180; 181)\n           DOLLAR@[180; 181) \"$\"\n-          err: `expected SEMI`\n       EXPR_STMT@[181; 187)\n         PATH_EXPR@[181; 187)\n           PATH@[181; 187)\n             PATH_SEGMENT@[181; 187)\n               NAME_REF@[181; 187)\n                 IDENT@[181; 187) \"output\"\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[187; 188)\n         ERROR@[187; 188)\n           COLON@[187; 188) \":\"\n-          err: `expected SEMI`\n       EXPR_STMT@[188; 192)\n         PATH_EXPR@[188; 192)\n           PATH@[188; 192)\n             PATH_SEGMENT@[188; 192)\n               NAME_REF@[188; 192)\n                 IDENT@[188; 192) \"expr\"\n-                err: `expected SEMI`\n-                err: `expected expression`\n       EXPR_STMT@[192; 193)\n         ERROR@[192; 193)\n           R_PAREN@[192; 193) \")\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[193; 194)\n         ERROR@[193; 194)\n           COMMA@[193; 194) \",\"\n-          err: `expected SEMI`\n       EXPR_STMT@[194; 197)\n         PREFIX_EXPR@[194; 197)\n           STAR@[194; 195) \"*\"\n           WHITESPACE@[195; 196) \" \"\n-          err: `expected expression`\n           ERROR@[196; 197)\n             DOLLAR@[196; 197) \"$\"\n-            err: `expected SEMI`\n       EXPR_STMT@[197; 198)\n         PAREN_EXPR@[197; 198)\n           L_PAREN@[197; 198) \"(\"\n-          err: `expected expression`\n-          err: `expected R_PAREN`\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[198; 199)\n         ERROR@[198; 199)\n           COMMA@[198; 199) \",\"\n-          err: `expected SEMI`\n-          err: `expected expression`\n       EXPR_STMT@[199; 200)\n         ERROR@[199; 200)\n           R_PAREN@[199; 200) \")\"\n-          err: `expected SEMI`\n       EXPR_STMT@[200; 202)\n         PREFIX_EXPR@[200; 202)\n           STAR@[200; 201) \"*\"\n-          err: `expected expression`\n           ERROR@[201; 202)\n             R_BRACK@[201; 202) \"]\"\n-            err: `expected SEMI`\n-            err: `expected expression`\n       EXPR_STMT@[202; 203)\n         ERROR@[202; 203)\n           R_PAREN@[202; 203) \")\"\n-          err: `expected SEMI`\n       WHITESPACE@[203; 204) \" \"\n       BLOCK_EXPR@[204; 346)\n         BLOCK@[204; 346)\n@@ -323,3 +256,70 @@ SOURCE_FILE@[0; 349)\n       WHITESPACE@[346; 347) \"\\n\"\n       R_CURLY@[347; 348) \"}\"\n   WHITESPACE@[348; 349) \"\\n\"\n+err: `expected EXCL`\n+err: `expected SEMI`\n+err: `expected an item`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected COMMA`\n+err: `expected expression`\n+err: `expected R_PAREN`\n+err: `expected COMMA`\n+err: `expected expression`\n+err: `expected R_BRACK`\n+err: `expected COMMA`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected R_PAREN`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected COMMA`\n+err: `expected expression`\n+err: `expected R_PAREN`\n+err: `expected COMMA`\n+err: `expected expression`\n+err: `expected R_BRACK`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected R_PAREN`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`\n+err: `expected expression`\n+err: `expected SEMI`"}, {"sha": "fa92f08452e231686ad0bde66cf46d02c5f69b84", "filename": "crates/ra_syntax/tests/data/parser/err/0029_field_completion.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0029_field_completion.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0029_field_completion.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0029_field_completion.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -29,7 +29,7 @@ SOURCE_FILE@[0; 24)\n               NAME_REF@[19; 20)\n                 IDENT@[19; 20) \"a\"\n         DOT@[20; 21) \".\"\n-        err: `expected field name or number`\n       WHITESPACE@[21; 22) \"\\n\"\n       R_CURLY@[22; 23) \"}\"\n   WHITESPACE@[23; 24) \"\\n\"\n+err: `expected field name or number`"}, {"sha": "fb6d3c9c7be5317d08cd308267468e1d15ef1f56", "filename": "crates/ra_syntax/tests/data/parser/err/0030_string_suffixes.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -21,7 +21,6 @@ SOURCE_FILE@[0; 112)\n         WHITESPACE@[23; 24) \" \"\n         LITERAL@[24; 27)\n           CHAR@[24; 27) \"\\'c\\'\"\n-          err: `expected SEMI`\n       EXPR_STMT@[27; 31)\n         PATH_EXPR@[27; 30)\n           PATH@[27; 30)\n@@ -68,3 +67,4 @@ SOURCE_FILE@[0; 112)\n       WHITESPACE@[109; 110) \"\\n\"\n       R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n+err: `expected SEMI`"}, {"sha": "b4ec999b198f3c7cb839ee554f5d9b2d079c94b7", "filename": "crates/ra_syntax/tests/data/parser/err/0031_block_inner_attrs.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0031_block_inner_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0031_block_inner_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0031_block_inner_attrs.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -24,7 +24,6 @@ SOURCE_FILE@[0; 350)\n           BLOCK@[29; 128)\n             L_CURLY@[29; 30) \"{\"\n             WHITESPACE@[30; 39) \"\\n        \"\n-            err: `A block in this position cannot accept inner attributes`\n             ATTR@[39; 83)\n               POUND@[39; 40) \"#\"\n               EXCL@[40; 41) \"!\"\n@@ -53,7 +52,6 @@ SOURCE_FILE@[0; 350)\n           BLOCK@[142; 257)\n             L_CURLY@[142; 143) \"{\"\n             WHITESPACE@[143; 152) \"\\n        \"\n-            err: `A block in this position cannot accept inner attributes`\n             ATTR@[152; 171)\n               POUND@[152; 153) \"#\"\n               EXCL@[153; 154) \"!\"\n@@ -66,7 +64,6 @@ SOURCE_FILE@[0; 350)\n                   R_PAREN@[169; 170) \")\"\n                 R_BRACK@[170; 171) \"]\"\n             WHITESPACE@[171; 180) \"\\n        \"\n-            err: `A block in this position cannot accept inner attributes`\n             ATTR@[180; 212)\n               POUND@[180; 181) \"#\"\n               EXCL@[181; 182) \"!\"\n@@ -93,7 +90,6 @@ SOURCE_FILE@[0; 350)\n         BLOCK@[273; 347)\n           L_CURLY@[273; 274) \"{\"\n           WHITESPACE@[274; 283) \"\\n        \"\n-          err: `A block in this position cannot accept inner attributes`\n           ATTR@[283; 302)\n             POUND@[283; 284) \"#\"\n             EXCL@[284; 285) \"!\"\n@@ -112,3 +108,7 @@ SOURCE_FILE@[0; 350)\n       WHITESPACE@[347; 348) \"\\n\"\n       R_CURLY@[348; 349) \"}\"\n   WHITESPACE@[349; 350) \"\\n\"\n+err: `A block in this position cannot accept inner attributes`\n+err: `A block in this position cannot accept inner attributes`\n+err: `A block in this position cannot accept inner attributes`\n+err: `A block in this position cannot accept inner attributes`"}, {"sha": "a3c53f353e05b81fbb3422d1768ac95882ba957a", "filename": "crates/ra_syntax/tests/data/parser/err/0032_match_arms_inner_attrs.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -36,11 +36,8 @@ SOURCE_FILE@[0; 293)\n             MATCH_ARM@[51; 78)\n               ATTR@[51; 52)\n                 POUND@[51; 52) \"#\"\n-                err: `expected `[``\n-                err: `expected pattern`\n               ERROR@[52; 53)\n                 EXCL@[52; 53) \"!\"\n-                err: `expected FAT_ARROW`\n               ARRAY_EXPR@[53; 78)\n                 L_BRACK@[53; 54) \"[\"\n                 CALL_EXPR@[54; 77)\n@@ -55,7 +52,6 @@ SOURCE_FILE@[0; 293)\n                       STRING@[58; 76) \"\\\"Not allowed here\\\"\"\n                     R_PAREN@[76; 77) \")\"\n                 R_BRACK@[77; 78) \"]\"\n-                err: `expected COMMA`\n             WHITESPACE@[78; 87) \"\\n        \"\n             MATCH_ARM@[87; 94)\n               PLACEHOLDER_PAT@[87; 88)\n@@ -106,11 +102,8 @@ SOURCE_FILE@[0; 293)\n             MATCH_ARM@[160; 179)\n               ATTR@[160; 161)\n                 POUND@[160; 161) \"#\"\n-                err: `expected `[``\n-                err: `expected pattern`\n               ERROR@[161; 162)\n                 EXCL@[161; 162) \"!\"\n-                err: `expected FAT_ARROW`\n               ARRAY_EXPR@[162; 179)\n                 L_BRACK@[162; 163) \"[\"\n                 CALL_EXPR@[163; 178)\n@@ -152,11 +145,8 @@ SOURCE_FILE@[0; 293)\n             WHITESPACE@[222; 231) \"\\n        \"\n             ATTR@[231; 232)\n               POUND@[231; 232) \"#\"\n-              err: `expected `[``\n-              err: `expected pattern`\n             ERROR@[232; 233)\n               EXCL@[232; 233) \"!\"\n-              err: `expected FAT_ARROW`\n             ARRAY_EXPR@[233; 250)\n               L_BRACK@[233; 234) \"[\"\n               CALL_EXPR@[234; 249)\n@@ -171,7 +161,6 @@ SOURCE_FILE@[0; 293)\n                     STRING@[238; 248) \"\\\"Nor here\\\"\"\n                   R_PAREN@[248; 249) \")\"\n               R_BRACK@[249; 250) \"]\"\n-              err: `expected COMMA`\n           WHITESPACE@[250; 259) \"\\n        \"\n           MATCH_ARM@[259; 266)\n             PLACEHOLDER_PAT@[259; 260)\n@@ -199,3 +188,14 @@ SOURCE_FILE@[0; 293)\n       WHITESPACE@[290; 291) \"\\n\"\n       R_CURLY@[291; 292) \"}\"\n   WHITESPACE@[292; 293) \"\\n\"\n+err: `expected `[``\n+err: `expected pattern`\n+err: `expected FAT_ARROW`\n+err: `expected COMMA`\n+err: `expected `[``\n+err: `expected pattern`\n+err: `expected FAT_ARROW`\n+err: `expected `[``\n+err: `expected pattern`\n+err: `expected FAT_ARROW`\n+err: `expected COMMA`"}, {"sha": "7bcf5ec8119816051ecc3afae2ec03f64c8c581c", "filename": "crates/ra_syntax/tests/data/parser/err/0033_match_arms_outer_attrs.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -54,11 +54,11 @@ SOURCE_FILE@[0; 89)\n                   IDENT@[74; 78) \"test\"\n                   R_PAREN@[78; 79) \")\"\n                 R_BRACK@[79; 80) \"]\"\n-                err: `expected pattern`\n-                err: `expected FAT_ARROW`\n-                err: `expected expression`\n           WHITESPACE@[80; 85) \"\\n    \"\n           R_CURLY@[85; 86) \"}\"\n       WHITESPACE@[86; 87) \"\\n\"\n       R_CURLY@[87; 88) \"}\"\n   WHITESPACE@[88; 89) \"\\n\"\n+err: `expected pattern`\n+err: `expected FAT_ARROW`\n+err: `expected expression`"}, {"sha": "eb6d98fcd9e9c647d1a6fde65e5145d8d9941afd", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0001_array_type_missing_semi.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -12,16 +12,16 @@ SOURCE_FILE@[0; 18)\n       TUPLE_TYPE@[10; 12)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n-        err: `expected `;` or `]``\n-        err: `expected SEMI`\n   WHITESPACE@[12; 13) \" \"\n-  err: `expected an item`\n   ERROR@[13; 15)\n     INT_NUMBER@[13; 15) \"92\"\n-    err: `expected an item`\n   ERROR@[15; 16)\n     R_BRACK@[15; 16) \"]\"\n-    err: `expected an item`\n   ERROR@[16; 17)\n     SEMI@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n+err: `expected `;` or `]``\n+err: `expected SEMI`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "b1d104bd41dbef33853f90e2381d58e5cce59423", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0002_misplaced_label_err.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -16,13 +16,13 @@ SOURCE_FILE@[0; 30)\n           LABEL@[16; 22)\n             LIFETIME@[16; 21) \"\\'loop\"\n             COLON@[21; 22) \":\"\n-            err: `expected a loop`\n-            err: `expected SEMI`\n       WHITESPACE@[22; 23) \" \"\n       IMPL_BLOCK@[23; 27)\n         IMPL_KW@[23; 27) \"impl\"\n-        err: `expected type`\n-        err: `expected `{``\n       WHITESPACE@[27; 28) \"\\n\"\n       R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n+err: `expected a loop`\n+err: `expected SEMI`\n+err: `expected type`\n+err: `expected `{``"}, {"sha": "b470d9ad11496080b9857b6acf8f10a8a5dc56ba", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0003_pointer_type_no_mutability.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -9,9 +9,9 @@ SOURCE_FILE@[0; 14)\n     WHITESPACE@[8; 9) \" \"\n     POINTER_TYPE@[9; 12)\n       STAR@[9; 10) \"*\"\n-      err: `expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)`\n       TUPLE_TYPE@[10; 12)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n     SEMI@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n+err: `expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)`"}, {"sha": "ef4e0d5dd1b9b6fee0e8fb49cf707dcf844fb534", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0004_impl_type.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -35,8 +35,6 @@ SOURCE_FILE@[0; 87)\n   WHITESPACE@[33; 34) \"\\n\"\n   IMPL_BLOCK@[34; 38)\n     IMPL_KW@[34; 38) \"impl\"\n-    err: `expected trait or type`\n-    err: `expected `{``\n   WHITESPACE@[38; 39) \" \"\n   IMPL_BLOCK@[39; 54)\n     IMPL_KW@[39; 43) \"impl\"\n@@ -61,8 +59,6 @@ SOURCE_FILE@[0; 87)\n             IDENT@[60; 66) \"Trait2\"\n     WHITESPACE@[66; 67) \" \"\n     FOR_KW@[67; 70) \"for\"\n-    err: `expected trait or type`\n-    err: `expected `{``\n   WHITESPACE@[70; 71) \" \"\n   IMPL_BLOCK@[71; 86)\n     IMPL_KW@[71; 75) \"impl\"\n@@ -77,3 +73,7 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[84; 85) \"{\"\n       R_CURLY@[85; 86) \"}\"\n   WHITESPACE@[86; 87) \"\\n\"\n+err: `expected trait or type`\n+err: `expected `{``\n+err: `expected trait or type`\n+err: `expected `{``"}, {"sha": "41e623b412fb5e44e75cc9558fb4c3fe0aba74de", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0005_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -8,16 +8,16 @@ SOURCE_FILE@[0; 20)\n     EQ@[7; 8) \"=\"\n     WHITESPACE@[8; 9) \" \"\n     UNSAFE_KW@[9; 15) \"unsafe\"\n-    err: `expected `fn``\n-    err: `expected SEMI`\n   WHITESPACE@[15; 16) \" \"\n-  err: `expected an item`\n   ERROR@[16; 17)\n     L_PAREN@[16; 17) \"(\"\n-    err: `expected an item`\n   ERROR@[17; 18)\n     R_PAREN@[17; 18) \")\"\n-    err: `expected an item`\n   ERROR@[18; 19)\n     SEMI@[18; 19) \";\"\n   WHITESPACE@[19; 20) \"\\n\"\n+err: `expected `fn``\n+err: `expected SEMI`\n+err: `expected an item`\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "f1d0dd5c67d58ed3efbd2afa8429c2b866130cf4", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0006_unsafe_block_in_mod.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -11,11 +11,9 @@ SOURCE_FILE@[0; 33)\n       L_CURLY@[8; 9) \"{\"\n       R_CURLY@[9; 10) \"}\"\n   WHITESPACE@[10; 11) \" \"\n-  err: `expected an item`\n   ERROR@[11; 17)\n     UNSAFE_KW@[11; 17) \"unsafe\"\n   WHITESPACE@[17; 18) \" \"\n-  err: `expected an item`\n   ERROR@[18; 21)\n     L_CURLY@[18; 19) \"{\"\n     WHITESPACE@[19; 20) \" \"\n@@ -33,3 +31,5 @@ SOURCE_FILE@[0; 33)\n       L_CURLY@[30; 31) \"{\"\n       R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\"\n+err: `expected an item`\n+err: `expected an item`"}, {"sha": "1a8fa029cc012bcae66e05471d9cdd7591026c7f", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0007_async_without_semicolon.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 30)\n           BLOCK@[25; 27)\n             L_CURLY@[25; 26) \"{\"\n             R_CURLY@[26; 27) \"}\"\n-            err: `expected SEMI`\n       WHITESPACE@[27; 28) \" \"\n       R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n+err: `expected SEMI`"}, {"sha": "cadbbc078d072e2148c54775c23a04c549e67914", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0008_pub_expr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -14,7 +14,6 @@ SOURCE_FILE@[0; 21)\n       ERROR@[11; 14)\n         VISIBILITY@[11; 14)\n           PUB_KW@[11; 14) \"pub\"\n-          err: `expected an item`\n       WHITESPACE@[14; 15) \" \"\n       EXPR_STMT@[15; 18)\n         LITERAL@[15; 17)\n@@ -23,3 +22,4 @@ SOURCE_FILE@[0; 21)\n       WHITESPACE@[18; 19) \" \"\n       R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\"\n+err: `expected an item`"}, {"sha": "8e7d7d2419c870e2678a011687aaedd240fc556b", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0009_attr_on_expr_not_allowed.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -27,7 +27,6 @@ SOURCE_FILE@[0; 48)\n           WHITESPACE@[22; 23) \" \"\n           LITERAL@[23; 24)\n             INT_NUMBER@[23; 24) \"2\"\n-            err: `attributes are not allowed on BIN_EXPR`\n         SEMI@[24; 25) \";\"\n       WHITESPACE@[25; 29) \"\\n   \"\n       EXPR_STMT@[29; 45)\n@@ -48,8 +47,9 @@ SOURCE_FILE@[0; 48)\n           BLOCK@[42; 44)\n             L_CURLY@[42; 43) \"{\"\n             R_CURLY@[43; 44) \"}\"\n-            err: `attributes are not allowed on IF_EXPR`\n         SEMI@[44; 45) \";\"\n       WHITESPACE@[45; 46) \"\\n\"\n       R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n+err: `attributes are not allowed on BIN_EXPR`\n+err: `attributes are not allowed on IF_EXPR`"}, {"sha": "36717439ec8ca4117f98592de84e4c6e3397dd7e", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0010_bad_tuple_index_expr.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -19,7 +19,6 @@ SOURCE_FILE@[0; 47)\n                 NAME_REF@[15; 16)\n                   IDENT@[15; 16) \"x\"\n           DOT@[16; 17) \".\"\n-          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n           FLOAT_NUMBER@[17; 19) \"0.\"\n         SEMI@[19; 20) \";\"\n       WHITESPACE@[20; 25) \"\\n    \"\n@@ -31,7 +30,6 @@ SOURCE_FILE@[0; 47)\n                 NAME_REF@[25; 26)\n                   IDENT@[25; 26) \"x\"\n           DOT@[26; 27) \".\"\n-          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n           INT_NUMBER@[27; 31) \"1i32\"\n         SEMI@[31; 32) \";\"\n       WHITESPACE@[32; 37) \"\\n    \"\n@@ -43,9 +41,11 @@ SOURCE_FILE@[0; 47)\n                 NAME_REF@[37; 38)\n                   IDENT@[37; 38) \"x\"\n           DOT@[38; 39) \".\"\n-          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n           INT_NUMBER@[39; 43) \"0x01\"\n         SEMI@[43; 44) \";\"\n       WHITESPACE@[44; 45) \"\\n\"\n       R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\"\n+err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n+err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n+err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`"}, {"sha": "5f39e723828e1813f5b24503f3b1bd83bd1d60c6", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0010_wrong_order_fns.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -1,7 +1,6 @@\n SOURCE_FILE@[0; 50)\n   ERROR@[0; 5)\n     ASYNC_KW@[0; 5) \"async\"\n-    err: `expected fn, trait or impl`\n   WHITESPACE@[5; 6) \" \"\n   FN_DEF@[6; 24)\n     UNSAFE_KW@[6; 12) \"unsafe\"\n@@ -20,7 +19,6 @@ SOURCE_FILE@[0; 50)\n   WHITESPACE@[24; 25) \"\\n\"\n   ERROR@[25; 31)\n     UNSAFE_KW@[25; 31) \"unsafe\"\n-    err: `expected fn, trait or impl`\n   WHITESPACE@[31; 32) \" \"\n   FN_DEF@[32; 49)\n     CONST_KW@[32; 37) \"const\"\n@@ -37,3 +35,5 @@ SOURCE_FILE@[0; 50)\n       L_CURLY@[47; 48) \"{\"\n       R_CURLY@[48; 49) \"}\"\n   WHITESPACE@[49; 50) \"\\n\"\n+err: `expected fn, trait or impl`\n+err: `expected fn, trait or impl`"}, {"sha": "f31e12588e4405de73a4bda4c0a8cbe3f4e3fd93", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1cae59acf72f821343b2ba10ef69fb92a5b952/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=7a1cae59acf72f821343b2ba10ef69fb92a5b952", "patch": "@@ -8,7 +8,7 @@ use std::{\n };\n \n use test_utils::{project_dir, dir_tests, read_text, collect_tests};\n-use ra_syntax::{SourceFile, AstNode, fuzz};\n+use ra_syntax::{SourceFile, fuzz};\n \n #[test]\n fn lexer_tests() {\n@@ -21,26 +21,21 @@ fn lexer_tests() {\n #[test]\n fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], |text, path| {\n-        let file = SourceFile::parse(text);\n-        let errors = file.errors();\n+        let parse = SourceFile::parse(text);\n+        let errors = parse.errors.as_slice();\n         assert_eq!(\n-            &*errors,\n+            errors,\n             &[] as &[ra_syntax::SyntaxError],\n             \"There should be no errors in the file {:?}\",\n-            path.display()\n+            path.display(),\n         );\n-        file.syntax().debug_dump()\n+        parse.debug_dump()\n     });\n     dir_tests(&test_data_dir(), &[\"parser/err\", \"parser/inline/err\"], |text, path| {\n-        let file = SourceFile::parse(text);\n-        let errors = file.errors();\n-        assert_ne!(\n-            &*errors,\n-            &[] as &[ra_syntax::SyntaxError],\n-            \"There should be errors in the file {:?}\",\n-            path.display()\n-        );\n-        file.syntax().debug_dump()\n+        let parse = SourceFile::parse(text);\n+        let errors = parse.errors.as_slice();\n+        assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n+        parse.debug_dump()\n     });\n }\n \n@@ -83,9 +78,7 @@ fn self_hosting_parsing() {\n     {\n         count += 1;\n         let text = read_text(entry.path());\n-        let node = SourceFile::parse(&text);\n-        let errors = node.errors();\n-        assert_eq!(&*errors, &[], \"There should be no errors in the file {:?}\", entry);\n+        SourceFile::parse(&text).ok().expect(\"There should be no errors in the file\");\n     }\n     assert!(\n         count > 30,"}]}