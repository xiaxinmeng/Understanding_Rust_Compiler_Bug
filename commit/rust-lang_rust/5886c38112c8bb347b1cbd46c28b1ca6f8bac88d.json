{"sha": "5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODZjMzgxMTJjOGJiMzQ3YjFjYmQ0NmMyOGIxY2E2ZjhiYWM4OGQ=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2020-09-19T19:33:40Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2020-09-20T16:06:03Z"}, "message": "Replace unneeded `unsafe` calls to `.get()` with calls to `.get_mut()`", "tree": {"sha": "04dfeb868a19be6a6d953c8756242d0530a99bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04dfeb868a19be6a6d953c8756242d0530a99bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "html_url": "https://github.com/rust-lang/rust/commit/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81699895073162cd6731413711a4357dde67d661", "url": "https://api.github.com/repos/rust-lang/rust/commits/81699895073162cd6731413711a4357dde67d661", "html_url": "https://github.com/rust-lang/rust/commit/81699895073162cd6731413711a4357dde67d661"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "f60aa2d24c5cafd0599f933cd758f63f9dddf0dc", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "patch": "@@ -496,10 +496,7 @@ impl<T: ?Sized> Cell<T> {\n     #[inline]\n     #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n     pub fn get_mut(&mut self) -> &mut T {\n-        // SAFETY: This can cause data races if called from a separate thread,\n-        // but `Cell` is `!Sync` so this won't happen, and `&mut` guarantees\n-        // unique access.\n-        unsafe { &mut *self.value.get() }\n+        self.value.get_mut()\n     }\n \n     /// Returns a `&Cell<T>` from a `&mut T`\n@@ -945,8 +942,7 @@ impl<T: ?Sized> RefCell<T> {\n     #[inline]\n     #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n     pub fn get_mut(&mut self) -> &mut T {\n-        // SAFETY: `&mut` guarantees unique access.\n-        unsafe { &mut *self.value.get() }\n+        self.value.get_mut()\n     }\n \n     /// Undo the effect of leaked guards on the borrow state of the `RefCell`."}, {"sha": "c67d6422c01ec9f6dc107eae1b821eb35a7537d1", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "patch": "@@ -838,8 +838,7 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn get_mut(&mut self) -> &mut *mut T {\n-        // SAFETY: the mutable reference guarantees unique ownership.\n-        unsafe { &mut *self.p.get() }\n+        self.p.get_mut()\n     }\n \n     /// Get atomic access to a pointer.\n@@ -1275,8 +1274,7 @@ assert_eq!(some_var.load(Ordering::SeqCst), 5);\n                 #[inline]\n                 #[$stable_access]\n                 pub fn get_mut(&mut self) -> &mut $int_type {\n-                    // SAFETY: the mutable reference guarantees unique ownership.\n-                    unsafe { &mut *self.v.get() }\n+                    self.v.get_mut()\n                 }\n             }\n "}, {"sha": "71b29cf5af99b69bcad419b20cdf893a7953d22f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "patch": "@@ -315,6 +315,7 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(unsafe_cell_get_mut)]\n #![feature(unsafe_cell_raw_get)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]"}, {"sha": "a1703c731d44d3b0fbd5f673ddc37bccc37807c6", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "patch": "@@ -406,9 +406,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// ```\n     #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n-        // We know statically that there are no other references to `self`, so\n-        // there's no need to lock the inner mutex.\n-        let data = unsafe { &mut *self.data.get() };\n+        let data = self.data.get_mut();\n         poison::map_result(self.poison.borrow(), |_| data)\n     }\n }"}, {"sha": "d967779ce361de0bf1da126434cf518a7d02963b", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5886c38112c8bb347b1cbd46c28b1ca6f8bac88d/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=5886c38112c8bb347b1cbd46c28b1ca6f8bac88d", "patch": "@@ -404,9 +404,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// ```\n     #[stable(feature = \"rwlock_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n-        // We know statically that there are no other references to `self`, so\n-        // there's no need to lock the inner lock.\n-        let data = unsafe { &mut *self.data.get() };\n+        let data = self.data.get_mut();\n         poison::map_result(self.poison.borrow(), |_| data)\n     }\n }"}]}