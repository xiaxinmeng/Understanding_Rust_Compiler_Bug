{"sha": "c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "node_id": "C_kwDOAAsO6NoAKGMxYjFlYzdlMDcxYjBmMDg5ODU3ODdhOWE4OTdiZjc4YmMyODZlN2U", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-06-08T04:40:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T06:17:25Z"}, "message": "Suggest escaping `box` as identifier", "tree": {"sha": "1129b476321ddbc5270e1212648be803cf7f73b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1129b476321ddbc5270e1212648be803cf7f73b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "html_url": "https://github.com/rust-lang/rust/commit/c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b00252aeb77b10db04d65dc9e12ce758def4b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b00252aeb77b10db04d65dc9e12ce758def4b5", "html_url": "https://github.com/rust-lang/rust/commit/50b00252aeb77b10db04d65dc9e12ce758def4b5"}], "stats": {"total": 134, "additions": 126, "deletions": 8}, "files": [{"sha": "ca7915ed17a50fa0183e80f561990e5dbec74694", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "patch": "@@ -360,10 +360,7 @@ impl<'a> Parser<'a> {\n             let mutbl = self.parse_mutability();\n             self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n         } else if self.eat_keyword(kw::Box) {\n-            // Parse `box pat`\n-            let pat = self.parse_pat_with_range_pat(false, None)?;\n-            self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_token.span));\n-            PatKind::Box(pat)\n+            self.parse_pat_box()?\n         } else if self.check_inline_const(0) {\n             // Parse `const pat`\n             let const_expr = self.parse_const_block(lo.to(self.token.span), true)?;\n@@ -915,6 +912,62 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::TupleStruct(qself, path, fields))\n     }\n \n+    /// Are we sure this could not possibly be the start of a pattern?\n+    ///\n+    /// Currently, this only accounts for tokens that can follow identifiers\n+    /// in patterns, but this can be extended as necessary.\n+    fn isnt_pattern_start(&self) -> bool {\n+        [\n+            token::Eq,\n+            token::Colon,\n+            token::Comma,\n+            token::Semi,\n+            token::At,\n+            token::OpenDelim(Delimiter::Brace),\n+            token::CloseDelim(Delimiter::Brace),\n+            token::CloseDelim(Delimiter::Parenthesis),\n+        ]\n+        .contains(&self.token.kind)\n+    }\n+\n+    /// Parses `box pat`\n+    fn parse_pat_box(&mut self) -> PResult<'a, PatKind> {\n+        let box_span = self.prev_token.span;\n+\n+        if self.isnt_pattern_start() {\n+            self.struct_span_err(\n+                self.token.span,\n+                format!(\"expected pattern, found {}\", super::token_descr(&self.token)),\n+            )\n+            .span_note(box_span, \"`box` is a reserved keyword\")\n+            .span_suggestion_verbose(\n+                box_span.shrink_to_lo(),\n+                \"escape `box` to use it as an identifier\",\n+                \"r#\",\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n+\n+            // We cannot use `parse_pat_ident()` since it will complain `box`\n+            // is not an identifier.\n+            let sub = if self.eat(&token::At) {\n+                Some(self.parse_pat_no_top_alt(Some(\"binding pattern\"))?)\n+            } else {\n+                None\n+            };\n+\n+            Ok(PatKind::Ident(\n+                BindingMode::ByValue(Mutability::Not),\n+                Ident::new(kw::Box, box_span),\n+                sub,\n+            ))\n+        } else {\n+            let pat = self.parse_pat_with_range_pat(false, None)?;\n+            self.sess.gated_spans.gate(sym::box_patterns, box_span.to(self.prev_token.span));\n+            Ok(PatKind::Box(pat))\n+        }\n+    }\n+\n     /// Parses the fields of a struct-like pattern.\n     fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<PatField>, bool)> {\n         let mut fields = Vec::new();"}, {"sha": "2cf49b66be61c241c885e1dbece70c807f6c02fc", "filename": "src/test/ui/parser/keyword-box-as-identifier.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs?ref=c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "patch": "@@ -1,3 +1,10 @@\n fn main() {\n-    let box = \"foo\"; //~ error: expected pattern, found `=`\n+    let box = 0;\n+    //~^ ERROR expected pattern, found `=`\n+    let box: bool;\n+    //~^ ERROR expected pattern, found `:`\n+    let mut box = 0;\n+    //~^ ERROR expected pattern, found `=`\n+    let (box,) = (0,);\n+    //~^ ERROR expected pattern, found `,`\n }"}, {"sha": "eaa1f8003c53a7875e01950480d97c30cd4442bd", "filename": "src/test/ui/parser/keyword-box-as-identifier.stderr", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b1ec7e071b0f08985787a9a897bf78bc286e7e/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr?ref=c1b1ec7e071b0f08985787a9a897bf78bc286e7e", "patch": "@@ -1,8 +1,66 @@\n error: expected pattern, found `=`\n   --> $DIR/keyword-box-as-identifier.rs:2:13\n    |\n-LL |     let box = \"foo\";\n-   |             ^ expected pattern\n+LL |     let box = 0;\n+   |             ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:2:9\n+   |\n+LL |     let box = 0;\n+   |         ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let r#box = 0;\n+   |         ++\n+\n+error: expected pattern, found `:`\n+  --> $DIR/keyword-box-as-identifier.rs:4:12\n+   |\n+LL |     let box: bool;\n+   |            ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:4:9\n+   |\n+LL |     let box: bool;\n+   |         ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let r#box: bool;\n+   |         ++\n+\n+error: expected pattern, found `=`\n+  --> $DIR/keyword-box-as-identifier.rs:6:17\n+   |\n+LL |     let mut box = 0;\n+   |                 ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:6:13\n+   |\n+LL |     let mut box = 0;\n+   |             ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let mut r#box = 0;\n+   |             ++\n+\n+error: expected pattern, found `,`\n+  --> $DIR/keyword-box-as-identifier.rs:8:13\n+   |\n+LL |     let (box,) = (0,);\n+   |             ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:8:10\n+   |\n+LL |     let (box,) = (0,);\n+   |          ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let (r#box,) = (0,);\n+   |          ++\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n "}]}