{"sha": "9516e7b4b3ef82c2b2183e6d268c695ef5093fa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTZlN2I0YjNlZjgyYzJiMjE4M2U2ZDI2OGM2OTVlZjUwOTNmYTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-03T19:23:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-03T21:05:51Z"}, "message": "Revert \"rustc: Don't error out early when constructing a boxed trait.\"\n\nThis reverts commit 5e7ff924b5931bb90f381d2bf5936616224d4e85.", "tree": {"sha": "39262a8f089f1fcae5c455750d88812f25b0a3d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39262a8f089f1fcae5c455750d88812f25b0a3d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2", "html_url": "https://github.com/rust-lang/rust/commit/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33539e446d6f41d4a3296ed50a8f968e7950483", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33539e446d6f41d4a3296ed50a8f968e7950483", "html_url": "https://github.com/rust-lang/rust/commit/f33539e446d6f41d4a3296ed50a8f968e7950483"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "0c9440f3ec2a257b7a425f1c7334b1a2e4a11ab7", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9516e7b4b3ef82c2b2183e6d268c695ef5093fa2/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=9516e7b4b3ef82c2b2183e6d268c695ef5093fa2", "patch": "@@ -51,13 +51,8 @@ fn lookup_vtables(fcx: @fn_ctxt,\n             match *bound {\n               ty::bound_trait(i_ty) => {\n                 let i_ty = ty::subst(tcx, substs, i_ty);\n-                match lookup_vtable(fcx, expr, *ty, i_ty, allow_unsafe,\n-                                    is_early) {\n-                    None => {}\n-                    Some(vtable) => {\n-                        result.push(vtable);\n-                    }\n-                }\n+                result.push(lookup_vtable(fcx, expr, *ty, i_ty,\n+                                          allow_unsafe, is_early));\n               }\n               _ => ()\n             }\n@@ -96,7 +91,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                  trait_ty: ty::t,\n                  allow_unsafe: bool,\n                  is_early: bool)\n-    -> Option<vtable_origin>\n+    -> vtable_origin\n {\n \n     debug!(\"lookup_vtable(ty=%s, trait_ty=%s)\",\n@@ -118,7 +113,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n             // The type has unconstrained type variables in it, so we can't\n             // do early resolution on it. Return some completely bogus vtable\n             // information: we aren't storing it anyways.\n-            return Some(vtable_param(0, 0));\n+            return vtable_param(0, 0);\n         }\n     };\n \n@@ -140,7 +135,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                                            idid);\n                                     relate_trait_tys(fcx, expr,\n                                                      trait_ty, ity);\n-                                    return Some(vtable_param(n, n_bound));\n+                                    return vtable_param(n, n_bound);\n                                 }\n                             }\n                             _ => tcx.sess.impossible_case(\n@@ -175,7 +170,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                     }\n                 }\n             }\n-            return Some(vtable_trait(did, substs.tps));\n+            return vtable_trait(did, substs.tps);\n         }\n \n         _ => {\n@@ -308,7 +303,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                                 None => {\n                                     assert is_early;\n                                     // Bail out with a bogus answer\n-                                    return Some(vtable_param(0, 0));\n+                                    return vtable_param(0, 0);\n                                 }\n                             };\n \n@@ -346,20 +341,23 @@ fn lookup_vtable(fcx: @fn_ctxt,\n \n             match found.len() {\n                 0 => { /* fallthrough */ }\n-                1 => { return Some(found[0]); }\n+                1 => { return found[0]; }\n                 _ => {\n                     if !is_early {\n                         fcx.ccx.tcx.sess.span_err(\n                             expr.span,\n                             ~\"multiple applicable methods in scope\");\n                     }\n-                    return Some(found[0]);\n+                    return found[0];\n                 }\n             }\n         }\n     }\n \n-    return None;\n+    tcx.sess.span_fatal(\n+        expr.span,\n+        fmt!(\"failed to find an implementation of trait %s for %s\",\n+             ty_to_str(tcx, trait_ty), ty_to_str(tcx, ty)));\n }\n \n fn fixup_ty(fcx: @fn_ctxt,\n@@ -461,26 +459,13 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n             Look up vtables for the type we're casting to,\n             passing in the source and target type\n             */\n-            let ty = fcx.expr_ty(src);\n-            let vtable_opt = lookup_vtable(fcx, ex, ty, target_ty, true,\n-                                           is_early);\n-            match vtable_opt {\n-                None => {\n-                    fcx.tcx().sess.span_err(\n-                        ex.span,\n-                        fmt!(\"failed to find an implementation of trait %s \\\n-                              for %s\",\n-                             ty_to_str(fcx.tcx(), target_ty),\n-                             ty_to_str(fcx.tcx(), ty)));\n-                }\n-                Some(vtable) => {\n-                    /*\n-                    Map this expression to that vtable (that is: \"ex has\n-                    vtable <vtable>\")\n-                    */\n-                    if !is_early { cx.vtable_map.insert(ex.id, @~[vtable]); }\n-                }\n-            }\n+            let vtable = lookup_vtable(fcx, ex, fcx.expr_ty(src),\n+                                       target_ty, true, is_early);\n+            /*\n+            Map this expression to that vtable (that is: \"ex has\n+            vtable <vtable>\")\n+            */\n+            if !is_early { cx.vtable_map.insert(ex.id, @~[vtable]); }\n           }\n           _ => ()\n         }"}]}