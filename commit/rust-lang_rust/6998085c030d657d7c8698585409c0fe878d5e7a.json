{"sha": "6998085c030d657d7c8698585409c0fe878d5e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTgwODVjMDMwZDY1N2Q3Yzg2OTg1ODU0MDljMGZlODc4ZDVlN2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T17:36:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-29T17:19:58Z"}, "message": "Point at the trait item and tweak wording", "tree": {"sha": "01eb686a8c6a302c08bc1029ef466b79e0554233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01eb686a8c6a302c08bc1029ef466b79e0554233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6998085c030d657d7c8698585409c0fe878d5e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6998085c030d657d7c8698585409c0fe878d5e7a", "html_url": "https://github.com/rust-lang/rust/commit/6998085c030d657d7c8698585409c0fe878d5e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6998085c030d657d7c8698585409c0fe878d5e7a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "html_url": "https://github.com/rust-lang/rust/commit/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "565ba6b33b8c026424196c4867afcaefd06f9f38", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -6,11 +6,13 @@ use crate::infer::{ValuePairs, Subtype};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::util::common::ErrorReported;\n+use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n     pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorReported> {\n         if let Some(ref error) = self.error {\n+            debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n             if let RegionResolutionError::SubSupConflict(\n                 _,\n                 var_origin,\n@@ -27,10 +29,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ) = (&sub_trace.values, &sup_trace.values) {\n                             if sup_expected_found == sub_expected_found {\n                                 let sp = var_origin.span();\n+                                let impl_sp = if let CompareImplMethodObligation {\n+                                    trait_item_def_id, ..\n+                                } = &sub_trace.cause.code {\n+                                    Some(self.tcx().def_span(*trait_item_def_id))\n+                                } else {\n+                                    None\n+                                };\n                                 self.emit_err(\n                                     sp,\n                                     sub_expected_found.expected,\n                                     sub_expected_found.found,\n+                                    impl_sp,\n                                 );\n                                 return Some(ErrorReported);\n                             }\n@@ -43,14 +53,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>) {\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Option<Span>) {\n         let mut err = self.tcx().sess.struct_span_err(\n             sp,\n             \"`impl` item signature doesn't match `trait` item signature\",\n         );\n-        err.note(&format!(\"expected: {:?}\\n   found: {:?}\", expected, found));\n+        err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n         err.span_label(sp, &format!(\"found {:?}\", found));\n-        // FIXME: recover the `FnPtr`'s `HirId`/`Node` to point to it.\n+        if let Some(span) = impl_sp {\n+            err.span_label(span, &format!(\"expected {:?}\", expected));\n+        }\n         err.emit();\n     }\n }"}, {"sha": "1b524ec3833e88cebc84ae51b285c2fb842ecd44", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -6,9 +6,9 @@ struct Struct;\n impl Deref for Struct {\n     type Target = dyn Trait;\n     fn deref(&self) -> &dyn Trait {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n         unimplemented!();\n     }\n }\n-//~^^^^ ERROR `impl` item signature doesn't match `trait` item signature\n \n fn main() {}"}, {"sha": "c1c4ec9ed7b923e537c19826adc07aa13ffde67b", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -3,10 +3,14 @@ error: `impl` item signature doesn't match `trait` item signature\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait\n+   | \n+  ::: $SRC_DIR/libcore/ops/deref.rs:LL:COL\n    |\n-   = note: expected: fn(&Struct) -> &(dyn Trait + 'static)\n-              found: fn(&Struct) -> &dyn Trait\n+LL |     fn deref(&self) -> &Self::Target;\n+   |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n+   |\n+   = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n+              found `fn(&Struct) -> &dyn Trait`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "bc302e91c1c518f0b0075ea0d4646c083796a79a", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -1,11 +1,14 @@\n error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n+LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n+   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n-   = note: expected: fn(&i32, &'a u32, &u32) -> &'a u32\n-              found: fn(&i32, &u32, &u32) -> &u32\n+   = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n+              found `fn(&i32, &u32, &u32) -> &u32`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9\n@@ -19,4 +22,3 @@ LL |         x\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "d07f305954b6e247d2af1b2f25b5e312d961fe56", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -1,11 +1,14 @@\n error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n    |\n+LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n+   |     ------------------------------------------- expected fn(&i32, &'a i32) -> &'a i32\n+...\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n    |\n-   = note: expected: fn(&i32, &'a i32) -> &'a i32\n-              found: fn(&i32, &i32) -> &i32\n+   = note: expected `fn(&i32, &'a i32) -> &'a i32`\n+              found `fn(&i32, &i32) -> &i32`\n \n error: aborting due to previous error\n "}, {"sha": "887edc7299375e366468557daec0dbdd2261af69", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6998085c030d657d7c8698585409c0fe878d5e7a/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=6998085c030d657d7c8698585409c0fe878d5e7a", "patch": "@@ -95,10 +95,10 @@ error: `impl` item signature doesn't match `trait` item signature\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found W<'_, '_>\n    |\n-   = note: expected: W<'l1, 'l2>\n-              found: W<'_, '_>\n+   = note: expected `W<'l1, 'l2>`\n+              found `W<'_, '_>`\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n+Some errors have detailed explanations: E0308, E0366, E0367.\n For more information about an error, try `rustc --explain E0308`."}]}