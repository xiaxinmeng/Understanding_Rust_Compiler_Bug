{"sha": "b7a9d4ea744c9a99952bc4576727b57c58c0e958", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTlkNGVhNzQ0YzlhOTk5NTJiYzQ1NzY3MjdiNTdjNThjMGU5NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T01:09:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T01:09:25Z"}, "message": "Auto merge of #50836 - jsgf:arc-downcast, r=SimonSapin\n\nArc downcast\n\nImplement `downcast` for `Arc<Any + Send + Sync>` as part of #44608, and gated by the same `rc_downcast` feature.\n\nThis PR is mostly lightly-edited cut'n'paste.\n\nThis has two additional changes:\n- The `downcast` implementation needs `Any + Send + Sync` implementations for `is` and `Debug`, and I added `downcast_ref` and `downcast_mut` for completeness/consistency. (Can these be insta-stabilized?)\n- At @SimonSapin's suggestion, I converted `Arc` and `Rc` to use `NonNull::cast` to avoid an `unsafe` block in each which tidied things up nicely.", "tree": {"sha": "eb6581b24d1cbb2e9e2bde8c4d9e3b0b403ee6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6581b24d1cbb2e9e2bde8c4d9e3b0b403ee6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a9d4ea744c9a99952bc4576727b57c58c0e958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9d4ea744c9a99952bc4576727b57c58c0e958", "html_url": "https://github.com/rust-lang/rust/commit/b7a9d4ea744c9a99952bc4576727b57c58c0e958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9d4ea744c9a99952bc4576727b57c58c0e958/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "html_url": "https://github.com/rust-lang/rust/commit/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb"}, {"sha": "87c3d7bee52fb99f922c77fa267729b7898bc9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c3d7bee52fb99f922c77fa267729b7898bc9a6", "html_url": "https://github.com/rust-lang/rust/commit/87c3d7bee52fb99f922c77fa267729b7898bc9a6"}], "stats": {"total": 163, "additions": 153, "deletions": 10}, "files": [{"sha": "4026b3ababa31edcdef37e140e16c1aaba064237", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=b7a9d4ea744c9a99952bc4576727b57c58c0e958", "patch": "@@ -16,6 +16,7 @@\n //!\n //! [arc]: struct.Arc.html\n \n+use core::any::Any;\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n@@ -971,6 +972,44 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     }\n }\n \n+impl Arc<Any + Send + Sync> {\n+    #[inline]\n+    #[unstable(feature = \"rc_downcast\", issue = \"44608\")]\n+    /// Attempt to downcast the `Arc<Any + Send + Sync>` to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_downcast)]\n+    /// use std::any::Any;\n+    /// use std::sync::Arc;\n+    ///\n+    /// fn print_if_string(value: Arc<Any + Send + Sync>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Arc::new(my_string));\n+    ///     print_if_string(Arc::new(0i8));\n+    /// }\n+    /// ```\n+    pub fn downcast<T>(self) -> Result<Arc<T>, Self>\n+    where\n+        T: Any + Send + Sync + 'static,\n+    {\n+        if (*self).is::<T>() {\n+            let ptr = self.ptr.cast::<ArcInner<T>>();\n+            mem::forget(self);\n+            Ok(Arc { ptr, phantom: PhantomData })\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n     /// it. Calling [`upgrade`] on the return value always gives [`None`].\n@@ -1844,6 +1883,26 @@ mod tests {\n \n         assert_eq!(&r[..], [1, 2, 3]);\n     }\n+\n+    #[test]\n+    fn test_downcast() {\n+        use std::any::Any;\n+\n+        let r1: Arc<Any + Send + Sync> = Arc::new(i32::max_value());\n+        let r2: Arc<Any + Send + Sync> = Arc::new(\"abc\");\n+\n+        assert!(r1.clone().downcast::<u32>().is_err());\n+\n+        let r1i32 = r1.downcast::<i32>();\n+        assert!(r1i32.is_ok());\n+        assert_eq!(r1i32.unwrap(), Arc::new(i32::max_value()));\n+\n+        assert!(r2.clone().downcast::<i32>().is_err());\n+\n+        let r2str = r2.downcast::<&'static str>();\n+        assert!(r2str.is_ok());\n+        assert_eq!(r2str.unwrap(), Arc::new(\"abc\"));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "553c8b5ca3280ddcbc3a7ff41d2a3824a1dda903", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b7a9d4ea744c9a99952bc4576727b57c58c0e958", "patch": "@@ -644,15 +644,9 @@ impl Rc<Any> {\n     /// ```\n     pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<Any>> {\n         if (*self).is::<T>() {\n-            // avoid the pointer arithmetic in from_raw\n-            unsafe {\n-                let raw: *const RcBox<Any> = self.ptr.as_ptr();\n-                forget(self);\n-                Ok(Rc {\n-                    ptr: NonNull::new_unchecked(raw as *const RcBox<T> as *mut _),\n-                    phantom: PhantomData,\n-                })\n-            }\n+            let ptr = self.ptr.cast::<RcBox<T>>();\n+            forget(self);\n+            Ok(Rc { ptr, phantom: PhantomData })\n         } else {\n             Err(self)\n         }"}, {"sha": "4437c36c15a5be0b7d4040c531c600c2ae44edc2", "filename": "src/libcore/any.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d4ea744c9a99952bc4576727b57c58c0e958/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=b7a9d4ea744c9a99952bc4576727b57c58c0e958", "patch": "@@ -136,6 +136,13 @@ impl fmt::Debug for Any + Send {\n     }\n }\n \n+#[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+impl fmt::Debug for Any + Send + Sync {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Any\")\n+    }\n+}\n+\n impl Any {\n     /// Returns `true` if the boxed type is the same as `T`.\n     ///\n@@ -301,7 +308,7 @@ impl Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut (Any+ Send)) {\n+    /// fn modify_if_u32(s: &mut (Any + Send)) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }\n@@ -325,6 +332,89 @@ impl Any+Send {\n     }\n }\n \n+impl Any+Send+Sync {\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn is_string(s: &(Any + Send + Sync)) {\n+    ///     if s.is::<String>() {\n+    ///         println!(\"It's a string!\");\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     is_string(&0);\n+    ///     is_string(&\"cookie monster\".to_string());\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn is<T: Any>(&self) -> bool {\n+        Any::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(s: &(Any + Send + Sync)) {\n+    ///     if let Some(string) = s.downcast_ref::<String>() {\n+    ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     print_if_string(&0);\n+    ///     print_if_string(&\"cookie monster\".to_string());\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n+        Any::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn modify_if_u32(s: &mut (Any + Send + Sync)) {\n+    ///     if let Some(num) = s.downcast_mut::<u32>() {\n+    ///         *num = 42;\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut x = 10u32;\n+    ///     let mut s = \"starlord\".to_string();\n+    ///\n+    ///     modify_if_u32(&mut x);\n+    ///     modify_if_u32(&mut s);\n+    ///\n+    ///     assert_eq!(x, 42);\n+    ///     assert_eq!(&s, \"starlord\");\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n+        Any::downcast_mut::<T>(self)\n+    }\n+}\n \n ///////////////////////////////////////////////////////////////////////////////\n // TypeID and its methods"}]}