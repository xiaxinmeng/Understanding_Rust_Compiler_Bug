{"sha": "c6a9e28842b0e8ae675b552b742312a9ffa60120", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTllMjg4NDJiMGU4YWU2NzViNTUyYjc0MjMxMmE5ZmZhNjAxMjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-23T00:34:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:53Z"}, "message": "librustc: Rename `reinterpret_cast` to `transmute_copy` and remove the intrinsic", "tree": {"sha": "c5e71fd3c516d824b49776b63f1233c9ecf0572d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e71fd3c516d824b49776b63f1233c9ecf0572d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a9e28842b0e8ae675b552b742312a9ffa60120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a9e28842b0e8ae675b552b742312a9ffa60120", "html_url": "https://github.com/rust-lang/rust/commit/c6a9e28842b0e8ae675b552b742312a9ffa60120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a9e28842b0e8ae675b552b742312a9ffa60120/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6277f8140a496bed371e97ea1e260858e77fb41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6277f8140a496bed371e97ea1e260858e77fb41", "html_url": "https://github.com/rust-lang/rust/commit/b6277f8140a496bed371e97ea1e260858e77fb41"}], "stats": {"total": 176, "additions": 79, "deletions": 97}, "files": [{"sha": "9f59f1d8fe48db839ddcaf37696ee1ab78daf51e", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -185,7 +185,7 @@ pub mod traits {}\n \n pub mod raw {\n     use at_vec::{capacity, rustrt};\n-    use cast::transmute;\n+    use cast::{transmute, transmute_copy};\n     use libc;\n     use ptr;\n     use sys;\n@@ -211,12 +211,11 @@ pub mod raw {\n \n     #[inline(always)]\n     pub unsafe fn push<T>(v: &mut @[T], initval: T) {\n-        let repr: **VecRepr = ::cast::reinterpret_cast(&v);\n+        let repr: **VecRepr = transmute_copy(&v);\n         let fill = (**repr).unboxed.fill;\n         if (**repr).unboxed.alloc > fill {\n             push_fast(v, initval);\n-        }\n-        else {\n+        } else {\n             push_slow(v, initval);\n         }\n     }"}, {"sha": "0c960d4a3088fa9bc4d501173a7256391c40f5fb", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -36,11 +36,19 @@ pub unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n     rusti::reinterpret_cast(*src)\n }\n \n+/// Unsafely copies and casts the value at `src` to U, even if the value is\n+/// noncopyable. The two types must have the same length.\n+#[inline(always)]\n+#[cfg(stage0)]\n+pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    rusti::reinterpret_cast(*src)\n+}\n+\n #[inline(always)]\n #[cfg(stage1)]\n #[cfg(stage2)]\n #[cfg(stage3)]\n-pub unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n+pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     let mut dest: U = unstable::intrinsics::init();\n     {\n         let dest_ptr: *mut u8 = rusti::transmute(&mut dest);\n@@ -148,11 +156,20 @@ pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n \n #[cfg(test)]\n mod tests {\n-    use cast::{bump_box_refcount, reinterpret_cast, transmute};\n+    use cast::{bump_box_refcount, transmute};\n \n     #[test]\n+    #[cfg(stage0)]\n     fn test_reinterpret_cast() {\n-        assert!(1u == unsafe { reinterpret_cast(&1) });\n+        assert!(1u == unsafe { ::cast::reinterpret_cast(&1) });\n+    }\n+\n+    #[test]\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    fn test_transmute_copy() {\n+        assert!(1u == unsafe { ::cast::transmute_copy(&1) });\n     }\n \n     #[test]"}, {"sha": "7364e50cc0409cd310bcb1ceb64582cdea1aa931", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -82,7 +82,7 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n-use cast::{forget, reinterpret_cast, transmute};\n+use cast::{forget, transmute, transmute_copy};\n use either::{Either, Left, Right};\n use kinds::Owned;\n use libc;\n@@ -131,7 +131,7 @@ pub struct PacketHeader {\n     mut state: State,\n     mut blocked_task: *rust_task,\n \n-    // This is a reinterpret_cast of a ~buffer, that can also be cast\n+    // This is a transmute_copy of a ~buffer, that can also be cast\n     // to a buffer_header if need be.\n     mut buffer: *libc::c_void,\n }\n@@ -170,12 +170,12 @@ pub impl PacketHeader {\n     // thing. You'll proobably want to forget them when you're done.\n     unsafe fn buf_header(&self) -> ~BufferHeader {\n         assert!(self.buffer.is_not_null());\n-        reinterpret_cast(&self.buffer)\n+        transmute_copy(&self.buffer)\n     }\n \n     fn set_buffer<T:Owned>(&self, b: ~Buffer<T>) {\n         unsafe {\n-            self.buffer = reinterpret_cast(&b);\n+            self.buffer = transmute_copy(&b);\n         }\n     }\n }\n@@ -211,7 +211,7 @@ fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     };\n \n     unsafe {\n-        b.data.header.buffer = reinterpret_cast(&b);\n+        b.data.header.buffer = transmute_copy(&b);\n     }\n     b\n }\n@@ -229,7 +229,7 @@ pub fn entangle_buffer<T:Owned,Tstart:Owned>(\n     init: &fn(*libc::c_void, x: &T) -> *Packet<Tstart>)\n     -> (SendPacketBuffered<Tstart, T>, RecvPacketBuffered<Tstart, T>)\n {\n-    let p = init(unsafe { reinterpret_cast(&buffer) }, &buffer.data);\n+    let p = init(unsafe { transmute_copy(&buffer) }, &buffer.data);\n     unsafe { forget(buffer) }\n     (SendPacketBuffered(p), RecvPacketBuffered(p))\n }"}, {"sha": "86b36834bbd6e6c51f689523c7eee76ed20145aa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -119,7 +119,7 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n /**\n   Transform a region pointer - &T - to an unsafe pointer - *T.\n   This is safe, but is implemented with an unsafe block due to\n-  reinterpret_cast.\n+  transmute.\n */\n #[inline(always)]\n pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n@@ -129,7 +129,7 @@ pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n /**\n   Transform a const region pointer - &const T - to a const unsafe pointer -\n   *const T. This is safe, but is implemented with an unsafe block due to\n-  reinterpret_cast.\n+  transmute.\n */\n #[inline(always)]\n pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n@@ -139,7 +139,7 @@ pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n /**\n   Transform a mutable region pointer - &mut T - to a mutable unsafe pointer -\n   *mut T. This is safe, but is implemented with an unsafe block due to\n-  reinterpret_cast.\n+  transmute.\n */\n #[inline(always)]\n pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n@@ -149,7 +149,7 @@ pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n /**\n   Cast a region pointer - &T - to a uint.\n   This is safe, but is implemented with an unsafe block due to\n-  reinterpret_cast.\n+  transmute.\n \n   (I couldn't think of a cutesy name for this one.)\n */"}, {"sha": "4c0d9fc46065bb1cbcdc7a672f0e3531488e2d34", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -154,8 +154,8 @@ pub fn pref_align_of_val<T>(_val: &T) -> uint {\n #[inline(always)]\n pub fn refcount<T>(t: @T) -> uint {\n     unsafe {\n-        let ref_ptr: *uint = cast::reinterpret_cast(&t);\n-        *ref_ptr - 1\n+        let ref_ptr: *uint = cast::transmute(t);\n+        *ref_ptr\n     }\n }\n "}, {"sha": "67bc3adeb41c0c61f5055c9d3bc4e153d7b799a4", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -59,9 +59,7 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n     let map_ptr = rt::rust_get_task_local_data(task);\n     if map_ptr.is_null() {\n         let map: TaskLocalMap = @mut ~[];\n-        // Use reinterpret_cast -- transmute would take map away from us also.\n-        rt::rust_set_task_local_data(\n-            task, cast::transmute(map));\n+        rt::rust_set_task_local_data(task, cast::transmute(map));\n         rt::rust_task_local_data_atexit(task, cleanup_task_local_map);\n         // Also need to reference it an extra time to keep it for now.\n         let nonmut = cast::transmute::<TaskLocalMap,\n@@ -77,12 +75,10 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n     }\n }\n \n-unsafe fn key_to_key_value<T:Durable>(\n-    key: LocalDataKey<T>) -> *libc::c_void {\n-\n+unsafe fn key_to_key_value<T:Durable>(key: LocalDataKey<T>) -> *libc::c_void {\n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n-    let pair: (*libc::c_void, *libc::c_void) = cast::reinterpret_cast(&key);\n+    let pair: (*libc::c_void, *libc::c_void) = cast::transmute_copy(&key);\n     pair.first()\n }\n "}, {"sha": "b58429a10aad58fbe15e449332b145810589368d", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -47,6 +47,7 @@ pub extern \"rust-intrinsic\" {\n     pub fn forget<T>(_: T) -> ();\n \n     // XXX: intrinsic uses legacy modes\n+    #[cfg(stage0)]\n     fn reinterpret_cast<T,U>(&&src: T) -> U;\n \n     pub fn needs_drop<T>() -> bool;"}, {"sha": "98caaa81416f23c519c49dc003cc18242f130947", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -716,35 +716,6 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             }\n         }\n         ~\"forget\" => {}\n-        ~\"reinterpret_cast\" => {\n-            let tp_ty = substs.tys[0];\n-            let lltp_ty = type_of::type_of(ccx, tp_ty);\n-            let llout_ty = type_of::type_of(ccx, substs.tys[1]);\n-            let tp_sz = machine::llbitsize_of_real(ccx, lltp_ty),\n-            out_sz = machine::llbitsize_of_real(ccx, llout_ty);\n-          if tp_sz != out_sz {\n-              let sp = match *ccx.tcx.items.get(&ref_id.get()) {\n-                  ast_map::node_expr(e) => e.span,\n-                  _ => fail!(~\"reinterpret_cast or forget has non-expr arg\")\n-              };\n-              ccx.sess.span_fatal(\n-                  sp, fmt!(\"reinterpret_cast called on types \\\n-                            with different size: %s (%u bit(s)) to %s \\\n-                            (%u bit(s))\",\n-                           ty_to_str(ccx.tcx, tp_ty), tp_sz,\n-                           ty_to_str(ccx.tcx, substs.tys[1]), out_sz));\n-          }\n-          if !ty::type_is_nil(substs.tys[1]) {\n-              // NB: Do not use a Load and Store here. This causes\n-              // massive code bloat when reinterpret_cast is used on\n-              // large structural types.\n-              let llretptr = fcx.llretptr.get();\n-              let llretptr = PointerCast(bcx, llretptr, T_ptr(T_i8()));\n-              let llcast = get_param(decl, first_real_arg);\n-              let llcast = PointerCast(bcx, llcast, T_ptr(T_i8()));\n-              call_memcpy(bcx, llretptr, llcast, llsize_of(ccx, lltp_ty));\n-          }\n-        }\n         ~\"transmute\" => {\n             let (in_type, out_type) = (substs.tys[0], substs.tys[1]);\n             let llintype = type_of::type_of(ccx, in_type);"}, {"sha": "3ec467921c6bc862578cc8c2f76f81548702ca3e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -122,9 +122,9 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                                  _) => {\n         if abi.is_intrinsic() {\n             let flags = match *cx.ccx.sess.str_of(i.ident) {\n-                ~\"size_of\"  | ~\"pref_align_of\"    | ~\"min_align_of\" |\n-                ~\"init\"     | ~\"reinterpret_cast\" | ~\"transmute\"    |\n-                ~\"move_val\" | ~\"move_val_init\" => use_repr,\n+                ~\"size_of\"  | ~\"pref_align_of\" | ~\"min_align_of\" |\n+                ~\"init\"     | ~\"transmute\"     | ~\"move_val\"     |\n+                ~\"move_val_init\" => use_repr,\n \n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,\n "}, {"sha": "4fad5b15ff6d67a150281e874ba765a3faa9b1fa", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -3439,8 +3439,6 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n       ~\"init\" => (1u, ~[], param(ccx, 0u)),\n       ~\"forget\" => (1u, ~[arg(ast::by_copy, param(ccx, 0u))],\n                     ty::mk_nil()),\n-      ~\"reinterpret_cast\" => (2u, ~[arg(ast::by_ref, param(ccx, 0u))],\n-                              param(ccx, 1u)),\n       ~\"transmute\" => (2, ~[arg(ast::by_copy, param(ccx, 0))], param(ccx, 1)),\n       ~\"move_val\" | ~\"move_val_init\" => {\n           (1u, ~[arg(ast::by_copy,"}, {"sha": "c03261816ef31fe279566662b07bdba18e49e389", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -13,7 +13,7 @@\n // the error points to the start of the file, not the line with the\n // transmute\n \n-// error-pattern: reinterpret_cast called on types with different size\n+// error-pattern: transmute called on types with different size\n \n #[packed]\n struct Foo<T,S> {"}, {"sha": "cad78f9e5d1f580292afb14960ea166e88890da4", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -13,7 +13,7 @@\n // the error points to the start of the file, not the line with the\n // transmute\n \n-// error-pattern: reinterpret_cast called on types with different size\n+// error-pattern: transmute called on types with different size\n \n #[packed]\n struct Foo {"}, {"sha": "d5d54ade4443a991819b1d4b97ce358ef0a58b8b", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -21,7 +21,7 @@ struct r {\n impl Drop for r {\n     fn finalize(&self) {\n         unsafe {\n-            let _v2: ~int = cast::reinterpret_cast(&self.v);\n+            let _v2: ~int = cast::transmute(self.v);\n         }\n     }\n }\n@@ -35,7 +35,7 @@ fn r(v: *int) -> r {\n fn main() {\n     unsafe {\n         let i1 = ~0;\n-        let i1p = cast::reinterpret_cast(&i1);\n+        let i1p = cast::transmute_copy(&i1);\n         cast::forget(i1);\n         let x = @r(i1p);\n         failfn();"}, {"sha": "e7624c9e3b939f33f3100ad7e9127de816ed01ac", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -64,9 +64,9 @@ fn test_box() {\n \n fn test_ptr() {\n     unsafe {\n-        let p1: *u8 = ::core::cast::reinterpret_cast(&0);\n-        let p2: *u8 = ::core::cast::reinterpret_cast(&0);\n-        let p3: *u8 = ::core::cast::reinterpret_cast(&1);\n+        let p1: *u8 = ::core::cast::transmute(0);\n+        let p2: *u8 = ::core::cast::transmute(0);\n+        let p3: *u8 = ::core::cast::transmute(1);\n \n         assert!(p1 == p2);\n         assert!(p1 != p3);\n@@ -107,8 +107,8 @@ fn test_class() {\n   \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (::core::cast::reinterpret_cast::<*p, uint>(& &q)),\n-         (::core::cast::reinterpret_cast::<*p, uint>(& &r)));\n+         (::core::cast::transmute::<*p, uint>(&q)),\n+         (::core::cast::transmute::<*p, uint>(&r)));\n   }\n   assert!((q == r));\n   r.y = 17;"}, {"sha": "8883e50622f44bdeb5a9e80e8c7e56bef2ad221f", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -14,7 +14,7 @@ fn addr_of<T>(ptr: &T) -> uint {\n }\n \n fn is_aligned<T>(ptr: &T) -> bool {\n-    (to_unsafe_ptr(ptr) % sys::min_align_of::<T>()) == 0\n+    (ptr::to_unsafe_ptr(ptr) % sys::min_align_of::<T>()) == 0\n }\n \n pub fn main() {"}, {"sha": "d63e01ec396078af040907e635377206ea8f8d4b", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -16,7 +16,7 @@ use core::f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int {\n     unsafe {\n-        cast::reinterpret_cast(&v)\n+        cast::transmute_copy(&v)\n     }\n }\n "}, {"sha": "5a125ef9e0f649177a47a2fe7e0d910be0650291", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -25,8 +25,8 @@ struct Ccx {\n \n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n-        return cast::reinterpret_cast(\n-            &libc::malloc(sys::size_of::<Bcx<'blk>>() as libc::size_t));\n+        cast::transmute(libc::malloc(sys::size_of::<Bcx<'blk>>()\n+            as libc::size_t));\n     }\n }\n \n@@ -38,7 +38,7 @@ fn g(fcx : &Fcx) {\n     let bcx = Bcx { fcx: fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n-        libc::free(cast::reinterpret_cast(&bcx2));\n+        libc::free(cast::transmute(bcx2));\n     }\n }\n "}, {"sha": "fdb8c2a496c6b6be368602372cb716b9cde16d37", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -18,10 +18,10 @@ impl Drop for r {\n     fn finalize(&self) {\n         unsafe {\n             debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n-              cast::reinterpret_cast::<*r, uint>(&self),\n-              cast::reinterpret_cast::<**int, uint>(& &(self.v)),\n-              cast::reinterpret_cast::<*int, uint>(&self.v));\n-            let v2: ~int = cast::reinterpret_cast(&self.v);\n+              cast::transmute::<*r, uint>(self),\n+              cast::transmute::<**int, uint>(&(self.v)),\n+              cast::transmute::<*int, uint>(self.v));\n+            let v2: ~int = cast::transmute(self.v);\n         }\n     }\n }\n@@ -44,36 +44,36 @@ struct Node {\n pub fn main() {\n     unsafe {\n         let i1 = ~0;\n-        let i1p = cast::reinterpret_cast(&i1);\n+        let i1p = cast::transmute_copy(&i1);\n         cast::forget(i1);\n         let i2 = ~0;\n-        let i2p = cast::reinterpret_cast(&i2);\n+        let i2p = cast::transmute_copy(&i2);\n         cast::forget(i2);\n \n         let mut x1 = @mut t(Node{\n             next: None,\n               r: {\n               let rs = r(i1p);\n-              debug!(\"r = %x\", cast::reinterpret_cast::<*r, uint>(& &rs));\n+              debug!(\"r = %x\", cast::transmute::<*r, uint>(&rs));\n               rs }\n         });\n         \n         debug!(\"x1 = %x, x1.r = %x\",\n-            cast::reinterpret_cast::<@mut t, uint>(&x1),\n-            cast::reinterpret_cast::<*r, uint>(& &(x1.r)));\n+               cast::transmute::<@mut t, uint>(x1),\n+               cast::transmute::<*r, uint>(&x1.r));\n \n         let mut x2 = @mut t(Node{\n             next: None,\n               r: {\n               let rs = r(i2p);\n-              debug!(\"r2 = %x\", cast::reinterpret_cast::<*r, uint>(& &rs));\n+              debug!(\"r2 = %x\", cast::transmute::<*r, uint>(&rs));\n               rs\n                 }\n         });\n         \n         debug!(\"x2 = %x, x2.r = %x\",\n-               cast::reinterpret_cast::<@mut t, uint>(&x2),\n-               cast::reinterpret_cast::<*r, uint>(& &(x2.r)));\n+               cast::transmute::<@mut t, uint>(x2),\n+               cast::transmute::<*r, uint>(&(x2.r)));\n \n         x1.next = Some(x2);\n         x2.next = Some(x1);"}, {"sha": "2a59d4d2190d18d27d88c87fe110a2995a41dbda", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -23,7 +23,7 @@ struct r {\n impl Drop for r {\n     fn finalize(&self) {\n         unsafe {\n-            let v2: ~int = cast::reinterpret_cast(&self.v.c);\n+            let v2: ~int = cast::transmute(self.v.c);\n         }\n     }\n }\n@@ -44,10 +44,10 @@ struct Node {\n pub fn main() {\n     unsafe {\n         let i1 = ~0xA;\n-        let i1p = cast::reinterpret_cast(&i1);\n+        let i1p = cast::transmute_copy(&i1);\n         cast::forget(i1);\n         let i2 = ~0xA;\n-        let i2p = cast::reinterpret_cast(&i2);\n+        let i2p = cast::transmute_copy(&i2);\n         cast::forget(i2);\n \n         let u1 = U {a: 0xB, b: 0xC, c: i1p};"}, {"sha": "0d699a6e49b6c284b1036dca494c44169700e50b", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -27,8 +27,8 @@ struct R {\n impl Drop for R {\n     fn finalize(&self) {\n         unsafe {\n-            let _v2: ~int = cast::reinterpret_cast(&self.v.c);\n-            // let _v3: ~int = unsafe::reinterpret_cast(self.x);\n+            let _v2: ~int = cast::transmute(self.v.c);\n+            // let _v3: ~int = cast::transmute_copy(self.x);\n         }\n     }\n }\n@@ -38,7 +38,7 @@ fn r(v: U, w: int, _x: *int) -> R {\n         R {\n             v: v,\n             w: w,\n-            x: cast::reinterpret_cast(&0)\n+            x: cast::transmute(0)\n         }\n     }\n }\n@@ -53,10 +53,10 @@ struct Node {\n pub fn main() { \n     unsafe {\n         let i1 = ~0xA;\n-        let i1p = cast::reinterpret_cast(&i1);\n+        let i1p = cast::transmute_copy(&i1);\n         cast::forget(i1);\n         let i2 = ~0xA;\n-        let i2p = cast::reinterpret_cast(&i2);\n+        let i2p = cast::transmute_copy(&i2);\n         cast::forget(i2);\n \n         let u1 = U {a: 0xB, b: 0xC, c: i1p};"}, {"sha": "e7dd240eb184ce70efee03daa0a7abf113b00ce4", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -48,7 +48,7 @@ pub fn main() {\n                 ch.send(());\n             }\n         };\n-        let fptr = cast::reinterpret_cast(& &f);\n+        let fptr = cast::transmute(&f);\n         rustrt::start_task(new_task_id, fptr);\n         cast::forget(f);\n         po.recv();"}, {"sha": "0806f1ea92aecd0c930406a43f21519ca8caefcc", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n }\n \n fn test_color(color: color, val: int, name: ~str) {\n-    //assert!(unsafe::reinterpret_cast(color) == val);\n+    //assert!(unsafe::transmute(color) == val);\n     assert!(color as int == val);\n     assert!(color as float == val as float);\n     assert!(get_color_alt(color) == name);"}, {"sha": "820d42ab14d572783c860e788dcd343b04065e19", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a9e28842b0e8ae675b552b742312a9ffa60120/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=c6a9e28842b0e8ae675b552b742312a9ffa60120", "patch": "@@ -15,7 +15,7 @@ extern mod std;\n \n fn null<T>() -> *T {\n     unsafe {\n-        cast::reinterpret_cast(&0)\n+        cast::transmute(0)\n     }\n }\n "}]}