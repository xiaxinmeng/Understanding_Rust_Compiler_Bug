{"sha": "a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzJkMGZmZmFhZjBiNzY0YzAxYmM0MDY2ZTUxZmZkNDc1Y2VhZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-29T06:32:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-29T06:32:24Z"}, "message": "Auto merge of #52764 - sinkuu:cleanup, r=nikomatsakis\n\nMisc cleanups", "tree": {"sha": "5255142d5e3a48744db52d110ca90950724d69a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5255142d5e3a48744db52d110ca90950724d69a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "html_url": "https://github.com/rust-lang/rust/commit/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0653e40289eecf32f3fac1e84fc69b815ce5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0653e40289eecf32f3fac1e84fc69b815ce5cb", "html_url": "https://github.com/rust-lang/rust/commit/fb0653e40289eecf32f3fac1e84fc69b815ce5cb"}, {"sha": "e995a91a314da7df85f5471cbc621874b5d42b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/e995a91a314da7df85f5471cbc621874b5d42b53", "html_url": "https://github.com/rust-lang/rust/commit/e995a91a314da7df85f5471cbc621874b5d42b53"}], "stats": {"total": 123, "additions": 50, "deletions": 73}, "files": [{"sha": "3ad694e38adb082743d80045ebd0c08ba87f3fad", "filename": "src/libcore/tests/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iter;\n use core::num::dec2flt::parse::{Decimal, parse_decimal};\n use core::num::dec2flt::parse::ParseResult::{Valid, Invalid};\n \n@@ -46,7 +45,7 @@ fn valid() {\n     assert_eq!(parse_decimal(\"1.e300\"), Valid(Decimal::new(b\"1\", b\"\", 300)));\n     assert_eq!(parse_decimal(\".1e300\"), Valid(Decimal::new(b\"\", b\"1\", 300)));\n     assert_eq!(parse_decimal(\"101e-33\"), Valid(Decimal::new(b\"101\", b\"\", -33)));\n-    let zeros: String = iter::repeat('0').take(25).collect();\n+    let zeros = \"0\".repeat(25);\n     let s = format!(\"1.5e{}\", zeros);\n     assert_eq!(parse_decimal(&s), Valid(Decimal::new(b\"1\", b\"5\", 0)));\n }"}, {"sha": "14a818ddafb710f09f8197d853480d097347fb23", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -334,11 +334,8 @@ macro_rules! define_dep_nodes {\n             pub fn extract_def_id(&self, tcx: TyCtxt) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n                     let def_path_hash = DefPathHash(self.hash);\n-                    if let Some(ref def_path_map) = tcx.def_path_hash_to_def_id.as_ref() {\n-                        def_path_map.get(&def_path_hash).cloned()\n-                    } else {\n-                       None\n-                    }\n+                    tcx.def_path_hash_to_def_id.as_ref()?\n+                        .get(&def_path_hash).cloned()\n                 } else {\n                     None\n                 }"}, {"sha": "e308f2924a05c571c0efa4a4a24cdfc704c8789e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -489,7 +489,12 @@ impl DepGraph {\n     }\n \n     pub(super) fn dep_node_debug_str(&self, dep_node: DepNode) -> Option<String> {\n-        self.data.as_ref().and_then(|t| t.dep_node_debug.borrow().get(&dep_node).cloned())\n+        self.data\n+            .as_ref()?\n+            .dep_node_debug\n+            .borrow()\n+            .get(&dep_node)\n+            .cloned()\n     }\n \n     pub fn edge_deduplication_data(&self) -> (u64, u64) {"}, {"sha": "8a714a5fbd847173c8b2eefc82da51cf576dd0e2", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -47,7 +47,7 @@ impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n         let actual_len = self.len();\n         EnumerateAndAdjust {\n             enumerate: self.enumerate(),\n-            gap_pos: if let Some(gap_pos) = gap_pos { gap_pos } else { expected_len },\n+            gap_pos: gap_pos.unwrap_or(expected_len),\n             gap_len: expected_len - actual_len,\n         }\n     }"}, {"sha": "c46492895dd21bd607b58ab224dedcff11adcc5b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -805,7 +805,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     //     Foo<_, Qux>\n                     //         ^ elided type as this type argument was the same in both sides\n                     let type_arguments = sub1.types().zip(sub2.types());\n-                    let regions_len = sub1.regions().collect::<Vec<_>>().len();\n+                    let regions_len = sub1.regions().count();\n                     for (i, (ta1, ta2)) in type_arguments.take(len).enumerate() {\n                         let i = i + regions_len;\n                         if ta1 == ta2 {"}, {"sha": "857cabe18b1e2360efeda3367ab2a1338d642d3f", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -17,7 +17,6 @@ use std::collections::HashMap;\n use std::ffi::CString;\n use std::fmt::Debug;\n use std::hash::{Hash, BuildHasher};\n-use std::iter::repeat;\n use std::panic;\n use std::env;\n use std::path::Path;\n@@ -219,7 +218,7 @@ fn print_time_passes_entry_internal(what: &str, dur: Duration) {\n         None => \"\".to_owned(),\n     };\n     println!(\"{}time: {}{}\\t{}\",\n-             repeat(\"  \").take(indentation).collect::<String>(),\n+             \"  \".repeat(indentation),\n              duration_to_secs_str(dur),\n              mem_string,\n              what);"}, {"sha": "48de2f3beedfb68dc846eff0f9ad8c38107228e0", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -206,9 +206,8 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  })\n                                  .collect();\n \n-    if let Some(_) = *tcx.sess.entry_fn.borrow() {\n-        let symbol_name = \"main\".to_string();\n-        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n+    if tcx.sess.entry_fn.borrow().is_some() {\n+        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(\"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }"}, {"sha": "29b9990de34eba8f526acc2adf89cfdda1d4a933", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -96,7 +96,6 @@ use std::error::Error;\n use std::ffi::OsString;\n use std::fmt::{self, Display};\n use std::io::{self, Read, Write};\n-use std::iter::repeat;\n use std::mem;\n use std::panic;\n use std::path::{PathBuf, Path};\n@@ -1227,7 +1226,7 @@ Available lint options:\n     fn sort_lint_groups(lints: Vec<(&'static str, Vec<lint::LintId>, bool)>)\n                         -> Vec<(&'static str, Vec<lint::LintId>)> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, y, _)| (x, y)).collect();\n-        lints.sort_by_key(|ref l| l.0);\n+        lints.sort_by_key(|l| l.0);\n         lints\n     }\n \n@@ -1251,9 +1250,7 @@ Available lint options:\n                              .max()\n                              .unwrap_or(0);\n     let padded = |x: &str| {\n-        let mut s = repeat(\" \")\n-                        .take(max_name_len - x.chars().count())\n-                        .collect::<String>();\n+        let mut s = \" \".repeat(max_name_len - x.chars().count());\n         s.push_str(x);\n         s\n     };\n@@ -1285,9 +1282,7 @@ Available lint options:\n                                         .unwrap_or(0));\n \n     let padded = |x: &str| {\n-        let mut s = repeat(\" \")\n-                        .take(max_name_len - x.chars().count())\n-                        .collect::<String>();\n+        let mut s = \" \".repeat(max_name_len - x.chars().count());\n         s.push_str(x);\n         s\n     };"}, {"sha": "797ed4505b44ad341c6a5fc19b75d4125fc0e38f", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -208,7 +208,7 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n     for (ref cons, ref qm) in counts.iter() {\n         data.push((cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone()));\n     };\n-    data.sort_by_key(|&k| Reverse(k.3));\n+    data.sort_by_key(|k| Reverse(k.3));\n     for (cons, count, dur_total, dur_self) in data {\n         write!(count_file, \"{}, {}, {}, {}\\n\",\n                cons, count,"}, {"sha": "09295e2c7ff0024dae5f43cd7f06f3f39d8c1d02", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -528,9 +528,7 @@ impl EmitterWriter {\n \n         // If there are no annotations or the only annotations on this line are\n         // MultilineLine, then there's only code being shown, stop processing.\n-        if line.annotations.is_empty() || line.annotations.iter()\n-            .filter(|a| !a.is_line()).collect::<Vec<_>>().len() == 0\n-        {\n+        if line.annotations.iter().all(|a| a.is_line()) {\n             return vec![];\n         }\n \n@@ -901,9 +899,7 @@ impl EmitterWriter {\n         //    |  |   length of label\n         //    |  magic `3`\n         //    `max_line_num_len`\n-        let padding = (0..padding + label.len() + 5)\n-            .map(|_| \" \")\n-            .collect::<String>();\n+        let padding = \" \".repeat(padding + label.len() + 5);\n \n         /// Return whether `style`, or the override if present and the style is `NoStyle`.\n         fn style_or_override(style: Style, override_style: Option<Style>) -> Style {"}, {"sha": "82546747755f9f2b4b54df6580045eda78d188ee", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -608,9 +608,8 @@ impl Handler {\n         if can_show_explain && are_there_diagnostics {\n             let mut error_codes =\n                 self.emitted_diagnostic_codes.borrow()\n-                                             .clone()\n-                                             .into_iter()\n-                                             .filter_map(|x| match x {\n+                                             .iter()\n+                                             .filter_map(|x| match *x {\n                                                  DiagnosticId::Error(ref s) => Some(s.clone()),\n                                                  _ => None,\n                                              })"}, {"sha": "09871c0e84049d801888014eafc012a400faa67f", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -83,20 +83,18 @@ impl NonCamelCaseTypes {\n                     } else {\n                         c.to_lowercase().collect()\n                     })\n-                    .collect::<Vec<_>>()\n-                    .concat()\n+                    .collect::<String>()\n                 })\n                 .filter(|x| !x.is_empty())\n-                .collect::<Vec<_>>()\n-                .iter().fold((String::new(), None), |(acc, prev): (String, Option<&String>), next| {\n+                .fold((String::new(), None), |(acc, prev): (String, Option<String>), next| {\n                     // separate two components with an underscore if their boundary cannot\n                     // be distinguished using a uppercase/lowercase case distinction\n                     let join = if let Some(prev) = prev {\n                                     let l = prev.chars().last().unwrap();\n                                     let f = next.chars().next().unwrap();\n                                     !char_has_case(l) && !char_has_case(f)\n                                 } else { false };\n-                    (acc + if join { \"_\" } else { \"\" } + next, Some(next))\n+                    (acc + if join { \"_\" } else { \"\" } + &next, Some(next))\n                 }).0\n         }\n "}, {"sha": "5d459557711854f03c8a71a2efd9d82307cf546a", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -32,7 +32,7 @@ use arena::TypedArena;\n \n use std::cmp::{self, Ordering};\n use std::fmt;\n-use std::iter::{FromIterator, IntoIterator, repeat};\n+use std::iter::{FromIterator, IntoIterator};\n \n pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pattern<'tcx>)\n                                 -> &'a Pattern<'tcx>\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n         }).collect();\n \n         let total_width = column_widths.iter().cloned().sum::<usize>() + column_count * 3 + 1;\n-        let br = repeat('+').take(total_width).collect::<String>();\n+        let br = \"+\".repeat(total_width);\n         write!(f, \"{}\\n\", br)?;\n         for row in pretty_printed_matrix {\n             write!(f, \"+\")?;"}, {"sha": "30556759bd3942ac7665e2e79ba9d9f1b87254cc", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -29,13 +29,13 @@ pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mon\n         (mono_item, mono_item.symbol_name(tcx))\n     }).collect();\n \n-    (&mut symbols[..]).sort_by_key(|&sym| sym.1);\n+    symbols.sort_by_key(|sym| sym.1);\n \n-    for pair in (&symbols[..]).windows(2) {\n+    for pair in symbols.windows(2) {\n         let sym1 = &pair[0].1;\n         let sym2 = &pair[1].1;\n \n-        if *sym1 == *sym2 {\n+        if sym1 == sym2 {\n             let mono_item1 = pair[0].0;\n             let mono_item2 = pair[1].0;\n \n@@ -51,9 +51,7 @@ pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mon\n                         span2\n                     })\n                 }\n-                (Some(span), None) |\n-                (None, Some(span)) => Some(span),\n-                _ => None\n+                (span1, span2) => span1.or(span2),\n             };\n \n             let error_message = format!(\"symbol `{}` is already defined\", sym1);"}, {"sha": "725b3b4f1503453d31a2aa4ef3ae21cd67b42f51", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -269,7 +269,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err\n         }\n         ResolutionError::VariableNotBoundInPattern(binding_error) => {\n-            let target_sp = binding_error.target.iter().map(|x| *x).collect::<Vec<_>>();\n+            let target_sp = binding_error.target.iter().cloned().collect::<Vec<_>>();\n             let msp = MultiSpan::from_spans(target_sp.clone());\n             let msg = format!(\"variable `{}` is not bound in all patterns\", binding_error.name);\n             let mut err = resolver.session.struct_span_err_with_code(\n@@ -280,7 +280,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             for sp in target_sp {\n                 err.span_label(sp, format!(\"pattern doesn't bind `{}`\", binding_error.name));\n             }\n-            let origin_sp = binding_error.origin.iter().map(|x| *x).collect::<Vec<_>>();\n+            let origin_sp = binding_error.origin.iter().cloned();\n             for sp in origin_sp {\n                 err.span_label(sp, \"variable not in all patterns\");\n             }"}, {"sha": "feec513b9751920948324d815803b9d48979bf79", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -16,7 +16,6 @@\n //! them in the future to instead emit any format desired.\n \n use std::fmt;\n-use std::iter::repeat;\n \n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi::Abi;\n@@ -235,10 +234,9 @@ impl<'a> fmt::Display for WhereClause<'a> {\n \n         if !f.alternate() {\n             clause.push_str(\"</span>\");\n-            let padding = repeat(\"&nbsp;\").take(indent + 4).collect::<String>();\n+            let padding = \"&nbsp;\".repeat(indent + 4);\n             clause = clause.replace(\"<br>\", &format!(\"<br>{}\", padding));\n-            clause.insert_str(0, &repeat(\"&nbsp;\").take(indent.saturating_sub(1))\n-                                                  .collect::<String>());\n+            clause.insert_str(0, &\"&nbsp;\".repeat(indent.saturating_sub(1)));\n             if !end_newline {\n                 clause.insert_str(0, \"<br>\");\n             }\n@@ -409,13 +407,13 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n     let (fqp, shortty, mut url) = match cache.paths.get(&did) {\n         Some(&(ref fqp, shortty)) => {\n-            (fqp, shortty, repeat(\"../\").take(loc.len()).collect())\n+            (fqp, shortty, \"../\".repeat(loc.len()))\n         }\n         None => {\n             let &(ref fqp, shortty) = cache.external_paths.get(&did)?;\n             (fqp, shortty, match cache.extern_locations[&did.krate] {\n                 (.., render::Remote(ref s)) => s.to_string(),\n-                (.., render::Local) => repeat(\"../\").take(loc.len()).collect(),\n+                (.., render::Local) => \"../\".repeat(loc.len()),\n                 (.., render::Unknown) => return None,\n             })\n         }\n@@ -481,7 +479,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n                 let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n                 let len = if len == 0 {0} else {len - 1};\n                 write!(f, \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n-                       repeat(\"../\").take(len).collect::<String>(),\n+                       \"../\".repeat(len),\n                        prim.to_url_str())?;\n                 needs_termination = true;\n             }\n@@ -492,7 +490,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n                     }\n                     (ref cname, _, render::Local) => {\n                         let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n-                        Some((cname, repeat(\"../\").take(len).collect::<String>()))\n+                        Some((cname, \"../\".repeat(len)))\n                     }\n                     (.., render::Unknown) => None,\n                 };\n@@ -907,15 +905,15 @@ impl<'a> fmt::Display for Method<'a> {\n             format!(\"{}\", decl.output)\n         };\n \n-        let pad = repeat(\" \").take(name_len).collect::<String>();\n+        let pad = \" \".repeat(name_len);\n         let plain = format!(\"{pad}({args}){arrow}\",\n                         pad = pad,\n                         args = args_plain,\n                         arrow = arrow_plain);\n \n         let output = if plain.len() > 80 {\n-            let full_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent + 4).collect::<String>());\n-            let close_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent).collect::<String>());\n+            let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n+            let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n             format!(\"({args}{close}){arrow}\",\n                     args = args.replace(\"<br>\", &full_pad),\n                     close = close_pad,"}, {"sha": "9f4f20e35398c4e2e16a04638a44f079c26de46f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -46,7 +46,6 @@ use std::ffi::OsStr;\n use std::fs::{self, File, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n-use std::iter::repeat;\n use std::mem;\n use std::path::{PathBuf, Path, Component};\n use std::str;\n@@ -1712,7 +1711,7 @@ impl Context {\n     /// String representation of how to get back to the root path of the 'doc/'\n     /// folder in terms of a relative URL.\n     fn root_path(&self) -> String {\n-        repeat(\"../\").take(self.current.len()).collect::<String>()\n+        \"../\".repeat(self.current.len())\n     }\n \n     /// Recurse in the directory structure and change the \"root path\" to make\n@@ -2113,8 +2112,7 @@ impl<'a> fmt::Display for Item<'a> {\n             let amt = if self.item.is_mod() { cur.len() - 1 } else { cur.len() };\n             for (i, component) in cur.iter().enumerate().take(amt) {\n                 write!(fmt, \"<a href='{}index.html'>{}</a>::<wbr>\",\n-                       repeat(\"../\").take(cur.len() - i - 1)\n-                                    .collect::<String>(),\n+                       \"../\".repeat(cur.len() - i - 1),\n                        component)?;\n             }\n         }"}, {"sha": "8acb8a46d7bf229ff81105161c44a03fb25b659e", "filename": "src/libstd/tests/env.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftests%2Fenv.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -11,7 +11,6 @@\n extern crate rand;\n \n use std::env::*;\n-use std::iter::repeat;\n use std::ffi::{OsString, OsStr};\n \n use rand::Rng;\n@@ -72,7 +71,7 @@ fn test_var_big() {\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_env_set_get_huge() {\n     let n = make_rand_name();\n-    let s = repeat(\"x\").take(10000).collect::<String>();\n+    let s = \"x\".repeat(10000);\n     set_var(&n, &s);\n     eq(var_os(&n), Some(&s));\n     remove_var(&n);"}, {"sha": "08c9ec4c989c1ea7ef6c6bf8d50133617f1bab2d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -32,7 +32,7 @@ use tokenstream::{self, TokenStream, TokenTree};\n \n use std::ascii;\n use std::io::{self, Write, Read};\n-use std::iter::{self, Peekable};\n+use std::iter::Peekable;\n use std::vec;\n \n pub enum AnnNode<'a> {\n@@ -235,11 +235,11 @@ pub fn token_to_string(tok: &Token) -> String {\n                 token::Integer(c)        => c.to_string(),\n                 token::Str_(s)           => format!(\"\\\"{}\\\"\", s),\n                 token::StrRaw(s, n)      => format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n as usize),\n+                                                    delim=\"#\".repeat(n as usize),\n                                                     string=s),\n                 token::ByteStr(v)         => format!(\"b\\\"{}\\\"\", v),\n                 token::ByteStrRaw(s, n)   => format!(\"br{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n as usize),\n+                                                    delim=\"#\".repeat(n as usize),\n                                                     string=s),\n             };\n \n@@ -661,7 +661,7 @@ pub trait PrintState<'a> {\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                         delim=repeat(\"#\", n as usize),\n+                         delim=\"#\".repeat(n as usize),\n                          string=st))\n             }\n         };\n@@ -3180,8 +3180,6 @@ impl<'a> State<'a> {\n     }\n }\n \n-fn repeat(s: &str, n: usize) -> String { iter::repeat(s).take(n).collect() }\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "ed5b5565d89a0dc6810bfd196bdc5a1ea160643b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "patch": "@@ -64,7 +64,6 @@ use std::fmt;\n use std::fs::File;\n use std::io::prelude::*;\n use std::io;\n-use std::iter::repeat;\n use std::path::PathBuf;\n use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n@@ -143,7 +142,7 @@ impl TestDesc {\n     fn padded_name(&self, column_count: usize, align: NamePadding) -> String {\n         let mut name = String::from(self.name.as_slice());\n         let fill = column_count.saturating_sub(name.len());\n-        let pad = repeat(\" \").take(fill).collect::<String>();\n+        let pad = \" \".repeat(fill);\n         match align {\n             PadNone => name,\n             PadOnRight => {"}]}