{"sha": "a7d6768e3b60209d4195c822ea3247482909b604", "node_id": "C_kwDOAAsO6NoAKGE3ZDY3NjhlM2I2MDIwOWQ0MTk1YzgyMmVhMzI0NzQ4MjkwOWI2MDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T12:26:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T12:26:38Z"}, "message": "Auto merge of #91779 - ridwanabdillahi:natvis, r=michaelwoerister\n\nAdd a new Rust attribute to support embedding debugger visualizers\n\nImplemented [this RFC](https://github.com/rust-lang/rfcs/pull/3191) to add support for embedding debugger visualizers into a PDB.\n\nAdded a new attribute `#[debugger_visualizer]` and updated the `CrateMetadata` to store debugger visualizers for crate dependencies.\n\nRFC: https://github.com/rust-lang/rfcs/pull/3191", "tree": {"sha": "978bb56e456844ecb2353ec04607de9d54b8b7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978bb56e456844ecb2353ec04607de9d54b8b7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d6768e3b60209d4195c822ea3247482909b604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6768e3b60209d4195c822ea3247482909b604", "html_url": "https://github.com/rust-lang/rust/commit/a7d6768e3b60209d4195c822ea3247482909b604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6768e3b60209d4195c822ea3247482909b604/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322a14919d6cc67af45477b623857b30fae63f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/322a14919d6cc67af45477b623857b30fae63f9d", "html_url": "https://github.com/rust-lang/rust/commit/322a14919d6cc67af45477b623857b30fae63f9d"}, {"sha": "791bef545558cf98e74c72fa6558d9c8a1a82d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/791bef545558cf98e74c72fa6558d9c8a1a82d76", "html_url": "https://github.com/rust-lang/rust/commit/791bef545558cf98e74c72fa6558d9c8a1a82d76"}], "stats": {"total": 630, "additions": 554, "deletions": 76}, "files": [{"sha": "672f06a172b20c7e055cf3260180282a987b0dd4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -4184,6 +4184,7 @@ dependencies = [\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\","}, {"sha": "8bf3a0799b6384d3c74f2feae235e418153297c6", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -3,17 +3,15 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n-use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirOwnership;\n use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_parse::{self, new_parser_from_file};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, FileName, Pos, Span};\n+use rustc_span::{self, Pos, Span};\n \n use smallvec::SmallVec;\n-use std::path::PathBuf;\n use std::rc::Rc;\n \n // These macros all relate to the file system; they either return\n@@ -104,7 +102,7 @@ pub fn expand_include<'cx>(\n         return DummyResult::any(sp);\n     };\n     // The file will be added to the code map by the parser\n-    let file = match resolve_path(cx, file.as_str(), sp) {\n+    let file = match resolve_path(&cx.sess.parse_sess, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -176,7 +174,7 @@ pub fn expand_include_str(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_str!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match resolve_path(cx, file.as_str(), sp) {\n+    let file = match resolve_path(&cx.sess.parse_sess, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -210,7 +208,7 @@ pub fn expand_include_bytes(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match resolve_path(cx, file.as_str(), sp) {\n+    let file = match resolve_path(&cx.sess.parse_sess, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -225,40 +223,3 @@ pub fn expand_include_bytes(\n         }\n     }\n }\n-\n-/// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n-///\n-/// This unifies the logic used for resolving `include_X!`.\n-fn resolve_path<'a>(\n-    cx: &mut ExtCtxt<'a>,\n-    path: impl Into<PathBuf>,\n-    span: Span,\n-) -> PResult<'a, PathBuf> {\n-    let path = path.into();\n-\n-    // Relative paths are resolved relative to the file in which they are found\n-    // after macro expansion (that is, they are unhygienic).\n-    if !path.is_absolute() {\n-        let callsite = span.source_callsite();\n-        let mut result = match cx.source_map().span_to_filename(callsite) {\n-            FileName::Real(name) => name\n-                .into_local_path()\n-                .expect(\"attempting to resolve a file path in an external file\"),\n-            FileName::DocTest(path, _) => path,\n-            other => {\n-                return Err(cx.struct_span_err(\n-                    span,\n-                    &format!(\n-                        \"cannot resolve relative path in non-file source `{}`\",\n-                        cx.source_map().filename_for_diagnostics(&other)\n-                    ),\n-                ));\n-            }\n-        };\n-        result.pop();\n-        result.push(path);\n-        Ok(result)\n-    } else {\n-        Ok(path)\n-    }\n-}"}, {"sha": "04ec1e7f3c1afe5e92b22db5fe2efd04aa86c249", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use rustc_hir::def_id::CrateNum;\n+use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n@@ -2099,8 +2099,14 @@ fn add_order_independent_options(\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n \n+    let debugger_visualizer_paths = if sess.target.is_like_msvc {\n+        collect_debugger_visualizers(tmpdir, sess, &codegen_results.crate_info)\n+    } else {\n+        Vec::new()\n+    };\n+\n     // Pass debuginfo and strip flags down to the linker.\n-    cmd.debuginfo(strip_value(sess));\n+    cmd.debuginfo(strip_value(sess), &debugger_visualizer_paths);\n \n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n@@ -2119,6 +2125,47 @@ fn add_order_independent_options(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n }\n \n+// Write the debugger visualizer files for each crate to the temp directory and gather the file paths.\n+fn collect_debugger_visualizers(\n+    tmpdir: &Path,\n+    sess: &Session,\n+    crate_info: &CrateInfo,\n+) -> Vec<PathBuf> {\n+    let mut visualizer_paths = Vec::new();\n+    let debugger_visualizers = &crate_info.debugger_visualizers;\n+    let mut index = 0;\n+\n+    for (&cnum, visualizers) in debugger_visualizers {\n+        let crate_name = if cnum == LOCAL_CRATE {\n+            crate_info.local_crate_name.as_str()\n+        } else {\n+            crate_info.crate_name[&cnum].as_str()\n+        };\n+\n+        for visualizer in visualizers {\n+            let visualizer_out_file = tmpdir.join(format!(\"{}-{}.natvis\", crate_name, index));\n+\n+            match fs::write(&visualizer_out_file, &visualizer.src) {\n+                Ok(()) => {\n+                    visualizer_paths.push(visualizer_out_file.clone());\n+                    index += 1;\n+                }\n+                Err(error) => {\n+                    sess.warn(\n+                        format!(\n+                            \"Unable to write debugger visualizer file `{}`: {} \",\n+                            visualizer_out_file.display(),\n+                            error\n+                        )\n+                        .as_str(),\n+                    );\n+                }\n+            };\n+        }\n+    }\n+    visualizer_paths\n+}\n+\n /// # Native library linking\n ///\n /// User-supplied library search paths (-L on the command line). These are the same paths used to"}, {"sha": "2a71377d2f15b353dcb00191d58988f3c25c1ba6", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -183,7 +183,7 @@ pub trait Linker {\n     fn optimize(&mut self);\n     fn pgo_gen(&mut self);\n     fn control_flow_guard(&mut self);\n-    fn debuginfo(&mut self, strip: Strip);\n+    fn debuginfo(&mut self, strip: Strip, debugger_visualizers: &[PathBuf]);\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n@@ -611,7 +611,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn control_flow_guard(&mut self) {}\n \n-    fn debuginfo(&mut self, strip: Strip) {\n+    fn debuginfo(&mut self, strip: Strip, _: &[PathBuf]) {\n         // MacOS linker doesn't support stripping symbols directly anymore.\n         if self.sess.target.is_like_osx {\n             return;\n@@ -915,7 +915,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/guard:cf\");\n     }\n \n-    fn debuginfo(&mut self, strip: Strip) {\n+    fn debuginfo(&mut self, strip: Strip, debugger_visualizers: &[PathBuf]) {\n         match strip {\n             Strip::None => {\n                 // This will cause the Microsoft linker to generate a PDB file\n@@ -942,6 +942,13 @@ impl<'a> Linker for MsvcLinker<'a> {\n                         }\n                     }\n                 }\n+\n+                // This will cause the Microsoft linker to embed .natvis info for all crates into the PDB file\n+                for path in debugger_visualizers {\n+                    let mut arg = OsString::from(\"/NATVIS:\");\n+                    arg.push(path);\n+                    self.cmd.arg(arg);\n+                }\n             }\n             Strip::Debuginfo | Strip::Symbols => {\n                 self.cmd.arg(\"/DEBUG:NONE\");\n@@ -1124,7 +1131,7 @@ impl<'a> Linker for EmLinker<'a> {\n \n     fn control_flow_guard(&mut self) {}\n \n-    fn debuginfo(&mut self, _strip: Strip) {\n+    fn debuginfo(&mut self, _strip: Strip, _: &[PathBuf]) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n             DebugInfo::None => \"-g0\",\n@@ -1315,7 +1322,7 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn pgo_gen(&mut self) {}\n \n-    fn debuginfo(&mut self, strip: Strip) {\n+    fn debuginfo(&mut self, strip: Strip, _: &[PathBuf]) {\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n@@ -1450,7 +1457,7 @@ impl<'a> Linker for L4Bender<'a> {\n \n     fn pgo_gen(&mut self) {}\n \n-    fn debuginfo(&mut self, strip: Strip) {\n+    fn debuginfo(&mut self, strip: Strip, _: &[PathBuf]) {\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n@@ -1600,7 +1607,7 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn debuginfo(&mut self, _strip: Strip) {\n+    fn debuginfo(&mut self, _strip: Strip, _: &[PathBuf]) {\n         self.cmd.arg(\"--debug\");\n     }\n \n@@ -1699,7 +1706,7 @@ impl<'a> Linker for BpfLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn debuginfo(&mut self, _strip: Strip) {\n+    fn debuginfo(&mut self, _strip: Strip, _: &[PathBuf]) {\n         self.cmd.arg(\"--debug\");\n     }\n "}, {"sha": "7b7e09208a24a0c94cbf2afcf6e6f9d2a9bcd416", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -847,7 +847,13 @@ impl CrateInfo {\n             missing_lang_items: Default::default(),\n             dependency_formats: tcx.dependency_formats(()).clone(),\n             windows_subsystem,\n+            debugger_visualizers: Default::default(),\n         };\n+        let debugger_visualizers = tcx.debugger_visualizers(LOCAL_CRATE).clone();\n+        if !debugger_visualizers.is_empty() {\n+            info.debugger_visualizers.insert(LOCAL_CRATE, debugger_visualizers);\n+        }\n+\n         let lang_items = tcx.lang_items();\n \n         let crates = tcx.crates(());\n@@ -862,7 +868,9 @@ impl CrateInfo {\n             info.native_libraries\n                 .insert(cnum, tcx.native_libraries(cnum).iter().map(Into::into).collect());\n             info.crate_name.insert(cnum, tcx.crate_name(cnum));\n-            info.used_crate_source.insert(cnum, tcx.used_crate_source(cnum).clone());\n+\n+            let used_crate_source = tcx.used_crate_source(cnum);\n+            info.used_crate_source.insert(cnum, used_crate_source.clone());\n             if tcx.is_compiler_builtins(cnum) {\n                 info.compiler_builtins = Some(cnum);\n             }\n@@ -883,6 +891,14 @@ impl CrateInfo {\n             let missing =\n                 missing.iter().cloned().filter(|&l| lang_items::required(tcx, l)).collect();\n             info.missing_lang_items.insert(cnum, missing);\n+\n+            // Only include debugger visualizer files from crates that will be statically linked.\n+            if used_crate_source.rlib.is_some() || used_crate_source.rmeta.is_some() {\n+                let debugger_visualizers = tcx.debugger_visualizers(cnum).clone();\n+                if !debugger_visualizers.is_empty() {\n+                    info.debugger_visualizers.insert(cnum, debugger_visualizers);\n+                }\n+            }\n         }\n \n         info"}, {"sha": "9e1fe588c53799234650d508a86ec34fc6b5333e", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -35,6 +35,7 @@ use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n+use rustc_span::DebuggerVisualizerFile;\n use std::path::{Path, PathBuf};\n \n pub mod back;\n@@ -156,6 +157,7 @@ pub struct CrateInfo {\n     pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n     pub dependency_formats: Lrc<Dependencies>,\n     pub windows_subsystem: Option<String>,\n+    pub debugger_visualizers: FxHashMap<CrateNum, Vec<DebuggerVisualizerFile>>,\n }\n \n #[derive(Encodable, Decodable)]"}, {"sha": "2b30ec601a0ceccfa4dea30965f47740a3243e51", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan, PResult};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -20,7 +20,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{FileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;\n@@ -1136,6 +1136,43 @@ impl<'a> ExtCtxt<'a> {\n     }\n }\n \n+/// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n+///\n+/// This unifies the logic used for resolving `include_X!`.\n+pub fn resolve_path(\n+    parse_sess: &ParseSess,\n+    path: impl Into<PathBuf>,\n+    span: Span,\n+) -> PResult<'_, PathBuf> {\n+    let path = path.into();\n+\n+    // Relative paths are resolved relative to the file in which they are found\n+    // after macro expansion (that is, they are unhygienic).\n+    if !path.is_absolute() {\n+        let callsite = span.source_callsite();\n+        let mut result = match parse_sess.source_map().span_to_filename(callsite) {\n+            FileName::Real(name) => name\n+                .into_local_path()\n+                .expect(\"attempting to resolve a file path in an external file\"),\n+            FileName::DocTest(path, _) => path,\n+            other => {\n+                return Err(parse_sess.span_diagnostic.struct_span_err(\n+                    span,\n+                    &format!(\n+                        \"cannot resolve relative path in non-file source `{}`\",\n+                        parse_sess.source_map().filename_for_diagnostics(&other)\n+                    ),\n+                ));\n+            }\n+        };\n+        result.pop();\n+        result.push(path);\n+        Ok(result)\n+    } else {\n+        Ok(path)\n+    }\n+}\n+\n /// Extracts a string literal from the macro expanded version of `expr`,\n /// returning a diagnostic error of `err_msg` if `expr` is not a string literal.\n /// The returned bool indicates whether an applicable suggestion has already been"}, {"sha": "5c07d9121cc54c015331a4b035930f747ca09098", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -358,6 +358,8 @@ declare_features! (\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n+    /// Allows using `#[debugger_visualizer]`.\n+    (active, debugger_visualizer, \"1.62.0\", Some(95939), None),\n     /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n     /// Allows rustc to inject a default alloc_error_handler"}, {"sha": "bdbda8bf20c5a77c7e0d9d668e1e9646e363b7a1", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -379,6 +379,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Unstable attributes:\n     // ==========================================================================\n \n+    // RFC #3191: #[debugger_visualizer] support\n+    gated!(\n+        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\"\"#),\n+        DuplicatesOk, experimental!(debugger_visualizer)\n+    ),\n+\n     // Linking:\n     gated!(naked, Normal, template!(Word), WarnFollowing, naked_functions, experimental!(naked)),\n     gated!("}, {"sha": "b25522cfd96a80f06ae5f540ec2f1d763cbf33f4", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -1023,6 +1023,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n     }\n \n+    fn get_debugger_visualizers(self) -> Vec<rustc_span::DebuggerVisualizerFile> {\n+        self.root.debugger_visualizers.decode(self).collect::<Vec<_>>()\n+    }\n+\n     /// Iterates over all the stability attributes in the given crate.\n     fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))"}, {"sha": "c00c6ce2f71dca7eb75a00fabbb0e81d55276126", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -233,6 +233,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n \n     used_crate_source => { Lrc::clone(&cdata.source) }\n+    debugger_visualizers => { cdata.get_debugger_visualizers() }\n \n     exported_symbols => {\n         let syms = cdata.exported_symbols(tcx);"}, {"sha": "b2eafa035db830da3cb9ddc151ce8539aec75f3b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -35,7 +35,9 @@ use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{self, ExternalSource, FileName, SourceFile, Span, SyntaxContext};\n+use rustc_span::{\n+    self, DebuggerVisualizerFile, ExternalSource, FileName, SourceFile, Span, SyntaxContext,\n+};\n use rustc_span::{\n     hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind},\n     RealFileName,\n@@ -672,6 +674,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let tables = self.tables.encode(&mut self.opaque);\n         let tables_bytes = self.position() - i;\n \n+        i = self.position();\n+        let debugger_visualizers = self.encode_debugger_visualizers();\n+        let debugger_visualizers_bytes = self.position() - i;\n+\n         // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode\n         // this as late as possible to give the prefetching as much time as possible to complete.\n         i = self.position();\n@@ -717,6 +723,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator,\n             proc_macro_data,\n+            debugger_visualizers,\n             compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),\n             needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),\n             needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),\n@@ -757,25 +764,26 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n \n             eprintln!(\"metadata stats:\");\n-            eprintln!(\"             dep bytes: {}\", dep_bytes);\n-            eprintln!(\"     lib feature bytes: {}\", lib_feature_bytes);\n-            eprintln!(\"       lang item bytes: {}\", lang_item_bytes);\n-            eprintln!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n-            eprintln!(\"          native bytes: {}\", native_lib_bytes);\n-            eprintln!(\"      source_map bytes: {}\", source_map_bytes);\n-            eprintln!(\"          traits bytes: {}\", traits_bytes);\n-            eprintln!(\"           impls bytes: {}\", impls_bytes);\n-            eprintln!(\"incoherent_impls bytes: {}\", incoherent_impls_bytes);\n-            eprintln!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n-            eprintln!(\"  def-path table bytes: {}\", def_path_table_bytes);\n-            eprintln!(\" def-path hashes bytes: {}\", def_path_hash_map_bytes);\n-            eprintln!(\" proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n-            eprintln!(\"             mir bytes: {}\", mir_bytes);\n-            eprintln!(\"            item bytes: {}\", item_bytes);\n-            eprintln!(\"           table bytes: {}\", tables_bytes);\n-            eprintln!(\"         hygiene bytes: {}\", hygiene_bytes);\n-            eprintln!(\"            zero bytes: {}\", zero_bytes);\n-            eprintln!(\"           total bytes: {}\", total_bytes);\n+            eprintln!(\"                  dep bytes: {}\", dep_bytes);\n+            eprintln!(\"          lib feature bytes: {}\", lib_feature_bytes);\n+            eprintln!(\"            lang item bytes: {}\", lang_item_bytes);\n+            eprintln!(\"      diagnostic item bytes: {}\", diagnostic_item_bytes);\n+            eprintln!(\"               native bytes: {}\", native_lib_bytes);\n+            eprintln!(\" debugger visualizers bytes: {}\", debugger_visualizers_bytes);\n+            eprintln!(\"           source_map bytes: {}\", source_map_bytes);\n+            eprintln!(\"               traits bytes: {}\", traits_bytes);\n+            eprintln!(\"                impls bytes: {}\", impls_bytes);\n+            eprintln!(\"     incoherent_impls bytes: {}\", incoherent_impls_bytes);\n+            eprintln!(\"         exp. symbols bytes: {}\", exported_symbols_bytes);\n+            eprintln!(\"       def-path table bytes: {}\", def_path_table_bytes);\n+            eprintln!(\"      def-path hashes bytes: {}\", def_path_hash_map_bytes);\n+            eprintln!(\"      proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n+            eprintln!(\"                  mir bytes: {}\", mir_bytes);\n+            eprintln!(\"                 item bytes: {}\", item_bytes);\n+            eprintln!(\"                table bytes: {}\", tables_bytes);\n+            eprintln!(\"              hygiene bytes: {}\", hygiene_bytes);\n+            eprintln!(\"                 zero bytes: {}\", zero_bytes);\n+            eprintln!(\"                total bytes: {}\", total_bytes);\n         }\n \n         root\n@@ -1716,6 +1724,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn encode_debugger_visualizers(&mut self) -> Lazy<[DebuggerVisualizerFile]> {\n+        empty_proc_macro!(self);\n+        self.lazy(self.tcx.debugger_visualizers(LOCAL_CRATE).iter())\n+    }\n+\n     fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {\n         empty_proc_macro!(self);\n "}, {"sha": "a0fd9ef4f87d95ea0df4e285b900558e3497bb63", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -219,6 +219,7 @@ crate struct CrateRoot<'tcx> {\n     proc_macro_data: Option<ProcMacroData>,\n \n     tables: LazyTables<'tcx>,\n+    debugger_visualizers: Lazy<[rustc_span::DebuggerVisualizerFile]>,\n \n     exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportInfo)]),\n "}, {"sha": "e439d128dbc7773358b8058af5e4d447d6c0080e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -1628,6 +1628,12 @@ rustc_queries! {\n         desc { \"looking at the source for a crate\" }\n         separate_provide_extern\n     }\n+    /// Returns the debugger visualizers defined for this crate.\n+    query debugger_visualizers(_: CrateNum) -> Vec<rustc_span::DebuggerVisualizerFile> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { \"looking up the debugger visualizers for this crate\" }\n+        separate_provide_extern\n+    }\n     query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }"}, {"sha": "a3ef1981e84f9cb79b2ca396f564c2820e2071e4", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -9,6 +9,7 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_expand = { path = \"../rustc_expand\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_parse = { path = \"../rustc_parse\" }"}, {"sha": "fd7e2901ee2fd70ad2b8d5a5c07ccaa7798d34b0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -100,6 +100,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::allow_internal_unstable => {\n                     self.check_allow_internal_unstable(hir_id, &attr, span, target, &attrs)\n                 }\n+                sym::debugger_visualizer => self.check_debugger_visualizer(&attr, target),\n                 sym::rustc_allow_const_fn_unstable => {\n                     self.check_rustc_allow_const_fn_unstable(hir_id, &attr, span, target)\n                 }\n@@ -1860,6 +1861,65 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if the items on the `#[debugger_visualizer]` attribute are valid.\n+    fn check_debugger_visualizer(&self, attr: &Attribute, target: Target) -> bool {\n+        match target {\n+            Target::Mod => {}\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"attribute should be applied to a module\")\n+                    .emit();\n+                return false;\n+            }\n+        }\n+\n+        let hints = match attr.meta_item_list() {\n+            Some(meta_item_list) => meta_item_list,\n+            None => {\n+                self.emit_debugger_visualizer_err(attr);\n+                return false;\n+            }\n+        };\n+\n+        let hint = match hints.len() {\n+            1 => &hints[0],\n+            _ => {\n+                self.emit_debugger_visualizer_err(attr);\n+                return false;\n+            }\n+        };\n+\n+        if !hint.has_name(sym::natvis_file) {\n+            self.emit_debugger_visualizer_err(attr);\n+            return false;\n+        }\n+\n+        let meta_item = match hint.meta_item() {\n+            Some(meta_item) => meta_item,\n+            None => {\n+                self.emit_debugger_visualizer_err(attr);\n+                return false;\n+            }\n+        };\n+\n+        match (meta_item.name_or_empty(), meta_item.value_str()) {\n+            (sym::natvis_file, Some(_)) => true,\n+            (_, _) => {\n+                self.emit_debugger_visualizer_err(attr);\n+                false\n+            }\n+        }\n+    }\n+\n+    fn emit_debugger_visualizer_err(&self, attr: &Attribute) {\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"invalid argument\")\n+            .note(r#\"expected: `natvis_file = \"...\"`\"#)\n+            .emit();\n+    }\n+\n     /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n     /// (Allows proc_macro functions)\n     fn check_rustc_allow_const_fn_unstable("}, {"sha": "f89092c57a37aeb9ce36e0e0779b4b86241e5fda", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,137 @@\n+//! Detecting usage of the `#[debugger_visualizer]` attribute.\n+\n+use hir::CRATE_HIR_ID;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_expand::base::resolve_path;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::CrateNum;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{HirId, Target};\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_span::def_id::LOCAL_CRATE;\n+use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n+\n+use std::sync::Arc;\n+\n+struct DebuggerVisualizerCollector<'tcx> {\n+    debugger_visualizers: FxHashSet<DebuggerVisualizerFile>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for DebuggerVisualizerCollector<'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n+        let target = Target::from_item(item);\n+        match target {\n+            Target::Mod => {\n+                self.check_for_debugger_visualizer(item.hir_id());\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &hir::TraitItem<'_>) {}\n+\n+    fn visit_impl_item(&mut self, _: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n+}\n+\n+impl<'tcx> DebuggerVisualizerCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> DebuggerVisualizerCollector<'tcx> {\n+        DebuggerVisualizerCollector { tcx, debugger_visualizers: FxHashSet::default() }\n+    }\n+\n+    fn check_for_debugger_visualizer(&mut self, hir_id: HirId) {\n+        let attrs = self.tcx.hir().attrs(hir_id);\n+        for attr in attrs {\n+            if attr.has_name(sym::debugger_visualizer) {\n+                let list = match attr.meta_item_list() {\n+                    Some(list) => list,\n+                    _ => continue,\n+                };\n+\n+                let meta_item = match list.len() {\n+                    1 => match list[0].meta_item() {\n+                        Some(meta_item) => meta_item,\n+                        _ => continue,\n+                    },\n+                    _ => continue,\n+                };\n+\n+                let file = match (meta_item.name_or_empty(), meta_item.value_str()) {\n+                    (sym::natvis_file, Some(value)) => {\n+                        match resolve_path(&self.tcx.sess.parse_sess, value.as_str(), attr.span) {\n+                            Ok(file) => file,\n+                            Err(mut err) => {\n+                                err.emit();\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    (_, _) => continue,\n+                };\n+\n+                if file.is_file() {\n+                    let contents = match std::fs::read(&file) {\n+                        Ok(contents) => contents,\n+                        Err(err) => {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    attr.span,\n+                                    &format!(\n+                                        \"Unable to read contents of file `{}`. {}\",\n+                                        file.display(),\n+                                        err\n+                                    ),\n+                                )\n+                                .emit();\n+                            continue;\n+                        }\n+                    };\n+\n+                    self.debugger_visualizers.insert(DebuggerVisualizerFile::new(\n+                        Arc::from(contents),\n+                        DebuggerVisualizerType::Natvis,\n+                    ));\n+                } else {\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(\n+                            attr.span,\n+                            &format!(\"{} is not a valid file\", file.display()),\n+                        )\n+                        .emit();\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Traverses and collects the debugger visualizers for a specific crate.\n+fn debugger_visualizers<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Vec<DebuggerVisualizerFile> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    // Initialize the collector.\n+    let mut collector = DebuggerVisualizerCollector::new(tcx);\n+\n+    // Collect debugger visualizers in this crate.\n+    tcx.hir().visit_all_item_likes(&mut collector);\n+\n+    // Collect debugger visualizers on the crate attributes.\n+    collector.check_for_debugger_visualizer(CRATE_HIR_ID);\n+\n+    // Extract out the found debugger_visualizer items.\n+    let DebuggerVisualizerCollector { debugger_visualizers, .. } = collector;\n+\n+    let mut visualizers = debugger_visualizers.into_iter().collect::<Vec<_>>();\n+\n+    // Sort the visualizers so we always get a deterministic query result.\n+    visualizers.sort();\n+    visualizers\n+}\n+\n+pub fn provide(providers: &mut Providers) {\n+    providers.debugger_visualizers = debugger_visualizers;\n+}"}, {"sha": "d9d08488d2869c85028f3a570b26967266edd027", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -26,6 +26,7 @@ use rustc_middle::ty::query::Providers;\n mod check_attr;\n mod check_const;\n pub mod dead;\n+mod debugger_visualizer;\n mod diagnostic_items;\n pub mod entry;\n pub mod hir_id_validator;\n@@ -47,6 +48,7 @@ pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n     dead::provide(providers);\n+    debugger_visualizer::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);\n     lang_items::provide(providers);"}, {"sha": "7357cebf62eb9dc67d20d49a9a566af1e8a13476", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -70,6 +70,7 @@ use std::hash::Hash;\n use std::ops::{Add, Range, Sub};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n+use std::sync::Arc;\n \n use md5::Digest;\n use md5::Md5;\n@@ -1199,6 +1200,28 @@ impl SourceFileHash {\n     }\n }\n \n+#[derive(HashStable_Generic)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, Encodable, Decodable)]\n+pub enum DebuggerVisualizerType {\n+    Natvis,\n+}\n+\n+/// A single debugger visualizer file.\n+#[derive(HashStable_Generic)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable)]\n+pub struct DebuggerVisualizerFile {\n+    /// The complete debugger visualizer source.\n+    pub src: Arc<[u8]>,\n+    /// Indicates which visualizer type this targets.\n+    pub visualizer_type: DebuggerVisualizerType,\n+}\n+\n+impl DebuggerVisualizerFile {\n+    pub fn new(src: Arc<[u8]>, visualizer_type: DebuggerVisualizerType) -> Self {\n+        DebuggerVisualizerFile { src, visualizer_type }\n+    }\n+}\n+\n /// A single source in the [`SourceMap`].\n #[derive(Clone)]\n pub struct SourceFile {"}, {"sha": "e7149f4a6727c1a9f6b2e879bc1d918a4492c312", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -556,6 +556,7 @@ symbols! {\n         debug_struct,\n         debug_trait_builder,\n         debug_tuple,\n+        debugger_visualizer,\n         decl_macro,\n         declare_lint_pass,\n         decode,\n@@ -927,6 +928,7 @@ symbols! {\n         native_link_modifiers_bundle,\n         native_link_modifiers_verbatim,\n         native_link_modifiers_whole_archive,\n+        natvis_file,\n         ne,\n         nearbyintf32,\n         nearbyintf64,"}, {"sha": "4ab482fffb97c4e1948cc3f4cf18d1a2947420a6", "filename": "src/doc/unstable-book/src/language-features/debugger-visualizer.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,25 @@\n+# `debugger_visualizer`\n+\n+The tracking issue for this feature is: [#95939]\n+\n+[#95939]: https://github.com/rust-lang/rust/issues/95939\n+\n+------------------------\n+\n+The `debugger_visualizer` attribute can be used to instruct the compiler\n+to embed a debugger visualizer file into the PDB/ELF generated by `rustc`.\n+\n+## Examples\n+\n+``` rust,ignore (partial-example)\n+#![feature(debugger_visualizer)]\n+#![debugger_visualizer(natvis_file = \"foo.natvis\")]\n+struct Foo {\n+\n+}\n+```\n+\n+## Limitations\n+\n+Currently, this feature only supports embedding Natvis files on `-windows-msvc`\n+targets when using the MSVC linker via the `natvis_file` meta item."}, {"sha": "201d014b5201dbbec681cef7b6e10435b890140e", "filename": "src/test/debuginfo/msvc-embedded-natvis.natvis", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.natvis?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"msvc_embedded_natvis::Point\">\n+    <DisplayString>({x}, {y})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[x]\">x</Item>\n+      <Item Name=\"[y]\">y</Item>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"msvc_embedded_natvis::Line\">\n+    <DisplayString>({a}, {b})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[a]\">a</Item>\n+      <Item Name=\"[b]\">b</Item>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "f714fb2ad174d41f79bcd17553901f71d1ccab4c", "filename": "src/test/debuginfo/msvc-embedded-natvis.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,64 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: .nvlist\n+// cdb-check:    [...].exe (embedded NatVis \"[...]msvc_embedded_natvis-0.natvis\")\n+\n+// cdb-command: dx point_a\n+// cdb-check:point_a          : (0, 0) [Type: msvc_embedded_natvis::Point]\n+// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Point]\n+// cdb-check:    [x]              : 0 [Type: int]\n+// cdb-check:    [y]              : 0 [Type: int]\n+\n+// cdb-command: dx point_b\n+// cdb-check:point_b          : (5, 8) [Type: msvc_embedded_natvis::Point]\n+// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Point]\n+// cdb-check:    [x]              : 5 [Type: int]\n+// cdb-check:    [y]              : 8 [Type: int]\n+\n+// cdb-command: dx line\n+// cdb-check:line             : ((0, 0), (5, 8)) [Type: msvc_embedded_natvis::Line]\n+// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Line]\n+// cdb-check:    [a]              : (0, 0) [Type: msvc_embedded_natvis::Point]\n+// cdb-check:    [b]              : (5, 8) [Type: msvc_embedded_natvis::Point]\n+\n+#![feature(debugger_visualizer)]\n+#![debugger_visualizer(natvis_file = \"msvc-embedded-natvis.natvis\")]\n+\n+pub struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Point {\n+    pub fn new(x: i32, y: i32) -> Point {\n+        Point { x: x, y: y }\n+    }\n+}\n+\n+pub struct Line {\n+    a: Point,\n+    b: Point,\n+}\n+\n+impl Line {\n+    pub fn new(a: Point, b: Point) -> Line {\n+        Line { a: a, b: b }\n+    }\n+}\n+\n+fn main() {\n+    let point_a = Point::new(0, 0);\n+    let point_b = Point::new(5, 8);\n+    let line = Line::new(point_a, point_b);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {\n+    ()\n+}"}, {"sha": "3f9eb27a0d654588a8004ad8b3e36898f0dc3abe", "filename": "src/test/ui/feature-gates/feature-gate-debugger-visualizer.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,3 @@\n+#![debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR the `#[debugger_visualizer]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "721b2b185dad041d72705e47c07de955b8cfc614", "filename": "src/test/ui/feature-gates/feature-gate-debugger-visualizer.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[debugger_visualizer]` attribute is an experimental feature\n+  --> $DIR/feature-gate-debugger-visualizer.rs:1:1\n+   |\n+LL | #![debugger_visualizer(natvis_file = \"../foo.natvis\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #95939 <https://github.com/rust-lang/rust/issues/95939> for more information\n+   = help: add `#![feature(debugger_visualizer)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5332298f0ef907f7fecf3cb4b29c2d906ac6d5d8", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-option.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,4 @@\n+#![feature(debugger_visualizer)]\n+#![debugger_visualizer(random_file = \"../foo.random\")] //~ ERROR invalid argument\n+\n+fn main() {}"}, {"sha": "24ad9361fe3a395b7e5e3ab62491c1c164865061", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-option.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,10 @@\n+error: invalid argument\n+  --> $DIR/invalid-debugger-visualizer-option.rs:2:1\n+   |\n+LL | #![debugger_visualizer(random_file = \"../foo.random\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected: `natvis_file = \"...\"`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7668d092e614b2d072148e536926db7474185d21", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-target.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,5 @@\n+#![feature(debugger_visualizer)]\n+\n+#[debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR attribute should be applied to a module\n+\n+fn main() {}"}, {"sha": "3555bbb169b1cadbbd1fdf7b2140368d08806893", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-target.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -0,0 +1,8 @@\n+error: attribute should be applied to a module\n+  --> $DIR/invalid-debugger-visualizer-target.rs:3:1\n+   |\n+LL | #[debugger_visualizer(natvis_file = \"../foo.natvis\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}