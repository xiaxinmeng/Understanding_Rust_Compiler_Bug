{"sha": "1ea1a4277e8267966e0683a32298069de3d037f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTFhNDI3N2U4MjY3OTY2ZTA2ODNhMzIyOTgwNjlkZTNkMDM3ZjI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-06T07:21:10Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-06T09:08:29Z"}, "message": "Rollup merge of #55696 - davidtwco:issue-55675, r=pnkfelix\n\nNLL Diagnostic Review 3: Missing errors for borrows of union fields\n\nFixes #55675.\n\nThis PR modifies a test to make it more robust (it also fixes indentation on a doc comment, but that's not the point of the PR). See the linked issue for details.\n\nr? @pnkfelix", "tree": {"sha": "9d6c8979252aee59d01b68d6823a1c3eaa055982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6c8979252aee59d01b68d6823a1c3eaa055982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea1a4277e8267966e0683a32298069de3d037f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvhWg0ACgkQ/vbIBR0O\nATwt8g//TCHtA/rnOlPgt4WVx7Y2Jumiszg0UFQN9+0iAzbdZMy4EvU2QBkwvnxf\nKz84VAjUiUcXDIHq8UGNf7UEbK5a8AKipHimhfCDRSDsGzLxxEH8m/4jWX5bbaRp\nZmayKKZ1aMF8UnnMYbQvnwfQ3egz0WFtFhIqxhtNyjgYlowzZANYIRIUKJaYRaCO\nJ+OTaxOgq9Ta0liedhEOX9QYvXo1qG6UVDSOn0mNcezdXw9+fBUMtqF3836PzSAe\ncilExoDHMcIK2Yrtc9/01ErCqzwU/G2K8SmzVMfuaG378MBVlbCskwXlUQell0dY\nqKhWDP8ICx7N29OJUZRIMu+X3X2zIlPU+Xo5Q+AGgpVv67V0apsebbyxVJIZm+ME\nlfsvYpt4e7GtLMMKLEG66UYtmzSt/q83/Wk5WJKiejr18d2gyL+/6sFkVqNL+kKL\nHdhFP4QTpwkBbty+rwHgeadgtsrjtAbCtlMEm6oGBBFSzmkblxwLTB+EmUS+0ne/\ndwmP8mFeGMSOys24axJNBhUmmpusgspo7iIq/h7onGll1a4deKkES94CathxZz7Q\n1cv7izq+Pg7wGzZTkothyXxwhRFQSygqf5decK8me1QU5OWvlX5sIrm41Jgo0uD9\ngJxBmBoqxD+gNuMU1biStfMNyRmFboOIUR/aeG8XnmX5SeotdSc=\n=Z88z\n-----END PGP SIGNATURE-----", "payload": "tree 9d6c8979252aee59d01b68d6823a1c3eaa055982\nparent 54bc9c27e4255a8c33a0be7293bfb886b9f2996b\nparent ba09ed520864b5c64f56aa2311ee18fa72a3ceb6\nauthor kennytm <kennytm@gmail.com> 1541488870 +0800\ncommitter kennytm <kennytm@gmail.com> 1541495309 +0800\n\nRollup merge of #55696 - davidtwco:issue-55675, r=pnkfelix\n\nNLL Diagnostic Review 3: Missing errors for borrows of union fields\n\nFixes #55675.\n\nThis PR modifies a test to make it more robust (it also fixes indentation on a doc comment, but that's not the point of the PR). See the linked issue for details.\n\nr? @pnkfelix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea1a4277e8267966e0683a32298069de3d037f2", "html_url": "https://github.com/rust-lang/rust/commit/1ea1a4277e8267966e0683a32298069de3d037f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea1a4277e8267966e0683a32298069de3d037f2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bc9c27e4255a8c33a0be7293bfb886b9f2996b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bc9c27e4255a8c33a0be7293bfb886b9f2996b", "html_url": "https://github.com/rust-lang/rust/commit/54bc9c27e4255a8c33a0be7293bfb886b9f2996b"}, {"sha": "ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "html_url": "https://github.com/rust-lang/rust/commit/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6"}], "stats": {"total": 111, "additions": 75, "deletions": 36}, "files": [{"sha": "36bc2edcf584eb6293b686f6c3a7ab4b5b7720dc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -506,25 +506,25 @@ pub enum BorrowKind {\n     /// implicit closure bindings. It is needed when the closure is\n     /// borrowing or mutating a mutable referent, e.g.:\n     ///\n-    ///    let x: &mut isize = ...;\n-    ///    let y = || *x += 5;\n+    ///     let x: &mut isize = ...;\n+    ///     let y = || *x += 5;\n     ///\n     /// If we were to try to translate this closure into a more explicit\n     /// form, we'd encounter an error with the code as written:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    ///     struct Env { x: & &mut isize }\n+    ///     let x: &mut isize = ...;\n+    ///     let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n+    ///     fn fn_ptr(env: &mut Env) { **env.x += 5; }\n     ///\n     /// This is then illegal because you cannot mutate an `&mut` found\n     /// in an aliasable location. To solve, you'd have to translate with\n     /// an `&mut` borrow:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    ///     struct Env { x: & &mut isize }\n+    ///     let x: &mut isize = ...;\n+    ///     let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n+    ///     fn fn_ptr(env: &mut Env) { **env.x += 5; }\n     ///\n     /// Now the assignment to `**env.x` is legal, but creating a\n     /// mutable pointer to `x` is not because `x` is not mutable. We"}, {"sha": "6b18aff9f6b830caa18e310f006a2a0832d78c69", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,33 +1,64 @@\n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:13\n+   |\n+LL |     let a = &mut u.x.0;\n+   |             ---------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:13\n    |\n LL |     let a = u.x.0;\n    |             ----- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:13\n+   |\n+LL |     let a = &mut (u.x.0).0;\n+   |             -------------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:13\n    |\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:13\n+   |\n+LL |     let a = &mut *u.y;\n+   |             --------- mutable borrow occurs here\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:13\n    |\n LL |     let a = *u.y;\n    |             ---- value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors occurred: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "99a073b838ca91482e91eff5f9ad4174e8acd929", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -17,40 +17,45 @@ union U {\n     y: Box<Vec<u8>>,\n }\n \n+fn use_borrow<T>(_: &T) {}\n+\n unsafe fn parent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut u.x.0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn parent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = u.x.0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn grandparent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut (u.x.0).0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn grandparent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = (u.x.0).0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn deref_sibling_borrow() {\n     let mut u = U { y: Box::default() };\n     let a = &mut *u.y;\n-    let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    use_borrow(a);\n }\n \n unsafe fn deref_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = *u.y;\n-    let a = u.x; //~ ERROR use of moved value: `u.x`\n+    let b = u.x; //~ ERROR use of moved value: `u.x`\n }\n \n "}, {"sha": "daf5a4f4fccaa4262b9dcf91fb22352e6118cf4b", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,59 +1,62 @@\n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:23:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:14\n    |\n LL |     let a = &mut u.x.0;\n    |                  ----- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:9\n    |\n LL |     let a = u.x.0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:35:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:14\n    |\n LL |     let a = &mut (u.x.0).0;\n    |                  --------- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:9\n    |\n LL |     let a = (u.x.0).0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because `u` is also borrowed as mutable (via `*u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:47:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:14\n    |\n LL |     let a = &mut *u.y;\n    |                  ---- mutable borrow occurs here (via `*u.y`)\n-LL |     let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n    |              ^^^ immutable borrow occurs here (via `u.x`)\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.x`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:9\n    |\n LL |     let a = *u.y;\n    |         - value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.x` has type `[type error]`, which does not implement the `Copy` trait"}]}