{"sha": "471436a2996b2f141e6ceeac87362cfb321807ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTQzNmEyOTk2YjJmMTQxZTZjZWVhYzg3MzYyY2ZiMzIxODA3ZmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-14T13:20:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-14T16:22:46Z"}, "message": "Implement function expressions/anonymous functions\n\nLooks like 'fn(..arg..) -> ret {body;}. They don't support type\nparameters or upvars yet.", "tree": {"sha": "bf87da66d16afbaa3a3bf9032202958575329191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf87da66d16afbaa3a3bf9032202958575329191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/471436a2996b2f141e6ceeac87362cfb321807ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/471436a2996b2f141e6ceeac87362cfb321807ff", "html_url": "https://github.com/rust-lang/rust/commit/471436a2996b2f141e6ceeac87362cfb321807ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/471436a2996b2f141e6ceeac87362cfb321807ff/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c06d1bcb01f1b45946adb8620149056b8e70d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c06d1bcb01f1b45946adb8620149056b8e70d54", "html_url": "https://github.com/rust-lang/rust/commit/8c06d1bcb01f1b45946adb8620149056b8e70d54"}], "stats": {"total": 144, "additions": 114, "deletions": 30}, "files": [{"sha": "84a6bc9d2e654fb1c72ecafe9ccab6d5f8d24bc6", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -271,6 +271,7 @@ tag expr_ {\n     expr_for_each(@local, @expr, block, ann);\n     expr_do_while(block, @expr, ann);\n     expr_alt(@expr, vec[arm], ann);\n+    expr_fn(_fn, ann);\n     expr_block(block, ann);\n     expr_move(@expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_assign(@expr /* TODO: @expr|is_lval */, @expr, ann);"}, {"sha": "258966ff0523a4751bcbb13e0295eb6307f60f08", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -815,7 +815,8 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         ret parse_alt_expr(p);\n     } else if (eat_word(p, \"spawn\")) {\n         ret parse_spawn_expr(p);\n-\n+    } else if (eat_word(p, \"fn\")) {\n+        ret parse_fn_expr(p);\n     } else if (eat_word(p, \"tup\")) {\n         fn parse_elt(&parser p) -> ast::elt {\n             auto m = parse_mutability(p);\n@@ -1114,8 +1115,11 @@ fn parse_self_method(&parser p) -> @ast::expr {\n }\n \n fn parse_dot_or_call_expr(&parser p) -> @ast::expr {\n-    auto lo = p.get_lo_pos();\n-    auto e = parse_bottom_expr(p);\n+    ret parse_dot_or_call_expr_with(p, parse_bottom_expr(p));\n+}\n+\n+fn parse_dot_or_call_expr_with(&parser p, @ast::expr e) -> @ast::expr {\n+    auto lo = e.span.lo;\n     auto hi = e.span.hi;\n     while (true) {\n         alt (p.peek()) {\n@@ -1357,6 +1361,14 @@ fn parse_if_expr(&parser p) -> @ast::expr {\n     ret @spanned(lo, hi, ast::expr_if(cond, thn, els, p.get_ann()));\n }\n \n+fn parse_fn_expr(&parser p) -> @ast::expr {\n+    auto lo = p.get_last_lo_pos();\n+    auto decl = parse_fn_decl(p, ast::impure_fn);\n+    auto body = parse_block(p);\n+    auto _fn = rec(decl=decl, proto=ast::proto_fn, body=body);\n+    ret @spanned(lo, body.span.hi, ast::expr_fn(_fn, p.get_ann()));\n+}\n+\n fn parse_else_expr(&parser p) -> @ast::expr {\n     if (eat_word(p, \"if\")) {\n         ret parse_if_expr(p);\n@@ -1630,10 +1642,14 @@ fn parse_source_stmt(&parser p) -> @ast::stmt {\n                 auto decl = @spanned(lo, hi, ast::decl_item(i));\n                 ret @spanned(lo, hi, ast::stmt_decl(decl, p.get_ann()));\n             }\n+            case (fn_no_item) { // parse_item will have already skipped \"fn\"\n+                auto e = parse_fn_expr(p);\n+                e = parse_dot_or_call_expr_with(p, e);\n+                ret @spanned(lo, e.span.hi, ast::stmt_expr(e, p.get_ann()));\n+            }\n             case (no_item) {\n                 // Remainder are line-expr stmts.\n                 auto e = parse_expr(p);\n-                auto hi = p.get_span();\n                 ret @spanned(lo, e.span.hi, ast::stmt_expr(e, p.get_ann()));\n             }\n         }\n@@ -1676,6 +1692,7 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n                 case (ast::expr_while(_,_,_))    { ret false; }\n                 case (ast::expr_do_while(_,_,_)) { ret false; }\n                 case (ast::expr_alt(_,_,_))      { ret false; }\n+                case (ast::expr_fn(_,_))       { ret false; }\n                 case (ast::expr_block(_,_))      { ret false; }\n                 case (ast::expr_assign(_,_,_))   { ret true; }\n                 case (ast::expr_assign_op(_,_,_,_))\n@@ -2152,16 +2169,18 @@ fn parse_auth(&parser p) -> ast::_auth {\n     fail;\n }\n \n-// FIXME will be extended to help parse anon functions\n tag parsed_item {\n     got_item(@ast::item);\n     no_item;\n+    fn_no_item;\n }\n \n fn parse_item(&parser p) -> parsed_item {\n     if (eat_word(p, \"const\")) {\n         ret got_item(parse_item_const(p));\n     } else if (eat_word(p, \"fn\")) {\n+        // This is an anonymous function\n+        if (p.peek() == token::LPAREN) { ret fn_no_item; }\n         ret got_item(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn));\n     } else if (eat_word(p, \"pred\")) {\n         ret got_item(parse_item_fn_or_iter(p, ast::pure_fn, ast::proto_fn));"}, {"sha": "01570dc7789b1786845327bf54f23ba6c7f63f61", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -346,6 +346,9 @@ fn visit_expr_with_scope(&@ast::expr x, &scopes sc, &vt[scopes] v) {\n         case (ast::expr_for_each(?d, _, _, _)) {\n             cons[scope](scope_loop(d.node), @sc)\n         }\n+        case (ast::expr_fn(?f, _)) {\n+            cons(scope_fn(f.decl, []), @sc)\n+        }\n         case (_) { sc }\n     };\n     visit::visit_expr(x, new_sc, v);"}, {"sha": "4f4fc19c62fc36fe1704700db7f96995259818b2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -6020,6 +6020,22 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n                                 cx, ann, output);\n         }\n \n+        case (ast::expr_fn(?f, ?ann)) {\n+            auto ccx = cx.fcx.lcx.ccx;\n+            let TypeRef llfnty = alt (ty::struct(ccx.tcx,\n+                                                 node_ann_type(ccx, ann))) {\n+                case (ty::ty_fn(?proto, ?inputs, ?output, _, _)) {\n+                    type_of_fn_full(ccx, e.span, proto, none, inputs,\n+                                    output, 0u)\n+                }\n+            };\n+            auto sub_cx = extend_path(cx.fcx.lcx, ccx.names.next(\"anon\"));\n+            auto s = mangle_internal_name_by_path(ccx, sub_cx.path);\n+            auto llfn = decl_internal_fastcall_fn(ccx.llmod, s, llfnty);\n+            trans_fn(sub_cx, e.span, f, llfn, none, [], ann);\n+            ret res(cx, create_fn_pair(ccx, s, llfnty, llfn, false));\n+        }\n+\n         case (ast::expr_block(?blk, ?ann)) {\n             *cx = rec(sp=blk.span with *cx);\n             auto sub_cx = new_scope_block_ctxt(cx, \"block-expr body\");\n@@ -7668,10 +7684,9 @@ fn finish_fn(&@fn_ctxt fcx, BasicBlockRef lltop) {\n \n // trans_fn: creates an LLVM function corresponding to a source language\n // function.\n-fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ast::def_id fid,\n+fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n             option::t[ty_self_pair] ty_self,\n             &vec[ast::ty_param] ty_params, &ast::ann ann) {\n-    auto llfndecl = cx.ccx.item_ids.get(fid);\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n@@ -7765,7 +7780,7 @@ fn create_vtbl(@local_ctxt cx,\n         cx.ccx.item_ids.insert(m.node.id, llfn);\n         cx.ccx.item_symbols.insert(m.node.id, s);\n \n-        trans_fn(mcx, m.span, m.node.meth, m.node.id,\n+        trans_fn(mcx, m.span, m.node.meth, llfn,\n                  some[ty_self_pair](tup(llself_ty, self_ty)),\n                  ty_params, m.node.ann);\n         methods += [llfn];\n@@ -7794,7 +7809,7 @@ fn trans_dtor(@local_ctxt cx,\n     cx.ccx.item_ids.insert(dtor.node.id, llfn);\n     cx.ccx.item_symbols.insert(dtor.node.id, s);\n \n-    trans_fn(cx, dtor.span, dtor.node.meth, dtor.node.id,\n+    trans_fn(cx, dtor.span, dtor.node.meth, llfn,\n              some[ty_self_pair](tup(llself_ty, self_ty)),\n              ty_params, dtor.node.ann);\n \n@@ -8119,7 +8134,8 @@ fn trans_item(@local_ctxt cx, &ast::item item) {\n     alt (item.node) {\n         case (ast::item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n             auto sub_cx = extend_path(cx, name);\n-            trans_fn(sub_cx, item.span, f, fid, none[ty_self_pair],\n+            auto llfndecl = cx.ccx.item_ids.get(fid);\n+            trans_fn(sub_cx, item.span, f, llfndecl, none[ty_self_pair],\n                      tps, ann);\n         }\n         case (ast::item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n@@ -8168,12 +8184,10 @@ fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp,\n                     ast::def_id id) {\n \n     auto llfty;\n-    auto llpairty;\n     alt (ty::struct(ccx.tcx, node_ann_type(ccx, ann))) {\n         case (ty::ty_fn(?proto, ?inputs, ?output, _, _)) {\n             llfty = type_of_fn(ccx, sp, proto, inputs, output,\n                                vec::len[ast::ty_param](ty_params));\n-            llpairty = T_fn_pair(ccx.tn, llfty);\n         }\n         case (_) {\n             ccx.sess.bug(\"decl_fn_and_pair(): fn item doesn't have fn type!\");\n@@ -8192,7 +8206,7 @@ fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp,\n \n     // Declare the global constant pair that points to it.\n     let str ps = mangle_exported_name(ccx, path, node_ann_type(ccx, ann));\n-    register_fn_pair(ccx, ps, llpairty, llfn, id);\n+    register_fn_pair(ccx, ps, llfty, llfn, id);\n \n     if (is_main) {\n         if (ccx.main_fn != none[ValueRef]) {\n@@ -8205,22 +8219,25 @@ fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp,\n \n }\n \n-fn register_fn_pair(&@crate_ctxt cx, str ps, TypeRef llpairty, ValueRef llfn,\n-                    ast::def_id id) {\n-    let ValueRef gvar = llvm::LLVMAddGlobal(cx.llmod, llpairty,\n-                                           str::buf(ps));\n-    auto pair = C_struct([llfn,\n-                             C_null(T_opaque_closure_ptr(cx.tn))]);\n-\n+fn create_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n+                  bool external) -> ValueRef {\n+    auto gvar = llvm::LLVMAddGlobal\n+        (cx.llmod, T_fn_pair(cx.tn, llfnty), str::buf(ps));\n+    auto pair = C_struct([llfn, C_null(T_opaque_closure_ptr(cx.tn))]);\n     llvm::LLVMSetInitializer(gvar, pair);\n     llvm::LLVMSetGlobalConstant(gvar, True);\n-\n-    // FIXME: We should also hide the unexported pairs in crates.\n-    if (!cx.sess.get_opts().shared) {\n+    if (!external) {\n         llvm::LLVMSetLinkage(gvar, lib::llvm::LLVMInternalLinkage\n                              as llvm::Linkage);\n     }\n+    ret gvar;\n+}\n \n+fn register_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n+                    ast::def_id id) {\n+    // FIXME: We should also hide the unexported pairs in crates.\n+    auto gvar = create_fn_pair(cx, ps, llfnty, llfn,\n+                               cx.sess.get_opts().shared);\n     cx.item_ids.insert(id, llfn);\n     cx.item_symbols.insert(id, ps);\n     cx.fn_pairs.insert(id, gvar);\n@@ -8268,10 +8285,9 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx,\n                                                         wrapper_type);\n \n     // Declare the global constant pair that points to it.\n-    auto wrapper_pair_type = T_fn_pair(ccx.tn, wrapper_type);\n     let str ps = mangle_exported_name(ccx, path, node_ann_type(ccx, ann));\n \n-    register_fn_pair(ccx, ps, wrapper_pair_type, wrapper_fn, id);\n+    register_fn_pair(ccx, ps, wrapper_type, wrapper_fn, id);\n \n     // Build the wrapper.\n     auto fcx = new_fn_ctxt(new_local_ctxt(ccx), sp, wrapper_fn);"}, {"sha": "7d45e3f16ad0dd147f367035216a467007f027ca", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -301,6 +301,10 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n                 }\n             }\n         }\n+        // FIXME this was just put in here as a placeholder\n+        case (expr_fn(?f, ?a)) {\n+            clear_pp(expr_pp(fcx.ccx, e));\n+        }\n         case (expr_block(?b, ?a)) {\n             find_pre_post_block(fcx, b);\n             auto p = block_pp(fcx.ccx, b);"}, {"sha": "3fd160d6a647021a203b85570ea831a27fbd5edf", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -223,6 +223,10 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n     case (expr_lit(?l,?a)) {\n         ret pure_exp(fcx.ccx, a, pres);\n     }\n+    // FIXME This was just put in here as a placeholder\n+    case (expr_fn(?f,?a)) {\n+        ret pure_exp(fcx.ccx, a, pres);\n+    }\n     case (expr_block(?b,?a)) {\n         changed = find_pre_post_state_block(fcx, pres, b)\n            || changed;"}, {"sha": "0cb2395601860cb419a71dc0a9f6ff0af73b362a", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -1662,6 +1662,7 @@ fn expr_ann(&@ast::expr e) -> ast::ann {\n         case (ast::expr_for_each(_,_,_,?a)) { ret a; }\n         case (ast::expr_do_while(_,_,?a)) { ret a; }\n         case (ast::expr_alt(_,_,?a)) { ret a; }\n+        case (ast::expr_fn(_,?a)) { ret a; }\n         case (ast::expr_block(_,?a)) { ret a; }\n         case (ast::expr_move(_,_,?a)) { ret a; }\n         case (ast::expr_assign(_,_,?a)) { ret a; }"}, {"sha": "2a879bbfd5781329708d5f0f23c378e498f63e9a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -474,14 +474,18 @@ mod collect {\n                      &ast::fn_decl decl,\n                      ast::proto proto,\n                      &vec[ast::ty_param] ty_params,\n-                     &ast::def_id def_id) -> ty::ty_param_count_and_ty {\n+                     &option::t[ast::def_id] def_id)\n+        -> ty::ty_param_count_and_ty {\n         auto input_tys = vec::map[ast::arg,arg](ty_of_arg, decl.inputs);\n         auto output_ty = convert(decl.output);\n         auto t_fn = ty::mk_fn(cx.tcx, proto, input_tys, output_ty,\n                               decl.cf, decl.constraints);\n         auto ty_param_count = vec::len[ast::ty_param](ty_params);\n         auto tpt = tup(ty_param_count, t_fn);\n-        cx.tcx.tcache.insert(def_id, tpt);\n+        alt (def_id) {\n+            case (some(?did)) { cx.tcx.tcache.insert(did, tpt); }\n+            case (_) {}\n+        }\n         ret tpt;\n     }\n \n@@ -589,7 +593,7 @@ mod collect {\n             case (ast::item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n                 auto f = bind ty_of_arg(cx, _);\n                 ret ty_of_fn_decl(cx, convert, f, fn_info.decl, fn_info.proto,\n-                                  tps, def_id);\n+                                  tps, some(def_id));\n             }\n \n             case (ast::item_obj(?ident, ?obj_info, ?tps, ?odid, _)) {\n@@ -1897,6 +1901,17 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             write::ty_only_fixup(fcx, a.id, result_ty);\n         }\n \n+        case (ast::expr_fn(?f, ?a)) {\n+            auto cx = @rec(tcx = fcx.ccx.tcx);\n+            auto convert = bind ast_ty_to_ty\n+                (cx.tcx, bind collect::getter(cx, _), _);\n+            auto ty_of_arg = bind collect::ty_of_arg(cx, _);\n+            auto fty = collect::ty_of_fn_decl(cx, convert, ty_of_arg,\n+                                              f.decl, f.proto, [], none)._1;\n+            write::ty_only_fixup(fcx, a.id, fty);\n+            check_fn(fcx.ccx, f.decl, f.proto, f.body, a);\n+        }\n+\n         case (ast::expr_block(?b, ?a)) {\n             check_block(fcx, b);\n             alt (b.node.expr) {"}, {"sha": "5ede533564394dae3f73b0ec7c31a494fdbeab5f", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -335,6 +335,10 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n                 vt(v).visit_arm(a, e, v);\n             }\n         }\n+        case (expr_fn(?f, _)) {\n+            visit_fn_decl(f.decl, e, v);\n+            vt(v).visit_block(f.body, e, v);\n+        }\n         case (expr_block(?b, _)) {\n             vt(v).visit_block(b, e, v);\n         }"}, {"sha": "f6f7d7d77bce1e22e76bd461fbceb108fdcaf5f4", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -410,6 +410,10 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n                 v.visit_arm_post(a);\n             }\n         }\n+        case (ast::expr_fn(?f, ?a)) {\n+            walk_fn_decl(v, f.decl);\n+            walk_block(v, f.body);\n+        }\n         case (ast::expr_block(?b, _)) {\n             walk_block(v, b);\n         }"}, {"sha": "c5bfe230fc1472fe1d99e8abe93e81c5060b094e", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -671,6 +671,12 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             }\n             bclose(s, expr.span);\n         }\n+        case (ast::expr_fn(?f, _)) {\n+            head(s, \"fn\");\n+            print_fn_args_and_ret(s, f.decl);\n+            space(s.s);\n+            print_block(s, f.body);\n+        }\n         case (ast::expr_block(?block,_)) {\n             // containing cbox, will be closed by print-block at }\n             cbox(s, indent_unit);\n@@ -954,6 +960,10 @@ fn print_fn(&ps s, ast::fn_decl decl, ast::proto proto, str name,\n     }\n     word(s.s, name);\n     print_type_params(s, typarams);\n+    print_fn_args_and_ret(s, decl);\n+}\n+\n+fn print_fn_args_and_ret(&ps s, &ast::fn_decl decl) {\n     popen(s);\n     fn print_arg(&ps s, &ast::arg x) {\n         ibox(s, indent_unit);\n@@ -963,8 +973,7 @@ fn print_fn(&ps s, ast::fn_decl decl, ast::proto proto, str name,\n         word(s.s, x.ident);\n         end(s);\n     }\n-    auto f = print_arg;\n-    commasep[ast::arg](s, inconsistent, decl.inputs, f);\n+    commasep[ast::arg](s, inconsistent, decl.inputs, print_arg);\n     pclose(s);\n     maybe_print_comment(s, decl.output.span.lo);\n     if (decl.output.node != ast::ty_nil) {"}, {"sha": "8e87eb80ddee4035452ee7c90ef682be5d01a64b", "filename": "src/test/run-pass/fn-expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Ftest%2Frun-pass%2Ffn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471436a2996b2f141e6ceeac87362cfb321807ff/src%2Ftest%2Frun-pass%2Ffn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-expr.rs?ref=471436a2996b2f141e6ceeac87362cfb321807ff", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    auto x = fn(int a) -> int { ret a + 1; };\n+    assert (x(4) == 5);\n+}"}]}