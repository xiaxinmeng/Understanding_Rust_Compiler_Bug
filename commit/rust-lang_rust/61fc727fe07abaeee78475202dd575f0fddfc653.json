{"sha": "61fc727fe07abaeee78475202dd575f0fddfc653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmM3MjdmZTA3YWJhZWVlNzg0NzUyMDJkZDU3NWYwZmRkZmM2NTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-16T22:16:29Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Fuse PatternSource::Let & ::LetExpr.", "tree": {"sha": "3b4b4f787cf02666765483933fda5c8755ade8d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4b4f787cf02666765483933fda5c8755ade8d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fc727fe07abaeee78475202dd575f0fddfc653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fc727fe07abaeee78475202dd575f0fddfc653", "html_url": "https://github.com/rust-lang/rust/commit/61fc727fe07abaeee78475202dd575f0fddfc653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fc727fe07abaeee78475202dd575f0fddfc653/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a505d9d20a697d90242158ef1594c611cb23fbfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a505d9d20a697d90242158ef1594c611cb23fbfa", "html_url": "https://github.com/rust-lang/rust/commit/a505d9d20a697d90242158ef1594c611cb23fbfa"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "a9e4ffd5e7f02753a9801c0722bb4a7bf4610466", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61fc727fe07abaeee78475202dd575f0fddfc653/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc727fe07abaeee78475202dd575f0fddfc653/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=61fc727fe07abaeee78475202dd575f0fddfc653", "patch": "@@ -485,8 +485,6 @@ type BindingMap = FxHashMap<Ident, BindingInfo>;\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum PatternSource {\n     Match,\n-    // FIXME(54883): Consider fusing with `Let` below once let-statements support or-patterns.\n-    LetExpr,\n     Let,\n     For,\n     FnParam,\n@@ -496,7 +494,7 @@ impl PatternSource {\n     fn descr(self) -> &'static str {\n         match self {\n             PatternSource::Match => \"match binding\",\n-            PatternSource::Let | PatternSource::LetExpr => \"let binding\",\n+            PatternSource::Let => \"let binding\",\n             PatternSource::For => \"for binding\",\n             PatternSource::FnParam => \"function parameter\",\n         }\n@@ -3153,7 +3151,7 @@ impl<'a> Resolver<'a> {\n                 );\n             }\n             Some(..) if pat_src == PatternSource::Match ||\n-                        pat_src == PatternSource::LetExpr => {\n+                        pat_src == PatternSource::Let => {\n                 // `Variant1(a) | Variant2(a)`, ok\n                 // Reuse definition from the first `a`.\n                 res = self.ribs[ValueNS].last_mut().unwrap().bindings[&ident];\n@@ -4348,7 +4346,7 @@ impl<'a> Resolver<'a> {\n \n             ExprKind::Let(ref pats, ref scrutinee) => {\n                 self.visit_expr(scrutinee);\n-                self.resolve_pats(pats, PatternSource::LetExpr);\n+                self.resolve_pats(pats, PatternSource::Let);\n             }\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {"}]}