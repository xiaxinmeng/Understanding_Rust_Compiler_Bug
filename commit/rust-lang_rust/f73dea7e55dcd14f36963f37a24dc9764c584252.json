{"sha": "f73dea7e55dcd14f36963f37a24dc9764c584252", "node_id": "C_kwDOAAsO6NoAKGY3M2RlYTdlNTVkY2QxNGYzNjk2M2YzN2EyNGRjOTc2NGM1ODQyNTI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T15:25:49Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T15:42:12Z"}, "message": "Fix simd_bitmask", "tree": {"sha": "17c369e64fb867671fcc965c1066ccad773a0f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c369e64fb867671fcc965c1066ccad773a0f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73dea7e55dcd14f36963f37a24dc9764c584252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73dea7e55dcd14f36963f37a24dc9764c584252", "html_url": "https://github.com/rust-lang/rust/commit/f73dea7e55dcd14f36963f37a24dc9764c584252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73dea7e55dcd14f36963f37a24dc9764c584252/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa8b264267abebce9ae991ac1f982d9c43b1721", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa8b264267abebce9ae991ac1f982d9c43b1721", "html_url": "https://github.com/rust-lang/rust/commit/1fa8b264267abebce9ae991ac1f982d9c43b1721"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "8a780e88147809aa2cad80bf6d0b9d78fb5eb5b8", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f73dea7e55dcd14f36963f37a24dc9764c584252/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f73dea7e55dcd14f36963f37a24dc9764c584252/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=f73dea7e55dcd14f36963f37a24dc9764c584252", "patch": "@@ -38,7 +38,6 @@ src/test/ui/simd/issue-17170.rs\n src/test/ui/simd/issue-39720.rs\n src/test/ui/simd/issue-85915-simd-ptrs.rs\n src/test/ui/simd/issue-89193.rs\n-src/test/ui/simd/simd-bitmask.rs\n src/test/ui/simd/type-generic-monomorphisation-extern-nonnull-ptr.rs\n src/test/ui/sse2.rs\n src/test/ui/statics/issue-91050-1.rs"}, {"sha": "00cd42d8e9dc0106091c75654ad553af6324d3fb", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f73dea7e55dcd14f36963f37a24dc9764c584252/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f73dea7e55dcd14f36963f37a24dc9764c584252/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=f73dea7e55dcd14f36963f37a24dc9764c584252", "patch": "@@ -20,3 +20,4 @@ src/test/ui/simd/intrinsic/inlining-issue67557-ice.rs\n src/test/ui/simd/intrinsic/inlining-issue67557.rs\n src/test/ui/simd/monomorphize-shuffle-index.rs\n src/test/ui/simd/shuffle.rs\n+src/test/ui/simd/simd-bitmask.rs"}, {"sha": "7d789009826567967393b2b5150cc81040cd6769", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f73dea7e55dcd14f36963f37a24dc9764c584252/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73dea7e55dcd14f36963f37a24dc9764c584252/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=f73dea7e55dcd14f36963f37a24dc9764c584252", "patch": "@@ -337,36 +337,39 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let vector = args[0].immediate();\n         let vector_type = vector.get_type().dyncast_vector().expect(\"vector type\");\n         let elem_type = vector_type.get_element_type();\n-        let mut shifts = vec![];\n-        let mut masks = vec![];\n-        let mut mask = 1;\n-        for i in 0..in_len {\n-            shifts.push(bx.context.new_rvalue_from_int(elem_type, i as i32));\n-            masks.push(bx.context.new_rvalue_from_int(elem_type, mask));\n-            mask <<= 1;\n-        }\n-        masks.reverse();\n-        let shifts = bx.context.new_rvalue_from_vector(None, vector.get_type(), &shifts);\n-        let shifted = vector >> shifts;\n-        let masks = bx.context.new_rvalue_from_vector(None, vector.get_type(), &masks);\n-        let masked = shifted & masks;\n-        let reduced = bx.vector_reduce_op(masked, BinaryOp::BitwiseOr);\n \n         let expected_int_bits = in_len.max(8);\n         let expected_bytes = expected_int_bits / 8 + ((expected_int_bits % 8 > 0) as u64);\n \n+        // FIXME(antoyo): that's not going to work for masks bigger than 128 bits.\n+        let result_type = bx.type_ix(expected_int_bits);\n+        let mut result = bx.context.new_rvalue_zero(result_type);\n+\n+        let elem_size = elem_type.get_size() * 8;\n+        let sign_shift = bx.context.new_rvalue_from_int(elem_type, elem_size as i32);\n+        let one = bx.context.new_rvalue_one(elem_type);\n+\n+        let mut shift = 0;\n+        for i in 0..in_len {\n+            let elem = bx.extract_element(vector, bx.context.new_rvalue_from_int(bx.int_type, i as i32));\n+            let shifted = elem >> sign_shift;\n+            let masked = shifted & one;\n+            result = result | (bx.context.new_cast(None, masked, result_type) << bx.context.new_rvalue_from_int(result_type, shift));\n+            shift += 1;\n+        }\n+\n         match ret_ty.kind() {\n             ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => {\n                 // Zero-extend iN to the bitmask type:\n-                return Ok(bx.zext(reduced, bx.type_ix(expected_int_bits)));\n+                return Ok(result);\n             }\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n                     && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 // Zero-extend iN to the array length:\n-                let ze = bx.zext(reduced, bx.type_ix(expected_bytes * 8));\n+                let ze = bx.zext(result, bx.type_ix(expected_bytes * 8));\n \n                 // Convert the integer to a byte array\n                 let ptr = bx.alloca(bx.type_ix(expected_bytes * 8), Align::ONE);"}]}