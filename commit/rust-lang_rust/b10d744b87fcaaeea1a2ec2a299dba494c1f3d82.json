{"sha": "b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "node_id": "C_kwDOAAsO6NoAKGIxMGQ3NDRiODdmY2FhZWVhMWEyZWMyYTI5OWRiYTQ5NGMxZjNkODI", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-02-12T07:59:57Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-02-13T17:47:12Z"}, "message": "Allow shortcuts to directories to be used for `./x.py fmt`\n\nFixes #107944.\n\nMaximum recursive search depth is 3 and only accepts shortcuts for\ndirectories (single component paths, such as `./x.py fmt std`). If\nthere are no shortcut candidates but single componenet path(s) are\ngiven, it falls back to the previous behavior to panic with unable to\nfind directory. If there are multiple shortcut candidates for a given\nsingle component path, the shortcut candidates are considered\nambiguous, are then ignored, and the single component path is accepted\nas-is.\n\nAfter this change, `./x.py fmt std` no longer panics and formats\n`library/std` instead.", "tree": {"sha": "1317a33741507ba44dd8e986d5e4e0e2f2d38480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1317a33741507ba44dd8e986d5e4e0e2f2d38480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmPqd/MACgkQxf1dMgFP\n20fpdQ//b0HBrKXXuEo+D57mlLOWdltjSbJ/C5ZZSaqI6zEI4PhOb+9eNc+JObiA\nOCv0cSc2mD6cPlXTraDwv7DET0ap02LJ+rMrXJ79clWaPVIdKaPPpJ5nHsPqiFHh\nV9PgOCUwKyx0rShIncJGGeN7Sc7/wxhnnqLRJMf49DckM6SNJ4b5aEBSLcKR7t3A\n27VM1DhWjWTMVjhb/VCSzh0N+NVBqbtg+yzWhBFiJrWLqDZF9YsDCGuS6SQ74W7n\nc4VquZRcW25TMBiakNThFqmVfKS8HlngG3OjERCIPPWwuzRFhYtikCmFjgxBZT0V\n3ElQ66MSyD1R15RyH4ouqHzilHHNdUXLRK4onqHoJtySROToBtPd+v+HemBKjH5j\nfPSmUGYzYcvp/2bNbpEll64Si3ZJxZMu6PMMi5oeZViJxknta7Eb9RcwmUxlrN7B\ngkDJDMUIt1g7rqk5hyVIxXV/6QL1pfnjnd9QNlZ2QLgRfhtgCI30lrNiTnokEf+e\nQNapP2+9VusGfqt0S8wY6557Ra7BdFJZe3T5wSvUFkh/ebX2XsQwoipAr+/qA08t\neQXsl63geJvSdbVe9E9+8dQZJjekkoDzv1qEYH1hnBq7I5C28Vyd9NE7CoPSy9mh\niQo+2nC/Ja+7mH35lrBDAlCqqzLOHtQ+QuBiwUuTsYA/iH917Cg=\n=0t5X\n-----END PGP SIGNATURE-----", "payload": "tree 1317a33741507ba44dd8e986d5e4e0e2f2d38480\nparent b7089e0dd3e988270f34f182d3749ea5fff5a18f\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1676188797 +0800\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1676310432 +0800\n\nAllow shortcuts to directories to be used for `./x.py fmt`\n\nFixes #107944.\n\nMaximum recursive search depth is 3 and only accepts shortcuts for\ndirectories (single component paths, such as `./x.py fmt std`). If\nthere are no shortcut candidates but single componenet path(s) are\ngiven, it falls back to the previous behavior to panic with unable to\nfind directory. If there are multiple shortcut candidates for a given\nsingle component path, the shortcut candidates are considered\nambiguous, are then ignored, and the single component path is accepted\nas-is.\n\nAfter this change, `./x.py fmt std` no longer panics and formats\n`library/std` instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "html_url": "https://github.com/rust-lang/rust/commit/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7089e0dd3e988270f34f182d3749ea5fff5a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7089e0dd3e988270f34f182d3749ea5fff5a18f", "html_url": "https://github.com/rust-lang/rust/commit/b7089e0dd3e988270f34f182d3749ea5fff5a18f"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "615794958d087ee0e51ed22ac597adfeb2a22aa9", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "patch": "@@ -193,10 +193,46 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n     let walker = match paths.get(0) {\n         Some(first) => {\n-            let mut walker = WalkBuilder::new(first);\n+            let find_shortcut_candidates = |p: &PathBuf| {\n+                let mut candidates = Vec::new();\n+                for candidate in WalkBuilder::new(src.clone()).max_depth(Some(3)).build() {\n+                    if let Ok(entry) = candidate {\n+                        if let Some(dir_name) = p.file_name() {\n+                            if entry.path().is_dir() && entry.file_name() == dir_name {\n+                                candidates.push(entry.into_path());\n+                            }\n+                        }\n+                    }\n+                }\n+                candidates\n+            };\n+\n+            // Only try to look for shortcut candidates for single component paths like\n+            // `std` and not for e.g. relative paths like `../library/std`.\n+            let should_look_for_shortcut_dir = |p: &PathBuf| p.components().count() == 1;\n+\n+            let mut walker = if should_look_for_shortcut_dir(first) {\n+                if let [single_candidate] = &find_shortcut_candidates(first)[..] {\n+                    WalkBuilder::new(single_candidate)\n+                } else {\n+                    WalkBuilder::new(first)\n+                }\n+            } else {\n+                WalkBuilder::new(first)\n+            };\n+\n             for path in &paths[1..] {\n-                walker.add(path);\n+                if should_look_for_shortcut_dir(path) {\n+                    if let [single_candidate] = &find_shortcut_candidates(path)[..] {\n+                        walker.add(single_candidate);\n+                    } else {\n+                        walker.add(path);\n+                    }\n+                } else {\n+                    walker.add(path);\n+                }\n             }\n+\n             walker\n         }\n         None => WalkBuilder::new(src.clone()),"}]}