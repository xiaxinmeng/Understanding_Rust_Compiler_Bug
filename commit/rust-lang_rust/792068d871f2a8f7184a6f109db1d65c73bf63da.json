{"sha": "792068d871f2a8f7184a6f109db1d65c73bf63da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MjA2OGQ4NzFmMmE4ZjcxODRhNmYxMDlkYjFkNjVjNzNiZjYzZGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T22:45:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T22:45:48Z"}, "message": "rt: Remove unblock call from rust_task::yield", "tree": {"sha": "4250b4b01f7837ef34f05d9be8c53e89533f82f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4250b4b01f7837ef34f05d9be8c53e89533f82f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792068d871f2a8f7184a6f109db1d65c73bf63da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792068d871f2a8f7184a6f109db1d65c73bf63da", "html_url": "https://github.com/rust-lang/rust/commit/792068d871f2a8f7184a6f109db1d65c73bf63da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792068d871f2a8f7184a6f109db1d65c73bf63da/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f339b481a8ae255f012f2218c8f5b5fc3d451ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f339b481a8ae255f012f2218c8f5b5fc3d451ce", "html_url": "https://github.com/rust-lang/rust/commit/0f339b481a8ae255f012f2218c8f5b5fc3d451ce"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "9acee18c8cc2c02b30b65ac090dad83d1860f75b", "filename": "src/lib/comm.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=792068d871f2a8f7184a6f109db1d65c73bf63da", "patch": "@@ -49,7 +49,8 @@ native mod rustrt {\n     fn get_port_id(po: *rust_port) -> port_id;\n     fn rust_port_size(po: *rust_port) -> ctypes::size_t;\n     fn port_recv(dptr: *uint, po: *rust_port,\n-                 yield: *ctypes::uintptr_t);\n+                 yield: *ctypes::uintptr_t,\n+                 killed: *ctypes::uintptr_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -152,20 +153,29 @@ fn recv_<send T>(p: *rustrt::rust_port) -> T {\n     // that will grab the value of the return pointer, then call this\n     // function, which we will then use to call the runtime.\n     fn recv(dptr: *uint, port: *rustrt::rust_port,\n-                    yield: *ctypes::uintptr_t) unsafe {\n-        rustrt::port_recv(dptr,\n-                          port, yield);\n+            yield: *ctypes::uintptr_t,\n+            killed: *ctypes::uintptr_t) unsafe {\n+        rustrt::port_recv(dptr, port, yield, killed);\n     }\n     let yield = 0u;\n     let yieldp = ptr::addr_of(yield);\n-    let res = rusti::call_with_retptr(bind recv(_, p, yieldp));\n+    let killed = 0u;\n+    let killedp = ptr::addr_of(killed);\n+    let res = rusti::call_with_retptr(bind recv(_, p, yieldp, killedp));\n+    if killed != 0u {\n+        fail_killed();\n+    }\n     if yield != 0u {\n         // Data isn't available yet, so res has not been initialized.\n         task::yield();\n     }\n     ret res;\n }\n \n+fn fail_killed() -> ! {\n+    fail \"killed\";\n+}\n+\n /*\n Function: chan\n "}, {"sha": "ff83cb7ec6b12cfc07f4b4f1f23e8472a11418c6", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=792068d871f2a8f7184a6f109db1d65c73bf63da", "patch": "@@ -516,7 +516,10 @@ rust_task_sleep(rust_task *task, size_t time_in_us) {\n }\n \n extern \"C\" CDECL void\n-port_recv(uintptr_t *dptr, rust_port *port, uintptr_t *yield) {\n+port_recv(uintptr_t *dptr, rust_port *port,\n+          uintptr_t *yield, uintptr_t *killed) {\n+    *yield = false;\n+    *killed = false;\n     rust_task *task = rust_scheduler::get_task();\n     {\n         scoped_lock with(port->lock);\n@@ -526,7 +529,13 @@ port_recv(uintptr_t *dptr, rust_port *port, uintptr_t *yield) {\n             (uintptr_t) port, (uintptr_t) dptr, port->unit_sz);\n \n         if (port->receive(dptr)) {\n-            *yield = false;\n+            return;\n+        }\n+\n+        // If this task has been killed then we're not going to bother\n+        // blocking, we have to unwind.\n+        if (task->killed) {\n+            *killed = true;\n             return;\n         }\n "}, {"sha": "39f8488e784b811b831f9ee2dbad4e6531b87d90", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/792068d871f2a8f7184a6f109db1d65c73bf63da/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=792068d871f2a8f7184a6f109db1d65c73bf63da", "patch": "@@ -272,14 +272,10 @@ rust_task::yield(size_t time_in_us) {\n         name, this, time_in_us);\n \n     if (killed) {\n-        // Receive may have blocked before yielding\n-        unblock();\n+        A(sched, !blocked(), \"Shouldn't be blocked before failing\");\n         fail();\n     }\n \n-    // FIXME: If we are blocked, and get killed right here then we may never\n-    // know it.\n-\n     yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler."}]}