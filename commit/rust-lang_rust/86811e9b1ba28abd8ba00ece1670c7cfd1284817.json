{"sha": "86811e9b1ba28abd8ba00ece1670c7cfd1284817", "node_id": "C_kwDOAAsO6NoAKDg2ODExZTliMWJhMjhhYmQ4YmEwMGVjZTE2NzBjN2NmZDEyODQ4MTc", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-10-06T22:14:06Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-10-06T22:14:06Z"}, "message": "make test module detection more strict", "tree": {"sha": "de6c3a558eaa4ed309dbc41c516ce62c8645d494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de6c3a558eaa4ed309dbc41c516ce62c8645d494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86811e9b1ba28abd8ba00ece1670c7cfd1284817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86811e9b1ba28abd8ba00ece1670c7cfd1284817", "html_url": "https://github.com/rust-lang/rust/commit/86811e9b1ba28abd8ba00ece1670c7cfd1284817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86811e9b1ba28abd8ba00ece1670c7cfd1284817/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11492c75a39b26c19f3e5655d425b2db8a0b4e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/11492c75a39b26c19f3e5655d425b2db8a0b4e00", "html_url": "https://github.com/rust-lang/rust/commit/11492c75a39b26c19f3e5655d425b2db8a0b4e00"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "673830eea8a453365a3fb165bad943d9a8a07389", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/86811e9b1ba28abd8ba00ece1670c7cfd1284817/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86811e9b1ba28abd8ba00ece1670c7cfd1284817/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=86811e9b1ba28abd8ba00ece1670c7cfd1284817", "patch": "@@ -252,11 +252,7 @@ pub fn is_lang_ctor(cx: &LateContext<'_>, qpath: &QPath<'_>, lang_item: LangItem\n /// Returns `true` if this `span` was expanded by any macro.\n #[must_use]\n pub fn in_macro(span: Span) -> bool {\n-    if span.from_expansion() {\n-        !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-    } else {\n-        false\n-    }\n+    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n }\n \n pub fn is_unit_expr(expr: &Expr<'_>) -> bool {\n@@ -1286,10 +1282,9 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     }\n     let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n     if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n-        value == v\n-    } else {\n-        false\n+        return value == v;\n     }\n+    false\n }\n \n /// Checks whether the given expression is a constant literal of the given value.\n@@ -1316,7 +1311,7 @@ pub fn is_adjusted(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n \n /// Returns the pre-expansion span if is this comes from an expansion of the\n /// macro `name`.\n-/// See also `is_direct_expn_of`.\n+/// See also [`is_direct_expn_of`].\n #[must_use]\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n@@ -1339,13 +1334,13 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n \n /// Returns the pre-expansion span if the span directly comes from an expansion\n /// of the macro `name`.\n-/// The difference with `is_expn_of` is that in\n-/// ```rust,ignore\n+/// The difference with [`is_expn_of`] is that in\n+/// ```rust\n+/// # macro_rules! foo { ($e:tt) => { $e } }; macro_rules! bar { ($e:expr) => { $e } }\n /// foo!(bar!(42));\n /// ```\n /// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only\n-/// `bar!` by\n-/// `is_direct_expn_of`.\n+/// from `bar!` by `is_direct_expn_of`.\n #[must_use]\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n     if span.from_expansion() {\n@@ -1468,11 +1463,9 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n }\n \n pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n-    if_chain! {\n-        if let TyKind::Path(QPath::Resolved(None, path)) = slf.kind;\n-        if let Res::SelfTy(..) = path.res;\n-        then {\n-            return true\n+    if let TyKind::Path(QPath::Resolved(None, path)) = slf.kind {\n+        if let Res::SelfTy(..) = path.res {\n+            return true;\n         }\n     }\n     false\n@@ -2064,15 +2057,12 @@ macro_rules! unwrap_cargo_metadata {\n }\n \n pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if_chain! {\n-        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n-        if let Res::Def(_, def_id) = path.res;\n-        then {\n-            cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr)\n-        } else {\n-            false\n+    if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+        if let Res::Def(_, def_id) = path.res {\n+            return cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr);\n         }\n     }\n+    false\n }\n \n /// Checks whether item either has `test` attribute applied, or\n@@ -2084,7 +2074,7 @@ pub fn is_test_module_or_function(tcx: TyCtxt<'_>, item: &Item<'_>) -> bool {\n         }\n     }\n \n-    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n+    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().split('_').any(|a| a == \"test\" || a == \"tests\")\n }\n \n macro_rules! op_utils {"}, {"sha": "98bc1e80731ff3934643d2c565f70ad241ddd7f1", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=86811e9b1ba28abd8ba00ece1670c7cfd1284817", "patch": "@@ -230,4 +230,12 @@ mod super_imports {\n             let _ = foofoo();\n         }\n     }\n+\n+    mod attestation_should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n }"}, {"sha": "4ef61f9245b58f9420daded6c79a1d84e201edb9", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=86811e9b1ba28abd8ba00ece1670c7cfd1284817", "patch": "@@ -231,4 +231,12 @@ mod super_imports {\n             let _ = foofoo();\n         }\n     }\n+\n+    mod attestation_should_be_replaced {\n+        use super::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n }"}, {"sha": "d7af0c046e88694f34a1ff399931fe346cc8904c", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86811e9b1ba28abd8ba00ece1670c7cfd1284817/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=86811e9b1ba28abd8ba00ece1670c7cfd1284817", "patch": "@@ -122,5 +122,11 @@ error: usage of wildcard import\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n-error: aborting due to 20 previous errors\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:236:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n "}]}