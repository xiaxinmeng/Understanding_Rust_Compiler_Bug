{"sha": "6e740ae9348508544f41076ea9c7f8b4c3848688", "node_id": "C_kwDOAAsO6NoAKDZlNzQwYWU5MzQ4NTA4NTQ0ZjQxMDc2ZWE5YzdmOGI0YzM4NDg2ODg", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-19T14:59:36Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-19T14:59:36Z"}, "message": "always add align attributes", "tree": {"sha": "998ac4586f04255d709732dfe20e33ee53f33039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998ac4586f04255d709732dfe20e33ee53f33039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e740ae9348508544f41076ea9c7f8b4c3848688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e740ae9348508544f41076ea9c7f8b4c3848688", "html_url": "https://github.com/rust-lang/rust/commit/6e740ae9348508544f41076ea9c7f8b4c3848688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e740ae9348508544f41076ea9c7f8b4c3848688/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbdc8c19b4b1e581b8b83a513b11c4c4248d0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbdc8c19b4b1e581b8b83a513b11c4c4248d0fc", "html_url": "https://github.com/rust-lang/rust/commit/dcbdc8c19b4b1e581b8b83a513b11c4c4248d0fc"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5b8cc238480e1cf2483472c8c47ce983f63f7d8b", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e740ae9348508544f41076ea9c7f8b4c3848688/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e740ae9348508544f41076ea9c7f8b4c3848688/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=6e740ae9348508544f41076ea9c7f8b4c3848688", "patch": "@@ -59,6 +59,9 @@ impl ArgAttributesExt for ArgAttributes {\n                     llattr.apply_llfn(idx, llfn);\n                 }\n             }\n+            if let Some(align) = self.pointee_align {\n+                llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => llvm::Attribute::ZExt.apply_llfn(idx, llfn),\n@@ -77,9 +80,6 @@ impl ArgAttributesExt for ArgAttributes {\n                 }\n                 regular -= ArgAttribute::NonNull;\n             }\n-            if let Some(align) = self.pointee_align {\n-                llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n-            }\n             for (attr, llattr) in OPTIMIZATION_ATTRIBUTES {\n                 if regular.contains(attr) {\n                     llattr.apply_llfn(idx, llfn);\n@@ -105,6 +105,13 @@ impl ArgAttributesExt for ArgAttributes {\n                     llattr.apply_callsite(idx, callsite);\n                 }\n             }\n+            if let Some(align) = self.pointee_align {\n+                llvm::LLVMRustAddAlignmentCallSiteAttr(\n+                    callsite,\n+                    idx.as_uint(),\n+                    align.bytes() as u32,\n+                );\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => llvm::Attribute::ZExt.apply_callsite(idx, callsite),\n@@ -127,13 +134,6 @@ impl ArgAttributesExt for ArgAttributes {\n                 }\n                 regular -= ArgAttribute::NonNull;\n             }\n-            if let Some(align) = self.pointee_align {\n-                llvm::LLVMRustAddAlignmentCallSiteAttr(\n-                    callsite,\n-                    idx.as_uint(),\n-                    align.bytes() as u32,\n-                );\n-            }\n             for (attr, llattr) in OPTIMIZATION_ATTRIBUTES {\n                 if regular.contains(attr) {\n                     llattr.apply_callsite(idx, callsite);"}, {"sha": "1d740a4b3290bfeae6dc60cc7257fdf3e1222768", "filename": "src/test/codegen/function-arguments-noopt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e740ae9348508544f41076ea9c7f8b4c3848688/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e740ae9348508544f41076ea9c7f8b4c3848688/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs?ref=6e740ae9348508544f41076ea9c7f8b4c3848688", "patch": "@@ -23,7 +23,7 @@ pub fn boolean_call(x: bool, f: fn(bool) -> bool) -> bool {\n   f(x)\n }\n \n-// CHECK: define i32* @borrow(i32* %x)\n+// CHECK: define align 4 i32* @borrow(i32* align 4 %x)\n #[no_mangle]\n pub fn borrow(x: &i32) -> &i32 {\n   x\n@@ -32,7 +32,7 @@ pub fn borrow(x: &i32) -> &i32 {\n // CHECK-LABEL: @borrow_call\n #[no_mangle]\n pub fn borrow_call(x: &i32, f: fn(&i32) -> &i32) -> &i32 {\n-  // CHECK: call i32* %f(i32* %x)\n+  // CHECK: call align 4 i32* %f(i32* align 4 %x)\n   f(x)\n }\n "}]}