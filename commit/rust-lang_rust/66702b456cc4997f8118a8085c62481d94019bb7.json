{"sha": "66702b456cc4997f8118a8085c62481d94019bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzAyYjQ1NmNjNDk5N2Y4MTE4YTgwODVjNjI0ODFkOTQwMTliYjc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-25T06:46:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-25T06:46:14Z"}, "message": "save-analysis: dedup macro references", "tree": {"sha": "e350f081c24a63d7eb76c4f6c6dd4a645c9787d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e350f081c24a63d7eb76c4f6c6dd4a645c9787d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66702b456cc4997f8118a8085c62481d94019bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66702b456cc4997f8118a8085c62481d94019bb7", "html_url": "https://github.com/rust-lang/rust/commit/66702b456cc4997f8118a8085c62481d94019bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66702b456cc4997f8118a8085c62481d94019bb7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c46c6c59dbee8d6385f8924fe27cc5a7893841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c46c6c59dbee8d6385f8924fe27cc5a7893841f", "html_url": "https://github.com/rust-lang/rust/commit/7c46c6c59dbee8d6385f8924fe27cc5a7893841f"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "ca27bd76fff7855e93e1d660533cd65353cf0ac8", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66702b456cc4997f8118a8085c62481d94019bb7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66702b456cc4997f8118a8085c62481d94019bb7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=66702b456cc4997f8118a8085c62481d94019bb7", "patch": "@@ -30,6 +30,7 @@ use rustc::hir::map::Node;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n \n+use std::collections::HashSet;\n use std::path::Path;\n \n use syntax::ast::{self, NodeId, PatKind, Attribute, CRATE_NODE_ID};\n@@ -74,6 +75,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n     // mac_defs: HashSet<Span>,\n+    macro_calls: HashSet<Span>,\n }\n \n impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n@@ -89,6 +91,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: HashSet::new(),\n+            macro_calls: HashSet::new(),\n         }\n     }\n \n@@ -972,11 +975,19 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     /// callsite spans to record macro definition and use data, using the\n     /// mac_uses and mac_defs sets to prevent multiples.\n     fn process_macro_use(&mut self, span: Span) {\n+        let source_span = span.source_callsite();\n+        if self.macro_calls.contains(&source_span) {\n+            return;\n+        }\n+        self.macro_calls.insert(source_span);\n+\n         let data = match self.save_ctxt.get_macro_use_data(span) {\n             None => return,\n             Some(data) => data,\n         };\n \n+        self.dumper.macro_use(data);\n+\n         // FIXME write the macro def\n         // let mut hasher = DefaultHasher::new();\n         // data.callee_span.hash(&mut hasher);\n@@ -996,7 +1007,6 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         //         }.lower(self.tcx));\n         //     }\n         // }\n-        self.dumper.macro_use(data);\n     }\n \n     fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {"}]}