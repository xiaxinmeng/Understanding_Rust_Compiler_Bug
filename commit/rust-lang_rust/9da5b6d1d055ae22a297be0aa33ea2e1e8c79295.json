{"sha": "9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTViNmQxZDA1NWFlMjJhMjk3YmUwYWEzM2VhMmUxZThjNzkyOTU=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-08-10T12:56:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T12:56:25Z"}, "message": "Rollup merge of #5825 - giraffate:same_item_push, r=Manishearth\n\nAdd the new lint `same_item_push`\n\nchangelog: Add the new lint `same_item_push`\n\nFixed #4078. As I said in https://github.com/rust-lang/rust-clippy/issues/4078#issuecomment-658184195, I referrerd to https://github.com/rust-lang/rust-clippy/pull/4647.", "tree": {"sha": "937ff66e8597bd0b49aaaf1422f8cc825b8aaebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/937ff66e8597bd0b49aaaf1422f8cc825b8aaebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMUP5CRBK7hj4Ov3rIwAAdHIIADsJa2m8+/AE3EdnF1xc3rXB\n7T5ESyCDmxJAzh2ARcbMA2ePi1C14kYjwpVMkK1NEHyRDESH921ZolkRqWArw911\ngDE+blJuz9IkGps86KYLK1/nXOnWK83jK4IF5osSipI+CRMXdJboMyTGaNFvHeSN\nSVOfqXYJvnZ0aWKJIT+xeAVezwD1chqVDhd/nDHVBg1hNf+ismC7lNv6rCXB6hYY\nkf9i6C7TMVDpEQD3WKaMrkcwOwlZ0mL4UKuXzEj9E7WKKIl0WE/G5x7nDzYHesIK\nkFRljTQvPfRLrrxygiSk6TnL2278B3Bk+NFlraUWrIELbv12lIJZqusouW0NCPA=\n=Bkey\n-----END PGP SIGNATURE-----\n", "payload": "tree 937ff66e8597bd0b49aaaf1422f8cc825b8aaebf\nparent 72283689534272fb64952a3d7161de72513de6cf\nparent 610d4e3c8b1bfa27e059043554f4156fe1254142\nauthor Philipp Krones <hello@philkrones.com> 1597064185 +0200\ncommitter GitHub <noreply@github.com> 1597064185 +0200\n\nRollup merge of #5825 - giraffate:same_item_push, r=Manishearth\n\nAdd the new lint `same_item_push`\n\nchangelog: Add the new lint `same_item_push`\n\nFixed #4078. As I said in https://github.com/rust-lang/rust-clippy/issues/4078#issuecomment-658184195, I referrerd to https://github.com/rust-lang/rust-clippy/pull/4647.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "html_url": "https://github.com/rust-lang/rust/commit/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72283689534272fb64952a3d7161de72513de6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/72283689534272fb64952a3d7161de72513de6cf", "html_url": "https://github.com/rust-lang/rust/commit/72283689534272fb64952a3d7161de72513de6cf"}, {"sha": "610d4e3c8b1bfa27e059043554f4156fe1254142", "url": "https://api.github.com/repos/rust-lang/rust/commits/610d4e3c8b1bfa27e059043554f4156fe1254142", "html_url": "https://github.com/rust-lang/rust/commit/610d4e3c8b1bfa27e059043554f4156fe1254142"}], "stats": {"total": 286, "additions": 284, "deletions": 2}, "files": [{"sha": "c573b787f295e89579bf9a0751cc3bdca0ca8b37", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -1687,6 +1687,7 @@ Released 2018-09-13\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n+[`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "7931c97a328be393e78f3393826acde4b0659bb3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -608,6 +608,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::NEEDLESS_COLLECT,\n         &loops::NEEDLESS_RANGE_LOOP,\n         &loops::NEVER_LOOP,\n+        &loops::SAME_ITEM_PUSH,\n         &loops::WHILE_IMMUTABLE_CONDITION,\n         &loops::WHILE_LET_LOOP,\n         &loops::WHILE_LET_ON_ITERATOR,\n@@ -1295,6 +1296,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n+        LintId::of(&loops::SAME_ITEM_PUSH),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&loops::WHILE_LET_LOOP),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n@@ -1497,6 +1499,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n+        LintId::of(&loops::SAME_ITEM_PUSH),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n         LintId::of(&main_recursion::MAIN_RECURSION),\n         LintId::of(&manual_async_fn::MANUAL_ASYNC_FN),"}, {"sha": "8352a8a3d2c69573c3956bbf7bbb93f77318a4f7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 149, "deletions": 2, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -5,8 +5,9 @@ use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_trait_method,\n-    match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n+    match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n+    SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -419,6 +420,39 @@ declare_clippy_lint! {\n     \"variables used within while expression are not mutated in the body\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks whether a for loop is being used to push a constant\n+    /// value into a Vec.\n+    ///\n+    /// **Why is this bad?** This kind of operation can be expressed more succinctly with\n+    /// `vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n+    /// have better performance.\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let item1 = 2;\n+    /// let item2 = 3;\n+    /// let mut vec: Vec<u8> = Vec::new();\n+    /// for _ in 0..20 {\n+    ///    vec.push(item1);\n+    /// }\n+    /// for _ in 0..30 {\n+    ///     vec.push(item2);\n+    /// }\n+    /// ```\n+    /// could be written as\n+    /// ```rust\n+    /// let item1 = 2;\n+    /// let item2 = 3;\n+    /// let mut vec: Vec<u8> = vec![item1; 20];\n+    /// vec.resize(20 + 30, item2);\n+    /// ```\n+    pub SAME_ITEM_PUSH,\n+    style,\n+    \"the same item is pushed inside of a for loop\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n     NEEDLESS_RANGE_LOOP,\n@@ -435,6 +469,7 @@ declare_lint_pass!(Loops => [\n     NEVER_LOOP,\n     MUT_RANGE_BOUND,\n     WHILE_IMMUTABLE_CONDITION,\n+    SAME_ITEM_PUSH,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n@@ -740,6 +775,7 @@ fn check_for_loop<'tcx>(\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n     check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n+    detect_same_item_push(cx, pat, arg, body, expr);\n }\n \n fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n@@ -1016,6 +1052,117 @@ fn detect_manual_memcpy<'tcx>(\n     }\n }\n \n+// Scans the body of the for loop and determines whether lint should be given\n+struct SameItemPushVisitor<'a, 'tcx> {\n+    should_lint: bool,\n+    // this field holds the last vec push operation visited, which should be the only push seen\n+    vec_push: Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>,\n+    cx: &'a LateContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        match &expr.kind {\n+            // Non-determinism may occur ... don't give a lint\n+            ExprKind::Loop(_, _, _) | ExprKind::Match(_, _, _) => self.should_lint = false,\n+            ExprKind::Block(block, _) => self.visit_block(block),\n+            _ => {},\n+        }\n+    }\n+\n+    fn visit_block(&mut self, b: &'tcx Block<'_>) {\n+        for stmt in b.stmts.iter() {\n+            self.visit_stmt(stmt);\n+        }\n+    }\n+\n+    fn visit_stmt(&mut self, s: &'tcx Stmt<'_>) {\n+        let vec_push_option = get_vec_push(self.cx, s);\n+        if vec_push_option.is_none() {\n+            // Current statement is not a push so visit inside\n+            match &s.kind {\n+                StmtKind::Expr(expr) | StmtKind::Semi(expr) => self.visit_expr(&expr),\n+                _ => {},\n+            }\n+        } else {\n+            // Current statement is a push ...check whether another\n+            // push had been previously done\n+            if self.vec_push.is_none() {\n+                self.vec_push = vec_push_option;\n+            } else {\n+                // There are multiple pushes ... don't lint\n+                self.should_lint = false;\n+            }\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+// Given some statement, determine if that statement is a push on a Vec. If it is, return\n+// the Vec being pushed into and the item being pushed\n+fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)> {\n+    if_chain! {\n+            // Extract method being called\n+            if let StmtKind::Semi(semi_stmt) = &stmt.kind;\n+            if let ExprKind::MethodCall(path, _, args, _) = &semi_stmt.kind;\n+            // Figure out the parameters for the method call\n+            if let Some(self_expr) = args.get(0);\n+            if let Some(pushed_item) = args.get(1);\n+            // Check that the method being called is push() on a Vec\n+            if match_type(cx, cx.typeck_results().expr_ty(self_expr), &paths::VEC);\n+            if path.ident.name.as_str() == \"push\";\n+            then {\n+                return Some((self_expr, pushed_item))\n+            }\n+    }\n+    None\n+}\n+\n+/// Detects for loop pushing the same item into a Vec\n+fn detect_same_item_push<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    _: &'tcx Expr<'_>,\n+    body: &'tcx Expr<'_>,\n+    _: &'tcx Expr<'_>,\n+) {\n+    // Determine whether it is safe to lint the body\n+    let mut same_item_push_visitor = SameItemPushVisitor {\n+        should_lint: true,\n+        vec_push: None,\n+        cx,\n+    };\n+    walk_expr(&mut same_item_push_visitor, body);\n+    if same_item_push_visitor.should_lint {\n+        if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push {\n+            // Make sure that the push does not involve possibly mutating values\n+            if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n+                if let PatKind::Wild = pat.kind {\n+                    let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+                    let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+\n+                    span_lint_and_help(\n+                        cx,\n+                        SAME_ITEM_PUSH,\n+                        vec.span,\n+                        \"it looks like the same item is being pushed into this Vec\",\n+                        None,\n+                        &format!(\n+                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                            item_str, vec_str, item_str\n+                        ),\n+                    )\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Checks for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n #[allow(clippy::too_many_lines)]"}, {"sha": "6547848ba9e96c853be1be0dfbf239671c3dadad", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -1935,6 +1935,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"copies\",\n     },\n+    Lint {\n+        name: \"same_item_push\",\n+        group: \"style\",\n+        desc: \"the same item is pushed inside of a for loop\",\n+        deprecation: None,\n+        module: \"loops\",\n+    },\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\","}, {"sha": "ff1088f86f6470cc2c41256fdd8746d3161bb23b", "filename": "tests/ui/same_item_push.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -0,0 +1,89 @@\n+#![warn(clippy::same_item_push)]\n+\n+fn mutate_increment(x: &mut u8) -> u8 {\n+    *x += 1;\n+    *x\n+}\n+\n+fn increment(x: u8) -> u8 {\n+    x + 1\n+}\n+\n+fn main() {\n+    // Test for basic case\n+    let mut spaces = Vec::with_capacity(10);\n+    for _ in 0..10 {\n+        spaces.push(vec![b' ']);\n+    }\n+\n+    let mut vec2: Vec<u8> = Vec::new();\n+    let item = 2;\n+    for _ in 5..=20 {\n+        vec2.push(item);\n+    }\n+\n+    let mut vec3: Vec<u8> = Vec::new();\n+    for _ in 0..15 {\n+        let item = 2;\n+        vec3.push(item);\n+    }\n+\n+    let mut vec4: Vec<u8> = Vec::new();\n+    for _ in 0..15 {\n+        vec4.push(13);\n+    }\n+\n+    // Suggestion should not be given as pushed variable can mutate\n+    let mut vec5: Vec<u8> = Vec::new();\n+    let mut item: u8 = 2;\n+    for _ in 0..30 {\n+        vec5.push(mutate_increment(&mut item));\n+    }\n+\n+    let mut vec6: Vec<u8> = Vec::new();\n+    let mut item: u8 = 2;\n+    let mut item2 = &mut mutate_increment(&mut item);\n+    for _ in 0..30 {\n+        vec6.push(mutate_increment(item2));\n+    }\n+\n+    let mut vec7: Vec<usize> = Vec::new();\n+    for (a, b) in [0, 1, 4, 9, 16].iter().enumerate() {\n+        vec7.push(a);\n+    }\n+\n+    let mut vec8: Vec<u8> = Vec::new();\n+    for i in 0..30 {\n+        vec8.push(increment(i));\n+    }\n+\n+    let mut vec9: Vec<u8> = Vec::new();\n+    for i in 0..30 {\n+        vec9.push(i + i * i);\n+    }\n+\n+    // Suggestion should not be given as there are multiple pushes that are not the same\n+    let mut vec10: Vec<u8> = Vec::new();\n+    let item: u8 = 2;\n+    for _ in 0..30 {\n+        vec10.push(item);\n+        vec10.push(item * 2);\n+    }\n+\n+    // Suggestion should not be given as Vec is not involved\n+    for _ in 0..5 {\n+        println!(\"Same Item Push\");\n+    }\n+\n+    struct A {\n+        kind: u32,\n+    }\n+    let mut vec_a: Vec<A> = Vec::new();\n+    for i in 0..30 {\n+        vec_a.push(A { kind: i });\n+    }\n+    let mut vec12: Vec<u8> = Vec::new();\n+    for a in vec_a {\n+        vec12.push(2u8.pow(a.kind));\n+    }\n+}"}, {"sha": "ddc5d48cd41357471b770872e2e4d05b33af3ab6", "filename": "tests/ui/same_item_push.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/tests%2Fui%2Fsame_item_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295/tests%2Fui%2Fsame_item_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.stderr?ref=9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "patch": "@@ -0,0 +1,35 @@\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:16:9\n+   |\n+LL |         spaces.push(vec![b' ']);\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::same-item-push` implied by `-D warnings`\n+   = help: try using vec![vec![b' '];SIZE] or spaces.resize(NEW_SIZE, vec![b' '])\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:22:9\n+   |\n+LL |         vec2.push(item);\n+   |         ^^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec2.resize(NEW_SIZE, item)\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:28:9\n+   |\n+LL |         vec3.push(item);\n+   |         ^^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec3.resize(NEW_SIZE, item)\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:33:9\n+   |\n+LL |         vec4.push(13);\n+   |         ^^^^\n+   |\n+   = help: try using vec![13;SIZE] or vec4.resize(NEW_SIZE, 13)\n+\n+error: aborting due to 4 previous errors\n+"}]}