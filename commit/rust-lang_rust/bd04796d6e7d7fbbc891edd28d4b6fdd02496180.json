{"sha": "bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMDQ3OTZkNmU3ZDdmYmJjODkxZWRkMjhkNGI2ZmRkMDI0OTYxODA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-08-23T03:05:37Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-08-27T00:19:07Z"}, "message": "Move with_globals setup from run_compiler to run", "tree": {"sha": "ecb2a7709131a57940aa5f47d84e39911eb32da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb2a7709131a57940aa5f47d84e39911eb32da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "html_url": "https://github.com/rust-lang/rust/commit/bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd04796d6e7d7fbbc891edd28d4b6fdd02496180/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7219130677c4fe4310c9729cbc0b4c6e9c9b42fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7219130677c4fe4310c9729cbc0b4c6e9c9b42fc", "html_url": "https://github.com/rust-lang/rust/commit/7219130677c4fe4310c9729cbc0b4c6e9c9b42fc"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "a96c277d4b555d723e9967cdf55c7b717daf8a22", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bd04796d6e7d7fbbc891edd28d4b6fdd02496180/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd04796d6e7d7fbbc891edd28d4b6fdd02496180/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "patch": "@@ -185,27 +185,29 @@ pub fn run<F>(run_compiler: F) -> isize\n     where F: FnOnce() -> (CompileResult, Option<Session>) + Send + 'static\n {\n     let result = monitor(move || {\n-        let (result, session) = run_compiler();\n-        if let Err(CompileIncomplete::Errored(_)) = result {\n-            match session {\n-                Some(sess) => {\n-                    sess.abort_if_errors();\n-                    panic!(\"error reported but abort_if_errors didn't abort???\");\n-                }\n-                None => {\n-                    let emitter =\n-                        errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                               None,\n-                                                               true,\n-                                                               false);\n-                    let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n-                    handler.emit(&MultiSpan::new(),\n-                                 \"aborting due to previous error(s)\",\n-                                 errors::Level::Fatal);\n-                    panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+        syntax::with_globals(|| {\n+            let (result, session) = run_compiler();\n+            if let Err(CompileIncomplete::Errored(_)) = result {\n+                match session {\n+                    Some(sess) => {\n+                        sess.abort_if_errors();\n+                        panic!(\"error reported but abort_if_errors didn't abort???\");\n+                    }\n+                    None => {\n+                        let emitter =\n+                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n+                                                                None,\n+                                                                true,\n+                                                                false);\n+                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        handler.emit(&MultiSpan::new(),\n+                                    \"aborting due to previous error(s)\",\n+                                    errors::Level::Fatal);\n+                        panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+                    }\n                 }\n             }\n-        }\n+        });\n     });\n \n     match result {\n@@ -471,17 +473,15 @@ pub fn run_compiler<'a>(args: &[String],\n                         emitter_dest: Option<Box<dyn Write + Send>>)\n                         -> (CompileResult, Option<Session>)\n {\n-    syntax::with_globals(|| {\n-        let matches = match handle_options(args) {\n-            Some(matches) => matches,\n-            None => return (Ok(()), None),\n-        };\n+    let matches = match handle_options(args) {\n+        Some(matches) => matches,\n+        None => return (Ok(()), None),\n+    };\n \n-        let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n+    let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n-        driver::spawn_thread_pool(sopts, |sopts| {\n-            run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)\n-        })\n+    driver::spawn_thread_pool(sopts, |sopts| {\n+        run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)\n     })\n }\n "}, {"sha": "6283d054373c12339bc4920819c8c99cb745f0b7", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd04796d6e7d7fbbc891edd28d4b6fdd02496180/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd04796d6e7d7fbbc891edd28d4b6fdd02496180/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=bd04796d6e7d7fbbc891edd28d4b6fdd02496180", "patch": "@@ -92,7 +92,9 @@ fn main() {\n         let tc = TestCalls { count: &mut count };\n         // we should never get use this filename, but lets make sure they are valid args.\n         let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-        rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+        syntax::with_globals(|| {\n+            rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+        });\n     }\n     assert_eq!(count, 30);\n }"}]}