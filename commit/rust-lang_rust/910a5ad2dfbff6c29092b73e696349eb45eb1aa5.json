{"sha": "910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "node_id": "C_kwDOAAsO6NoAKDkxMGE1YWQyZGZiZmY2YzI5MDkyYjczZTY5NjM0OWViNDVlYjFhYTU", "commit": {"author": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-03-24T17:00:49Z"}, "committer": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-03-24T17:00:49Z"}, "message": "Emits suggestions for expressions with parentheses or not separately", "tree": {"sha": "f38047609e361ded01d8ba40fb7e44f5517a0cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38047609e361ded01d8ba40fb7e44f5517a0cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "html_url": "https://github.com/rust-lang/rust/commit/910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6034b2fcb80915d35a871d438663758b4241a0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6034b2fcb80915d35a871d438663758b4241a0fa", "html_url": "https://github.com/rust-lang/rust/commit/6034b2fcb80915d35a871d438663758b4241a0fa"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "5b7e994e035f4f4474537801a1ba50901de993f2", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "patch": "@@ -197,7 +197,9 @@ lint_drop_glue =\n     types that do not implement `Drop` can still have drop glue, consider instead using `{$needs_drop}` to detect whether a type is trivially dropped\n \n lint_range_endpoint_out_of_range = range endpoint is out of range for `{$ty}`\n-    .suggestion = use an inclusive range instead\n+\n+lint_range_use_inclusive_range = use an inclusive range instead\n+\n \n lint_overflowing_bin_hex = literal out of range for `{$ty}`\n     .negative_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}`"}, {"sha": "8ec4c2b3d463ab6b51cd9df703a7392bf504426f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "patch": "@@ -1210,12 +1210,33 @@ impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n #[diag(lint_range_endpoint_out_of_range)]\n pub struct RangeEndpointOutOfRange<'a> {\n     pub ty: &'a str,\n-    #[suggestion(code = \"=\", applicability = \"machine-applicable\")]\n-    pub eq_suggestion: Span,\n-    #[suggestion(code = \"{literal}{suffix}\", applicability = \"machine-applicable\")]\n-    pub lit_suggestion: Span,\n-    pub literal: u128,\n-    pub suffix: &'a str,\n+    #[subdiagnostic]\n+    pub sub: UseInclusiveRange<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UseInclusiveRange<'a> {\n+    #[suggestion(\n+        lint_range_use_inclusive_range,\n+        code = \"{start}..={literal}{suffix}\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    WithoutParen {\n+        #[primary_span]\n+        sugg: Span,\n+        start: String,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n+    #[multipart_suggestion(lint_range_use_inclusive_range, applicability = \"machine-applicable\")]\n+    WithParen {\n+        #[suggestion_part(code = \"=\")]\n+        eq_sugg: Span,\n+        #[suggestion_part(code = \"{literal}{suffix}\")]\n+        lit_sugg: Span,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n }\n \n #[derive(LintDiagnostic)]"}, {"sha": "f6bca7045c846cca4ea466841880c483a839e4bd", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "patch": "@@ -4,7 +4,8 @@ use crate::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n         InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n         OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n-        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n+        VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -172,16 +173,27 @@ fn lint_overflowing_range_endpoint<'tcx>(\n         _ => bug!(),\n     };\n \n+    let sub_sugg = if expr.span.lo() == lit_span.lo() {\n+        let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n+        UseInclusiveRange::WithoutParen {\n+            sugg: struct_expr.span.shrink_to_lo().to(lit_span.shrink_to_hi()),\n+            start,\n+            literal: lit_val - 1,\n+            suffix,\n+        }\n+    } else {\n+        UseInclusiveRange::WithParen {\n+            eq_sugg: expr.span.shrink_to_lo(),\n+            lit_sugg: lit_span,\n+            literal: lit_val - 1,\n+            suffix,\n+        }\n+    };\n+\n     cx.emit_spanned_lint(\n         OVERFLOWING_LITERALS,\n         struct_expr.span,\n-        RangeEndpointOutOfRange {\n-            ty,\n-            eq_suggestion: expr.span.shrink_to_lo(),\n-            lit_suggestion: lit_span,\n-            literal: lit_val - 1,\n-            suffix,\n-        },\n+        RangeEndpointOutOfRange { ty, sub: sub_sugg },\n     );\n \n     // We've just emitted a lint, special cased for `(...)..MAX+1` ranges,"}, {"sha": "c9b4da4b26e7508595efe0841525bc2a0d570e7f", "filename": "tests/ui/lint/issue-109529.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/tests%2Fui%2Flint%2Fissue-109529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/tests%2Fui%2Flint%2Fissue-109529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.rs?ref=910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n-    for i in 0..(256 as u8) { //~ ERROR range endpoint is out of range\n-        println!(\"{}\", i);\n-    }\n+    for _ in 0..256 as u8 {} //~ ERROR range endpoint is out of range\n+    for _ in 0..(256 as u8) {} //~ ERROR range endpoint is out of range\n }"}, {"sha": "15b259ad55ee4760c1692bc4d1cfe7b74eef6c46", "filename": "tests/ui/lint/issue-109529.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/tests%2Fui%2Flint%2Fissue-109529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/910a5ad2dfbff6c29092b73e696349eb45eb1aa5/tests%2Fui%2Flint%2Fissue-109529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.stderr?ref=910a5ad2dfbff6c29092b73e696349eb45eb1aa5", "patch": "@@ -1,18 +1,23 @@\n error: range endpoint is out of range for `u8`\n   --> $DIR/issue-109529.rs:2:14\n    |\n-LL |     for i in 0..(256 as u8) {\n-   |              ^^^^^^^^^^^^^^\n+LL |     for _ in 0..256 as u8 {}\n+   |              ------^^^^^^\n+   |              |\n+   |              help: use an inclusive range instead: `0..=255`\n    |\n    = note: `#[deny(overflowing_literals)]` on by default\n-help: use an inclusive range instead\n+\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:3:14\n+   |\n+LL |     for _ in 0..(256 as u8) {}\n+   |              ^^^^^^^^^^^^^^\n    |\n-LL |     for i in 0..=(256 as u8) {\n-   |                 +\n help: use an inclusive range instead\n    |\n-LL |     for i in 0..(255 as u8) {\n-   |                  ~~~\n+LL |     for _ in 0..=(255 as u8) {}\n+   |                 + ~~~\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}