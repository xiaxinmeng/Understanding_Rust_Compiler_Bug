{"sha": "efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZTFmN2VlOWVmYjVkYTU2MTNmMmNmZjRmOWI4MTBkMmQ1OTkyZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T17:06:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T17:06:19Z"}, "message": "auto merge of #15986 : Florob/rust/nfKc-new, r=alexcrichton\n\nThis adds a new `Recompositions` iterator, which performs canonical composition on the result of the `Decompositions` iterator (which is canonical or compatibility decomposition). In effect this implements Unicode normalization forms C and KC.", "tree": {"sha": "67297aa25589ccc189255bc45ed3ec371b7c2b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67297aa25589ccc189255bc45ed3ec371b7c2b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "html_url": "https://github.com/rust-lang/rust/commit/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31590bd34900403a18079bf4623cd35f9da0c100", "url": "https://api.github.com/repos/rust-lang/rust/commits/31590bd34900403a18079bf4623cd35f9da0c100", "html_url": "https://github.com/rust-lang/rust/commit/31590bd34900403a18079bf4623cd35f9da0c100"}, {"sha": "7ece0abe64bf7c5bdd03e4cbecdb914f470eb846", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ece0abe64bf7c5bdd03e4cbecdb914f470eb846", "html_url": "https://github.com/rust-lang/rust/commit/7ece0abe64bf7c5bdd03e4cbecdb914f470eb846"}], "stats": {"total": 618, "additions": 581, "deletions": 37}, "files": [{"sha": "5424cd3b3ab98e1c0e203927d81a184d57068d9e", "filename": "src/etc/unicode.py", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "patch": "@@ -464,13 +464,26 @@ def emit_charwidth_module(f, width_table):\n             pfun=lambda x: \"(%s,%s,%s,%s)\" % (escape_char(x[0]), escape_char(x[1]), x[2], x[3]))\n     f.write(\"}\\n\\n\")\n \n-def emit_norm_module(f, canon, compat, combine):\n+def emit_norm_module(f, canon, compat, combine, norm_props):\n     canon_keys = canon.keys()\n     canon_keys.sort()\n \n     compat_keys = compat.keys()\n     compat_keys.sort()\n \n+    canon_comp = {}\n+    comp_exclusions = norm_props[\"Full_Composition_Exclusion\"]\n+    for char in canon_keys:\n+        if True in map(lambda (lo, hi): lo <= char <= hi, comp_exclusions):\n+            continue\n+        decomp = canon[char]\n+        if len(decomp) == 2:\n+            if not canon_comp.has_key(decomp[0]):\n+                canon_comp[decomp[0]] = []\n+            canon_comp[decomp[0]].append( (decomp[1], char) )\n+    canon_comp_keys = canon_comp.keys()\n+    canon_comp_keys.sort()\n+\n     f.write(\"pub mod normalization {\\n\")\n \n     def mkdata_fun(table):\n@@ -494,6 +507,22 @@ def f(char):\n     emit_table(f, \"compatibility_table\", compat_keys, \"&'static [(char, &'static [char])]\",\n         pfun=mkdata_fun(compat))\n \n+    def comp_pfun(char):\n+        data = \"(%s,&[\" % escape_char(char)\n+        canon_comp[char].sort(lambda x, y: x[0] - y[0])\n+        first = True\n+        for pair in canon_comp[char]:\n+            if not first:\n+                data += \",\"\n+            first = False\n+            data += \"(%s,%s)\" % (escape_char(pair[0]), escape_char(pair[1]))\n+        data += \"])\"\n+        return data\n+\n+    f.write(\"    // Canonical compositions\\n\")\n+    emit_table(f, \"composition_table\", canon_comp_keys,\n+        \"&'static [(char, &'static [(char, char)])]\", pfun=comp_pfun)\n+\n     f.write(\"\"\"\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n         use core::option::{Some, None};\n@@ -579,6 +608,8 @@ def optimize_width_table(wtable):\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\",\n                 [\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"])\n+        norm_props = load_properties(\"DerivedNormalizationProps.txt\",\n+                     [\"Full_Composition_Exclusion\"])\n \n         # grapheme cluster category from DerivedCoreProperties\n         # the rest are defined below\n@@ -612,7 +643,7 @@ def optimize_width_table(wtable):\n         emit_regex_module(rf, allcats, perl_words)\n \n         # normalizations and conversions module\n-        emit_norm_module(rf, canon_decomp, compat_decomp, combines)\n+        emit_norm_module(rf, canon_decomp, compat_decomp, combines, norm_props)\n         emit_conversions_module(rf, lowerupper, upperlower)\n \n         ### character width module"}, {"sha": "f5a274b76770ec68b30e2d1317d8c93274de5da2", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 198, "deletions": 30, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "patch": "@@ -77,8 +77,9 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n \n-use {Collection, MutableSeq};\n+use {Collection, Deque, MutableSeq};\n use hash;\n+use ringbuf::RingBuf;\n use string::String;\n use unicode;\n use vec::Vec;\n@@ -302,6 +303,106 @@ impl<'a> Iterator<char> for Decompositions<'a> {\n     }\n }\n \n+#[deriving(Clone)]\n+enum RecompositionState {\n+    Composing,\n+    Purging,\n+    Finished\n+}\n+\n+/// External iterator for a string's recomposition's characters.\n+/// Use with the `std::iter` module.\n+#[deriving(Clone)]\n+pub struct Recompositions<'a> {\n+    iter: Decompositions<'a>,\n+    state: RecompositionState,\n+    buffer: RingBuf<char>,\n+    composee: Option<char>,\n+    last_ccc: Option<u8>\n+}\n+\n+impl<'a> Iterator<char> for Recompositions<'a> {\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        loop {\n+            match self.state {\n+                Composing => {\n+                    for ch in self.iter {\n+                        let ch_class = unicode::char::canonical_combining_class(ch);\n+                        if self.composee.is_none() {\n+                            if ch_class != 0 {\n+                                return Some(ch);\n+                            }\n+                            self.composee = Some(ch);\n+                            continue;\n+                        }\n+                        let k = self.composee.clone().unwrap();\n+\n+                        match self.last_ccc {\n+                            None => {\n+                                match unicode::char::compose(k, ch) {\n+                                    Some(r) => {\n+                                        self.composee = Some(r);\n+                                        continue;\n+                                    }\n+                                    None => {\n+                                        if ch_class == 0 {\n+                                            self.composee = Some(ch);\n+                                            return Some(k);\n+                                        }\n+                                        self.buffer.push(ch);\n+                                        self.last_ccc = Some(ch_class);\n+                                    }\n+                                }\n+                            }\n+                            Some(l_class) => {\n+                                if l_class >= ch_class {\n+                                    // `ch` is blocked from `composee`\n+                                    if ch_class == 0 {\n+                                        self.composee = Some(ch);\n+                                        self.last_ccc = None;\n+                                        self.state = Purging;\n+                                        return Some(k);\n+                                    }\n+                                    self.buffer.push(ch);\n+                                    self.last_ccc = Some(ch_class);\n+                                    continue;\n+                                }\n+                                match unicode::char::compose(k, ch) {\n+                                    Some(r) => {\n+                                        self.composee = Some(r);\n+                                        continue;\n+                                    }\n+                                    None => {\n+                                        self.buffer.push(ch);\n+                                        self.last_ccc = Some(ch_class);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    self.state = Finished;\n+                    if self.composee.is_some() {\n+                        return self.composee.take();\n+                    }\n+                }\n+                Purging => {\n+                    match self.buffer.pop_front() {\n+                        None => self.state = Composing,\n+                        s => return s\n+                    }\n+                }\n+                Finished => {\n+                    match self.buffer.pop_front() {\n+                        None => return self.composee.take(),\n+                        s => return s\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Replace all occurrences of one string with another\n ///\n /// # Arguments\n@@ -744,6 +845,32 @@ pub trait StrAllocating: Str {\n             kind: Compatible\n         }\n     }\n+\n+    /// An Iterator over the string in Unicode Normalization Form C\n+    /// (canonical decomposition followed by canonical composition).\n+    #[inline]\n+    fn nfc_chars<'a>(&'a self) -> Recompositions<'a> {\n+        Recompositions {\n+            iter: self.nfd_chars(),\n+            state: Composing,\n+            buffer: RingBuf::new(),\n+            composee: None,\n+            last_ccc: None\n+        }\n+    }\n+\n+    /// An Iterator over the string in Unicode Normalization Form KC\n+    /// (compatibility decomposition followed by canonical composition).\n+    #[inline]\n+    fn nfkc_chars<'a>(&'a self) -> Recompositions<'a> {\n+        Recompositions {\n+            iter: self.nfkd_chars(),\n+            state: Composing,\n+            buffer: RingBuf::new(),\n+            composee: None,\n+            last_ccc: None\n+        }\n+    }\n }\n \n impl<'a> StrAllocating for &'a str {\n@@ -1754,39 +1881,80 @@ mod tests {\n \n     #[test]\n     fn test_nfd_chars() {\n-        assert_eq!(\"abc\".nfd_chars().collect::<String>(), String::from_str(\"abc\"));\n-        assert_eq!(\"\\u1e0b\\u01c4\".nfd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0307\\u01c4\"));\n-        assert_eq!(\"\\u2026\".nfd_chars().collect::<String>(), String::from_str(\"\\u2026\"));\n-        assert_eq!(\"\\u2126\".nfd_chars().collect::<String>(), String::from_str(\"\\u03a9\"));\n-        assert_eq!(\"\\u1e0b\\u0323\".nfd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0323\\u0307\"));\n-        assert_eq!(\"\\u1e0d\\u0307\".nfd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0323\\u0307\"));\n-        assert_eq!(\"a\\u0301\".nfd_chars().collect::<String>(), String::from_str(\"a\\u0301\"));\n-        assert_eq!(\"\\u0301a\".nfd_chars().collect::<String>(), String::from_str(\"\\u0301a\"));\n-        assert_eq!(\"\\ud4db\".nfd_chars().collect::<String>(),\n-                   String::from_str(\"\\u1111\\u1171\\u11b6\"));\n-        assert_eq!(\"\\uac1c\".nfd_chars().collect::<String>(), String::from_str(\"\\u1100\\u1162\"));\n+        macro_rules! t {\n+            ($input: expr, $expected: expr) => {\n+                assert_eq!($input.nfd_chars().collect::<String>(), $expected.into_string());\n+            }\n+        }\n+        t!(\"abc\", \"abc\");\n+        t!(\"\\u1e0b\\u01c4\", \"d\\u0307\\u01c4\");\n+        t!(\"\\u2026\", \"\\u2026\");\n+        t!(\"\\u2126\", \"\\u03a9\");\n+        t!(\"\\u1e0b\\u0323\", \"d\\u0323\\u0307\");\n+        t!(\"\\u1e0d\\u0307\", \"d\\u0323\\u0307\");\n+        t!(\"a\\u0301\", \"a\\u0301\");\n+        t!(\"\\u0301a\", \"\\u0301a\");\n+        t!(\"\\ud4db\", \"\\u1111\\u1171\\u11b6\");\n+        t!(\"\\uac1c\", \"\\u1100\\u1162\");\n     }\n \n     #[test]\n     fn test_nfkd_chars() {\n-        assert_eq!(\"abc\".nfkd_chars().collect::<String>(), String::from_str(\"abc\"));\n-        assert_eq!(\"\\u1e0b\\u01c4\".nfkd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0307DZ\\u030c\"));\n-        assert_eq!(\"\\u2026\".nfkd_chars().collect::<String>(), String::from_str(\"...\"));\n-        assert_eq!(\"\\u2126\".nfkd_chars().collect::<String>(), String::from_str(\"\\u03a9\"));\n-        assert_eq!(\"\\u1e0b\\u0323\".nfkd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0323\\u0307\"));\n-        assert_eq!(\"\\u1e0d\\u0307\".nfkd_chars().collect::<String>(),\n-                   String::from_str(\"d\\u0323\\u0307\"));\n-        assert_eq!(\"a\\u0301\".nfkd_chars().collect::<String>(), String::from_str(\"a\\u0301\"));\n-        assert_eq!(\"\\u0301a\".nfkd_chars().collect::<String>(),\n-                   String::from_str(\"\\u0301a\"));\n-        assert_eq!(\"\\ud4db\".nfkd_chars().collect::<String>(),\n-                   String::from_str(\"\\u1111\\u1171\\u11b6\"));\n-        assert_eq!(\"\\uac1c\".nfkd_chars().collect::<String>(), String::from_str(\"\\u1100\\u1162\"));\n+        macro_rules! t {\n+            ($input: expr, $expected: expr) => {\n+                assert_eq!($input.nfkd_chars().collect::<String>(), $expected.into_string());\n+            }\n+        }\n+        t!(\"abc\", \"abc\");\n+        t!(\"\\u1e0b\\u01c4\", \"d\\u0307DZ\\u030c\");\n+        t!(\"\\u2026\", \"...\");\n+        t!(\"\\u2126\", \"\\u03a9\");\n+        t!(\"\\u1e0b\\u0323\", \"d\\u0323\\u0307\");\n+        t!(\"\\u1e0d\\u0307\", \"d\\u0323\\u0307\");\n+        t!(\"a\\u0301\", \"a\\u0301\");\n+        t!(\"\\u0301a\", \"\\u0301a\");\n+        t!(\"\\ud4db\", \"\\u1111\\u1171\\u11b6\");\n+        t!(\"\\uac1c\", \"\\u1100\\u1162\");\n+    }\n+\n+    #[test]\n+    fn test_nfc_chars() {\n+        macro_rules! t {\n+            ($input: expr, $expected: expr) => {\n+                assert_eq!($input.nfc_chars().collect::<String>(), $expected.into_string());\n+            }\n+        }\n+        t!(\"abc\", \"abc\");\n+        t!(\"\\u1e0b\\u01c4\", \"\\u1e0b\\u01c4\");\n+        t!(\"\\u2026\", \"\\u2026\");\n+        t!(\"\\u2126\", \"\\u03a9\");\n+        t!(\"\\u1e0b\\u0323\", \"\\u1e0d\\u0307\");\n+        t!(\"\\u1e0d\\u0307\", \"\\u1e0d\\u0307\");\n+        t!(\"a\\u0301\", \"\\xe1\");\n+        t!(\"\\u0301a\", \"\\u0301a\");\n+        t!(\"\\ud4db\", \"\\ud4db\");\n+        t!(\"\\uac1c\", \"\\uac1c\");\n+        t!(\"a\\u0300\\u0305\\u0315\\u05aeb\", \"\\xe0\\u05ae\\u0305\\u0315b\");\n+    }\n+\n+    #[test]\n+    fn test_nfkc_chars() {\n+        macro_rules! t {\n+            ($input: expr, $expected: expr) => {\n+                assert_eq!($input.nfkc_chars().collect::<String>(), $expected.into_string());\n+            }\n+        }\n+        t!(\"abc\", \"abc\");\n+        t!(\"\\u1e0b\\u01c4\", \"\\u1e0bD\\u017d\");\n+        t!(\"\\u2026\", \"...\");\n+        t!(\"\\u2126\", \"\\u03a9\");\n+        t!(\"\\u1e0b\\u0323\", \"\\u1e0d\\u0307\");\n+        t!(\"\\u1e0d\\u0307\", \"\\u1e0d\\u0307\");\n+        t!(\"a\\u0301\", \"\\xe1\");\n+        t!(\"\\u0301a\", \"\\u0301a\");\n+        t!(\"\\ud4db\", \"\\ud4db\");\n+        t!(\"\\uac1c\", \"\\uac1c\");\n+        t!(\"a\\u0300\\u0305\\u0315\\u05aeb\", \"\\xe0\\u05ae\\u0305\\u0315b\");\n     }\n \n     #[test]"}, {"sha": "239966cfd475df1bd7bcc6a52b09ecb7cf332a49", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "patch": "@@ -35,7 +35,7 @@ extern crate core;\n // regex module\n pub use tables::regex;\n \n-mod decompose;\n+mod normalize;\n mod tables;\n mod u_char;\n mod u_str;\n@@ -61,7 +61,7 @@ pub mod char {\n     pub use core::char::{from_digit, escape_unicode, escape_default};\n     pub use core::char::{len_utf8_bytes, Char};\n \n-    pub use decompose::{decompose_canonical, decompose_compatible};\n+    pub use normalize::{decompose_canonical, decompose_compatible, compose};\n \n     pub use tables::normalization::canonical_combining_class;\n "}, {"sha": "df0be09aea1f7f058c4baddd11ee1abd1d62447f", "filename": "src/libunicode/normalize.rs", "status": "renamed", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fnormalize.rs?ref=efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "patch": "@@ -13,12 +13,12 @@\n   for Unicode characters.\n   */\n \n+use core::cmp::{Equal, Less, Greater};\n use core::option::{Option, Some, None};\n use core::slice::ImmutableVector;\n-use tables::normalization::{canonical_table, compatibility_table};\n+use tables::normalization::{canonical_table, compatibility_table, composition_table};\n \n-fn bsearch_table(c: char, r: &'static [(char, &'static [char])]) -> Option<&'static [char]> {\n-    use core::cmp::{Equal, Less, Greater};\n+fn bsearch_table<T>(c: char, r: &'static [(char, &'static [T])]) -> Option<&'static [T]> {\n     match r.bsearch(|&(val, _)| {\n         if c == val { Equal }\n         else if val < c { Less }\n@@ -80,6 +80,27 @@ fn d(c: char, i: |char|, k: bool) {\n     i(c);\n }\n \n+pub fn compose(a: char, b: char) -> Option<char> {\n+    compose_hangul(a, b).or_else(|| {\n+        match bsearch_table(a, composition_table) {\n+            None => None,\n+            Some(candidates) => {\n+                match candidates.bsearch(|&(val, _)| {\n+                    if b == val { Equal }\n+                    else if val < b { Less }\n+                    else { Greater }\n+                }) {\n+                    Some(idx) => {\n+                        let (_, result) = candidates[idx];\n+                        Some(result)\n+                    }\n+                    None => None\n+                }\n+            }\n+        }\n+    })\n+}\n+\n // Constants from Unicode 6.3.0 Section 3.12 Conjoining Jamo Behavior\n static S_BASE: u32 = 0xAC00;\n static L_BASE: u32 = 0x1100;\n@@ -92,6 +113,7 @@ static N_COUNT: u32 = (V_COUNT * T_COUNT);\n static S_COUNT: u32 = (L_COUNT * N_COUNT);\n \n // Decompose a precomposed Hangul syllable\n+#[inline(always)]\n fn decompose_hangul(s: char, f: |char|) {\n     use core::mem::transmute;\n \n@@ -110,3 +132,22 @@ fn decompose_hangul(s: char, f: |char|) {\n         }\n     }\n }\n+\n+// Compose a pair of Hangul Jamo\n+#[inline(always)]\n+fn compose_hangul(a: char, b: char) -> Option<char> {\n+    use core::mem::transmute;\n+    let l = a as u32;\n+    let v = b as u32;\n+    // Compose an LPart and a VPart\n+    if L_BASE <= l && l < (L_BASE + L_COUNT) && V_BASE <= v && v < (V_BASE + V_COUNT) {\n+        let r = S_BASE + (l - L_BASE) * N_COUNT + (v - V_BASE) * T_COUNT;\n+        return unsafe { Some(transmute(r)) };\n+    }\n+    // Compose an LVPart and a TPart\n+    if S_BASE <= l && l <= (S_BASE+S_COUNT-T_COUNT) && T_BASE <= v && v < (T_BASE+T_COUNT) {\n+        let r = l + (v - T_BASE);\n+        return unsafe { Some(transmute(r)) };\n+    }\n+    None\n+}", "previous_filename": "src/libunicode/decompose.rs"}, {"sha": "4332fc596c997c8541f78aa679fe1d41029d07a9", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=efe1f7ee9efb5da5613f2cff4f9b810d2d5992d4", "patch": "@@ -5922,6 +5922,310 @@ pub mod normalization {\n         &['\\u53ef'])\n     ];\n \n+    // Canonical compositions\n+    pub static composition_table: &'static [(char, &'static [(char, char)])] = &[\n+        ('\\x3c', &[('\\u0338', '\\u226e')]), ('\\x3d', &[('\\u0338', '\\u2260')]), ('\\x3e', &[('\\u0338',\n+        '\\u226f')]), ('\\x41', &[('\\u0300', '\\xc0'), ('\\u0301', '\\xc1'), ('\\u0302', '\\xc2'),\n+        ('\\u0303', '\\xc3'), ('\\u0304', '\\u0100'), ('\\u0306', '\\u0102'), ('\\u0307', '\\u0226'),\n+        ('\\u0308', '\\xc4'), ('\\u0309', '\\u1ea2'), ('\\u030a', '\\xc5'), ('\\u030c', '\\u01cd'),\n+        ('\\u030f', '\\u0200'), ('\\u0311', '\\u0202'), ('\\u0323', '\\u1ea0'), ('\\u0325', '\\u1e00'),\n+        ('\\u0328', '\\u0104')]), ('\\x42', &[('\\u0307', '\\u1e02'), ('\\u0323', '\\u1e04'), ('\\u0331',\n+        '\\u1e06')]), ('\\x43', &[('\\u0301', '\\u0106'), ('\\u0302', '\\u0108'), ('\\u0307', '\\u010a'),\n+        ('\\u030c', '\\u010c'), ('\\u0327', '\\xc7')]), ('\\x44', &[('\\u0307', '\\u1e0a'), ('\\u030c',\n+        '\\u010e'), ('\\u0323', '\\u1e0c'), ('\\u0327', '\\u1e10'), ('\\u032d', '\\u1e12'), ('\\u0331',\n+        '\\u1e0e')]), ('\\x45', &[('\\u0300', '\\xc8'), ('\\u0301', '\\xc9'), ('\\u0302', '\\xca'),\n+        ('\\u0303', '\\u1ebc'), ('\\u0304', '\\u0112'), ('\\u0306', '\\u0114'), ('\\u0307', '\\u0116'),\n+        ('\\u0308', '\\xcb'), ('\\u0309', '\\u1eba'), ('\\u030c', '\\u011a'), ('\\u030f', '\\u0204'),\n+        ('\\u0311', '\\u0206'), ('\\u0323', '\\u1eb8'), ('\\u0327', '\\u0228'), ('\\u0328', '\\u0118'),\n+        ('\\u032d', '\\u1e18'), ('\\u0330', '\\u1e1a')]), ('\\x46', &[('\\u0307', '\\u1e1e')]), ('\\x47',\n+        &[('\\u0301', '\\u01f4'), ('\\u0302', '\\u011c'), ('\\u0304', '\\u1e20'), ('\\u0306', '\\u011e'),\n+        ('\\u0307', '\\u0120'), ('\\u030c', '\\u01e6'), ('\\u0327', '\\u0122')]), ('\\x48', &[('\\u0302',\n+        '\\u0124'), ('\\u0307', '\\u1e22'), ('\\u0308', '\\u1e26'), ('\\u030c', '\\u021e'), ('\\u0323',\n+        '\\u1e24'), ('\\u0327', '\\u1e28'), ('\\u032e', '\\u1e2a')]), ('\\x49', &[('\\u0300', '\\xcc'),\n+        ('\\u0301', '\\xcd'), ('\\u0302', '\\xce'), ('\\u0303', '\\u0128'), ('\\u0304', '\\u012a'),\n+        ('\\u0306', '\\u012c'), ('\\u0307', '\\u0130'), ('\\u0308', '\\xcf'), ('\\u0309', '\\u1ec8'),\n+        ('\\u030c', '\\u01cf'), ('\\u030f', '\\u0208'), ('\\u0311', '\\u020a'), ('\\u0323', '\\u1eca'),\n+        ('\\u0328', '\\u012e'), ('\\u0330', '\\u1e2c')]), ('\\x4a', &[('\\u0302', '\\u0134')]), ('\\x4b',\n+        &[('\\u0301', '\\u1e30'), ('\\u030c', '\\u01e8'), ('\\u0323', '\\u1e32'), ('\\u0327', '\\u0136'),\n+        ('\\u0331', '\\u1e34')]), ('\\x4c', &[('\\u0301', '\\u0139'), ('\\u030c', '\\u013d'), ('\\u0323',\n+        '\\u1e36'), ('\\u0327', '\\u013b'), ('\\u032d', '\\u1e3c'), ('\\u0331', '\\u1e3a')]), ('\\x4d',\n+        &[('\\u0301', '\\u1e3e'), ('\\u0307', '\\u1e40'), ('\\u0323', '\\u1e42')]), ('\\x4e', &[('\\u0300',\n+        '\\u01f8'), ('\\u0301', '\\u0143'), ('\\u0303', '\\xd1'), ('\\u0307', '\\u1e44'), ('\\u030c',\n+        '\\u0147'), ('\\u0323', '\\u1e46'), ('\\u0327', '\\u0145'), ('\\u032d', '\\u1e4a'), ('\\u0331',\n+        '\\u1e48')]), ('\\x4f', &[('\\u0300', '\\xd2'), ('\\u0301', '\\xd3'), ('\\u0302', '\\xd4'),\n+        ('\\u0303', '\\xd5'), ('\\u0304', '\\u014c'), ('\\u0306', '\\u014e'), ('\\u0307', '\\u022e'),\n+        ('\\u0308', '\\xd6'), ('\\u0309', '\\u1ece'), ('\\u030b', '\\u0150'), ('\\u030c', '\\u01d1'),\n+        ('\\u030f', '\\u020c'), ('\\u0311', '\\u020e'), ('\\u031b', '\\u01a0'), ('\\u0323', '\\u1ecc'),\n+        ('\\u0328', '\\u01ea')]), ('\\x50', &[('\\u0301', '\\u1e54'), ('\\u0307', '\\u1e56')]), ('\\x52',\n+        &[('\\u0301', '\\u0154'), ('\\u0307', '\\u1e58'), ('\\u030c', '\\u0158'), ('\\u030f', '\\u0210'),\n+        ('\\u0311', '\\u0212'), ('\\u0323', '\\u1e5a'), ('\\u0327', '\\u0156'), ('\\u0331', '\\u1e5e')]),\n+        ('\\x53', &[('\\u0301', '\\u015a'), ('\\u0302', '\\u015c'), ('\\u0307', '\\u1e60'), ('\\u030c',\n+        '\\u0160'), ('\\u0323', '\\u1e62'), ('\\u0326', '\\u0218'), ('\\u0327', '\\u015e')]), ('\\x54',\n+        &[('\\u0307', '\\u1e6a'), ('\\u030c', '\\u0164'), ('\\u0323', '\\u1e6c'), ('\\u0326', '\\u021a'),\n+        ('\\u0327', '\\u0162'), ('\\u032d', '\\u1e70'), ('\\u0331', '\\u1e6e')]), ('\\x55', &[('\\u0300',\n+        '\\xd9'), ('\\u0301', '\\xda'), ('\\u0302', '\\xdb'), ('\\u0303', '\\u0168'), ('\\u0304', '\\u016a'),\n+        ('\\u0306', '\\u016c'), ('\\u0308', '\\xdc'), ('\\u0309', '\\u1ee6'), ('\\u030a', '\\u016e'),\n+        ('\\u030b', '\\u0170'), ('\\u030c', '\\u01d3'), ('\\u030f', '\\u0214'), ('\\u0311', '\\u0216'),\n+        ('\\u031b', '\\u01af'), ('\\u0323', '\\u1ee4'), ('\\u0324', '\\u1e72'), ('\\u0328', '\\u0172'),\n+        ('\\u032d', '\\u1e76'), ('\\u0330', '\\u1e74')]), ('\\x56', &[('\\u0303', '\\u1e7c'), ('\\u0323',\n+        '\\u1e7e')]), ('\\x57', &[('\\u0300', '\\u1e80'), ('\\u0301', '\\u1e82'), ('\\u0302', '\\u0174'),\n+        ('\\u0307', '\\u1e86'), ('\\u0308', '\\u1e84'), ('\\u0323', '\\u1e88')]), ('\\x58', &[('\\u0307',\n+        '\\u1e8a'), ('\\u0308', '\\u1e8c')]), ('\\x59', &[('\\u0300', '\\u1ef2'), ('\\u0301', '\\xdd'),\n+        ('\\u0302', '\\u0176'), ('\\u0303', '\\u1ef8'), ('\\u0304', '\\u0232'), ('\\u0307', '\\u1e8e'),\n+        ('\\u0308', '\\u0178'), ('\\u0309', '\\u1ef6'), ('\\u0323', '\\u1ef4')]), ('\\x5a', &[('\\u0301',\n+        '\\u0179'), ('\\u0302', '\\u1e90'), ('\\u0307', '\\u017b'), ('\\u030c', '\\u017d'), ('\\u0323',\n+        '\\u1e92'), ('\\u0331', '\\u1e94')]), ('\\x61', &[('\\u0300', '\\xe0'), ('\\u0301', '\\xe1'),\n+        ('\\u0302', '\\xe2'), ('\\u0303', '\\xe3'), ('\\u0304', '\\u0101'), ('\\u0306', '\\u0103'),\n+        ('\\u0307', '\\u0227'), ('\\u0308', '\\xe4'), ('\\u0309', '\\u1ea3'), ('\\u030a', '\\xe5'),\n+        ('\\u030c', '\\u01ce'), ('\\u030f', '\\u0201'), ('\\u0311', '\\u0203'), ('\\u0323', '\\u1ea1'),\n+        ('\\u0325', '\\u1e01'), ('\\u0328', '\\u0105')]), ('\\x62', &[('\\u0307', '\\u1e03'), ('\\u0323',\n+        '\\u1e05'), ('\\u0331', '\\u1e07')]), ('\\x63', &[('\\u0301', '\\u0107'), ('\\u0302', '\\u0109'),\n+        ('\\u0307', '\\u010b'), ('\\u030c', '\\u010d'), ('\\u0327', '\\xe7')]), ('\\x64', &[('\\u0307',\n+        '\\u1e0b'), ('\\u030c', '\\u010f'), ('\\u0323', '\\u1e0d'), ('\\u0327', '\\u1e11'), ('\\u032d',\n+        '\\u1e13'), ('\\u0331', '\\u1e0f')]), ('\\x65', &[('\\u0300', '\\xe8'), ('\\u0301', '\\xe9'),\n+        ('\\u0302', '\\xea'), ('\\u0303', '\\u1ebd'), ('\\u0304', '\\u0113'), ('\\u0306', '\\u0115'),\n+        ('\\u0307', '\\u0117'), ('\\u0308', '\\xeb'), ('\\u0309', '\\u1ebb'), ('\\u030c', '\\u011b'),\n+        ('\\u030f', '\\u0205'), ('\\u0311', '\\u0207'), ('\\u0323', '\\u1eb9'), ('\\u0327', '\\u0229'),\n+        ('\\u0328', '\\u0119'), ('\\u032d', '\\u1e19'), ('\\u0330', '\\u1e1b')]), ('\\x66', &[('\\u0307',\n+        '\\u1e1f')]), ('\\x67', &[('\\u0301', '\\u01f5'), ('\\u0302', '\\u011d'), ('\\u0304', '\\u1e21'),\n+        ('\\u0306', '\\u011f'), ('\\u0307', '\\u0121'), ('\\u030c', '\\u01e7'), ('\\u0327', '\\u0123')]),\n+        ('\\x68', &[('\\u0302', '\\u0125'), ('\\u0307', '\\u1e23'), ('\\u0308', '\\u1e27'), ('\\u030c',\n+        '\\u021f'), ('\\u0323', '\\u1e25'), ('\\u0327', '\\u1e29'), ('\\u032e', '\\u1e2b'), ('\\u0331',\n+        '\\u1e96')]), ('\\x69', &[('\\u0300', '\\xec'), ('\\u0301', '\\xed'), ('\\u0302', '\\xee'),\n+        ('\\u0303', '\\u0129'), ('\\u0304', '\\u012b'), ('\\u0306', '\\u012d'), ('\\u0308', '\\xef'),\n+        ('\\u0309', '\\u1ec9'), ('\\u030c', '\\u01d0'), ('\\u030f', '\\u0209'), ('\\u0311', '\\u020b'),\n+        ('\\u0323', '\\u1ecb'), ('\\u0328', '\\u012f'), ('\\u0330', '\\u1e2d')]), ('\\x6a', &[('\\u0302',\n+        '\\u0135'), ('\\u030c', '\\u01f0')]), ('\\x6b', &[('\\u0301', '\\u1e31'), ('\\u030c', '\\u01e9'),\n+        ('\\u0323', '\\u1e33'), ('\\u0327', '\\u0137'), ('\\u0331', '\\u1e35')]), ('\\x6c', &[('\\u0301',\n+        '\\u013a'), ('\\u030c', '\\u013e'), ('\\u0323', '\\u1e37'), ('\\u0327', '\\u013c'), ('\\u032d',\n+        '\\u1e3d'), ('\\u0331', '\\u1e3b')]), ('\\x6d', &[('\\u0301', '\\u1e3f'), ('\\u0307', '\\u1e41'),\n+        ('\\u0323', '\\u1e43')]), ('\\x6e', &[('\\u0300', '\\u01f9'), ('\\u0301', '\\u0144'), ('\\u0303',\n+        '\\xf1'), ('\\u0307', '\\u1e45'), ('\\u030c', '\\u0148'), ('\\u0323', '\\u1e47'), ('\\u0327',\n+        '\\u0146'), ('\\u032d', '\\u1e4b'), ('\\u0331', '\\u1e49')]), ('\\x6f', &[('\\u0300', '\\xf2'),\n+        ('\\u0301', '\\xf3'), ('\\u0302', '\\xf4'), ('\\u0303', '\\xf5'), ('\\u0304', '\\u014d'), ('\\u0306',\n+        '\\u014f'), ('\\u0307', '\\u022f'), ('\\u0308', '\\xf6'), ('\\u0309', '\\u1ecf'), ('\\u030b',\n+        '\\u0151'), ('\\u030c', '\\u01d2'), ('\\u030f', '\\u020d'), ('\\u0311', '\\u020f'), ('\\u031b',\n+        '\\u01a1'), ('\\u0323', '\\u1ecd'), ('\\u0328', '\\u01eb')]), ('\\x70', &[('\\u0301', '\\u1e55'),\n+        ('\\u0307', '\\u1e57')]), ('\\x72', &[('\\u0301', '\\u0155'), ('\\u0307', '\\u1e59'), ('\\u030c',\n+        '\\u0159'), ('\\u030f', '\\u0211'), ('\\u0311', '\\u0213'), ('\\u0323', '\\u1e5b'), ('\\u0327',\n+        '\\u0157'), ('\\u0331', '\\u1e5f')]), ('\\x73', &[('\\u0301', '\\u015b'), ('\\u0302', '\\u015d'),\n+        ('\\u0307', '\\u1e61'), ('\\u030c', '\\u0161'), ('\\u0323', '\\u1e63'), ('\\u0326', '\\u0219'),\n+        ('\\u0327', '\\u015f')]), ('\\x74', &[('\\u0307', '\\u1e6b'), ('\\u0308', '\\u1e97'), ('\\u030c',\n+        '\\u0165'), ('\\u0323', '\\u1e6d'), ('\\u0326', '\\u021b'), ('\\u0327', '\\u0163'), ('\\u032d',\n+        '\\u1e71'), ('\\u0331', '\\u1e6f')]), ('\\x75', &[('\\u0300', '\\xf9'), ('\\u0301', '\\xfa'),\n+        ('\\u0302', '\\xfb'), ('\\u0303', '\\u0169'), ('\\u0304', '\\u016b'), ('\\u0306', '\\u016d'),\n+        ('\\u0308', '\\xfc'), ('\\u0309', '\\u1ee7'), ('\\u030a', '\\u016f'), ('\\u030b', '\\u0171'),\n+        ('\\u030c', '\\u01d4'), ('\\u030f', '\\u0215'), ('\\u0311', '\\u0217'), ('\\u031b', '\\u01b0'),\n+        ('\\u0323', '\\u1ee5'), ('\\u0324', '\\u1e73'), ('\\u0328', '\\u0173'), ('\\u032d', '\\u1e77'),\n+        ('\\u0330', '\\u1e75')]), ('\\x76', &[('\\u0303', '\\u1e7d'), ('\\u0323', '\\u1e7f')]), ('\\x77',\n+        &[('\\u0300', '\\u1e81'), ('\\u0301', '\\u1e83'), ('\\u0302', '\\u0175'), ('\\u0307', '\\u1e87'),\n+        ('\\u0308', '\\u1e85'), ('\\u030a', '\\u1e98'), ('\\u0323', '\\u1e89')]), ('\\x78', &[('\\u0307',\n+        '\\u1e8b'), ('\\u0308', '\\u1e8d')]), ('\\x79', &[('\\u0300', '\\u1ef3'), ('\\u0301', '\\xfd'),\n+        ('\\u0302', '\\u0177'), ('\\u0303', '\\u1ef9'), ('\\u0304', '\\u0233'), ('\\u0307', '\\u1e8f'),\n+        ('\\u0308', '\\xff'), ('\\u0309', '\\u1ef7'), ('\\u030a', '\\u1e99'), ('\\u0323', '\\u1ef5')]),\n+        ('\\x7a', &[('\\u0301', '\\u017a'), ('\\u0302', '\\u1e91'), ('\\u0307', '\\u017c'), ('\\u030c',\n+        '\\u017e'), ('\\u0323', '\\u1e93'), ('\\u0331', '\\u1e95')]), ('\\xa8', &[('\\u0300', '\\u1fed'),\n+        ('\\u0301', '\\u0385'), ('\\u0342', '\\u1fc1')]), ('\\xc2', &[('\\u0300', '\\u1ea6'), ('\\u0301',\n+        '\\u1ea4'), ('\\u0303', '\\u1eaa'), ('\\u0309', '\\u1ea8')]), ('\\xc4', &[('\\u0304', '\\u01de')]),\n+        ('\\xc5', &[('\\u0301', '\\u01fa')]), ('\\xc6', &[('\\u0301', '\\u01fc'), ('\\u0304', '\\u01e2')]),\n+        ('\\xc7', &[('\\u0301', '\\u1e08')]), ('\\xca', &[('\\u0300', '\\u1ec0'), ('\\u0301', '\\u1ebe'),\n+        ('\\u0303', '\\u1ec4'), ('\\u0309', '\\u1ec2')]), ('\\xcf', &[('\\u0301', '\\u1e2e')]), ('\\xd4',\n+        &[('\\u0300', '\\u1ed2'), ('\\u0301', '\\u1ed0'), ('\\u0303', '\\u1ed6'), ('\\u0309', '\\u1ed4')]),\n+        ('\\xd5', &[('\\u0301', '\\u1e4c'), ('\\u0304', '\\u022c'), ('\\u0308', '\\u1e4e')]), ('\\xd6',\n+        &[('\\u0304', '\\u022a')]), ('\\xd8', &[('\\u0301', '\\u01fe')]), ('\\xdc', &[('\\u0300',\n+        '\\u01db'), ('\\u0301', '\\u01d7'), ('\\u0304', '\\u01d5'), ('\\u030c', '\\u01d9')]), ('\\xe2',\n+        &[('\\u0300', '\\u1ea7'), ('\\u0301', '\\u1ea5'), ('\\u0303', '\\u1eab'), ('\\u0309', '\\u1ea9')]),\n+        ('\\xe4', &[('\\u0304', '\\u01df')]), ('\\xe5', &[('\\u0301', '\\u01fb')]), ('\\xe6', &[('\\u0301',\n+        '\\u01fd'), ('\\u0304', '\\u01e3')]), ('\\xe7', &[('\\u0301', '\\u1e09')]), ('\\xea', &[('\\u0300',\n+        '\\u1ec1'), ('\\u0301', '\\u1ebf'), ('\\u0303', '\\u1ec5'), ('\\u0309', '\\u1ec3')]), ('\\xef',\n+        &[('\\u0301', '\\u1e2f')]), ('\\xf4', &[('\\u0300', '\\u1ed3'), ('\\u0301', '\\u1ed1'), ('\\u0303',\n+        '\\u1ed7'), ('\\u0309', '\\u1ed5')]), ('\\xf5', &[('\\u0301', '\\u1e4d'), ('\\u0304', '\\u022d'),\n+        ('\\u0308', '\\u1e4f')]), ('\\xf6', &[('\\u0304', '\\u022b')]), ('\\xf8', &[('\\u0301',\n+        '\\u01ff')]), ('\\xfc', &[('\\u0300', '\\u01dc'), ('\\u0301', '\\u01d8'), ('\\u0304', '\\u01d6'),\n+        ('\\u030c', '\\u01da')]), ('\\u0102', &[('\\u0300', '\\u1eb0'), ('\\u0301', '\\u1eae'), ('\\u0303',\n+        '\\u1eb4'), ('\\u0309', '\\u1eb2')]), ('\\u0103', &[('\\u0300', '\\u1eb1'), ('\\u0301', '\\u1eaf'),\n+        ('\\u0303', '\\u1eb5'), ('\\u0309', '\\u1eb3')]), ('\\u0112', &[('\\u0300', '\\u1e14'), ('\\u0301',\n+        '\\u1e16')]), ('\\u0113', &[('\\u0300', '\\u1e15'), ('\\u0301', '\\u1e17')]), ('\\u014c',\n+        &[('\\u0300', '\\u1e50'), ('\\u0301', '\\u1e52')]), ('\\u014d', &[('\\u0300', '\\u1e51'),\n+        ('\\u0301', '\\u1e53')]), ('\\u015a', &[('\\u0307', '\\u1e64')]), ('\\u015b', &[('\\u0307',\n+        '\\u1e65')]), ('\\u0160', &[('\\u0307', '\\u1e66')]), ('\\u0161', &[('\\u0307', '\\u1e67')]),\n+        ('\\u0168', &[('\\u0301', '\\u1e78')]), ('\\u0169', &[('\\u0301', '\\u1e79')]), ('\\u016a',\n+        &[('\\u0308', '\\u1e7a')]), ('\\u016b', &[('\\u0308', '\\u1e7b')]), ('\\u017f', &[('\\u0307',\n+        '\\u1e9b')]), ('\\u01a0', &[('\\u0300', '\\u1edc'), ('\\u0301', '\\u1eda'), ('\\u0303', '\\u1ee0'),\n+        ('\\u0309', '\\u1ede'), ('\\u0323', '\\u1ee2')]), ('\\u01a1', &[('\\u0300', '\\u1edd'), ('\\u0301',\n+        '\\u1edb'), ('\\u0303', '\\u1ee1'), ('\\u0309', '\\u1edf'), ('\\u0323', '\\u1ee3')]), ('\\u01af',\n+        &[('\\u0300', '\\u1eea'), ('\\u0301', '\\u1ee8'), ('\\u0303', '\\u1eee'), ('\\u0309', '\\u1eec'),\n+        ('\\u0323', '\\u1ef0')]), ('\\u01b0', &[('\\u0300', '\\u1eeb'), ('\\u0301', '\\u1ee9'), ('\\u0303',\n+        '\\u1eef'), ('\\u0309', '\\u1eed'), ('\\u0323', '\\u1ef1')]), ('\\u01b7', &[('\\u030c',\n+        '\\u01ee')]), ('\\u01ea', &[('\\u0304', '\\u01ec')]), ('\\u01eb', &[('\\u0304', '\\u01ed')]),\n+        ('\\u0226', &[('\\u0304', '\\u01e0')]), ('\\u0227', &[('\\u0304', '\\u01e1')]), ('\\u0228',\n+        &[('\\u0306', '\\u1e1c')]), ('\\u0229', &[('\\u0306', '\\u1e1d')]), ('\\u022e', &[('\\u0304',\n+        '\\u0230')]), ('\\u022f', &[('\\u0304', '\\u0231')]), ('\\u0292', &[('\\u030c', '\\u01ef')]),\n+        ('\\u0391', &[('\\u0300', '\\u1fba'), ('\\u0301', '\\u0386'), ('\\u0304', '\\u1fb9'), ('\\u0306',\n+        '\\u1fb8'), ('\\u0313', '\\u1f08'), ('\\u0314', '\\u1f09'), ('\\u0345', '\\u1fbc')]), ('\\u0395',\n+        &[('\\u0300', '\\u1fc8'), ('\\u0301', '\\u0388'), ('\\u0313', '\\u1f18'), ('\\u0314', '\\u1f19')]),\n+        ('\\u0397', &[('\\u0300', '\\u1fca'), ('\\u0301', '\\u0389'), ('\\u0313', '\\u1f28'), ('\\u0314',\n+        '\\u1f29'), ('\\u0345', '\\u1fcc')]), ('\\u0399', &[('\\u0300', '\\u1fda'), ('\\u0301', '\\u038a'),\n+        ('\\u0304', '\\u1fd9'), ('\\u0306', '\\u1fd8'), ('\\u0308', '\\u03aa'), ('\\u0313', '\\u1f38'),\n+        ('\\u0314', '\\u1f39')]), ('\\u039f', &[('\\u0300', '\\u1ff8'), ('\\u0301', '\\u038c'), ('\\u0313',\n+        '\\u1f48'), ('\\u0314', '\\u1f49')]), ('\\u03a1', &[('\\u0314', '\\u1fec')]), ('\\u03a5',\n+        &[('\\u0300', '\\u1fea'), ('\\u0301', '\\u038e'), ('\\u0304', '\\u1fe9'), ('\\u0306', '\\u1fe8'),\n+        ('\\u0308', '\\u03ab'), ('\\u0314', '\\u1f59')]), ('\\u03a9', &[('\\u0300', '\\u1ffa'), ('\\u0301',\n+        '\\u038f'), ('\\u0313', '\\u1f68'), ('\\u0314', '\\u1f69'), ('\\u0345', '\\u1ffc')]), ('\\u03ac',\n+        &[('\\u0345', '\\u1fb4')]), ('\\u03ae', &[('\\u0345', '\\u1fc4')]), ('\\u03b1', &[('\\u0300',\n+        '\\u1f70'), ('\\u0301', '\\u03ac'), ('\\u0304', '\\u1fb1'), ('\\u0306', '\\u1fb0'), ('\\u0313',\n+        '\\u1f00'), ('\\u0314', '\\u1f01'), ('\\u0342', '\\u1fb6'), ('\\u0345', '\\u1fb3')]), ('\\u03b5',\n+        &[('\\u0300', '\\u1f72'), ('\\u0301', '\\u03ad'), ('\\u0313', '\\u1f10'), ('\\u0314', '\\u1f11')]),\n+        ('\\u03b7', &[('\\u0300', '\\u1f74'), ('\\u0301', '\\u03ae'), ('\\u0313', '\\u1f20'), ('\\u0314',\n+        '\\u1f21'), ('\\u0342', '\\u1fc6'), ('\\u0345', '\\u1fc3')]), ('\\u03b9', &[('\\u0300', '\\u1f76'),\n+        ('\\u0301', '\\u03af'), ('\\u0304', '\\u1fd1'), ('\\u0306', '\\u1fd0'), ('\\u0308', '\\u03ca'),\n+        ('\\u0313', '\\u1f30'), ('\\u0314', '\\u1f31'), ('\\u0342', '\\u1fd6')]), ('\\u03bf', &[('\\u0300',\n+        '\\u1f78'), ('\\u0301', '\\u03cc'), ('\\u0313', '\\u1f40'), ('\\u0314', '\\u1f41')]), ('\\u03c1',\n+        &[('\\u0313', '\\u1fe4'), ('\\u0314', '\\u1fe5')]), ('\\u03c5', &[('\\u0300', '\\u1f7a'),\n+        ('\\u0301', '\\u03cd'), ('\\u0304', '\\u1fe1'), ('\\u0306', '\\u1fe0'), ('\\u0308', '\\u03cb'),\n+        ('\\u0313', '\\u1f50'), ('\\u0314', '\\u1f51'), ('\\u0342', '\\u1fe6')]), ('\\u03c9', &[('\\u0300',\n+        '\\u1f7c'), ('\\u0301', '\\u03ce'), ('\\u0313', '\\u1f60'), ('\\u0314', '\\u1f61'), ('\\u0342',\n+        '\\u1ff6'), ('\\u0345', '\\u1ff3')]), ('\\u03ca', &[('\\u0300', '\\u1fd2'), ('\\u0301', '\\u0390'),\n+        ('\\u0342', '\\u1fd7')]), ('\\u03cb', &[('\\u0300', '\\u1fe2'), ('\\u0301', '\\u03b0'), ('\\u0342',\n+        '\\u1fe7')]), ('\\u03ce', &[('\\u0345', '\\u1ff4')]), ('\\u03d2', &[('\\u0301', '\\u03d3'),\n+        ('\\u0308', '\\u03d4')]), ('\\u0406', &[('\\u0308', '\\u0407')]), ('\\u0410', &[('\\u0306',\n+        '\\u04d0'), ('\\u0308', '\\u04d2')]), ('\\u0413', &[('\\u0301', '\\u0403')]), ('\\u0415',\n+        &[('\\u0300', '\\u0400'), ('\\u0306', '\\u04d6'), ('\\u0308', '\\u0401')]), ('\\u0416',\n+        &[('\\u0306', '\\u04c1'), ('\\u0308', '\\u04dc')]), ('\\u0417', &[('\\u0308', '\\u04de')]),\n+        ('\\u0418', &[('\\u0300', '\\u040d'), ('\\u0304', '\\u04e2'), ('\\u0306', '\\u0419'), ('\\u0308',\n+        '\\u04e4')]), ('\\u041a', &[('\\u0301', '\\u040c')]), ('\\u041e', &[('\\u0308', '\\u04e6')]),\n+        ('\\u0423', &[('\\u0304', '\\u04ee'), ('\\u0306', '\\u040e'), ('\\u0308', '\\u04f0'), ('\\u030b',\n+        '\\u04f2')]), ('\\u0427', &[('\\u0308', '\\u04f4')]), ('\\u042b', &[('\\u0308', '\\u04f8')]),\n+        ('\\u042d', &[('\\u0308', '\\u04ec')]), ('\\u0430', &[('\\u0306', '\\u04d1'), ('\\u0308',\n+        '\\u04d3')]), ('\\u0433', &[('\\u0301', '\\u0453')]), ('\\u0435', &[('\\u0300', '\\u0450'),\n+        ('\\u0306', '\\u04d7'), ('\\u0308', '\\u0451')]), ('\\u0436', &[('\\u0306', '\\u04c2'), ('\\u0308',\n+        '\\u04dd')]), ('\\u0437', &[('\\u0308', '\\u04df')]), ('\\u0438', &[('\\u0300', '\\u045d'),\n+        ('\\u0304', '\\u04e3'), ('\\u0306', '\\u0439'), ('\\u0308', '\\u04e5')]), ('\\u043a', &[('\\u0301',\n+        '\\u045c')]), ('\\u043e', &[('\\u0308', '\\u04e7')]), ('\\u0443', &[('\\u0304', '\\u04ef'),\n+        ('\\u0306', '\\u045e'), ('\\u0308', '\\u04f1'), ('\\u030b', '\\u04f3')]), ('\\u0447', &[('\\u0308',\n+        '\\u04f5')]), ('\\u044b', &[('\\u0308', '\\u04f9')]), ('\\u044d', &[('\\u0308', '\\u04ed')]),\n+        ('\\u0456', &[('\\u0308', '\\u0457')]), ('\\u0474', &[('\\u030f', '\\u0476')]), ('\\u0475',\n+        &[('\\u030f', '\\u0477')]), ('\\u04d8', &[('\\u0308', '\\u04da')]), ('\\u04d9', &[('\\u0308',\n+        '\\u04db')]), ('\\u04e8', &[('\\u0308', '\\u04ea')]), ('\\u04e9', &[('\\u0308', '\\u04eb')]),\n+        ('\\u0627', &[('\\u0653', '\\u0622'), ('\\u0654', '\\u0623'), ('\\u0655', '\\u0625')]), ('\\u0648',\n+        &[('\\u0654', '\\u0624')]), ('\\u064a', &[('\\u0654', '\\u0626')]), ('\\u06c1', &[('\\u0654',\n+        '\\u06c2')]), ('\\u06d2', &[('\\u0654', '\\u06d3')]), ('\\u06d5', &[('\\u0654', '\\u06c0')]),\n+        ('\\u0928', &[('\\u093c', '\\u0929')]), ('\\u0930', &[('\\u093c', '\\u0931')]), ('\\u0933',\n+        &[('\\u093c', '\\u0934')]), ('\\u09c7', &[('\\u09be', '\\u09cb'), ('\\u09d7', '\\u09cc')]),\n+        ('\\u0b47', &[('\\u0b3e', '\\u0b4b'), ('\\u0b56', '\\u0b48'), ('\\u0b57', '\\u0b4c')]), ('\\u0b92',\n+        &[('\\u0bd7', '\\u0b94')]), ('\\u0bc6', &[('\\u0bbe', '\\u0bca'), ('\\u0bd7', '\\u0bcc')]),\n+        ('\\u0bc7', &[('\\u0bbe', '\\u0bcb')]), ('\\u0c46', &[('\\u0c56', '\\u0c48')]), ('\\u0cbf',\n+        &[('\\u0cd5', '\\u0cc0')]), ('\\u0cc6', &[('\\u0cc2', '\\u0cca'), ('\\u0cd5', '\\u0cc7'),\n+        ('\\u0cd6', '\\u0cc8')]), ('\\u0cca', &[('\\u0cd5', '\\u0ccb')]), ('\\u0d46', &[('\\u0d3e',\n+        '\\u0d4a'), ('\\u0d57', '\\u0d4c')]), ('\\u0d47', &[('\\u0d3e', '\\u0d4b')]), ('\\u0dd9',\n+        &[('\\u0dca', '\\u0dda'), ('\\u0dcf', '\\u0ddc'), ('\\u0ddf', '\\u0dde')]), ('\\u0ddc',\n+        &[('\\u0dca', '\\u0ddd')]), ('\\u1025', &[('\\u102e', '\\u1026')]), ('\\u1b05', &[('\\u1b35',\n+        '\\u1b06')]), ('\\u1b07', &[('\\u1b35', '\\u1b08')]), ('\\u1b09', &[('\\u1b35', '\\u1b0a')]),\n+        ('\\u1b0b', &[('\\u1b35', '\\u1b0c')]), ('\\u1b0d', &[('\\u1b35', '\\u1b0e')]), ('\\u1b11',\n+        &[('\\u1b35', '\\u1b12')]), ('\\u1b3a', &[('\\u1b35', '\\u1b3b')]), ('\\u1b3c', &[('\\u1b35',\n+        '\\u1b3d')]), ('\\u1b3e', &[('\\u1b35', '\\u1b40')]), ('\\u1b3f', &[('\\u1b35', '\\u1b41')]),\n+        ('\\u1b42', &[('\\u1b35', '\\u1b43')]), ('\\u1e36', &[('\\u0304', '\\u1e38')]), ('\\u1e37',\n+        &[('\\u0304', '\\u1e39')]), ('\\u1e5a', &[('\\u0304', '\\u1e5c')]), ('\\u1e5b', &[('\\u0304',\n+        '\\u1e5d')]), ('\\u1e62', &[('\\u0307', '\\u1e68')]), ('\\u1e63', &[('\\u0307', '\\u1e69')]),\n+        ('\\u1ea0', &[('\\u0302', '\\u1eac'), ('\\u0306', '\\u1eb6')]), ('\\u1ea1', &[('\\u0302',\n+        '\\u1ead'), ('\\u0306', '\\u1eb7')]), ('\\u1eb8', &[('\\u0302', '\\u1ec6')]), ('\\u1eb9',\n+        &[('\\u0302', '\\u1ec7')]), ('\\u1ecc', &[('\\u0302', '\\u1ed8')]), ('\\u1ecd', &[('\\u0302',\n+        '\\u1ed9')]), ('\\u1f00', &[('\\u0300', '\\u1f02'), ('\\u0301', '\\u1f04'), ('\\u0342', '\\u1f06'),\n+        ('\\u0345', '\\u1f80')]), ('\\u1f01', &[('\\u0300', '\\u1f03'), ('\\u0301', '\\u1f05'), ('\\u0342',\n+        '\\u1f07'), ('\\u0345', '\\u1f81')]), ('\\u1f02', &[('\\u0345', '\\u1f82')]), ('\\u1f03',\n+        &[('\\u0345', '\\u1f83')]), ('\\u1f04', &[('\\u0345', '\\u1f84')]), ('\\u1f05', &[('\\u0345',\n+        '\\u1f85')]), ('\\u1f06', &[('\\u0345', '\\u1f86')]), ('\\u1f07', &[('\\u0345', '\\u1f87')]),\n+        ('\\u1f08', &[('\\u0300', '\\u1f0a'), ('\\u0301', '\\u1f0c'), ('\\u0342', '\\u1f0e'), ('\\u0345',\n+        '\\u1f88')]), ('\\u1f09', &[('\\u0300', '\\u1f0b'), ('\\u0301', '\\u1f0d'), ('\\u0342', '\\u1f0f'),\n+        ('\\u0345', '\\u1f89')]), ('\\u1f0a', &[('\\u0345', '\\u1f8a')]), ('\\u1f0b', &[('\\u0345',\n+        '\\u1f8b')]), ('\\u1f0c', &[('\\u0345', '\\u1f8c')]), ('\\u1f0d', &[('\\u0345', '\\u1f8d')]),\n+        ('\\u1f0e', &[('\\u0345', '\\u1f8e')]), ('\\u1f0f', &[('\\u0345', '\\u1f8f')]), ('\\u1f10',\n+        &[('\\u0300', '\\u1f12'), ('\\u0301', '\\u1f14')]), ('\\u1f11', &[('\\u0300', '\\u1f13'),\n+        ('\\u0301', '\\u1f15')]), ('\\u1f18', &[('\\u0300', '\\u1f1a'), ('\\u0301', '\\u1f1c')]),\n+        ('\\u1f19', &[('\\u0300', '\\u1f1b'), ('\\u0301', '\\u1f1d')]), ('\\u1f20', &[('\\u0300',\n+        '\\u1f22'), ('\\u0301', '\\u1f24'), ('\\u0342', '\\u1f26'), ('\\u0345', '\\u1f90')]), ('\\u1f21',\n+        &[('\\u0300', '\\u1f23'), ('\\u0301', '\\u1f25'), ('\\u0342', '\\u1f27'), ('\\u0345', '\\u1f91')]),\n+        ('\\u1f22', &[('\\u0345', '\\u1f92')]), ('\\u1f23', &[('\\u0345', '\\u1f93')]), ('\\u1f24',\n+        &[('\\u0345', '\\u1f94')]), ('\\u1f25', &[('\\u0345', '\\u1f95')]), ('\\u1f26', &[('\\u0345',\n+        '\\u1f96')]), ('\\u1f27', &[('\\u0345', '\\u1f97')]), ('\\u1f28', &[('\\u0300', '\\u1f2a'),\n+        ('\\u0301', '\\u1f2c'), ('\\u0342', '\\u1f2e'), ('\\u0345', '\\u1f98')]), ('\\u1f29', &[('\\u0300',\n+        '\\u1f2b'), ('\\u0301', '\\u1f2d'), ('\\u0342', '\\u1f2f'), ('\\u0345', '\\u1f99')]), ('\\u1f2a',\n+        &[('\\u0345', '\\u1f9a')]), ('\\u1f2b', &[('\\u0345', '\\u1f9b')]), ('\\u1f2c', &[('\\u0345',\n+        '\\u1f9c')]), ('\\u1f2d', &[('\\u0345', '\\u1f9d')]), ('\\u1f2e', &[('\\u0345', '\\u1f9e')]),\n+        ('\\u1f2f', &[('\\u0345', '\\u1f9f')]), ('\\u1f30', &[('\\u0300', '\\u1f32'), ('\\u0301',\n+        '\\u1f34'), ('\\u0342', '\\u1f36')]), ('\\u1f31', &[('\\u0300', '\\u1f33'), ('\\u0301', '\\u1f35'),\n+        ('\\u0342', '\\u1f37')]), ('\\u1f38', &[('\\u0300', '\\u1f3a'), ('\\u0301', '\\u1f3c'), ('\\u0342',\n+        '\\u1f3e')]), ('\\u1f39', &[('\\u0300', '\\u1f3b'), ('\\u0301', '\\u1f3d'), ('\\u0342',\n+        '\\u1f3f')]), ('\\u1f40', &[('\\u0300', '\\u1f42'), ('\\u0301', '\\u1f44')]), ('\\u1f41',\n+        &[('\\u0300', '\\u1f43'), ('\\u0301', '\\u1f45')]), ('\\u1f48', &[('\\u0300', '\\u1f4a'),\n+        ('\\u0301', '\\u1f4c')]), ('\\u1f49', &[('\\u0300', '\\u1f4b'), ('\\u0301', '\\u1f4d')]),\n+        ('\\u1f50', &[('\\u0300', '\\u1f52'), ('\\u0301', '\\u1f54'), ('\\u0342', '\\u1f56')]), ('\\u1f51',\n+        &[('\\u0300', '\\u1f53'), ('\\u0301', '\\u1f55'), ('\\u0342', '\\u1f57')]), ('\\u1f59',\n+        &[('\\u0300', '\\u1f5b'), ('\\u0301', '\\u1f5d'), ('\\u0342', '\\u1f5f')]), ('\\u1f60',\n+        &[('\\u0300', '\\u1f62'), ('\\u0301', '\\u1f64'), ('\\u0342', '\\u1f66'), ('\\u0345', '\\u1fa0')]),\n+        ('\\u1f61', &[('\\u0300', '\\u1f63'), ('\\u0301', '\\u1f65'), ('\\u0342', '\\u1f67'), ('\\u0345',\n+        '\\u1fa1')]), ('\\u1f62', &[('\\u0345', '\\u1fa2')]), ('\\u1f63', &[('\\u0345', '\\u1fa3')]),\n+        ('\\u1f64', &[('\\u0345', '\\u1fa4')]), ('\\u1f65', &[('\\u0345', '\\u1fa5')]), ('\\u1f66',\n+        &[('\\u0345', '\\u1fa6')]), ('\\u1f67', &[('\\u0345', '\\u1fa7')]), ('\\u1f68', &[('\\u0300',\n+        '\\u1f6a'), ('\\u0301', '\\u1f6c'), ('\\u0342', '\\u1f6e'), ('\\u0345', '\\u1fa8')]), ('\\u1f69',\n+        &[('\\u0300', '\\u1f6b'), ('\\u0301', '\\u1f6d'), ('\\u0342', '\\u1f6f'), ('\\u0345', '\\u1fa9')]),\n+        ('\\u1f6a', &[('\\u0345', '\\u1faa')]), ('\\u1f6b', &[('\\u0345', '\\u1fab')]), ('\\u1f6c',\n+        &[('\\u0345', '\\u1fac')]), ('\\u1f6d', &[('\\u0345', '\\u1fad')]), ('\\u1f6e', &[('\\u0345',\n+        '\\u1fae')]), ('\\u1f6f', &[('\\u0345', '\\u1faf')]), ('\\u1f70', &[('\\u0345', '\\u1fb2')]),\n+        ('\\u1f74', &[('\\u0345', '\\u1fc2')]), ('\\u1f7c', &[('\\u0345', '\\u1ff2')]), ('\\u1fb6',\n+        &[('\\u0345', '\\u1fb7')]), ('\\u1fbf', &[('\\u0300', '\\u1fcd'), ('\\u0301', '\\u1fce'),\n+        ('\\u0342', '\\u1fcf')]), ('\\u1fc6', &[('\\u0345', '\\u1fc7')]), ('\\u1ff6', &[('\\u0345',\n+        '\\u1ff7')]), ('\\u1ffe', &[('\\u0300', '\\u1fdd'), ('\\u0301', '\\u1fde'), ('\\u0342',\n+        '\\u1fdf')]), ('\\u2190', &[('\\u0338', '\\u219a')]), ('\\u2192', &[('\\u0338', '\\u219b')]),\n+        ('\\u2194', &[('\\u0338', '\\u21ae')]), ('\\u21d0', &[('\\u0338', '\\u21cd')]), ('\\u21d2',\n+        &[('\\u0338', '\\u21cf')]), ('\\u21d4', &[('\\u0338', '\\u21ce')]), ('\\u2203', &[('\\u0338',\n+        '\\u2204')]), ('\\u2208', &[('\\u0338', '\\u2209')]), ('\\u220b', &[('\\u0338', '\\u220c')]),\n+        ('\\u2223', &[('\\u0338', '\\u2224')]), ('\\u2225', &[('\\u0338', '\\u2226')]), ('\\u223c',\n+        &[('\\u0338', '\\u2241')]), ('\\u2243', &[('\\u0338', '\\u2244')]), ('\\u2245', &[('\\u0338',\n+        '\\u2247')]), ('\\u2248', &[('\\u0338', '\\u2249')]), ('\\u224d', &[('\\u0338', '\\u226d')]),\n+        ('\\u2261', &[('\\u0338', '\\u2262')]), ('\\u2264', &[('\\u0338', '\\u2270')]), ('\\u2265',\n+        &[('\\u0338', '\\u2271')]), ('\\u2272', &[('\\u0338', '\\u2274')]), ('\\u2273', &[('\\u0338',\n+        '\\u2275')]), ('\\u2276', &[('\\u0338', '\\u2278')]), ('\\u2277', &[('\\u0338', '\\u2279')]),\n+        ('\\u227a', &[('\\u0338', '\\u2280')]), ('\\u227b', &[('\\u0338', '\\u2281')]), ('\\u227c',\n+        &[('\\u0338', '\\u22e0')]), ('\\u227d', &[('\\u0338', '\\u22e1')]), ('\\u2282', &[('\\u0338',\n+        '\\u2284')]), ('\\u2283', &[('\\u0338', '\\u2285')]), ('\\u2286', &[('\\u0338', '\\u2288')]),\n+        ('\\u2287', &[('\\u0338', '\\u2289')]), ('\\u2291', &[('\\u0338', '\\u22e2')]), ('\\u2292',\n+        &[('\\u0338', '\\u22e3')]), ('\\u22a2', &[('\\u0338', '\\u22ac')]), ('\\u22a8', &[('\\u0338',\n+        '\\u22ad')]), ('\\u22a9', &[('\\u0338', '\\u22ae')]), ('\\u22ab', &[('\\u0338', '\\u22af')]),\n+        ('\\u22b2', &[('\\u0338', '\\u22ea')]), ('\\u22b3', &[('\\u0338', '\\u22eb')]), ('\\u22b4',\n+        &[('\\u0338', '\\u22ec')]), ('\\u22b5', &[('\\u0338', '\\u22ed')]), ('\\u3046', &[('\\u3099',\n+        '\\u3094')]), ('\\u304b', &[('\\u3099', '\\u304c')]), ('\\u304d', &[('\\u3099', '\\u304e')]),\n+        ('\\u304f', &[('\\u3099', '\\u3050')]), ('\\u3051', &[('\\u3099', '\\u3052')]), ('\\u3053',\n+        &[('\\u3099', '\\u3054')]), ('\\u3055', &[('\\u3099', '\\u3056')]), ('\\u3057', &[('\\u3099',\n+        '\\u3058')]), ('\\u3059', &[('\\u3099', '\\u305a')]), ('\\u305b', &[('\\u3099', '\\u305c')]),\n+        ('\\u305d', &[('\\u3099', '\\u305e')]), ('\\u305f', &[('\\u3099', '\\u3060')]), ('\\u3061',\n+        &[('\\u3099', '\\u3062')]), ('\\u3064', &[('\\u3099', '\\u3065')]), ('\\u3066', &[('\\u3099',\n+        '\\u3067')]), ('\\u3068', &[('\\u3099', '\\u3069')]), ('\\u306f', &[('\\u3099', '\\u3070'),\n+        ('\\u309a', '\\u3071')]), ('\\u3072', &[('\\u3099', '\\u3073'), ('\\u309a', '\\u3074')]),\n+        ('\\u3075', &[('\\u3099', '\\u3076'), ('\\u309a', '\\u3077')]), ('\\u3078', &[('\\u3099',\n+        '\\u3079'), ('\\u309a', '\\u307a')]), ('\\u307b', &[('\\u3099', '\\u307c'), ('\\u309a',\n+        '\\u307d')]), ('\\u309d', &[('\\u3099', '\\u309e')]), ('\\u30a6', &[('\\u3099', '\\u30f4')]),\n+        ('\\u30ab', &[('\\u3099', '\\u30ac')]), ('\\u30ad', &[('\\u3099', '\\u30ae')]), ('\\u30af',\n+        &[('\\u3099', '\\u30b0')]), ('\\u30b1', &[('\\u3099', '\\u30b2')]), ('\\u30b3', &[('\\u3099',\n+        '\\u30b4')]), ('\\u30b5', &[('\\u3099', '\\u30b6')]), ('\\u30b7', &[('\\u3099', '\\u30b8')]),\n+        ('\\u30b9', &[('\\u3099', '\\u30ba')]), ('\\u30bb', &[('\\u3099', '\\u30bc')]), ('\\u30bd',\n+        &[('\\u3099', '\\u30be')]), ('\\u30bf', &[('\\u3099', '\\u30c0')]), ('\\u30c1', &[('\\u3099',\n+        '\\u30c2')]), ('\\u30c4', &[('\\u3099', '\\u30c5')]), ('\\u30c6', &[('\\u3099', '\\u30c7')]),\n+        ('\\u30c8', &[('\\u3099', '\\u30c9')]), ('\\u30cf', &[('\\u3099', '\\u30d0'), ('\\u309a',\n+        '\\u30d1')]), ('\\u30d2', &[('\\u3099', '\\u30d3'), ('\\u309a', '\\u30d4')]), ('\\u30d5',\n+        &[('\\u3099', '\\u30d6'), ('\\u309a', '\\u30d7')]), ('\\u30d8', &[('\\u3099', '\\u30d9'),\n+        ('\\u309a', '\\u30da')]), ('\\u30db', &[('\\u3099', '\\u30dc'), ('\\u309a', '\\u30dd')]),\n+        ('\\u30ef', &[('\\u3099', '\\u30f7')]), ('\\u30f0', &[('\\u3099', '\\u30f8')]), ('\\u30f1',\n+        &[('\\u3099', '\\u30f9')]), ('\\u30f2', &[('\\u3099', '\\u30fa')]), ('\\u30fd', &[('\\u3099',\n+        '\\u30fe')]), ('\\U00011099', &[('\\U000110ba', '\\U0001109a')]), ('\\U0001109b',\n+        &[('\\U000110ba', '\\U0001109c')]), ('\\U000110a5', &[('\\U000110ba', '\\U000110ab')]),\n+        ('\\U00011131', &[('\\U00011127', '\\U0001112e')]), ('\\U00011132', &[('\\U00011127',\n+        '\\U0001112f')]), ('\\U00011347', &[('\\U0001133e', '\\U0001134b'), ('\\U00011357',\n+        '\\U0001134c')]), ('\\U000114b9', &[('\\U000114b0', '\\U000114bc'), ('\\U000114ba',\n+        '\\U000114bb'), ('\\U000114bd', '\\U000114be')]), ('\\U000115b8', &[('\\U000115af',\n+        '\\U000115ba')]), ('\\U000115b9', &[('\\U000115af', '\\U000115bb')])\n+    ];\n+\n \n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n         use core::option::{Some, None};"}]}