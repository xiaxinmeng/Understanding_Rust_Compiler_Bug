{"sha": "dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYzE0YzQwZWVlMzEzOWU1M2JmYWNkMzg1NGFmOGE1YTNkMzc5ZTg=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-23T17:28:27Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-11-11T13:37:13Z"}, "message": "suggest to add a constraint except asyn-fn without explicit output", "tree": {"sha": "6440c7fef5ae871ff387db470367868708b159b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6440c7fef5ae871ff387db470367868708b159b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "html_url": "https://github.com/rust-lang/rust/commit/dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b380d35849143143ad7c19547a8f2533d880d360", "url": "https://api.github.com/repos/rust-lang/rust/commits/b380d35849143143ad7c19547a8f2533d880d360", "html_url": "https://github.com/rust-lang/rust/commit/b380d35849143143ad7c19547a8f2533d880d360"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "3d98dd8de8b47c21e5b9afd7aa092366eeebefd0", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ///\n     /// It will later be extended to trait objects.\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.tcx().is_suitable_region(sup)?;"}, {"sha": "09cfbf850a57dfb76d219b38991c6d2765270311", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -77,7 +77,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n-    pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n+    pub fn regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => (origin.span(), sub, sup),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => (origin.span(), sub, sup),"}, {"sha": "43b0e43a5fd896a741e4238a62cd207c5ad80260", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -9,7 +9,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'a>> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         debug!(\n             \"try_report_named_anon_conflict(sub={:?}, sup={:?}, error={:?})\","}, {"sha": "33bdf31f110c356d4ff4b4f63005099b3ab3e07a", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -20,8 +20,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ) = error.clone()\n             {\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n+                let return_ty = self.tcx().return_type_impl_trait(anon_reg_sup.def_id);\n                 if sub_r == &RegionKind::ReStatic &&\n-                    self.tcx().return_type_impl_trait(anon_reg_sup.def_id).is_some()\n+                    return_ty.is_some()\n                 {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n@@ -53,16 +54,19 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         _ => \"'_\".to_owned(),\n                     };\n                     if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(return_sp) {\n-                        err.span_suggestion(\n-                            return_sp,\n-                            &format!(\n-                                \"you can add a constraint to the return type to make it last \\\n+                        // only apply this suggestion onto non-async fnunctions\n+                        if !return_ty.unwrap().1 {\n+                            err.span_suggestion(\n+                                return_sp,\n+                                &format!(\n+                                    \"you can add a constraint to the return type to make it last \\\n                                  less than `'static` and match {}\",\n-                                lifetime,\n-                            ),\n-                            format!(\"{} + {}\", snippet, lifetime_name),\n-                            Applicability::Unspecified,\n-                        );\n+                                 lifetime,\n+                                ),\n+                                format!(\"{} + {}\", snippet, lifetime_name),\n+                                Applicability::Unspecified,\n+                            );\n+                        }\n                     }\n                     err.emit();\n                     return Some(ErrorReported);"}, {"sha": "56bf8b60a74496855f22d98134d6a52784ab008b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -1552,14 +1552,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         return Some(FreeRegionInfo {\n             def_id: suitable_region_binding_scope,\n             boundregion: bound_region,\n-            is_impl_item: is_impl_item,\n+            is_impl_item,\n         });\n     }\n \n     pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> Option<Ty<'tcx>> {\n+    ) -> Option<(Ty<'tcx>, bool)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().as_local_hir_id(scope_def_id).unwrap();\n         match self.hir().get(hir_id) {\n@@ -1579,8 +1579,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(*self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n+                let is_async_fn =\n+                    hir::IsAsync::Async == self.asyncness(scope_def_id);\n                 if output.is_impl_trait() {\n-                    Some(output)\n+                    Some((output, is_async_fn))\n                 } else {\n                     None\n                 }"}, {"sha": "3a202c66a665be70fc3dba43c61e0abb7fe88a33", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc14c40eee3139e53bfacd3854af8a5a3d379e8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "patch": "@@ -698,10 +698,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let (Some(f), Some(ty::RegionKind::ReStatic)) =\n             (self.to_error_region(fr), self.to_error_region(outlived_fr))\n         {\n-            if let Some(ty::TyS {\n+            if let Some((ty::TyS {\n                 kind: ty::Opaque(did, substs),\n                 ..\n-            }) = infcx\n+            }, _)) = infcx\n                 .tcx\n                 .is_suitable_region(f)\n                 .map(|r| r.def_id)"}]}