{"sha": "7cda22f8c55c97bdfd49fef69c484325e9256fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGEyMmY4YzU1Yzk3YmRmZDQ5ZmVmNjljNDg0MzI1ZTkyNTZmYjg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T04:27:54Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T04:27:54Z"}, "message": "Add initial enum initialization support.", "tree": {"sha": "1d658037fb6b76cb5a2a10497014753aea01f166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d658037fb6b76cb5a2a10497014753aea01f166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cda22f8c55c97bdfd49fef69c484325e9256fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cda22f8c55c97bdfd49fef69c484325e9256fb8", "html_url": "https://github.com/rust-lang/rust/commit/7cda22f8c55c97bdfd49fef69c484325e9256fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cda22f8c55c97bdfd49fef69c484325e9256fb8/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13700085768bb53aecaca9d4d96948b125db9740", "url": "https://api.github.com/repos/rust-lang/rust/commits/13700085768bb53aecaca9d4d96948b125db9740", "html_url": "https://github.com/rust-lang/rust/commit/13700085768bb53aecaca9d4d96948b125db9740"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "6f559e97688e49ae03af90a31288a30515a90544", "filename": "src/interpreter.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7cda22f8c55c97bdfd49fef69c484325e9256fb8/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cda22f8c55c97bdfd49fef69c484325e9256fb8/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=7cda22f8c55c97bdfd49fef69c484325e9256fb8", "patch": "@@ -269,9 +269,9 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         self.memory.write_int(dest, n)\n     }\n \n-    fn assign_to_product(&mut self, dest: Pointer, dest_repr: Repr,\n+    fn assign_to_product(&mut self, dest: Pointer, dest_repr: &Repr,\n                          operands: &[mir::Operand<'tcx>]) -> EvalResult<()> {\n-        match dest_repr {\n+        match *dest_repr {\n             Repr::Product { ref fields, .. } => {\n                 for (field, operand) in fields.iter().zip(operands) {\n                     let src = try!(self.operand_to_ptr(operand));\n@@ -315,32 +315,26 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             Aggregate(ref kind, ref operands) => {\n                 use rustc::mir::repr::AggregateKind::*;\n                 match *kind {\n-                    Tuple => self.assign_to_product(dest, dest_repr, operands),\n-\n-                    Adt(ref adt_def, variant_idx, _) => {\n-                        use rustc::middle::ty::AdtKind::*;\n-                        match adt_def.adt_kind() {\n-                            Struct => self.assign_to_product(dest, dest_repr, operands),\n-\n-                            Enum => unimplemented!(),\n+                    Tuple => self.assign_to_product(dest, &dest_repr, operands),\n+\n+                    Adt(ref adt_def, variant_idx, _) => match adt_def.adt_kind() {\n+                        ty::AdtKind::Struct => self.assign_to_product(dest, &dest_repr, operands),\n+\n+                        ty::AdtKind::Enum => match dest_repr {\n+                            Repr::Sum { discr_size, ref variants, .. } =>\n+                                // TODO(tsion): Write the discriminant value.\n+                                self.assign_to_product(\n+                                    dest.offset(discr_size),\n+                                    &variants[variant_idx],\n+                                    operands\n+                                ),\n+                            _ => panic!(\"expected Repr::Sum target\"),\n                         }\n-                    }\n+                    },\n \n                     Vec => unimplemented!(),\n                     Closure(..) => unimplemented!(),\n                 }\n-\n-                // let max_fields = adt_def.variants\n-                //     .iter()\n-                //     .map(|v| v.fields.len())\n-                //     .max()\n-                //     .unwrap_or(0);\n-                // let ptr = self.allocate_aggregate(max_fields);\n-                // for (i, operand) in operands.iter().enumerate() {\n-                //     let val = self.operand_to_ptr(operand);\n-                //     self.write_pointer(ptr.offset(i), val);\n-                // }\n-                // Value::Adt { variant: variant, data_ptr: ptr }\n             }\n \n             // Ref(_region, _kind, ref lvalue) => {"}, {"sha": "e6545e81c00b83be179efc0d43d8d9b70814aa09", "filename": "test/sums.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7cda22f8c55c97bdfd49fef69c484325e9256fb8/test%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cda22f8c55c97bdfd49fef69c484325e9256fb8/test%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fsums.rs?ref=7cda22f8c55c97bdfd49fef69c484325e9256fb8", "patch": "@@ -1,34 +1,30 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n-// enum MyOption<T> {\n-//     Some { data: T },\n-//     None,\n-// }\n+#[miri_run]\n+fn return_none() -> Option<i64> {\n+    None\n+}\n \n-// #[miri_run(expected = \"Int(13)\")]\n-// fn match_my_opt_some() -> i32 {\n-//     let x = MyOption::Some { data: 13 };\n+#[miri_run]\n+fn return_some() -> Option<i64> {\n+    Some(42)\n+}\n+\n+// #[miri_run]\n+// fn match_opt_none() -> i64 {\n+//     let x = None,\n //     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n+//         Some(data) => data,\n+//         None => 42,\n //     }\n // }\n \n-// #[miri_run(expected = \"Int(42)\")]\n-// fn match_my_opt_none() -> i32 {\n-//     let x = MyOption::None;\n+// #[miri_run]\n+// fn match_opt_some() -> i64 {\n+//     let x = Some(13);\n //     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n+//         Some(data) => data,\n+//         None => 42,\n //     }\n // }\n-\n-#[miri_run]\n-fn match_opt_some() -> i64 {\n-    let x = Some(13);\n-    match x {\n-        Some(data) => data,\n-        None => 42,\n-    }\n-}"}]}