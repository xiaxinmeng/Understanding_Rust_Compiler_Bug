{"sha": "93aa166748eef9560df2435391dc3f3b53f8262d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYWExNjY3NDhlZWY5NTYwZGYyNDM1MzkxZGMzZjNiNTNmODI2MmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-01-24T18:35:09Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "wip lower impl trait to type args", "tree": {"sha": "e91083af566a07b9324548cc87f04776124906cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91083af566a07b9324548cc87f04776124906cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93aa166748eef9560df2435391dc3f3b53f8262d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93aa166748eef9560df2435391dc3f3b53f8262d", "html_url": "https://github.com/rust-lang/rust/commit/93aa166748eef9560df2435391dc3f3b53f8262d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93aa166748eef9560df2435391dc3f3b53f8262d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dec65d3b1aa703ceef993e46136f8949d7e0e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dec65d3b1aa703ceef993e46136f8949d7e0e48", "html_url": "https://github.com/rust-lang/rust/commit/9dec65d3b1aa703ceef993e46136f8949d7e0e48"}], "stats": {"total": 111, "additions": 97, "deletions": 14}, "files": [{"sha": "817c27410a1d9ecc43867e1d7134d019140eea15", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -755,7 +755,7 @@ pub struct TypeParam {\n impl TypeParam {\n     pub fn name(self, db: &impl HirDatabase) -> Name {\n         let params = db.generic_params(self.id.parent);\n-        params.types[self.id.local_id].name.clone()\n+        params.types[self.id.local_id].name.clone().unwrap_or_else(Name::missing)\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {"}, {"sha": "7553d8a87191596267d72c1ecd11df9502f4b635", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -27,8 +27,16 @@ use crate::{\n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct TypeParamData {\n-    pub name: Name,\n+    pub name: Option<Name>,\n     pub default: Option<TypeRef>,\n+    pub provenance: TypeParamProvenance,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum TypeParamProvenance {\n+    TypeParamList,\n+    TraitSelf,\n+    ArgumentImplTrait,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n@@ -68,6 +76,11 @@ impl GenericParams {\n             GenericDefId::FunctionId(it) => {\n                 let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n+                // lower `impl Trait` in arguments\n+                let data = db.function_data(it);\n+                for param in &data.params {\n+                    generics.fill_implicit_impl_trait_args(param);\n+                }\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::StructId(it)) => {\n@@ -89,8 +102,11 @@ impl GenericParams {\n                 let src = it.lookup(db).source(db);\n \n                 // traits get the Self type as an implicit first type parameter\n-                let self_param_id =\n-                    generics.types.alloc(TypeParamData { name: name![Self], default: None });\n+                let self_param_id = generics.types.alloc(TypeParamData {\n+                    name: Some(name![Self]),\n+                    default: None,\n+                    provenance: TypeParamProvenance::TraitSelf,\n+                });\n                 sm.insert(self_param_id, Either::Left(src.value.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n@@ -142,7 +158,11 @@ impl GenericParams {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n             let default = type_param.default_type().map(TypeRef::from_ast);\n-            let param = TypeParamData { name: name.clone(), default };\n+            let param = TypeParamData {\n+                name: Some(name.clone()),\n+                default,\n+                provenance: TypeParamProvenance::TypeParamList,\n+            };\n             let param_id = self.types.alloc(param);\n             sm.insert(param_id, Either::Right(type_param.clone()));\n \n@@ -173,8 +193,23 @@ impl GenericParams {\n         self.where_predicates.push(WherePredicate { type_ref, bound });\n     }\n \n+    fn fill_implicit_impl_trait_args(&mut self, type_ref: &TypeRef) {\n+        type_ref.walk(&mut |type_ref| {\n+            if let TypeRef::ImplTrait(_) = type_ref {\n+                let param = TypeParamData {\n+                    name: None,\n+                    default: None,\n+                    provenance: TypeParamProvenance::ArgumentImplTrait,\n+                };\n+                let _param_id = self.types.alloc(param);\n+            }\n+        });\n+    }\n+\n     pub fn find_by_name(&self, name: &Name) -> Option<LocalTypeParamId> {\n-        self.types.iter().find_map(|(id, p)| if &p.name == name { Some(id) } else { None })\n+        self.types\n+            .iter()\n+            .find_map(|(id, p)| if p.name.as_ref() == Some(name) { Some(id) } else { None })\n     }\n }\n "}, {"sha": "05cf4646a897ab16ea2ce26a7c1f7676818dc7f3", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -490,10 +490,12 @@ impl Scope {\n             }\n             Scope::GenericParams { params, def } => {\n                 for (local_id, param) in params.types.iter() {\n-                    f(\n-                        param.name.clone(),\n-                        ScopeDef::GenericParam(TypeParamId { local_id, parent: *def }),\n-                    )\n+                    if let Some(name) = &param.name {\n+                        f(\n+                            name.clone(),\n+                            ScopeDef::GenericParam(TypeParamId { local_id, parent: *def }),\n+                        )\n+                    }\n                 }\n             }\n             Scope::ImplBlockScope(i) => {"}, {"sha": "1094147705390eec185e66759cac491e65ff3118", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -124,6 +124,50 @@ impl TypeRef {\n     pub(crate) fn unit() -> TypeRef {\n         TypeRef::Tuple(Vec::new())\n     }\n+\n+    pub fn walk(&self, f: &mut impl FnMut(&TypeRef)) {\n+        go(self, f);\n+\n+        fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n+            f(type_ref);\n+            match type_ref {\n+                TypeRef::Fn(types) | TypeRef::Tuple(types) => {\n+                    types.iter().for_each(|t| go(t, f))\n+                }\n+                TypeRef::RawPtr(type_ref, _)\n+                | TypeRef::Reference(type_ref, _)\n+                | TypeRef::Array(type_ref)\n+                | TypeRef::Slice(type_ref) => go(&type_ref, f),\n+                TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n+                    for bound in bounds {\n+                        match bound {\n+                            TypeBound::Path(path) => go_path(path, f),\n+                            TypeBound::Error => (),\n+                        }\n+                    }\n+                }\n+                TypeRef::Path(path) => go_path(path, f),\n+                TypeRef::Never | TypeRef::Placeholder | TypeRef::Error => {}\n+            };\n+        }\n+\n+        fn go_path(path: &Path, f: &mut impl FnMut(&TypeRef)) {\n+            if let Some(type_ref) = path.type_anchor() {\n+                go(type_ref, f);\n+            }\n+            for segment in path.segments().iter() {\n+                if let Some(args_and_bindings) = segment.args_and_bindings {\n+                    for arg in &args_and_bindings.args {\n+                        let crate::path::GenericArg::Type(type_ref) = arg;\n+                        go(type_ref, f);\n+                    }\n+                    for (_, type_ref) in &args_and_bindings.bindings {\n+                        go(type_ref, f);\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>) -> Vec<TypeBound> {"}, {"sha": "97cb20cea401b34482e0ca9da4be61717663cf48", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::resolver_for_expr,\n     AdtId, AssocContainerId, Lookup, StructFieldId,\n };\n-use hir_expand::name::{name, Name};\n+use hir_expand::name::Name;\n use ra_syntax::ast::RangeOp;\n \n use crate::{\n@@ -654,7 +654,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.as_ref().map(|p| p.iter_parent()) {\n             for (_id, param) in parent_generics {\n-                if param.name == name![Self] {\n+                if param.provenance == hir_def::generics::TypeParamProvenance::TraitSelf {\n                     substs.push(receiver_ty.clone());\n                 } else {\n                     substs.push(Ty::Unknown);"}, {"sha": "cb7a60352fdc54e7a04c1859a3ae28158b27dc51", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -368,7 +368,7 @@ impl Substs {\n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub(crate) fn identity(generic_params: &Generics) -> Substs {\n         Substs(\n-            generic_params.iter().map(|(idx, p)| Ty::Param { idx, name: p.name.clone() }).collect(),\n+            generic_params.iter().map(|(idx, p)| Ty::Param { idx, name: p.name.clone().unwrap_or_else(Name::missing) }).collect(),\n         )\n     }\n "}, {"sha": "6f768147520ace01f6750af38316514be5d45171", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -341,6 +341,7 @@ pub(super) fn substs_from_path_segment(\n         // Self type as an implicit first type parameter, but it can't be\n         // actually provided in the type arguments\n         // (well, actually sometimes it can, in the form of type-relative paths: `<Foo as Default>::default()`)\n+        // TODO handle this using type param provenance\n         substs.push(Ty::Unknown);\n     }\n     if let Some(generic_args) = &segment.args_and_bindings {"}, {"sha": "314a3241f9d64df3d675ad234a54f2ed09e9d178", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93aa166748eef9560df2435391dc3f3b53f8262d/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=93aa166748eef9560df2435391dc3f3b53f8262d", "patch": "@@ -127,7 +127,8 @@ impl Generics {\n         self.find_param(param).0\n     }\n     pub(crate) fn param_name(&self, param: TypeParamId) -> Name {\n-        self.find_param(param).1.name.clone()\n+        // FIXME make this return Option\n+        self.find_param(param).1.name.clone().unwrap_or_else(Name::missing)\n     }\n     fn find_param(&self, param: TypeParamId) -> (u32, &TypeParamData) {\n         if param.parent == self.def {"}]}