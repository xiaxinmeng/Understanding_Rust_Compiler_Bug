{"sha": "6e60fdba1794893dbd1855f01fb0f6b32b70137a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNjBmZGJhMTc5NDg5M2RiZDE4NTVmMDFmYjBmNmIzMmI3MDEzN2E=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T11:49:02Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:36:10Z"}, "message": "Remove unnecessary temporaries from compare_values()", "tree": {"sha": "96fb440cebbea0e063d4212643610bd3af6750c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fb440cebbea0e063d4212643610bd3af6750c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e60fdba1794893dbd1855f01fb0f6b32b70137a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e60fdba1794893dbd1855f01fb0f6b32b70137a", "html_url": "https://github.com/rust-lang/rust/commit/6e60fdba1794893dbd1855f01fb0f6b32b70137a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e60fdba1794893dbd1855f01fb0f6b32b70137a/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1806174ab430583fe09df508ddf426bea9f4a3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1806174ab430583fe09df508ddf426bea9f4a3e1", "html_url": "https://github.com/rust-lang/rust/commit/1806174ab430583fe09df508ddf426bea9f4a3e1"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "8f2efa013b25e7f1b6444ad432e9acf8a556013f", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6e60fdba1794893dbd1855f01fb0f6b32b70137a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e60fdba1794893dbd1855f01fb0f6b32b70137a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=6e60fdba1794893dbd1855f01fb0f6b32b70137a", "patch": "@@ -875,19 +875,17 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                               debug_loc: DebugLoc)\n                               -> Result<'blk, 'tcx> {\n     fn compare_str<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n-                               lhs: ValueRef,\n-                               rhs: ValueRef,\n+                               lhs_data: ValueRef,\n+                               lhs_len: ValueRef,\n+                               rhs_data: ValueRef,\n+                               rhs_len: ValueRef,\n                                rhs_t: Ty<'tcx>,\n                                debug_loc: DebugLoc)\n                                -> Result<'blk, 'tcx> {\n         let did = langcall(cx,\n                            None,\n                            &format!(\"comparison of `{}`\", rhs_t),\n                            StrEqFnLangItem);\n-        let lhs_data = Load(cx, expr::get_dataptr(cx, lhs));\n-        let lhs_len = Load(cx, expr::get_meta(cx, lhs));\n-        let rhs_data = Load(cx, expr::get_dataptr(cx, rhs));\n-        let rhs_len = Load(cx, expr::get_meta(cx, rhs));\n         callee::trans_lang_call(cx, did, &[lhs_data, lhs_len, rhs_data, rhs_len], None, debug_loc)\n     }\n \n@@ -899,32 +897,38 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n     match rhs_t.sty {\n         ty::TyRef(_, mt) => match mt.ty.sty {\n-            ty::TyStr => compare_str(cx, lhs, rhs, rhs_t, debug_loc),\n+            ty::TyStr => {\n+                let lhs_data = Load(cx, expr::get_dataptr(cx, lhs));\n+                let lhs_len = Load(cx, expr::get_meta(cx, lhs));\n+                let rhs_data = Load(cx, expr::get_dataptr(cx, rhs));\n+                let rhs_len = Load(cx, expr::get_meta(cx, rhs));\n+                compare_str(cx, lhs_data, lhs_len, rhs_data, rhs_len, rhs_t, debug_loc)\n+            }\n             ty::TyArray(ty, _) | ty::TySlice(ty) => match ty.sty {\n                 ty::TyUint(ast::TyU8) => {\n                     // NOTE: cast &[u8] and &[u8; N] to &str and abuse the str_eq lang item,\n                     // which calls memcmp().\n                     let pat_len = val_ty(rhs).element_type().array_length();\n                     let ty_str_slice = cx.tcx().mk_static_str();\n \n-                    let rhs_str = alloc_ty(cx, ty_str_slice, \"rhs_str\");\n-                    Store(cx, expr::get_dataptr(cx, rhs), expr::get_dataptr(cx, rhs_str));\n-                    Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, rhs_str));\n+                    let rhs_data = GEPi(cx, rhs, &[0, 0]);\n+                    let rhs_len = C_uint(cx.ccx(), pat_len);\n \n-                    let lhs_str;\n+                    let lhs_data;\n+                    let lhs_len;\n                     if val_ty(lhs) == val_ty(rhs) {\n                         // Both the discriminant and the pattern are thin pointers\n-                        lhs_str = alloc_ty(cx, ty_str_slice, \"lhs_str\");\n-                        Store(cx, expr::get_dataptr(cx, lhs), expr::get_dataptr(cx, lhs_str));\n-                        Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, lhs_str));\n-                    }\n-                    else {\n+                        lhs_data = GEPi(cx, lhs, &[0, 0]);\n+                        lhs_len = C_uint(cx.ccx(), pat_len);\n+                    } else {\n                         // The discriminant is a fat pointer\n                         let llty_str_slice = type_of::type_of(cx.ccx(), ty_str_slice).ptr_to();\n-                        lhs_str = PointerCast(cx, lhs, llty_str_slice);\n+                        let lhs_str = PointerCast(cx, lhs, llty_str_slice);\n+                        lhs_data = Load(cx, expr::get_dataptr(cx, lhs_str));\n+                        lhs_len = Load(cx, expr::get_meta(cx, lhs_str));\n                     }\n \n-                    compare_str(cx, lhs_str, rhs_str, rhs_t, debug_loc)\n+                    compare_str(cx, lhs_data, lhs_len, rhs_data, rhs_len, rhs_t, debug_loc)\n                 },\n                 _ => cx.sess().bug(\"only byte strings supported in compare_values\"),\n             },"}]}