{"sha": "c431e6f15a5446620c199070b7decf5e935f33bb", "node_id": "C_kwDOAAsO6NoAKGM0MzFlNmYxNWE1NDQ2NjIwYzE5OTA3MGI3ZGVjZjVlOTM1ZjMzYmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-11T20:39:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T20:39:04Z"}, "message": "Rollup merge of #99055 - GuillaumeGomez:rustdoc-help-options, r=jyn514\n\nFix rustdoc help options\n\nFixes #98976.\n\nSince you're the one who found out about the problem and also provided the solution (thanks for both!):\n\nr? ```@jyn514```", "tree": {"sha": "13568f437ead5ed93beb36e2598aab95956fd7e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13568f437ead5ed93beb36e2598aab95956fd7e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c431e6f15a5446620c199070b7decf5e935f33bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizIppCRBK7hj4Ov3rIwAAKF0IAF/g3sdTSzggTBiHX9FZvBFK\n3yK8LepjD6HyQ19G0PcwZGRzP6rSM5TCh84AIF197ojHk99rSfYfmRKwkZxpygiR\nQETy1UnwrF6pidia+s7Ss/Hx5pEHhxWnpCRD4V6nR4ujcY4AVVUlKLzJNrfmafOI\nzKUpbRZ3hCoNI/2JY9c7+yBVRPhXsMH3ziUmhP6rq2mGGlmt27H+/a0Gl6HJlEPI\npGu6v+qv76pmYrO5BZKClRNx6qdUqJCDIB7wb49uGB3vWVnlHrRGVaxtpk/7nZGN\nrXFHmlfPFEHFjCr4pqjPzY5UKZr3EOgL8ppaj9MFVxzbY3JwC0i0TXLs/d7yFbM=\n=nzGo\n-----END PGP SIGNATURE-----\n", "payload": "tree 13568f437ead5ed93beb36e2598aab95956fd7e0\nparent 601c5a2087b5c8acd8491c190e99715e91d020d8\nparent b65d3a6ef2cce08aaac545d59d85e2a19ae2ad71\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657571944 +0200\ncommitter GitHub <noreply@github.com> 1657571944 +0200\n\nRollup merge of #99055 - GuillaumeGomez:rustdoc-help-options, r=jyn514\n\nFix rustdoc help options\n\nFixes #98976.\n\nSince you're the one who found out about the problem and also provided the solution (thanks for both!):\n\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c431e6f15a5446620c199070b7decf5e935f33bb", "html_url": "https://github.com/rust-lang/rust/commit/c431e6f15a5446620c199070b7decf5e935f33bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c431e6f15a5446620c199070b7decf5e935f33bb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601c5a2087b5c8acd8491c190e99715e91d020d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/601c5a2087b5c8acd8491c190e99715e91d020d8", "html_url": "https://github.com/rust-lang/rust/commit/601c5a2087b5c8acd8491c190e99715e91d020d8"}, {"sha": "b65d3a6ef2cce08aaac545d59d85e2a19ae2ad71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65d3a6ef2cce08aaac545d59d85e2a19ae2ad71", "html_url": "https://github.com/rust-lang/rust/commit/b65d3a6ef2cce08aaac545d59d85e2a19ae2ad71"}], "stats": {"total": 276, "additions": 265, "deletions": 11}, "files": [{"sha": "1f30c7006f5afa60985d8180e956c294d7513c7a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c431e6f15a5446620c199070b7decf5e935f33bb", "patch": "@@ -329,6 +329,17 @@ impl Options {\n             return Err(0);\n         }\n \n+        let z_flags = matches.opt_strs(\"Z\");\n+        if z_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-Z\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n+        let c_flags = matches.opt_strs(\"C\");\n+        if c_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-C\", config::CG_OPTIONS);\n+            return Err(0);\n+        }\n+\n         let color = config::parse_color(matches);\n         let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n             config::parse_json(matches);\n@@ -343,17 +354,6 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(matches, &diag);\n \n-        let z_flags = matches.opt_strs(\"Z\");\n-        if z_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-Z\", config::DB_OPTIONS);\n-            return Err(0);\n-        }\n-        let c_flags = matches.opt_strs(\"C\");\n-        if c_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-C\", config::CG_OPTIONS);\n-            return Err(0);\n-        }\n-\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {"}, {"sha": "f63e8b08ecdad938de9d73347d06d25be1225ec3", "filename": "src/test/rustdoc-ui/c-help.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.rs?ref=c431e6f15a5446620c199070b7decf5e935f33bb", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Chelp\n+\n+pub struct Foo;"}, {"sha": "75b2e2a2a43f4b54bb347e2075b6d835f8b6f749", "filename": "src/test/rustdoc-ui/c-help.stdout", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout?ref=c431e6f15a5446620c199070b7decf5e935f33bb", "patch": "@@ -0,0 +1,51 @@\n+    -C                       ar=val -- this option is deprecated and does nothing\n+    -C               code-model=val -- choose the code model to use (`rustc --print code-models` for details)\n+    -C            codegen-units=val -- divide crate into N units to optimize in parallel\n+    -C       control-flow-guard=val -- use Windows Control Flow Guard (default: no)\n+    -C         debug-assertions=val -- explicitly enable the `cfg(debug_assertions)` directive\n+    -C                debuginfo=val -- debug info emission level (0 = no debug info, 1 = line tables only, 2 = full debug info with variable and type information; default: 0)\n+    -C default-linker-libraries=val -- allow the linker to link its default libraries (default: no)\n+    -C            embed-bitcode=val -- emit bitcode in rlibs (default: yes)\n+    -C           extra-filename=val -- extra data to put in each output filename\n+    -C     force-frame-pointers=val -- force use of the frame pointers\n+    -C      force-unwind-tables=val -- force use of unwind tables\n+    -C              incremental=val -- enable incremental compilation\n+    -C         inline-threshold=val -- set the threshold for inlining a function\n+    -C      instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -C                 link-arg=val -- a single extra argument to append to the linker invocation (can be used several times)\n+    -C                link-args=val -- extra arguments to append to the linker invocation (space separated)\n+    -C           link-dead-code=val -- keep dead code at link time (useful for code coverage) (default: no)\n+    -C      link-self-contained=val -- control whether to link Rust provided C objects/libraries or rely\n+        on C toolchain installed in the system\n+    -C                   linker=val -- system linker to link outputs with\n+    -C            linker-flavor=val -- linker flavor\n+    -C        linker-plugin-lto=val -- generate build artifacts that are compatible with linker-based LTO\n+    -C                llvm-args=val -- a list of arguments to pass to LLVM (space separated)\n+    -C                      lto=val -- perform LLVM link-time optimizations\n+    -C                 metadata=val -- metadata to mangle symbol names with\n+    -C    no-prepopulate-passes=val -- give an empty list of passes to the pass manager\n+    -C               no-redzone=val -- disable the use of the redzone\n+    -C           no-stack-check=val -- this option is deprecated and does nothing\n+    -C       no-vectorize-loops=val -- disable loop vectorization optimization passes\n+    -C         no-vectorize-slp=val -- disable LLVM's SLP vectorization pass\n+    -C                opt-level=val -- optimization level (0-3, s, or z; default: 0)\n+    -C          overflow-checks=val -- use overflow checks for integer arithmetic\n+    -C                    panic=val -- panic strategy to compile crate with\n+    -C                   passes=val -- a list of extra LLVM passes to run (space separated)\n+    -C           prefer-dynamic=val -- prefer dynamic linking to static linking (default: no)\n+    -C         profile-generate=val -- compile the program with profiling instrumentation\n+    -C              profile-use=val -- use the given `.profdata` file for profile-guided optimization\n+    -C         relocation-model=val -- control generation of position-independent code (PIC) (`rustc --print relocation-models` for details)\n+    -C                   remark=val -- print remarks for these optimization passes (space separated, or \"all\")\n+    -C                    rpath=val -- set rpath values in libs/exes (default: no)\n+    -C               save-temps=val -- save all temporary output files during compilation (default: no)\n+    -C               soft-float=val -- use soft float ABI (*eabihf targets only) (default: no)\n+    -C          split-debuginfo=val -- how to handle split-debuginfo, a platform-specific option\n+    -C                    strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -C  symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -C               target-cpu=val -- select target processor (`rustc --print target-cpus` for details)\n+    -C           target-feature=val -- target specific attributes. (`rustc --print target-features` for details). This feature is unsafe."}, {"sha": "036c68c272b823daecd7f9d2398c848586d52220", "filename": "src/test/rustdoc-ui/z-help.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.rs?ref=c431e6f15a5446620c199070b7decf5e935f33bb", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Zhelp\n+\n+pub struct Foo;"}, {"sha": "7296b35788a9d019c08be4586ae3803dd49394f3", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c431e6f15a5446620c199070b7decf5e935f33bb/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=c431e6f15a5446620c199070b7decf5e935f33bb", "patch": "@@ -0,0 +1,195 @@\n+    -Z                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -Z                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -Z               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -Z                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -Z                           cf-protection=val -- instrument control-flow architecture protection\n+    -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -Z                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -Z                         codegen-backend=val -- the backend to use\n+    -Z                             combine-cgu=val -- combine CGUs into a single one\n+    -Z                              crate-attr=val -- inject the given attribute in the crate\n+    -Z                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -Z                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -Z                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -Z                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -Z                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -Z                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -Z                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -Z                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -Z                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -Z                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -Z                  dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)\n+    -Z                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -Z                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -Z                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n+    -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -Z                                    fuel=val -- set the optimization fuel quota for a crate\n+    -Z                       function-sections=val -- whether each function should go in its own section\n+    -Z                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -Z                                  gcc-ld=val -- implementation of ld used by cc\n+    -Z                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -Z                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -Z                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -Z                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -Z                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -Z                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                              inline-mir=val -- enable MIR inlining (default: no)\n+    -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -Z                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -Z                             input-stats=val -- gather statistics about the input (default: no)\n+    -Z                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -Z                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -Z                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -Z                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -Z                              meta-stats=val -- gather metadata statistics (default: no)\n+    -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -Z                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -Z                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -Z                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -Z                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -Z                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -Z                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -Z                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -Z                              no-codegen=val -- run all passes except codegen; no output\n+    -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -Z                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -Z                                 no-link=val -- compile without linking\n+    -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -Z                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -Z                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -Z                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -Z                                     oom=val -- panic strategy for out-of-memory handling\n+    -Z                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n+    -Z                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -Z                           panic-in-drop=val -- panic strategy for panics in drops\n+    -Z                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -Z                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -Z pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -Z                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -Z                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -Z                            polymorphize=val -- perform polymorphization analysis\n+    -Z                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -Z                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -Z           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -Z                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -Z                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -Z                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -Z                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -Z                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -Z                                 profile=val -- insert profiling code (default: no)\n+    -Z                        profile-closures=val -- profile size of closures\n+    -Z                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -Z                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -Z                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -Z                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -Z                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -Z                             layout-seed=val -- seed layout randomization\n+    -Z                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -Z                             relro-level=val -- choose which RELRO level to use\n+    -Z                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -Z         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -Z                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -Z                               sanitizer=val -- use a sanitizer\n+    -Z          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -Z                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -Z                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -Z                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -Z                            self-profile=val -- run the self profiler and output the raw event data\n+    -Z                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -Z                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -Z                          share-generics=val -- make the current crate share its generic instantiations\n+    -Z                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -Z                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -Z                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -Z                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -Z                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -Z                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -Z                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -Z                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -Z                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -Z                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -Z                                   teach=val -- show extended diagnostic help (default: no)\n+    -Z                               temps-dir=val -- the directory the intermediate files are written to\n+    -Z                          translate-lang=val -- language identifier for diagnostic output\n+    -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -Z                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -Z                                 thinlto=val -- enable ThinLTO when possible\n+    -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -Z                                 threads=val -- use a thread pool with N threads\n+    -Z                                    time=val -- measure time of rustc processes (default: no)\n+    -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -Z   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -Z                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -Z                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -Z                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -Z                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -Z            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -Z          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -Z                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -Z                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -Z                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -Z                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -Z                            validate-mir=val -- validate MIR after each transformation\n+    -Z                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -Z                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -Z            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -Z                         wasi-exec-model=val -- whether to build a wasi command or reactor"}]}