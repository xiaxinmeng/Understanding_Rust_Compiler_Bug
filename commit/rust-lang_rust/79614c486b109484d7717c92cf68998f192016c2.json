{"sha": "79614c486b109484d7717c92cf68998f192016c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjE0YzQ4NmIxMDk0ODRkNzcxN2M5MmNmNjg5OThmMTkyMDE2YzI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T15:57:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T15:57:33Z"}, "message": "Enable `auto_import` on ident patterns", "tree": {"sha": "e032007ef71de5449b2f38156c8055d64099ec39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e032007ef71de5449b2f38156c8055d64099ec39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79614c486b109484d7717c92cf68998f192016c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79614c486b109484d7717c92cf68998f192016c2", "html_url": "https://github.com/rust-lang/rust/commit/79614c486b109484d7717c92cf68998f192016c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79614c486b109484d7717c92cf68998f192016c2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637dbb26a72598dfe5649f29c80ff53d3fb6098d", "url": "https://api.github.com/repos/rust-lang/rust/commits/637dbb26a72598dfe5649f29c80ff53d3fb6098d", "html_url": "https://github.com/rust-lang/rust/commit/637dbb26a72598dfe5649f29c80ff53d3fb6098d"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "3ecb3d38ea72955d5bce5d965f654da2fb124059", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/79614c486b109484d7717c92cf68998f192016c2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79614c486b109484d7717c92cf68998f192016c2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=79614c486b109484d7717c92cf68998f192016c2", "patch": "@@ -123,6 +123,11 @@ pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets,\n     {\n         ImportAssets::for_method_call(&method_under_caret, &ctx.sema)\n             .zip(Some(method_under_caret.syntax().clone()))\n+    } else if let Some(pat) = ctx\n+        .find_node_at_offset_with_descend::<ast::IdentPat>()\n+        .filter(ast::IdentPat::is_simple_ident)\n+    {\n+        ImportAssets::for_ident_pat(&pat, &ctx.sema).zip(Some(pat.syntax().clone()))\n     } else {\n         None\n     }\n@@ -995,6 +1000,31 @@ mod foo {}\n const _: () = {\n     Foo\n };\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_on_ident_patterns() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+mod foo {\n+    pub struct Foo {}\n+}\n+fn foo() {\n+    let Foo$0;\n+}\n+\"#,\n+            r#\"\n+use foo::Foo;\n+\n+mod foo {\n+    pub struct Foo {}\n+}\n+fn foo() {\n+    let Foo;\n+}\n \"#,\n         );\n     }"}, {"sha": "58fea3b1de5a1b865ad5c118b789d1b248301390", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/79614c486b109484d7717c92cf68998f192016c2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79614c486b109484d7717c92cf68998f192016c2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=79614c486b109484d7717c92cf68998f192016c2", "patch": "@@ -5,7 +5,11 @@ use hir::{\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{ast, utils::path_to_string_stripping_turbo_fish, AstNode, SyntaxNode};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    utils::path_to_string_stripping_turbo_fish,\n+    AstNode, SyntaxNode,\n+};\n \n use crate::{\n     items_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n@@ -115,6 +119,19 @@ impl ImportAssets {\n         })\n     }\n \n+    pub fn for_ident_pat(pat: &ast::IdentPat, sema: &Semantics<RootDatabase>) -> Option<Self> {\n+        let name = pat.name()?;\n+        let candidate_node = pat.syntax().clone();\n+        if !pat.is_simple_ident() {\n+            return None;\n+        }\n+        Some(Self {\n+            import_candidate: ImportCandidate::for_name(sema, &name)?,\n+            module_with_candidate: sema.scope(&candidate_node).module()?,\n+            candidate_node,\n+        })\n+    }\n+\n     pub fn for_fuzzy_path(\n         module_with_candidate: Module,\n         qualifier: Option<ast::Path>,\n@@ -543,6 +560,20 @@ impl ImportCandidate {\n         )\n     }\n \n+    fn for_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<Self> {\n+        if sema\n+            .scope(name.syntax())\n+            .speculative_resolve(&ast::make::ext::ident_path(&name.text()))\n+            .is_some()\n+        {\n+            return None;\n+        }\n+        Some(ImportCandidate::Path(PathImportCandidate {\n+            qualifier: None,\n+            name: NameToImport::Exact(name.to_string()),\n+        }))\n+    }\n+\n     fn for_fuzzy_path(\n         qualifier: Option<ast::Path>,\n         fuzzy_name: String,"}]}