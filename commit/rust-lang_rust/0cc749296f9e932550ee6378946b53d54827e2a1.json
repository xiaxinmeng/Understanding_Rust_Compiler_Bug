{"sha": "0cc749296f9e932550ee6378946b53d54827e2a1", "node_id": "C_kwDOAAsO6NoAKDBjYzc0OTI5NmY5ZTkzMjU1MGVlNjM3ODk0NmI1M2Q1NDgyN2UyYTE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-10-10T19:33:49Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-10-10T19:33:49Z"}, "message": "Use the correct type when comparing nested constants.", "tree": {"sha": "33d45947fefe8269b78c929ad69c70df50d0cead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d45947fefe8269b78c929ad69c70df50d0cead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc749296f9e932550ee6378946b53d54827e2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc749296f9e932550ee6378946b53d54827e2a1", "html_url": "https://github.com/rust-lang/rust/commit/0cc749296f9e932550ee6378946b53d54827e2a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc749296f9e932550ee6378946b53d54827e2a1/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf72565a12c982f577ca4394c3b80edb89f6c6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf72565a12c982f577ca4394c3b80edb89f6c6d3", "html_url": "https://github.com/rust-lang/rust/commit/cf72565a12c982f577ca4394c3b80edb89f6c6d3"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "07e4ef6a2fef3c4c8f6ed67d9ad1cb80205cc36e", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cc749296f9e932550ee6378946b53d54827e2a1/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc749296f9e932550ee6378946b53d54827e2a1/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=0cc749296f9e932550ee6378946b53d54827e2a1", "patch": "@@ -136,17 +136,49 @@ impl Constant {\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),\n             (&Self::Bool(ref l), &Self::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => iter::zip(l, r)\n-                .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n-                .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n-                .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n+            (&Self::Tuple(ref l), &Self::Tuple(ref r)) if l.len() == r.len() => match *cmp_type.kind() {\n+                ty::Tuple(tys) if tys.len() == l.len() => l\n+                    .iter()\n+                    .zip(r)\n+                    .zip(tys)\n+                    .map(|((li, ri), cmp_type)| Self::partial_cmp(tcx, cmp_type, li, ri))\n+                    .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n+                    .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n+                _ => None,\n+            },\n+            (&Self::Vec(ref l), &Self::Vec(ref r)) => {\n+                let cmp_type = match *cmp_type.kind() {\n+                    ty::Array(ty, _) | ty::Slice(ty) => ty,\n+                    _ => return None,\n+                };\n+                iter::zip(l, r)\n+                    .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n+                    .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n+                    .unwrap_or_else(|| Some(l.len().cmp(&r.len())))\n+            },\n             (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => {\n-                match Self::partial_cmp(tcx, cmp_type, lv, rv) {\n+                match Self::partial_cmp(\n+                    tcx,\n+                    match *cmp_type.kind() {\n+                        ty::Array(ty, _) => ty,\n+                        _ => return None,\n+                    },\n+                    lv,\n+                    rv,\n+                ) {\n                     Some(Equal) => Some(ls.cmp(rs)),\n                     x => x,\n                 }\n             },\n-            (&Self::Ref(ref lb), &Self::Ref(ref rb)) => Self::partial_cmp(tcx, cmp_type, lb, rb),\n+            (&Self::Ref(ref lb), &Self::Ref(ref rb)) => Self::partial_cmp(\n+                tcx,\n+                match *cmp_type.kind() {\n+                    ty::Ref(_, ty, _) => ty,\n+                    _ => return None,\n+                },\n+                lb,\n+                rb,\n+            ),\n             // TODO: are there any useful inter-type orderings?\n             _ => None,\n         }"}, {"sha": "a765882b5d8180802c8b82b4410848feca161eda", "filename": "tests/ui/crashes/ice-9625.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc749296f9e932550ee6378946b53d54827e2a1/tests%2Fui%2Fcrashes%2Fice-9625.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc749296f9e932550ee6378946b53d54827e2a1/tests%2Fui%2Fcrashes%2Fice-9625.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9625.rs?ref=0cc749296f9e932550ee6378946b53d54827e2a1", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = &1;\n+    let _ = &1 < x && x < &10;\n+}"}]}