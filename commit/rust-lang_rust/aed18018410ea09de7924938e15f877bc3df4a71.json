{"sha": "aed18018410ea09de7924938e15f877bc3df4a71", "node_id": "C_kwDOAAsO6NoAKGFlZDE4MDE4NDEwZWEwOWRlNzkyNDkzOGUxNWY4NzdiYzNkZjRhNzE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-08T03:26:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T03:26:14Z"}, "message": "Rollup merge of #89476 - cjgillot:expn-id, r=petrochenkov\n\nCorrect decoding of foreign expansions during incr. comp.\n\nFixes https://github.com/rust-lang/rust/issues/74946\n\nThe original issue was due to a wrong assertion in `expn_hash_to_expn_id`.\n\nThe secondary issue was due to a mismatch between the encoding and decoding paths for expansions that are created after the TyCtxt is created.", "tree": {"sha": "206bcbd5321df8c11357551346c286ac30ca270a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206bcbd5321df8c11357551346c286ac30ca270a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed18018410ea09de7924938e15f877bc3df4a71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX7pWCRBK7hj4Ov3rIwAAqgkIAGkNpWePDnL1vNsunpD8ZoX/\nzDa/eUBF1ooe1GdG/kJBnmy4UlIsitnWVnAeZMqxfhG/3oE0yiqrvnSkg4sQyNAR\nmW1VWdm6+vG8+bPOjd/YEp04HJF5ObQFi31oWNqW/syqEgi5eh6H8fM2v/fOPYF9\nAGisHJFHR73AfCvBrPWudYFxt7ep976Yb9x6pu+RgzIwujLnEI4WZ8kBD0Udop2G\nIIV7o+dFWKXqGbJQtfvrdo1gQeJCsK/415AA0MMBOq3X9v761bfRgAXBzX1TM+3F\n5p0YIenAULE/ZqclISTpQzRYMhkUhI5Vice3gE+95iM6bNWUW2TSk9GC1GyTzGg=\n=ORAY\n-----END PGP SIGNATURE-----\n", "payload": "tree 206bcbd5321df8c11357551346c286ac30ca270a\nparent 1c1c6eda94e9841d0a534ba012034b05173c6a13\nparent 4028b093e468afad4896a1658924e3e3f3b8f57c\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633663574 -0700\ncommitter GitHub <noreply@github.com> 1633663574 -0700\n\nRollup merge of #89476 - cjgillot:expn-id, r=petrochenkov\n\nCorrect decoding of foreign expansions during incr. comp.\n\nFixes https://github.com/rust-lang/rust/issues/74946\n\nThe original issue was due to a wrong assertion in `expn_hash_to_expn_id`.\n\nThe secondary issue was due to a mismatch between the encoding and decoding paths for expansions that are created after the TyCtxt is created.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed18018410ea09de7924938e15f877bc3df4a71", "html_url": "https://github.com/rust-lang/rust/commit/aed18018410ea09de7924938e15f877bc3df4a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed18018410ea09de7924938e15f877bc3df4a71/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1c6eda94e9841d0a534ba012034b05173c6a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1c6eda94e9841d0a534ba012034b05173c6a13", "html_url": "https://github.com/rust-lang/rust/commit/1c1c6eda94e9841d0a534ba012034b05173c6a13"}, {"sha": "4028b093e468afad4896a1658924e3e3f3b8f57c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4028b093e468afad4896a1658924e3e3f3b8f57c", "html_url": "https://github.com/rust-lang/rust/commit/4028b093e468afad4896a1658924e3e3f3b8f57c"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "89bb5797a828f3770d78f02ad1ba0c96dc10e62e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=aed18018410ea09de7924938e15f877bc3df4a71", "patch": "@@ -1632,7 +1632,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.def_path_hash_map.def_path_hash_to_def_index(&hash)\n     }\n \n-    fn expn_hash_to_expn_id(&self, index_guess: u32, hash: ExpnHash) -> ExpnId {\n+    fn expn_hash_to_expn_id(&self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {\n         debug_assert_eq!(ExpnId::from_hash(hash), None);\n         let index_guess = ExpnIndex::from_u32(index_guess);\n         let old_hash = self.root.expn_hashes.get(self, index_guess).map(|lazy| lazy.decode(self));\n@@ -1654,16 +1654,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let i = ExpnIndex::from_u32(i);\n                     if let Some(hash) = self.root.expn_hashes.get(self, i) {\n                         map.insert(hash.decode(self), i);\n-                    } else {\n-                        panic!(\"Missing expn_hash entry for {:?}\", i);\n                     }\n                 }\n                 map\n             });\n             map[&hash]\n         };\n \n-        let data = self.root.expn_data.get(self, index).unwrap().decode(self);\n+        let data = self.root.expn_data.get(self, index).unwrap().decode((self, sess));\n         rustc_span::hygiene::register_expn_id(self.cnum, index, data, hash)\n     }\n "}, {"sha": "4e7f85d2c372772dce0c10fd47dfd855edad6268", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=aed18018410ea09de7924938e15f877bc3df4a71", "patch": "@@ -506,7 +506,13 @@ impl CrateStore for CStore {\n         DefId { krate: cnum, index: def_index }\n     }\n \n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId {\n-        self.get_crate_data(cnum).expn_hash_to_expn_id(index_guess, hash)\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId {\n+        self.get_crate_data(cnum).expn_hash_to_expn_id(sess, index_guess, hash)\n     }\n }"}, {"sha": "48eb488792d8973b05fe582fa329c0c4679e854a", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=aed18018410ea09de7924938e15f877bc3df4a71", "patch": "@@ -664,22 +664,32 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for ExpnId {\n \n             let data: ExpnData = decoder\n                 .with_position(pos.to_usize(), |decoder| decode_tagged(decoder, TAG_EXPN_DATA))?;\n-            rustc_span::hygiene::register_local_expn_id(data, hash)\n+            let expn_id = rustc_span::hygiene::register_local_expn_id(data, hash);\n+\n+            #[cfg(debug_assertions)]\n+            {\n+                use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+                let mut hcx = decoder.tcx.create_stable_hashing_context();\n+                let mut hasher = StableHasher::new();\n+                hcx.while_hashing_spans(true, |hcx| {\n+                    expn_id.expn_data().hash_stable(hcx, &mut hasher)\n+                });\n+                let local_hash: u64 = hasher.finish();\n+                debug_assert_eq!(hash.local_hash(), local_hash);\n+            }\n+\n+            expn_id\n         } else {\n             let index_guess = decoder.foreign_expn_data[&hash];\n-            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(krate, index_guess, hash)\n+            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(\n+                decoder.tcx.sess,\n+                krate,\n+                index_guess,\n+                hash,\n+            )\n         };\n \n-        #[cfg(debug_assertions)]\n-        {\n-            use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-            let mut hcx = decoder.tcx.create_stable_hashing_context();\n-            let mut hasher = StableHasher::new();\n-            hcx.while_hashing_spans(true, |hcx| expn_id.expn_data().hash_stable(hcx, &mut hasher));\n-            let local_hash: u64 = hasher.finish();\n-            debug_assert_eq!(hash.local_hash(), local_hash);\n-        }\n-\n+        debug_assert_eq!(expn_id.krate, krate);\n         Ok(expn_id)\n     }\n }"}, {"sha": "59e7abc2ea3bd5d85be45b2896634440b8c11b68", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed18018410ea09de7924938e15f877bc3df4a71/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=aed18018410ea09de7924938e15f877bc3df4a71", "patch": "@@ -4,6 +4,7 @@\n \n use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n+use crate::Session;\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n@@ -193,7 +194,13 @@ pub trait CrateStore: std::fmt::Debug {\n \n     /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId;\n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId;\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "5bd863439df5d3426279359c784c67930334487a", "filename": "src/test/incremental/mir-opt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aed18018410ea09de7924938e15f877bc3df4a71/src%2Ftest%2Fincremental%2Fmir-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed18018410ea09de7924938e15f877bc3df4a71/src%2Ftest%2Fincremental%2Fmir-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fmir-opt.rs?ref=aed18018410ea09de7924938e15f877bc3df4a71", "patch": "@@ -0,0 +1,11 @@\n+// MIR optimizations can create expansions after the TyCtxt has been created.\n+// This test verifies that those expansions can be decoded correctly.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph -Z mir-opt-level=3\n+\n+fn main() {\n+    if std::env::var(\"a\").is_ok() {\n+        println!(\"b\");\n+    }\n+}"}]}