{"sha": "9716c0b949b1a1a95b3f36928faed3abc21c0bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTZjMGI5NDliMWExYTk1YjNmMzY5MjhmYWVkM2FiYzIxYzBiZGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-16T16:27:17Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:49:09Z"}, "message": "Deal with goals arising from unification", "tree": {"sha": "3868e00827852afc86162fa82786592378511af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3868e00827852afc86162fa82786592378511af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9716c0b949b1a1a95b3f36928faed3abc21c0bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9716c0b949b1a1a95b3f36928faed3abc21c0bda", "html_url": "https://github.com/rust-lang/rust/commit/9716c0b949b1a1a95b3f36928faed3abc21c0bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9716c0b949b1a1a95b3f36928faed3abc21c0bda/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "html_url": "https://github.com/rust-lang/rust/commit/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "db223401824d16308ca3a5e54c2489a4ca55c1af", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=9716c0b949b1a1a95b3f36928faed3abc21c0bda", "patch": "@@ -37,8 +37,8 @@ use syntax::SmolStr;\n use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n use crate::{\n     db::HirDatabase, fold_tys, infer::diagnostics::InferenceDiagnostic,\n-    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Interner, TyBuilder, TyExt,\n-    TyKind,\n+    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, TyBuilder,\n+    TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -104,7 +104,7 @@ impl Default for BindingMode {\n \n #[derive(Debug)]\n pub(crate) struct InferOk {\n-    // obligations\n+    goals: Vec<InEnvironment<Goal>>,\n }\n #[derive(Debug)]\n pub(crate) struct TypeError;"}, {"sha": "60186bc5f94b69e447f0473cf43c2bc7589260b8", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=9716c0b949b1a1a95b3f36928faed3abc21c0bda", "patch": "@@ -26,8 +26,8 @@ impl<'a> InferenceContext<'a> {\n             return true;\n         }\n         match self.coerce_inner(from_ty, &to_ty) {\n-            Ok(_result) => {\n-                // TODO deal with goals\n+            Ok(result) => {\n+                self.table.register_infer_ok(result);\n                 true\n             }\n             Err(_) => {\n@@ -67,8 +67,9 @@ impl<'a> InferenceContext<'a> {\n             let target_ty = TyKind::Function(sig.to_fn_ptr()).intern(&Interner);\n             let result1 = self.coerce_inner(ty1.clone(), &target_ty);\n             let result2 = self.coerce_inner(ty2.clone(), &target_ty);\n-            if let (Ok(_result1), Ok(_result2)) = (result1, result2) {\n-                // TODO deal with the goals\n+            if let (Ok(result1), Ok(result2)) = (result1, result2) {\n+                self.table.register_infer_ok(result1);\n+                self.table.register_infer_ok(result2);\n                 return target_ty;\n             }\n         }\n@@ -104,7 +105,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 _ => {}\n             }\n-            return Ok(InferOk {});\n+            return Ok(InferOk { goals: Vec::new() });\n         }\n \n         // Consider coercing the subtype to a DST\n@@ -416,10 +417,11 @@ impl<'a> InferenceContext<'a> {\n                     },\n                 );\n             }\n+            // FIXME: should we accept ambiguous results here?\n             _ => return Err(TypeError),\n         };\n \n-        Ok(InferOk {})\n+        Ok(InferOk { goals: Vec::new() })\n     }\n }\n \n@@ -444,11 +446,11 @@ fn safe_to_unsafe_fn_ty(fn_ty: FnPointer) -> FnPointer {\n     }\n }\n \n-fn coerce_mutabilities(from: Mutability, to: Mutability) -> InferResult {\n+fn coerce_mutabilities(from: Mutability, to: Mutability) -> Result<(), TypeError> {\n     match (from, to) {\n         (Mutability::Mut, Mutability::Mut)\n         | (Mutability::Mut, Mutability::Not)\n-        | (Mutability::Not, Mutability::Not) => Ok(InferOk {}),\n+        | (Mutability::Not, Mutability::Not) => Ok(()),\n         (Mutability::Not, Mutability::Mut) => Err(TypeError),\n     }\n }"}, {"sha": "d872cdd58aac0e639c22c01bd971698cd1c1fa45", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=9716c0b949b1a1a95b3f36928faed3abc21c0bda", "patch": "@@ -307,12 +307,12 @@ impl<'a> InferenceTable<'a> {\n     /// Unify two types and register new trait goals that arise from that.\n     // TODO give these two functions better names\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n-        let _result = if let Ok(r) = self.unify_inner(ty1, ty2) {\n+        let result = if let Ok(r) = self.unify_inner(ty1, ty2) {\n             r\n         } else {\n             return false;\n         };\n-        // TODO deal with new goals\n+        self.register_infer_ok(result);\n         true\n     }\n \n@@ -327,10 +327,7 @@ impl<'a> InferenceTable<'a> {\n             t1,\n             t2,\n         ) {\n-            Ok(_result) => {\n-                // TODO deal with new goals\n-                Ok(InferOk {})\n-            }\n+            Ok(result) => Ok(InferOk { goals: result.goals }),\n             Err(chalk_ir::NoSolution) => Err(TypeError),\n         }\n     }\n@@ -353,6 +350,10 @@ impl<'a> InferenceTable<'a> {\n         }\n     }\n \n+    pub fn register_infer_ok(&mut self, infer_ok: InferOk) {\n+        infer_ok.goals.into_iter().for_each(|goal| self.register_obligation_in_env(goal));\n+    }\n+\n     pub fn resolve_obligations_as_possible(&mut self) {\n         let _span = profile::span(\"resolve_obligations_as_possible\");\n         let mut changed = true;"}, {"sha": "ad9edf11cd722ea574117c1a29eff5fb615fda6d", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9716c0b949b1a1a95b3f36928faed3abc21c0bda/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=9716c0b949b1a1a95b3f36928faed3abc21c0bda", "patch": "@@ -758,7 +758,7 @@ fn issue_4885() {\n         \"#,\n         expect![[r#\"\n             136..139 'key': &K\n-            198..214 '{     ...key) }': {unknown}\n+            198..214 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n             204..207 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n             204..212 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n             208..211 'key': &K"}]}