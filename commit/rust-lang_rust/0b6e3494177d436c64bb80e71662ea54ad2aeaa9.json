{"sha": "0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNmUzNDk0MTc3ZDQzNmM2NGJiODBlNzE2NjJlYTU0YWQyYWVhYTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T08:07:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T08:07:17Z"}, "message": "automalically use start-fn if we have all the MIR", "tree": {"sha": "d56acb290a80fbf95ea9e024058432779e2e02e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56acb290a80fbf95ea9e024058432779e2e02e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "html_url": "https://github.com/rust-lang/rust/commit/0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186e42d088bb485c156cef93f2d27aa461523fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/186e42d088bb485c156cef93f2d27aa461523fad", "html_url": "https://github.com/rust-lang/rust/commit/186e42d088bb485c156cef93f2d27aa461523fad"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "d2315c7e9538e5c8081d7a390a607d6f3094e7da", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "patch": "@@ -50,9 +50,9 @@ script:\n   # test `cargo miri`\n   cd cargo-miri-test &&\n   if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n-    cargo miri -q -- -Zmiri-start-fn\n+    cargo miri -q\n   else\n-    cargo miri -q -- -Zmiri-start-fn >stdout.real 2>stderr.real &&\n+    cargo miri -q >stdout.real 2>stderr.real &&\n     cat stdout.real stderr.real &&\n     # Test `cargo miri` output. Not on mac because output redirecting doesn't\n     # work. There is no error. It just stops CI."}, {"sha": "fb3b231d41cef092f477c4c21f7b7c5fe7ae5f9d", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "patch": "@@ -95,7 +95,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n                     if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n                         let did = self.0.hir.body_owner_def_id(body_id);\n                         println!(\"running test: {}\", self.0.def_path_debug_str(did));\n-                        miri::eval_main(self.0, did, None, /*validate*/true);\n+                        miri::eval_main(self.0, did, /*validate*/true);\n                         self.1.session.abort_if_errors();\n                     }\n                 }\n@@ -106,7 +106,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        miri::eval_main(tcx, entry_def_id, None, /*validate*/true);\n+        miri::eval_main(tcx, entry_def_id, /*validate*/true);\n \n         state.session.abort_if_errors();\n     } else {"}, {"sha": "d4494a838852797aeee6741781e24473b4645fe8", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "patch": "@@ -26,11 +26,6 @@ use std::path::PathBuf;\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n \n-    /// Whether to begin interpretation at the start_fn lang item or not.\n-    ///\n-    /// If false, the interpretation begins at the `main` function.\n-    start_fn: bool,\n-\n     /// Whether to enforce the validity invariant.\n     validate: bool,\n }\n@@ -90,10 +85,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let this = *self;\n         let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        let start_fn = this.start_fn;\n         let validate = this.validate;\n         control.after_analysis.callback =\n-            Box::new(move |state| after_analysis(state, start_fn, validate));\n+            Box::new(move |state| after_analysis(state, validate));\n         control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n@@ -109,7 +103,6 @@ fn after_hir_lowering(state: &mut CompileState) {\n \n fn after_analysis<'a, 'tcx>(\n     state: &mut CompileState<'a, 'tcx>,\n-    use_start_fn: bool,\n     validate: bool,\n ) {\n     state.session.abort_if_errors();\n@@ -134,7 +127,7 @@ fn after_analysis<'a, 'tcx>(\n                             \"running test: {}\",\n                             self.tcx.def_path_debug_str(did),\n                         );\n-                        miri::eval_main(self.tcx, did, None, self.validate);\n+                        miri::eval_main(self.tcx, did, self.validate);\n                         self.state.session.abort_if_errors();\n                     }\n                 }\n@@ -147,13 +140,7 @@ fn after_analysis<'a, 'tcx>(\n         );\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        // Use start_fn lang item if we have -Zmiri-start-fn set\n-        let start_wrapper = if use_start_fn {\n-            Some(tcx.lang_items().start_fn().unwrap())\n-        } else {\n-            None\n-        };\n-        miri::eval_main(tcx, entry_def_id, start_wrapper, validate);\n+        miri::eval_main(tcx, entry_def_id, validate);\n \n         state.session.abort_if_errors();\n     } else {\n@@ -231,14 +218,9 @@ fn main() {\n         args.push(find_sysroot());\n     }\n \n-    let mut start_fn = false;\n     let mut validate = true;\n     args.retain(|arg| {\n         match arg.as_str() {\n-            \"-Zmiri-start-fn\" => {\n-                start_fn = true;\n-                false\n-            },\n             \"-Zmiri-disable-validation\" => {\n                 validate = false;\n                 false\n@@ -251,7 +233,6 @@ fn main() {\n     let result = rustc_driver::run(move || {\n         rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n             default: Box::new(RustcDefaultCalls),\n-            start_fn,\n             validate,\n         }), None, None)\n     });"}, {"sha": "eba88a88487e047a67ff855546551b3b040aecec", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "patch": "@@ -50,7 +50,6 @@ use mono_hash_map::MonoHashMap;\n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    start_wrapper: Option<DefId>,\n     validate: bool,\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = EvalContext::new(\n@@ -70,8 +69,14 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         ));\n     }\n \n-    if let Some(start_id) = start_wrapper {\n-        let main_ret_ty = ecx.tcx.fn_sig(main_id).output();\n+    let libstd_has_mir = {\n+        let rustc_panic = ecx.resolve_path(&[\"std\", \"panicking\", \"rust_panic\"])?;\n+        ecx.load_mir(rustc_panic.def).is_ok()\n+    };\n+\n+    if libstd_has_mir {\n+        let start_id = tcx.lang_items().start_fn().unwrap();\n+        let main_ret_ty = tcx.fn_sig(main_id).output();\n         let main_ret_ty = main_ret_ty.no_late_bound_regions().unwrap();\n         let start_instance = ty::Instance::resolve(\n             ecx.tcx.tcx,\n@@ -146,10 +151,9 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    start_wrapper: Option<DefId>,\n     validate: bool,\n ) {\n-    let mut ecx = create_ecx(tcx, main_id, start_wrapper, validate).expect(\"Couldn't create ecx\");\n+    let mut ecx = create_ecx(tcx, main_id, validate).expect(\"Couldn't create ecx\");\n \n     let res: EvalResult = (|| {\n         ecx.run()?;"}, {"sha": "fa57df94dabc29983e7f9d7b32afdc6aa5286e01", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6e3494177d436c64bb80e71662ea54ad2aeaa9/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=0b6e3494177d436c64bb80e71662ea54ad2aeaa9", "patch": "@@ -100,9 +100,6 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    if have_fullmir() {\n-        flags.push(\"-Zmiri-start-fn\".to_owned());\n-    }\n     if opt {\n         // FIXME: Using level 1 (instead of 3) for now, as the optimizer is pretty broken\n         // and crashes..."}]}