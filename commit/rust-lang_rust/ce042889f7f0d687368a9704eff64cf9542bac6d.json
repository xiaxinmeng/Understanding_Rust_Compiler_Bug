{"sha": "ce042889f7f0d687368a9704eff64cf9542bac6d", "node_id": "C_kwDOAAsO6NoAKGNlMDQyODg5ZjdmMGQ2ODczNjhhOTcwNGVmZjY0Y2Y5NTQyYmFjNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T11:36:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T11:36:05Z"}, "message": "Auto merge of #111346 - JohnTitor:rollup-6g5cg9z, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105354 (Add deployment-target --print flag for Apple targets)\n - #110377 (Update max_atomic_width of armv7r and armv7_sony_vita targets to 64.)\n - #110638 (STD support for PSVita)\n - #111211 (Don't compute trait super bounds unless they're positive)\n - #111315 (Remove `identity_future` from stdlib)\n - #111331 (Mark s390x condition code register as clobbered in inline assembly)\n - #111332 (Improve inline asm for LoongArch)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f1e5e514237175886f4d912961b4e4d7f2952395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e5e514237175886f4d912961b4e4d7f2952395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce042889f7f0d687368a9704eff64cf9542bac6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce042889f7f0d687368a9704eff64cf9542bac6d", "html_url": "https://github.com/rust-lang/rust/commit/ce042889f7f0d687368a9704eff64cf9542bac6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce042889f7f0d687368a9704eff64cf9542bac6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86e7fb60f5343041fd0c27d4affaf3261115666", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7fb60f5343041fd0c27d4affaf3261115666", "html_url": "https://github.com/rust-lang/rust/commit/c86e7fb60f5343041fd0c27d4affaf3261115666"}, {"sha": "2a8adcc966f0c7ec75460d99ef6966fa4e3c7825", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8adcc966f0c7ec75460d99ef6966fa4e3c7825", "html_url": "https://github.com/rust-lang/rust/commit/2a8adcc966f0c7ec75460d99ef6966fa4e3c7825"}], "stats": {"total": 537, "additions": 455, "deletions": 82}, "files": [{"sha": "6d77c2b0b881e0c2ffa570bec1dceadead4aac61", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -1938,9 +1938,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.142\"\n+version = \"0.2.143\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a987beff54b60ffa6d51982e1aa1146bc42f19bd26be28b0586f252fccf5317\"\n+checksum = \"edc207893e85c5d6be840e969b496b53d94cec8be2d501b214f50daa97fa8024\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "2a6ad1be76309f9a4e398179ee1048532ec0a233", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -236,9 +236,22 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {}\n                 InlineAsmArch::Hexagon => {}\n-                InlineAsmArch::LoongArch64 => {}\n+                InlineAsmArch::LoongArch64 => {\n+                    constraints.extend_from_slice(&[\n+                        \"~{$fcc0}\".to_string(),\n+                        \"~{$fcc1}\".to_string(),\n+                        \"~{$fcc2}\".to_string(),\n+                        \"~{$fcc3}\".to_string(),\n+                        \"~{$fcc4}\".to_string(),\n+                        \"~{$fcc5}\".to_string(),\n+                        \"~{$fcc6}\".to_string(),\n+                        \"~{$fcc7}\".to_string(),\n+                    ]);\n+                }\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n-                InlineAsmArch::S390x => {}\n+                InlineAsmArch::S390x => {\n+                    constraints.push(\"~{cc}\".to_string());\n+                }\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {}\n                 InlineAsmArch::Bpf => {}"}, {"sha": "446e29199c6266d495203559dad09f93b6b16b09", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -745,6 +745,22 @@ fn print_crate_info(\n                     }\n                 }\n             }\n+            DeploymentTarget => {\n+                use rustc_target::spec::current_apple_deployment_target;\n+\n+                if sess.target.is_like_osx {\n+                    safe_println!(\n+                        \"deployment_target={}\",\n+                        current_apple_deployment_target(&sess.target)\n+                            .expect(\"unknown Apple target OS\")\n+                    )\n+                } else {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        \"only Apple targets currently support deployment version info\",\n+                    )\n+                }\n+            }\n         }\n     }\n     Compilation::Stop"}, {"sha": "e04658c8e774e578d076f9a861a187a00832bd64", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -657,14 +657,15 @@ pub(super) fn implied_predicates_with_filter(\n         &*tcx.arena.alloc_from_iter(superbounds.predicates().chain(where_bounds_that_match));\n     debug!(?implied_bounds);\n \n-    // Now require that immediate supertraits are converted,\n-    // which will, in turn, reach indirect supertraits.\n+    // Now require that immediate supertraits are converted, which will, in\n+    // turn, reach indirect supertraits, so we detect cycles now instead of\n+    // overflowing during elaboration.\n     if matches!(filter, PredicateFilter::SelfOnly) {\n-        // Now require that immediate supertraits are converted,\n-        // which will, in turn, reach indirect supertraits.\n         for &(pred, span) in implied_bounds {\n             debug!(\"superbound: {:?}\", pred);\n-            if let ty::PredicateKind::Clause(ty::Clause::Trait(bound)) = pred.kind().skip_binder() {\n+            if let ty::PredicateKind::Clause(ty::Clause::Trait(bound)) = pred.kind().skip_binder()\n+                && bound.polarity == ty::ImplPolarity::Positive\n+            {\n                 tcx.at(span).super_predicates_of(bound.def_id());\n             }\n         }"}, {"sha": "aa3cb03bad89267bf4f5689b144a3ab397115a26", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -599,6 +599,7 @@ pub enum PrintRequest {\n     StackProtectorStrategies,\n     LinkArgs,\n     SplitDebuginfo,\n+    DeploymentTarget,\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -1481,7 +1482,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"[crate-name|file-names|sysroot|target-libdir|cfg|calling-conventions|\\\n              target-list|target-cpus|target-features|relocation-models|code-models|\\\n              tls-models|target-spec-json|all-target-specs-json|native-static-libs|\\\n-             stack-protector-strategies|link-args]\",\n+             stack-protector-strategies|link-args|deployment-target]\",\n         ),\n         opt::flagmulti_s(\"g\", \"\", \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n@@ -1931,6 +1932,7 @@ fn collect_print_requests(\n         (\"all-target-specs-json\", PrintRequest::AllTargetSpecs),\n         (\"link-args\", PrintRequest::LinkArgs),\n         (\"split-debuginfo\", PrintRequest::SplitDebuginfo),\n+        (\"deployment-target\", PrintRequest::DeploymentTarget),\n     ];\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|req| {"}, {"sha": "9d1a4f3eeeafa4961a80424848a5c093c72386de", "filename": "compiler/rustc_target/src/asm/loongarch.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -33,12 +33,11 @@ impl LoongArchInlineAsmRegClass {\n \n     pub fn supported_types(\n         self,\n-        arch: InlineAsmArch,\n+        _arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n-        match (self, arch) {\n-            (Self::reg, InlineAsmArch::LoongArch64) => types! { _: I8, I16, I32, I64, F32, F64; },\n-            (Self::reg, _) => types! { _: I8, I16, I32, F32; },\n-            (Self::freg, _) => types! { _: F32, F64; },\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n+            Self::freg => types! { _: F32, F64; },\n         }\n     }\n }"}, {"sha": "ff2246318288ea92d2948b9c29b83a8fecba5f55", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -1,7 +1,7 @@\n use std::{borrow::Cow, env};\n \n use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n-use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n+use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, Target, TargetOptions};\n \n #[cfg(test)]\n #[path = \"apple/tests.rs\"]\n@@ -179,12 +179,28 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     }\n }\n \n-fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n-    let deployment_target = env::var(var_name).ok();\n-    deployment_target\n-        .as_ref()\n-        .and_then(|s| s.split_once('.'))\n-        .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n+pub fn deployment_target(target: &Target) -> Option<String> {\n+    let (major, minor) = match &*target.os {\n+        \"macos\" => {\n+            // This does not need to be specific. It just needs to handle x86 vs M1.\n+            let arch = if target.arch == \"x86\" || target.arch == \"x86_64\" { X86_64 } else { Arm64 };\n+            macos_deployment_target(arch)\n+        }\n+        \"ios\" => ios_deployment_target(),\n+        \"watchos\" => watchos_deployment_target(),\n+        \"tvos\" => tvos_deployment_target(),\n+        _ => return None,\n+    };\n+\n+    Some(format!(\"{major}.{minor}\"))\n+}\n+\n+fn from_set_deployment_target(var_name: &str) -> Option<(u32, u32)> {\n+    let deployment_target = env::var(var_name).ok()?;\n+    let (unparsed_major, unparsed_minor) = deployment_target.split_once('.')?;\n+    let (major, minor) = (unparsed_major.parse().ok()?, unparsed_minor.parse().ok()?);\n+\n+    Some((major, minor))\n }\n \n fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n@@ -198,7 +214,8 @@ fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n }\n \n fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n-    deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n@@ -247,7 +264,8 @@ fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]>\n }\n \n fn ios_deployment_target() -> (u32, u32) {\n-    deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n pub fn ios_llvm_target(arch: Arch) -> String {\n@@ -272,7 +290,8 @@ pub fn ios_sim_llvm_target(arch: Arch) -> String {\n }\n \n fn tvos_deployment_target() -> (u32, u32) {\n-    deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n fn tvos_lld_platform_version() -> String {\n@@ -281,7 +300,8 @@ fn tvos_lld_platform_version() -> String {\n }\n \n fn watchos_deployment_target() -> (u32, u32) {\n-    deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n fn watchos_lld_platform_version() -> String {"}, {"sha": "5632bcfcefe286b26901b172e01d6a20aa1dbe2f", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n             c_enum_min_bits: Some(8),"}, {"sha": "2815de3589db61d126bcdbc3874aec40959890d4", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".into(),\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n             c_enum_min_bits: Some(8),"}, {"sha": "e2c0808f1fdbf238fc1a7f39f93f36718459066f", "filename": "compiler/rustc_target/src/spec/armv7_sony_vita_newlibeabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     let pre_link_args = TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-Wl,-q\"]);\n \n     Target {\n-        llvm_target: \"armv7a-vita-newlibeabihf\".into(),\n+        llvm_target: \"armv7a-vita-eabihf\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         arch: \"arm\".into(),\n@@ -33,7 +33,7 @@ pub fn target() -> Target {\n             pre_link_args,\n             exe_suffix: \".elf\".into(),\n             panic_strategy: PanicStrategy::Abort,\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             ..Default::default()\n         },\n     }"}, {"sha": "74905ed5a4e07b51c204abf7cb7f0294ae1fc52c", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> Target {\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n             c_enum_min_bits: Some(8),"}, {"sha": "516b3f5c17eed42b25ce078ced930dd74467a1c5", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".into(),\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n             c_enum_min_bits: Some(8),"}, {"sha": "ba4b89c9ea10b23853c1066e814e87cf5c7eaaab", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -60,6 +60,7 @@ pub mod crt_objects;\n mod aix_base;\n mod android_base;\n mod apple_base;\n+pub use apple_base::deployment_target as current_apple_deployment_target;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;"}, {"sha": "4245978ca8169c40c088ff733825e4527f7b914c", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -1 +1 @@\n-Subproject commit 8ad84ca5ad88ade697637387e7cb4d7c3cf4bde8\n+Subproject commit 4245978ca8169c40c088ff733825e4527f7b914c"}, {"sha": "089493d3766de182ada97e0f49aa7b469ffb75f3", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -66,10 +66,3 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     // that fulfills all the requirements for a mutable reference.\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[inline]\n-pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n-    f\n-}"}, {"sha": "1454b00255650109af24b3181b139daba91a1cc1", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -15,7 +15,7 @@ cfg-if = { version = \"1.0\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.142\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.143\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.91\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "0fb03c8e88af5f02f9946f2b5ac0cb07dfa4c833", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -34,6 +34,7 @@ fn main() {\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")\n         || target.contains(\"nintendo-3ds\")\n+        || target.contains(\"vita\")\n         || target.contains(\"nto\")\n     {\n         // These platforms don't have any special requirements."}, {"sha": "5b54cc5f2e4913f191566667edbafd504e037842", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -137,6 +137,8 @@ pub mod redox;\n pub mod solaris;\n #[cfg(target_os = \"solid_asp3\")]\n pub mod solid;\n+#[cfg(target_os = \"vita\")]\n+pub mod vita;\n #[cfg(target_os = \"vxworks\")]\n pub mod vxworks;\n #[cfg(target_os = \"watchos\")]"}, {"sha": "6fe1111188aa880a5f1f58b47f63dbc3db8098eb", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -73,6 +73,8 @@ mod platform {\n     pub use crate::os::redox::*;\n     #[cfg(target_os = \"solaris\")]\n     pub use crate::os::solaris::*;\n+    #[cfg(target_os = \"vita\")]\n+    pub use crate::os::vita::*;\n     #[cfg(target_os = \"vxworks\")]\n     pub use crate::os::vxworks::*;\n     #[cfg(target_os = \"watchos\")]"}, {"sha": "a5a06764a4dd8aef4e0057850635e4fdd4df60f8", "filename": "library/std/src/os/vita/fs.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fvita%2Ffs.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,95 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: crate::fs::Metadata\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        0\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "da9edd12f7b03daddc3544113395779027eb9f7b", "filename": "library/std/src/os/vita/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,6 @@\n+//! Definitions for vita\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub(crate) mod raw;"}, {"sha": "74cae4d4135d18c755f14be18c4ad1094b4463c2", "filename": "library/std/src/os/vita/raw.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fvita%2Fraw.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,70 @@\n+//! vita raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![deprecated(\n+    since = \"1.8.0\",\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = libc::pthread_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = libc::blkcnt_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = libc::blksize_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = libc::dev_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = libc::ino_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = libc::mode_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = libc::nlink_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = libc::off_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = libc::time_t;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_spare4: [c_long; 2usize],\n+}"}, {"sha": "8604b53983d6cb7b4c03d092887ac9ef9d3cb77d", "filename": "library/std/src/sys/unix/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -59,7 +59,8 @@ cfg_if::cfg_if! {\n         target_os = \"redox\",\n         target_os = \"solaris\",\n         target_os = \"espidf\",\n-        target_os = \"horizon\"\n+        target_os = \"horizon\",\n+        target_os = \"vita\",\n     ))] {\n         #[inline]\n         unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {"}, {"sha": "9ed4d9c1e0dd395b16884c221bab1c1a2bea2fdd", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -265,7 +265,7 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"vita\"))]\n mod imp {\n     use super::Args;\n "}, {"sha": "8c3ef88d8f8e02ee18cb981b827e3c2181864b14", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -141,6 +141,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"elf\";\n }\n \n+#[cfg(target_os = \"vita\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"vita\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".elf\";\n+    pub const EXE_EXTENSION: &str = \"elf\";\n+}\n+\n #[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "cb630eede6da0b983cc71699f40408d030ac40d9", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -75,6 +75,7 @@ const fn max_iov() -> usize {\n     target_os = \"nto\",\n     target_os = \"openbsd\",\n     target_os = \"horizon\",\n+    target_os = \"vita\",\n     target_os = \"watchos\",\n )))]\n const fn max_iov() -> usize {\n@@ -93,7 +94,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\")))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::readv(\n@@ -105,14 +106,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\"))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     #[inline]\n     pub fn is_read_vectored(&self) -> bool {\n-        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\")))\n     }\n \n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n@@ -253,7 +254,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\")))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::writev(\n@@ -265,14 +266,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\"))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     #[inline]\n     pub fn is_write_vectored(&self) -> bool {\n-        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\")))\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {"}, {"sha": "22d2ae397137a1441a225d5e9b814f45c934a025", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -447,7 +447,12 @@ impl FileAttr {\n \n #[cfg(not(any(target_os = \"netbsd\", target_os = \"nto\")))]\n impl FileAttr {\n-    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+    #[cfg(not(any(\n+        target_os = \"vxworks\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\",\n+        target_os = \"vita\"\n+    )))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -459,7 +464,7 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_mtime as i64, self.stat.st_mtime_nsec as i64))\n     }\n \n-    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))]\n+    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"vita\"))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::new(self.stat.st_mtime as i64, 0))\n     }\n@@ -469,7 +474,12 @@ impl FileAttr {\n         Ok(SystemTime::from(self.stat.st_mtim))\n     }\n \n-    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+    #[cfg(not(any(\n+        target_os = \"vxworks\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\",\n+        target_os = \"vita\"\n+    )))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -481,7 +491,7 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_atime as i64, self.stat.st_atime_nsec as i64))\n     }\n \n-    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))]\n+    #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"vita\"))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::new(self.stat.st_atime as i64, 0))\n     }\n@@ -866,6 +876,7 @@ impl DirEntry {\n         target_os = \"vxworks\",\n         target_os = \"espidf\",\n         target_os = \"horizon\",\n+        target_os = \"vita\",\n         target_os = \"nto\",\n     ))]\n     pub fn ino(&self) -> u64 {"}, {"sha": "bb9e65e68e5e877268a3b0191becfa2b53eef91e", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -92,6 +92,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n             target_os = \"redox\",\n             target_os = \"l4re\",\n             target_os = \"horizon\",\n+            target_os = \"vita\",\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n@@ -140,6 +141,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n             target_os = \"vxworks\",\n             target_os = \"l4re\",\n             target_os = \"horizon\",\n+            target_os = \"vita\",\n         )))]\n         {\n             use crate::sys::os::errno;\n@@ -162,7 +164,12 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     }\n \n     unsafe fn reset_sigpipe(#[allow(unused_variables)] sigpipe: u8) {\n-        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n+        #[cfg(not(any(\n+            target_os = \"emscripten\",\n+            target_os = \"fuchsia\",\n+            target_os = \"horizon\",\n+            target_os = \"vita\"\n+        )))]\n         {\n             // We don't want to add this as a public type to std, nor do we\n             // want to `include!` a file from the compiler (which would break\n@@ -199,7 +206,8 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     target_os = \"espidf\",\n     target_os = \"emscripten\",\n     target_os = \"fuchsia\",\n-    target_os = \"horizon\"\n+    target_os = \"horizon\",\n+    target_os = \"vita\"\n )))]\n static UNIX_SIGPIPE_ATTR_SPECIFIED: crate::sync::atomic::AtomicBool =\n     crate::sync::atomic::AtomicBool::new(false);\n@@ -208,7 +216,8 @@ static UNIX_SIGPIPE_ATTR_SPECIFIED: crate::sync::atomic::AtomicBool =\n     target_os = \"espidf\",\n     target_os = \"emscripten\",\n     target_os = \"fuchsia\",\n-    target_os = \"horizon\"\n+    target_os = \"horizon\",\n+    target_os = \"vita\",\n )))]\n pub(crate) fn unix_sigpipe_attr_specified() -> bool {\n     UNIX_SIGPIPE_ATTR_SPECIFIED.load(crate::sync::atomic::Ordering::Relaxed)\n@@ -402,7 +411,7 @@ cfg_if::cfg_if! {\n     }\n }\n \n-#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\"))]\n mod unsupported {\n     use crate::io;\n "}, {"sha": "8edfd331304426fba22a0c0336ef5681cac514f4", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -460,7 +460,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     path.canonicalize()\n }\n \n-#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     super::unsupported::unsupported()\n }\n@@ -614,7 +614,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n         target_os = \"espidf\",\n-        target_os = \"horizon\"\n+        target_os = \"horizon\",\n+        target_os = \"vita\",\n     ))]\n     unsafe fn fallback() -> Option<OsString> {\n         None\n@@ -627,7 +628,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n         target_os = \"espidf\",\n-        target_os = \"horizon\"\n+        target_os = \"horizon\",\n+        target_os = \"vita\",\n     )))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {"}, {"sha": "0cf163d9fb8e9409e70f54a533645bf4a701e252", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -14,7 +14,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"vxworks\")] {\n         #[path = \"process_vxworks.rs\"]\n         mod process_inner;\n-    } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))] {\n+    } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\", target_os = \"vita\"))] {\n         #[path = \"process_unsupported.rs\"]\n         mod process_inner;\n     } else {"}, {"sha": "d8b63546b9ed1d129d95926f96d8c95326c86764", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -21,7 +21,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     not(target_os = \"fuchsia\"),\n     not(target_os = \"redox\"),\n     not(target_os = \"vxworks\"),\n-    not(target_os = \"emscripten\")\n+    not(target_os = \"emscripten\"),\n+    not(target_os = \"vita\"),\n ))]\n mod imp {\n     use crate::fs::File;\n@@ -175,7 +176,7 @@ mod imp {\n     }\n }\n \n-#[cfg(any(target_os = \"openbsd\", target_os = \"emscripten\"))]\n+#[cfg(any(target_os = \"openbsd\", target_os = \"emscripten\", target_os = \"vita\"))]\n mod imp {\n     use crate::sys::os::errno;\n "}, {"sha": "3be4382b0a3aa482e3756f96eabd0fdfc8ebc658", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -248,8 +248,14 @@ The valid types of print values are:\n   exact format of this debugging output is not a stable guarantee, other than\n   that it will include the linker executable and the text of each command-line\n   argument passed to the linker.\n+- `deployment-target` - The currently selected [deployment target] (or minimum OS version)\n+  for the selected Apple platform target. This value can be used or passed along to other\n+  components alongside a Rust build that need this information, such as C compilers.\n+  This returns rustc's minimum supported deployment target if no `*_DEPLOYMENT_TARGET` variable\n+  is present in the environment, or otherwise returns the variable's parsed value.\n \n [conditional compilation]: ../reference/conditional-compilation.html\n+[deployment target]: https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html\n \n <a id=\"option-g-debug\"></a>\n ## `-g`: include debug information"}, {"sha": "d75bd92beda73d80a1e06dfa941fe1cec2fb2882", "filename": "src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md", "status": "renamed", "additions": 83, "deletions": 14, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-newlibeabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-newlibeabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-newlibeabihf.md?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -1,26 +1,40 @@\n-# armv7-sony-vita-eabihf\n+# armv7-sony-vita-newlibeabihf\n \n **Tier: 3**\n \n This tier supports the ARM Cortex A9 processor running on a PlayStation Vita console. `armv7-vita-newlibeabihf` aims to have support for `std` crate using `newlib` as a bridge.\n \n+Rust support for this target is not affiliated with Sony, and is not derived\n+from nor used with any official Sony SDK.\n+\n ## Designated Developers\n \n * [@amg98](https://github.com/amg98)\n+* [@nikarh](https://github.com/nikarh)\n \n ## Requirements\n \n-This target is cross compiled, and requires installing [VITASDK](https://vitasdk.org/) toolchain on your system.\n+This target is cross-compiled, and requires installing [VITASDK](https://vitasdk.org/) toolchain on your system. Dynamic linking is not supported.\n+\n+`#![no_std]` crates can be built using `build-std` to build `core`, and optionally\n+`alloc`, and `panic_abort`.\n+\n+`std` is partially supported, but mostly works. Some APIs are unimplemented\n+and will simply return an error, such as `std::process`. An allocator is provided\n+by default.\n+\n+In order to support some APIs, binaries must be linked against `libc` written\n+for the target, using a linker for the target. These are provided by the\n+VITASDK toolchain.\n+\n+This target generates binaries in the ELF format.\n \n ## Building\n \n-You can build Rust with support for the target by adding it to the `target`\n-list in `config.toml`:\n+Rust does not ship pre-compiled artifacts for this target. You can use `build-std` flag to build binaries with `std`:\n \n-```toml\n-[build]\n-build-stage = 1\n-target = [\"armv7-sony-vita-newlibeabihf\"]\n+```sh\n+cargo build -Z build-std=std,panic_abort --target=armv7-sony-vita-newlibeabihf --release\n ```\n \n ## Cross-compilation\n@@ -33,26 +47,81 @@ Currently there is no support to run the rustc test suite for this target.\n \n ## Building and Running Rust Programs\n \n-To test your developed rust programs for PlayStation Vita, first you have to prepare a proper executable for the device using the resulting ELF file you get from compilation step. The needed steps can be automated using tools like `cargo-make`. Use the example below as a template for your project:\n+`std` support for this target relies on newlib. In order to work, newlib must be initialized correctly. The easiest way to achieve this with VITASDK newlib implementation is by compiling your program as a staticlib with and exposing your main function from rust to `_init` function in `crt0`.\n+\n+Add this to your `Cargo.toml`:\n+\n+```toml\n+[lib]\n+crate-type = [\"staticlib\"]\n+\n+[profile.release]\n+panic = 'abort'\n+lto = true\n+opt-level = 3\n+```\n+\n+Your entrypoint should look roughly like this, `src/lib.rs`:\n+```rust,ignore,no_run\n+#[used]\n+#[export_name = \"_newlib_heap_size_user\"]\n+pub static _NEWLIB_HEAP_SIZE_USER: u32 = 100 * 1024 * 1024; // Default heap size is only 32mb, increase it to something suitable for your application\n+\n+#[no_mangle]\n+pub extern \"C\" fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+To test your developed rust programs on PlayStation Vita, first you must correctly link and package your rust staticlib. These steps can be preformed using tools available in VITASDK, and can be automated using tools like `cargo-make`.\n+\n+First, set up environment variables for `VITASDK`, and it's binaries:\n+\n+```sh\n+export VITASDK=/opt/vitasdk\n+export PATH=$PATH:$VITASDK/bin\n+```\n+\n+Use the example below as a template for your project:\n \n ```toml\n [env]\n TITLE = \"Rust Hello World\"\n TITLEID = \"RUST00001\"\n+# Add other libs required by your project here\n+LINKER_LIBS = \"-lpthread -lm -lmathneon\"\n+\n # At least a \"sce_sys\" folder should be place there for app metadata (title, icons, description...)\n # You can find sample assets for that on $VITASDK/share/gcc-arm-vita-eabi/samples/hello_world/sce_sys/\n STATIC_DIR = \"static\"   # Folder where static assets should be placed (sce_sys folder is at $STATIC_DIR/sce_sys)\n CARGO_TARGET_DIR = { script = [\"echo ${CARGO_TARGET_DIR:=target}\"] }\n-RUST_TARGET_PATH = { script = [\"echo $(pwd)\"]}\n RUST_TARGET = \"armv7-sony-vita-newlibeabihf\"\n CARGO_OUT_DIR = \"${CARGO_TARGET_DIR}/${RUST_TARGET}/release\"\n \n-[tasks.xbuild]\n-# This is the command where you get the ELF executable file (e.g. call to cargo build)\n+TARGET_LINKER = \"arm-vita-eabi-gcc\"\n+TARGET_LINKER_FLAGS = \"-Wl,-q\"\n+\n+[tasks.build]\n+description = \"Build the project using `cargo` as a static lib.\"\n+command = \"cargo\"\n+args = [\"build\", \"-Z\", \"build-std=std,panic_abort\", \"--target=armv7-sony-vita-newlibeabihf\", \"--release\"]\n+\n+[tasks.link]\n+description = \"Build an ELF executable using the `vitasdk` linker.\"\n+dependencies = [\"build\"]\n+script = [\n+    \"\"\"\n+    ${TARGET_LINKER} ${TARGET_LINKER_FLAGS} \\\n+        -L\"${CARGO_OUT_DIR}\" \\\n+        -l\"${CARGO_MAKE_CRATE_FS_NAME}\" \\\n+        ${LINKER_LIBS} \\\n+        -o\"${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf\"\n+    \"\"\"\n+]\n \n [tasks.strip]\n description = \"Strip the produced ELF executable.\"\n-dependencies = [\"xbuild\"]\n+dependencies = [\"link\"]\n command = \"arm-vita-eabi-strip\"\n args = [\"-g\", '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_FS_NAME}.elf']\n \n@@ -124,4 +193,4 @@ script = [\n ]\n ```\n \n-After running the above script, you should be able to get a *.vpk file in the same folder your *.elf executable resides. Now you can pick it and install it on your own PlayStation Vita using, for example, [VitaShell](https://github.com/TheOfficialFloW/VitaShell/releases) or you can use an emulator. For the time being, the most mature emulator for PlayStation Vita is [Vita3K](https://vita3k.org/), although I personally recommend testing your programs in real hardware, as the emulator is quite experimental.\n+After running the above script, you should be able to get a *.vpk file in the same folder your *.elf executable resides. Now you can pick it and install it on your own PlayStation Vita using, or you can use an [Vita3K](https://vita3k.org/) emulator.", "previous_filename": "src/doc/rustc/src/platform-support/armv7-sony-vita-eabihf.md"}, {"sha": "532cb9eea1107ad56faaca76eec2daeadcf7b41e", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -18,6 +18,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n - MSP430\n - M68k\n - LoongArch\n+- s390x\n \n ## Register classes\n \n@@ -48,6 +49,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg_addr`     | `a[0-3]`                           | `a`                  |\n | LoongArch    | `reg`          | `$r1`, `$r[4-20]`, `$r[23,30]`     | `r`                  |\n | LoongArch    | `freg`         | `$f[0-31]`                         | `f`                  |\n+| s390x        | `reg`          | `r[0-10]`, `r[12-14]`              | `r`                  |\n+| s390x        | `freg`         | `f[0-15]`                          | `f`                  |\n \n > **Notes**:\n > - NVPTX doesn't have a fixed register set, so named registers are not supported.\n@@ -81,6 +84,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg_data`                      | None           | `i8`, `i16`, `i32`                      |\n | LoongArch64  | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n | LoongArch64  | `freg`                          | None           | `f32`, `f64`                            |\n+| s390x        | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`               |\n+| s390x        | `freg`                          | None           | `f32`, `f64`                            |\n \n ## Register aliases\n \n@@ -115,8 +120,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n \n | Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n-| All          | `sp`                                    | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n-| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `sp`, `r15` (s390x)                     | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n | All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n | MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n | MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n@@ -147,6 +152,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | PowerPC      | `freg`         | None     | `0`            | None          |\n | LoongArch    | `reg`          | None     | `$r2`          | None          |\n | LoongArch    | `freg`         | None     | `$f0`          | None          |\n+| s390x        | `reg`          | None     | `%r0`          | None          |\n+| s390x        | `freg`         | None     | `%f0`          | None          |\n \n # Flags covered by `preserves_flags`\n \n@@ -157,3 +164,5 @@ These flags registers must be restored upon exiting the asm block if the `preser\n   - The status register `r2`.\n - M68k\n   - The condition code register `ccr`.\n+- s390x\n+  - The condition code register `cc`."}, {"sha": "d338bb412054ea825317fbc300b42f3f2e6c6dbf", "filename": "src/tools/rust-analyzer/crates/hir-def/src/lang_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Flang_item.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -379,7 +379,6 @@ language_item_table! {\n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n     ResumeTy,                ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n-    IdentityFuture,          identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n     GetContext,              get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n     Context,                 Context,             context,                    Target::Struct,         GenericRequirement::None;"}, {"sha": "e4f328ec0ddc89d37df1dad8e6e785579680d5f4", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -10,7 +10,7 @@ use std::path::{Path, PathBuf};\n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n const ISSUES_ENTRY_LIMIT: usize = 1953;\n-const ROOT_ENTRY_LIMIT: usize = 894;\n+const ROOT_ENTRY_LIMIT: usize = 895;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();"}, {"sha": "4f57550c29a7bf2ba0e73c40953d66ce069de684", "filename": "tests/run-make/valid-print-requests/valid-print-requests.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -1,2 +1,2 @@\n-error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`, `deployment-target`\n "}, {"sha": "336624320a32c8df1dc489161eba2babbfb687ea", "filename": "tests/ui/deployment-target/invalid-target.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --target x86_64-unknown-linux-gnu --print deployment-target\n+// needs-llvm-components: x86\n+\n+fn main() {}"}, {"sha": "eb4ac131c40cd224b5f79bb0ed40830a04626de0", "filename": "tests/ui/deployment-target/invalid-target.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,2 @@\n+error: only Apple targets currently support deployment version info\n+"}, {"sha": "701ccf4799a44b191025aaa832fd979bf7aaf8c2", "filename": "tests/ui/deployment-target/macos-target.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,7 @@\n+// only-macos\n+// compile-flags: --print deployment-target\n+// normalize-stdout-test: \"\\d+\\.\" -> \"$$CURRENT_MAJOR_VERSION.\"\n+// normalize-stdout-test: \"\\d+\" -> \"$$CURRENT_MINOR_VERSION\"\n+// check-pass\n+\n+fn main() {}"}, {"sha": "f55ef568ed67f42b0189e1d7037f2de89f5c9fe2", "filename": "tests/ui/deployment-target/macos-target.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1 @@\n+deployment_target=$CURRENT_MAJOR_VERSION.$CURRENT_MINOR_VERSION"}, {"sha": "df0884b8b9f1601eb4fcfafe1a0c231c315f64d7", "filename": "tests/ui/traits/negative-bounds/supertrait.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.rs?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(negative_bounds)]\n+//~^ WARN the feature `negative_bounds` is incomplete\n+\n+trait A: !B {}\n+trait B: !A {}\n+\n+fn main() {}"}, {"sha": "f44753b624e3fd082df0a09fc434755c0607c938", "filename": "tests/ui/traits/negative-bounds/supertrait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce042889f7f0d687368a9704eff64cf9542bac6d/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsupertrait.stderr?ref=ce042889f7f0d687368a9704eff64cf9542bac6d", "patch": "@@ -0,0 +1,10 @@\n+warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/supertrait.rs:3:12\n+   |\n+LL | #![feature(negative_bounds)]\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}