{"sha": "d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "node_id": "C_kwDOAAsO6NoAKGQ2OGFjOWNjY2U4NWI4OGRlNWY5ZjdlZWQxNjllZjMwMWJkYWFlM2Y", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-17T23:44:12Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-15T01:32:51Z"}, "message": "Don't lint `let_unit_value` when needed for type inferenece", "tree": {"sha": "feecf8b49938da3d4b7f0e96c587df296d5528e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feecf8b49938da3d4b7f0e96c587df296d5528e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "html_url": "https://github.com/rust-lang/rust/commit/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bcd9bc6e91cc00fbf7c9bf7aab13c0a4ec2367", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bcd9bc6e91cc00fbf7c9bf7aab13c0a4ec2367", "html_url": "https://github.com/rust-lang/rust/commit/80bcd9bc6e91cc00fbf7c9bf7aab13c0a4ec2367"}], "stats": {"total": 168, "additions": 162, "deletions": 6}, "files": [{"sha": "39352b3ee4769ac8dd2dcc5650ef4b8686808bc4", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 67, "deletions": 5, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "patch": "@@ -1,18 +1,38 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_macro_callsite;\n+use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n-use rustc_hir::{Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitor};\n \n use super::LET_UNIT_VALUE;\n \n pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local) = stmt.kind {\n-        if cx.typeck_results().pat_ty(local.pat).is_unit() {\n-            if in_external_macro(cx.sess(), stmt.span) || local.pat.span.from_expansion() {\n-                return;\n+    if let StmtKind::Local(local) = stmt.kind\n+        && !local.pat.span.from_expansion()\n+        && !in_external_macro(cx.sess(), stmt.span)\n+        && cx.typeck_results().pat_ty(local.pat).is_unit()\n+    {\n+        if local.init.map_or(false, |e| needs_inferred_result_ty(cx, e)) {\n+            if !matches!(local.pat.kind, PatKind::Wild) {\n+                span_lint_and_then(\n+                    cx,\n+                    LET_UNIT_VALUE,\n+                    stmt.span,\n+                    \"this let-binding has unit value\",\n+                    |diag| {\n+                            diag.span_suggestion(\n+                                local.pat.span,\n+                                \"use a wild (`_`) binding\",\n+                                \"_\".into(),\n+                                Applicability::MaybeIncorrect, // snippet\n+                            );\n+                    },\n+                );\n             }\n+        } else {\n             span_lint_and_then(\n                 cx,\n                 LET_UNIT_VALUE,\n@@ -33,3 +53,45 @@ pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n         }\n     }\n }\n+\n+fn needs_inferred_result_ty(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    let id = match e.kind {\n+        ExprKind::Call(\n+            Expr {\n+                kind: ExprKind::Path(ref path),\n+                hir_id,\n+                ..\n+            },\n+            _,\n+        ) => cx.qpath_res(path, *hir_id).opt_def_id(),\n+        ExprKind::MethodCall(..) => cx.typeck_results().type_dependent_def_id(e.hir_id),\n+        _ => return false,\n+    };\n+    if let Some(id) = id\n+        && let sig = cx.tcx.fn_sig(id).skip_binder()\n+        && let ty::Param(output_ty) = *sig.output().kind()\n+    {\n+        sig.inputs().iter().all(|&ty| !ty_contains_param(ty, output_ty.index))\n+    } else {\n+        false\n+    }\n+}\n+\n+fn ty_contains_param(ty: Ty<'_>, index: u32) -> bool {\n+    struct Visitor(u32);\n+    impl<'tcx> TypeVisitor<'tcx> for Visitor {\n+        type BreakTy = ();\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::Param(ty) = *ty.kind() {\n+                if ty.index == self.0 {\n+                    ControlFlow::BREAK\n+                } else {\n+                    ControlFlow::CONTINUE\n+                }\n+            } else {\n+                ty.super_visit_with(self)\n+            }\n+        }\n+    }\n+    ty.visit_with(&mut Visitor(index)).is_break()\n+}"}, {"sha": "5fee742b19248fbf9d8386a097ca7e0dd7bd661d", "filename": "tests/ui/let_unit.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "patch": "@@ -61,3 +61,30 @@ fn multiline_sugg() {\n \n #[derive(Copy, Clone)]\n pub struct ContainsUnit(()); // should be fine\n+\n+fn _returns_generic() {\n+    fn f<T>() -> T {\n+        unimplemented!()\n+    }\n+    fn f2<T, U>(_: T) -> U {\n+        unimplemented!()\n+    }\n+    fn f3<T>(x: T) -> T {\n+        x\n+    }\n+    fn f4<T>(mut x: Vec<T>) -> T {\n+        x.pop().unwrap()\n+    }\n+\n+    let _: () = f(); // Ok\n+    let _: () = f(); // Lint.\n+\n+    let _: () = f2(0i32); // Ok\n+    let _: () = f2(0i32); // Lint.\n+\n+    f3(()); // Lint\n+    f3(()); // Lint\n+\n+    f4(vec![()]); // Lint\n+    f4(vec![()]); // Lint\n+}"}, {"sha": "505e4a7d8fdd575a7e40088c4ef1de0adf1a9368", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "patch": "@@ -61,3 +61,30 @@ fn multiline_sugg() {\n \n #[derive(Copy, Clone)]\n pub struct ContainsUnit(()); // should be fine\n+\n+fn _returns_generic() {\n+    fn f<T>() -> T {\n+        unimplemented!()\n+    }\n+    fn f2<T, U>(_: T) -> U {\n+        unimplemented!()\n+    }\n+    fn f3<T>(x: T) -> T {\n+        x\n+    }\n+    fn f4<T>(mut x: Vec<T>) -> T {\n+        x.pop().unwrap()\n+    }\n+\n+    let _: () = f(); // Ok\n+    let x: () = f(); // Lint.\n+\n+    let _: () = f2(0i32); // Ok\n+    let x: () = f2(0i32); // Lint.\n+\n+    let _: () = f3(()); // Lint\n+    let x: () = f3(()); // Lint\n+\n+    let _: () = f4(vec![()]); // Lint\n+    let x: () = f4(vec![()]); // Lint\n+}"}, {"sha": "c4a766bb974403d60277db4449c326ec924c6779", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68ac9ccce85b88de5f9f7eed169ef301bdaae3f/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=d68ac9ccce85b88de5f9f7eed169ef301bdaae3f", "patch": "@@ -34,5 +34,45 @@ LL +         .map(|_| ())\n LL +         .next()\n  ...\n \n-error: aborting due to 3 previous errors\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:80:5\n+   |\n+LL |     let x: () = f(); // Lint.\n+   |     ^^^^-^^^^^^^^^^^\n+   |         |\n+   |         help: use a wild (`_`) binding: `_`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:83:5\n+   |\n+LL |     let x: () = f2(0i32); // Lint.\n+   |     ^^^^-^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: use a wild (`_`) binding: `_`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:85:5\n+   |\n+LL |     let _: () = f3(()); // Lint\n+   |     ^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f3(());`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:86:5\n+   |\n+LL |     let x: () = f3(()); // Lint\n+   |     ^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f3(());`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:88:5\n+   |\n+LL |     let _: () = f4(vec![()]); // Lint\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:89:5\n+   |\n+LL |     let x: () = f4(vec![()]); // Lint\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n+\n+error: aborting due to 9 previous errors\n "}]}