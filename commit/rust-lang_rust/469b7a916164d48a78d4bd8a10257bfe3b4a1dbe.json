{"sha": "469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWI3YTkxNjE2NGQ0OGE3OGQ0YmQ4YTEwMjU3YmZlM2I0YTFkYmU=", "commit": {"author": {"name": "Denys Otrishko", "email": "shishugi@gmail.com", "date": "2019-07-18T15:41:59Z"}, "committer": {"name": "Denys Otrishko", "email": "shishugi@gmail.com", "date": "2019-07-19T15:55:20Z"}, "message": "rustc_typeck: improve diagnostics for _ const/static declarations", "tree": {"sha": "a2ff62c25a630d0ecaddf93aee7f966460cf8e3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ff62c25a630d0ecaddf93aee7f966460cf8e3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEPTkowzwjbi/kT/hRt45kt1W3k4MFAl0x5/sACgkQt45kt1W3\nk4N8Lw/+OV5V1MTkG2gv4Zkwsa90FTPjh6BjKkzoC0SMr77dG1JWiq5DvkCR6xeB\nswn6RX5gS7nEhJBo87z0uQZZ7yBT/O46X2mF0+aihNdpVx5rDdKBVIgnFCrH5XCr\noYQ1tEXd+GpCSh4ven72lD61w2gZNvoITvV0roPakaM5kY7aDC5jcC0MFFd8o6w1\nDNgCnP4/20ljQ+lm2vfgPQKcjJZEcm1AjFYeJgEUjlKVD8zXHKTy82XIjtjPLBfo\nufgfR4u9ZR/pGbOFXMHk7UvgvCv2Fw3ShMQ8+1SBDcwIl4d5FFeHVyosmQK5J2pL\nmwSfSQW4PYMPKTpaACA3Bj+IlPGWnuBaKvBCxLDTU7/wlcd68CZBtV69BakNx77A\nZzvgLfn1L1pj30zZTX+eYGxczIU+tItnzAMaQd5HCiEPULWvKfWl6TrMCBTEHx39\ntjq7ftZXsr/LAEyV3wMTIPLTC7FHASxuXRePJJ5KXUKax51Il+vKXoIemIOThnza\nQoetZiLxageY4pvZH5nIWT0Mu5CjEwzab12W8IsLymlyivyZTQMvlLoIVKvn+3SC\nopRC/NCpPTHgOZUvn1N13FFr/vqV38L0kY2pqMbOIMsZ8vpdcO1MrsQtxjwbBFiO\nsVW4t0/v9l0HbbodesLmlQgIZFGenghNFcE2MJIa09ALudOiGxA=\n=N/td\n-----END PGP SIGNATURE-----", "payload": "tree a2ff62c25a630d0ecaddf93aee7f966460cf8e3a\nparent 527dce7137f7a3c7bf47d9a503abf25f88ea22de\nauthor Denys Otrishko <shishugi@gmail.com> 1563464519 +0300\ncommitter Denys Otrishko <shishugi@gmail.com> 1563551720 +0300\n\nrustc_typeck: improve diagnostics for _ const/static declarations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "html_url": "https://github.com/rust-lang/rust/commit/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/comments", "author": {"login": "lundibundi", "id": 9109612, "node_id": "MDQ6VXNlcjkxMDk2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9109612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lundibundi", "html_url": "https://github.com/lundibundi", "followers_url": "https://api.github.com/users/lundibundi/followers", "following_url": "https://api.github.com/users/lundibundi/following{/other_user}", "gists_url": "https://api.github.com/users/lundibundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lundibundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lundibundi/subscriptions", "organizations_url": "https://api.github.com/users/lundibundi/orgs", "repos_url": "https://api.github.com/users/lundibundi/repos", "events_url": "https://api.github.com/users/lundibundi/events{/privacy}", "received_events_url": "https://api.github.com/users/lundibundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lundibundi", "id": 9109612, "node_id": "MDQ6VXNlcjkxMDk2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9109612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lundibundi", "html_url": "https://github.com/lundibundi", "followers_url": "https://api.github.com/users/lundibundi/followers", "following_url": "https://api.github.com/users/lundibundi/following{/other_user}", "gists_url": "https://api.github.com/users/lundibundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lundibundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lundibundi/subscriptions", "organizations_url": "https://api.github.com/users/lundibundi/orgs", "repos_url": "https://api.github.com/users/lundibundi/repos", "events_url": "https://api.github.com/users/lundibundi/events{/privacy}", "received_events_url": "https://api.github.com/users/lundibundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527dce7137f7a3c7bf47d9a503abf25f88ea22de", "url": "https://api.github.com/repos/rust-lang/rust/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "html_url": "https://github.com/rust-lang/rust/commit/527dce7137f7a3c7bf47d9a503abf25f88ea22de"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "21cd4b694ae4ca625047e323b6b12d9f597ba8b8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "patch": "@@ -759,40 +759,40 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::Ty>, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n-                hir::ItemKind::Const(_, body) |\n-                hir::ItemKind::Static(_, _, body) =>\n-                    Some((body, None, None)),\n+                hir::ItemKind::Const(ref ty, body) |\n+                hir::ItemKind::Static(ref ty, _, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, Some(header), Some(decl))),\n+                    Some((body, None, Some(header), Some(decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::TraitItem(item) => {\n             match item.node {\n-                hir::TraitItemKind::Const(_, Some(body)) =>\n-                    Some((body, None, None)),\n+                hir::TraitItemKind::Const(ref ty, Some(body)) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::ImplItem(item) => {\n             match item.node {\n-                hir::ImplItemKind::Const(_, body) =>\n-                    Some((body, None, None)),\n+                hir::ImplItemKind::Const(ref ty, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n-        Node::AnonConst(constant) => Some((constant.body, None, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None, None)),\n         _ => None,\n     }\n }\n@@ -825,7 +825,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, fn_header, fn_decl) = primary_body_of(tcx, id)\n+    let (body_id, body_ty, fn_header, fn_decl) = primary_body_of(tcx, id)\n         .unwrap_or_else(|| {\n             span_bug!(span, \"can't type-check body of {:?}\", def_id);\n         });\n@@ -856,7 +856,10 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n             fcx\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-            let expected_type = tcx.type_of(def_id);\n+            let expected_type = body_ty.and_then(|ty| match ty.node {\n+                hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n+                _ => None\n+            }).unwrap_or_else(|| tcx.type_of(def_id));\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n "}, {"sha": "053ef1f8f8297a2c640045eb7a601d1c2f6c9e68", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "patch": "@@ -1135,6 +1135,26 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n+fn infer_placeholder_type(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    body_id: hir::BodyId,\n+    span: Span,\n+) -> Ty<'_> {\n+    let ty = tcx.typeck_tables_of(def_id).node_type(body_id.hir_id);\n+    let mut diag = bad_placeholder_type(tcx, span);\n+    if ty != tcx.types.err {\n+        diag.span_suggestion(\n+            span,\n+            \"replace `_` with the correct type\",\n+            ty.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+    diag.emit();\n+    ty\n+}\n+\n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n@@ -1160,7 +1180,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n+            TraitItemKind::Const(ref ty, body_id)  => {\n+                body_id.and_then(|body_id| {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span))\n+                    } else {\n+                        None\n+                    }\n+                }).unwrap_or_else(|| icx.to_ty(ty))\n+            },\n+            TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n             TraitItemKind::Type(_, None) => {\n                 if !fail {\n                     return None;\n@@ -1174,7 +1203,13 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n+            ImplItemKind::Const(ref ty, body_id) => {\n+                if let hir::TyKind::Infer = ty.node {\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                } else {\n+                    icx.to_ty(ty)\n+                }\n+            },\n             ImplItemKind::Existential(_) => {\n                 if tcx\n                     .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n@@ -1199,10 +1234,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n \n         Node::Item(item) => {\n             match item.node {\n-                ItemKind::Static(ref t, ..)\n-                | ItemKind::Const(ref t, _)\n-                | ItemKind::Ty(ref t, _)\n-                | ItemKind::Impl(.., ref t, _) => icx.to_ty(t),\n+                ItemKind::Static(ref ty, .., body_id)\n+                | ItemKind::Const(ref ty, body_id) => {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                    } else {\n+                        icx.to_ty(ty)\n+                    }\n+                },\n+                ItemKind::Ty(ref ty, _)\n+                | ItemKind::Impl(.., ref ty, _) => icx.to_ty(ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)"}, {"sha": "2b4d9966c3d0b50259e1f64cd57839b3085d7b2b", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/469b7a916164d48a78d4bd8a10257bfe3b4a1dbe/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=469b7a916164d48a78d4bd8a10257bfe3b4a1dbe", "patch": "@@ -23,13 +23,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:11:15\n    |\n LL | static TEST3: _ = \"test\";\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:14:15\n    |\n LL | static TEST4: _ = 145;\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:17:16\n@@ -122,13 +128,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:64:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:67:22\n    |\n LL |     static FN_TEST4: _ = 145;\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:70:23"}]}