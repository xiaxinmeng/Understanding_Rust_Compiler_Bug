{"sha": "3539cf9344d3efb853751a17b520af35dcd5030b", "node_id": "C_kwDOAAsO6NoAKDM1MzljZjkzNDRkM2VmYjg1Mzc1MWExN2I1MjBhZjM1ZGNkNTAzMGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T21:43:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T21:43:17Z"}, "message": "Rollup merge of #104627 - calebzulawski:print-target-features, r=compiler-errors\n\nPrint all features with --print target-features\n\nThis fixes `rustc --print target-features` with respect to aliases and tied features.\n\nBefore this change, the print command assumed that each LLVM feature corresponds exactly to one rustc feature.  In the case of aliases and tied features, this assumption failed and some features (such as aarch64's \"pacg\") were missing.  With this change, every target feature is listed.", "tree": {"sha": "43bb862b0206c07ddc92caf3a653d0b3c7f3ebb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43bb862b0206c07ddc92caf3a653d0b3c7f3ebb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3539cf9344d3efb853751a17b520af35dcd5030b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhnz1CRBK7hj4Ov3rIwAANQkIAELpj3GLzh1ObdPtr5Rf16Iv\n5tXWIFXwDKqO7jV+WI0HTBiMDKAPVQSIjs5gnlFLC0mIZjEYQi1YFUN7PuWjKXZu\nZz/CYJIN7VbBMU+EfkdM68UHo/6l2NIMRrNK7uxfDiyJl9//veL3V3jT9Q7s+nZL\nv7rwRxj2LKXWxQXGSpn2PkoD4QdYlO2G4FDvsougsVti5zaSvbNpJsGV217/Ih1q\nuaCOvDrTdNeh6liGoT1adkX7UdkdL6cbaz0+jMz3yBifhoYmCSWzzn5AXNtUNpqY\nW181o1EpkCiuHxhYNTa8DmXBROsMLw46vXgJ+RcVcp19AkzZOLEHhPm+YnokQY8=\n=mqET\n-----END PGP SIGNATURE-----\n", "payload": "tree 43bb862b0206c07ddc92caf3a653d0b3c7f3ebb9\nparent 3e9a2233d01c1ece9c31833a70b23f3c77de067f\nparent 102a5d867c9b82df79ff7465eb8287b700af3bce\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669758197 +0100\ncommitter GitHub <noreply@github.com> 1669758197 +0100\n\nRollup merge of #104627 - calebzulawski:print-target-features, r=compiler-errors\n\nPrint all features with --print target-features\n\nThis fixes `rustc --print target-features` with respect to aliases and tied features.\n\nBefore this change, the print command assumed that each LLVM feature corresponds exactly to one rustc feature.  In the case of aliases and tied features, this assumption failed and some features (such as aarch64's \"pacg\") were missing.  With this change, every target feature is listed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3539cf9344d3efb853751a17b520af35dcd5030b", "html_url": "https://github.com/rust-lang/rust/commit/3539cf9344d3efb853751a17b520af35dcd5030b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3539cf9344d3efb853751a17b520af35dcd5030b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9a2233d01c1ece9c31833a70b23f3c77de067f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9a2233d01c1ece9c31833a70b23f3c77de067f", "html_url": "https://github.com/rust-lang/rust/commit/3e9a2233d01c1ece9c31833a70b23f3c77de067f"}, {"sha": "102a5d867c9b82df79ff7465eb8287b700af3bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/102a5d867c9b82df79ff7465eb8287b700af3bce", "html_url": "https://github.com/rust-lang/rust/commit/102a5d867c9b82df79ff7465eb8287b700af3bce"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "c9f5dd0f2c68b86e3b13d4ac911fe8f1cf5edf44", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3539cf9344d3efb853751a17b520af35dcd5030b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3539cf9344d3efb853751a17b520af35dcd5030b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=3539cf9344d3efb853751a17b520af35dcd5030b", "patch": "@@ -292,30 +292,33 @@ fn llvm_target_features(tm: &llvm::TargetMachine) -> Vec<(&str, &str)> {\n }\n \n fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n-    let mut target_features = llvm_target_features(tm);\n+    let mut llvm_target_features = llvm_target_features(tm);\n+    let mut known_llvm_target_features = FxHashSet::<&'static str>::default();\n     let mut rustc_target_features = supported_target_features(sess)\n         .iter()\n-        .filter_map(|(feature, _gate)| {\n-            for llvm_feature in to_llvm_features(sess, *feature) {\n+        .map(|(feature, _gate)| {\n+            let desc = if let Some(llvm_feature) = to_llvm_features(sess, *feature).first() {\n                 // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n-                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok().map(\n-                    |index| {\n-                        let (_f, desc) = target_features.remove(index);\n-                        (*feature, desc)\n-                    },\n-                ) {\n-                    Some(v) => return Some(v),\n-                    None => {}\n+                match llvm_target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok() {\n+                    Some(index) => {\n+                        known_llvm_target_features.insert(llvm_feature);\n+                        llvm_target_features[index].1\n+                    }\n+                    None => \"\",\n                 }\n-            }\n-            None\n+            } else {\n+                \"\"\n+            };\n+            (*feature, desc)\n         })\n         .collect::<Vec<_>>();\n     rustc_target_features.extend_from_slice(&[(\n         \"crt-static\",\n         \"Enables C Run-time Libraries to be statically linked\",\n     )]);\n-    let max_feature_len = target_features\n+    llvm_target_features.retain(|(f, _d)| !known_llvm_target_features.contains(f));\n+\n+    let max_feature_len = llvm_target_features\n         .iter()\n         .chain(rustc_target_features.iter())\n         .map(|(feature, _desc)| feature.len())\n@@ -327,10 +330,10 @@ fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n         println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n     }\n     println!(\"\\nCode-generation features supported by LLVM for this target:\");\n-    for (feature, desc) in &target_features {\n+    for (feature, desc) in &llvm_target_features {\n         println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n     }\n-    if target_features.is_empty() {\n+    if llvm_target_features.is_empty() {\n         println!(\"    Target features listing is not supported by this LLVM version.\");\n     }\n     println!(\"\\nUse +feature to enable a feature, or -feature to disable it.\");"}]}