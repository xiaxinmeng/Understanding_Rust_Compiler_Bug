{"sha": "a306f85df9f75c35c88395be756dc09c73cab891", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDZmODVkZjlmNzVjMzVjODgzOTViZTc1NmRjMDljNzNjYWI4OTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-15T09:22:58Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-26T23:23:11Z"}, "message": "Implement `CfgFolder` directly instead of passing a closure to `strip_items`", "tree": {"sha": "0b6ed5e8050435587f2cc2f8ac85794d3f494eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6ed5e8050435587f2cc2f8ac85794d3f494eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a306f85df9f75c35c88395be756dc09c73cab891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a306f85df9f75c35c88395be756dc09c73cab891", "html_url": "https://github.com/rust-lang/rust/commit/a306f85df9f75c35c88395be756dc09c73cab891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a306f85df9f75c35c88395be756dc09c73cab891/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e80760e9e7ceaa40661e07e0c89e1739f68d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e80760e9e7ceaa40661e07e0c89e1739f68d9a", "html_url": "https://github.com/rust-lang/rust/commit/f3e80760e9e7ceaa40661e07e0c89e1739f68d9a"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "1948c3afdbd05c4d625cbcfaf781127ba2878fe3", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a306f85df9f75c35c88395be756dc09c73cab891/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a306f85df9f75c35c88395be756dc09c73cab891/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=a306f85df9f75c35c88395be756dc09c73cab891", "patch": "@@ -26,14 +26,14 @@ pub trait CfgFolder: fold::Folder {\n \n /// A folder that strips out items that do not belong in the current\n /// configuration.\n-struct Context<'a, F> where F: FnMut(&[ast::Attribute]) -> bool {\n-    in_cfg: F,\n-    diagnostic: &'a Handler,\n+pub struct StripUnconfigured<'a> {\n+    diag: CfgDiagReal<'a, 'a>,\n+    config: &'a ast::CrateConfig,\n }\n \n-impl<'a, F: FnMut(&[ast::Attribute]) -> bool> CfgFolder for Context<'a, F> {\n+impl<'a> CfgFolder for StripUnconfigured<'a> {\n     fn configure<T: HasAttrs>(&mut self, node: T) -> Option<T> {\n-        if (self.in_cfg)(node.attrs()) {\n+        if in_cfg(self.config, node.attrs(), &mut self.diag) {\n             Some(node)\n         } else {\n             None\n@@ -43,7 +43,7 @@ impl<'a, F: FnMut(&[ast::Attribute]) -> bool> CfgFolder for Context<'a, F> {\n     fn visit_unconfigurable_expr(&mut self, expr: &ast::Expr) {\n         if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(a)) {\n             let msg = \"removing an expression is not supported in this position\";\n-            self.diagnostic.span_err(attr.span, msg);\n+            self.diag.diag.span_err(attr.span, msg);\n         }\n     }\n }\n@@ -58,16 +58,14 @@ pub fn strip_unconfigured_items(diagnostic: &Handler, krate: ast::Crate,\n     check_for_gated_stmt_expr_attributes(&krate, feature_gated_cfgs);\n \n     let krate = process_cfg_attr(diagnostic, krate, feature_gated_cfgs);\n-    let config = krate.config.clone();\n-    strip_items(diagnostic,\n-                krate,\n-                |attrs| {\n-                    let mut diag = CfgDiagReal {\n-                        diag: diagnostic,\n-                        feature_gated_cfgs: feature_gated_cfgs,\n-                    };\n-                    in_cfg(&config, attrs, &mut diag)\n-                })\n+\n+    StripUnconfigured {\n+        config: &krate.config.clone(),\n+        diag: CfgDiagReal {\n+            diag: diagnostic,\n+            feature_gated_cfgs: feature_gated_cfgs,\n+        },\n+    }.fold_crate(krate)\n }\n \n impl<T: CfgFolder> fold::Folder for T {\n@@ -158,17 +156,6 @@ impl<T: CfgFolder> fold::Folder for T {\n     }\n }\n \n-pub fn strip_items<'a, F>(diagnostic: &'a Handler,\n-                          krate: ast::Crate, in_cfg: F) -> ast::Crate where\n-    F: FnMut(&[ast::Attribute]) -> bool,\n-{\n-    let mut ctxt = Context {\n-        in_cfg: in_cfg,\n-        diagnostic: diagnostic,\n-    };\n-    ctxt.fold_crate(krate)\n-}\n-\n fn fold_expr<F: CfgFolder>(folder: &mut F, expr: P<ast::Expr>) -> P<ast::Expr> {\n     expr.map(|ast::Expr {id, span, node, attrs}| {\n         fold::noop_fold_expr(ast::Expr {"}, {"sha": "84c7250fac6e503645d074a1c259dc32e4719d4e", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a306f85df9f75c35c88395be756dc09c73cab891/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a306f85df9f75c35c88395be756dc09c73cab891/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a306f85df9f75c35c88395be756dc09c73cab891", "patch": "@@ -87,7 +87,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n     if should_test {\n         generate_test_harness(sess, reexport_test_harness_main, krate, cfg, span_diagnostic)\n     } else {\n-        strip_test_functions(span_diagnostic, krate)\n+        strip_test_functions(krate)\n     }\n }\n \n@@ -312,14 +312,22 @@ fn generate_test_harness(sess: &ParseSess,\n     return res;\n }\n \n-fn strip_test_functions(diagnostic: &errors::Handler, krate: ast::Crate)\n-                        -> ast::Crate {\n+fn strip_test_functions(krate: ast::Crate) -> ast::Crate {\n     // When not compiling with --test we should not compile the\n     // #[test] functions\n-    config::strip_items(diagnostic, krate, |attrs| {\n-        !attr::contains_name(&attrs[..], \"test\") &&\n-        !attr::contains_name(&attrs[..], \"bench\")\n-    })\n+    struct StripTests;\n+    impl config::CfgFolder for StripTests {\n+        fn configure<T: attr::HasAttrs>(&mut self, node: T) -> Option<T> {\n+            let strip_node = {\n+                let attrs = node.attrs();\n+                attr::contains_name(attrs, \"test\") || attr::contains_name(attrs, \"bench\")\n+            };\n+\n+            if strip_node { None } else { Some(node) }\n+        }\n+    }\n+\n+    StripTests.fold_crate(krate)\n }\n \n /// Craft a span that will be ignored by the stability lint's"}]}