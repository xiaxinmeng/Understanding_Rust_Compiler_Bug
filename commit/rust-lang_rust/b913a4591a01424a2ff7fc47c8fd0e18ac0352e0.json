{"sha": "b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTNhNDU5MWEwMTQyNGEyZmY3ZmM0N2M4ZmQwZTE4YWMwMzUyZTA=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-07-22T19:56:33Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-07-22T19:57:42Z"}, "message": "Add a test for get_body_with_borrowck_facts.", "tree": {"sha": "4d1ad0114754d9c0bac578b41c7887d8012ddc72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1ad0114754d9c0bac578b41c7887d8012ddc72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "html_url": "https://github.com/rust-lang/rust/commit/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2b4f44412391ff14d96d71d7b6a212f1d94755", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2b4f44412391ff14d96d71d7b6a212f1d94755", "html_url": "https://github.com/rust-lang/rust/commit/ad2b4f44412391ff14d96d71d7b6a212f1d94755"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "77509d173bf446de5e754c684d70d5f125d68101", "filename": "compiler/rustc_mir/src/borrow_check/consumers.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs?ref=b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "patch": "@@ -15,6 +15,15 @@ pub use super::{\n \n /// This function computes Polonius facts for the given body. It makes a copy of\n /// the body because it needs to regenerate the region identifiers.\n+///\n+/// Note:\n+/// *   This function will panic if the required body was already stolen. This\n+///     can, for example, happen when requesting a body of a `const` function\n+///     because they are evaluated during typechecking. The panic can be avoided\n+///     by overriding the `mir_borrowck` query. You can find a complete example\n+///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n+/// *   This function will also panic if computation of Polonius facts\n+///     (`-Zpolonius` flag) is not enabled.\n pub fn get_body_with_borrowck_facts<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,"}, {"sha": "ede3a9c42e7739347182170b4a7821d11ad1bca3", "filename": "src/test/run-make/obtain-borrowck/Makefile", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobtain-borrowck%2FMakefile?ref=b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "patch": "@@ -0,0 +1,25 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# This example shows how to implement a rustc driver that retrieves MIR bodies\n+# together with the borrow checker information.\n+\n+# How to run this\n+# $ ./x.py test src/test/run-make/obtain-borrowck\n+\n+DRIVER_BINARY := \"$(TMPDIR)\"/driver\n+BUILD_STAGE := $(RUST_BUILD_STAGE:$(TARGET)=)\n+RUSTC_SRC_LIB_DEPS := $(BUILD_DIR)/$(TARGET)/$(BUILD_STAGE)rustc/release/deps/\n+RUSTC_SRC_LIB := $(BUILD_DIR)/$(TARGET)/$(BUILD_STAGE)rustc/$(TARGET)/release/deps/\n+SYSROOT := $(shell $(RUSTC) --print sysroot)\n+DRIVER_RPATH_ENV = \\\n+\t$(LD_LIB_PATH_ENVVAR)=\"${RUSTC_SRC_LIB}:$(HOST_RPATH_DIR)/rustlib/$(TARGET)/lib/:$($(LD_LIB_PATH_ENVVAR))\"\n+\n+all:\n+\t$(RUSTC) -L $(RUSTC_SRC_LIB) -L $(RUSTC_SRC_LIB_DEPS) driver.rs -o \"$(DRIVER_BINARY)\"\n+\t$(DRIVER_RPATH_ENV) \"$(DRIVER_BINARY)\" --sysroot $(SYSROOT) test.rs -o \"$(TMPDIR)/driver_test\" > \"$(TMPDIR)\"/output.stdout\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.stdout output.stdout\n+else\n+\t$(DIFF) output.stdout \"$(TMPDIR)\"/output.stdout\n+endif"}, {"sha": "308df0b030c27ec138e098e9b8816367a923ecd2", "filename": "src/test/run-make/obtain-borrowck/driver.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Fdriver.rs?ref=b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "patch": "@@ -0,0 +1,171 @@\n+#![feature(rustc_private)]\n+\n+//! This program implements a rustc driver that retrieves MIR bodies with\n+//! borrowck information. This cannot be done in a straightforward way because\n+//! `get_body_with_borrowck_facts`\u2013the function for retrieving a MIR body with\n+//! borrowck facts\u2013can panic if the body is stolen before it is invoked.\n+//! Therefore, the driver overrides `mir_borrowck` query (this is done in the\n+//! `config` callback), which retrieves the body that is about to be borrow\n+//! checked and stores it in a thread local `MIR_BODIES`. Then, `after_analysis`\n+//! callback triggers borrow checking of all MIR bodies by retrieving\n+//! `optimized_mir` and pulls out the MIR bodies with the borrowck information\n+//! from the thread local storage.\n+\n+extern crate rustc_driver;\n+extern crate rustc_hir;\n+extern crate rustc_interface;\n+extern crate rustc_middle;\n+extern crate rustc_mir;\n+extern crate rustc_session;\n+\n+use rustc_driver::Compilation;\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_interface::interface::Compiler;\n+use rustc_interface::{Config, Queries};\n+use rustc_middle::ty::query::query_values::mir_borrowck;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir::consumers::BodyWithBorrowckFacts;\n+use rustc_session::Session;\n+use std::cell::RefCell;\n+use std::collections::HashMap;\n+use std::thread_local;\n+\n+fn main() {\n+    let exit_code = rustc_driver::catch_with_exit_code(move || {\n+        let mut rustc_args: Vec<_> = std::env::args().collect();\n+        // We must pass -Zpolonius so that the borrowck information is computed.\n+        rustc_args.push(\"-Zpolonius\".to_owned());\n+        let mut callbacks = CompilerCalls::default();\n+        // Call the Rust compiler with our callbacks.\n+        rustc_driver::RunCompiler::new(&rustc_args, &mut callbacks).run()\n+    });\n+    std::process::exit(exit_code);\n+}\n+\n+#[derive(Default)]\n+pub struct CompilerCalls;\n+\n+impl rustc_driver::Callbacks for CompilerCalls {\n+\n+    // In this callback we override the mir_borrowck query.\n+    fn config(&mut self, config: &mut Config) {\n+        assert!(config.override_queries.is_none());\n+        config.override_queries = Some(override_queries);\n+    }\n+\n+    // In this callback we trigger borrow checking of all functions and obtain\n+    // the result.\n+    fn after_analysis<'tcx>(\n+        &mut self,\n+        compiler: &Compiler,\n+        queries: &'tcx Queries<'tcx>,\n+    ) -> Compilation {\n+        compiler.session().abort_if_errors();\n+        queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n+\n+            // Collect definition ids of MIR bodies.\n+            let hir = tcx.hir();\n+            let krate = hir.krate();\n+            let mut visitor = HirVisitor { bodies: Vec::new() };\n+            krate.visit_all_item_likes(&mut visitor);\n+\n+            // Trigger borrow checking of all bodies.\n+            for def_id in visitor.bodies {\n+                let _ = tcx.optimized_mir(def_id);\n+            }\n+\n+            // See what bodies were borrow checked.\n+            let mut bodies = get_bodies(tcx);\n+            bodies.sort_by(|(def_id1, _), (def_id2, _)| def_id1.cmp(def_id2));\n+            println!(\"Bodies retrieved for:\");\n+            for (def_id, body) in bodies {\n+                println!(\"{}\", def_id);\n+                assert!(body.input_facts.cfg_edge.len() > 0);\n+            }\n+        });\n+\n+        Compilation::Continue\n+    }\n+}\n+\n+fn override_queries(_session: &Session, local: &mut Providers, external: &mut Providers) {\n+    local.mir_borrowck = mir_borrowck;\n+    external.mir_borrowck = mir_borrowck;\n+}\n+\n+// Since mir_borrowck does not have access to any other state, we need to use a\n+// thread-local for storing the obtained MIR bodies.\n+//\n+// Note: We are using 'static lifetime here, which is in general unsound.\n+// Unfortunately, that is the only lifetime allowed here. Our use is safe\n+// because we cast it back to `'tcx` before using.\n+thread_local! {\n+    pub static MIR_BODIES:\n+        RefCell<HashMap<LocalDefId, BodyWithBorrowckFacts<'static>>> =\n+        RefCell::new(HashMap::new());\n+}\n+\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tcx> {\n+    let body_with_facts = rustc_mir::consumers::get_body_with_borrowck_facts(\n+        tcx,\n+        ty::WithOptConstParam::unknown(def_id),\n+    );\n+    // SAFETY: The reader casts the 'static lifetime to 'tcx before using it.\n+    let body_with_facts: BodyWithBorrowckFacts<'static> =\n+        unsafe { std::mem::transmute(body_with_facts) };\n+    MIR_BODIES.with(|state| {\n+        let mut map = state.borrow_mut();\n+        assert!(map.insert(def_id, body_with_facts).is_none());\n+    });\n+    let mut providers = Providers::default();\n+    rustc_mir::provide(&mut providers);\n+    let original_mir_borrowck = providers.mir_borrowck;\n+    original_mir_borrowck(tcx, def_id)\n+}\n+\n+/// Visitor that collects all body definition ids mentioned in the program.\n+struct HirVisitor {\n+    bodies: Vec<LocalDefId>,\n+}\n+\n+impl<'tcx> ItemLikeVisitor<'tcx> for HirVisitor {\n+    fn visit_item(&mut self, item: &rustc_hir::Item) {\n+        if let rustc_hir::ItemKind::Fn(..) = item.kind {\n+            self.bodies.push(item.def_id);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &rustc_hir::TraitItem) {\n+        if let rustc_hir::TraitItemKind::Fn(_, trait_fn) = &trait_item.kind {\n+            if let rustc_hir::TraitFn::Provided(_) = trait_fn {\n+                self.bodies.push(trait_item.def_id);\n+            }\n+        }\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &rustc_hir::ImplItem) {\n+        if let rustc_hir::ImplItemKind::Fn(..) = impl_item.kind {\n+            self.bodies.push(impl_item.def_id);\n+        }\n+    }\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &rustc_hir::ForeignItem) {}\n+}\n+\n+/// Pull MIR bodies stored in the thread-local.\n+fn get_bodies<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<(String, BodyWithBorrowckFacts<'tcx>)> {\n+    MIR_BODIES.with(|state| {\n+        let mut map = state.borrow_mut();\n+        map.drain()\n+            .map(|(def_id, body)| {\n+                let def_path = tcx.def_path(def_id.to_def_id());\n+                // SAFETY: For soundness we need to ensure that the bodies have\n+                // the same lifetime (`'tcx`), which they had before they were\n+                // stored in the thread local.\n+                (def_path.to_string_no_crate_verbose(), body)\n+            })\n+            .collect()\n+    })\n+}"}, {"sha": "e011622e6b2a3d7e7a5a0981725b055786995677", "filename": "src/test/run-make/obtain-borrowck/output.stdout", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Foutput.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Foutput.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Foutput.stdout?ref=b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "patch": "@@ -0,0 +1,8 @@\n+Bodies retrieved for:\n+::X::provided\n+::foo\n+::main\n+::main::{constant#0}\n+::{impl#0}::new\n+::{impl#1}::provided\n+::{impl#1}::required"}, {"sha": "f7b4b41feaf9740d3fed2f87755ff14a12ffb15a", "filename": "src/test/run-make/obtain-borrowck/test.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b913a4591a01424a2ff7fc47c8fd0e18ac0352e0/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobtain-borrowck%2Ftest.rs?ref=b913a4591a01424a2ff7fc47c8fd0e18ac0352e0", "patch": "@@ -0,0 +1,32 @@\n+trait X {\n+    fn provided(&self) -> usize {\n+        5\n+    }\n+    fn required(&self) -> u32;\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn new() -> Self {\n+        Self\n+    }\n+}\n+\n+impl X for Bar {\n+    fn provided(&self) -> usize {\n+        1\n+    }\n+    fn required(&self) -> u32 {\n+        7\n+    }\n+}\n+\n+const fn foo() -> usize {\n+    1\n+}\n+\n+fn main() {\n+    let bar: [Bar; foo()] = [Bar::new()];\n+    assert_eq!(bar[0].provided(), foo());\n+}"}]}