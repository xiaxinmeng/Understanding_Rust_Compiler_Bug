{"sha": "2808460e0f8082ac2724c9809d27990ca9cfefd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MDg0NjBlMGY4MDgyYWMyNzI0Yzk4MDlkMjc5OTBjYTljZmVmZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T14:18:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T14:18:13Z"}, "message": "Auto merge of #51678 - Zoxc:combine-lints, r=estebank\n\nCombine all builtin late lints", "tree": {"sha": "952ec94d3c3f0785e7f077f98773c716180c52ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952ec94d3c3f0785e7f077f98773c716180c52ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2808460e0f8082ac2724c9809d27990ca9cfefd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2808460e0f8082ac2724c9809d27990ca9cfefd8", "html_url": "https://github.com/rust-lang/rust/commit/2808460e0f8082ac2724c9809d27990ca9cfefd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2808460e0f8082ac2724c9809d27990ca9cfefd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764232cb2a8407c72b9fea68835e686240e30ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/764232cb2a8407c72b9fea68835e686240e30ef3", "html_url": "https://github.com/rust-lang/rust/commit/764232cb2a8407c72b9fea68835e686240e30ef3"}, {"sha": "c5ecc6fefbecb7fcc1393d578c0b4a5aa06dd2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ecc6fefbecb7fcc1393d578c0b4a5aa06dd2e2", "html_url": "https://github.com/rust-lang/rust/commit/c5ecc6fefbecb7fcc1393d578c0b4a5aa06dd2e2"}], "stats": {"total": 316, "additions": 177, "deletions": 139}, "files": [{"sha": "c9874f510f7314653e795c09d2e8e88ec88fa912", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=2808460e0f8082ac2724c9809d27990ca9cfefd8", "patch": "@@ -178,10 +178,10 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         from_plugin: bool,\n                                         pass: &Box<P>) {\n-        for &lint in pass.get_lints() {\n-            self.lints.push((*lint, from_plugin));\n+        for lint in pass.get_lints() {\n+            self.lints.push((lint, from_plugin));\n \n-            let id = LintId::of(*lint);\n+            let id = LintId::of(lint);\n             if self.by_name.insert(lint.name_lower(), Id(id)).is_some() {\n                 let msg = format!(\"duplicate specification of lint {}\", lint.name_lower());\n                 match (sess, from_plugin) {"}, {"sha": "bff596e21e53abd5cba6fcc8082241d97654f2a4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 136, "deletions": 86, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2808460e0f8082ac2724c9809d27990ca9cfefd8", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::sync::{self, Lrc};\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n-use hir::intravisit::{self, FnKind};\n+use hir::intravisit;\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n use session::{Session, DiagnosticMessageId};\n@@ -123,12 +123,11 @@ macro_rules! declare_lint {\n #[macro_export]\n macro_rules! lint_array {\n     ($( $lint:expr ),* $(,)?) => {{\n-         static ARRAY: LintArray = &[ $( &$lint ),* ];\n-         ARRAY\n+        vec![$($lint),*]\n     }}\n }\n \n-pub type LintArray = &'static [&'static &'static Lint];\n+pub type LintArray = Vec<&'static Lint>;\n \n pub trait LintPass {\n     /// Get descriptions of the lints this `LintPass` object can emit.\n@@ -140,6 +139,80 @@ pub trait LintPass {\n     fn get_lints(&self) -> LintArray;\n }\n \n+#[macro_export]\n+macro_rules! late_lint_methods {\n+    ($macro:path, $args:tt, [$hir:tt]) => (\n+        $macro!($args, [$hir], [\n+            fn check_body(a: &$hir hir::Body);\n+            fn check_body_post(a: &$hir hir::Body);\n+            fn check_name(a: Span, b: ast::Name);\n+            fn check_crate(a: &$hir hir::Crate);\n+            fn check_crate_post(a: &$hir hir::Crate);\n+            fn check_mod(a: &$hir hir::Mod, b: Span, c: ast::NodeId);\n+            fn check_mod_post(a: &$hir hir::Mod, b: Span, c: ast::NodeId);\n+            fn check_foreign_item(a: &$hir hir::ForeignItem);\n+            fn check_foreign_item_post(a: &$hir hir::ForeignItem);\n+            fn check_item(a: &$hir hir::Item);\n+            fn check_item_post(a: &$hir hir::Item);\n+            fn check_local(a: &$hir hir::Local);\n+            fn check_block(a: &$hir hir::Block);\n+            fn check_block_post(a: &$hir hir::Block);\n+            fn check_stmt(a: &$hir hir::Stmt);\n+            fn check_arm(a: &$hir hir::Arm);\n+            fn check_pat(a: &$hir hir::Pat);\n+            fn check_decl(a: &$hir hir::Decl);\n+            fn check_expr(a: &$hir hir::Expr);\n+            fn check_expr_post(a: &$hir hir::Expr);\n+            fn check_ty(a: &$hir hir::Ty);\n+            fn check_generic_param(a: &$hir hir::GenericParam);\n+            fn check_generics(a: &$hir hir::Generics);\n+            fn check_where_predicate(a: &$hir hir::WherePredicate);\n+            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef, b: hir::TraitBoundModifier);\n+            fn check_fn(\n+                a: hir::intravisit::FnKind<$hir>,\n+                b: &$hir hir::FnDecl,\n+                c: &$hir hir::Body,\n+                d: Span,\n+                e: ast::NodeId);\n+            fn check_fn_post(\n+                a: hir::intravisit::FnKind<$hir>,\n+                b: &$hir hir::FnDecl,\n+                c: &$hir hir::Body,\n+                d: Span,\n+                e: ast::NodeId\n+            );\n+            fn check_trait_item(a: &$hir hir::TraitItem);\n+            fn check_trait_item_post(a: &$hir hir::TraitItem);\n+            fn check_impl_item(a: &$hir hir::ImplItem);\n+            fn check_impl_item_post(a: &$hir hir::ImplItem);\n+            fn check_struct_def(\n+                a: &$hir hir::VariantData,\n+                b: ast::Name,\n+                c: &$hir hir::Generics,\n+                d: ast::NodeId\n+            );\n+            fn check_struct_def_post(\n+                a: &$hir hir::VariantData,\n+                b: ast::Name,\n+                c: &$hir hir::Generics,\n+                d: ast::NodeId\n+            );\n+            fn check_struct_field(a: &$hir hir::StructField);\n+            fn check_variant(a: &$hir hir::Variant, b: &$hir hir::Generics);\n+            fn check_variant_post(a: &$hir hir::Variant, b: &$hir hir::Generics);\n+            fn check_lifetime(a: &$hir hir::Lifetime);\n+            fn check_path(a: &$hir hir::Path, b: ast::NodeId);\n+            fn check_attribute(a: &$hir ast::Attribute);\n+\n+            /// Called when entering a syntax node that can have lint attributes such\n+            /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n+            fn enter_lint_attrs(a: &$hir [ast::Attribute]);\n+\n+            /// Counterpart to `enter_lint_attrs`.\n+            fn exit_lint_attrs(a: &$hir [ast::Attribute]);\n+        ]);\n+    )\n+}\n \n /// Trait for types providing lint checks.\n ///\n@@ -149,90 +222,67 @@ pub trait LintPass {\n //\n // FIXME: eliminate the duplication with `Visitor`. But this also\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n-pub trait LateLintPass<'a, 'tcx>: LintPass {\n-    fn check_body(&mut self, _: &LateContext, _: &'tcx hir::Body) { }\n-    fn check_body_post(&mut self, _: &LateContext, _: &'tcx hir::Body) { }\n-    fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }\n-    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }\n-    fn check_crate_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }\n-    fn check_mod(&mut self,\n-                 _: &LateContext<'a, 'tcx>,\n-                 _: &'tcx hir::Mod,\n-                 _: Span,\n-                 _: ast::NodeId) { }\n-    fn check_mod_post(&mut self,\n-                      _: &LateContext<'a, 'tcx>,\n-                      _: &'tcx hir::Mod,\n-                      _: Span,\n-                      _: ast::NodeId) { }\n-    fn check_foreign_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }\n-    fn check_foreign_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }\n-    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }\n-    fn check_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }\n-    fn check_local(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Local) { }\n-    fn check_block(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }\n-    fn check_block_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }\n-    fn check_stmt(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Stmt) { }\n-    fn check_arm(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Arm) { }\n-    fn check_pat(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Pat) { }\n-    fn check_decl(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Decl) { }\n-    fn check_expr(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }\n-    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }\n-    fn check_ty(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Ty) { }\n-    fn check_generic_param(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::GenericParam) { }\n-    fn check_generics(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Generics) { }\n-    fn check_where_predicate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::WherePredicate) { }\n-    fn check_poly_trait_ref(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::PolyTraitRef,\n-                            _: hir::TraitBoundModifier) { }\n-    fn check_fn(&mut self,\n-                _: &LateContext<'a, 'tcx>,\n-                _: FnKind<'tcx>,\n-                _: &'tcx hir::FnDecl,\n-                _: &'tcx hir::Body,\n-                _: Span,\n-                _: ast::NodeId) { }\n-    fn check_fn_post(&mut self,\n-                     _: &LateContext<'a, 'tcx>,\n-                     _: FnKind<'tcx>,\n-                     _: &'tcx hir::FnDecl,\n-                     _: &'tcx hir::Body,\n-                     _: Span,\n-                     _: ast::NodeId) { }\n-    fn check_trait_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }\n-    fn check_trait_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }\n-    fn check_impl_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }\n-    fn check_impl_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }\n-    fn check_struct_def(&mut self,\n-                        _: &LateContext<'a, 'tcx>,\n-                        _: &'tcx hir::VariantData,\n-                        _: ast::Name,\n-                        _: &'tcx hir::Generics,\n-                        _: ast::NodeId) { }\n-    fn check_struct_def_post(&mut self,\n-                             _: &LateContext<'a, 'tcx>,\n-                             _: &'tcx hir::VariantData,\n-                             _: ast::Name,\n-                             _: &'tcx hir::Generics,\n-                             _: ast::NodeId) { }\n-    fn check_struct_field(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::StructField) { }\n-    fn check_variant(&mut self,\n-                     _: &LateContext<'a, 'tcx>,\n-                     _: &'tcx hir::Variant,\n-                     _: &'tcx hir::Generics) { }\n-    fn check_variant_post(&mut self,\n-                          _: &LateContext<'a, 'tcx>,\n-                          _: &'tcx hir::Variant,\n-                          _: &'tcx hir::Generics) { }\n-    fn check_lifetime(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Lifetime) { }\n-    fn check_path(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Path, _: ast::NodeId) { }\n-    fn check_attribute(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx ast::Attribute) { }\n \n-    /// Called when entering a syntax node that can have lint attributes such\n-    /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-    fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }\n+macro_rules! expand_lint_pass_methods {\n+    ($context:ty, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n+        $(#[inline(always)] fn $name(&mut self, $context, $(_: $arg),*) {})*\n+    )\n+}\n \n-    /// Counterpart to `enter_lint_attrs`.\n-    fn exit_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }\n+macro_rules! declare_late_lint_pass {\n+    ([], [$hir:tt], [$($methods:tt)*]) => (\n+        pub trait LateLintPass<'a, $hir>: LintPass {\n+            expand_lint_pass_methods!(&LateContext<'a, $hir>, [$($methods)*]);\n+        }\n+    )\n+}\n+\n+late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n+\n+#[macro_export]\n+macro_rules! expand_combined_late_lint_pass_method {\n+    ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n+        $($self.$passes.$name $params;)*\n+    })\n+}\n+\n+#[macro_export]\n+macro_rules! expand_combined_late_lint_pass_methods {\n+    ($passes:tt, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n+        $(fn $name(&mut self, context: &LateContext<'a, 'tcx>, $($param: $arg),*) {\n+            expand_combined_late_lint_pass_method!($passes, self, $name, (context, $($param),*));\n+        })*\n+    )\n+}\n+\n+#[macro_export]\n+macro_rules! declare_combined_late_lint_pass {\n+    ([$name:ident, [$($passes:ident: $constructor:expr,)*]], [$hir:tt], $methods:tt) => (\n+        #[allow(non_snake_case)]\n+        struct $name {\n+            $($passes: $passes,)*\n+        }\n+\n+        impl $name {\n+            fn new() -> Self {\n+                Self {\n+                    $($passes: $constructor,)*\n+                }\n+            }\n+        }\n+\n+        impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $name {\n+            expand_combined_late_lint_pass_methods!([$($passes),*], $methods);\n+        }\n+\n+        impl LintPass for $name {\n+            fn get_lints(&self) -> LintArray {\n+                let mut lints = Vec::new();\n+                $(lints.extend_from_slice(&self.$passes.get_lints());)*\n+                lints\n+            }\n+        }\n+    )\n }\n \n pub trait EarlyLintPass: LintPass {"}, {"sha": "11bca9b4a2d0b00d0c073612ab5f5900ab020075", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 36, "deletions": 48, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2808460e0f8082ac2724c9809d27990ca9cfefd8", "patch": "@@ -41,9 +41,14 @@ extern crate rustc_target;\n extern crate syntax_pos;\n \n use rustc::lint;\n+use rustc::lint::{LateContext, LateLintPass, LintPass, LintArray};\n use rustc::lint::builtin::{BARE_TRAIT_OBJECTS, ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE};\n use rustc::session;\n use rustc::util;\n+use rustc::hir;\n+\n+use syntax::ast;\n+use syntax_pos::Span;\n \n use session::Session;\n use syntax::edition::Edition;\n@@ -67,14 +72,6 @@ pub use builtin::SoftLints;\n /// defined in this crate and the ones defined in\n /// `rustc::lint::builtin`).\n pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n-    macro_rules! add_builtin {\n-        ($sess:ident, $($name:ident),*,) => (\n-            {$(\n-                store.register_late_pass($sess, false, box $name);\n-                )*}\n-            )\n-    }\n-\n     macro_rules! add_early_builtin {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n@@ -83,14 +80,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n-    macro_rules! add_builtin_with_new {\n-        ($sess:ident, $($name:ident),*,) => (\n-            {$(\n-                store.register_late_pass($sess, false, box $name::new());\n-                )*}\n-            )\n-    }\n-\n     macro_rules! add_early_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n@@ -117,39 +106,38 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                                 DeprecatedAttr,\n                                 );\n \n-    add_builtin!(sess,\n-                 HardwiredLints,\n-                 WhileTrue,\n-                 ImproperCTypes,\n-                 VariantSizeDifferences,\n-                 BoxPointers,\n-                 UnusedAttributes,\n-                 PathStatements,\n-                 UnusedResults,\n-                 NonCamelCaseTypes,\n-                 NonSnakeCase,\n-                 NonUpperCaseGlobals,\n-                 NonShorthandFieldPatterns,\n-                 UnsafeCode,\n-                 UnusedAllocation,\n-                 MissingCopyImplementations,\n-                 UnstableFeatures,\n-                 UnconditionalRecursion,\n-                 InvalidNoMangleItems,\n-                 PluginAsLibrary,\n-                 MutableTransmutes,\n-                 UnionsWithDropFields,\n-                 UnreachablePub,\n-                 TypeAliasBounds,\n-                 UnusedBrokenConst,\n-                 TrivialConstraints,\n-                 );\n+    late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedLateLintPass, [\n+        HardwiredLints: HardwiredLints,\n+        WhileTrue: WhileTrue,\n+        ImproperCTypes: ImproperCTypes,\n+        VariantSizeDifferences: VariantSizeDifferences,\n+        BoxPointers: BoxPointers,\n+        UnusedAttributes: UnusedAttributes,\n+        PathStatements: PathStatements,\n+        UnusedResults: UnusedResults,\n+        NonCamelCaseTypes: NonCamelCaseTypes,\n+        NonSnakeCase: NonSnakeCase,\n+        NonUpperCaseGlobals: NonUpperCaseGlobals,\n+        NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n+        UnsafeCode: UnsafeCode,\n+        UnusedAllocation: UnusedAllocation,\n+        MissingCopyImplementations: MissingCopyImplementations,\n+        UnstableFeatures: UnstableFeatures,\n+        UnconditionalRecursion: UnconditionalRecursion,\n+        InvalidNoMangleItems: InvalidNoMangleItems,\n+        PluginAsLibrary: PluginAsLibrary,\n+        MutableTransmutes: MutableTransmutes,\n+        UnionsWithDropFields: UnionsWithDropFields,\n+        UnreachablePub: UnreachablePub,\n+        TypeAliasBounds: TypeAliasBounds,\n+        UnusedBrokenConst: UnusedBrokenConst,\n+        TrivialConstraints: TrivialConstraints,\n+        TypeLimits: TypeLimits::new(),\n+        MissingDoc: MissingDoc::new(),\n+        MissingDebugImplementations: MissingDebugImplementations::new(),\n+    ]], ['tcx]);\n \n-    add_builtin_with_new!(sess,\n-                          TypeLimits,\n-                          MissingDoc,\n-                          MissingDebugImplementations,\n-                          );\n+    store.register_late_pass(sess, false, box BuiltinCombinedLateLintPass::new());\n \n     add_lint_group!(sess,\n                     \"bad_style\","}, {"sha": "ddc9bdb384c0b359812661b4ac37058adeae0578", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808460e0f8082ac2724c9809d27990ca9cfefd8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2808460e0f8082ac2724c9809d27990ca9cfefd8", "patch": "@@ -190,8 +190,8 @@ pub fn run_core(search_paths: SearchPaths,\n     let intra_link_resolution_failure_name = lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE.name;\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let lints = lint::builtin::HardwiredLints.get_lints()\n-                    .iter()\n-                    .chain(rustc_lint::SoftLints.get_lints())\n+                    .into_iter()\n+                    .chain(rustc_lint::SoftLints.get_lints().into_iter())\n                     .filter_map(|lint| {\n                         if lint.name == warnings_lint_name ||\n                            lint.name == intra_link_resolution_failure_name {"}]}