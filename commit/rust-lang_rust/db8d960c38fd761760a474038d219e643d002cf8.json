{"sha": "db8d960c38fd761760a474038d219e643d002cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOGQ5NjBjMzhmZDc2MTc2MGE0NzQwMzhkMjE5ZTY0M2QwMDJjZjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-06T07:41:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-06T23:58:23Z"}, "message": "1.0.0-alpha release notes", "tree": {"sha": "a09eb055953df6599747e2deaeb70294d52fb6b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09eb055953df6599747e2deaeb70294d52fb6b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8d960c38fd761760a474038d219e643d002cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8d960c38fd761760a474038d219e643d002cf8", "html_url": "https://github.com/rust-lang/rust/commit/db8d960c38fd761760a474038d219e643d002cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8d960c38fd761760a474038d219e643d002cf8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93190b364b2537b5ab7922cad79df6323dbab8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/93190b364b2537b5ab7922cad79df6323dbab8a9", "html_url": "https://github.com/rust-lang/rust/commit/93190b364b2537b5ab7922cad79df6323dbab8a9"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "d2209608fd597d922ad9a869715463b9a03d5898", "filename": "RELEASES.md", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/db8d960c38fd761760a474038d219e643d002cf8/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/db8d960c38fd761760a474038d219e643d002cf8/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=db8d960c38fd761760a474038d219e643d002cf8", "patch": "@@ -1,3 +1,166 @@\n+Version 1.0.0-alpha (January 2015)\n+----------------------------------\n+\n+  * ~2300 changes, numerous bugfixes\n+\n+  * Highlights\n+\n+    * The language itself is considered feature complete for 1.0,\n+      though there is a significant amount of cleanup and bugfixes\n+      remaining.\n+    * Nearly 50% of the public API surface of the standard library has\n+      been declared 'stable'. Those interfaces will not change.\n+    * Most crates that are not `std` have been moved out of the Rust\n+      distribution into the Cargo ecosystem so they can evolve\n+      separately and don't need to be stabilized as quickly, including\n+      'time', 'getopts', 'num', 'regex', and 'term'.\n+    * Documentation continues to be expanded with more guides, more\n+      API coverage and more examples.\n+    * All official Rust binary installers now come with [Cargo], the\n+      Rust package manager.\n+\n+* Language\n+\n+    * Closures have been [completely redesigned][unboxed] to be\n+      implemented in terms of traits, can now be used as generic type\n+      bounds and thus monomorphized and inlined, or via an opaque\n+      pointer (boxed) as in the old system. The new system is often\n+      referred to as 'unboxed' closures.\n+    * Enum variants are [namespaced by their type names][enum].\n+    * [`where` clauses][where] provide a more versatile and attractive\n+      syntax for specifying generic bounds, though the previous syntax\n+      remains valid.\n+    * Rust again picks a [fallback] (either i32 or f64) for uninferred\n+      numeric types.\n+    * Rust [no longer has a runtime][rt] of any description, and only\n+      supports OS threads, not green threads.\n+    * At long last, Rust has been overhauled for 'dynamically-sized\n+      types' ([DST]), which integrates 'fat pointers' (object types,\n+      arrays, and `str`) more deeply into the type system, making it\n+      more consistent.\n+    * Rust now has a general [range syntax][range], `i..j`, `i..`, and\n+      `..j` that produce range types and which, when combined with the\n+      `Index` operator and multitispatch, leads to a convenient slice\n+      notation, `[i..j]`.\n+    * The new range syntax revealed an ambiguity in the fixed-length\n+      array syntax, so now fixed length arrays [are written `[T;\n+      N]`][arrays].\n+    * The `Copy` trait is no longer implemented automatically. Unsafe\n+      pointers no longer implement `Sync` and `Send` so types\n+      containing them don't automatically either. `Sync` and `Send`\n+      are now 'unsafe traits' so one can \"forcibly\" implement them via\n+      `unsafe impl` if a type confirms to the requirements for them\n+      even though the internals do not (e.g. structs containing unsafe\n+      pointers like `Arc`). These changes are intended to prevent some\n+      footguns and are collectively known as [opt-in built-in\n+      traits][oibit] (though `Sync` and `Share` will soon become pure\n+      library types unknown to the compiler).\n+    * Operator traits now take their operands [by value][ops], and\n+      comparison traits can use multidispatch to compare one type\n+      against multiple other types, allowing e.g. `String` to be\n+      compared with `&str`.\n+    * `if let` and `while let` are no longer feature-gated.\n+    * Rust has adopted a more [uniform syntax for escaping unicode\n+      characters][unicode].\n+    * `macro_rules!` [has been declared stable][mac]. Though it is a\n+      flawed system it is sufficiently popular that it must be usable\n+      for 1.0. Effort has gone into future-proofing it in ways that\n+      will allow other macro systems to be developed in parallel, and\n+      won't otherwise impact the evolution of the language.\n+    * The prelude has been [pared back significantly][prelude] such\n+      that it is the minimum necessary to support the most pervasive\n+      code patterns, and through [generalized where clauses][where]\n+      many of the prelude extension traits have been consolidated.\n+    * Rust's rudimentary reflection [has been removed][refl], as it\n+      incurred too much code generation for little benefit.\n+    * [Struct variants][structvars] are no longer feature-gated.\n+    * Trait bounds can be [polymorphic over lifetimes][hrtb]. Also\n+      known as 'higher-ranked trait bounds', this crucially allows\n+      unboxed closures to work.\n+    * Macros invocations surrounded by parens or square brackets and\n+      not terminated by a semicolon are [parsed as\n+      expressions][macros], which makes expressions like `vec![1i32,\n+      2, 3].len()` work as expected.\n+    * Trait objects now implement their traits automatically.\n+    * Automatically deriving traits is now done with `#[derive(...)]`\n+      not `#[deriving(...)]` for [consistency with other naming\n+      conventions][derive].\n+    * Importing the containing module at the same time as items it\n+      contains is [now done with `self` instead of `mod`][self], as in\n+      use `foo::{self, bar}`\n+\n+* Libraries\n+\n+    * A [series][coll1] of [efforts][coll2] to establish\n+      [conventions][coll3] for collections types has resulted in API\n+      improvements throughout the standard library.\n+    * New [APIs for error handling][err] provide ergonomic interop\n+      between error types, and [new conventions][err-conv] describe\n+      more clearly the recommended error handling strategies in Rust.\n+    * The `fail!` macro has been renamed to [`panic!`][panic] so that\n+      it is easier to discuss failure in the context of error handling\n+      without making clarifications as to whether you are referring to\n+      the 'fail' macro or failure more generally.\n+    * On Linux, `OsRng` prefers the new, more reliable `getrandom'\n+      syscall when available.\n+    * The 'serialize' crate has been renamed 'rustc-serialize' and\n+      moved out of the distribution to Cargo. Although it is widely\n+      used now, it is expected to be superceded in the near future.\n+    * The `Show` formatter, typically implemented with\n+      `#[derive(Show)]` is [now requested with the `{:?}`\n+      specifier][show] and is intended for use by all types, for uses\n+      such as `println!` debugging. The new `String` formatter must be\n+      implemented by hand, uses the `{}` specifier, and is intended\n+      for full-fidelity conversions of things that can logically be\n+      represented as strings.\n+\n+* Tooling\n+\n+    * [Flexible target specification][flex] allows rustc's code\n+      generation to be configured to support otherwise-unsupported\n+      platforms.\n+    * Rust comes with rust-gdb and rust-lldb scripts that launch their\n+      respective debuggers with Rust-appropriate pretty-printing.\n+    * The Windows installation of Rust is distributed with the the\n+      MinGW components currently required to link binaries on that\n+      platform.\n+\n+* Misc\n+\n+    * Nullable enum optimizations have been extended to more types so\n+      that e.g. `Option<Vec<T>>` and `Option<String>` take up no more\n+      space than the inner types themselves.\n+    * Work has begun on supporting AArch64.\n+\n+[Cargo]: https://crates.io\n+[unboxed]: https://github.com/rust-lang/rfcs/blob/master/text/0114-closures.md\n+[enum]: https://github.com/rust-lang/rfcs/blob/master/text/0390-enum-namespacing.md\n+[flex]: https://github.com/rust-lang/rfcs/blob/master/text/0131-target-specification.md\n+[err]: https://github.com/rust-lang/rfcs/blob/master/text/0201-error-chaining.md\n+[err-conv]: https://github.com/rust-lang/rfcs/blob/master/text/0236-error-conventions.md\n+[rt]: https://github.com/rust-lang/rfcs/blob/master/text/0230-remove-runtime.md\n+[mac]: https://github.com/rust-lang/rfcs/blob/master/text/0453-macro-reform.md\n+[DST]: http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/\n+[coll1]: https://github.com/rust-lang/rfcs/blob/master/text/0235-collections-conventions.md\n+[coll2]: https://github.com/rust-lang/rfcs/blob/master/text/0509-collections-reform-part-2.md\n+[coll3]: https://github.com/rust-lang/rfcs/blob/master/text/0216-collection-views.md\n+[ops]: https://github.com/rust-lang/rfcs/blob/master/text/0439-cmp-ops-reform.md\n+[prelude]: https://github.com/rust-lang/rfcs/blob/master/text/0503-prelude-stabilization.md\n+[where]: https://github.com/rust-lang/rfcs/blob/master/text/0135-where.md\n+[refl]: https://github.com/rust-lang/rfcs/blob/master/text/0379-remove-reflection.md\n+[panic]: https://github.com/rust-lang/rfcs/blob/master/text/0221-panic.md\n+[structvars]: https://github.com/rust-lang/rfcs/blob/master/text/0418-struct-variants.md\n+[hrtb]: https://github.com/rust-lang/rfcs/blob/master/text/0387-higher-ranked-trait-bounds.md\n+[unicode]: https://github.com/rust-lang/rfcs/blob/master/text/0446-es6-unicode-escapes.md\n+[oibit]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n+[macros]: https://github.com/rust-lang/rfcs/blob/master/text/0378-expr-macros.md\n+[range]: https://github.com/rust-lang/rfcs/blob/master/text/0439-cmp-ops-reform.md#indexing-and-slicing\n+[arrays]: https://github.com/rust-lang/rfcs/blob/master/text/0520-new-array-repeat-syntax.md\n+[show]: https://github.com/rust-lang/rfcs/blob/master/text/0504-show-stabilization.md\n+[derive]: https://github.com/rust-lang/rfcs/blob/master/text/0534-deriving2derive.md\n+[self]: https://github.com/rust-lang/rfcs/blob/master/text/0532-self-in-use.md\n+[fallback]: https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md\n+\n Version 0.12.0 (October 2014)\n -----------------------------\n "}]}