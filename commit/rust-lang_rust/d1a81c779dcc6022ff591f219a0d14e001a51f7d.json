{"sha": "d1a81c779dcc6022ff591f219a0d14e001a51f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTgxYzc3OWRjYzYwMjJmZjU5MWYyMTlhMGQxNGUwMDFhNTFmN2Q=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-15T08:48:10Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-19T15:03:21Z"}, "message": "Split query stats into its own file", "tree": {"sha": "5c0a0f0eabdfd1b3a2725134f96b782bebaf7234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0a0f0eabdfd1b3a2725134f96b782bebaf7234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a81c779dcc6022ff591f219a0d14e001a51f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a81c779dcc6022ff591f219a0d14e001a51f7d", "html_url": "https://github.com/rust-lang/rust/commit/d1a81c779dcc6022ff591f219a0d14e001a51f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a81c779dcc6022ff591f219a0d14e001a51f7d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2ad75a60b599cab49b57000660b884e8fb27dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2ad75a60b599cab49b57000660b884e8fb27dd", "html_url": "https://github.com/rust-lang/rust/commit/8a2ad75a60b599cab49b57000660b884e8fb27dd"}], "stats": {"total": 207, "additions": 108, "deletions": 99}, "files": [{"sha": "540344a11edf1aeff94574c9b0d5386e9e297d60", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d1a81c779dcc6022ff591f219a0d14e001a51f7d", "patch": "@@ -52,7 +52,6 @@ use rustc_target::spec::PanicStrategy;\n use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n-use std::any::type_name;\n use std::borrow::Cow;\n use std::convert::TryFrom;\n use std::ops::Deref;\n@@ -64,6 +63,9 @@ mod plumbing;\n use self::plumbing::*;\n pub use self::plumbing::{force_from_dep_node, CycleError};\n \n+mod stats;\n+pub use self::stats::print_stats;\n+\n mod job;\n #[cfg(parallel_compiler)]\n pub use self::job::handle_deadlock;"}, {"sha": "c724209f8786263042567ca0bedab6763df267f6", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d1a81c779dcc6022ff591f219a0d14e001a51f7d", "patch": "@@ -883,101 +883,6 @@ macro_rules! define_queries_inner {\n \n                 Some(jobs)\n             }\n-\n-            pub fn print_stats(&self) {\n-                let mut queries = Vec::new();\n-\n-                #[derive(Clone)]\n-                struct QueryStats {\n-                    name: &'static str,\n-                    cache_hits: usize,\n-                    key_size: usize,\n-                    key_type: &'static str,\n-                    value_size: usize,\n-                    value_type: &'static str,\n-                    entry_count: usize,\n-                }\n-\n-                fn stats<'tcx, Q: QueryAccessors<'tcx>>(\n-                    name: &'static str,\n-                    map: &QueryState<'tcx, Q>,\n-                ) -> QueryStats {\n-                    QueryStats {\n-                        name,\n-                        #[cfg(debug_assertions)]\n-                        cache_hits: map.cache_hits,\n-                        #[cfg(not(debug_assertions))]\n-                        cache_hits: 0,\n-                        key_size: mem::size_of::<Q::Key>(),\n-                        key_type: type_name::<Q::Key>(),\n-                        value_size: mem::size_of::<Q::Value>(),\n-                        value_type: type_name::<Q::Value>(),\n-                        entry_count: map.iter_results(|results| results.count()),\n-                    }\n-                }\n-\n-                $(\n-                    queries.push(stats::<queries::$name<'_>>(\n-                        stringify!($name),\n-                        &self.$name,\n-                    ));\n-                )*\n-\n-                if cfg!(debug_assertions) {\n-                    let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n-                    let results: usize = queries.iter().map(|s| s.entry_count).sum();\n-                    println!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n-                }\n-\n-                let mut query_key_sizes = queries.clone();\n-                query_key_sizes.sort_by_key(|q| q.key_size);\n-                println!(\"\\nLarge query keys:\");\n-                for q in query_key_sizes.iter().rev()\n-                                        .filter(|q| q.key_size > 8) {\n-                    println!(\n-                        \"   {} - {} x {} - {}\",\n-                        q.name,\n-                        q.key_size,\n-                        q.entry_count,\n-                        q.key_type\n-                    );\n-                }\n-\n-                let mut query_value_sizes = queries.clone();\n-                query_value_sizes.sort_by_key(|q| q.value_size);\n-                println!(\"\\nLarge query values:\");\n-                for q in query_value_sizes.iter().rev()\n-                                          .filter(|q| q.value_size > 8) {\n-                    println!(\n-                        \"   {} - {} x {} - {}\",\n-                        q.name,\n-                        q.value_size,\n-                        q.entry_count,\n-                        q.value_type\n-                    );\n-                }\n-\n-                if cfg!(debug_assertions) {\n-                    let mut query_cache_hits = queries.clone();\n-                    query_cache_hits.sort_by_key(|q| q.cache_hits);\n-                    println!(\"\\nQuery cache hits:\");\n-                    for q in query_cache_hits.iter().rev() {\n-                        println!(\n-                            \"   {} - {} ({}%)\",\n-                            q.name,\n-                            q.cache_hits,\n-                            q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n-                        );\n-                    }\n-                }\n-\n-                let mut query_value_count = queries.clone();\n-                query_value_count.sort_by_key(|q| q.entry_count);\n-                println!(\"\\nQuery value count:\");\n-                for q in query_value_count.iter().rev() {\n-                    println!(\"   {} - {}\", q.name, q.entry_count);\n-                }\n-            }\n         }\n \n         #[allow(nonstandard_style)]"}, {"sha": "0c775e5f7284db3ed1bdf0eba68ddb6225dea9c0", "filename": "src/librustc/ty/query/stats.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs?ref=d1a81c779dcc6022ff591f219a0d14e001a51f7d", "patch": "@@ -0,0 +1,102 @@\n+use crate::ty::query::config::QueryAccessors;\n+use crate::ty::query::plumbing::QueryState;\n+use crate::ty::query::queries;\n+use crate::ty::TyCtxt;\n+\n+use std::any::type_name;\n+use std::mem;\n+\n+#[derive(Clone)]\n+struct QueryStats {\n+    name: &'static str,\n+    cache_hits: usize,\n+    key_size: usize,\n+    key_type: &'static str,\n+    value_size: usize,\n+    value_type: &'static str,\n+    entry_count: usize,\n+}\n+\n+fn stats<'tcx, Q: QueryAccessors<'tcx>>(\n+    name: &'static str,\n+    map: &QueryState<'tcx, Q>,\n+) -> QueryStats {\n+    QueryStats {\n+        name,\n+        #[cfg(debug_assertions)]\n+        cache_hits: map.cache_hits,\n+        #[cfg(not(debug_assertions))]\n+        cache_hits: 0,\n+        key_size: mem::size_of::<Q::Key>(),\n+        key_type: type_name::<Q::Key>(),\n+        value_size: mem::size_of::<Q::Value>(),\n+        value_type: type_name::<Q::Value>(),\n+        entry_count: map.iter_results(|results| results.count()),\n+    }\n+}\n+\n+pub fn print_stats(tcx: TyCtxt<'_>) {\n+    let queries = query_stats(tcx);\n+\n+    if cfg!(debug_assertions) {\n+        let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n+        let results: usize = queries.iter().map(|s| s.entry_count).sum();\n+        println!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n+    }\n+\n+    let mut query_key_sizes = queries.clone();\n+    query_key_sizes.sort_by_key(|q| q.key_size);\n+    println!(\"\\nLarge query keys:\");\n+    for q in query_key_sizes.iter().rev().filter(|q| q.key_size > 8) {\n+        println!(\"   {} - {} x {} - {}\", q.name, q.key_size, q.entry_count, q.key_type);\n+    }\n+\n+    let mut query_value_sizes = queries.clone();\n+    query_value_sizes.sort_by_key(|q| q.value_size);\n+    println!(\"\\nLarge query values:\");\n+    for q in query_value_sizes.iter().rev().filter(|q| q.value_size > 8) {\n+        println!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n+    }\n+\n+    if cfg!(debug_assertions) {\n+        let mut query_cache_hits = queries.clone();\n+        query_cache_hits.sort_by_key(|q| q.cache_hits);\n+        println!(\"\\nQuery cache hits:\");\n+        for q in query_cache_hits.iter().rev() {\n+            println!(\n+                \"   {} - {} ({}%)\",\n+                q.name,\n+                q.cache_hits,\n+                q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n+            );\n+        }\n+    }\n+\n+    let mut query_value_count = queries.clone();\n+    query_value_count.sort_by_key(|q| q.entry_count);\n+    println!(\"\\nQuery value count:\");\n+    for q in query_value_count.iter().rev() {\n+        println!(\"   {} - {}\", q.name, q.entry_count);\n+    }\n+}\n+\n+macro_rules! print_stats {\n+    (<$tcx:tt> $($category:tt {\n+        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*\n+    },)*) => {\n+        fn query_stats(tcx: TyCtxt<'_>) -> Vec<QueryStats> {\n+            let mut queries = Vec::new();\n+\n+            $($(\n+                queries.push(stats::<queries::$name<'_>>(\n+                    stringify!($name),\n+                    &tcx.queries.$name,\n+                ));\n+            )*)*\n+\n+            queries\n+        }\n+    }\n+}\n+\n+rustc_query_append! { [print_stats!][<'tcx>] }"}, {"sha": "96a2ac08f2c49c7e5a5d553665ec614c4dd97106", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=d1a81c779dcc6022ff591f219a0d14e001a51f7d", "patch": "@@ -696,8 +696,8 @@ impl<'tcx> QueryContext<'tcx> {\n         ty::tls::enter_global(self.0, |tcx| f(tcx))\n     }\n \n-    pub fn print_stats(&self) {\n-        self.0.queries.print_stats()\n+    pub fn print_stats(&mut self) {\n+        self.enter(|tcx| ty::query::print_stats(tcx))\n     }\n }\n "}, {"sha": "0c77ab57500a0785bc66eece5de3a82df6210129", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a81c779dcc6022ff591f219a0d14e001a51f7d/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=d1a81c779dcc6022ff591f219a0d14e001a51f7d", "patch": "@@ -340,7 +340,7 @@ impl Compiler {\n \n         if self.session().opts.debugging_opts.query_stats {\n             if let Ok(gcx) = queries.global_ctxt() {\n-                gcx.peek().print_stats();\n+                gcx.peek_mut().print_stats();\n             }\n         }\n "}]}