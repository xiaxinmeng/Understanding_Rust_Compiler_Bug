{"sha": "35437c7cf6182b64b53d079367d8ca9822db9a33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDM3YzdjZjYxODJiNjRiNTNkMDc5MzY3ZDhjYTk4MjJkYjlhMzM=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-09T00:09:39Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:05:14Z"}, "message": "Fixes after a rebase", "tree": {"sha": "e1f2227c6dfee3baa697316f10dce710a25a90aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f2227c6dfee3baa697316f10dce710a25a90aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35437c7cf6182b64b53d079367d8ca9822db9a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35437c7cf6182b64b53d079367d8ca9822db9a33", "html_url": "https://github.com/rust-lang/rust/commit/35437c7cf6182b64b53d079367d8ca9822db9a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35437c7cf6182b64b53d079367d8ca9822db9a33/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0e73ef55f6cf837555a0c144c00844eefa97b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0e73ef55f6cf837555a0c144c00844eefa97b9", "html_url": "https://github.com/rust-lang/rust/commit/8f0e73ef55f6cf837555a0c144c00844eefa97b9"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "0c857692ad11c904d5eaa7341be8d97bddc16722", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -26,9 +26,8 @@ use super::util;\n use middle::def_id::DefId;\n use middle::infer::{self, TypeOrigin};\n use middle::subst::Subst;\n-use middle::ty::{self, ToPredicate, RegionEscape, HasTypeFlags, ToPolyTraitRef, Ty, TyCtxt};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_front::hir;\n use syntax::parse::token;\n use syntax::ast;\n use util::common::FN_OUTPUT_NAME;"}, {"sha": "a5b3c667fc06ded0d4256cb87566441f1e6dac0d", "filename": "src/librustc/middle/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -26,7 +26,7 @@ use middle::infer::{self, InferCtxt, TypeOrigin};\n use middle::region;\n use middle::subst::{Subst, Substs};\n use middle::traits::ProjectionMode;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use syntax::codemap::DUMMY_SP;\n \n pub mod specialization_graph;\n@@ -119,7 +119,7 @@ pub fn translate_substs<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n /// Specialization is determined by the sets of types to which the impls apply;\n /// impl1 specializes impl2 if it applies to a subset of the types impl2 applies\n /// to.\n-pub fn specializes(tcx: &ty::ctxt, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n+pub fn specializes(tcx: &TyCtxt, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&"}, {"sha": "4af8e1fe0a8318858e6c0a198d66aa389fabca7c", "filename": "src/librustc/middle/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -17,7 +17,7 @@ use middle::cstore::CrateStore;\n use middle::def_id::DefId;\n use middle::infer;\n use middle::traits::{self, ProjectionMode};\n-use middle::ty::{self, ImplOrTraitItem, TraitDef, TypeFoldable};\n+use middle::ty::{self, TyCtxt, ImplOrTraitItem, TraitDef, TypeFoldable};\n use syntax::ast::Name;\n use util::nodemap::DefIdMap;\n \n@@ -57,7 +57,7 @@ impl Graph {\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     pub fn insert<'a, 'tcx>(&mut self,\n-                            tcx: &'a ty::ctxt<'tcx>,\n+                            tcx: &'a TyCtxt<'tcx>,\n                             impl_def_id: DefId)\n                             -> Result<(), Overlap<'a, 'tcx>> {\n         assert!(impl_def_id.is_local());\n@@ -177,7 +177,7 @@ impl Node {\n     }\n \n     /// Iterate over the items defined directly by the given (impl or trait) node.\n-    pub fn items<'a, 'tcx>(&self, tcx: &'a ty::ctxt<'tcx>) -> NodeItems<'a, 'tcx> {\n+    pub fn items<'a, 'tcx>(&self, tcx: &'a TyCtxt<'tcx>) -> NodeItems<'a, 'tcx> {\n         match *self {\n             Node::Impl(impl_def_id) => {\n                 NodeItems::Impl {\n@@ -207,7 +207,7 @@ impl Node {\n /// An iterator over the items defined within a trait or impl.\n pub enum NodeItems<'a, 'tcx: 'a> {\n     Impl {\n-        tcx: &'a ty::ctxt<'tcx>,\n+        tcx: &'a TyCtxt<'tcx>,\n         items: cell::Ref<'a, Vec<ty::ImplOrTraitItemId>>,\n         idx: usize,\n     },\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> Iterator for ConstDefs<'a, 'tcx> {\n impl<'a, 'tcx> Ancestors<'a, 'tcx> {\n     /// Search the items from the given ancestors, returning each type definition\n     /// with the given name.\n-    pub fn type_defs(self, tcx: &'a ty::ctxt<'tcx>, name: Name) -> TypeDefs<'a, 'tcx> {\n+    pub fn type_defs(self, tcx: &'a TyCtxt<'tcx>, name: Name) -> TypeDefs<'a, 'tcx> {\n         let iter = self.flat_map(move |node| {\n             node.items(tcx)\n                 .filter_map(move |item| {\n@@ -340,7 +340,7 @@ impl<'a, 'tcx> Ancestors<'a, 'tcx> {\n \n     /// Search the items from the given ancestors, returning each fn definition\n     /// with the given name.\n-    pub fn fn_defs(self, tcx: &'a ty::ctxt<'tcx>, name: Name) -> FnDefs<'a, 'tcx> {\n+    pub fn fn_defs(self, tcx: &'a TyCtxt<'tcx>, name: Name) -> FnDefs<'a, 'tcx> {\n         let iter = self.flat_map(move |node| {\n             node.items(tcx)\n                 .filter_map(move |item| {\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> Ancestors<'a, 'tcx> {\n \n     /// Search the items from the given ancestors, returning each const\n     /// definition with the given name.\n-    pub fn const_defs(self, tcx: &'a ty::ctxt<'tcx>, name: Name) -> ConstDefs<'a, 'tcx> {\n+    pub fn const_defs(self, tcx: &'a TyCtxt<'tcx>, name: Name) -> ConstDefs<'a, 'tcx> {\n         let iter = self.flat_map(move |node| {\n             node.items(tcx)\n                 .filter_map(move |item| {"}, {"sha": "3d7b3bf2634254649f068af19e18b8a00a92da6f", "filename": "src/librustc/middle/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> TraitDef<'tcx> {\n     /// overlap information if the impl overlaps but does not specialize an\n     /// existing impl.\n     pub fn add_impl_for_specialization<'a>(&self,\n-                                           tcx: &'a ctxt<'tcx>,\n+                                           tcx: &'a TyCtxt<'tcx>,\n                                            impl_def_id: DefId)\n                                            -> Result<(), traits::Overlap<'a, 'tcx>> {\n         assert!(impl_def_id.is_local());"}, {"sha": "38a2a7794bcbd5a01768c343efc2bb65384855f3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -34,7 +34,6 @@ use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{self, Ty, TyCtxt, TypeFoldable, VariantKind};\n-use middle::traits;\n \n use rustc_const_eval::ConstInt;\n "}, {"sha": "41baa0b159148798edff3d086a15d0bf5d2a05c0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -25,6 +25,7 @@ use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n use middle::stability;\n use middle::subst;\n+use middle::traits::specialization_graph;\n use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::util::IntTypeExt;\n "}, {"sha": "13521de78af28edd54fe9ca4440d04740887c7ce", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -28,6 +28,7 @@ use rustc::mir::mir_map::MirMap;\n use rustc::middle::infer;\n use rustc::middle::region::CodeExtentData;\n use rustc::middle::traits::ProjectionMode;\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc_front::hir;"}, {"sha": "2965e44bc174840d177a088ce5e79b90fa753238", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -478,7 +478,7 @@ pub struct ImplMethod<'tcx> {\n }\n \n /// Locates the applicable definition of a method, given its name.\n-pub fn get_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn get_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                              impl_def_id: DefId,\n                              substs: Substs<'tcx>,\n                              name: Name)"}, {"sha": "0d5e25efd68c91b93f88f37c0ba5c03d4e470e55", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -864,7 +864,7 @@ fn check_method_body<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     check_bare_fn(ccx, &sig.decl, body, id, span, fty, param_env);\n }\n \n-fn report_forbidden_specialization(tcx: &ty::ctxt,\n+fn report_forbidden_specialization(tcx: &TyCtxt,\n                                    impl_item: &hir::ImplItem,\n                                    parent_impl: DefId)\n {\n@@ -887,7 +887,7 @@ fn report_forbidden_specialization(tcx: &ty::ctxt,\n     err.emit();\n }\n \n-fn check_specialization_validity<'tcx>(tcx: &ty::ctxt<'tcx>, trait_def: &ty::TraitDef<'tcx>,\n+fn check_specialization_validity<'tcx>(tcx: &TyCtxt<'tcx>, trait_def: &ty::TraitDef<'tcx>,\n                                        impl_id: DefId, impl_item: &hir::ImplItem)\n {\n     let ancestors = trait_def.ancestors(impl_id);"}, {"sha": "e4994eaa2552862980fbf150b0b354388aef72e2", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -15,7 +15,6 @@\n use middle::cstore::CrateStore;\n use middle::traits;\n use middle::ty::{self, TyCtxt};\n-use middle::infer;\n use syntax::ast;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;"}, {"sha": "fbaf28332c42c5dd475910ca8f99759052a8581c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35437c7cf6182b64b53d079367d8ca9822db9a33/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=35437c7cf6182b64b53d079367d8ca9822db9a33", "patch": "@@ -247,11 +247,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"inclusive_range_syntax\", \"1.7.0\", Some(28237), Active),\n \n     // `expr?`\n-    (\"question_mark\", \"1.9.0\", Some(31436), Active)\n+    (\"question_mark\", \"1.9.0\", Some(31436), Active),\n \n     // impl specialization (RFC 1210)\n-    // TODO: update with issue number (once it exists), before landing\n-    (\"specialization\", \"1.7.0\", None, Active),\n+    (\"specialization\", \"1.7.0\", Some(31844), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n "}]}