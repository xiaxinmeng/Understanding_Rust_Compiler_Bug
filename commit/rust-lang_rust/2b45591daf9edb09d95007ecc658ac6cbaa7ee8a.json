{"sha": "2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNDU1OTFkYWY5ZWRiMDlkOTUwMDdlY2M2NThhYzZjYmFhN2VlOGE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-14T19:08:59Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-17T15:41:26Z"}, "message": "Made unimplemented debuginfo a note rather than a compiler error.", "tree": {"sha": "2d052a5337ac2e6ba2d5062c8ad5be9652fafd85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d052a5337ac2e6ba2d5062c8ad5be9652fafd85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "html_url": "https://github.com/rust-lang/rust/commit/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d82f572fe3e286f45b60a9594a2fafd286cb39", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d82f572fe3e286f45b60a9594a2fafd286cb39", "html_url": "https://github.com/rust-lang/rust/commit/51d82f572fe3e286f45b60a9594a2fafd286cb39"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "12c774046d8ba036872f035e11b7e5e783837853", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "patch": "@@ -482,6 +482,17 @@ fn create_fn_ty(cx: @CrateContext, fn_ty: ty::t, inputs: ~[ty::t], output: ty::t\n     };\n }\n \n+fn create_unimpl_ty(cx: @CrateContext, t: ty::t) -> DIType {\n+    let dcx = dbg_cx(cx);\n+    let name = ty_to_str(cx.tcx, t);\n+    let md = do as_c_str(fmt!(\"NYI<%s>\", name)) |name| { unsafe {\n+        llvm::LLVMDIBuilderCreateBasicType(\n+            dcx.builder, name, \n+            0_u64, 8_u64, DW_ATE_unsigned as c_uint)\n+        }};\n+    return md;\n+}\n+\n fn create_ty(cx: @CrateContext, t: ty::t, span: span) -> DIType {\n     let dcx = dbg_cx(cx);\n     let ty_id = ty::type_id(t);\n@@ -512,7 +523,8 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span) -> DIType {\n             }\n         },\n         ty::ty_enum(_did, ref _substs) => {\n-            cx.sess.span_bug(span, \"debuginfo for enum NYI\")\n+            cx.sess.span_note(span, \"debuginfo for enum NYI\");\n+            create_unimpl_ty(cx, t)\n         }\n         ty::ty_box(ref mt) | ty::ty_uniq(ref mt) => {\n             let boxed = create_ty(cx, mt.ty, span);\n@@ -538,18 +550,21 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span) -> DIType {\n             create_pointer_type(cx, t, span, pointee)\n         },\n         ty::ty_rptr(ref _region, ref _mt) => {\n-            cx.sess.span_bug(span, \"debuginfo for rptr NYI\")\n+            cx.sess.span_note(span, \"debuginfo for rptr NYI\");\n+            create_unimpl_ty(cx, t)\n         },\n         ty::ty_bare_fn(ref barefnty) => {\n             let inputs = barefnty.sig.inputs.map(|a| *a);\n             let output = barefnty.sig.output;\n             create_fn_ty(cx, t, inputs, output, span)\n         },\n         ty::ty_closure(ref _closurety) => {\n-            cx.sess.span_bug(span, \"debuginfo for closure NYI\")\n+            cx.sess.span_note(span, \"debuginfo for closure NYI\");\n+            create_unimpl_ty(cx, t)\n         },\n         ty::ty_trait(_did, ref _substs, ref _vstore, _) => {\n-            cx.sess.span_bug(span, \"debuginfo for trait NYI\")\n+            cx.sess.span_note(span, \"debuginfo for trait NYI\");\n+            create_unimpl_ty(cx, t)\n         },\n         ty::ty_struct(did, ref substs) => {\n             let fields = ty::struct_fields(cx.tcx, did, substs);\n@@ -572,7 +587,10 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n     let ident = match local.node.pat.node {\n       ast::pat_ident(_, pth, _) => ast_util::path_to_ident(pth),\n       // FIXME this should be handled (#2533)\n-      _ => fail!(\"no single variable name for local\")\n+      _ => {\n+        bcx.sess().span_note(local.span, \"debuginfo for pattern bindings NYI\");\n+        return ptr::null();\n+      }\n     };\n     let name: &str = cx.sess.str_of(ident);\n     debug!(\"create_local_var: %s\", name);"}]}