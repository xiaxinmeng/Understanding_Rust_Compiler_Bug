{"sha": "79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmI1NTIyYmQ1YmY3OWM3ZGFkN2FkZmQ1MTZhZDM2NGRmZjNlOWU=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-07-12T04:43:53Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-07-12T04:43:53Z"}, "message": "std: clear errno before readdir, then check it (solaris)\n\nA `NULL` from `readdir` could be the end of stream or an error.  The\nonly way to know is to check `errno`, so it must be set to a known value\nfirst, like a 0 that POSIX will never use.\n\nThis patch adds `set_errno`, uses it to clear the value before calling\n`readdir`, then checks it again after to see the reason for a `NULL`.", "tree": {"sha": "d130a67fc71d00d8d6b0bb39755556727fb00a8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d130a67fc71d00d8d6b0bb39755556727fb00a8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "html_url": "https://github.com/rust-lang/rust/commit/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726fa9f09f467cd445758ac8b1bbe8a786aadc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/726fa9f09f467cd445758ac8b1bbe8a786aadc9b", "html_url": "https://github.com/rust-lang/rust/commit/726fa9f09f467cd445758ac8b1bbe8a786aadc9b"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "fe946ae0ba41e65883ec0ae4f5a1e75ae0a99548", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "patch": "@@ -205,9 +205,15 @@ impl Iterator for ReadDir {\n                 // of the thread safety, on Illumos the readdir(3C) function is safe to use\n                 // in threaded applications and it is generally preferred over the\n                 // readdir_r(3C) function.\n+                super::os::set_errno(0);\n                 let entry_ptr = libc::readdir(self.dirp.0);\n                 if entry_ptr.is_null() {\n-                    return None\n+                    // NULL can mean either the end is reached or an error occurred.\n+                    // So we had to clear errno beforehand to check for an error now.\n+                    return match super::os::errno() {\n+                        0 => None,\n+                        e => Some(Err(Error::from_raw_os_error(e))),\n+                    }\n                 }\n \n                 let name = (*entry_ptr).d_name.as_ptr();"}, {"sha": "34b36b854f495833cee3f24a691be75b98a8b789", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "patch": "@@ -35,28 +35,37 @@ use vec;\n const TMPBUF_SZ: usize = 128;\n static ENV_LOCK: Mutex = Mutex::new();\n \n+\n+extern {\n+    #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n+               link_name = \"__errno_location\")]\n+    #[cfg_attr(any(target_os = \"bitrig\",\n+                   target_os = \"netbsd\",\n+                   target_os = \"openbsd\",\n+                   target_os = \"android\",\n+                   target_env = \"newlib\"),\n+               link_name = \"__errno\")]\n+    #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n+    #[cfg_attr(any(target_os = \"macos\",\n+                   target_os = \"ios\",\n+                   target_os = \"freebsd\"),\n+               link_name = \"__error\")]\n+    fn errno_location() -> *mut c_int;\n+}\n+\n /// Returns the platform-specific value of errno\n #[cfg(not(target_os = \"dragonfly\"))]\n pub fn errno() -> i32 {\n-    extern {\n-        #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n-                   link_name = \"__errno_location\")]\n-        #[cfg_attr(any(target_os = \"bitrig\",\n-                       target_os = \"netbsd\",\n-                       target_os = \"openbsd\",\n-                       target_os = \"android\",\n-                       target_env = \"newlib\"),\n-                   link_name = \"__errno\")]\n-        #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n-        #[cfg_attr(any(target_os = \"macos\",\n-                       target_os = \"ios\",\n-                       target_os = \"freebsd\"),\n-                   link_name = \"__error\")]\n-        fn errno_location() -> *const c_int;\n+    unsafe {\n+        (*errno_location()) as i32\n     }\n+}\n \n+/// Sets the platform-specific value of errno\n+#[cfg(target_os = \"solaris\")] // only needed for readdir so far\n+pub fn set_errno(e: i32) {\n     unsafe {\n-        (*errno_location()) as i32\n+        *errno_location() = e as c_int\n     }\n }\n "}]}