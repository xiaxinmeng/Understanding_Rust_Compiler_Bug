{"sha": "01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTZjNzEzYzM0MzRhN2NlM2FmYjhlNTBhZTlhYWZmYmRhMDQyYTA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-05T01:34:11Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-05T02:53:30Z"}, "message": "Make vecs/strs not implicitly copyable by default, but make it configurable. Closes #2450.", "tree": {"sha": "5b148d109ab7bcf1afbad9619106318475c50087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b148d109ab7bcf1afbad9619106318475c50087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "html_url": "https://github.com/rust-lang/rust/commit/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a405ff9bf60dc3e0bc516322e61e5a0125791b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a405ff9bf60dc3e0bc516322e61e5a0125791b2f", "html_url": "https://github.com/rust-lang/rust/commit/a405ff9bf60dc3e0bc516322e61e5a0125791b2f"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "43f833e3c3be9eea47a81115b5ef589b6ff24616", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "patch": "@@ -8,10 +8,10 @@ import std::map::{map,hashmap,int_hash,hash_from_strs};\n import std::smallintmap::{map,smallintmap};\n import io::writer_util;\n import syntax::print::pprust::expr_to_str;\n-\n export lint, ctypes, unused_imports;\n export level, ignore, warn, error;\n-export lookup_lint, lint_dict, get_lint_dict, get_warning_settings_level;\n+export lookup_lint, lint_dict, get_lint_dict;\n+export get_warning_level, get_warning_settings_level;\n export check_crate, build_settings_crate, mk_warning_settings;\n export warning_settings;\n \n@@ -45,6 +45,7 @@ enum lint {\n     old_vecs,\n     unrecognized_warning,\n     non_implicitly_copyable_typarams,\n+    vecs_not_implicitly_copyable,\n }\n \n // This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n@@ -58,6 +59,7 @@ fn int_to_lint(i: int) -> lint {\n       4 { old_vecs }\n       5 { unrecognized_warning }\n       6 { non_implicitly_copyable_typarams }\n+      7 { vecs_not_implicitly_copyable }\n     }\n }\n \n@@ -110,6 +112,12 @@ fn get_lint_dict() -> lint_dict {\n         (\"non_implicitly_copyable_typarams\",\n          @{lint: non_implicitly_copyable_typarams,\n            desc: \"passing non implicitly copyable types as copy type params\",\n+           default: warn}),\n+\n+        (\"vecs_not_implicitly_copyable\",\n+         @{lint: vecs_not_implicitly_copyable,\n+           desc: \"make vecs and strs not implicitly copyable\\\n+                  ('err' is ignored; only checked at top level\",\n            default: warn})\n \n     ];"}, {"sha": "3b32bca1e5f86ac61038b8f5bfd057474cfa14dc", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a6c713c3434a7ce3afb8e50ae9aaffbda042a0/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=01a6c713c3434a7ce3afb8e50ae9aaffbda042a0", "patch": "@@ -15,7 +15,8 @@ import util::ppaux::region_to_str;\n import util::ppaux::vstore_to_str;\n import util::ppaux::{ty_to_str, tys_to_str, ty_constr_to_str};\n import syntax::print::pprust::*;\n-\n+import middle::lint::{get_warning_level, vecs_not_implicitly_copyable,\n+                      ignore};\n export ty_vid, region_vid, vid;\n export br_hashmap;\n export is_instantiable;\n@@ -218,6 +219,7 @@ type ctxt =\n     @{diag: syntax::diagnostic::span_handler,\n       interner: hashmap<intern_key, t_box>,\n       mut next_id: uint,\n+      vecs_implicitly_copyable: bool,\n       cstore: metadata::cstore::cstore,\n       sess: session::session,\n       def_map: resolve::def_map,\n@@ -497,9 +499,13 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n         hash_type_structure(k.struct) +\n             option::map_default(k.o_def_id, 0u, ast_util::hash_def)\n     }, {|&&a, &&b| a == b});\n+    let vecs_implicitly_copyable =\n+        get_warning_level(s.warning_settings.default_settings,\n+                          vecs_not_implicitly_copyable) == ignore;\n     @{diag: s.diagnostic(),\n       interner: interner,\n       mut next_id: 0u,\n+      vecs_implicitly_copyable: vecs_implicitly_copyable,\n       cstore: s.cstore,\n       sess: s,\n       def_map: dm,\n@@ -1459,8 +1465,12 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       // Scalar and unique types are sendable\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n       ty_ptr(_) { kind_implicitly_sendable() | kind_const() }\n-      // FIXME: this *shouldn't* be implicitly copyable (#2450)\n-      ty_str { kind_implicitly_sendable() | kind_const() }\n+      // Implicit copyability of strs is configurable\n+      ty_str {\n+        if cx.vecs_implicitly_copyable {\n+            kind_implicitly_sendable() | kind_const()\n+        } else { kind_sendable() | kind_const() }\n+      }\n       ty_fn(f) { proto_kind(f.proto) }\n \n       // Those with refcounts raise noncopyable to copyable,\n@@ -1485,8 +1495,13 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       ty_uniq(tm) {\n         remove_implicit(remove_const(type_kind(cx, tm.ty), tm))\n       }\n-      // FIXME: Vectors *shouldn't* be implicitly copyable but are (#2450)\n-      ty_vec(tm) { remove_const(mutable_type_kind(cx, tm), tm) }\n+      // Implicit copyability of vecs is configurable\n+      ty_vec(tm) {\n+          let k = if cx.vecs_implicitly_copyable {\n+              mutable_type_kind(cx, tm)\n+          } else { remove_implicit(type_kind(cx, tm.ty)) };\n+          remove_const(k, tm)\n+      }\n \n       // Slice and refcounted evecs are copyable; uniques and interiors\n       // depend on the their contained type, but aren't implicitly copyable."}]}