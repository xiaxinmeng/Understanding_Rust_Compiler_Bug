{"sha": "3fc8ed68e99034ad5410cef47e8cd94828ef8946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzhlZDY4ZTk5MDM0YWQ1NDEwY2VmNDdlOGNkOTQ4MjhlZjg5NDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-06T13:52:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-13T20:14:58Z"}, "message": "Check query cache before calling into the query engine.", "tree": {"sha": "8dee2cc6db1928fecdc864f493f956b6a254c9af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dee2cc6db1928fecdc864f493f956b6a254c9af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc8ed68e99034ad5410cef47e8cd94828ef8946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc8ed68e99034ad5410cef47e8cd94828ef8946", "html_url": "https://github.com/rust-lang/rust/commit/3fc8ed68e99034ad5410cef47e8cd94828ef8946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc8ed68e99034ad5410cef47e8cd94828ef8946/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280a2866d502747b51bd81390be760973c54e719", "url": "https://api.github.com/repos/rust-lang/rust/commits/280a2866d502747b51bd81390be760973c54e719", "html_url": "https://github.com/rust-lang/rust/commit/280a2866d502747b51bd81390be760973c54e719"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "0961d4d0091d0a3c953091f0fc89937d91d28021", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fc8ed68e99034ad5410cef47e8cd94828ef8946/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc8ed68e99034ad5410cef47e8cd94828ef8946/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=3fc8ed68e99034ad5410cef47e8cd94828ef8946", "patch": "@@ -422,7 +422,15 @@ macro_rules! define_queries {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                get_query::<queries::$name<'_>, _>(self.tcx, DUMMY_SP, key.into_query_param(), QueryMode::Ensure);\n+                let key = key.into_query_param();\n+                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, |_| {});\n+\n+                let lookup = match cached {\n+                    Ok(()) => return,\n+                    Err(lookup) => lookup,\n+                };\n+\n+                get_query::<queries::$name<'_>, _>(self.tcx, DUMMY_SP, key, lookup, QueryMode::Ensure);\n             })*\n         }\n \n@@ -465,7 +473,7 @@ macro_rules! define_queries {\n             #[must_use]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n             {\n-                self.at(DUMMY_SP).$name(key.into_query_param())\n+                self.at(DUMMY_SP).$name(key)\n             })*\n \n             /// All self-profiling events generated by the query engine use\n@@ -503,7 +511,17 @@ macro_rules! define_queries {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n             {\n-                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into_query_param(), QueryMode::Get).unwrap()\n+                let key = key.into_query_param();\n+                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, |value| {\n+                    value.clone()\n+                });\n+\n+                let lookup = match cached {\n+                    Ok(value) => return value,\n+                    Err(lookup) => lookup,\n+                };\n+\n+                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key, lookup, QueryMode::Get).unwrap()\n             })*\n         }\n "}, {"sha": "2610ce83e4d3e7a49004a865710945fd93eab715", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3fc8ed68e99034ad5410cef47e8cd94828ef8946/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc8ed68e99034ad5410cef47e8cd94828ef8946/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3fc8ed68e99034ad5410cef47e8cd94828ef8946", "patch": "@@ -263,7 +263,18 @@ where\n                 return TryGetJob::Cycle(value);\n             }\n \n-            let cached = try_get_cached(tcx, cache, key, |value, index| (value.clone(), index))\n+            let cached = cache\n+                .cache\n+                .lookup(cache, &key, |value, index| {\n+                    if unlikely!(tcx.profiler().enabled()) {\n+                        tcx.profiler().query_cache_hit(index.into());\n+                    }\n+                    #[cfg(debug_assertions)]\n+                    {\n+                        cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n+                    }\n+                    (value.clone(), index)\n+                })\n                 .unwrap_or_else(|_| panic!(\"value must be in cache after waiting\"));\n \n             if let Some(prof_timer) = _query_blocked_prof_timer.take() {\n@@ -374,7 +385,7 @@ where\n /// It returns the shard index and a lock guard to the shard,\n /// which will be used if the query is not in the cache and we need\n /// to compute it.\n-fn try_get_cached<'a, CTX, C, R, OnHit>(\n+pub fn try_get_cached<'a, CTX, C, R, OnHit>(\n     tcx: CTX,\n     cache: &'a QueryCacheStore<C>,\n     key: &C::Key,\n@@ -384,7 +395,7 @@ fn try_get_cached<'a, CTX, C, R, OnHit>(\n where\n     C: QueryCache,\n     CTX: QueryContext,\n-    OnHit: FnOnce(&C::Stored, DepNodeIndex) -> R,\n+    OnHit: FnOnce(&C::Stored) -> R,\n {\n     cache.cache.lookup(cache, &key, |value, index| {\n         if unlikely!(tcx.profiler().enabled()) {\n@@ -394,7 +405,8 @@ where\n         {\n             cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n         }\n-        on_hit(value, index)\n+        tcx.dep_graph().read_index(index);\n+        on_hit(value)\n     })\n }\n \n@@ -632,21 +644,15 @@ fn get_query_impl<CTX, C>(\n     cache: &QueryCacheStore<C>,\n     span: Span,\n     key: C::Key,\n+    lookup: QueryLookup,\n     query: &QueryVtable<CTX, C::Key, C::Value>,\n ) -> C::Stored\n where\n     CTX: QueryContext,\n     C: QueryCache,\n     C::Key: crate::dep_graph::DepNodeParams<CTX>,\n {\n-    let cached = try_get_cached(tcx, cache, &key, |value, index| {\n-        tcx.dep_graph().read_index(index);\n-        value.clone()\n-    });\n-    match cached {\n-        Ok(value) => value,\n-        Err(lookup) => try_execute_query(tcx, state, cache, span, key, lookup, query),\n-    }\n+    try_execute_query(tcx, state, cache, span, key, lookup, query)\n }\n \n /// Ensure that either this query has all green inputs or been executed.\n@@ -705,9 +711,14 @@ fn force_query_impl<CTX, C>(\n {\n     // We may be concurrently trying both execute and force a query.\n     // Ensure that only one of them runs the query.\n-\n-    let cached = try_get_cached(tcx, cache, &key, |_, _| {\n-        // Cache hit, do nothing\n+    let cached = cache.cache.lookup(cache, &key, |_, index| {\n+        if unlikely!(tcx.profiler().enabled()) {\n+            tcx.profiler().query_cache_hit(index.into());\n+        }\n+        #[cfg(debug_assertions)]\n+        {\n+            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n+        }\n     });\n \n     let lookup = match cached {\n@@ -731,7 +742,13 @@ pub enum QueryMode {\n     Ensure,\n }\n \n-pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key, mode: QueryMode) -> Option<Q::Stored>\n+pub fn get_query<Q, CTX>(\n+    tcx: CTX,\n+    span: Span,\n+    key: Q::Key,\n+    lookup: QueryLookup,\n+    mode: QueryMode,\n+) -> Option<Q::Stored>\n where\n     Q: QueryDescription<CTX>,\n     Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n@@ -745,7 +762,8 @@ where\n     }\n \n     debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n-    let value = get_query_impl(tcx, Q::query_state(tcx), Q::query_cache(tcx), span, key, query);\n+    let value =\n+        get_query_impl(tcx, Q::query_state(tcx), Q::query_cache(tcx), span, key, lookup, query);\n     Some(value)\n }\n "}]}