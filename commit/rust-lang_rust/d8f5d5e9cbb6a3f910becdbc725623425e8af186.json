{"sha": "d8f5d5e9cbb6a3f910becdbc725623425e8af186", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZjVkNWU5Y2JiNmEzZjkxMGJlY2RiYzcyNTYyMzQyNWU4YWYxODY=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-16T16:33:32Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-16T16:33:32Z"}, "message": "Consider edge cases in missing lifetime diagnostics", "tree": {"sha": "50684e8eede81d2b571cb99d5d9fa216ccae79f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50684e8eede81d2b571cb99d5d9fa216ccae79f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8f5d5e9cbb6a3f910becdbc725623425e8af186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5d5e9cbb6a3f910becdbc725623425e8af186", "html_url": "https://github.com/rust-lang/rust/commit/d8f5d5e9cbb6a3f910becdbc725623425e8af186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5d5e9cbb6a3f910becdbc725623425e8af186/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "html_url": "https://github.com/rust-lang/rust/commit/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26"}], "stats": {"total": 53, "additions": 16, "deletions": 37}, "files": [{"sha": "aed36b12f3a222aabf6ea972aec910da11671c79", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d8f5d5e9cbb6a3f910becdbc725623425e8af186/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f5d5e9cbb6a3f910becdbc725623425e8af186/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=d8f5d5e9cbb6a3f910becdbc725623425e8af186", "patch": "@@ -509,44 +509,23 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             }\n \n             AngleBrackets::Available => {\n-                // angle brackets exist, so we insert missing arguments after the existing args\n-\n-                assert!(!self.gen_args.args.is_empty());\n-\n-                if self.num_provided_lifetime_args() > 0 {\n-                    let last_lt_arg_span = self.gen_args.args\n-                        [self.num_provided_lifetime_args() - 1]\n-                        .span()\n-                        .shrink_to_hi();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(last_gen_arg) = source_map.span_to_snippet(last_lt_arg_span) {\n-                        let sugg = format!(\"{}, {}\", last_gen_arg, suggested_args);\n-\n-                        err.span_suggestion_verbose(\n-                            last_lt_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n+                let (sugg_span, is_first) = if self.num_provided_lifetime_args() == 0 {\n+                    (self.gen_args.span().unwrap().shrink_to_lo(), true)\n                 } else {\n-                    // Non-lifetime arguments included in `gen_args` -> insert missing lifetimes before\n-                    // existing arguments\n-                    let first_arg_span = self.gen_args.args[0].span().shrink_to_lo();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n-                        let sugg = format!(\"{}, {}\", suggested_args, first_gen_arg);\n-\n-                        err.span_suggestion_verbose(\n-                            first_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n-                }\n+                    let last_lt = &self.gen_args.args[self.num_provided_lifetime_args() - 1];\n+                    (last_lt.span().shrink_to_hi(), false)\n+                };\n+                let has_non_lt_args = self.num_provided_type_or_const_args() != 0;\n+                let has_bindings = !self.gen_args.bindings.is_empty();\n+\n+                let sugg_prefix = if is_first { \"\" } else { \", \" };\n+                let sugg_suffix =\n+                    if is_first && (has_non_lt_args || has_bindings) { \", \" } else { \"\" };\n+\n+                let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Implied => {\n                 // We never encounter missing lifetimes in situations in which lifetimes are elided"}]}