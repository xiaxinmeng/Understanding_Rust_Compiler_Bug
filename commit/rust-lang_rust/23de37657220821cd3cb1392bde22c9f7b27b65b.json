{"sha": "23de37657220821cd3cb1392bde22c9f7b27b65b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGUzNzY1NzIyMDgyMWNkM2NiMTM5MmJkZTIyYzlmN2IyN2I2NWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-01T04:50:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-01T04:50:10Z"}, "message": "Rollup merge of #61403 - estebank:test-cleanup, r=petrochenkov\n\nRemove unnecessary `-Z continue-parse-after-error` from tests\n\nr? @petrochenkov", "tree": {"sha": "193391f411727745a344e5c7af6f74b18c4f705f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193391f411727745a344e5c7af6f74b18c4f705f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23de37657220821cd3cb1392bde22c9f7b27b65b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8gQDCRBK7hj4Ov3rIwAAdHIIABhSGCPpjkYZwGo+CWjbF6fY\nuIqRJCT1jLYMLEm4ZmZwDPvqW/ozFfbBAesddmMfo20vjeQ7qQMdbr/VZOetNDfr\nyCR7OKQWM2992nA7C4y3DWqwiqCGgCLlXTOb0EjklX/zZOSc6y1lGou9kSnhCx6e\nPjpUYhWtTKv5zXng1EaAkeX9jhSd2qcwVuSt58Pq7fwC8nQ4w1SyBz1b5Fm+WsLA\ngNLmGF7u6BmGEvzx0u9IN4/jjw1cOhyah3fHa7od8DPGv+xox+rijyS5XrySnoc9\nrpt+0XptvD/mG7TJfeVPYqh30WYkIXqCGrElOzCmOmDcoKo0u62WdhoFAnHx9Hc=\n=+VJK\n-----END PGP SIGNATURE-----\n", "payload": "tree 193391f411727745a344e5c7af6f74b18c4f705f\nparent c08197484546b57ee92f02f7c3c3a5179faadb55\nparent d6ea6b972dd68dbfa03334d06edebb80482605dd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559364610 +0200\ncommitter GitHub <noreply@github.com> 1559364610 +0200\n\nRollup merge of #61403 - estebank:test-cleanup, r=petrochenkov\n\nRemove unnecessary `-Z continue-parse-after-error` from tests\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23de37657220821cd3cb1392bde22c9f7b27b65b", "html_url": "https://github.com/rust-lang/rust/commit/23de37657220821cd3cb1392bde22c9f7b27b65b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23de37657220821cd3cb1392bde22c9f7b27b65b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08197484546b57ee92f02f7c3c3a5179faadb55", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08197484546b57ee92f02f7c3c3a5179faadb55", "html_url": "https://github.com/rust-lang/rust/commit/c08197484546b57ee92f02f7c3c3a5179faadb55"}, {"sha": "d6ea6b972dd68dbfa03334d06edebb80482605dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ea6b972dd68dbfa03334d06edebb80482605dd", "html_url": "https://github.com/rust-lang/rust/commit/d6ea6b972dd68dbfa03334d06edebb80482605dd"}], "stats": {"total": 356, "additions": 142, "deletions": 214}, "files": [{"sha": "0eec9fb3ee647c3143b0c7bc4d8e695f48c07fcd", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -6,7 +6,7 @@\n \n // run-rustfix\n // ignore-wasm32 no external library to link to.\n-// compile-flags: -g -Z continue-parse-after-error\n+// compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "ca5d7ddf27e3ab9a1f84e5bc9edd1795a4f6ccf4", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -6,7 +6,7 @@\n \n // run-rustfix\n // ignore-wasm32 no external library to link to.\n-// compile-flags: -g -Z continue-parse-after-error\n+// compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "69fed2cb69ad8898a240b80f59f9cb05f7616d02", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n // ignore-tidy-tab\n \n fn main() {"}, {"sha": "d202044a2bb9726e1c7d682ac8478fa0fefa2462", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,13 +1,13 @@\n error: incorrect unicode escape sequence\n-  --> $DIR/format-string-error-2.rs:78:20\n+  --> $DIR/format-string-error-2.rs:77:20\n    |\n LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |                    ^^-\n    |                      |\n    |                      help: format of unicode escape sequences uses braces: `\\u{8}`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:6:5\n+  --> $DIR/format-string-error-2.rs:5:5\n    |\n LL |     format!(\"{\n    |              - because of this opening brace\n@@ -17,7 +17,7 @@ LL |     a\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:10:5\n+  --> $DIR/format-string-error-2.rs:9:5\n    |\n LL |     format!(\"{ \\\n    |              - because of this opening brace\n@@ -28,7 +28,7 @@ LL |     b\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:12:18\n+  --> $DIR/format-string-error-2.rs:11:18\n    |\n LL |     format!(r#\"{ \\\n    |                - ^ expected `}` in format string\n@@ -38,7 +38,7 @@ LL |     format!(r#\"{ \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:16:18\n+  --> $DIR/format-string-error-2.rs:15:18\n    |\n LL |     format!(r#\"{ \\n\n    |                - ^ expected `}` in format string\n@@ -48,7 +48,7 @@ LL |     format!(r#\"{ \\n\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'e'`\n-  --> $DIR/format-string-error-2.rs:22:5\n+  --> $DIR/format-string-error-2.rs:21:5\n    |\n LL |     format!(\"{ \\n\n    |              - because of this opening brace\n@@ -59,7 +59,7 @@ LL |     e\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:26:5\n+  --> $DIR/format-string-error-2.rs:25:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -69,7 +69,7 @@ LL |     a\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:30:5\n+  --> $DIR/format-string-error-2.rs:29:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -79,7 +79,7 @@ LL |     a\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:36:5\n+  --> $DIR/format-string-error-2.rs:35:5\n    |\n LL |     { \\\n    |     - because of this opening brace\n@@ -90,7 +90,7 @@ LL |     b\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:41:5\n+  --> $DIR/format-string-error-2.rs:40:5\n    |\n LL |     { \\\n    |     - because of this opening brace\n@@ -101,7 +101,7 @@ LL |     b \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:46:8\n+  --> $DIR/format-string-error-2.rs:45:8\n    |\n LL | raw  { \\\n    |      - ^ expected `}` in format string\n@@ -111,7 +111,7 @@ LL | raw  { \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:51:8\n+  --> $DIR/format-string-error-2.rs:50:8\n    |\n LL | raw  { \\n\n    |      - ^ expected `}` in format string\n@@ -121,7 +121,7 @@ LL | raw  { \\n\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'e'`\n-  --> $DIR/format-string-error-2.rs:58:5\n+  --> $DIR/format-string-error-2.rs:57:5\n    |\n LL |   { \\n\n    |   - because of this opening brace\n@@ -132,7 +132,7 @@ LL |     e\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:68:5\n+  --> $DIR/format-string-error-2.rs:67:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -142,13 +142,13 @@ LL |     asdf}\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/format-string-error-2.rs:71:17\n+  --> $DIR/format-string-error-2.rs:70:17\n    |\n LL |     println!(\"\\t{}\");\n    |                 ^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error-2.rs:75:27\n+  --> $DIR/format-string-error-2.rs:74:27\n    |\n LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    |                          -^ expected `'}'` in format string\n@@ -158,15 +158,15 @@ LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:82:21\n+  --> $DIR/format-string-error-2.rs:81:21\n    |\n LL |     println!(r#\"\\x7B}\\u{8} {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:85:21\n+  --> $DIR/format-string-error-2.rs:84:21\n    |\n LL |     println!(r#\"\\x7B}\\u8 {\"#, 1);\n    |                     ^ unmatched `}` in format string"}, {"sha": "dfac9c0f1ef86e3265aead23c37623a93e42c9f8", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n fn f() -> impl A + {} // OK\n fn f() -> impl A + B {} // OK"}, {"sha": "8d05c32d5de91d20ca2ff62ed5c3111759f23020", "filename": "src/test/ui/issues/issue-28433.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n enum Bird {\n     pub Duck,\n     //~^ ERROR unnecessary visibility qualifier"}, {"sha": "851bc5dfbdd9e20ebd4df7287d91b328fc91ae31", "filename": "src/test/ui/issues/issue-28433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary visibility qualifier\n-  --> $DIR/issue-28433.rs:4:5\n+  --> $DIR/issue-28433.rs:2:5\n    |\n LL |     pub Duck,\n    |     ^^^ `pub` not permitted here\n \n error: unnecessary visibility qualifier\n-  --> $DIR/issue-28433.rs:7:5\n+  --> $DIR/issue-28433.rs:5:5\n    |\n LL |     pub(crate) Dove\n    |     ^^^^^^^^^^ `pub` not permitted here"}, {"sha": "2e64853697a1bd450b9b6ab6ab3a2a55cdeed84c", "filename": "src/test/ui/issues/issue-36638.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Foo<Self>(Self);\n //~^ ERROR expected identifier, found keyword `Self`\n //~^^ ERROR E0392"}, {"sha": "f3f94198465d878463b34a40e3af4cec4b7de64f", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,17 +1,17 @@\n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:3:12\n+  --> $DIR/issue-36638.rs:1:12\n    |\n LL | struct Foo<Self>(Self);\n    |            ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:7:11\n+  --> $DIR/issue-36638.rs:5:11\n    |\n LL | trait Bar<Self> {}\n    |           ^^^^ expected identifier, found keyword\n \n error[E0392]: parameter `Self` is never used\n-  --> $DIR/issue-36638.rs:3:12\n+  --> $DIR/issue-36638.rs:1:12\n    |\n LL | struct Foo<Self>(Self);\n    |            ^^^^ unused parameter"}, {"sha": "b238a9ca22674a70820117fc93e593326a57b601", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test you can't use a higher-ranked trait bound inside of a qualified\n // path (just won't parse).\n "}, {"sha": "ada0f268a8d6bd0e79b48a48b85dba5b9af080c0", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `for`\n-  --> $DIR/associated-types-project-from-hrtb-explicit.rs:12:21\n+  --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:21\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                     ^^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL | fn foo2<I>(x: <I as r#for<'x> Foo<&'x isize>>::A)\n    |                     ^^^^^\n \n error: expected one of `::` or `>`, found `Foo`\n-  --> $DIR/associated-types-project-from-hrtb-explicit.rs:12:29\n+  --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:29\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                             ^^^ expected one of `::` or `>` here"}, {"sha": "9f301db09956e87cc2c1257a38a5b7c385a4ea29", "filename": "src/test/ui/parser/bad-lit-suffixes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n extern\n     \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n     fn foo() {}"}, {"sha": "208fcf43d917726860f7d77ee81ba5ac8395ce2e", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,109 +1,109 @@\n error: suffixes on an ABI spec are invalid\n-  --> $DIR/bad-lit-suffixes.rs:5:5\n+  --> $DIR/bad-lit-suffixes.rs:2:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on an ABI spec are invalid\n-  --> $DIR/bad-lit-suffixes.rs:9:5\n+  --> $DIR/bad-lit-suffixes.rs:6:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:13:5\n+  --> $DIR/bad-lit-suffixes.rs:10:5\n    |\n LL |     \"\"suffix;\n    |     ^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:14:5\n+  --> $DIR/bad-lit-suffixes.rs:11:5\n    |\n LL |     b\"\"suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:15:5\n+  --> $DIR/bad-lit-suffixes.rs:12:5\n    |\n LL |     r#\"\"#suffix;\n    |     ^^^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:16:5\n+  --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     br#\"\"#suffix;\n    |     ^^^^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a char literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:17:5\n+  --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     'a'suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:18:5\n+  --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     b'a'suffix;\n    |     ^^^^^^^^^^ invalid suffix `suffix`\n \n error: invalid width `1024` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:20:5\n+  --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     1234u1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `1024` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:21:5\n+  --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     1234i1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `1024` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:22:5\n+  --> $DIR/bad-lit-suffixes.rs:19:5\n    |\n LL |     1234f1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 32 and 64\n \n error: invalid width `1024` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:23:5\n+  --> $DIR/bad-lit-suffixes.rs:20:5\n    |\n LL |     1234.5f1024;\n    |     ^^^^^^^^^^^\n    |\n    = help: valid widths are 32 and 64\n \n error: invalid suffix `suffix` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:25:5\n+  --> $DIR/bad-lit-suffixes.rs:22:5\n    |\n LL |     1234suffix;\n    |     ^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:26:5\n+  --> $DIR/bad-lit-suffixes.rs:23:5\n    |\n LL |     0b101suffix;\n    |     ^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:27:5\n+  --> $DIR/bad-lit-suffixes.rs:24:5\n    |\n LL |     1.0suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n error: invalid suffix `suffix` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:28:5\n+  --> $DIR/bad-lit-suffixes.rs:25:5\n    |\n LL |     1.0e10suffix;\n    |     ^^^^^^^^^^^^ invalid suffix `suffix`"}, {"sha": "9122cb49ebc1a47731a634b6df8f0c9ee8436511", "filename": "src/test/ui/parser/bounds-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n struct S<\n     T: 'a + Tr, // OK"}, {"sha": "5b6f080360336c48dd3bb2639dc1d3d0587d7c00", "filename": "src/test/ui/parser/doc-after-struct-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8 /** document a */,\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "e3b32a7f03543fbd10e5fbf21278c1a9aa8bd508", "filename": "src/test/ui/parser/doc-after-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,13 +1,13 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-after-struct-field.rs:4:11\n+  --> $DIR/doc-after-struct-field.rs:2:11\n    |\n LL |     a: u8 /** document a */,\n    |           ^^^^^^^^^^^^^^^^^\n    |\n    = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n \n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-after-struct-field.rs:10:11\n+  --> $DIR/doc-after-struct-field.rs:8:11\n    |\n LL |     a: u8 /// document a\n    |           ^^^^^^^^^^^^^^"}, {"sha": "eb355136f1e66becf6ba59f985919c15f07c5c8d", "filename": "src/test/ui/parser/doc-before-fn-rbrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     /// document\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "56241de7092477680c437a26e362eb16aada8b2d", "filename": "src/test/ui/parser/doc-before-fn-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-fn-rbrace.rs:4:5\n+  --> $DIR/doc-before-fn-rbrace.rs:2:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^"}, {"sha": "76263ad92885d9d2ce9f9451275edc124e613c95", "filename": "src/test/ui/parser/doc-before-identifier.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn /// document\n foo() {}\n //~^^ ERROR expected identifier, found doc comment `/// document`"}, {"sha": "940d293b6786ce86c7000d67ba10126691bcaf19", "filename": "src/test/ui/parser/doc-before-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found doc comment `/// document`\n-  --> $DIR/doc-before-identifier.rs:3:4\n+  --> $DIR/doc-before-identifier.rs:1:4\n    |\n LL | fn /// document\n    |    ^^^^^^^^^^^^ expected identifier, found doc comment"}, {"sha": "c65a0a93184c0ea5f65d8ed34df626c27fc36d96", "filename": "src/test/ui/parser/doc-before-mod-rbrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n mod Foo {\n     /// document\n     //~^ ERROR expected item after doc comment"}, {"sha": "d5749c66cd2900d67961b45487d1bf5cd6d07217", "filename": "src/test/ui/parser/doc-before-mod-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected item after doc comment\n-  --> $DIR/doc-before-mod-rbrace.rs:4:5\n+  --> $DIR/doc-before-mod-rbrace.rs:2:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^ this doc comment doesn't document anything"}, {"sha": "3866a3105c25aea4e23eb5b1f1d068d9637f808a", "filename": "src/test/ui/parser/doc-before-struct-rbrace-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8,\n     /// document"}, {"sha": "19f90677398ea4fb821e4ef8f727d1bcfe6b9f71", "filename": "src/test/ui/parser/doc-before-struct-rbrace-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-struct-rbrace-1.rs:5:5\n+  --> $DIR/doc-before-struct-rbrace-1.rs:3:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^"}, {"sha": "dda138f1a8835142596a9e7e72ef82f309957dec", "filename": "src/test/ui/parser/doc-before-struct-rbrace-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8 /// document\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "b25ccab79f94a102a1413bfb59cc2c018df78a84", "filename": "src/test/ui/parser/doc-before-struct-rbrace-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-struct-rbrace-2.rs:4:11\n+  --> $DIR/doc-before-struct-rbrace-2.rs:2:11\n    |\n LL |     a: u8 /// document\n    |           ^^^^^^^^^^^^"}, {"sha": "186a955c3135bb31c21f7f1a333d0e2c336cb1e9", "filename": "src/test/ui/parser/issue-17904-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found keyword `where`\n \n fn main() {}"}, {"sha": "9c7fdf6ccb416320aaeb7e0b428f6dbf20ce3993", "filename": "src/test/ui/parser/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected item, found keyword `where`\n-  --> $DIR/issue-17904-2.rs:3:24\n+  --> $DIR/issue-17904-2.rs:1:24\n    |\n LL | struct Bar<T> { x: T } where T: Copy\n    |                        ^^^^^ expected item"}, {"sha": "7d6a54f4be12e82df1c2eb2afe374484415a9de1", "filename": "src/test/ui/parser/issue-17904.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Baz<U> where U: Eq(U); //This is parsed as the new Fn* style parenthesis syntax.\n struct Baz<U> where U: Eq(U) -> R; // Notice this parses as well.\n struct Baz<U>(U) where U: Eq; // This rightfully signals no error as well."}, {"sha": "38f30099ed59cd8f3419372830dde449be9b6007", "filename": "src/test/ui/parser/issue-17904.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `:`, `==`, or `=`, found `;`\n-  --> $DIR/issue-17904.rs:6:33\n+  --> $DIR/issue-17904.rs:4:33\n    |\n LL | struct Foo<T> where T: Copy, (T);\n    |                                 ^ expected one of `:`, `==`, or `=` here"}, {"sha": "82f7ce62b9457804dc80c7c30a9c6d942ec3aaa2", "filename": "src/test/ui/parser/issue-32214.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n trait Trait<T> { type Item; }\n \n pub fn test<W, I: Trait<Item=(), W> >() {}"}, {"sha": "08b230a14f50ebc8ba6213b4fb9997548a029da4", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: associated type bindings must be declared after generic parameters\n-  --> $DIR/issue-32214.rs:5:25\n+  --> $DIR/issue-32214.rs:3:25\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                         -------^^^"}, {"sha": "f31c00e5cc3fb8f5f7cd2dbea1c5e0de77335c3e", "filename": "src/test/ui/parser/issue-32505.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n pub fn test() {\n     foo(|_|) //~ ERROR expected expression, found `)`\n }"}, {"sha": "cdd779a93ef910736fb315b6cff60bc4357ac6a4", "filename": "src/test/ui/parser/issue-32505.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected expression, found `)`\n-  --> $DIR/issue-32505.rs:4:12\n+  --> $DIR/issue-32505.rs:2:12\n    |\n LL |     foo(|_|)\n    |            ^ expected expression"}, {"sha": "7df98073e35702427d6266cb7d004d780406dab8", "filename": "src/test/ui/parser/lex-bad-binary-literal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0b121; //~ ERROR invalid digit for a base 2 literal\n     0b10_10301; //~ ERROR invalid digit for a base 2 literal"}, {"sha": "992b3d2487e5343048a77235b707b18891773ce2", "filename": "src/test/ui/parser/lex-bad-binary-literal.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,53 +1,53 @@\n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:4:8\n+  --> $DIR/lex-bad-binary-literal.rs:2:8\n    |\n LL |     0b121;\n    |        ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:5:12\n+  --> $DIR/lex-bad-binary-literal.rs:3:12\n    |\n LL |     0b10_10301;\n    |            ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:6:7\n+  --> $DIR/lex-bad-binary-literal.rs:4:7\n    |\n LL |     0b30;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:7:7\n+  --> $DIR/lex-bad-binary-literal.rs:5:7\n    |\n LL |     0b41;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:8:7\n+  --> $DIR/lex-bad-binary-literal.rs:6:7\n    |\n LL |     0b5;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:9:7\n+  --> $DIR/lex-bad-binary-literal.rs:7:7\n    |\n LL |     0b6;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:10:7\n+  --> $DIR/lex-bad-binary-literal.rs:8:7\n    |\n LL |     0b7;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:11:7\n+  --> $DIR/lex-bad-binary-literal.rs:9:7\n    |\n LL |     0b8;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:12:7\n+  --> $DIR/lex-bad-binary-literal.rs:10:7\n    |\n LL |     0b9;\n    |       ^"}, {"sha": "cf8440ca488ccaeeff1e75c5d2809b9bb1c851ad", "filename": "src/test/ui/parser/lex-bad-numeric-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0o1.0; //~ ERROR: octal float literal is not supported\n     0o2f32; //~ ERROR: octal float literal is not supported"}, {"sha": "84e27f7366d0c18c752d38287f7046f4cac74f72", "filename": "src/test/ui/parser/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,137 +1,137 @@\n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:4:5\n+  --> $DIR/lex-bad-numeric-literals.rs:2:5\n    |\n LL |     0o1.0;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:6:5\n+  --> $DIR/lex-bad-numeric-literals.rs:4:5\n    |\n LL |     0o3.0f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:7:5\n+  --> $DIR/lex-bad-numeric-literals.rs:5:5\n    |\n LL |     0o4e4;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:8:5\n+  --> $DIR/lex-bad-numeric-literals.rs:6:5\n    |\n LL |     0o5.0e5;\n    |     ^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:9:5\n+  --> $DIR/lex-bad-numeric-literals.rs:7:5\n    |\n LL |     0o6e6f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:10:5\n+  --> $DIR/lex-bad-numeric-literals.rs:8:5\n    |\n LL |     0o7.0e7f64;\n    |     ^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:11:5\n+  --> $DIR/lex-bad-numeric-literals.rs:9:5\n    |\n LL |     0x8.0e+9;\n    |     ^^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:12:5\n+  --> $DIR/lex-bad-numeric-literals.rs:10:5\n    |\n LL |     0x9.0e-9;\n    |     ^^^^^^^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:13:5\n+  --> $DIR/lex-bad-numeric-literals.rs:11:5\n    |\n LL |     0o;\n    |     ^^\n \n error: expected at least one digit in exponent\n-  --> $DIR/lex-bad-numeric-literals.rs:14:8\n+  --> $DIR/lex-bad-numeric-literals.rs:12:8\n    |\n LL |     1e+;\n    |        ^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:15:5\n+  --> $DIR/lex-bad-numeric-literals.rs:13:5\n    |\n LL |     0x539.0;\n    |     ^^^^^^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:20:5\n+  --> $DIR/lex-bad-numeric-literals.rs:18:5\n    |\n LL |     0x;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:21:5\n+  --> $DIR/lex-bad-numeric-literals.rs:19:5\n    |\n LL |     0xu32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:22:5\n+  --> $DIR/lex-bad-numeric-literals.rs:20:5\n    |\n LL |     0ou32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:23:5\n+  --> $DIR/lex-bad-numeric-literals.rs:21:5\n    |\n LL |     0bu32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:24:5\n+  --> $DIR/lex-bad-numeric-literals.rs:22:5\n    |\n LL |     0b;\n    |     ^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:26:5\n+  --> $DIR/lex-bad-numeric-literals.rs:24:5\n    |\n LL |     0o123.456;\n    |     ^^^^^^^^^\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:28:5\n+  --> $DIR/lex-bad-numeric-literals.rs:26:5\n    |\n LL |     0b111.101;\n    |     ^^^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:5:5\n+  --> $DIR/lex-bad-numeric-literals.rs:3:5\n    |\n LL |     0o2f32;\n    |     ^^^^^^ not supported\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:16:5\n+  --> $DIR/lex-bad-numeric-literals.rs:14:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:18:5\n+  --> $DIR/lex-bad-numeric-literals.rs:16:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:25:5\n+  --> $DIR/lex-bad-numeric-literals.rs:23:5\n    |\n LL |     0o123f64;\n    |     ^^^^^^^^ not supported\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:27:5\n+  --> $DIR/lex-bad-numeric-literals.rs:25:5\n    |\n LL |     0b101f64;\n    |     ^^^^^^^^ not supported"}, {"sha": "49631f16bdbd78148a1f91b8ac42c2108a9f76a7", "filename": "src/test/ui/parser/lex-bad-octal-literal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0o18; //~ ERROR invalid digit for a base 8 literal\n     0o1234_9_5670;  //~ ERROR invalid digit for a base 8 literal"}, {"sha": "2cb8ca5ded0ad47999a38ae489bed9e582a4b95a", "filename": "src/test/ui/parser/lex-bad-octal-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,11 +1,11 @@\n error: invalid digit for a base 8 literal\n-  --> $DIR/lex-bad-octal-literal.rs:4:8\n+  --> $DIR/lex-bad-octal-literal.rs:2:8\n    |\n LL |     0o18;\n    |        ^\n \n error: invalid digit for a base 8 literal\n-  --> $DIR/lex-bad-octal-literal.rs:5:12\n+  --> $DIR/lex-bad-octal-literal.rs:3:12\n    |\n LL |     0o1234_9_5670;\n    |            ^"}, {"sha": "544e4aa7b1b09d7e13f8ddf5276de830153bc577", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n macro_rules! ignored_item {\n     () => {\n         fn foo() {}"}, {"sha": "e40919cda945f0b5b42201730e35cdd2453a5238", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: macro expansion ignores token `,` and any following\n-  --> $DIR/macro-incomplete-parse.rs:7:9\n+  --> $DIR/macro-incomplete-parse.rs:5:9\n    |\n LL |         ,\n    |         ^\n@@ -10,7 +10,7 @@ LL | ignored_item!();\n    = note: the usage of `ignored_item!` is likely invalid in item context\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n-  --> $DIR/macro-incomplete-parse.rs:12:14\n+  --> $DIR/macro-incomplete-parse.rs:10:14\n    |\n LL |     () => ( 1,\n    |              ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n@@ -19,7 +19,7 @@ LL |     ignored_expr!();\n    |     ---------------- in this macro invocation\n \n error: macro expansion ignores token `,` and any following\n-  --> $DIR/macro-incomplete-parse.rs:18:14\n+  --> $DIR/macro-incomplete-parse.rs:16:14\n    |\n LL |     () => ( 1, 2 )\n    |              ^"}, {"sha": "9ac03cedc3f3ef6818d329849cf66fc8cf7085fd", "filename": "src/test/ui/parser/new-unicode-escapes-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n pub fn main() {\n     let s = \"\\u{lol}\";\n      //~^ ERROR invalid character in unicode escape: l"}, {"sha": "a35c5f0f216588f31a5a0bd1cb55d79d85b53a59", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: invalid character in unicode escape: l\n-  --> $DIR/new-unicode-escapes-4.rs:4:17\n+  --> $DIR/new-unicode-escapes-4.rs:2:17\n    |\n LL |     let s = \"\\u{lol}\";\n    |                 ^"}, {"sha": "d1cd8ad53114b1f763fe45163a605a7d36b3013f", "filename": "src/test/ui/parser/no-unsafe-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n trait A {\n     fn foo(*mut self); //~ ERROR cannot pass `self` by raw pointer\n     fn baz(*const self); //~ ERROR cannot pass `self` by raw pointer"}, {"sha": "23323945ee4b6c2498691f6531fba62e06c30eff", "filename": "src/test/ui/parser/no-unsafe-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,35 +1,35 @@\n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:4:17\n+  --> $DIR/no-unsafe-self.rs:2:17\n    |\n LL |     fn foo(*mut self);\n    |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:5:19\n+  --> $DIR/no-unsafe-self.rs:3:19\n    |\n LL |     fn baz(*const self);\n    |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:6:13\n+  --> $DIR/no-unsafe-self.rs:4:13\n    |\n LL |     fn bar(*self);\n    |             ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:11:17\n+  --> $DIR/no-unsafe-self.rs:9:17\n    |\n LL |     fn foo(*mut self) { }\n    |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:12:19\n+  --> $DIR/no-unsafe-self.rs:10:19\n    |\n LL |     fn baz(*const self) { }\n    |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:13:13\n+  --> $DIR/no-unsafe-self.rs:11:13\n    |\n LL |     fn bar(*self) { }\n    |             ^^^^ cannot pass `self` by raw pointer"}, {"sha": "c3e600e771bdf0594123e20ae491e306c7fb85d4", "filename": "src/test/ui/parser/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Make sure that inclusive ranges with `...` syntax don't parse.\n \n use std::ops::RangeToInclusive;"}, {"sha": "f877c5c6f79de688f5e3b903c138f6ad01adc554", "filename": "src/test/ui/parser/range_inclusive_dotdotdot.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:8:12\n+  --> $DIR/range_inclusive_dotdotdot.rs:6:12\n    |\n LL |     return ...1;\n    |            ^^^\n@@ -13,7 +13,7 @@ LL |     return ..=1;\n    |            ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:14:13\n+  --> $DIR/range_inclusive_dotdotdot.rs:12:13\n    |\n LL |     let x = ...0;\n    |             ^^^\n@@ -27,7 +27,7 @@ LL |     let x = ..=0;\n    |             ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:18:14\n+  --> $DIR/range_inclusive_dotdotdot.rs:16:14\n    |\n LL |     let x = 5...5;\n    |              ^^^\n@@ -41,7 +41,7 @@ LL |     let x = 5..=5;\n    |              ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:22:15\n+  --> $DIR/range_inclusive_dotdotdot.rs:20:15\n    |\n LL |     for _ in 0...1 {}\n    |               ^^^"}, {"sha": "3b50fb8036ada911eab0393b8aeaa06ef8ce4851", "filename": "src/test/ui/parser/raw-byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n pub fn main() {\n     br\"\u00e9\";  //~ ERROR raw byte string must be ASCII\n     br##~\"a\"~##;  //~ ERROR only `#` is allowed in raw string delimitation"}, {"sha": "671ed97d1b52a2e658e0eaa430d1a7c6f9ca24b1", "filename": "src/test/ui/parser/raw-byte-string-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,11 +1,11 @@\n error: raw byte string must be ASCII: \\u{e9}\n-  --> $DIR/raw-byte-string-literals.rs:5:8\n+  --> $DIR/raw-byte-string-literals.rs:2:8\n    |\n LL |     br\"\u00e9\";\n    |        ^\n \n error: found invalid character; only `#` is allowed in raw string delimitation: ~\n-  --> $DIR/raw-byte-string-literals.rs:6:6\n+  --> $DIR/raw-byte-string-literals.rs:3:6\n    |\n LL |     br##~\"a\"~##;\n    |      ^^^"}, {"sha": "331bfff84f106a778f7f68cf6bfc5aa2d345b6c0", "filename": "src/test/ui/parser/recover-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     enum Test {\n         Very"}, {"sha": "81c7ae337dbebe0c12e91256032adaaa52691634", "filename": "src/test/ui/parser/recover-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,17 +1,17 @@\n error: missing comma\n-  --> $DIR/recover-enum.rs:5:13\n+  --> $DIR/recover-enum.rs:3:13\n    |\n LL |         Very\n    |             ^ help: missing comma\n \n error: missing comma\n-  --> $DIR/recover-enum.rs:7:19\n+  --> $DIR/recover-enum.rs:5:19\n    |\n LL |         Bad(usize)\n    |                   ^ help: missing comma\n \n error: missing comma\n-  --> $DIR/recover-enum.rs:9:27\n+  --> $DIR/recover-enum.rs:7:27\n    |\n LL |         Stuff { a: usize }\n    |                           ^ help: missing comma"}, {"sha": "0c9420889553b2a17fb388180a20b669337a55b3", "filename": "src/test/ui/parser/recover-enum2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     enum Test {\n         Var1,"}, {"sha": "9ed2e6f5eb6c4e26e384bd7abc8b0ef95d35d18e", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,11 +1,11 @@\n error: expected type, found `{`\n-  --> $DIR/recover-enum2.rs:8:18\n+  --> $DIR/recover-enum2.rs:6:18\n    |\n LL |             abc: {},\n    |                  ^\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n-  --> $DIR/recover-enum2.rs:27:22\n+  --> $DIR/recover-enum2.rs:25:22\n    |\n LL |             Nope(i32 {})\n    |                      ^ expected one of 7 possible tokens here"}, {"sha": "bfa5b454c0a8b37b1c6f0e56bef757fd63f68c25", "filename": "src/test/ui/parser/recover-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     struct Test {\n         Very"}, {"sha": "1b72184b0c8861fc3b84dfd8e011d027bc1e9f46", "filename": "src/test/ui/parser/recover-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected `:`, found `Bad`\n-  --> $DIR/recover-struct.rs:6:9\n+  --> $DIR/recover-struct.rs:4:9\n    |\n LL |         Very\n    |             - expected `:`"}, {"sha": "9fe4a148a56aa0adb1001a32c45ac9b3d4467b06", "filename": "src/test/ui/parser/removed-syntax-field-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct S {\n     let foo: (),\n     //~^  ERROR expected identifier, found keyword `let`"}, {"sha": "d6e38be4869eb3fd6502655ec2c8ce4e0f60ea60", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `let`\n-  --> $DIR/removed-syntax-field-let.rs:4:5\n+  --> $DIR/removed-syntax-field-let.rs:2:5\n    |\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL |     r#let foo: (),\n    |     ^^^^^\n \n error: expected `:`, found `foo`\n-  --> $DIR/removed-syntax-field-let.rs:4:9\n+  --> $DIR/removed-syntax-field-let.rs:2:9\n    |\n LL |     let foo: (),\n    |         ^^^ expected `:`"}, {"sha": "3213e068053714e8e8556d10c667a35a5311c321", "filename": "src/test/ui/parser/trailing-plus-in-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,4 @@\n // compile-pass\n-// compile-flags: -Z continue-parse-after-error\n \n #![feature(box_syntax)]\n #![allow(bare_trait_objects)]"}, {"sha": "02563847ef32694e055ea88466bb3e2b0a32bd49", "filename": "src/test/ui/parser/trait-bounds-not-on-impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,11 +1,7 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-trait Foo {\n-}\n+trait Foo {}\n \n struct Bar;\n \n-impl Foo + Owned for Bar { //~ ERROR expected a trait, found type\n-}\n+impl Foo + Owned for Bar {} //~ ERROR expected a trait, found type\n \n fn main() { }"}, {"sha": "8d2d5e3d7ddd2582d05b0091dc9bb243e403af71", "filename": "src/test/ui/parser/trait-bounds-not-on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,7 +1,7 @@\n error: expected a trait, found type\n-  --> $DIR/trait-bounds-not-on-impl.rs:8:6\n+  --> $DIR/trait-bounds-not-on-impl.rs:5:6\n    |\n-LL | impl Foo + Owned for Bar {\n+LL | impl Foo + Owned for Bar {}\n    |      ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "048e028be1ca171c7df53c4fb1c6011eef19652f", "filename": "src/test/ui/parser/trait-object-bad-parens.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n #![feature(optin_builtin_traits)]\n #![allow(bare_trait_objects)]\n "}, {"sha": "f53afdff5e7c2615e4d7e1abe75fe160fd73145a", "filename": "src/test/ui/parser/trait-object-bad-parens.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `((Auto))`\n-  --> $DIR/trait-object-bad-parens.rs:9:16\n+  --> $DIR/trait-object-bad-parens.rs:7:16\n    |\n LL |     let _: Box<((Auto)) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto + Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:11:16\n+  --> $DIR/trait-object-bad-parens.rs:9:16\n    |\n LL |     let _: Box<(Auto + Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:13:16\n+  --> $DIR/trait-object-bad-parens.rs:11:16\n    |\n LL |     let _: Box<(Auto +) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(dyn Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:15:16\n+  --> $DIR/trait-object-bad-parens.rs:13:16\n    |\n LL |     let _: Box<(dyn Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^ expected a path"}, {"sha": "5bbda4296ca7eef4f9cf078049615d2f4ae69dfc", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n #![allow(bare_trait_objects)]\n \n trait Trait {}"}, {"sha": "a31b7aea8fee6f9d0117aece4e62e45dfa6e2462", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,23 +1,23 @@\n error: parenthesized lifetime bounds are not supported\n-  --> $DIR/trait-object-lifetime-parens.rs:7:21\n+  --> $DIR/trait-object-lifetime-parens.rs:5:21\n    |\n LL | fn f<'a, T: Trait + ('a)>() {}\n    |                     ^^^^ help: remove the parentheses\n \n error: parenthesized lifetime bounds are not supported\n-  --> $DIR/trait-object-lifetime-parens.rs:10:24\n+  --> $DIR/trait-object-lifetime-parens.rs:8:24\n    |\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n error: expected `:`, found `)`\n-  --> $DIR/trait-object-lifetime-parens.rs:11:19\n+  --> $DIR/trait-object-lifetime-parens.rs:9:19\n    |\n LL |     let _: Box<('a) + Trait>;\n    |                   ^ expected `:`\n \n error: chained comparison operators require parentheses\n-  --> $DIR/trait-object-lifetime-parens.rs:11:15\n+  --> $DIR/trait-object-lifetime-parens.rs:9:15\n    |\n LL |     let _: Box<('a) + Trait>;\n    |               ^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let _: Box<('a) + Trait>;\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: expected type, found `'a`\n-  --> $DIR/trait-object-lifetime-parens.rs:11:17\n+  --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n LL |     let _: Box<('a) + Trait>;\n    |         -       ^^"}, {"sha": "b4bb484182466f34774171fde6c02d11cf59d094", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,4 +1,2 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n use std::any:: as foo; //~ ERROR expected identifier, found keyword `as`\n //~^ ERROR: expected one of `::`, `;`, or `as`, found `foo`"}, {"sha": "076440025435044e2c0624cb2687cfbbe24e2272", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `as`\n-  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:3:16\n+  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:16\n    |\n LL | use std::any:: as foo;\n    |                ^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL | use std::any:: r#as foo;\n    |                ^^^^\n \n error: expected one of `::`, `;`, or `as`, found `foo`\n-  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:3:19\n+  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:19\n    |\n LL | use std::any:: as foo;\n    |                   ^^^ expected one of `::`, `;`, or `as` here"}, {"sha": "e80db5372b609437863c499592b15a8de48c67a4", "filename": "src/test/ui/parser/where-clauses-no-bounds-or-predicates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Empty predicate list is OK\n fn equal1<T>(_: &T, _: &T) -> bool where {\n     true"}, {"sha": "b80b0a409065b8b8d382b25124c39c9e5cd7ca16", "filename": "src/test/ui/parser/where-clauses-no-bounds-or-predicates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error: expected `:`, found `{`\n-  --> $DIR/where-clauses-no-bounds-or-predicates.rs:13:23\n+  --> $DIR/where-clauses-no-bounds-or-predicates.rs:11:23\n    |\n LL | fn foo<'a>() where 'a {}\n    |                       ^ expected `:`"}, {"sha": "01b3309fcacb15e92f02dd10f34f2cf606a8842e", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n mod foo {\n   struct Self;\n   //~^ ERROR expected identifier, found keyword `Self`"}, {"sha": "b63de98b8e7021ddd3cd53006f8645712f8dd6bd", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,65 +1,65 @@\n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:4:10\n+  --> $DIR/self_type_keyword.rs:2:10\n    |\n LL |   struct Self;\n    |          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:16:13\n+  --> $DIR/self_type_keyword.rs:14:13\n    |\n LL |         ref Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:18:13\n+  --> $DIR/self_type_keyword.rs:16:13\n    |\n LL |         mut Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:20:17\n+  --> $DIR/self_type_keyword.rs:18:17\n    |\n LL |         ref mut Self => (),\n    |                 ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:24:15\n+  --> $DIR/self_type_keyword.rs:22:15\n    |\n LL |         Foo { Self } => (),\n    |               ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:30:26\n+  --> $DIR/self_type_keyword.rs:28:26\n    |\n LL |     extern crate core as Self;\n    |                          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:35:32\n+  --> $DIR/self_type_keyword.rs:33:32\n    |\n LL |     use std::option::Option as Self;\n    |                                ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:40:11\n+  --> $DIR/self_type_keyword.rs:38:11\n    |\n LL |     trait Self {}\n    |           ^^^^ expected identifier, found keyword\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/self_type_keyword.rs:8:12\n+  --> $DIR/self_type_keyword.rs:6:12\n    |\n LL | struct Bar<'Self>;\n    |            ^^^^^\n \n error: cannot find macro `Self!` in this scope\n-  --> $DIR/self_type_keyword.rs:22:9\n+  --> $DIR/self_type_keyword.rs:20:9\n    |\n LL |         Self!() => (),\n    |         ^^^^\n \n error[E0392]: parameter `'Self` is never used\n-  --> $DIR/self_type_keyword.rs:8:12\n+  --> $DIR/self_type_keyword.rs:6:12\n    |\n LL | struct Bar<'Self>;\n    |            ^^^^^ unused parameter"}, {"sha": "8a9b8e793487c9f6916c2762a6971a4445bf0cda", "filename": "src/test/ui/traits/trait-object-vs-lifetime-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,8 +1,6 @@\n // A few contrived examples where lifetime should (or should not) be parsed as an object type.\n // Lifetimes parsed as types are still rejected later by semantic checks.\n \n-// compile-flags: -Z continue-parse-after-error\n-\n // `'static` is a lifetime, `'static +` is a type, `'a` is a type\n fn g() where\n     'static: 'static,"}, {"sha": "ef5e2407b9a0e996866d0f23b8a0994c9ecbc7c5", "filename": "src/test/ui/traits/trait-object-vs-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23de37657220821cd3cb1392bde22c9f7b27b65b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr?ref=23de37657220821cd3cb1392bde22c9f7b27b65b", "patch": "@@ -1,5 +1,5 @@\n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime-2.rs:9:5\n+  --> $DIR/trait-object-vs-lifetime-2.rs:7:5\n    |\n LL |     dyn 'static +: 'static + Copy,\n    |     ^^^^^^^^^^^^^"}]}