{"sha": "ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "node_id": "C_kwDOAAsO6NoAKGJhMTVjZGQzYzE1OWI1ZmVkYTkyOWI3YWYwZDkyOWUxN2E2ZjVjNmQ", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-04-10T17:03:16Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-04-13T17:31:24Z"}, "message": "Add `usize` cast to `clippy::manual_bits` suggestion", "tree": {"sha": "15779273234210d555cc10c40030f58705313009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15779273234210d555cc10c40030f58705313009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmJXCOwACgkQ/Ny/Ka9k\n1gEhRA/+KVMsWsPhqdomhmvJ0PpiyN/JXLYNplNyovhb3wW6elve4/mL/1glurxI\nn8BNNMWliXWUhoKFUE2J/jxlsOFn9rKlXv79OVknyMkDjAAq2kUNnlgSNDNY4z4u\njyfQRLN6KqrzKTdjx2FfhxZhMHYXoo9QXmVyo8ey6ugEvXLLke1eneuV1NUdUQW4\nphmhhvl9beva/nZIhbOUYyehBYXMyr+Eo5n16DyTmTr3L8Ao5HelyXL/r24Ccqep\nQ2szwdPb+K/89o3b2A39dAKq6UaDR+stuUo2XzlPNwsOni8ZC0B9XHEVL8x6pCHi\ntqKYT2Or6U5k0rnmUAQN3/kN+WqWAxc3jBUiTGZfRD0IRstGLrzXSTGQZS3Gd8Po\nQ5Uw2dCU2iXB/E6Gy47vKmjrPxAtA6DwG9OCp32NyLgaE/o2ZEg1LLMnUGUM7Qxd\nJRViHnhS2QFMS8EA1mvuSYhe90i0ZXsLQ0KpMhLdKpg7BMsv1pIwQhjBp5ZrniJv\nl1kERRTQMQCJKYq2XHsOmT5E2XLuDTnxe0gc3g/dXmWHk3nCwc1peNGYFBSYeTdQ\nzsGhqOepFTvBMJo5nYI2QGCKwbI8BB5PJ94ufBPGlFq2s6VFgxD+A1SA82n2C4lV\nchqHbUyFgF9nz7tP7a1obfvSZcr2wa0PaQhx+3mktkNI174bVdM=\n=KsIi\n-----END PGP SIGNATURE-----", "payload": "tree 15779273234210d555cc10c40030f58705313009\nparent 190f0deac83174de23ff21f980ab514c90e0e59e\nauthor xFrednet <xFrednet@gmail.com> 1649610196 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1649871084 +0200\n\nAdd `usize` cast to `clippy::manual_bits` suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "html_url": "https://github.com/rust-lang/rust/commit/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190f0deac83174de23ff21f980ab514c90e0e59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/190f0deac83174de23ff21f980ab514c90e0e59e", "html_url": "https://github.com/rust-lang/rust/commit/190f0deac83174de23ff21f980ab514c90e0e59e"}], "stats": {"total": 254, "additions": 168, "deletions": 86}, "files": [{"sha": "44ff151ea5269e9acef33e7ce0df4b7765958780", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_opt;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{get_parent_expr, meets_msrv, msrvs};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n@@ -59,16 +59,19 @@ impl<'tcx> LateLintPass<'tcx> for ManualBits {\n             if matches!(resolved_ty.kind(), ty::Int(_) | ty::Uint(_));\n             if let ExprKind::Lit(lit) = &other_expr.kind;\n             if let LitKind::Int(8, _) = lit.node;\n-\n             then {\n+                let mut app = Applicability::MachineApplicable;\n+                let ty_snip = snippet_with_applicability(cx, real_ty.span, \"..\", &mut app);\n+                let sugg = create_sugg(cx, expr, format!(\"{ty_snip}::BITS\"));\n+\n                 span_lint_and_sugg(\n                     cx,\n                     MANUAL_BITS,\n                     expr.span,\n                     \"usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\",\n                     \"consider using\",\n-                    format!(\"{}::BITS\", snippet_opt(cx, real_ty.span).unwrap()),\n-                    Applicability::MachineApplicable,\n+                    sugg,\n+                    app,\n                 );\n             }\n         }\n@@ -108,3 +111,36 @@ fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<\n         }\n     }\n }\n+\n+fn create_sugg(cx: &LateContext<'_>, expr: &Expr<'_>, base_sugg: String) -> String {\n+    if let Some(parent_expr) = get_parent_expr(cx, expr) {\n+        if is_ty_conversion(parent_expr) {\n+            return base_sugg;\n+        }\n+\n+        // These expressions have precedence over casts, the suggestion therefore\n+        // needs to be wrapped into parentheses\n+        match parent_expr.kind {\n+            ExprKind::Unary(..) | ExprKind::AddrOf(..) | ExprKind::MethodCall(..) => {\n+                return format!(\"({base_sugg} as usize)\");\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    format!(\"{base_sugg} as usize\")\n+}\n+\n+fn is_ty_conversion(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Cast(..) = expr.kind {\n+        true\n+    } else if let ExprKind::MethodCall(path, [_], _) = expr.kind\n+        && path.ident.name == rustc_span::sym::try_into\n+    {\n+        // This is only called for `usize` which implements `TryInto`. Therefore,\n+        // we don't have to check here if `self` implements the `TryInto` trait.\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "386360dbdcdb8af4e1b91f9039343a26e7d5601e", "filename": "tests/ui/manual_bits.fixed", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.fixed?ref=ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "patch": "@@ -1,38 +1,44 @@\n // run-rustfix\n \n #![warn(clippy::manual_bits)]\n-#![allow(clippy::no_effect, path_statements, unused_must_use, clippy::unnecessary_operation)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::useless_conversion,\n+    path_statements,\n+    unused_must_use,\n+    clippy::unnecessary_operation\n+)]\n \n use std::mem::{size_of, size_of_val};\n \n fn main() {\n-    i8::BITS;\n-    i16::BITS;\n-    i32::BITS;\n-    i64::BITS;\n-    i128::BITS;\n-    isize::BITS;\n-\n-    u8::BITS;\n-    u16::BITS;\n-    u32::BITS;\n-    u64::BITS;\n-    u128::BITS;\n-    usize::BITS;\n-\n-    i8::BITS;\n-    i16::BITS;\n-    i32::BITS;\n-    i64::BITS;\n-    i128::BITS;\n-    isize::BITS;\n-\n-    u8::BITS;\n-    u16::BITS;\n-    u32::BITS;\n-    u64::BITS;\n-    u128::BITS;\n-    usize::BITS;\n+    i8::BITS as usize;\n+    i16::BITS as usize;\n+    i32::BITS as usize;\n+    i64::BITS as usize;\n+    i128::BITS as usize;\n+    isize::BITS as usize;\n+\n+    u8::BITS as usize;\n+    u16::BITS as usize;\n+    u32::BITS as usize;\n+    u64::BITS as usize;\n+    u128::BITS as usize;\n+    usize::BITS as usize;\n+\n+    i8::BITS as usize;\n+    i16::BITS as usize;\n+    i32::BITS as usize;\n+    i64::BITS as usize;\n+    i128::BITS as usize;\n+    isize::BITS as usize;\n+\n+    u8::BITS as usize;\n+    u16::BITS as usize;\n+    u32::BITS as usize;\n+    u64::BITS as usize;\n+    u128::BITS as usize;\n+    usize::BITS as usize;\n \n     size_of::<usize>() * 4;\n     4 * size_of::<usize>();\n@@ -42,7 +48,12 @@ fn main() {\n     size_of_val(&0u32) * 8;\n \n     type Word = u32;\n-    Word::BITS;\n+    Word::BITS as usize;\n     type Bool = bool;\n     size_of::<Bool>() * 8;\n+\n+    let _: u32 = u128::BITS as u32;\n+    let _: u32 = u128::BITS.try_into().unwrap();\n+    let _ = (u128::BITS as usize).pow(5);\n+    let _ = &(u128::BITS as usize);\n }"}, {"sha": "62638f047eb015b299d9b8e45afd4489b9b9a364", "filename": "tests/ui/manual_bits.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.rs?ref=ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::manual_bits)]\n-#![allow(clippy::no_effect, path_statements, unused_must_use, clippy::unnecessary_operation)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::useless_conversion,\n+    path_statements,\n+    unused_must_use,\n+    clippy::unnecessary_operation\n+)]\n \n use std::mem::{size_of, size_of_val};\n \n@@ -45,4 +51,9 @@ fn main() {\n     size_of::<Word>() * 8;\n     type Bool = bool;\n     size_of::<Bool>() * 8;\n+\n+    let _: u32 = (size_of::<u128>() * 8) as u32;\n+    let _: u32 = (size_of::<u128>() * 8).try_into().unwrap();\n+    let _ = (size_of::<u128>() * 8).pow(5);\n+    let _ = &(size_of::<u128>() * 8);\n }"}, {"sha": "69c591a203d3f2c03eb3ccda6690f35192977126", "filename": "tests/ui/manual_bits.stderr", "status": "modified", "additions": 75, "deletions": 51, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba15cdd3c159b5feda929b7af0d929e17a6f5c6d/tests%2Fui%2Fmanual_bits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.stderr?ref=ba15cdd3c159b5feda929b7af0d929e17a6f5c6d", "patch": "@@ -1,154 +1,178 @@\n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:9:5\n+  --> $DIR/manual_bits.rs:15:5\n    |\n LL |     size_of::<i8>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS as usize`\n    |\n    = note: `-D clippy::manual-bits` implied by `-D warnings`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:10:5\n+  --> $DIR/manual_bits.rs:16:5\n    |\n LL |     size_of::<i16>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:11:5\n+  --> $DIR/manual_bits.rs:17:5\n    |\n LL |     size_of::<i32>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:12:5\n+  --> $DIR/manual_bits.rs:18:5\n    |\n LL |     size_of::<i64>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:13:5\n+  --> $DIR/manual_bits.rs:19:5\n    |\n LL |     size_of::<i128>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:14:5\n+  --> $DIR/manual_bits.rs:20:5\n    |\n LL |     size_of::<isize>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:16:5\n+  --> $DIR/manual_bits.rs:22:5\n    |\n LL |     size_of::<u8>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:17:5\n+  --> $DIR/manual_bits.rs:23:5\n    |\n LL |     size_of::<u16>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:18:5\n+  --> $DIR/manual_bits.rs:24:5\n    |\n LL |     size_of::<u32>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:19:5\n+  --> $DIR/manual_bits.rs:25:5\n    |\n LL |     size_of::<u64>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:20:5\n+  --> $DIR/manual_bits.rs:26:5\n    |\n LL |     size_of::<u128>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:21:5\n+  --> $DIR/manual_bits.rs:27:5\n    |\n LL |     size_of::<usize>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:23:5\n+  --> $DIR/manual_bits.rs:29:5\n    |\n LL |     8 * size_of::<i8>();\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:24:5\n+  --> $DIR/manual_bits.rs:30:5\n    |\n LL |     8 * size_of::<i16>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:25:5\n+  --> $DIR/manual_bits.rs:31:5\n    |\n LL |     8 * size_of::<i32>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:26:5\n+  --> $DIR/manual_bits.rs:32:5\n    |\n LL |     8 * size_of::<i64>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:27:5\n+  --> $DIR/manual_bits.rs:33:5\n    |\n LL |     8 * size_of::<i128>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:28:5\n+  --> $DIR/manual_bits.rs:34:5\n    |\n LL |     8 * size_of::<isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:30:5\n+  --> $DIR/manual_bits.rs:36:5\n    |\n LL |     8 * size_of::<u8>();\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:31:5\n+  --> $DIR/manual_bits.rs:37:5\n    |\n LL |     8 * size_of::<u16>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:32:5\n+  --> $DIR/manual_bits.rs:38:5\n    |\n LL |     8 * size_of::<u32>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:33:5\n+  --> $DIR/manual_bits.rs:39:5\n    |\n LL |     8 * size_of::<u64>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:34:5\n+  --> $DIR/manual_bits.rs:40:5\n    |\n LL |     8 * size_of::<u128>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:35:5\n+  --> $DIR/manual_bits.rs:41:5\n    |\n LL |     8 * size_of::<usize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:45:5\n+  --> $DIR/manual_bits.rs:51:5\n    |\n LL |     size_of::<Word>() * 8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `Word::BITS`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `Word::BITS as usize`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:55:18\n+   |\n+LL |     let _: u32 = (size_of::<u128>() * 8) as u32;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:56:18\n+   |\n+LL |     let _: u32 = (size_of::<u128>() * 8).try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:57:13\n+   |\n+LL |     let _ = (size_of::<u128>() * 8).pow(5);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(u128::BITS as usize)`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:58:14\n+   |\n+LL |     let _ = &(size_of::<u128>() * 8);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(u128::BITS as usize)`\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 29 previous errors\n "}]}