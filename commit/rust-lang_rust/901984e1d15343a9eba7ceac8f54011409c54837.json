{"sha": "901984e1d15343a9eba7ceac8f54011409c54837", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTk4NGUxZDE1MzQzYTllYmE3Y2VhYzhmNTQwMTE0MDljNTQ4Mzc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-02T20:18:38Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-04T18:38:10Z"}, "message": "Builder.build_new_block -> Builder.build_sibling_block", "tree": {"sha": "ad0845069a830e483d5e511a1980f53c048ebad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0845069a830e483d5e511a1980f53c048ebad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/901984e1d15343a9eba7ceac8f54011409c54837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/901984e1d15343a9eba7ceac8f54011409c54837", "html_url": "https://github.com/rust-lang/rust/commit/901984e1d15343a9eba7ceac8f54011409c54837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/901984e1d15343a9eba7ceac8f54011409c54837/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "html_url": "https://github.com/rust-lang/rust/commit/81e8137b0dc436aad7fda9bffc6b2c2da67a353a"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "33e6cc82ad78898bf9e73f524e1a9d950b62936e", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -80,18 +80,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn build_new_block<'b>(&self, name: &'b str) -> Builder<'a, 'tcx> {\n-        let builder = Builder::with_ccx(self.ccx);\n-        let llbb = unsafe {\n-            let name = CString::new(name).unwrap();\n-            llvm::LLVMAppendBasicBlockInContext(\n-                self.ccx.llcx(),\n-                self.llfn(),\n-                name.as_ptr()\n-            )\n-        };\n-        builder.position_at_end(llbb);\n-        builder\n+    pub fn build_sibling_block<'b>(&self, name: &'b str) -> Builder<'a, 'tcx> {\n+        Builder::new_block(self.ccx, self.llfn(), name)\n     }\n \n     pub fn sess(&self) -> &Session {"}, {"sha": "ae1086828b54226bc8cfd72e8d352bd9f5698a2f", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -370,7 +370,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let llfn = callee.reify(bcx.ccx);\n     let llret;\n     if let Some(landing_pad) = self_scope.landing_pad {\n-        let normal_bcx = bcx.build_new_block(\"normal-return\");\n+        let normal_bcx = bcx.build_sibling_block(\"normal-return\");\n         llret = bcx.invoke(llfn, &llargs[..], normal_bcx.llbb(), landing_pad, None);\n         bcx = normal_bcx;\n     } else {"}, {"sha": "5d89a67d3fd80890029273f3c6b01bfc64c406ac", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> DropValue<'tcx> {\n     /// This should only be called once per function, as it creates an alloca for the landingpad.\n     fn get_landing_pad<'a>(&self, bcx: &Builder<'a, 'tcx>) -> BasicBlockRef {\n         debug!(\"get_landing_pad\");\n-        let bcx = bcx.build_new_block(\"cleanup_unwind\");\n+        let bcx = bcx.build_sibling_block(\"cleanup_unwind\");\n         let llpersonality = bcx.ccx.eh_personality();\n         bcx.set_personality_fn(llpersonality);\n "}, {"sha": "ab048ae6d9de27d2a5a338c37adc9085f4ee297c", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -263,7 +263,7 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n             let llret;\n             let args = &[ptr.llval, ptr.llextra][..1 + ptr.has_extra() as usize];\n             if let Some(landing_pad) = contents_scope.landing_pad {\n-                let normal_bcx = bcx.build_new_block(\"normal-return\");\n+                let normal_bcx = bcx.build_sibling_block(\"normal-return\");\n                 llret = bcx.invoke(callee.reify(ccx), args, normal_bcx.llbb(), landing_pad, None);\n                 bcx = normal_bcx;\n             } else {\n@@ -503,15 +503,15 @@ fn drop_structural_ty<'a, 'tcx>(cx: Builder<'a, 'tcx>, ptr: LvalueRef<'tcx>) ->\n                         // from the outer function, and any other use case will only\n                         // call this for an already-valid enum in which case the `ret\n                         // void` will never be hit.\n-                        let ret_void_cx = cx.build_new_block(\"enum-iter-ret-void\");\n+                        let ret_void_cx = cx.build_sibling_block(\"enum-iter-ret-void\");\n                         ret_void_cx.ret_void();\n                         let llswitch = cx.switch(lldiscrim_a, ret_void_cx.llbb(), n_variants);\n-                        let next_cx = cx.build_new_block(\"enum-iter-next\");\n+                        let next_cx = cx.build_sibling_block(\"enum-iter-next\");\n \n                         for (i, variant) in adt.variants.iter().enumerate() {\n                             let variant_cx_name = format!(\"enum-iter-variant-{}\",\n                                 &variant.disr_val.to_string());\n-                            let variant_cx = cx.build_new_block(&variant_cx_name);\n+                            let variant_cx = cx.build_sibling_block(&variant_cx_name);\n                             let case_val = adt::trans_case(&cx, t, Disr::from(variant.disr_val));\n                             variant_cx.add_case(llswitch, case_val, variant_cx.llbb());\n                             iter_variant(&variant_cx, ptr, &adt, i, substs);"}, {"sha": "3848f3e0f6fdf1d512b531e9e5516277091ade95", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -718,10 +718,10 @@ fn trans_msvc_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n         bcx.set_personality_fn(bcx.ccx.eh_personality());\n \n-        let normal = bcx.build_new_block(\"normal\");\n-        let catchswitch = bcx.build_new_block(\"catchswitch\");\n-        let catchpad = bcx.build_new_block(\"catchpad\");\n-        let caught = bcx.build_new_block(\"caught\");\n+        let normal = bcx.build_sibling_block(\"normal\");\n+        let catchswitch = bcx.build_sibling_block(\"catchswitch\");\n+        let catchpad = bcx.build_sibling_block(\"catchpad\");\n+        let caught = bcx.build_sibling_block(\"caught\");\n \n         let func = llvm::get_param(bcx.llfn(), 0);\n         let data = llvm::get_param(bcx.llfn(), 1);\n@@ -837,8 +837,8 @@ fn trans_gnu_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         // expected to be `*mut *mut u8` for this to actually work, but that's\n         // managed by the standard library.\n \n-        let then = bcx.build_new_block(\"then\");\n-        let catch = bcx.build_new_block(\"catch\");\n+        let then = bcx.build_sibling_block(\"then\");\n+        let catch = bcx.build_sibling_block(\"catch\");\n \n         let func = llvm::get_param(bcx.llfn(), 0);\n         let data = llvm::get_param(bcx.llfn(), 1);"}, {"sha": "603ded1c2d4ac1ac5d55358b728326b71738e2a3", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -218,9 +218,9 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     let block_bcxs: IndexVec<mir::BasicBlock, BasicBlockRef> =\n         mir.basic_blocks().indices().map(|bb| {\n             if bb == mir::START_BLOCK {\n-                bcx.build_new_block(\"start\").llbb()\n+                bcx.build_sibling_block(\"start\").llbb()\n             } else {\n-                bcx.build_new_block(&format!(\"{:?}\", bb)).llbb()\n+                bcx.build_sibling_block(&format!(\"{:?}\", bb)).llbb()\n             }\n         }).collect();\n "}, {"sha": "cbcbb02bdc89017ebb573ad6a9c06b57f2d94620", "filename": "src/librustc_trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901984e1d15343a9eba7ceac8f54011409c54837/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=901984e1d15343a9eba7ceac8f54011409c54837", "patch": "@@ -29,9 +29,9 @@ pub fn slice_for_each<'a, 'tcx, F>(\n         bcx.inbounds_gep(a, &[b])\n     };\n \n-    let body_bcx = bcx.build_new_block(\"slice_loop_body\");\n-    let next_bcx = bcx.build_new_block(\"slice_loop_next\");\n-    let header_bcx = bcx.build_new_block(\"slice_loop_header\");\n+    let body_bcx = bcx.build_sibling_block(\"slice_loop_body\");\n+    let next_bcx = bcx.build_sibling_block(\"slice_loop_next\");\n+    let header_bcx = bcx.build_sibling_block(\"slice_loop_header\");\n \n     let start = if zst {\n         C_uint(bcx.ccx, 0usize)"}]}