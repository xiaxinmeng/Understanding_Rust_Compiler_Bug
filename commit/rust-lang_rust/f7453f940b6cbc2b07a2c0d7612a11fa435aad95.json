{"sha": "f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDUzZjk0MGI2Y2JjMmIwN2EyYzBkNzYxMmExMWZhNDM1YWFkOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-14T01:04:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-14T01:04:37Z"}, "message": "Auto merge of #22948 - rprichard:simple-panic-opt, r=alexcrichton\n\nReduce code size overhead from core::panicking::panic\r\n\r\ncore::panicking::panic currently creates an Arguments structure using\r\nformat_args!(\"{}\", expr), which formats the expr str using the Display::fmt.\r\nDisplay::fmt pulls in Formatter::pad, which then also pulls in string-related\r\ncode for truncation and padding.\r\n\r\nIf core::panicking::panic instead creates an Arguments structure with a string\r\npiece, it is possible that the Display::fmt function for str can be optimized\r\nout of the program.\r\n\r\nIn my testing with a 32-bit x86 bare metal program, the change tended to save\r\nbetween ~100 bytes and ~5500 bytes, depending on what other panic* functions\r\nthe program invokes and whether the panic_fmt lang item uses the Arguments\r\nvalue.", "tree": {"sha": "d5ecadd4a52db48d83a6dbdf4f85d1de8a6c08bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ecadd4a52db48d83a6dbdf4f85d1de8a6c08bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "html_url": "https://github.com/rust-lang/rust/commit/f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7453f940b6cbc2b07a2c0d7612a11fa435aad95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4be02b80a3dd27bce20870958fe0aef7e7336d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4be02b80a3dd27bce20870958fe0aef7e7336d", "html_url": "https://github.com/rust-lang/rust/commit/3e4be02b80a3dd27bce20870958fe0aef7e7336d"}, {"sha": "9c0057df58fbc4c79720f9a0104dda46d4d7074e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0057df58fbc4c79720f9a0104dda46d4d7074e", "html_url": "https://github.com/rust-lang/rust/commit/9c0057df58fbc4c79720f9a0104dda46d4d7074e"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "377b5b57ae12c2b967a9fe5b66c087ba0271d284", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7453f940b6cbc2b07a2c0d7612a11fa435aad95/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7453f940b6cbc2b07a2c0d7612a11fa435aad95/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "patch": "@@ -35,8 +35,14 @@ use fmt;\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"panic\"]\n pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n+    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n+    // reduce size overhead. The format_args! macro uses str's Display trait to\n+    // write expr, which calls Formatter::pad, which must accommodate string\n+    // truncation and padding (even though none is used here). Using\n+    // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n+    // output binary, saving up to a few kilobytes.\n     let (expr, file, line) = *expr_file_line;\n-    panic_fmt(format_args!(\"{}\", expr), &(file, line))\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line))\n }\n \n #[cold] #[inline(never)]"}]}