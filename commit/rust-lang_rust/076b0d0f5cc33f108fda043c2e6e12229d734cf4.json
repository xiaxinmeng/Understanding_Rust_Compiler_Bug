{"sha": "076b0d0f5cc33f108fda043c2e6e12229d734cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NmIwZDBmNWNjMzNmMTA4ZmRhMDQzYzJlNmUxMjIyOWQ3MzRjZjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-24T19:55:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:23Z"}, "message": "more nits + typos", "tree": {"sha": "b0a5482cc869a61f482a7d0fa26999b50612c3a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a5482cc869a61f482a7d0fa26999b50612c3a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076b0d0f5cc33f108fda043c2e6e12229d734cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076b0d0f5cc33f108fda043c2e6e12229d734cf4", "html_url": "https://github.com/rust-lang/rust/commit/076b0d0f5cc33f108fda043c2e6e12229d734cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076b0d0f5cc33f108fda043c2e6e12229d734cf4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9217909518cecc3b8636e970bfcb6c0be231e3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9217909518cecc3b8636e970bfcb6c0be231e3f2", "html_url": "https://github.com/rust-lang/rust/commit/9217909518cecc3b8636e970bfcb6c0be231e3f2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4e609460c1f70aeb92ac635c032b79a7e23ae7f1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=076b0d0f5cc33f108fda043c2e6e12229d734cf4", "patch": "@@ -598,7 +598,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        // Now take member constraints into account. \n+        // Now take member constraints into account.\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.indices(scc_a) {\n             self.apply_member_constraint(\n@@ -1560,15 +1560,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let choice_regions = member_constraints.choice_regions(m_c_i);\n             debug!(\"check_member_constraint: choice_regions={:?}\", choice_regions);\n \n-            // did the pick-region wind up equal to any of the option regions?\n+            // Did the member region wind up equal to any of the option regions?\n             if let Some(o) = choice_regions.iter().find(|&&o_r| {\n                 self.eval_equal(o_r, m_c.member_region_vid)\n             }) {\n                 debug!(\"check_member_constraint: evaluated as equal to {:?}\", o);\n                 continue;\n             }\n \n-            // if not, report an error\n+            // If not, report an error.\n             let region_scope_tree = &infcx.tcx.region_scope_tree(mir_def_id);\n             let member_region = infcx.tcx.mk_region(ty::ReVar(member_region_vid));\n             opaque_types::unexpected_hidden_region_diagnostic("}, {"sha": "cdbbe1d02bd92edd54450409dd9ae907ef6b6a08", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=076b0d0f5cc33f108fda043c2e6e12229d734cf4", "patch": "@@ -2519,9 +2519,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             let closure_constraints = QueryRegionConstraints {\n                 outlives: closure_region_requirements.apply_requirements(tcx, def_id, substs),\n \n-                // Presently, closures never propagate pick\n+                // Presently, closures never propagate member\n                 // constraints to their parents -- they are enforced\n-                // locally.  This is largely a non-issue as pick\n+                // locally.  This is largely a non-issue as member\n                 // constraints only come from `-> impl Trait` and\n                 // friends which don't appear (thus far...) in\n                 // closures."}, {"sha": "e6a09e7f873ea7d4f04c8a56ce484c412435e460", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=076b0d0f5cc33f108fda043c2e6e12229d734cf4", "patch": "@@ -570,7 +570,7 @@ declare_features! (\n     // Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n-    // Allows impl trait with multiple unrelated lifetimes\n+    // Allows `impl Trait` with multiple unrelated lifetimes.\n     (active, member_constraints, \"1.37.0\", Some(61977), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "a103e21e047e5ec43696f6bb66f103df6f8f8b9d", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-existential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs?ref=076b0d0f5cc33f108fda043c2e6e12229d734cf4", "patch": "@@ -10,7 +10,7 @@ trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n-// those are the types that appear inth e original values.\n+// those are the types that appear in the original values.\n \n existential type Foo<'a, 'b>: Trait<'a, 'b>;\n "}, {"sha": "43f8bd71e4108c0ac0f9546f3fe2e225a17001c6", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076b0d0f5cc33f108fda043c2e6e12229d734cf4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs?ref=076b0d0f5cc33f108fda043c2e6e12229d734cf4", "patch": "@@ -9,7 +9,7 @@ trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n-// those are the types that appear inth e original values.\n+// those are the types that appear in the original values.\n \n fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n     // In this simple case, you have a hidden type `(&'0 u8, &'1 u8)` and constraints like"}]}