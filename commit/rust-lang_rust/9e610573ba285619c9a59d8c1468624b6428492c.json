{"sha": "9e610573ba285619c9a59d8c1468624b6428492c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjEwNTczYmEyODU2MTljOWE1OWQ4YzE0Njg2MjRiNjQyODQ5MmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-20T01:36:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:20:58Z"}, "message": "librustc: Remove remaining uses of `&fn()` in favor of `||`.", "tree": {"sha": "ef04c2714fc27e8af37303cd287f342151ae7037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef04c2714fc27e8af37303cd287f342151ae7037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e610573ba285619c9a59d8c1468624b6428492c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e610573ba285619c9a59d8c1468624b6428492c", "html_url": "https://github.com/rust-lang/rust/commit/9e610573ba285619c9a59d8c1468624b6428492c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e610573ba285619c9a59d8c1468624b6428492c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406813957b65a1627e9b26f73019868a7da1ae79", "url": "https://api.github.com/repos/rust-lang/rust/commits/406813957b65a1627e9b26f73019868a7da1ae79", "html_url": "https://github.com/rust-lang/rust/commit/406813957b65a1627e9b26f73019868a7da1ae79"}], "stats": {"total": 316, "additions": 163, "deletions": 153}, "files": [{"sha": "99392964e7aadde9d6d6cf6adec5ce5c98db3068", "filename": "doc/po/ja/rust.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Fpo%2Fja%2Frust.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Fpo%2Fja%2Frust.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Frust.md.po?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -5383,7 +5383,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/rust.md:2849\n msgid \"\"\n-\"type Binop<'self> = &'self fn(int,int) -> int; let bo: Binop = add; x = \"\n+\"type Binop<'self> = 'self |int,int| -> int; let bo: Binop = add; x = \"\n \"bo(5,7); ~~~~~~~~\"\n msgstr \"\"\n "}, {"sha": "1914526cb921f6fcccf297d64bf4f66262ef5be5", "filename": "doc/po/rust.md.pot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Fpo%2Frust.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Fpo%2Frust.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Frust.md.pot?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -5370,7 +5370,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/rust.md:2849\n msgid \"\"\n-\"type Binop<'self> = &'self fn(int,int) -> int; let bo: Binop = add; x = \"\n+\"type Binop<'self> = 'self |int,int| -> int; let bo: Binop = add; x = \"\n \"bo(5,7); ~~~~~~~~\"\n msgstr \"\"\n "}, {"sha": "bfc18a8473bc360479c4e81a2bcae1f81ea69984", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -3194,7 +3194,7 @@ fn add(x: int, y: int) -> int {\n \n let mut x = add(5,7);\n \n-type Binop<'self> = &'self fn(int,int) -> int;\n+type Binop<'self> = 'self |int,int| -> int;\n let bo: Binop = add;\n x = bo(5,7);\n ~~~~"}, {"sha": "175eaa2a8db818f53a36668fa236689267c4b7a9", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -15,7 +15,7 @@ use std::cmp::{Eq, Ord};\n use std::util::swap;\n use std::vec;\n \n-type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;\n+type Le<'self, T> = 'self |v1: &T, v2: &T| -> bool;\n \n /**\n  * Merge sort. Returns a new vector containing the sorted list."}, {"sha": "460f1ff1262ff974ad48271410616da69cb95f32", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -13,7 +13,7 @@ use syntax::fold::ast_fold;\n use syntax::{ast, fold, attr};\n \n struct Context<'self> {\n-    in_cfg: &'self fn(attrs: &[ast::Attribute]) -> bool,\n+    in_cfg: 'self |attrs: &[ast::Attribute]| -> bool,\n }\n \n // Support conditional compilation by transforming the AST, stripping out"}, {"sha": "dd70d29ec5b2da5ec5a99a82b912da247e6b6525", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -74,7 +74,7 @@ fn lookup_hash(d: ebml::Doc, eq_fn: |&[u8]| -> bool, hash: u64) ->\n     ret\n }\n \n-pub type GetCrateDataCb<'self> = &'self fn(ast::CrateNum) -> Cmd;\n+pub type GetCrateDataCb<'self> = 'self |ast::CrateNum| -> Cmd;\n \n pub fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n     fn eq_item(bytes: &[u8], item_id: int) -> bool {\n@@ -528,7 +528,7 @@ struct EachItemContext<'self> {\n     cdata: Cmd,\n     get_crate_data: GetCrateDataCb<'self>,\n     path_builder: &'self mut ~str,\n-    callback: &'self fn(&str, DefLike, ast::visibility) -> bool,\n+    callback: 'self |&str, DefLike, ast::visibility| -> bool,\n }\n \n impl<'self> EachItemContext<'self> {\n@@ -901,11 +901,11 @@ pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> ast_map::path {\n     item_path(lookup_item(id, cdata.data))\n }\n \n-pub type decode_inlined_item<'self> = &'self fn(\n-    cdata: @cstore::crate_metadata,\n-    tcx: ty::ctxt,\n-    path: ast_map::path,\n-    par_doc: ebml::Doc) -> Option<ast::inlined_item>;\n+pub type decode_inlined_item<'self> = 'self |cdata: @cstore::crate_metadata,\n+                                             tcx: ty::ctxt,\n+                                             path: ast_map::path,\n+                                             par_doc: ebml::Doc|\n+                                             -> Option<ast::inlined_item>;\n \n pub fn maybe_get_item_ast(cdata: Cmd, tcx: ty::ctxt,\n                           id: ast::NodeId,"}, {"sha": "c22f05d249cdeb41d5a7bc7823c7db18980642bd", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -52,10 +52,10 @@ use std::cast;\n // used by astencode:\n type abbrev_map = @mut HashMap<ty::t, tyencode::ty_abbrev>;\n \n-pub type encode_inlined_item<'self> = &'self fn(ecx: &EncodeContext,\n-                                   ebml_w: &mut writer::Encoder,\n-                                   path: &[ast_map::path_elt],\n-                                   ii: ast::inlined_item);\n+pub type encode_inlined_item<'self> = 'self |ecx: &EncodeContext,\n+                                             ebml_w: &mut writer::Encoder,\n+                                             path: &[ast_map::path_elt],\n+                                             ii: ast::inlined_item|;\n \n pub struct EncodeParams<'self> {\n     diag: @mut span_handler,"}, {"sha": "4a27450bb43d8de9dd721838767ed55cf8e49062", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -23,7 +23,7 @@ pub enum FileMatch { FileMatches, FileDoesntMatch }\n \n /// Functions with type `pick` take a parent directory as well as\n /// a file found in that directory.\n-pub type pick<'self> = &'self fn(path: &Path) -> FileMatch;\n+pub type pick<'self> = 'self |path: &Path| -> FileMatch;\n \n pub fn pick_file(file: Path, path: &Path) -> Option<Path> {\n     if path.filename() == Some(file.as_vec()) {"}, {"sha": "27bca78b7b7255ae0ce4119d2c7460e44e2e4c09", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -54,7 +54,7 @@ pub enum DefIdSource {\n     RegionParameter,\n }\n type conv_did<'self> =\n-    &'self fn(source: DefIdSource, ast::DefId) -> ast::DefId;\n+    'self |source: DefIdSource, ast::DefId| -> ast::DefId;\n \n pub struct PState<'self> {\n     data: &'self [u8],"}, {"sha": "27d1e887bd32fd06ec03355928bb7b94050f1a80", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -477,7 +477,7 @@ fn assert_is_binding_or_wild(bcx: @mut Block, p: @ast::Pat) {\n     }\n }\n \n-type enter_pat<'self> = &'self fn(@ast::Pat) -> Option<~[@ast::Pat]>;\n+type enter_pat<'self> = 'self |@ast::Pat| -> Option<~[@ast::Pat]>;\n \n fn enter_match<'r>(bcx: @mut Block,\n                        dm: DefMap,"}, {"sha": "ea9690ce40609cb427c347ab0af6f27596d3df21", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -669,7 +669,8 @@ pub fn compare_scalar_values(cx: @mut Block,\n     }\n }\n \n-pub type val_and_ty_fn<'self> = &'self fn(@mut Block, ValueRef, ty::t) -> @mut Block;\n+pub type val_and_ty_fn<'self> = 'self |@mut Block, ValueRef, ty::t|\n+                                       -> @mut Block;\n \n pub fn load_inbounds(cx: @mut Block, p: ValueRef, idxs: &[uint]) -> ValueRef {\n     return Load(cx, GEPi(cx, p, idxs));"}, {"sha": "3eef1267429c74f4164b98544b3fa3c3883eab8b", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -642,7 +642,8 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     return inf;\n }\n \n-pub type glue_helper<'self> = &'self fn(@mut Block, ValueRef, ty::t) -> @mut Block;\n+pub type glue_helper<'self> = 'self |@mut Block, ValueRef, ty::t|\n+                                     -> @mut Block;\n \n pub fn declare_generic_glue(ccx: &mut CrateContext, t: ty::t, llfnty: Type,\n                             name: &str) -> ValueRef {"}, {"sha": "82615b1e119a08bb46fe25942023973f3e474074", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -539,7 +539,8 @@ pub fn get_base_and_len(bcx: @mut Block, llval: ValueRef, vec_ty: ty::t) -> (Val\n     }\n }\n \n-pub type iter_vec_block<'self> = &'self fn(@mut Block, ValueRef, ty::t) -> @mut Block;\n+pub type iter_vec_block<'self> = 'self |@mut Block, ValueRef, ty::t|\n+                                        -> @mut Block;\n \n pub fn iter_vec_loop(bcx: @mut Block,\n                      data_ptr: ValueRef,"}, {"sha": "2f35121dc02aea1be251d5568920e145df6d4f13", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -224,7 +224,7 @@ pub fn super_fold_trait_store<T:TypeFolder>(this: &mut T,\n \n pub struct BottomUpFolder<'self> {\n     tcx: ty::ctxt,\n-    fldop: &'self fn(ty::t) -> ty::t,\n+    fldop: 'self |ty::t| -> ty::t,\n }\n \n impl<'self> TypeFolder for BottomUpFolder<'self> {\n@@ -241,14 +241,14 @@ impl<'self> TypeFolder for BottomUpFolder<'self> {\n \n pub struct RegionFolder<'self> {\n     tcx: ty::ctxt,\n-    fld_t: &'self fn(ty::t) -> ty::t,\n-    fld_r: &'self fn(ty::Region) -> ty::Region,\n+    fld_t: 'self |ty::t| -> ty::t,\n+    fld_r: 'self |ty::Region| -> ty::Region,\n }\n \n impl<'self> RegionFolder<'self> {\n     pub fn general(tcx: ty::ctxt,\n-                   fld_r: &'self fn(ty::Region) -> ty::Region,\n-                   fld_t: &'self fn(ty::t) -> ty::t)\n+                   fld_r: 'self |ty::Region| -> ty::Region,\n+                   fld_t: 'self |ty::t| -> ty::t)\n                    -> RegionFolder<'self> {\n         RegionFolder {\n             tcx: tcx,\n@@ -257,8 +257,7 @@ impl<'self> RegionFolder<'self> {\n         }\n     }\n \n-    pub fn regions(tcx: ty::ctxt,\n-                   fld_r: &'self fn(ty::Region) -> ty::Region)\n+    pub fn regions(tcx: ty::ctxt, fld_r: 'self |ty::Region| -> ty::Region)\n                    -> RegionFolder<'self> {\n         fn noop(t: ty::t) -> ty::t { t }\n "}, {"sha": "7bf5eacb3d5c47184fec53a9c3c3fc0764a16c50", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -88,7 +88,7 @@ pub fn relate_nested_regions(tcx: ty::ctxt,\n     struct RegionRelator<'self> {\n         tcx: ty::ctxt,\n         stack: ~[ty::Region],\n-        relate_op: &'self fn(ty::Region, ty::Region),\n+        relate_op: 'self |ty::Region, ty::Region|,\n     }\n \n     // FIXME(#10151) -- Define more precisely when a region is"}, {"sha": "dbf11ab68bcae4936e66e98fe7459af3211f9071", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -52,7 +52,7 @@ pub trait LatticeValue {\n }\n \n pub type LatticeOp<'self, T> =\n-    &'self fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n+    'self |cf: &CombineFields, a: &T, b: &T| -> cres<T>;\n \n impl LatticeValue for ty::t {\n     fn sub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n@@ -407,7 +407,7 @@ pub fn super_lattice_tys<L:LatticeDir+TyLatticeDir+Combine>(this: &L,\n     }\n }\n \n-pub type LatticeDirOp<'self, T> = &'self fn(a: &T, b: &T) -> cres<T>;\n+pub type LatticeDirOp<'self, T> = 'self |a: &T, b: &T| -> cres<T>;\n \n #[deriving(Clone)]\n pub enum LatticeVarResult<V,T> {"}, {"sha": "28fe067293b8998fee22e81b26bea40473c9bc02", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -61,7 +61,7 @@ pub fn field_exprs(fields: ~[ast::Field]) -> ~[@ast::Expr] {\n }\n \n struct LoopQueryVisitor<'self> {\n-    p: &'self fn(&ast::Expr_) -> bool,\n+    p: 'self |&ast::Expr_| -> bool,\n     flag: bool,\n }\n \n@@ -89,7 +89,7 @@ pub fn loop_query(b: &ast::Block, p: |&ast::Expr_| -> bool) -> bool {\n }\n \n struct BlockQueryVisitor<'self> {\n-    p: &'self fn(@ast::Expr) -> bool,\n+    p: 'self |@ast::Expr| -> bool,\n     flag: bool,\n }\n "}, {"sha": "b191eb37af1bc0fadc14c6011983a96f6b3dd416", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -148,8 +148,8 @@ fn external_path(w: &mut io::Writer, p: &clean::Path, print_all: bool,\n }\n \n fn path(w: &mut io::Writer, path: &clean::Path, print_all: bool,\n-        root: &fn(&render::Cache, &[~str]) -> Option<~str>,\n-        info: &fn(&render::Cache) -> Option<(~[~str], &'static str)>) {\n+        root: |&render::Cache, &[~str]| -> Option<~str>,\n+        info: |&render::Cache| -> Option<(~[~str], &'static str)>) {\n     // The generics will get written to both the title and link\n     let mut generics = ~\"\";\n     let last = path.segments.last();"}, {"sha": "9f0a4cefc4c12bf6d9eb78e7a4443bbd5b4fdd17", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -335,7 +335,7 @@ fn mkdir(path: &Path) {\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree.\n // FIXME (#9639): The closure should deal with &[u8] instead of &str\n-fn clean_srcpath(src: &[u8], f: &fn(&str)) {\n+fn clean_srcpath(src: &[u8], f: |&str|) {\n     let p = Path::new(src);\n     if p.as_vec() != bytes!(\".\") {\n         for c in p.str_components().map(|x|x.unwrap()) {\n@@ -645,7 +645,7 @@ impl<'self> Cache {\n impl Context {\n     /// Recurse in the directory structure and change the \"root path\" to make\n     /// sure it always points to the top (relatively)\n-    fn recurse<T>(&mut self, s: ~str, f: &fn(&mut Context) -> T) -> T {\n+    fn recurse<T>(&mut self, s: ~str, f: |&mut Context| -> T) -> T {\n         if s.len() == 0 {\n             fail!(\"what {:?}\", self);\n         }\n@@ -768,7 +768,7 @@ impl Context {\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item(&mut self, item: clean::Item, f: &fn(&mut Context, clean::Item)) {\n+    fn item(&mut self, item: clean::Item, f: |&mut Context, clean::Item|) {\n         fn render(w: io::File, cx: &mut Context, it: &clean::Item,\n                   pushname: bool) {\n             // A little unfortunate that this is done like this, but it sure"}, {"sha": "3eed6314a03339cd41673b784b4dbd751aeb3020", "filename": "src/librustpkg/installed_packages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -16,7 +16,7 @@ use std::os;\n use std::io;\n use std::io::fs;\n \n-pub fn list_installed_packages(f: &fn(&PkgId) -> bool) -> bool  {\n+pub fn list_installed_packages(f: |&PkgId| -> bool) -> bool  {\n     let workspaces = rust_path();\n     for p in workspaces.iter() {\n         let binfiles = do io::ignore_io_error { fs::readdir(&p.join(\"bin\")) };"}, {"sha": "4f48dab811f279b93bf4f63557e48a2ce49d1dcf", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -348,7 +348,7 @@ impl PkgSrc {\n         self.find_crates_with_filter(|_| true);\n     }\n \n-    pub fn find_crates_with_filter(&mut self, filter: &fn(&str) -> bool) {\n+    pub fn find_crates_with_filter(&mut self, filter: |&str| -> bool) {\n         use conditions::missing_pkg_files::cond;\n \n         let prefix = self.start_dir.components().len();"}, {"sha": "adf86d2cf9d750ecbcce5913f338cd006fd3cd3d", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -63,7 +63,7 @@ pub fn workspace_contains_package_id(pkgid: &PkgId, workspace: &Path) -> bool {\n \n pub fn workspace_contains_package_id_(pkgid: &PkgId, workspace: &Path,\n // Returns the directory it was actually found in\n-             workspace_to_src_dir: &fn(&Path) -> Path) -> Option<Path> {\n+             workspace_to_src_dir: |&Path| -> Path) -> Option<Path> {\n     if !workspace.is_dir() {\n         return None;\n     }"}, {"sha": "db31f603d6ee0ed8881e82d78f944cf4382c2904", "filename": "src/librustpkg/sha1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsha1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -94,7 +94,7 @@ fn add_bytes_to_bits<T: Int + CheckedAdd + ToBits>(bits: T, bytes: T) -> T {\n trait FixedBuffer {\n     /// Input a vector of bytes. If the buffer becomes full, process it with the provided\n     /// function and then clear the buffer.\n-    fn input(&mut self, input: &[u8], func: &fn(&[u8]));\n+    fn input(&mut self, input: &[u8], func: |&[u8]|);\n \n     /// Reset the buffer.\n     fn reset(&mut self);\n@@ -137,7 +137,7 @@ impl FixedBuffer64 {\n }\n \n impl FixedBuffer for FixedBuffer64 {\n-    fn input(&mut self, input: &[u8], func: &fn(&[u8])) {\n+    fn input(&mut self, input: &[u8], func: |&[u8]|) {\n         let mut i = 0;\n \n         let size = 64;\n@@ -217,11 +217,11 @@ trait StandardPadding {\n     /// and is guaranteed to have exactly rem remaining bytes when it returns. If there are not at\n     /// least rem bytes available, the buffer will be zero padded, processed, cleared, and then\n     /// filled with zeros again until only rem bytes are remaining.\n-    fn standard_padding(&mut self, rem: uint, func: &fn(&[u8]));\n+    fn standard_padding(&mut self, rem: uint, func: |&[u8]|);\n }\n \n impl <T: FixedBuffer> StandardPadding for T {\n-    fn standard_padding(&mut self, rem: uint, func: &fn(&[u8])) {\n+    fn standard_padding(&mut self, rem: uint, func: |&[u8]|) {\n         let size = self.size();\n \n         self.next(1)[0] = 128;"}, {"sha": "befb6aaa2180961ab6905e8af356101adfabcfb6", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -425,7 +425,7 @@ struct ViewItemVisitor<'self> {\n     sess: session::Session,\n     exec: &'self mut workcache::Exec,\n     c: &'self ast::Crate,\n-    save: &'self fn(Path),\n+    save: 'self |Path|,\n     deps: &'self mut DepMap\n }\n \n@@ -587,7 +587,7 @@ pub fn find_and_install_dependencies(context: &BuildContext,\n                                      exec: &mut workcache::Exec,\n                                      c: &ast::Crate,\n                                      deps: &mut DepMap,\n-                                     save: &fn(Path)) {\n+                                     save: |Path|) {\n     debug!(\"In find_and_install_dependencies...\");\n     let mut visitor = ViewItemVisitor {\n         context: context,"}, {"sha": "22d673333e9542ee01eef7906a22d175ff07c6a6", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -18,7 +18,10 @@ use path_util::rust_path;\n use util::option_to_vec;\n use package_id::PkgId;\n \n-pub fn each_pkg_parent_workspace(cx: &Context, pkgid: &PkgId, action: &fn(&Path) -> bool) -> bool {\n+pub fn each_pkg_parent_workspace(cx: &Context,\n+                                 pkgid: &PkgId,\n+                                 action: |&Path| -> bool)\n+                                 -> bool {\n     // Using the RUST_PATH, find workspaces that contain\n     // this package ID\n     let workspaces = pkg_parent_workspaces(cx, pkgid);"}, {"sha": "2f7b27b55e3215e6f29e910eb1e1305e9921b44a", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -15,7 +15,7 @@ use ptr;\n use unstable::intrinsics::TyDesc;\n use unstable::raw;\n \n-type DropGlue<'self> = &'self fn(**TyDesc, *c_void);\n+type DropGlue<'self> = 'self |**TyDesc, *c_void|;\n \n /*\n  * Box annihilation"}, {"sha": "03994043dcf0cea95f6e0ecb2ca25ccc448a8c24", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -104,7 +104,7 @@ impl<T, U> Condition<T, U> {\n     /// // use `trap`'s inside method to register the handler and then run a\n     /// // block of code with the handler registered\n     /// ```\n-    pub fn trap<'a>(&'a self, h: &'a fn(T) -> U) -> Trap<'a, T, U> {\n+    pub fn trap<'a>(&'a self, h: 'a |T| -> U) -> Trap<'a, T, U> {\n         let h: Closure = unsafe { ::cast::transmute(h) };\n         let prev = local_data::get(self.key, |k| k.map(|x| *x));\n         let h = @Handler { handle: h, prev: prev };\n@@ -181,7 +181,7 @@ impl<'self, T, U> Trap<'self, T, U> {\n     /// };\n     /// assert_eq!(result, 7);\n     /// ```\n-    pub fn inside<V>(&self, inner: &'self fn() -> V) -> V {\n+    pub fn inside<V>(&self, inner: 'self || -> V) -> V {\n         let _g = Guard { cond: self.cond };\n         debug!(\"Trap: pushing handler to TLS\");\n         local_data::set(self.cond.key, self.handler);"}, {"sha": "b1958bde60d2a7b1d25d8157c246d73482daf416", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -156,7 +156,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn map<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, Self> {\n+    fn map<'r, B>(self, f: 'r |A| -> B) -> Map<'r, A, B, Self> {\n         Map{iter: self, f: f}\n     }\n \n@@ -173,7 +173,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> Filter<'r, A, Self> {\n+    fn filter<'r>(self, predicate: 'r |&A| -> bool) -> Filter<'r, A, Self> {\n         Filter{iter: self, predicate: predicate}\n     }\n \n@@ -190,7 +190,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMap<'r, A, B, Self> {\n+    fn filter_map<'r, B>(self, f: 'r |A| -> Option<B>) -> FilterMap<'r, A, B, Self> {\n         FilterMap { iter: self, f: f }\n     }\n \n@@ -249,7 +249,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhile<'r, A, Self> {\n+    fn skip_while<'r>(self, predicate: 'r |&A| -> bool) -> SkipWhile<'r, A, Self> {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n \n@@ -267,7 +267,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhile<'r, A, Self> {\n+    fn take_while<'r>(self, predicate: 'r |&A| -> bool) -> TakeWhile<'r, A, Self> {\n         TakeWhile{iter: self, flag: false, predicate: predicate}\n     }\n \n@@ -327,7 +327,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n-    fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n+    fn scan<'r, St, B>(self, initial_state: St, f: 'r |&mut St, A| -> Option<B>)\n         -> Scan<'r, A, B, Self, St> {\n         Scan{iter: self, f: f, state: initial_state}\n     }\n@@ -349,7 +349,7 @@ pub trait Iterator<A> {\n     /// }\n     /// ```\n     #[inline]\n-    fn flat_map<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n+    fn flat_map<'r, B, U: Iterator<B>>(self, f: 'r |A| -> U)\n         -> FlatMap<'r, A, Self, U> {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n@@ -401,7 +401,7 @@ pub trait Iterator<A> {\n     ///println(sum.to_str());\n     /// ```\n     #[inline]\n-    fn inspect<'r>(self, f: &'r fn(&A)) -> Inspect<'r, A, Self> {\n+    fn inspect<'r>(self, f: 'r |&A|) -> Inspect<'r, A, Self> {\n         Inspect{iter: self, f: f}\n     }\n \n@@ -1123,7 +1123,7 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n /// An iterator which maps the values of `iter` with `f`\n pub struct Map<'self, A, B, T> {\n     priv iter: T,\n-    priv f: &'self fn(A) -> B\n+    priv f: 'self |A| -> B\n }\n \n impl<'self, A, B, T> Map<'self, A, B, T> {\n@@ -1172,7 +1172,7 @@ impl<'self, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'s\n /// An iterator which filters the elements of `iter` with `predicate`\n pub struct Filter<'self, A, T> {\n     priv iter: T,\n-    priv predicate: &'self fn(&A) -> bool\n+    priv predicate: 'self |&A| -> bool\n }\n \n impl<'self, A, T: Iterator<A>> Iterator<A> for Filter<'self, A, T> {\n@@ -1216,7 +1216,7 @@ impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'sel\n /// An iterator which uses `f` to both filter and map elements from `iter`\n pub struct FilterMap<'self, A, B, T> {\n     priv iter: T,\n-    priv f: &'self fn(A) -> Option<B>\n+    priv f: 'self |A| -> Option<B>\n }\n \n impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'self, A, B, T> {\n@@ -1359,7 +1359,7 @@ impl<'self, A, T: Iterator<A>> Peekable<A, T> {\n pub struct SkipWhile<'self, A, T> {\n     priv iter: T,\n     priv flag: bool,\n-    priv predicate: &'self fn(&A) -> bool\n+    priv predicate: 'self |&A| -> bool\n }\n \n impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhile<'self, A, T> {\n@@ -1397,7 +1397,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhile<'self, A, T> {\n pub struct TakeWhile<'self, A, T> {\n     priv iter: T,\n     priv flag: bool,\n-    priv predicate: &'self fn(&A) -> bool\n+    priv predicate: 'self |&A| -> bool\n }\n \n impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhile<'self, A, T> {\n@@ -1544,7 +1544,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n /// An iterator to maintain state while iterating another iterator\n pub struct Scan<'self, A, B, T, St> {\n     priv iter: T,\n-    priv f: &'self fn(&mut St, A) -> Option<B>,\n+    priv f: 'self |&mut St, A| -> Option<B>,\n \n     /// The current internal state to be passed to the closure next.\n     state: St\n@@ -1568,7 +1568,7 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'self, A, B, T, St> {\n ///\n pub struct FlatMap<'self, A, T, U> {\n     priv iter: T,\n-    priv f: &'self fn(A) -> U,\n+    priv f: 'self |A| -> U,\n     priv frontiter: Option<U>,\n     priv backiter: Option<U>,\n }\n@@ -1699,7 +1699,7 @@ impl<T> Fuse<T> {\n /// element before yielding it.\n pub struct Inspect<'self, A, T> {\n     priv iter: T,\n-    priv f: &'self fn(&A)\n+    priv f: 'self |&A|\n }\n \n impl<'self, A, T> Inspect<'self, A, T> {\n@@ -1751,7 +1751,7 @@ for Inspect<'self, A, T> {\n \n /// An iterator which just modifies the contained state throughout iteration.\n pub struct Unfold<'self, A, St> {\n-    priv f: &'self fn(&mut St) -> Option<A>,\n+    priv f: 'self |&mut St| -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n     state: St\n }\n@@ -1760,8 +1760,8 @@ impl<'self, A, St> Unfold<'self, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n     #[inline]\n-    pub fn new<'a>(initial_state: St, f: &'a fn(&mut St) -> Option<A>)\n-        -> Unfold<'a, A, St> {\n+    pub fn new<'a>(initial_state: St, f: 'a |&mut St| -> Option<A>)\n+               -> Unfold<'a, A, St> {\n         Unfold {\n             f: f,\n             state: initial_state"}, {"sha": "247a7824a4465c7eb296fc00bef231e5630ba7c9", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -205,12 +205,14 @@ mod ziggurat_tables;\n // the perf improvement (25-50%) is definitely worth the extra code\n // size from force-inlining.\n #[inline(always)]\n-fn ziggurat<R:Rng>(rng: &mut R,\n-                   symmetric: bool,\n-                   X: ziggurat_tables::ZigTable,\n-                   F: ziggurat_tables::ZigTable,\n-                   pdf: &'static fn(f64) -> f64,\n-                   zero_case: &'static fn(&mut R, f64) -> f64) -> f64 {\n+fn ziggurat<R:Rng>(\n+            rng: &mut R,\n+            symmetric: bool,\n+            X: ziggurat_tables::ZigTable,\n+            F: ziggurat_tables::ZigTable,\n+            pdf: 'static |f64| -> f64,\n+            zero_case: 'static |&mut R, f64| -> f64)\n+            -> f64 {\n     static SCALE: f64 = (1u64 << 53) as f64;\n     loop {\n         // reimplement the f64 generation as an optimisation suggested"}, {"sha": "11f552e73ae7ee407cd5a574b44dce80756413a2", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -322,7 +322,7 @@ impl CharEq for char {\n     fn only_ascii(&self) -> bool { (*self as uint) < 128 }\n }\n \n-impl<'self> CharEq for &'self fn(char) -> bool {\n+impl<'self> CharEq for 'self |char| -> bool {\n     #[inline]\n     fn matches(&self, c: char) -> bool { (*self)(c) }\n "}, {"sha": "ded7cd8df072bc632814b27639dd4d86e27b3914", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -22,7 +22,7 @@ use rc::Rc;\n use str::{Str, StrSlice};\n use vec::{Vector, ImmutableVector};\n \n-pub type Cb<'self> = &'self fn(buf: &[u8]) -> bool;\n+pub type Cb<'self> = 'self |buf: &[u8]| -> bool;\n \n ///\n /// A trait to implement in order to make a type hashable;"}, {"sha": "226ce9ef6f2e631c4491cdbafa41a8a945c82db9", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -44,7 +44,7 @@ macro_rules! finally_fn {\n     }\n }\n \n-impl<'self,T> Finally<T> for &'self fn() -> T {\n+impl<'self,T> Finally<T> for 'self || -> T {\n     fn finally(&self, dtor: ||) -> T {\n         let _d = Finallyalizer {\n             dtor: dtor\n@@ -57,7 +57,7 @@ impl<'self,T> Finally<T> for &'self fn() -> T {\n finally_fn!(extern \"Rust\" fn() -> T)\n \n struct Finallyalizer<'self> {\n-    dtor: &'self fn()\n+    dtor: 'self ||\n }\n \n #[unsafe_destructor]"}, {"sha": "0b08f9d00faf9556dc7c8fa6ad0d97c44329820b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -222,7 +222,7 @@ pub fn build<A>(size: Option<uint>, builder: |push: |v: A||) -> ~[A] {\n pub struct SplitIterator<'self, T> {\n     priv v: &'self [T],\n     priv n: uint,\n-    priv pred: &'self fn(t: &T) -> bool,\n+    priv pred: 'self |t: &T| -> bool,\n     priv finished: bool\n }\n \n@@ -271,7 +271,7 @@ impl<'self, T> Iterator<&'self [T]> for SplitIterator<'self, T> {\n pub struct RSplitIterator<'self, T> {\n     priv v: &'self [T],\n     priv n: uint,\n-    priv pred: &'self fn(t: &T) -> bool,\n+    priv pred: 'self |t: &T| -> bool,\n     priv finished: bool\n }\n \n@@ -859,20 +859,20 @@ pub trait ImmutableVector<'self, T> {\n     fn rev_iter(self) -> RevIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`.\n-    fn split(self, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T>;\n+    fn split(self, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`, limited to splitting\n     /// at most `n` times.\n-    fn splitn(self, n: uint, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T>;\n+    fn splitn(self, n: uint, pred: |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`. This starts at the\n     /// end of the vector and works backwards.\n-    fn rsplit(self, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T>;\n+    fn rsplit(self, pred: |&T| -> bool) -> RSplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred` limited to splitting\n     /// at most `n` times. This starts at the end of the vector and\n     /// works backwards.\n-    fn rsplitn(self,  n: uint, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T>;\n+    fn rsplitn(self,  n: uint, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n \n     /**\n      * Returns an iterator over all contiguous windows of length\n@@ -1024,12 +1024,12 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n \n     #[inline]\n-    fn split(self, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T> {\n+    fn split(self, pred: 'self |&T| -> bool) -> SplitIterator<'self, T> {\n         self.splitn(uint::max_value, pred)\n     }\n \n     #[inline]\n-    fn splitn(self, n: uint, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T> {\n+    fn splitn(self, n: uint, pred: 'self |&T| -> bool) -> SplitIterator<'self, T> {\n         SplitIterator {\n             v: self,\n             n: n,\n@@ -1039,12 +1039,12 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n \n     #[inline]\n-    fn rsplit(self, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T> {\n+    fn rsplit(self, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T> {\n         self.rsplitn(uint::max_value, pred)\n     }\n \n     #[inline]\n-    fn rsplitn(self, n: uint, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T> {\n+    fn rsplitn(self, n: uint, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T> {\n         RSplitIterator {\n             v: self,\n             n: n,"}, {"sha": "c14375604b1e2aaca64976ca0ff450eb08495e68", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -669,7 +669,7 @@ pub trait EachViewItem {\n }\n \n struct EachViewItemData<'self> {\n-    callback: &'self fn(&ast::view_item) -> bool,\n+    callback: 'self |&ast::view_item| -> bool,\n }\n \n impl<'self> Visitor<()> for EachViewItemData<'self> {"}, {"sha": "2f6cfeb24da1f12ccf05fb500561d46d517c69ef", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -294,18 +294,19 @@ Combine the values of all the fields together. The last argument is\n all the fields of all the structures, see above for details.\n */\n pub type CombineSubstructureFunc<'self> =\n-    &'self fn(@ExtCtxt, Span, &Substructure) -> @Expr;\n+    'self |@ExtCtxt, Span, &Substructure| -> @Expr;\n \n /**\n Deal with non-matching enum variants, the arguments are a list\n representing each variant: (variant index, ast::variant instance,\n [variant fields]), and a list of the nonself args of the type\n */\n pub type EnumNonMatchFunc<'self> =\n-    &'self fn(@ExtCtxt, Span,\n-              &[(uint, ast::variant,\n-                 ~[(Span, Option<Ident>, @Expr)])],\n-              &[@Expr]) -> @Expr;\n+    'self |@ExtCtxt,\n+           Span,\n+           &[(uint, ast::variant, ~[(Span, Option<Ident>, @Expr)])],\n+           &[@Expr]|\n+           -> @Expr;\n \n \n impl<'self> TraitDef<'self> {"}, {"sha": "8729382141b8ad2d89491f8404674707dcdf7bf8", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -46,17 +46,17 @@ pub mod totalord;\n \n pub mod generic;\n \n-pub type ExpandDerivingStructDefFn<'self> = &'self fn(@ExtCtxt,\n-                                                       Span,\n-                                                       x: &struct_def,\n-                                                       Ident,\n-                                                       y: &Generics)\n-                                                 -> @item;\n-pub type ExpandDerivingEnumDefFn<'self> = &'self fn(@ExtCtxt,\n-                                                    Span,\n-                                                    x: &enum_def,\n-                                                    Ident,\n-                                                    y: &Generics)\n+pub type ExpandDerivingStructDefFn<'self> = 'self |@ExtCtxt,\n+                                                   Span,\n+                                                   x: &struct_def,\n+                                                   Ident,\n+                                                   y: &Generics|\n+                                                   -> @item;\n+pub type ExpandDerivingEnumDefFn<'self> = 'self |@ExtCtxt,\n+                                                 Span,\n+                                                 x: &enum_def,\n+                                                 Ident,\n+                                                 y: &Generics|\n                                                  -> @item;\n \n pub fn expand_meta_deriving(cx: @ExtCtxt,"}, {"sha": "3855a348f60c0ee088563a17d354fc826be3bf0a", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -13,7 +13,7 @@\n // part of issue-6919.rs\n \n struct C<'self> {\n-    k: &'self fn(),\n+    k: 'self ||,\n }\n \n fn no_op() { }"}, {"sha": "7621d5d7b087fe919ce4b22a19e71ae388ccec64", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -14,11 +14,11 @@\n \n // returns an infinite iterator of repeated applications of f to x,\n // i.e. [x, f(x), f(f(x)), ...], as haskell iterate function.\n-fn iterate<'a, T>(x: T, f: &'a fn(&T) -> T) -> Iterate<'a, T> {\n+fn iterate<'a, T>(x: T, f: 'a |&T| -> T) -> Iterate<'a, T> {\n     Iterate {f: f, next: x}\n }\n struct Iterate<'self, T> {\n-    priv f: &'self fn(&T) -> T,\n+    priv f: &'self |&T| -> T,\n     priv next: T\n }\n impl<'self, T> Iterator<T> for Iterate<'self, T> {"}, {"sha": "4cfa543a93fbefc7527130a3895017f8484393e5", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,9 @@\n \n fn id<T>(t: T) -> T { t }\n \n-fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cannot infer an appropriate lifetime\n+fn f<'r, T>(v: &'r T) -> 'r || -> T {\n+    id(|| *v) //~ ERROR cannot infer an appropriate lifetime\n+}\n \n fn main() {\n     let v = &5;"}, {"sha": "952a528b427ba09815a950fe58931f862d66b779", "filename": "src/test/compile-fail/issue-4523.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n fn foopy() {}\n \n-static f: &'static fn() = foopy; //~ ERROR found extern fn\n+static f: 'static || = foopy; //~ ERROR found extern fn\n \n fn main () {\n     f();"}, {"sha": "bf7383f9c72b8c40aed227b6ea9a3c28f14d3c7a", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -16,7 +16,7 @@ struct R<'self> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that\n     // accepts itself as argument:\n-    c: &'self fn(&R, bool)\n+    c: 'self |&R, bool|\n }\n \n fn innocent_looking_victim() {"}, {"sha": "7e5abe8e2f7e44f3382a06425d2a6cd77dd5549d", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn wants_static_fn(_x: &'static fn()) {}\n+fn wants_static_fn(_x: 'static ||) {}\n \n fn main() {\n     let i = 3;"}, {"sha": "6347fa97c4dd51ad4a0507658e7e51f256784375", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n struct parameterized1<'self> {\n-    g: &'self fn()\n+    g: 'self ||\n }\n \n struct not_parameterized1 {\n-    g: &'static fn()\n+    g: 'static ||\n }\n \n struct not_parameterized2 {\n-    g: &'static fn()\n+    g: 'static ||\n }\n \n fn take1(p: parameterized1) -> parameterized1 { p }"}, {"sha": "c7364a60bdf9158f6cbbe965b96ccd0a0e36916e", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n struct invariant<'self> {\n-    f: &'static fn(x: @mut &'self int)\n+    f: 'static |x: @mut &'self int|\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "8070d1f1dce7227b885964605787a4e27af1f6a8", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n struct invariant<'self> {\n-    f: &'static fn() -> @mut &'self int\n+    f: 'static || -> @mut &'self int\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "92159489ae70702aef0b894ca35538853d6eabf7", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -14,12 +14,12 @@ struct direct<'self> {\n \n struct indirect1 {\n     // Here the lifetime parameter of direct is bound by the fn()\n-    g: &'static fn(direct)\n+    g: 'static |direct|\n }\n \n struct indirect2<'self> {\n     // But here it is set to 'self\n-    g: &'static fn(direct<'self>)\n+    g: 'static |direct<'self>|\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types"}, {"sha": "292e282dd073e1c998ad43306886ab5ccb066d2a", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct closure_box<'self> {\n-    cl: &'self fn()\n+    cl: 'self ||\n }\n \n-fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: 'r ||) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "ee570fa2e950def1c5790290732744010c9cfc01", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let cheese = ~\"roquefort\";\n     let carrots = @~\"crunchy\";\n \n-    let result: &'static fn(@~str, |~str|) = (|tasties, macerate| {\n+    let result: 'static |@~str, |~str|| = (|tasties, macerate| {\n         macerate((*tasties).clone());\n     });\n     result(carrots, |food| {"}, {"sha": "126d53621dd7b77400d43eed6af445871007c02a", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,7 +12,7 @@ fn foo() -> int {\n     return 0xca7f000d;\n }\n \n-struct Bar<'self> { f: &'self fn() -> int }\n+struct Bar<'self> { f: 'self || -> int }\n \n static b : Bar<'static> = Bar { f: foo };\n "}, {"sha": "593d0e3125d6705adbb0b6b1072f1d32a6051e29", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -20,7 +20,7 @@\n \n fn f() { }\n static bare_fns: &'static [extern fn()] = &[f, f];\n-struct S<'self>(&'self fn());\n+struct S<'self>('self ||);\n static closures: &'static [S<'static>] = &[S(f), S(f)];\n \n pub fn main() {"}, {"sha": "e18509252235de514e832233a7a8d2943535ccfe", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -11,7 +11,7 @@\n \n \n fn test_fn() {\n-    type t = &'static fn() -> int;\n+    type t = 'static || -> int;\n     fn ten() -> int { return 10; }\n     let rs: t = { ten };\n     assert!((rs() == 10));"}, {"sha": "f081d13a5b0b13eb330982a08d8e018a70b96f51", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-type compare<T> = &'static fn(@T, @T) -> bool;\n+type compare<T> = 'static |@T, @T| -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = { expected };"}, {"sha": "04721c6bd94ec9c0e13f8f7f300672657df0d8a1", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast\n \n-type compare<'self, T> = &'self fn(T, T) -> bool;\n+type compare<'self, T> = 'self |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "f1df0e167b9a10452bae66e24d7b3007df2597c5", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-type compare<'self, T> = &'self fn(~T, ~T) -> bool;\n+type compare<'self, T> = 'self |~T, ~T| -> bool;\n \n fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected.clone() };"}, {"sha": "b666a2f6760e61afde1a76b6278b1283ef34f4cd", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-type compare<'self, T> = &'self fn(T, T) -> bool;\n+type compare<'self, T> = 'self |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "bc8c4c8983d964cbe22a8725047b674243e9cb86", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<'self, T> = &'self fn(T, T) -> bool;\n+type compare<'self, T> = 'self |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "cba01fbd8dd819a917e8e9dc380c2308d2b7171a", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-type compare<T> = &'static fn(@T, @T) -> bool;\n+type compare<T> = 'static |@T, @T| -> bool;\n \n fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };"}, {"sha": "5ef97832221bfcd094f2e52f86ac4e1b9d8e3fda", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast\n \n-type compare<T> = &'static fn(T, T) -> bool;\n+type compare<T> = 'static |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected.clone() } else { not_expected };"}, {"sha": "bd1a550e205fcab5db8eb50284e23a51383f502d", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n // Tests for if as expressions with dynamic type sizes\n-type compare<T> = &'static fn(T, T) -> bool;\n+type compare<T> = 'static |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected.clone() } else { not_expected };"}, {"sha": "82e80e7da7dc3ac3256aeee7efe3c1e3e6a22577", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-type compare<T> = &'static fn(@T, @T) -> bool;\n+type compare<T> = 'static |@T, @T| -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = match true { true => { expected }, _ => fail!() };"}, {"sha": "8fed749e3022e0b5a92fb8a3a0f271b88c4cc67f", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast\n \n-type compare<T> = &'static fn(T, T) -> bool;\n+type compare<T> = 'static |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };"}, {"sha": "af9022ed3222ce3ef1194566b4073fbe8366b336", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-type compare<T> = &'static fn(~T, ~T) -> bool;\n+type compare<T> = 'static |~T, ~T| -> bool;\n \n fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {"}, {"sha": "2bd0f18ba0a7462c804644d5a8fda3996028446a", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-type compare<'self, T> = &'self fn(T, T) -> bool;\n+type compare<'self, T> = 'self |T, T| -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {"}, {"sha": "809005258b51a5c3d93174f20590924b1bf18ac3", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct r<'self> {\n-    field: &'self fn()\n+    field: 'self ||\n }\n \n pub fn main() {"}, {"sha": "1716f882dd86e6fcc3b913fcd895fd401490065b", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -24,7 +24,7 @@ mod map_reduce {\n     use std::str;\n     use std::task;\n \n-    pub type putter<'self> = &'self fn(~str, ~str);\n+    pub type putter<'self> = 'self |~str, ~str|;\n \n     pub type mapper = extern fn(~str, putter);\n "}, {"sha": "f3ffed7dc7bc3b78f05937d407b54d6d6ae68c29", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let early_error: &'static fn(&str) -> !  = |_msg| { fail!() };\n+    let early_error: 'static |&str| -> ! = |_msg| { fail!() };\n }"}, {"sha": "9ebeec092cf15876b2f08fca0b2c9e2cc03a0594", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -18,7 +18,7 @@\n //\n // Running /usr/local/bin/rustc:\n // issue-2185.rs:24:0: 26:1 error: conflicting implementations for a trait\n-// issue-2185.rs:24 impl iterable<uint> for &'static fn(|uint|) {\n+// issue-2185.rs:24 impl iterable<uint> for 'static ||uint|| {\n // issue-2185.rs:25     fn iter(&self, blk: |v: uint|) { self( |i| blk(i) ) }\n // issue-2185.rs:26 }\n // issue-2185.rs:20:0: 22:1 note: note conflicting implementation here"}, {"sha": "8179d85e601f3f9155fbdaf0da97093864462454", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Connection = &'static fn(~[u8]);\n+type Connection = 'static |~[u8]|;\n \n fn f() -> Option<Connection> {\n     let mock_connection: Connection = |_| {};"}, {"sha": "b72ef59075ce228738cec7a31f8dd2218ca71ce7", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -12,10 +12,10 @@\n \n struct A { a: ~int }\n \n-fn foo() -> &'static fn() -> int {\n+fn foo() -> 'static || -> int {\n     let k = ~22;\n     let _u = A {a: k.clone()};\n-    let result: &'static fn() -> int = || 22;\n+    let result: 'static || -> int = || 22;\n     result\n }\n "}, {"sha": "19fd120641997a05a979eaff5770a1f5b0a56de5", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct closure_box<'self> {\n-    cl: &'self fn(),\n+    cl: 'self ||,\n }\n \n-fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: 'r ||) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "b50930dd2947b028bb820ceac58f48af0b60328f", "filename": "src/test/run-pass/regions-dependent-autofn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we autoslice a vector.\n // Issue #3148.\n \n-fn subslice<'r>(v: &'r fn()) -> &'r fn() { v }\n+fn subslice<'r>(v: 'r ||) -> 'r || { v }\n \n-fn both<'r>(v: &'r fn()) -> &'r fn() {\n+fn both<'r>(v: 'r ||) -> 'r || {\n     subslice(subslice(v))\n }\n "}, {"sha": "941f2c5edfda0fffaf1860a447cc49722b63a79d", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e610573ba285619c9a59d8c1468624b6428492c/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=9e610573ba285619c9a59d8c1468624b6428492c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct closure_box<'self> {\n-    cl: &'self fn(),\n+    cl: 'self ||,\n }\n \n-fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: 'r ||) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}]}