{"sha": "a9793783bc534aef69687ef0b3675d5dc3272824", "node_id": "C_kwDOAAsO6NoAKGE5NzkzNzgzYmM1MzRhZWY2OTY4N2VmMGIzNjc1ZDVkYzMyNzI4MjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-21T17:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T17:29:26Z"}, "message": "Merge #11089\n\n11089: internal: Render more completions from hir instead of ast r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "37515d03a86df7ca00f1cce669574d55c86fbc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37515d03a86df7ca00f1cce669574d55c86fbc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9793783bc534aef69687ef0b3675d5dc3272824", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwg72CRBK7hj4Ov3rIwAAsW0IAI2wu13RpImIRicbRIP8QRzv\nc6fZOqm7o4/J1duvsYeQMHqr6sGPUNTfElANeQIeLwIdVkEaD2jLEjx0+3PTZEYQ\nE/GpPE6Xu9sliLYG1hkC/AyTomtdykTTxUDsKu9xHc06fqkwMscL7lr7gssCy7pE\nH2d7ok7e0eM+8Cs/gMF4djfAWOVSOzsDoSsNH1hsyoxZT9lO6sVHfvxmUzxPlLK1\nhW07CmJB6NBC0QihQRrjBQx29sx5uiON/P2ytbMLH6VSo9ZeaJ43Ojr57DvoV9WZ\nUT0W86RkElZKxg7VfbGz4ycj+ctPuao3bMa1TlAgOaLW12E5TxcFKS7ehSYY6X8=\n=hiHb\n-----END PGP SIGNATURE-----\n", "payload": "tree 37515d03a86df7ca00f1cce669574d55c86fbc17\nparent 22adcfde039336bf34f66726918396706765154e\nparent 60dfe8ceed39f7c89c1153655e17a5c6c0f56155\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640107766 +0000\ncommitter GitHub <noreply@github.com> 1640107766 +0000\n\nMerge #11089\n\n11089: internal: Render more completions from hir instead of ast r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9793783bc534aef69687ef0b3675d5dc3272824", "html_url": "https://github.com/rust-lang/rust/commit/a9793783bc534aef69687ef0b3675d5dc3272824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9793783bc534aef69687ef0b3675d5dc3272824/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22adcfde039336bf34f66726918396706765154e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22adcfde039336bf34f66726918396706765154e", "html_url": "https://github.com/rust-lang/rust/commit/22adcfde039336bf34f66726918396706765154e"}, {"sha": "60dfe8ceed39f7c89c1153655e17a5c6c0f56155", "url": "https://api.github.com/repos/rust-lang/rust/commits/60dfe8ceed39f7c89c1153655e17a5c6c0f56155", "html_url": "https://github.com/rust-lang/rust/commit/60dfe8ceed39f7c89c1153655e17a5c6c0f56155"}], "stats": {"total": 150, "additions": 54, "deletions": 96}, "files": [{"sha": "2b53d4a27bfac3fc5fd744eff76e0dd272d772b2", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -420,7 +420,7 @@ where\n     E: Fn(&D) -> Option<V>,\n     V: Display,\n {\n-    let label = if let Some(value) = (value_extractor)(&def) {\n+    let label = if let Some(value) = value_extractor(&def) {\n         format!(\"{} = {}\", def.display(db), value)\n     } else {\n         def.display(db).to_string()"}, {"sha": "88fb3959203286746991a29c134c21944ee48f97", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -287,8 +287,8 @@ fn foo() { let _ = lib::S::$0 }\n \"#,\n             expect![[r#\"\n                 fn public_method() fn()\n-                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32;\n-                ta PublicType      pub type PublicType;\n+                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32\n+                ta PublicType      pub type PublicType = u32\n             \"#]],\n         );\n     }\n@@ -377,12 +377,12 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::$0 }\n \"#,\n             expect![[r#\"\n-                ta SubTy (as Sub)        type SubTy;\n-                ta Ty (as Super)         type Ty;\n-                ct C2 (as Sub)           const C2: ();\n+                ta SubTy (as Sub)        type SubTy\n+                ta Ty (as Super)         type Ty\n+                ct C2 (as Sub)           const C2: ()\n                 fn subfunc() (as Sub)    fn()\n                 me submethod(\u2026) (as Sub) fn(&self)\n-                ct CONST (as Super)      const CONST: u8;\n+                ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n                 me method(\u2026) (as Super)  fn(&self)\n             \"#]],\n@@ -417,12 +417,12 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ta SubTy (as Sub)        type SubTy;\n-                ta Ty (as Super)         type Ty;\n-                ct CONST (as Super)      const CONST: u8;\n+                ta SubTy (as Sub)        type SubTy\n+                ta Ty (as Super)         type Ty\n+                ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n                 me method(\u2026) (as Super)  fn(&self)\n-                ct C2 (as Sub)           const C2: ();\n+                ct C2 (as Sub)           const C2: ()\n                 fn subfunc() (as Sub)    fn()\n                 me submethod(\u2026) (as Sub) fn(&self)\n             \"#]],\n@@ -653,7 +653,7 @@ impl u8 {\n }\n \"#,\n             expect![[r#\"\n-                ct MAX     pub const MAX: Self;\n+                ct MAX     pub const MAX: Self\n                 me func(\u2026) fn(self)\n             \"#]],\n         );"}, {"sha": "653515fec21d67cc2d1bd06459baa392ae5ab785", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -1,6 +1,7 @@\n //! Extensions for `Builder` structure required for item rendering.\n \n use itertools::Itertools;\n+use syntax::SmolStr;\n \n use crate::{context::PathKind, item::Builder, patterns::ImmediateLocation, CompletionContext};\n \n@@ -56,7 +57,7 @@ impl Builder {\n     pub(super) fn add_call_parens(\n         &mut self,\n         ctx: &CompletionContext,\n-        name: String,\n+        name: SmolStr,\n         params: Params,\n     ) -> &mut Builder {\n         if !self.should_add_parens(ctx) {"}, {"sha": "4c8258f12c23ff6df8dda3badccdae93c4633b90", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -1,8 +1,7 @@\n //! Renderer for `const` fields.\n \n-use hir::{AsAssocItem, HasSource};\n+use hir::{AsAssocItem, HirDisplay};\n use ide_db::SymbolKind;\n-use syntax::display::const_label;\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n@@ -14,8 +13,7 @@ pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option\n fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let db = ctx.db();\n     let name = const_.name(db)?.to_smol_str();\n-    // FIXME: This is parsing files!\n-    let detail = const_label(&const_.source(db)?.value);\n+    let detail = const_.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(const_))"}, {"sha": "4c276a9afed0e7e9a4417ae985b16c9945243afa", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -5,6 +5,7 @@ use std::iter;\n use hir::{db::HirDatabase, HasAttrs, HirDisplay, StructKind};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n+use syntax::SmolStr;\n \n use crate::{\n     item::{CompletionItem, ImportEdit},\n@@ -48,10 +49,10 @@ fn render(\n             false,\n         ),\n     };\n+    let qualified_name = qualified_name.to_string();\n+    let short_qualified_name: SmolStr = short_qualified_name.to_string().into();\n \n-    // FIXME: ModPath::to_smol_str()?\n-    let mut item =\n-        CompletionItem::new(SymbolKind::Variant, ctx.source_range(), qualified_name.to_string());\n+    let mut item = CompletionItem::new(SymbolKind::Variant, ctx.source_range(), qualified_name);\n     item.set_documentation(variant.docs(db))\n         .set_deprecated(ctx.is_deprecated(variant))\n         .detail(detail(db, variant, variant_kind));\n@@ -60,8 +61,6 @@ fn render(\n         item.add_import(import_to_add);\n     }\n \n-    // FIXME: ModPath::to_smol_str()?\n-    let short_qualified_name = short_qualified_name.to_string();\n     if variant_kind == hir::StructKind::Tuple {\n         cov_mark::hit!(inserts_parens_for_tuple_enums);\n         let params = Params::Anonymous(variant.fields(db).len());"}, {"sha": "bd46e1fefbb0eed3320cb7eb4e818731771bd406", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -52,10 +52,9 @@ fn render(\n     let name = local_name.unwrap_or_else(|| func.name(db));\n     let params = params(completion, func, &func_type);\n \n-    // FIXME: SmolStr?\n     let call = match &func_type {\n-        FuncType::Method(Some(receiver)) => format!(\"{}.{}\", receiver, &name),\n-        _ => name.to_string(),\n+        FuncType::Method(Some(receiver)) => format!(\"{}.{}\", receiver, &name).into(),\n+        _ => name.to_smol_str(),\n     };\n     let mut item = CompletionItem::new(\n         if func.self_param(db).is_some() {\n@@ -66,23 +65,6 @@ fn render(\n         ctx.source_range(),\n         call.clone(),\n     );\n-    item.set_documentation(ctx.docs(func))\n-        .set_deprecated(ctx.is_deprecated(func) || ctx.is_deprecated_assoc_item(func))\n-        .detail(detail(db, func))\n-        .add_call_parens(completion, call.clone(), params);\n-\n-    if import_to_add.is_none() {\n-        if let Some(actm) = func.as_assoc_item(db) {\n-            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                item.trait_name(trt.name(db).to_smol_str());\n-            }\n-        }\n-    }\n-\n-    if let Some(import_to_add) = import_to_add {\n-        item.add_import(import_to_add);\n-    }\n-    item.lookup_by(name.to_smol_str());\n \n     let ret_type = func.ret_type(db);\n     item.set_relevance(CompletionRelevance {\n@@ -100,6 +82,24 @@ fn render(\n         }\n     }\n \n+    item.set_documentation(ctx.docs(func))\n+        .set_deprecated(ctx.is_deprecated(func) || ctx.is_deprecated_assoc_item(func))\n+        .detail(detail(db, func))\n+        .add_call_parens(completion, call, params);\n+\n+    if import_to_add.is_none() {\n+        if let Some(actm) = func.as_assoc_item(db) {\n+            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+                item.trait_name(trt.name(db).to_smol_str());\n+            }\n+        }\n+    }\n+\n+    if let Some(import_to_add) = import_to_add {\n+        item.add_import(import_to_add);\n+    }\n+    item.lookup_by(name.to_smol_str());\n+\n     item.build()\n }\n "}, {"sha": "5bfb4349edcecae0d8453c671bc10d3c03a65045", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -1,8 +1,8 @@\n //! Renderer for type aliases.\n \n-use hir::{AsAssocItem, HasSource};\n+use hir::{AsAssocItem, HirDisplay};\n use ide_db::SymbolKind;\n-use syntax::{ast::HasName, display::type_label};\n+use syntax::SmolStr;\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n@@ -29,16 +29,12 @@ fn render(\n ) -> Option<CompletionItem> {\n     let db = ctx.db();\n \n-    // FIXME: This parses the file!\n-    let ast_node = type_alias.source(db)?.value;\n-    let name = ast_node.name().map(|name| {\n-        if with_eq {\n-            format!(\"{} = \", name.text())\n-        } else {\n-            name.text().to_string()\n-        }\n-    })?;\n-    let detail = type_label(&ast_node);\n+    let name = if with_eq {\n+        SmolStr::from_iter([&*type_alias.name(db).to_smol_str(), \" = \"])\n+    } else {\n+        type_alias.name(db).to_smol_str()\n+    };\n+    let detail = type_alias.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(type_alias))"}, {"sha": "56a2cd6e9dcc2e912592288bbc96332696c5e3b8", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -546,9 +546,9 @@ fn func() {\n             ev TupleV(\u2026)   (u32)\n             ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: ();\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n-            ta AssocType   type AssocType;\n+            ta AssocType   type AssocType = ()\n         \"#]],\n     );\n }"}, {"sha": "c9a31eea8497928335a608c2156a14d0c6ca4cc0", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -294,9 +294,9 @@ fn func() {\n             ev TupleV(\u2026)   (u32)\n             ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: ();\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n-            ta AssocType   type AssocType;\n+            ta AssocType   type AssocType = ()\n         \"#]],\n     );\n }"}, {"sha": "d6c1a787ff9b2a03829ad84eda72f9ad9178436c", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -148,7 +148,7 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             kw self\n             kw super\n             kw crate\n-            ta Foo =  (as Trait2) type Foo;\n+            ta Foo =  (as Trait2) type Foo\n             tp T\n             cp CONST_PARAM\n             tt Trait\n@@ -199,7 +199,7 @@ impl Enum {\n fn func(_: Enum::$0) {}\n \"#,\n         expect![[r#\"\n-            ta AssocType type AssocType;\n+            ta AssocType type AssocType = ()\n         \"#]],\n     );\n }"}, {"sha": "d03e94d05832ca60e38792cb979b9ec27dce6f29", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9793783bc534aef69687ef0b3675d5dc3272824/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=a9793783bc534aef69687ef0b3675d5dc3272824", "patch": "@@ -50,42 +50,6 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n     buf\n }\n \n-pub fn const_label(node: &ast::Const) -> String {\n-    let mut s = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(s, \"{} \", vis);\n-    }\n-    format_to!(s, \"const \");\n-    if let Some(name) = node.name() {\n-        format_to!(s, \"{}\", name);\n-    } else {\n-        format_to!(s, \"?\");\n-    }\n-    format_to!(s, \": \");\n-    if let Some(ty) = node.ty() {\n-        format_to!(s, \"{}\", ty);\n-    } else {\n-        format_to!(s, \"?\");\n-    }\n-    format_to!(s, \";\");\n-    s\n-}\n-\n-pub fn type_label(node: &ast::TypeAlias) -> String {\n-    let mut s = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(s, \"{} \", vis);\n-    }\n-    format_to!(s, \"type \");\n-    if let Some(name) = node.name() {\n-        format_to!(s, \"{}\", name);\n-    } else {\n-        format_to!(s, \"?\");\n-    }\n-    format_to!(s, \";\");\n-    s\n-}\n-\n pub fn macro_label(node: &ast::Macro) -> String {\n     let name = node.name();\n     let mut s = String::new();"}]}