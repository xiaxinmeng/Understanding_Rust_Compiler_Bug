{"sha": "2acad9c17edbdecf8060324ba11768b0a9c7c635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhY2FkOWMxN2VkYmRlY2Y4MDYwMzI0YmExMTc2OGIwYTljN2M2MzU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-23T15:59:16Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-23T15:59:16Z"}, "message": "Rollup merge of #32434 - mitaa:rdoc-no-inline, r=alexcrichton\n\nrustdoc: Consider `doc(no_inline)` in crate-local inlining\n\nImports with `doc(no_inline)` will not be inlined, even when `doc(inline)` is present.\n\nfixes #32343\n\nr? @alexcrichton", "tree": {"sha": "c3acbdc57e7149e3403e0c063cf11339949f06cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3acbdc57e7149e3403e0c063cf11339949f06cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2acad9c17edbdecf8060324ba11768b0a9c7c635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2acad9c17edbdecf8060324ba11768b0a9c7c635", "html_url": "https://github.com/rust-lang/rust/commit/2acad9c17edbdecf8060324ba11768b0a9c7c635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2acad9c17edbdecf8060324ba11768b0a9c7c635/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7bf3d328457d6b49b1c92d752ef2022c0b0bded", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bf3d328457d6b49b1c92d752ef2022c0b0bded", "html_url": "https://github.com/rust-lang/rust/commit/d7bf3d328457d6b49b1c92d752ef2022c0b0bded"}, {"sha": "4c71347e94a420ea063a17f017ee20d516919091", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c71347e94a420ea063a17f017ee20d516919091", "html_url": "https://github.com/rust-lang/rust/commit/4c71347e94a420ea063a17f017ee20d516919091"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "e9c55c56a9d7226216aef54ade59825e99b1a654", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -256,7 +256,7 @@ pub fn build_impls(cx: &DocContext,\n                 cstore::DlImpl(did) => build_impl(cx, tcx, did, impls),\n                 cstore::DlDef(Def::Mod(did)) => {\n                     // Don't recurse if this is a #[doc(hidden)] module\n-                    if load_attrs(cx, tcx, did).list_def(\"doc\").has_word(\"hidden\") {\n+                    if load_attrs(cx, tcx, did).list(\"doc\").has_word(\"hidden\") {\n                         return;\n                     }\n \n@@ -299,7 +299,7 @@ pub fn build_impl(cx: &DocContext,\n     if let Some(ref t) = associated_trait {\n         // If this is an impl for a #[doc(hidden)] trait, be sure to not inline\n         let trait_attrs = load_attrs(cx, tcx, t.def_id);\n-        if trait_attrs.list_def(\"doc\").has_word(\"hidden\") {\n+        if trait_attrs.list(\"doc\").has_word(\"hidden\") {\n             return\n         }\n     }"}, {"sha": "cca027ca17a016d1b32eadea1796af2cad471855", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -418,7 +418,7 @@ impl Clean<Item> for doctree::Module {\n pub trait Attributes {\n     fn has_word(&self, &str) -> bool;\n     fn value<'a>(&'a self, &str) -> Option<&'a str>;\n-    fn list_def<'a>(&'a self, &str) -> &'a [Attribute];\n+    fn list<'a>(&'a self, &str) -> &'a [Attribute];\n }\n \n impl Attributes for [Attribute] {\n@@ -447,7 +447,7 @@ impl Attributes for [Attribute] {\n     }\n \n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn list_def<'a>(&'a self, name: &str) -> &'a [Attribute] {\n+    fn list<'a>(&'a self, name: &str) -> &'a [Attribute] {\n         for attr in self {\n             if let List(ref x, ref list) = *attr {\n                 if name == *x {\n@@ -1535,7 +1535,7 @@ impl PrimitiveType {\n     }\n \n     fn find(attrs: &[Attribute]) -> Option<PrimitiveType> {\n-        for attr in attrs.list_def(\"doc\") {\n+        for attr in attrs.list(\"doc\") {\n             if let NameValue(ref k, ref v) = *attr {\n                 if \"primitive\" == *k {\n                     if let ret@Some(..) = PrimitiveType::from_str(v) {"}, {"sha": "1e59920d66d15643d9f4e8780dc7630df5141b37", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -432,7 +432,7 @@ pub fn run(mut krate: clean::Crate,\n \n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n-    if let Some(attrs) = krate.module.as_ref().map(|m| m.attrs.list_def(\"doc\")) {\n+    if let Some(attrs) = krate.module.as_ref().map(|m| m.attrs.list(\"doc\")) {\n         for attr in attrs {\n             match *attr {\n                 clean::NameValue(ref x, ref s)\n@@ -832,7 +832,7 @@ fn extern_location(e: &clean::ExternalCrate, dst: &Path) -> ExternalLocation {\n \n     // Failing that, see if there's an attribute specifying where to find this\n     // external crate\n-    e.attrs.list_def(\"doc\").value(\"html_root_url\").map(|url| {\n+    e.attrs.list(\"doc\").value(\"html_root_url\").map(|url| {\n         let mut url = url.to_owned();\n         if !url.ends_with(\"/\") {\n             url.push('/')\n@@ -1846,6 +1846,7 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n+    // FIXME(#24111): remove when `const_fn` is stabilized\n     let vis_constness = match get_unstable_features_setting() {\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst"}, {"sha": "a68f0a39ca94c0e4149625f8e413049fb023ab0e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -383,7 +383,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n \n     // Process all of the crate attributes, extracting plugin metadata along\n     // with the passes which we are supposed to run.\n-    for attr in krate.module.as_ref().unwrap().attrs.list_def(\"doc\") {\n+    for attr in krate.module.as_ref().unwrap().attrs.list(\"doc\") {\n         match *attr {\n             clean::Word(ref w) if \"no_default_passes\" == *w => {\n                 default_passes = false;"}, {"sha": "154b812cdff3ed5fe271feccc16cd987c2eab1be", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -33,7 +33,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n         }\n         impl<'a> fold::DocFolder for Stripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n-                if i.attrs.list_def(\"doc\").has_word(\"hidden\") {\n+                if i.attrs.list(\"doc\").has_word(\"hidden\") {\n                     debug!(\"found one in strip_hidden; removing\");\n                     self.stripped.insert(i.def_id);\n "}, {"sha": "e4ef0c1a4d6304bc4e167608c030f7a831b24838", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             while let Some(id) = cx.map.get_enclosing_scope(node) {\n                 node = id;\n                 let attrs = cx.map.attrs(node).clean(cx);\n-                if attrs.list_def(\"doc\").has_word(\"hidden\") {\n+                if attrs.list(\"doc\").has_word(\"hidden\") {\n                     return true;\n                 }\n                 if node == ast::CRATE_NODE_ID {\n@@ -251,11 +251,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Some(analysis) => analysis, None => return false\n         };\n \n+        let use_attrs = tcx.map.attrs(id).clean(self.cx);\n+\n         let is_private = !analysis.access_levels.is_public(def);\n         let is_hidden = inherits_doc_hidden(self.cx, def_node_id);\n+        let is_no_inline = use_attrs.list(\"doc\").has_word(\"no_inline\");\n \n         // Only inline if requested or if the item would otherwise be stripped\n-        if !please_inline && !is_private && !is_hidden {\n+        if (!please_inline && !is_private && !is_hidden) || is_no_inline {\n             return false\n         }\n "}, {"sha": "a045c9624b1a1c5bb029bd928f5ff5b75f478965", "filename": "src/test/rustdoc/inline_local/issue-32343.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acad9c17edbdecf8060324ba11768b0a9c7c635/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs?ref=2acad9c17edbdecf8060324ba11768b0a9c7c635", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @!has issue_32343/struct.Foo.html\n+// @has issue_32343/index.html\n+// @has - '//code' 'pub use foo::Foo'\n+// @!has - '//code/a' 'Foo'\n+#[doc(no_inline)]\n+pub use foo::Foo;\n+\n+// @!has issue_32343/struct.Bar.html\n+// @has issue_32343/index.html\n+// @has - '//code' 'pub use foo::Bar'\n+// @has - '//code/a' 'Bar'\n+#[doc(no_inline)]\n+pub use foo::Bar;\n+\n+mod foo {\n+    pub struct Foo;\n+    pub struct Bar;\n+}\n+\n+pub mod bar {\n+    // @has issue_32343/bar/struct.Bar.html\n+    pub use ::foo::Bar;\n+}"}]}