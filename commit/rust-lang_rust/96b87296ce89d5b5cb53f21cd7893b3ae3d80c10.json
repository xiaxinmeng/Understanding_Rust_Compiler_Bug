{"sha": "96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Yjg3Mjk2Y2U4OWQ1YjVjYjUzZjIxY2Q3ODkzYjNhZTNkODBjMTA=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-19T21:29:58Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-25T01:30:07Z"}, "message": "Move linker code to the Linker trait instead.", "tree": {"sha": "d8d7e4a1bd362d7a85ae08349d6997b077323d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d7e4a1bd362d7a85ae08349d6997b077323d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAlq2+58ACgkQBWtye7nB\nAnzEkQgAmA3JoYJY8B8fEhD6y8cFIQbVoN69rvgJFypx3tQwjb1tGclWelTjmZGI\n2eDnAkkKuUjUIa1tnI4aRnWI8c31trkVcc/NY7STkhwbpizAZxRo5+AhamlRNr4m\n9rCxk3ydRdT/OylIqBe2SqOn6HGYOa9J2gx/3xsLDh38mz/edEpdHDBZqbu3gM1G\nAAspsEU83lzq/9f1LG+yQI8RaMANocVzc7tmC0NZz2oT1ce+w7vFCvakEdeFOwGz\n9RFI6oAS4cdM1rUKTcrwsO4BJsQ9bTeGmnjdJi0ih6jDAssGCM7mOWAcDKqm2Tea\n4AS0bSupyQXlyilMWD1b/PMq8uQvHQ==\n=kBTM\n-----END PGP SIGNATURE-----", "payload": "tree d8d7e4a1bd362d7a85ae08349d6997b077323d9a\nparent e155ecdc9714f3ac76b554dc15ba06e219f576e0\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521494998 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521941407 +0200\n\nMove linker code to the Linker trait instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "html_url": "https://github.com/rust-lang/rust/commit/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e155ecdc9714f3ac76b554dc15ba06e219f576e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e155ecdc9714f3ac76b554dc15ba06e219f576e0", "html_url": "https://github.com/rust-lang/rust/commit/e155ecdc9714f3ac76b554dc15ba06e219f576e0"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "75ba83a7c620a62932c6bac64503fd4c47f23683", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "patch": "@@ -1085,20 +1085,8 @@ fn link_args(cmd: &mut Linker,\n         cmd.build_static_executable();\n     }\n \n-    // If we're doing PGO generation stuff and on a GNU-like linker, use the\n-    // \"-u\" flag to properly pull in the profiler runtime bits.\n-    //\n-    // This is because LLVM otherwise won't add the needed initialization for us\n-    // on Linux (though the extra flag should be harmless if it does).\n-    //\n-    // See https://reviews.llvm.org/D14033 and https://reviews.llvm.org/D14030.\n-    //\n-    // Though it may be worth to try to revert those changes upstream, since the\n-    // overhead of the initialization should be minor.\n-    if sess.opts.debugging_opts.pgo_gen.is_some() &&\n-        sess.target.target.options.linker_is_gnu\n-    {\n-        cmd.args(&[\"-u\".to_owned(), \"__llvm_profile_runtime\".to_owned()]);\n+    if sess.opts.debugging_opts.pgo_gen.is_some() {\n+        cmd.pgo_gen();\n     }\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to"}, {"sha": "c8bbfed41eb51f0f259cc921e4f8549679147148", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b87296ce89d5b5cb53f21cd7893b3ae3d80c10/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=96b87296ce89d5b5cb53f21cd7893b3ae3d80c10", "patch": "@@ -117,6 +117,7 @@ pub trait Linker {\n     fn partial_relro(&mut self);\n     fn no_relro(&mut self);\n     fn optimize(&mut self);\n+    fn pgo_gen(&mut self);\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n@@ -280,6 +281,24 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n+    fn pgo_gen(&mut self) {\n+        if !self.sess.target.target.options.linker_is_gnu { return }\n+\n+        // If we're doing PGO generation stuff and on a GNU-like linker, use the\n+        // \"-u\" flag to properly pull in the profiler runtime bits.\n+        //\n+        // This is because LLVM otherwise won't add the needed initialization\n+        // for us on Linux (though the extra flag should be harmless if it\n+        // does).\n+        //\n+        // See https://reviews.llvm.org/D14033 and https://reviews.llvm.org/D14030.\n+        //\n+        // Though it may be worth to try to revert those changes upstream, since\n+        // the overhead of the initialization should be minor.\n+        self.cmd.arg(\"-u\");\n+        self.cmd.arg(\"__llvm_profile_runtime\");\n+    }\n+\n     fn debuginfo(&mut self) {\n         // Don't do anything special here for GNU-style linkers.\n     }\n@@ -509,6 +528,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // Needs more investigation of `/OPT` arguments\n     }\n \n+    fn pgo_gen(&mut self) {\n+        // Nothing needed here.\n+    }\n+\n     fn debuginfo(&mut self) {\n         // This will cause the Microsoft linker to generate a PDB file\n         // from the CodeView line tables in the object files.\n@@ -712,6 +735,10 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.args(&[\"--memory-init-file\", \"0\"]);\n     }\n \n+    fn pgo_gen(&mut self) {\n+        // noop, but maybe we need something like the gnu linker?\n+    }\n+\n     fn debuginfo(&mut self) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n@@ -877,6 +904,9 @@ impl Linker for WasmLd {\n     fn optimize(&mut self) {\n     }\n \n+    fn pgo_gen(&mut self) {\n+    }\n+\n     fn debuginfo(&mut self) {\n     }\n "}]}