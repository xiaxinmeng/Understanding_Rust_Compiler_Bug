{"sha": "aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmY3ZWUyYjY1ZmRiNTFlMTI1ZmMxNDYxNTU0Y2Q5ZjY3M2M2MGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-24T12:50:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-24T12:50:30Z"}, "message": "Merge #7028\n\n7028: pit-of-success API for unresolved code actions r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7b7ee3cecfe87f4a7a939687b72e7aaef0db06df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7ee3cecfe87f4a7a939687b72e7aaef0db06df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5I6WCRBK7hj4Ov3rIwAAdHIIAFjbTUUou/R+vTf56mhgAyrS\nITfPEeU5x854Mg4ldb0Cb2FZEoRgRo3Xz7EVHg9hW87B7RVN3pwrYxA31ye0E3dW\ncjIc+j/s8UHc+5bEUwutOfoP0dpDk5GsayG5TgfNIsAsMo/mgkJg/XUQVrC9ZIyu\n8nshP5aTy4Zv1ozhXEKL8J1+IPPkXEFYU/QDzULWO+WYoRStPjhH37SYAIhg/fbc\nDnpko8Z0mfpn9sr2xYVRbYjcYY3zSD5kKey5Z0KxwMcFIwssFpxjQ0d/hZBYZVvN\nMbDljwBDPYAoBGr9wbqxqX4k+p7gH/X8cNWQjqr7fjSDGVMkEg36eATvWvt5yo8=\n=rurK\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b7ee3cecfe87f4a7a939687b72e7aaef0db06df\nparent 06320015af0c966df3deef9994b535fb110d303e\nparent 33384d289e246ea29c8e8103fef3099a6781e23b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608814230 +0000\ncommitter GitHub <noreply@github.com> 1608814230 +0000\n\nMerge #7028\n\n7028: pit-of-success API for unresolved code actions r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "html_url": "https://github.com/rust-lang/rust/commit/aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebf7ee2b65fdb51e125fc1461554cd9f673c60e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06320015af0c966df3deef9994b535fb110d303e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06320015af0c966df3deef9994b535fb110d303e", "html_url": "https://github.com/rust-lang/rust/commit/06320015af0c966df3deef9994b535fb110d303e"}, {"sha": "33384d289e246ea29c8e8103fef3099a6781e23b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33384d289e246ea29c8e8103fef3099a6781e23b", "html_url": "https://github.com/rust-lang/rust/commit/33384d289e246ea29c8e8103fef3099a6781e23b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a75cc85b6e88a00bf443250940ee283086d7e8b1", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7ee2b65fdb51e125fc1461554cd9f673c60e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7ee2b65fdb51e125fc1461554cd9f673c60e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "patch": "@@ -490,25 +490,25 @@ impl Analysis {\n             .unwrap_or_default())\n     }\n \n+    /// Computes assists (aka code actions aka intentions) for the given\n+    /// position. Computes enough info to show the lightbulb list in the editor,\n+    /// but doesn't compute actual edits, to improve performance.\n+    ///\n+    /// When the user clicks on the assist, call `resolve_assists` to get the\n+    /// edit.\n+    pub fn assists(&self, config: &AssistConfig, frange: FileRange) -> Cancelable<Vec<Assist>> {\n+        self.with_db(|db| Assist::unresolved(db, config, frange))\n+    }\n+\n     /// Computes resolved assists with source changes for the given position.\n-    pub fn resolved_assists(\n+    pub fn resolve_assists(\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n     ) -> Cancelable<Vec<ResolvedAssist>> {\n         self.with_db(|db| assists::Assist::resolved(db, config, frange))\n     }\n \n-    /// Computes unresolved assists (aka code actions aka intentions) for the given\n-    /// position.\n-    pub fn unresolved_assists(\n-        &self,\n-        config: &AssistConfig,\n-        frange: FileRange,\n-    ) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| Assist::unresolved(db, config, frange))\n-    }\n-\n     /// Computes the set of diagnostics for the given file.\n     pub fn diagnostics(\n         &self,"}, {"sha": "1207b31c486853d128de9103f59e4feeb3087b04", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7ee2b65fdb51e125fc1461554cd9f673c60e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7ee2b65fdb51e125fc1461554cd9f673c60e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=aebf7ee2b65fdb51e125fc1461554cd9f673c60e", "patch": "@@ -946,12 +946,12 @@ pub(crate) fn handle_code_action(\n \n     if snap.config.client_caps.code_action_resolve {\n         for (index, assist) in\n-            snap.analysis.unresolved_assists(&assists_config, frange)?.into_iter().enumerate()\n+            snap.analysis.assists(&assists_config, frange)?.into_iter().enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis.resolved_assists(&assists_config, frange)?.into_iter() {\n+        for assist in snap.analysis.resolve_assists(&assists_config, frange)?.into_iter() {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }\n@@ -1014,7 +1014,7 @@ pub(crate) fn handle_code_action_resolve(\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n+    let assists = snap.analysis.resolve_assists(&snap.config.assist, frange)?;\n     let (id, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];"}]}