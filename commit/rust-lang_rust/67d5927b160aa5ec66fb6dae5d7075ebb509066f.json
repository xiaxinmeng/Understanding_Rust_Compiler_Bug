{"sha": "67d5927b160aa5ec66fb6dae5d7075ebb509066f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDU5MjdiMTYwYWE1ZWM2NmZiNmRhZTVkNzA3NWViYjUwOTA2NmY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-22T07:39:54Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-22T07:39:54Z"}, "message": "Merge #1281\n\n1281: Move arm cond to match guard r=matklad a=unrealhoang\n\nI did split the rename to another commit, yet Github UI still show entirely new file change. Please review using commits.\n\nCo-authored-by: Unreal Hoang <unrealhoang@gmail.com>", "tree": {"sha": "1876de2eeab5c56d2579b5b0cdfa4789ec263200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1876de2eeab5c56d2579b5b0cdfa4789ec263200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d5927b160aa5ec66fb6dae5d7075ebb509066f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d5927b160aa5ec66fb6dae5d7075ebb509066f", "html_url": "https://github.com/rust-lang/rust/commit/67d5927b160aa5ec66fb6dae5d7075ebb509066f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d5927b160aa5ec66fb6dae5d7075ebb509066f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "html_url": "https://github.com/rust-lang/rust/commit/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78"}, {"sha": "079ed6011a1febafef4bcb209c7433a415642d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/079ed6011a1febafef4bcb209c7433a415642d19", "html_url": "https://github.com/rust-lang/rust/commit/079ed6011a1febafef4bcb209c7433a415642d19"}], "stats": {"total": 413, "additions": 294, "deletions": 119}, "files": [{"sha": "28eb0226b783e248a79f4734c5e524a4c867765b", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67d5927b160aa5ec66fb6dae5d7075ebb509066f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5927b160aa5ec66fb6dae5d7075ebb509066f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=67d5927b160aa5ec66fb6dae5d7075ebb509066f", "patch": "@@ -100,7 +100,7 @@ mod split_import;\n mod remove_dbg;\n pub mod auto_import;\n mod add_missing_impl_members;\n-mod move_guard_to_arm_body;\n+mod move_guard;\n \n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n@@ -119,7 +119,8 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_missing_impl_members::add_missing_impl_members,\n         add_missing_impl_members::add_missing_default_members,\n         inline_local_variable::inline_local_varialbe,\n-        move_guard_to_arm_body::move_guard_to_arm_body,\n+        move_guard::move_guard_to_arm_body,\n+        move_guard::move_arm_cond_to_match_guard,\n     ]\n }\n "}, {"sha": "22ba91fb77103773f16d4607892c776c4c321cc2", "filename": "crates/ra_assists/src/move_guard.rs", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/67d5927b160aa5ec66fb6dae5d7075ebb509066f/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5927b160aa5ec66fb6dae5d7075ebb509066f/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs?ref=67d5927b160aa5ec66fb6dae5d7075ebb509066f", "patch": "@@ -0,0 +1,260 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    TextUnit,\n+    SyntaxElement,\n+    ast::{MatchArm, AstNode, AstToken, IfExpr},\n+    ast,\n+};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let match_arm = ctx.node_at_offset::<MatchArm>()?;\n+    let guard = match_arm.guard()?;\n+    let space_before_guard = guard.syntax().prev_sibling_or_token();\n+\n+    let guard_conditions = guard.expr()?;\n+    let arm_expr = match_arm.expr()?;\n+    let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n+\n+    ctx.add_action(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n+        edit.target(guard.syntax().range());\n+        let offseting_amount = match space_before_guard {\n+            Some(SyntaxElement::Token(tok)) => {\n+                if let Some(_) = ast::Whitespace::cast(tok) {\n+                    let ele = space_before_guard.unwrap().range();\n+                    edit.delete(ele);\n+                    ele.len()\n+                } else {\n+                    TextUnit::from(0)\n+                }\n+            }\n+            _ => TextUnit::from(0),\n+        };\n+\n+        edit.delete(guard.syntax().range());\n+        edit.replace_node_and_indent(arm_expr.syntax(), buf);\n+        edit.set_cursor(arm_expr.syntax().range().start() + TextUnit::from(3) - offseting_amount);\n+    });\n+    ctx.build()\n+}\n+\n+pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let match_arm: &MatchArm = ctx.node_at_offset::<MatchArm>()?;\n+    let last_match_pat = match_arm.pats().last()?;\n+\n+    let arm_body = match_arm.expr()?;\n+    let if_expr: &IfExpr = IfExpr::cast(arm_body.syntax())?;\n+    let cond = if_expr.condition()?;\n+    let then_block = if_expr.then_branch()?;\n+\n+    // Not support if with else branch\n+    if let Some(_) = if_expr.else_branch() {\n+        return None;\n+    }\n+    // Not support moving if let to arm guard\n+    if let Some(_) = cond.pat() {\n+        return None;\n+    }\n+\n+    let buf = format!(\" if {}\", cond.syntax().text());\n+\n+    ctx.add_action(\n+        AssistId(\"move_arm_cond_to_match_guard\"),\n+        \"move condition to match guard\",\n+        |edit| {\n+            edit.target(if_expr.syntax().range());\n+            let then_only_expr = then_block.statements().next().is_none();\n+\n+            match then_block.expr() {\n+                Some(then_expr) if then_only_expr => {\n+                    edit.replace(if_expr.syntax().range(), then_expr.syntax().text())\n+                }\n+                _ => edit.replace(if_expr.syntax().range(), then_block.syntax().text()),\n+            }\n+\n+            edit.insert(last_match_pat.syntax().range().end(), buf);\n+            edit.set_cursor(last_match_pat.syntax().range().end() + TextUnit::from(1));\n+        },\n+    );\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+\n+    #[test]\n+    fn move_guard_to_arm_body_target() {\n+        check_assist_target(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"if chars.clone().next() == Some('\\n')\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_guard_to_arm_body_works() {\n+        check_assist(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_guard_to_arm_body_works_complex_match() {\n+        check_assist(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                match x {\n+                    <|>y @ 4 | y @ 5    if y > 5 => true,\n+                    _ => false\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                match x {\n+                    y @ 4 | y @ 5 => if y > 5 { <|>true },\n+                    _ => false\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_if_let_not_works() {\n+        check_assist_not_applicable(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if let Some(_) = chars.clone().next() { <|>false },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_if_empty_body_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if chars.clone().next().is_some() { <|> },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next().is_some() => {  },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_if_multiline_body_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+            fn f() {\n+                let mut t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if chars.clone().next().is_some() {\n+                        t = 'e';<|>\n+                        false\n+                    },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let mut t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next().is_some() => {\n+                        t = 'e';\n+                        false\n+                    },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "a8ca19f5ddf7f343eef41ee959e45eaa67f0eaf0", "filename": "crates/ra_assists/src/move_guard_to_arm_body.rs", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs?ref=4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "patch": "@@ -1,115 +0,0 @@\n-use hir::db::HirDatabase;\n-use ra_syntax::{\n-    TextUnit,\n-    SyntaxElement,\n-    ast::{MatchArm, AstNode, AstToken},\n-    ast,\n-};\n-\n-use crate::{AssistCtx, Assist, AssistId};\n-\n-pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let match_arm = ctx.node_at_offset::<MatchArm>()?;\n-    let guard = match_arm.guard()?;\n-    let space_before_guard = guard.syntax().prev_sibling_or_token();\n-\n-    let guard_conditions = guard.expr()?;\n-    let arm_expr = match_arm.expr()?;\n-    let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n-\n-    ctx.add_action(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n-        edit.target(guard.syntax().range());\n-        let offseting_amount = match space_before_guard {\n-            Some(SyntaxElement::Token(tok)) => {\n-                if let Some(_) = ast::Whitespace::cast(tok) {\n-                    let ele = space_before_guard.unwrap().range();\n-                    edit.delete(ele);\n-                    ele.len()\n-                } else {\n-                    TextUnit::from(0)\n-                }\n-            }\n-            _ => TextUnit::from(0),\n-        };\n-\n-        edit.delete(guard.syntax().range());\n-        edit.replace_node_and_indent(arm_expr.syntax(), buf);\n-        edit.set_cursor(arm_expr.syntax().range().start() + TextUnit::from(3) - offseting_amount);\n-    });\n-    ctx.build()\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    use crate::helpers::{ check_assist, check_assist_target };\n-\n-    #[test]\n-    fn move_guard_to_arm_body_target() {\n-        check_assist_target(\n-            move_guard_to_arm_body,\n-            r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n-                    _ => true\n-                }\n-            }\n-            \"#,\n-            r#\"if chars.clone().next() == Some('\\n')\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn move_guard_to_arm_body_works() {\n-        check_assist(\n-            move_guard_to_arm_body,\n-            r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n-                    _ => true\n-                }\n-            }\n-            \"#,\n-            r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn move_guard_to_arm_body_works_complex_match() {\n-        check_assist(\n-            move_guard_to_arm_body,\n-            r#\"\n-            fn f() {\n-                match x {\n-                    <|>y @ 4 | y @ 5    if y > 5 => true,\n-                    _ => false\n-                }\n-            }\n-            \"#,\n-            r#\"\n-            fn f() {\n-                match x {\n-                    y @ 4 | y @ 5 => if y > 5 { <|>true },\n-                    _ => false\n-                }\n-            }\n-            \"#,\n-        );\n-    }\n-}"}, {"sha": "22470bc56337aceefbc1984fd62cdcce674030ad", "filename": "docs/user/features.md", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/67d5927b160aa5ec66fb6dae5d7075ebb509066f/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/67d5927b160aa5ec66fb6dae5d7075ebb509066f/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=67d5927b160aa5ec66fb6dae5d7075ebb509066f", "patch": "@@ -390,14 +390,14 @@ fn foo() {\n \n - Move guard expression to match arm body\n ```rust\n-//before:\n+// before:\n fn f() {\n     match x {\n         <|>y @ 4 | y @ 5    if y > 5 => true,\n         _ => false\n     }\n }\n-//after:\n+// after:\n fn f() {\n     match x {\n         y @ 4 | y @ 5 => if y > 5 { <|>true },\n@@ -406,6 +406,35 @@ fn f() {\n }\n ```\n \n+- Move if condition to match arm guard\n+```rust\n+// before:\n+fn f() {\n+    let mut t = 'a';\n+    let chars = \"abcd\";\n+    match t {\n+        '\\r' => if chars.clone().next().is_some() {\n+            t = 'e';<|>\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+\n+// after:\n+fn f() {\n+    let mut t = 'a';\n+    let chars = \"abcd\";\n+    match t {\n+        '\\r' <|>if chars.clone().next().is_some() => {\n+            t = 'e';\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}