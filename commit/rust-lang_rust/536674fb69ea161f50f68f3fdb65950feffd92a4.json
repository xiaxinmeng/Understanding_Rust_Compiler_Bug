{"sha": "536674fb69ea161f50f68f3fdb65950feffd92a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNjY3NGZiNjllYTE2MWY1MGY2OGYzZmRiNjU5NTBmZWZmZDkyYTQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-04T21:20:00Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-04T21:22:08Z"}, "message": "cleanup WithOptConstParam queries", "tree": {"sha": "27174f306a01bdab9ff2e39697d37208404c3376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27174f306a01bdab9ff2e39697d37208404c3376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/536674fb69ea161f50f68f3fdb65950feffd92a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/536674fb69ea161f50f68f3fdb65950feffd92a4", "html_url": "https://github.com/rust-lang/rust/commit/536674fb69ea161f50f68f3fdb65950feffd92a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/536674fb69ea161f50f68f3fdb65950feffd92a4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a835b483fe0418b48ca44afb65cd0dd6bad4eb9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a835b483fe0418b48ca44afb65cd0dd6bad4eb9b", "html_url": "https://github.com/rust-lang/rust/commit/a835b483fe0418b48ca44afb65cd0dd6bad4eb9b"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "1aadf6c8d6f2a52fae45eb5b9b9873fac96e7847", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=536674fb69ea161f50f68f3fdb65950feffd92a4", "patch": "@@ -1,9 +1,10 @@\n //! Values computed by queries that use MIR.\n \n-use crate::mir::{Body, Promoted};\n+use crate::mir::{abstract_const, Body, Promoted};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n@@ -407,7 +408,12 @@ pub struct CoverageInfo {\n     pub num_expressions: u32,\n }\n \n+/// Shims which make dealing with `WithOptConstParam` easier.\n+///\n+/// For more information on why this is needed, consider looking\n+/// at the docs for `WithOptConstParam` itself.\n impl<'tcx> TyCtxt<'tcx> {\n+    #[inline]\n     pub fn mir_borrowck_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -419,6 +425,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mir_const_qualif_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -430,6 +437,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn promoted_mir_of_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n@@ -440,4 +448,28 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.promoted_mir(def.did)\n         }\n     }\n+\n+    #[inline]\n+    pub fn optimized_mir_of_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> &'tcx Body<'tcx> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.optimized_mir_of_const_arg((did, param_did))\n+        } else {\n+            self.optimized_mir(def.did)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn mir_abstract_const_of_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> Result<Option<&'tcx [abstract_const::Node<'tcx>]>, ErrorReported> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.mir_abstract_const_of_const_arg((did, param_did))\n+        } else {\n+            self.mir_abstract_const(def.did)\n+        }\n+    }\n }"}, {"sha": "92116a6a69b11e28d4413cd2ed14cd7f233a5a40", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=536674fb69ea161f50f68f3fdb65950feffd92a4", "patch": "@@ -2953,13 +2953,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => {\n-                if let Some((did, param_did)) = def.as_const_arg() {\n-                    self.optimized_mir_of_const_arg((did, param_did))\n-                } else {\n-                    self.optimized_mir(def.did)\n-                }\n-            }\n+            ty::InstanceDef::Item(def) => self.optimized_mir_of_opt_const_arg(def),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "3339ffdfda4ce98a5fa38c1e9d60bf06645acd31", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=536674fb69ea161f50f68f3fdb65950feffd92a4", "patch": "@@ -482,11 +482,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    if let Some((did, param_did)) = def.as_const_arg() {\n-                        Ok(self.tcx.optimized_mir_of_const_arg((did, param_did)))\n-                    } else {\n-                        Ok(self.tcx.optimized_mir(def.did))\n-                    }\n+                    Ok(self.tcx.optimized_mir_of_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "a4dd1c9165ed1442559649ee879c90451d508aca", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=536674fb69ea161f50f68f3fdb65950feffd92a4", "patch": "@@ -332,11 +332,7 @@ fn mir_promoted(\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n     let _ = tcx.mir_const_qualif_opt_const_arg(def);\n-    let _ = if let Some(param_did) = def.const_param_did {\n-        tcx.mir_abstract_const_of_const_arg((def.did, param_did))\n-    } else {\n-        tcx.mir_abstract_const(def.did.to_def_id())\n-    };\n+    let _ = tcx.mir_abstract_const_of_opt_const_arg(def.to_global());\n     let mut body = tcx.mir_const(def).steal();\n \n     let mut required_consts = Vec::new();"}, {"sha": "e0a79cbbf53b43f274723fdcd0094f5ce7ce80eb", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536674fb69ea161f50f68f3fdb65950feffd92a4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=536674fb69ea161f50f68f3fdb65950feffd92a4", "patch": "@@ -147,11 +147,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = if let Some(def) = def.as_const_arg() {\n-                    infcx.tcx.optimized_mir_of_const_arg(def)\n-                } else {\n-                    infcx.tcx.optimized_mir(def.did)\n-                };\n+                let mir_body = infcx.tcx.optimized_mir_of_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -212,13 +208,7 @@ impl AbstractConst<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = match (def.did.as_local(), def.const_param_did) {\n-            (Some(did), Some(param_did)) => {\n-                tcx.mir_abstract_const_of_const_arg((did, param_did))?\n-            }\n-            _ => tcx.mir_abstract_const(def.did)?,\n-        };\n-\n+        let inner = tcx.mir_abstract_const_of_opt_const_arg(def)?;\n         Ok(inner.map(|inner| AbstractConst { inner, substs }))\n     }\n "}]}