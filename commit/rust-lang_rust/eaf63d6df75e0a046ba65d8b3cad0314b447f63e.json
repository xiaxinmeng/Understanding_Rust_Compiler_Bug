{"sha": "eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjYzZDZkZjc1ZTBhMDQ2YmE2NWQ4YjNjYWQwMzE0YjQ0N2Y2M2U=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T02:49:14Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:14:20Z"}, "message": "Unify names of lint entry functions in loops to 'check'", "tree": {"sha": "63a2d105147f99675882b59232848ab8277a4af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a2d105147f99675882b59232848ab8277a4af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "html_url": "https://github.com/rust-lang/rust/commit/eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "html_url": "https://github.com/rust-lang/rust/commit/845a3a061c541a4c2b2293022113cbfd3e6e9cb2"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "67d1ac89b97afd7d4f90492ca761d6844fd93bef", "filename": "clippy_lints/src/loops/empty_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{is_in_panic_handler, is_no_std_crate, span_lint_and_help};\n use rustc_hir::{Block, Expr};\n use rustc_lint::LateContext;\n \n-pub(super) fn check_empty_loop(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     if loop_block.stmts.is_empty() && loop_block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n         let msg = \"empty `loop {}` wastes CPU cycles\";\n         let help = if is_no_std_crate(cx.tcx.hir().krate()) {"}, {"sha": "8d98b940c66a95c3745c1c49dec67c2a74c9fa77", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n // To trigger the EXPLICIT_COUNTER_LOOP lint, a variable must be\n // incremented exactly once in the loop body, and initialized to zero\n // at the start of the loop.\n-pub(super) fn check_for_loop_explicit_counter<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "f89c4b85103635a3a0de4f10099671f7ae22246a", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n \n-pub(super) fn check_explicit_into_iter_loop(cx: &LateContext<'_>, method_args: &'hir [Expr<'hir>], arg: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, method_args: &'hir [Expr<'hir>], arg: &Expr<'_>) {\n     let mut applicability = Applicability::MachineApplicable;\n     let object = snippet_with_applicability(cx, method_args[0].span, \"_\", &mut applicability);\n     span_lint_and_sugg("}, {"sha": "0836054796a6ef19dbd234816e1dcbcbe13de4bb", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n \n-pub(super) fn lint_iter_method(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n+pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let mut applicability = Applicability::MachineApplicable;\n     let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n     let muta = if method_name == \"iter_mut\" { \"mut \" } else { \"\" };"}, {"sha": "eb53c3179ca4a8b28cef930567a88f7e807d1555", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -6,7 +6,7 @@ use rustc_lint::LateContext;\n use rustc_middle::ty;\n \n /// Checks for the `FOR_KV_MAP` lint.\n-pub(super) fn check_for_loop_over_map_kv<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "db22d90a304bcac0bf04a121ee818ee8ea422cab", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -5,7 +5,7 @@ use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n /// Checks for `for` loops over `Option`s and `Result`s.\n-pub(super) fn check_arg_type(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let ty = cx.typeck_results().expr_ty(arg);\n     if is_type_diagnostic_item(cx, ty, sym::option_type) {\n         span_lint_and_help("}, {"sha": "cb9916deb62b4a40996c536ce610e05a27495a33", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -3,7 +3,7 @@ use crate::utils::span_lint;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n \n-pub(super) fn lint(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     span_lint(\n         cx,\n         ITER_NEXT_LOOP,"}, {"sha": "3d3ae6f3152a3b9b183403ad4bbefc49acc1cb7e", "filename": "clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -9,7 +9,7 @@ use rustc_span::source_map::Span;\n \n /// Check for unnecessary `if let` usage in a for loop where only the `Some` or `Ok` variant of the\n /// iterator element is used.\n-pub(super) fn check_manual_flatten<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "bf0b8cc24594c315f196e528ca88a15c88c8b439", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -15,7 +15,7 @@ use std::iter::Iterator;\n \n /// Checks for for loops that sequentially copy items from one slice-like\n /// object to another.\n-pub(super) fn detect_manual_memcpy<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "5c96128c6a4569a4a88160f9f3eadfdcba91a32b", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -559,24 +559,24 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         }\n \n         // check for never_loop\n-        never_loop::check_never_loop(cx, expr);\n+        never_loop::check(cx, expr);\n \n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n         if let ExprKind::Loop(ref block, _, LoopSource::Loop, _) = expr.kind {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n-            empty_loop::check_empty_loop(cx, expr, block);\n-            while_let_loop::check_while_let_loop(cx, expr, block);\n+            empty_loop::check(cx, expr, block);\n+            while_let_loop::check(cx, expr, block);\n         }\n \n-        while_let_on_iterator::check_while_let_on_iterator(cx, expr);\n+        while_let_on_iterator::check(cx, expr);\n \n         if let Some((cond, body)) = higher::while_loop(&expr) {\n-            while_immutable_condition::check_infinite_loop(cx, cond, body);\n+            while_immutable_condition::check(cx, cond, body);\n         }\n \n-        needless_collect::check_needless_collect(expr, cx);\n+        needless_collect::check(expr, cx);\n     }\n }\n \n@@ -588,17 +588,17 @@ fn check_for_loop<'tcx>(\n     expr: &'tcx Expr<'_>,\n     span: Span,\n ) {\n-    let is_manual_memcpy_triggered = manual_memcpy::detect_manual_memcpy(cx, pat, arg, body, expr);\n+    let is_manual_memcpy_triggered = manual_memcpy::check(cx, pat, arg, body, expr);\n     if !is_manual_memcpy_triggered {\n-        needless_range_loop::check_for_loop_range(cx, pat, arg, body, expr);\n-        explicit_counter_loop::check_for_loop_explicit_counter(cx, pat, arg, body, expr);\n+        needless_range_loop::check(cx, pat, arg, body, expr);\n+        explicit_counter_loop::check(cx, pat, arg, body, expr);\n     }\n     check_for_loop_arg(cx, pat, arg, expr);\n-    for_kv_map::check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n-    mut_range_bound::check_for_mut_range_bound(cx, arg, body);\n-    single_element_loop::check_for_single_element_loop(cx, pat, arg, body, expr);\n-    same_item_push::detect_same_item_push(cx, pat, arg, body, expr);\n-    manual_flatten::check_manual_flatten(cx, pat, arg, body, span);\n+    for_kv_map::check(cx, pat, arg, body, expr);\n+    mut_range_bound::check(cx, arg, body);\n+    single_element_loop::check(cx, pat, arg, body, expr);\n+    same_item_push::check(cx, pat, arg, body, expr);\n+    manual_flatten::check(cx, pat, arg, body, span);\n }\n \n fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n@@ -610,13 +610,13 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n             // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n             if method_name == \"iter\" || method_name == \"iter_mut\" {\n                 if is_ref_iterable_type(cx, &args[0]) {\n-                    explicit_iter_loop::lint_iter_method(cx, args, arg, method_name);\n+                    explicit_iter_loop::check(cx, args, arg, method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n                 let receiver_ty = cx.typeck_results().expr_ty(&args[0]);\n                 let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(&args[0]);\n                 if TyS::same_type(receiver_ty, receiver_ty_adjusted) {\n-                    explicit_into_iter_loop::check_explicit_into_iter_loop(cx, args, arg);\n+                    explicit_into_iter_loop::check(cx, args, arg);\n                 } else {\n                     let ref_receiver_ty = cx.tcx.mk_ref(\n                         cx.tcx.lifetimes.re_erased,\n@@ -626,17 +626,17 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n                         },\n                     );\n                     if TyS::same_type(receiver_ty_adjusted, ref_receiver_ty) {\n-                        explicit_iter_loop::lint_iter_method(cx, args, arg, method_name)\n+                        explicit_iter_loop::check(cx, args, arg, method_name)\n                     }\n                 }\n             } else if method_name == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n-                iter_next_loop::lint(cx, expr);\n+                iter_next_loop::check(cx, expr);\n                 next_loop_linted = true;\n             }\n         }\n     }\n     if !next_loop_linted {\n-        for_loops_over_fallibles::check_arg_type(cx, pat, arg);\n+        for_loops_over_fallibles::check(cx, pat, arg);\n     }\n }\n "}, {"sha": "3ae592950f13b63163efd3a3a09252b77bbe8530", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n-pub(super) fn check_for_mut_range_bound(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if let Some(higher::Range {\n         start: Some(start),\n         end: Some(end),"}, {"sha": "6f27130910550e589e1f7bc44902aee7064dc766", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -15,7 +15,7 @@ use rustc_span::symbol::{sym, Ident};\n \n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n \n-pub(super) fn check_needless_collect<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n+pub(super) fn check<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     check_needless_collect_direct_usage(expr, cx);\n     check_needless_collect_indirect_usage(expr, cx);\n }"}, {"sha": "5f02e4b9d875dd907844c962459487fb500dfa65", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -21,7 +21,7 @@ use std::mem;\n /// Checks for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n #[allow(clippy::too_many_lines)]\n-pub(super) fn check_for_loop_range<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "45e1001d755550399697dcaa064dcb0b5a5d60a8", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::{Block, Expr, ExprKind, HirId, InlineAsmOperand, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use std::iter::{once, Iterator};\n \n-pub(super) fn check_never_loop(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let ExprKind::Loop(ref block, _, _, _) = expr.kind {\n         match never_loop_block(block, expr.hir_id) {\n             NeverLoopResult::AlwaysBreak => span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\"),"}, {"sha": "f3585830e4ae3189651ff15f0d11aef5c2405ee5", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -10,7 +10,7 @@ use rustc_span::symbol::sym;\n use std::iter::Iterator;\n \n /// Detects for loop pushing the same item into a Vec\n-pub(super) fn detect_same_item_push<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     _: &'tcx Expr<'_>,"}, {"sha": "38400c93c9ab205d1a9f6eeb8e63b279e9792122", "filename": "clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Pat, PatKind};\n use rustc_lint::LateContext;\n \n-pub(super) fn check_for_single_element_loop<'tcx>(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,"}, {"sha": "05e0a7225631c5421b602d06e63c443acf3130f4", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use std::iter::Iterator;\n \n-pub(super) fn check_infinite_loop<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n     if constant(cx, cx.typeck_results(), cond).is_some() {\n         // A pure constant condition (e.g., `while false`) is not linted.\n         return;"}, {"sha": "65d8f2f1111a34fd39051ebfa4511a3a56deb520", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Block, Expr, ExprKind, MatchSource, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n \n-pub(super) fn check_while_let_loop(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     // extract the expression from the first statement (if any) in a block\n     let inner_stmt_expr = extract_expr_from_first_stmt(loop_block);\n     // or extract the first expression (if any) from the block"}, {"sha": "e5a47694faa4e79bbaeeba86a1d750980c2b8a69", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf63d6df75e0a046ba65d8b3cad0314b447f63e/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=eaf63d6df75e0a046ba65d8b3cad0314b447f63e", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::hir::map::Map;\n \n use rustc_span::symbol::sym;\n \n-pub(super) fn check_while_let_on_iterator(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let ExprKind::Match(ref match_expr, ref arms, MatchSource::WhileLetDesugar) = expr.kind {\n         let pat = &arms[0].pat.kind;\n         if let ("}]}