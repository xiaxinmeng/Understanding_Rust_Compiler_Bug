{"sha": "0f16eee013aa64108a1b1ca8fa9f9cf263635071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMTZlZWUwMTNhYTY0MTA4YTFiMWNhOGZhOWY5Y2YyNjM2MzUwNzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-26T05:21:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-02-12T15:44:40Z"}, "message": "rustc: Add the ability to not run dsymutil\n\nThis commit adds the ability for rustc to not run `dsymutil` by default\non OSX. A new codegen option, `-Z run-dsymutil=no`, was added to specify\nthat `dsymutil` should *not* run and instead the compiler should\nunconditionally keep the object files around in a compilation if\nnecessary for debug information.\n\ncc #47240", "tree": {"sha": "d86b127605015518cd02a87b54fa5d68cca7eae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d86b127605015518cd02a87b54fa5d68cca7eae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f16eee013aa64108a1b1ca8fa9f9cf263635071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f16eee013aa64108a1b1ca8fa9f9cf263635071", "html_url": "https://github.com/rust-lang/rust/commit/0f16eee013aa64108a1b1ca8fa9f9cf263635071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f16eee013aa64108a1b1ca8fa9f9cf263635071/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16362c737fe740f630ada06349fa9004e2a51bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16362c737fe740f630ada06349fa9004e2a51bb7", "html_url": "https://github.com/rust-lang/rust/commit/16362c737fe740f630ada06349fa9004e2a51bb7"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "1f40c2db45397cfded59e07a1fd0d9ecd6d9fee3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f16eee013aa64108a1b1ca8fa9f9cf263635071/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f16eee013aa64108a1b1ca8fa9f9cf263635071/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0f16eee013aa64108a1b1ca8fa9f9cf263635071", "patch": "@@ -1320,6 +1320,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"The epoch to build Rust with. Newer epochs may include features\n          that require breaking changes. The default epoch is 2015 (the first\n          epoch). Crates compiled with different epochs can be linked together.\"),\n+    run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+          \"run `dsymutil` and delete intermediate object files\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "4fe294a790fc4467edaedbd686672d48535e3f09", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0f16eee013aa64108a1b1ca8fa9f9cf263635071/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f16eee013aa64108a1b1ca8fa9f9cf263635071/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0f16eee013aa64108a1b1ca8fa9f9cf263635071", "patch": "@@ -166,7 +166,9 @@ pub(crate) fn link_binary(sess: &Session,\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n     if !sess.opts.cg.save_temps {\n-        if sess.opts.output_types.should_trans() {\n+        if sess.opts.output_types.should_trans() &&\n+            !preserve_objects_for_their_debuginfo(sess)\n+        {\n             for obj in trans.modules.iter().filter_map(|m| m.object.as_ref()) {\n                 remove(sess, obj);\n             }\n@@ -190,6 +192,52 @@ pub(crate) fn link_binary(sess: &Session,\n     out_filenames\n }\n \n+/// Returns a boolean indicating whether we should preserve the object files on\n+/// the filesystem for their debug information. This is often useful with\n+/// split-dwarf like schemes.\n+fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n+    // If the objects don't have debuginfo there's nothing to preserve.\n+    if sess.opts.debuginfo == NoDebugInfo {\n+        return false\n+    }\n+\n+    // If we're only producing artifacts that are archives, no need to preserve\n+    // the objects as they're losslessly contained inside the archives.\n+    let output_linked = sess.crate_types.borrow()\n+        .iter()\n+        .any(|x| *x != config::CrateTypeRlib && *x != config::CrateTypeStaticlib);\n+    if !output_linked {\n+        return false\n+    }\n+\n+    // If we're on OSX then the equivalent of split dwarf is turned on by\n+    // default. The final executable won't actually have any debug information\n+    // except it'll have pointers to elsewhere. Historically we've always run\n+    // `dsymutil` to \"link all the dwarf together\" but this is actually sort of\n+    // a bummer for incremental compilation! (the whole point of split dwarf is\n+    // that you don't do this sort of dwarf link).\n+    //\n+    // Basically as a result this just means that if we're on OSX and we're\n+    // *not* running dsymutil then the object files are the only source of truth\n+    // for debug information, so we must preserve them.\n+    if sess.target.target.options.is_like_osx {\n+        match sess.opts.debugging_opts.run_dsymutil {\n+            // dsymutil is not being run, preserve objects\n+            Some(false) => return true,\n+\n+            // dsymutil is being run, no need to preserve the objects\n+            Some(true) => return false,\n+\n+            // The default historical behavior was to always run dsymutil, so\n+            // we're preserving that temporarily, but we're likely to switch the\n+            // default soon.\n+            None => return false,\n+        }\n+    }\n+\n+    false\n+}\n+\n fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf {\n     let out_filename = outputs.single_output_file.clone()\n         .unwrap_or(outputs\n@@ -736,8 +784,12 @@ fn link_natively(sess: &Session,\n \n \n     // On macOS, debuggers need this utility to get run to do some munging of\n-    // the symbols\n-    if sess.target.target.options.is_like_osx && sess.opts.debuginfo != NoDebugInfo {\n+    // the symbols. Note, though, that if the object files are being preserved\n+    // for their debug information there's no need for us to run dsymutil.\n+    if sess.target.target.options.is_like_osx &&\n+        sess.opts.debuginfo != NoDebugInfo &&\n+        !preserve_objects_for_their_debuginfo(sess)\n+    {\n         match Command::new(\"dsymutil\").arg(out_filename).output() {\n             Ok(..) => {}\n             Err(e) => sess.fatal(&format!(\"failed to run dsymutil: {}\", e)),"}]}