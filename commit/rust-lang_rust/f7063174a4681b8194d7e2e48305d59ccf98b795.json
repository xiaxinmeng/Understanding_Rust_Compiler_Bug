{"sha": "f7063174a4681b8194d7e2e48305d59ccf98b795", "node_id": "C_kwDOAAsO6NoAKGY3MDYzMTc0YTQ2ODFiODE5NGQ3ZTJlNDgzMDVkNTljY2Y5OGI3OTU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-26T09:13:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-26T18:35:33Z"}, "message": "Support -Cpanic=unwind without unwinding", "tree": {"sha": "f6aa730bcac5f17419bab8f7dd14c5b26956dca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6aa730bcac5f17419bab8f7dd14c5b26956dca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7063174a4681b8194d7e2e48305d59ccf98b795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7063174a4681b8194d7e2e48305d59ccf98b795", "html_url": "https://github.com/rust-lang/rust/commit/f7063174a4681b8194d7e2e48305d59ccf98b795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7063174a4681b8194d7e2e48305d59ccf98b795/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb9821f8251321736e0efd411cadb1fcb194f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9821f8251321736e0efd411cadb1fcb194f02", "html_url": "https://github.com/rust-lang/rust/commit/1fb9821f8251321736e0efd411cadb1fcb194f02"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "f1c9d0a781703241dbfb7213b7e50d083b56dd1a", "filename": "src/builder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f7063174a4681b8194d7e2e48305d59ccf98b795/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7063174a4681b8194d7e2e48305d59ccf98b795/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=f7063174a4681b8194d7e2e48305d59ccf98b795", "patch": "@@ -435,12 +435,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.block.end_with_switch(None, value, default_block, &gcc_cases);\n     }\n \n-    fn invoke(&mut self, _typ: Type<'gcc>, _func: RValue<'gcc>, _args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n-        let condition = self.context.new_rvalue_from_int(self.bool_type, 0);\n+    fn invoke(&mut self, typ: Type<'gcc>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+        // TODO(bjorn3): Properly implement unwinding.\n+        let call_site = self.call(typ, func, args, None);\n+        let condition = self.context.new_rvalue_from_int(self.bool_type, 1);\n         self.llbb().end_with_conditional(None, condition, then, catch);\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-\n-        // TODO(antoyo)\n+        call_site\n     }\n \n     fn unreachable(&mut self) {\n@@ -1106,7 +1106,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n-        let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n+        let field1 = self.context.new_field(None, self.u8_type.make_pointer(), \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n         self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\")\n@@ -1117,7 +1117,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn resume(&mut self, _exn: RValue<'gcc>) {\n-        unimplemented!();\n+        // TODO(bjorn3): Properly implement unwinding.\n+        self.unreachable();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {"}, {"sha": "5e3eef67df5a28a2abfaa0615d0e81dd51b0c47e", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7063174a4681b8194d7e2e48305d59ccf98b795/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7063174a4681b8194d7e2e48305d59ccf98b795/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=f7063174a4681b8194d7e2e48305d59ccf98b795", "patch": "@@ -1086,7 +1086,9 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n }\n \n fn try_intrinsic<'gcc, 'tcx>(bx: &mut Builder<'_, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, _catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n-    if bx.sess().panic_strategy() == PanicStrategy::Abort {\n+    // NOTE: the `|| true` here is to use the panic=abort strategy with panic=unwind too\n+    if bx.sess().panic_strategy() == PanicStrategy::Abort || true {\n+        // TODO(bjorn3): Properly implement unwinding and remove the `|| true` once this is done.\n         bx.call(bx.type_void(), try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind."}]}