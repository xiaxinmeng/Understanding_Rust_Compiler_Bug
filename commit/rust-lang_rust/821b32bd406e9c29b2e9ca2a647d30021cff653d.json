{"sha": "821b32bd406e9c29b2e9ca2a647d30021cff653d", "node_id": "C_kwDOAAsO6NoAKDgyMWIzMmJkNDA2ZTljMjliMmU5Y2EyYTY0N2QzMDAyMWNmZjY1M2Q", "commit": {"author": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-05-29T18:35:00Z"}, "committer": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-05-29T20:20:40Z"}, "message": "Add `let_underscore_drop` lint.\n\nThis lint checks for statements similar to `let _ = foo`, where `foo` is\na type that implements `Drop`. These types of let statements cause the\nexpression in them to be dropped immediately, instead of at the end of\nthe scope. Such behavior can be surprizing, especially if you are\nrelying on the value to be dropped at the end of the scope. Instead, the\nbinding should be an underscore prefixed name (like `_unused`) or the\nvalue should explicitly be passed to `std::mem::drop()` if the value\nreally should be dropped immediately.", "tree": {"sha": "a05ed38eca626a19d6ffefbc7a354fd4cd198944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05ed38eca626a19d6ffefbc7a354fd4cd198944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/821b32bd406e9c29b2e9ca2a647d30021cff653d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/821b32bd406e9c29b2e9ca2a647d30021cff653d", "html_url": "https://github.com/rust-lang/rust/commit/821b32bd406e9c29b2e9ca2a647d30021cff653d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/821b32bd406e9c29b2e9ca2a647d30021cff653d/comments", "author": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57884b6e96bede12447e21edcdc92fcac59ee46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57884b6e96bede12447e21edcdc92fcac59ee46", "html_url": "https://github.com/rust-lang/rust/commit/e57884b6e96bede12447e21edcdc92fcac59ee46"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "44242173c008b4d7295209cc6c081baea4ed1c9f", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/821b32bd406e9c29b2e9ca2a647d30021cff653d/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b32bd406e9c29b2e9ca2a647d30021cff653d/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=821b32bd406e9c29b2e9ca2a647d30021cff653d", "patch": "@@ -0,0 +1,66 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_hir as hir;\n+\n+declare_lint! {\n+    /// The `let_underscore_drop` lint checks for statements which don't bind\n+    /// an expression which has a non-trivial Drop implementation to anything,\n+    /// causing the expression to be dropped immediately instead of at end of\n+    /// scope.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct SomeStruct;\n+    /// impl Drop for SomeStruct {\n+    ///     fn drop(&mut self) {\n+    ///         println!(\"Dropping SomeStruct\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // SomeStuct is dropped immediately instead of at end of scope,\n+    ///     // so \"Dropping SomeStruct\" is printed before \"end of main\".\n+    ///     // The order of prints would be reversed if SomeStruct was bound to\n+    ///     // a name (such as \"_foo\").\n+    ///     let _ = SomeStruct;\n+    ///     println!(\"end of main\");\n+    /// }\n+    /// ```\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_DROP,\n+    Warn,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP]);\n+\n+impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n+        if !matches!(local.pat.kind, hir::PatKind::Wild) {\n+            return;\n+        }\n+        if let Some(init) = local.init {\n+            let init_ty = cx.typeck_results().expr_ty(init);\n+            let needs_drop = init_ty.needs_drop(cx.tcx, cx.param_env);\n+            if needs_drop {\n+                cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n+                    lint.build(\"non-binding let on a type that implements `Drop`\")\n+                        .help(\"consider binding to an unused variable\")\n+                        .help(\"consider explicitly droping with `std::mem::drop`\")\n+                        .emit();\n+                })\n+            }\n+        }\n+    }\n+}"}, {"sha": "55396b36dbc2e7d8e4ac950e30f475f8fce0e020", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/821b32bd406e9c29b2e9ca2a647d30021cff653d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b32bd406e9c29b2e9ca2a647d30021cff653d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=821b32bd406e9c29b2e9ca2a647d30021cff653d", "patch": "@@ -54,6 +54,7 @@ mod expect;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n+mod let_underscore;\n mod levels;\n mod methods;\n mod non_ascii_idents;\n@@ -85,6 +86,7 @@ use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use let_underscore::*;\n use methods::*;\n use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n@@ -199,6 +201,7 @@ macro_rules! late_lint_mod_passes {\n                 VariantSizeDifferences: VariantSizeDifferences,\n                 BoxPointers: BoxPointers,\n                 PathStatements: PathStatements,\n+                LetUnderscore: LetUnderscore,\n                 // Depends on referenced function signatures in expressions\n                 UnusedResults: UnusedResults,\n                 NonUpperCaseGlobals: NonUpperCaseGlobals,\n@@ -314,6 +317,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         REDUNDANT_SEMICOLONS\n     );\n \n+    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP);\n+\n     add_lint_group!(\n         \"rust_2018_idioms\",\n         BARE_TRAIT_OBJECTS,"}, {"sha": "c1c5207d0fe87c67c8214494a5723e0089111210", "filename": "src/test/ui/let_underscore_drop.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/821b32bd406e9c29b2e9ca2a647d30021cff653d/src%2Ftest%2Fui%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b32bd406e9c29b2e9ca2a647d30021cff653d/src%2Ftest%2Fui%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore_drop.rs?ref=821b32bd406e9c29b2e9ca2a647d30021cff653d", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+struct NontrivialDrop;\n+\n+impl Drop for NontrivialDrop {\n+    fn drop(&mut self) {\n+        println!(\"Dropping!\");\n+    }\n+}\n+\n+fn main() {\n+    let _ = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\n+}"}, {"sha": "40ed1abd8dc6fffefec17bed708305ae524fabc5", "filename": "src/test/ui/let_underscore_drop.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/821b32bd406e9c29b2e9ca2a647d30021cff653d/src%2Ftest%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/821b32bd406e9c29b2e9ca2a647d30021cff653d/src%2Ftest%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore_drop.stderr?ref=821b32bd406e9c29b2e9ca2a647d30021cff653d", "patch": "@@ -0,0 +1,12 @@\n+warning: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:12:5\n+   |\n+LL |     let _ = NontrivialDrop;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(let_underscore_drop)]` on by default\n+   = help: consider binding to an unused variable\n+   = help: consider explicitly droping with `std::mem::drop`\n+\n+warning: 1 warning emitted\n+"}]}