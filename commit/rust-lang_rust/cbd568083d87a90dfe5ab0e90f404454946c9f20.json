{"sha": "cbd568083d87a90dfe5ab0e90f404454946c9f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDU2ODA4M2Q4N2E5MGRmZTVhYjBlOTBmNDA0NDU0OTQ2YzlmMjA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-14T22:52:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-14T22:52:27Z"}, "message": "Fixup formatting", "tree": {"sha": "809815e26d449cf2bd289c231985cf0c321d020f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/809815e26d449cf2bd289c231985cf0c321d020f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd568083d87a90dfe5ab0e90f404454946c9f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd568083d87a90dfe5ab0e90f404454946c9f20", "html_url": "https://github.com/rust-lang/rust/commit/cbd568083d87a90dfe5ab0e90f404454946c9f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd568083d87a90dfe5ab0e90f404454946c9f20/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81b9028215dbb89cd8e16d783ccd146e1d4c162", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81b9028215dbb89cd8e16d783ccd146e1d4c162", "html_url": "https://github.com/rust-lang/rust/commit/b81b9028215dbb89cd8e16d783ccd146e1d4c162"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "47777e4c5c484dcdaa9f76c5612eaaace2876307", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -898,10 +898,11 @@ impl<'a> ControlFlow<'a> {\n             let trial = self.rewrite_single_line(&pat_expr_string, context, shape.width);\n \n             if let Some(cond_str) = trial {\n-                if cond_str.len() <= context\n-                    .config\n-                    .width_heuristics()\n-                    .single_line_if_else_max_width\n+                if cond_str.len()\n+                    <= context\n+                        .config\n+                        .width_heuristics()\n+                        .single_line_if_else_max_width\n                 {\n                     return Some((cond_str, 0));\n                 }"}, {"sha": "6005ae6fd259a429db2d41c8070da685655381b6", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -146,10 +146,12 @@ impl ListItem {\n     }\n \n     pub fn is_different_group(&self) -> bool {\n-        self.inner_as_ref().contains('\\n') || self.pre_comment.is_some() || self\n-            .post_comment\n-            .as_ref()\n-            .map_or(false, |s| s.contains('\\n'))\n+        self.inner_as_ref().contains('\\n')\n+            || self.pre_comment.is_some()\n+            || self\n+                .post_comment\n+                .as_ref()\n+                .map_or(false, |s| s.contains('\\n'))\n     }\n \n     pub fn is_multiline(&self) -> bool {"}, {"sha": "49f4a03ee1db8a7afecdf7f05e8eb8186b6817df", "filename": "src/macros.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -1168,22 +1168,24 @@ fn indent_macro_snippet(\n         .min()?;\n \n     Some(\n-        first_line + \"\\n\" + &trimmed_lines\n-            .iter()\n-            .map(\n-                |&(trimmed, ref line, prefix_space_width)| match prefix_space_width {\n-                    _ if !trimmed => line.to_owned(),\n-                    Some(original_indent_width) => {\n-                        let new_indent_width = indent.width() + original_indent_width\n-                            .saturating_sub(min_prefix_space_width);\n-                        let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        format!(\"{}{}\", new_indent.to_string(context.config), line)\n-                    }\n-                    None => String::new(),\n-                },\n-            )\n-            .collect::<Vec<_>>()\n-            .join(\"\\n\"),\n+        first_line\n+            + \"\\n\"\n+            + &trimmed_lines\n+                .iter()\n+                .map(\n+                    |&(trimmed, ref line, prefix_space_width)| match prefix_space_width {\n+                        _ if !trimmed => line.to_owned(),\n+                        Some(original_indent_width) => {\n+                            let new_indent_width = indent.width()\n+                                + original_indent_width.saturating_sub(min_prefix_space_width);\n+                            let new_indent = Indent::from_width(context.config, new_indent_width);\n+                            format!(\"{}{}\", new_indent.to_string(context.config), line)\n+                        }\n+                        None => String::new(),\n+                    },\n+                )\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\"),\n     )\n }\n "}, {"sha": "79ae3081f1f8886dffbb11642e9c3b536f38d09f", "filename": "src/pairs.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -204,11 +204,12 @@ where\n         // If the length of the lhs is equal to or shorter than the tab width or\n         // the rhs looks like block expression, we put the rhs on the same\n         // line with the lhs even if the rhs is multi-lined.\n-        let allow_same_line = lhs_result.len() <= tab_spaces || rhs_result\n-            .lines()\n-            .next()\n-            .map(|first_line| first_line.ends_with('{'))\n-            .unwrap_or(false);\n+        let allow_same_line = lhs_result.len() <= tab_spaces\n+            || rhs_result\n+                .lines()\n+                .next()\n+                .map(|first_line| first_line.ends_with('{'))\n+                .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n             let one_line_width = last_line_width(&lhs_result)\n                 + pp.infix.len()\n@@ -308,10 +309,7 @@ impl FlattenPair for ast::Expr {\n         }\n \n         assert_eq!(list.len() - 1, separators.len());\n-        Some(PairList {\n-            list,\n-            separators,\n-        })\n+        Some(PairList { list, separators })\n     }\n }\n "}, {"sha": "b3f6daadfac6d2ff50c3542b41731fc710b6626d", "filename": "src/string.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -287,11 +287,12 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         return break_at(max_chars - 1);\n     }\n     if let Some(url_index_end) = detect_url(input, max_chars) {\n-        let index_plus_ws = url_index_end + input[url_index_end..]\n-            .iter()\n-            .skip(1)\n-            .position(|grapheme| not_whitespace_except_line_feed(grapheme))\n-            .unwrap_or(0);\n+        let index_plus_ws = url_index_end\n+            + input[url_index_end..]\n+                .iter()\n+                .skip(1)\n+                .position(|grapheme| not_whitespace_except_line_feed(grapheme))\n+                .unwrap_or(0);\n         return if trim_end {\n             SnippetState::LineEnd(\n                 input[..=url_index_end].join(\"\").to_string(),"}, {"sha": "421ab38e3f839be435015ccef6bfe7c8b225920a", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd568083d87a90dfe5ab0e90f404454946c9f20/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=cbd568083d87a90dfe5ab0e90f404454946c9f20", "patch": "@@ -324,10 +324,11 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n // Return true if the given span does not intersect with file lines.\n macro_rules! out_of_file_lines_range {\n     ($self:ident, $span:expr) => {\n-        !$self.config.file_lines().is_all() && !$self\n-            .config\n-            .file_lines()\n-            .intersects(&$self.source_map.lookup_line_range($span))\n+        !$self.config.file_lines().is_all()\n+            && !$self\n+                .config\n+                .file_lines()\n+                .intersects(&$self.source_map.lookup_line_range($span))\n     };\n }\n "}]}