{"sha": "ed142028641079918b95b539f0570e92469687fe", "node_id": "C_kwDOAAsO6NoAKGVkMTQyMDI4NjQxMDc5OTE4Yjk1YjUzOWYwNTcwZTkyNDY5Njg3ZmU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-25T19:24:01Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-25T20:06:53Z"}, "message": "Add flag to forbid recovery in the parser", "tree": {"sha": "6e084cde0588b24bb9c1d3e410843828fcfd8e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e084cde0588b24bb9c1d3e410843828fcfd8e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed142028641079918b95b539f0570e92469687fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKs0Nv2mzfoFYlr+0yQQMTl5clmL/hyTQArw20PMEZoSVjSdHfdVXv5k+VP52LqXML\nVjbVtN0N0vfdxQRvxzhwQ=\n-----END SSH SIGNATURE-----", "payload": "tree 6e084cde0588b24bb9c1d3e410843828fcfd8e77\nparent 85d089b41e2a0c0f07ab34f6c5a7c451389f25e6\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666725841 +0200\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666728413 +0200\n\nAdd flag to forbid recovery in the parser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed142028641079918b95b539f0570e92469687fe", "html_url": "https://github.com/rust-lang/rust/commit/ed142028641079918b95b539f0570e92469687fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed142028641079918b95b539f0570e92469687fe/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d089b41e2a0c0f07ab34f6c5a7c451389f25e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d089b41e2a0c0f07ab34f6c5a7c451389f25e6", "html_url": "https://github.com/rust-lang/rust/commit/85d089b41e2a0c0f07ab34f6c5a7c451389f25e6"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "f6fe38174f7c5566f380e7a2c587c8e3b98aa272", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=ed142028641079918b95b539f0570e92469687fe", "patch": "@@ -250,6 +250,7 @@ fn expand_macro<'cx>(\n     // hacky, but speeds up the `html5ever` benchmark significantly. (Issue\n     // 68836 suggests a more comprehensive but more complex change to deal with\n     // this situation.)\n+    // FIXME(Nilstrieb): Stop recovery from happening on this parser and retry later with recovery if the macro failed to match.\n     let parser = parser_from_cx(sess, arg.clone());\n \n     // Try each arm's matchers."}, {"sha": "a781748efc52af24aff8ed22f151cd16e7628a7e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ed142028641079918b95b539f0570e92469687fe", "patch": "@@ -2112,6 +2112,8 @@ impl<'a> Parser<'a> {\n             // HACK: This is needed so we can detect whether we're inside a macro,\n             // where regular assumptions about what tokens can follow other tokens\n             // don't necessarily apply.\n+            && self.may_recover()\n+            // FIXME(Nilstrieb): Remove this check once `may_recover` actually stops recovery\n             && self.subparser_name.is_none()\n         {\n             // It is likely that the closure body is a block but where the"}, {"sha": "89f7ab930b1a4c57e5d2e4d88456214008dc96f4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed142028641079918b95b539f0570e92469687fe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=ed142028641079918b95b539f0570e92469687fe", "patch": "@@ -115,6 +115,12 @@ macro_rules! maybe_recover_from_interpolated_ty_qpath {\n     };\n }\n \n+#[derive(Clone, Copy)]\n+pub enum Recovery {\n+    Allowed,\n+    Forbidden,\n+}\n+\n #[derive(Clone)]\n pub struct Parser<'a> {\n     pub sess: &'a ParseSess,\n@@ -152,12 +158,15 @@ pub struct Parser<'a> {\n     /// This allows us to recover when the user forget to add braces around\n     /// multiple statements in the closure body.\n     pub current_closure: Option<ClosureSpans>,\n+    /// Whether the parser is allowed to recover and parse invalid code successfully (and emit a diagnostic as a side effect).\n+    /// This is disabled when parsing macro arguments, see #103534\n+    pub recovery: Recovery,\n }\n \n-// This type is used a lot, e.g. it's cloned when matching many declarative macro rules. Make sure\n+// This type is used a lot, e.g. it's cloned when matching many declarative macro rules with nonterminals. Make sure\n // it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Parser<'_>, 328);\n+rustc_data_structures::static_assert_size!(Parser<'_>, 336);\n \n /// Stores span information about a closure.\n #[derive(Clone)]\n@@ -483,6 +492,7 @@ impl<'a> Parser<'a> {\n                 inner_attr_ranges: Default::default(),\n             },\n             current_closure: None,\n+            recovery: Recovery::Allowed,\n         };\n \n         // Make parser point to the first token.\n@@ -491,6 +501,15 @@ impl<'a> Parser<'a> {\n         parser\n     }\n \n+    pub fn forbid_recovery(mut self) -> Self {\n+        self.recovery = Recovery::Forbidden;\n+        self\n+    }\n+\n+    fn may_recover(&self) -> bool {\n+        matches!(self.recovery, Recovery::Allowed)\n+    }\n+\n     pub fn unexpected<T>(&mut self) -> PResult<'a, T> {\n         match self.expect_one_of(&[], &[]) {\n             Err(e) => Err(e),"}]}