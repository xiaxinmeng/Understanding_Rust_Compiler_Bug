{"sha": "b7a0e401759505f39a07e9cb9421aa695b4856e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTBlNDAxNzU5NTA1ZjM5YTA3ZTljYjk0MjFhYTY5NWI0ODU2ZTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-25T02:39:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-25T02:39:23Z"}, "message": "Fix an ICE with uninhabited consts", "tree": {"sha": "a2f5fc63e9e0f489c39df49614653c58bf7036df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f5fc63e9e0f489c39df49614653c58bf7036df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a0e401759505f39a07e9cb9421aa695b4856e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a0e401759505f39a07e9cb9421aa695b4856e9", "html_url": "https://github.com/rust-lang/rust/commit/b7a0e401759505f39a07e9cb9421aa695b4856e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a0e401759505f39a07e9cb9421aa695b4856e9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa42ed7c2adb9f37faa6eb905f890f6199e1db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa42ed7c2adb9f37faa6eb905f890f6199e1db9", "html_url": "https://github.com/rust-lang/rust/commit/8aa42ed7c2adb9f37faa6eb905f890f6199e1db9"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "0d96e5ea625da9437b200d81a7fd6690814135a3", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=b7a0e401759505f39a07e9cb9421aa695b4856e9", "patch": "@@ -97,7 +97,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.ty_inhabitedness_forest(ty).contains(self, module)\n     }\n \n-    pub fn is_ty_uninhabited_from_all_modules(self, ty: Ty<'tcx>) -> bool {\n+    pub fn is_ty_uninhabited_from_any_module(self, ty: Ty<'tcx>) -> bool {\n         !self.ty_inhabitedness_forest(ty).is_empty()\n     }\n "}, {"sha": "a29611e4814f136a327c3516bdcdae1408aed080", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b7a0e401759505f39a07e9cb9421aa695b4856e9", "patch": "@@ -388,12 +388,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n                             ));\n                         }\n                     } else {\n-                        let callee_layout =\n-                            self.layout_of_local(self.frame(), mir::RETURN_PLACE, None)?;\n-                        if !callee_layout.abi.is_uninhabited() {\n-                            return err!(FunctionRetMismatch(\n-                                self.tcx.types.never, callee_layout.ty\n-                            ));\n+                        let local = mir::RETURN_PLACE;\n+                        let ty = self.frame().body.local_decls[local].ty;\n+                        if !self.tcx.is_ty_uninhabited_from_any_module(ty) {\n+                            return err!(FunctionRetMismatch(self.tcx.types.never, ty));\n                         }\n                     }\n                     Ok(())"}, {"sha": "21fbbf8cfb5a8d6c8f6654be893d1f9284127bd7", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=b7a0e401759505f39a07e9cb9421aa695b4856e9", "patch": "@@ -0,0 +1,19 @@\n+// compile-fail\n+\n+pub const unsafe fn fake_type<T>() -> T {\n+    hint_unreachable()\n+}\n+\n+pub const unsafe fn hint_unreachable() -> ! {\n+    fake_type() //~ ERROR any use of this value will cause an error\n+}\n+\n+trait Const {\n+    const CONSTANT: i32 = unsafe { fake_type() };\n+}\n+\n+impl <T> Const for T {}\n+\n+pub fn main() -> () {\n+    dbg!(i32::CONSTANT); //~ ERROR erroneous constant used\n+}"}, {"sha": "5c2855437118f5c127861569097735f4dd0cb3fe", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0e401759505f39a07e9cb9421aa695b4856e9/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=b7a0e401759505f39a07e9cb9421aa695b4856e9", "patch": "@@ -0,0 +1,24 @@\n+error: any use of this value will cause an error\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+   |     |\n+   |     tried to call a function with return type T passing return place of type !\n+   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside call to `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:12:36\n+...\n+LL |     const CONSTANT: i32 = unsafe { fake_type() };\n+   |     ---------------------------------------------\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+   |\n+LL |     dbg!(i32::CONSTANT);\n+   |          ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}