{"sha": "4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "node_id": "C_kwDOAAsO6NoAKDRlY2ZiN2ZjMDRkZGIzZGQwM2UwNzk0ZDU0ZWQ3NTk1YWQ3ZmU2OTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-06T16:42:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-06T16:42:59Z"}, "message": "Rollup merge of #109984 - scottmcm:less-float, r=Nilstrieb\n\nRemove f32 & f64 from MemDecoder/MemEncoder\n\nr? ```@Nilstrieb```\nsince they said (maybe joked) on discord that it's a bug if the compiler uses f32 anywhere \ud83d\ude43", "tree": {"sha": "e7739b3b0e55d59e1c8d059739c942f188b8e91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7739b3b0e55d59e1c8d059739c942f188b8e91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLvaTCRBK7hj4Ov3rIwAAwKgIAEyPxs+t3Z9KjHHuXlyVdxkG\nRSrz6I/KJAByxZKPFEGGvlHTFT48RWJyKSs3Se853Ok/jXl4Ku7AEbhiesOxhPKr\ndjvvtFqYCV5AM75Pp9LSqXdlFm/YBrGWJpPZljR44sMXIUwBVzx1aMpVoa4Pbk5e\nInzc/xWzVPKVwu3gxsoiMhcChf0Hdp3QxLGkSMC9c7jDi7wJdCgA7AXA5V2WE3Ul\nic83zZeVfcRCPJhCM+uXSj6L/dS3Mfa05v87+UMtATrDUIYmaDsVyOmm7V0B46xt\nJhm7No6VIHu+7w1nwtWlsWzvkNrAfxlyL51QmwLco9T+6qajv3po6mT+7IP76VY=\n=ZgPH\n-----END PGP SIGNATURE-----\n", "payload": "tree e7739b3b0e55d59e1c8d059739c942f188b8e91a\nparent dbc2941c15db37bc4da07ae1df52045efe0f85c9\nparent 5cb23e4a439df21e90d5a4789b5d61b2586ee2d2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680799379 +0200\ncommitter GitHub <noreply@github.com> 1680799379 +0200\n\nRollup merge of #109984 - scottmcm:less-float, r=Nilstrieb\n\nRemove f32 & f64 from MemDecoder/MemEncoder\n\nr? ```@Nilstrieb```\nsince they said (maybe joked) on discord that it's a bug if the compiler uses f32 anywhere \ud83d\ude43\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "html_url": "https://github.com/rust-lang/rust/commit/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc2941c15db37bc4da07ae1df52045efe0f85c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc2941c15db37bc4da07ae1df52045efe0f85c9", "html_url": "https://github.com/rust-lang/rust/commit/dbc2941c15db37bc4da07ae1df52045efe0f85c9"}, {"sha": "5cb23e4a439df21e90d5a4789b5d61b2586ee2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb23e4a439df21e90d5a4789b5d61b2586ee2d2", "html_url": "https://github.com/rust-lang/rust/commit/5cb23e4a439df21e90d5a4789b5d61b2586ee2d2"}], "stats": {"total": 90, "additions": 14, "deletions": 76}, "files": [{"sha": "faf0592138bc551035234a439582d5053decf126", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -112,8 +112,6 @@ impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n         emit_i8(i8);\n \n         emit_bool(bool);\n-        emit_f64(f64);\n-        emit_f32(f32);\n         emit_char(char);\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);"}, {"sha": "8ef4a46a733aa60d631ca00df67ac8c1f5ba5d0c", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -511,8 +511,6 @@ macro_rules! implement_ty_decoder {\n                     read_isize -> isize;\n \n                     read_bool -> bool;\n-                    read_f64 -> f64;\n-                    read_f32 -> f32;\n                     read_char -> char;\n                     read_str -> &str;\n                 }"}, {"sha": "9aa8231dcdaebe06603f74ad47287cccb731ae70", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -1046,8 +1046,6 @@ impl<'a, 'tcx> Encoder for CacheEncoder<'a, 'tcx> {\n         emit_i8(i8);\n \n         emit_bool(bool);\n-        emit_f64(f64);\n-        emit_f32(f32);\n         emit_char(char);\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);"}, {"sha": "53e5c89673652621f6e2cd923e6ab2b46154677d", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -122,18 +122,6 @@ impl Encoder for MemEncoder {\n         self.emit_u8(if v { 1 } else { 0 });\n     }\n \n-    #[inline]\n-    fn emit_f64(&mut self, v: f64) {\n-        let as_u64: u64 = v.to_bits();\n-        self.emit_u64(as_u64);\n-    }\n-\n-    #[inline]\n-    fn emit_f32(&mut self, v: f32) {\n-        let as_u32: u32 = v.to_bits();\n-        self.emit_u32(as_u32);\n-    }\n-\n     #[inline]\n     fn emit_char(&mut self, v: char) {\n         self.emit_u32(v as u32);\n@@ -500,18 +488,6 @@ impl Encoder for FileEncoder {\n         self.emit_u8(if v { 1 } else { 0 });\n     }\n \n-    #[inline]\n-    fn emit_f64(&mut self, v: f64) {\n-        let as_u64: u64 = v.to_bits();\n-        self.emit_u64(as_u64);\n-    }\n-\n-    #[inline]\n-    fn emit_f32(&mut self, v: f32) {\n-        let as_u32: u32 = v.to_bits();\n-        self.emit_u32(as_u32);\n-    }\n-\n     #[inline]\n     fn emit_char(&mut self, v: char) {\n         self.emit_u32(v as u32);\n@@ -642,18 +618,6 @@ impl<'a> Decoder for MemDecoder<'a> {\n         value != 0\n     }\n \n-    #[inline]\n-    fn read_f64(&mut self) -> f64 {\n-        let bits = self.read_u64();\n-        f64::from_bits(bits)\n-    }\n-\n-    #[inline]\n-    fn read_f32(&mut self) -> f32 {\n-        let bits = self.read_u32();\n-        f32::from_bits(bits)\n-    }\n-\n     #[inline]\n     fn read_char(&mut self) -> char {\n         let bits = self.read_u32();"}, {"sha": "527abc23727153e96d7d01788a499c1586d3e659", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -22,6 +22,11 @@ use std::sync::Arc;\n /// be processed or ignored, whichever is appropriate. Then they should provide\n /// a `finish` method that finishes up encoding. If the encoder is fallible,\n /// `finish` should return a `Result` that indicates success or failure.\n+///\n+/// This current does not support `f32` nor `f64`, as they're not needed in any\n+/// serialized data structures. That could be changed, but consider whether it\n+/// really makes sense to store floating-point values at all.\n+/// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Encoder {\n     // Primitive types:\n     fn emit_usize(&mut self, v: usize);\n@@ -37,8 +42,6 @@ pub trait Encoder {\n     fn emit_i16(&mut self, v: i16);\n     fn emit_i8(&mut self, v: i8);\n     fn emit_bool(&mut self, v: bool);\n-    fn emit_f64(&mut self, v: f64);\n-    fn emit_f32(&mut self, v: f32);\n     fn emit_char(&mut self, v: char);\n     fn emit_str(&mut self, v: &str);\n     fn emit_raw_bytes(&mut self, s: &[u8]);\n@@ -58,6 +61,11 @@ pub trait Encoder {\n // top-level invocation would also just panic on failure. Switching to\n // infallibility made things faster and lots of code a little simpler and more\n // concise.\n+///\n+/// This current does not support `f32` nor `f64`, as they're not needed in any\n+/// serialized data structures. That could be changed, but consider whether it\n+/// really makes sense to store floating-point values at all.\n+/// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Decoder {\n     // Primitive types:\n     fn read_usize(&mut self) -> usize;\n@@ -73,8 +81,6 @@ pub trait Decoder {\n     fn read_i16(&mut self) -> i16;\n     fn read_i8(&mut self) -> i8;\n     fn read_bool(&mut self) -> bool;\n-    fn read_f64(&mut self) -> f64;\n-    fn read_f32(&mut self) -> f32;\n     fn read_char(&mut self) -> char;\n     fn read_str(&mut self) -> &str;\n     fn read_raw_bytes(&mut self, len: usize) -> &[u8];\n@@ -143,8 +149,6 @@ direct_serialize_impls! {\n     i64 emit_i64 read_i64,\n     i128 emit_i128 read_i128,\n \n-    f32 emit_f32 read_f32,\n-    f64 emit_f64 read_f64,\n     bool emit_bool read_bool,\n     char emit_char read_char\n }"}, {"sha": "5e7dd18aa84086100b39ef4d8bec4533a63724bd", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "patch": "@@ -22,8 +22,6 @@ struct Struct {\n \n     l: char,\n     m: String,\n-    n: f32,\n-    o: f64,\n     p: bool,\n     q: Option<u32>,\n }\n@@ -119,24 +117,6 @@ fn test_bool() {\n     check_round_trip(vec![false, true, true, false, false]);\n }\n \n-#[test]\n-fn test_f32() {\n-    let mut vec = vec![];\n-    for i in -100..100 {\n-        vec.push((i as f32) / 3.0);\n-    }\n-    check_round_trip(vec);\n-}\n-\n-#[test]\n-fn test_f64() {\n-    let mut vec = vec![];\n-    for i in -100..100 {\n-        vec.push((i as f64) / 3.0);\n-    }\n-    check_round_trip(vec);\n-}\n-\n #[test]\n fn test_char() {\n     let vec = vec!['a', 'b', 'c', 'd', 'A', 'X', ' ', '#', '\u00d6', '\u00c4', '\u00b5', '\u20ac'];\n@@ -200,8 +180,6 @@ fn test_struct() {\n \n         l: 'x',\n         m: \"abc\".to_string(),\n-        n: 20.5,\n-        o: 21.5,\n         p: false,\n         q: None,\n     }]);\n@@ -222,8 +200,6 @@ fn test_struct() {\n \n         l: 'y',\n         m: \"def\".to_string(),\n-        n: -20.5,\n-        o: -21.5,\n         p: true,\n         q: Some(1234567),\n     }]);\n@@ -232,15 +208,15 @@ fn test_struct() {\n #[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n enum Enum {\n     Variant1,\n-    Variant2(usize, f32),\n+    Variant2(usize, u32),\n     Variant3 { a: i32, b: char, c: bool },\n }\n \n #[test]\n fn test_enum() {\n     check_round_trip(vec![\n         Enum::Variant1,\n-        Enum::Variant2(1, 2.5),\n+        Enum::Variant2(1, 25),\n         Enum::Variant3 { a: 3, b: 'b', c: false },\n         Enum::Variant3 { a: -4, b: 'f', c: true },\n     ]);\n@@ -269,8 +245,8 @@ fn test_hash_map() {\n \n #[test]\n fn test_tuples() {\n-    check_round_trip(vec![('x', (), false, 0.5f32)]);\n-    check_round_trip(vec![(9i8, 10u16, 1.5f64)]);\n+    check_round_trip(vec![('x', (), false, 5u32)]);\n+    check_round_trip(vec![(9i8, 10u16, 15i64)]);\n     check_round_trip(vec![(-12i16, 11u8, 12usize)]);\n     check_round_trip(vec![(1234567isize, 100000000000000u64, 99999999999999i64)]);\n     check_round_trip(vec![(String::new(), \"some string\".to_string())]);"}]}