{"sha": "17a88928f49f31b9b076ef66d57354f45032be56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTg4OTI4ZjQ5ZjMxYjliMDc2ZWY2NmQ1NzM1NGY0NTAzMmJlNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T10:08:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T10:08:52Z"}, "message": "collect all submodules", "tree": {"sha": "6325dc95d6f01928ecf8a265dc1ce60e4454b4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6325dc95d6f01928ecf8a265dc1ce60e4454b4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a88928f49f31b9b076ef66d57354f45032be56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a88928f49f31b9b076ef66d57354f45032be56", "html_url": "https://github.com/rust-lang/rust/commit/17a88928f49f31b9b076ef66d57354f45032be56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a88928f49f31b9b076ef66d57354f45032be56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b21b98996b8296942c23864c711b2c1078178a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b21b98996b8296942c23864c711b2c1078178a", "html_url": "https://github.com/rust-lang/rust/commit/e0b21b98996b8296942c23864c711b2c1078178a"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "56bde38492cf67bfe4572897aa292cd09f9b2a9b", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17a88928f49f31b9b076ef66d57354f45032be56/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a88928f49f31b9b076ef66d57354f45032be56/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=17a88928f49f31b9b076ef66d57354f45032be56", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n \n use ra_syntax::{\n     ast::{self, AstNode, FnDefNode},\n-    SmolStr, TextRange,\n+    TextRange,\n };\n \n use crate::{\n@@ -14,7 +14,7 @@ use crate::{\n     descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource},\n     input::SourceRootId,\n     syntax_ptr::LocalSyntaxPtr,\n-    Cancelable, FileId,\n+    Cancelable,\n };\n \n salsa::query_group! {"}, {"sha": "d67ffa9de214c81c31b6006746a7e3a9e14772d2", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/17a88928f49f31b9b076ef66d57354f45032be56/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a88928f49f31b9b076ef66d57354f45032be56/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=17a88928f49f31b9b076ef66d57354f45032be56", "patch": "@@ -21,34 +21,44 @@ use super::{\n \n #[derive(Clone, Hash, PartialEq, Eq, Debug)]\n pub(crate) struct Submodule {\n-    name: SmolStr\n+    name: SmolStr,\n }\n \n pub(crate) fn submodules(\n     db: &impl DescriptorDatabase,\n     source: ModuleSource,\n ) -> Cancelable<Arc<Vec<Submodule>>> {\n     db::check_canceled(db)?;\n-    let file_id = match source {\n-        ModuleSource::File(it) => it,\n-        _ => unimplemented!(),\n+    let submodules = match source.resolve(db) {\n+        ModuleSourceNode::Root(it) => collect_submodules(it.ast()),\n+        ModuleSourceNode::Inline(it) => it\n+            .ast()\n+            .item_list()\n+            .map(collect_submodules)\n+            .unwrap_or_else(Vec::new),\n     };\n-    let file = db.file_syntax(file_id);\n-    let root = file.ast();\n-    let submodules = modules(root)\n-        .map(|(name, _)| Submodule { name })\n-        .collect();\n-    Ok(Arc::new(submodules))\n+    return Ok(Arc::new(submodules));\n+\n+    fn collect_submodules<'a>(root: impl ast::ModuleItemOwner<'a>) -> Vec<Submodule> {\n+        modules(root)\n+            .filter(|(_, m)| m.has_semi())\n+            .map(|(name, _)| Submodule { name })\n+            .collect()\n+    }\n }\n \n-pub(crate) fn modules(root: ast::Root<'_>) -> impl Iterator<Item = (SmolStr, ast::Module<'_>)> {\n-    root.modules().filter_map(|module| {\n-        let name = module.name()?.text();\n-        if !module.has_semi() {\n-            return None;\n-        }\n-        Some((name, module))\n-    })\n+pub(crate) fn modules<'a>(\n+    root: impl ast::ModuleItemOwner<'a>,\n+) -> impl Iterator<Item = (SmolStr, ast::Module<'a>)> {\n+    root.items()\n+        .filter_map(|item| match item {\n+            ast::ModuleItem::Module(m) => Some(m),\n+            _ => None,\n+        })\n+        .filter_map(|module| {\n+            let name = module.name()?.text();\n+            Some((name, module))\n+        })\n }\n \n pub(crate) fn module_scope("}]}