{"sha": "b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "node_id": "C_kwDOAAsO6NoAKGI0M2MyZTdjZDlmZmQ0ZjcyNDlhZGZkMDlmNmRmODQxZWQ5MDI5MjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-24T07:42:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-24T07:42:34Z"}, "message": "Rollup merge of #104594 - compiler-errors:dyn-star-rcvr, r=eholk,estebank\n\nProperly handle `Pin<&mut dyn* Trait>` receiver in codegen\n\nThis ensures we can actually await a `dyn* Future`, which seems important for async fn in dyn trait.\n\nAlso, disable `dyn*` trait upcasting. It's not exactly complete right now, and can cause strange ICEs for no reason -- nobody's using it either. I thought it was cute to implement when I did it, but I didn't think about how it interacts structurally with `CoerceUnsized` correctly.\n\nFixes #104794, presumably removing `dyn*` upcasting and its `CoerceUnsized` issues does the trick.", "tree": {"sha": "9abbbc85714e882ba697a6e8a29fa1861ac50930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9abbbc85714e882ba697a6e8a29fa1861ac50930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfyBqCRBK7hj4Ov3rIwAAdowIABQWNApJ53rKhIdie7KUUEjb\nBOl96ydNMA/NpAVH9/YnpUx7HsAFKngiZggKegeXDiXRdL1FSB7H1OyTitYnWdRe\nGqKnotzyF7j2VUo6SezU7J3xJ1CDdJv8zaH+3zGSlLVK6/EMBVauHJrA7fn5O+bT\n7PahXKA55DDjmtjlRM1qZJkSLSp1TKknUQVG4dLgsEAo3Hp27mzR8/9rlhOYZAZt\nyhKsYY46sg6VxXYZrhfca+/WOQSQwQM0KGXIIlWwzSOMD5VvgMVUD31Qj4o2aYzG\nredVmlfok34gAVifbOC2hDhxI3sScQ1+ZYUDgzrYRzAvJs+Be05DwKEPLcFbgq8=\n=yNpf\n-----END PGP SIGNATURE-----\n", "payload": "tree 9abbbc85714e882ba697a6e8a29fa1861ac50930\nparent 1e0df8827b575c2910fae7edd1f920723cb3ee81\nparent b60b76c9dd3ed9bad4db48e80f084353d42c6728\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669275754 +0100\ncommitter GitHub <noreply@github.com> 1669275754 +0100\n\nRollup merge of #104594 - compiler-errors:dyn-star-rcvr, r=eholk,estebank\n\nProperly handle `Pin<&mut dyn* Trait>` receiver in codegen\n\nThis ensures we can actually await a `dyn* Future`, which seems important for async fn in dyn trait.\n\nAlso, disable `dyn*` trait upcasting. It's not exactly complete right now, and can cause strange ICEs for no reason -- nobody's using it either. I thought it was cute to implement when I did it, but I didn't think about how it interacts structurally with `CoerceUnsized` correctly.\n\nFixes #104794, presumably removing `dyn*` upcasting and its `CoerceUnsized` issues does the trick.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "html_url": "https://github.com/rust-lang/rust/commit/b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0df8827b575c2910fae7edd1f920723cb3ee81", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0df8827b575c2910fae7edd1f920723cb3ee81", "html_url": "https://github.com/rust-lang/rust/commit/1e0df8827b575c2910fae7edd1f920723cb3ee81"}, {"sha": "b60b76c9dd3ed9bad4db48e80f084353d42c6728", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60b76c9dd3ed9bad4db48e80f084353d42c6728", "html_url": "https://github.com/rust-lang/rust/commit/b60b76c9dd3ed9bad4db48e80f084353d42c6728"}], "stats": {"total": 222, "additions": 179, "deletions": 43}, "files": [{"sha": "03d833fbba87cf4afbc49318c9fa55b52d8a57e3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -938,7 +938,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // that is understood elsewhere in the compiler as a method on\n                         // `dyn Trait`.\n                         // To get a `*mut RcBox<Self>`, we just keep unwrapping newtypes until\n-                        // we get a value of a built-in pointer type\n+                        // we get a value of a built-in pointer type.\n+                        //\n+                        // This is also relevant for `Pin<&mut Self>`, where we need to peel the `Pin`.\n                         'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n                             && !op.layout.ty.is_region_ptr()\n                         {\n@@ -980,13 +982,29 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         continue;\n                     }\n                     Immediate(_) => {\n-                        let ty::Ref(_, ty, _) = op.layout.ty.kind() else {\n-                            span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n-                        };\n-                        if !ty.is_dyn_star() {\n+                        // See comment above explaining why we peel these newtypes\n+                        'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n+                            && !op.layout.ty.is_region_ptr()\n+                        {\n+                            for i in 0..op.layout.fields.count() {\n+                                let field = op.extract_field(bx, i);\n+                                if !field.layout.is_zst() {\n+                                    // we found the one non-zero-sized field that is allowed\n+                                    // now find *its* non-zero-sized field, or stop if it's a\n+                                    // pointer\n+                                    op = field;\n+                                    continue 'descend_newtypes;\n+                                }\n+                            }\n+\n+                            span_bug!(span, \"receiver has no non-zero-sized fields {:?}\", op);\n+                        }\n+\n+                        // Make sure that we've actually unwrapped the rcvr down\n+                        // to a pointer or ref to `dyn* Trait`.\n+                        if !op.layout.ty.builtin_deref(true).unwrap().ty.is_dyn_star() {\n                             span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n                         }\n-                        // FIXME(dyn-star): Make sure this is done on a &dyn* receiver\n                         let place = op.deref(bx.cx());\n                         let data_ptr = place.project_field(bx, 0);\n                         let meta_ptr = place.project_field(bx, 1);"}, {"sha": "82784bb8a661a61122cf923f7eef8126d064fdd8", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -755,20 +755,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         if let ty::Dynamic(a_data, _, _) = a.kind()\n             && let ty::Dynamic(b_data, _, _) = b.kind()\n+            && a_data.principal_def_id() == b_data.principal_def_id()\n         {\n-            if a_data.principal_def_id() == b_data.principal_def_id() {\n-                return self.unify_and(a, b, |_| vec![]);\n-            } else if !self.tcx().features().trait_upcasting {\n-                let mut err = feature_err(\n-                    &self.tcx.sess.parse_sess,\n-                    sym::trait_upcasting,\n-                    self.cause.span,\n-                    &format!(\n-                        \"cannot cast `{a}` to `{b}`, trait upcasting coercion is experimental\"\n-                    ),\n-                );\n-                err.emit();\n-            }\n+            return self.unify_and(a, b, |_| vec![]);\n         }\n \n         // Check the obligations of the cast -- for example, when casting\n@@ -796,19 +785,16 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ])\n             .collect();\n \n-        // Enforce that the type is `usize`/pointer-sized. For now, only those\n-        // can be coerced to `dyn*`, except for `dyn* -> dyn*` upcasts.\n-        if !a.is_dyn_star() {\n-            obligations.push(Obligation::new(\n-                self.tcx,\n-                self.cause.clone(),\n-                self.param_env,\n-                ty::Binder::dummy(\n-                    self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n-                )\n-                .to_poly_trait_predicate(),\n-            ));\n-        }\n+        // Enforce that the type is `usize`/pointer-sized.\n+        obligations.push(Obligation::new(\n+            self.tcx,\n+            self.cause.clone(),\n+            self.param_env,\n+            ty::Binder::dummy(\n+                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n+            )\n+            .to_poly_trait_predicate(),\n+        ));\n \n         Ok(InferOk {\n             value: (vec![Adjustment { kind: Adjust::DynStar, target: b }], b),"}, {"sha": "9d899da9bba248392567de5e1af22fca69421393", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -776,9 +776,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n-            (&ty::Dynamic(ref data_a, _, dyn_a), &ty::Dynamic(ref data_b, _, dyn_b))\n-                if dyn_a == dyn_b =>\n-            {\n+            (&ty::Dynamic(ref data_a, _, ty::Dyn), &ty::Dynamic(ref data_b, _, ty::Dyn)) => {\n                 // Upcast coercions permit several things:\n                 //\n                 // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`"}, {"sha": "3cffd2bb7801766ee6d1a9f7884b09ae13bccd5d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -803,9 +803,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let upcast_trait_ref;\n         match (source.kind(), target.kind()) {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n-            (&ty::Dynamic(ref data_a, r_a, repr_a), &ty::Dynamic(ref data_b, r_b, repr_b))\n-                if repr_a == repr_b =>\n-            {\n+            (\n+                &ty::Dynamic(ref data_a, r_a, repr_a @ ty::Dyn),\n+                &ty::Dynamic(ref data_b, r_b, ty::Dyn),\n+            ) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n@@ -831,7 +832,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed."}, {"sha": "5774c8b2a67225ab38c91f235acb61a8cffa65ea", "filename": "src/test/ui/dyn-star/dispatch-on-pin-mut.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,52 @@\n+// run-pass\n+// edition:2021\n+// check-run-results\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+use std::future::Future;\n+\n+async fn foo(f: dyn* Future<Output = i32>) {\n+    println!(\"value: {}\", f.await);\n+}\n+\n+async fn async_main() {\n+    foo(Box::pin(async { 1 })).await\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "96c5ca6985ffd01126664fd12f1b92f8b6a4f163", "filename": "src/test/ui/dyn-star/dispatch-on-pin-mut.run.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.run.stdout?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1 @@\n+value: 1"}, {"sha": "fdf74aa7efe08de048a8cec8aff22e234b9e4e30", "filename": "src/test/ui/dyn-star/dispatch-on-pin-mut.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dispatch-on-pin-mut.rs:5:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c12b16f16055d599da9629673b78ff2e4c0b7553", "filename": "src/test/ui/dyn-star/dont-unsize-coerce-dyn-star.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -1,7 +1,8 @@\n-// check-pass\n+// run-pass\n+// check-run-results\n \n #![feature(dyn_star)]\n-#![allow(incomplete_features)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait AddOne {\n     fn add1(&mut self) -> usize;"}, {"sha": "b4db3ed707d8db168f186db15a293a5c24452b71", "filename": "src/test/ui/dyn-star/dont-unsize-coerce-dyn-star.run.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.run.stdout?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,2 @@\n+43\n+44"}, {"sha": "933c133831ad330412c96bead9ea040debbbcabc", "filename": "src/test/ui/dyn-star/dont-unsize-coerce-dyn-star.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.stderr?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-unsize-coerce-dyn-star.rs:4:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a4eb669e3210430d0c3ce1efbd13cee6b1d978b6", "filename": "src/test/ui/dyn-star/no-unsize-coerce-dyn-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,13 @@\n+#![feature(dyn_star, trait_upcasting)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait A: B {}\n+trait B {}\n+impl A for usize {}\n+impl B for usize {}\n+\n+fn main() {\n+    let x: Box<dyn* A> = Box::new(1usize as dyn* A);\n+    let y: Box<dyn* B> = x;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "2fc751b3b4a1efbff854a2355448c7922ac284fc", "filename": "src/test/ui/dyn-star/no-unsize-coerce-dyn-trait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no-unsize-coerce-dyn-trait.rs:1:12\n+   |\n+LL | #![feature(dyn_star, trait_upcasting)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no-unsize-coerce-dyn-trait.rs:11:26\n+   |\n+LL |     let y: Box<dyn* B> = x;\n+   |            -----------   ^ expected trait `B`, found trait `A`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Box<dyn* B>`\n+              found struct `Box<dyn* A>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c667ac143a395167ff9054ebc18a41dadb4212b8", "filename": "src/test/ui/dyn-star/upcast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -1,7 +1,6 @@\n-// run-pass\n+// known-bug: #104800\n \n #![feature(dyn_star, trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: Bar {\n     fn hello(&self);"}, {"sha": "6a95f7754e68548d8abb417105c7bb88d2e62dbd", "filename": "src/test/ui/dyn-star/upcast.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43c2e7cd9ffd4f7249adfd09f6df841ed902924/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr?ref=b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/upcast.rs:3:12\n+   |\n+LL | #![feature(dyn_star, trait_upcasting)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: `dyn* Foo` needs to be a pointer-sized type\n+  --> $DIR/upcast.rs:30:23\n+   |\n+LL |     let w: dyn* Bar = w;\n+   |                       ^ `dyn* Foo` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `dyn* Foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}