{"sha": "a214911b773b299e37dea0c6f2644a26a5756d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTQ5MTFiNzczYjI5OWUzN2RlYTBjNmYyNjQ0YTI2YTU3NTZkNGI=", "commit": {"author": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2021-05-22T14:24:50Z"}, "committer": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2021-07-15T11:32:05Z"}, "message": "Added Arc::try_pin\n\nThis helper is in line with other other allocation helpers on Arc.", "tree": {"sha": "002243b3357259b8371edce5032d1a1c4564b5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/002243b3357259b8371edce5032d1a1c4564b5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a214911b773b299e37dea0c6f2644a26a5756d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a214911b773b299e37dea0c6f2644a26a5756d4b", "html_url": "https://github.com/rust-lang/rust/commit/a214911b773b299e37dea0c6f2644a26a5756d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a214911b773b299e37dea0c6f2644a26a5756d4b/comments", "author": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9197978a90be6f7570741eabe2da175fec75375", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9197978a90be6f7570741eabe2da175fec75375", "html_url": "https://github.com/rust-lang/rust/commit/b9197978a90be6f7570741eabe2da175fec75375"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "d821e71562212ed86fd7d083331da0b78f4d6909", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a214911b773b299e37dea0c6f2644a26a5756d4b/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a214911b773b299e37dea0c6f2644a26a5756d4b/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=a214911b773b299e37dea0c6f2644a26a5756d4b", "patch": "@@ -19,7 +19,6 @@ use core::marker::{PhantomData, Unpin, Unsize};\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n-#[cfg(not(no_global_oom_handling))]\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n #[cfg(not(no_global_oom_handling))]\n@@ -494,6 +493,13 @@ impl<T> Arc<T> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n \n+    /// Constructs a new `Pin<Arc<T>>`, return an error if allocation fails.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_pin(data: T) -> Result<Pin<Arc<T>>, AllocError> {\n+        unsafe { Ok(Pin::new_unchecked(Arc::try_new(data)?)) }\n+    }\n+\n     /// Constructs a new `Arc<T>`, returning an error if allocation fails.\n     ///\n     /// # Examples"}]}