{"sha": "e7240f5e24f083aebe3cb32964e943a618210b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MjQwZjVlMjRmMDgzYWViZTNjYjMyOTY0ZTk0M2E2MTgyMTBiMWU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T23:28:12Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T23:28:12Z"}, "message": "Add and remove comments", "tree": {"sha": "3c4ff62c2fb2298922c96cd86113666550b960e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4ff62c2fb2298922c96cd86113666550b960e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7240f5e24f083aebe3cb32964e943a618210b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7240f5e24f083aebe3cb32964e943a618210b1e", "html_url": "https://github.com/rust-lang/rust/commit/e7240f5e24f083aebe3cb32964e943a618210b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7240f5e24f083aebe3cb32964e943a618210b1e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5768964b2571eb1d58f0766a2089729d5e770a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5768964b2571eb1d58f0766a2089729d5e770a", "html_url": "https://github.com/rust-lang/rust/commit/0d5768964b2571eb1d58f0766a2089729d5e770a"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "92c62b08125b11035b649c87e74f31406fac2a1e", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e7240f5e24f083aebe3cb32964e943a618210b1e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7240f5e24f083aebe3cb32964e943a618210b1e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e7240f5e24f083aebe3cb32964e943a618210b1e", "patch": "@@ -590,6 +590,7 @@ fn rewrite_closure_fn_decl(\n     };\n     let list_str = try_opt!(write_list(&item_vec, &fmt));\n     let mut prefix = format!(\"{}|{}|\", mover, list_str);\n+    // 1 = space between `|...|` and body.\n     let extra_offset = extra_offset(&prefix, shape) + 1;\n \n     if !ret_str.is_empty() {\n@@ -682,6 +683,7 @@ fn rewrite_closure(\n     }\n }\n \n+// Rewrite closure with a single expression wrapping its body with block.\n fn rewrite_closure_with_block(\n     context: &RewriteContext,\n     shape: Shape,\n@@ -703,6 +705,7 @@ fn rewrite_closure_with_block(\n     rewrite_closure_block(&block, prefix, context, shape)\n }\n \n+// Rewrite closure with a single expression without wrapping its body with block.\n fn rewrite_closure_expr(\n     expr: &ast::Expr,\n     prefix: &str,\n@@ -716,6 +719,7 @@ fn rewrite_closure_expr(\n     rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n+// Rewrite closure whose body is block.\n fn rewrite_closure_block(\n     block: &ast::Block,\n     prefix: &str,\n@@ -2217,24 +2221,29 @@ where\n             // When overflowing the closure which consists of a single control flow expression,\n             // force to use block if its condition uses multi line.\n             ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n-                if rewrite_cond(context, body, shape).map_or(false, |cond| cond.contains('\\n')) {\n-                    rewrite_closure_fn_decl(capture, fn_decl, body, expr.span, context, shape)\n-                        .and_then(|(prefix, extra_offset)| {\n-                            // 1 = space between `|...|` and body.\n-                            shape.offset_left(extra_offset).and_then(|body_shape| {\n-                                let body = match body.node {\n-                                    ast::ExprKind::Block(ref block) => {\n-                                        stmt_expr(&block.stmts[0]).unwrap()\n-                                    }\n-                                    _ => body,\n-                                };\n-                                rewrite_closure_with_block(context, body_shape, &prefix, body)\n-                            })\n-                        })\n-                        .or_else(|| expr.rewrite(context, shape))\n-                } else {\n-                    expr.rewrite(context, shape)\n-                }\n+                let try_closure_with_block = || {\n+                    let body = match body.node {\n+                        ast::ExprKind::Block(ref block) if block.stmts.len() == 1 => {\n+                            try_opt!(stmt_expr(&block.stmts[0]))\n+                        }\n+                        _ => body,\n+                    };\n+                    let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n+                        capture,\n+                        fn_decl,\n+                        body,\n+                        expr.span,\n+                        context,\n+                        shape,\n+                    ));\n+                    let shape = try_opt!(shape.offset_left(extra_offset));\n+                    rewrite_cond(context, body, shape).map_or(None, |cond| if cond.contains('\\n') {\n+                        rewrite_closure_with_block(context, shape, &prefix, body)\n+                    } else {\n+                        None\n+                    })\n+                };\n+                try_closure_with_block().or_else(|| expr.rewrite(context, shape))\n             }\n             _ => expr.rewrite(context, shape),\n         }"}, {"sha": "5734fd5502df2fb08a93c4c0b874e9da9cd8561a", "filename": "tests/target/issue-1681.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7240f5e24f083aebe3cb32964e943a618210b1e/tests%2Ftarget%2Fissue-1681.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7240f5e24f083aebe3cb32964e943a618210b1e/tests%2Ftarget%2Fissue-1681.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1681.rs?ref=e7240f5e24f083aebe3cb32964e943a618210b1e", "patch": "@@ -1,7 +1,9 @@\n // rustfmt-max_width: 80\n \n+// We would like to surround closure body with block when overflowing the last\n+// argument of function call if the last argument has condition and without\n+// block it may go multi lines.\n fn foo() {\n-    // This is where it gets good\n     refmut_map_result(self.cache.borrow_mut(), |cache| {\n         match cache.entry(cache_key) {\n             Occupied(entry) => Ok(entry.into_mut()),\n@@ -13,7 +15,6 @@ fn foo() {\n \n                 Ok(entry.insert(try!(statement)))\n             }\n-            // and now, casually call a method on this\n         }\n     }).map(MaybeCached::Cached)\n }"}]}