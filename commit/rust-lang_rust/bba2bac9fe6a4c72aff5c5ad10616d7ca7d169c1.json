{"sha": "bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTJiYWM5ZmU2YTRjNzJhZmY1YzVhZDEwNjE2ZDdjYTdkMTY5YzE=", "commit": {"author": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-03-09T02:50:50Z"}, "committer": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-03-09T02:50:50Z"}, "message": "improve `const fn` `RepeatVec` diagnostics", "tree": {"sha": "bb825208e553d0b81ba0c7690af30097a12c3c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb825208e553d0b81ba0c7690af30097a12c3c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "html_url": "https://github.com/rust-lang/rust/commit/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/comments", "author": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb476b172f12dfbbee386d027b1ad6c0bc203a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb476b172f12dfbbee386d027b1ad6c0bc203a9b", "html_url": "https://github.com/rust-lang/rust/commit/eb476b172f12dfbbee386d027b1ad6c0bc203a9b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c1b105f1d8489a666e975a1f2993a97ce105bbcb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "patch": "@@ -1908,15 +1908,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 if is_const_fn {\n                     err.help(\n-                        \"consider creating a new `const` item and initializing with the result \\\n+                        \"consider creating a new `const` item and initializing it with the result \\\n                         of the function call to be used in the repeat position, like \\\n                         `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\",\n                     );\n                 }\n \n                 if self.tcx.sess.is_nightly_build() && is_const_fn {\n                     err.help(\n-                        \"create an inline `const` block, see PR \\\n+                        \"create an inline `const` block, see RFC \\\n                         #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n                         for more information\",\n                     );"}, {"sha": "329c6cb2b1285e67bd87b3a4a9a7d10fadb56bf2", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "patch": "@@ -7,8 +7,8 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: the following implementations were found:\n              <Option<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n-   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}, {"sha": "f02cb4f1ff193f21149f5098df0f061cd103397b", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=bba2bac9fe6a4c72aff5c5ad10616d7ca7d169c1", "patch": "@@ -5,8 +5,8 @@ LL |     let strings: [String; 5] = [String::new(); 5];\n    |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n-   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}]}