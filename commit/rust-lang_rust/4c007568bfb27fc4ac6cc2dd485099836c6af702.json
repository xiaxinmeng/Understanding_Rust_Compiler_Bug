{"sha": "4c007568bfb27fc4ac6cc2dd485099836c6af702", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDA3NTY4YmZiMjdmYzRhYzZjYzJkZDQ4NTA5OTgzNmM2YWY3MDI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:17:42Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "librustdoc: use `#[deriving(Copy)]`", "tree": {"sha": "2c7bfa0374af91e73ece40818f4ee847ac5fdda1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7bfa0374af91e73ece40818f4ee847ac5fdda1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c007568bfb27fc4ac6cc2dd485099836c6af702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c007568bfb27fc4ac6cc2dd485099836c6af702", "html_url": "https://github.com/rust-lang/rust/commit/4c007568bfb27fc4ac6cc2dd485099836c6af702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c007568bfb27fc4ac6cc2dd485099836c6af702/comments", "author": null, "committer": null, "parents": [{"sha": "fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "html_url": "https://github.com/rust-lang/rust/commit/fa0383f38d4b165ad2285efade1bbdbb780cdfe5"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "ed92320279591db599b9a3e67c807aca881100bb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -1188,7 +1188,7 @@ pub enum Type {\n     PolyTraitRef(Vec<TyParamBound>),\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash)]\n pub enum PrimitiveType {\n     Int, I8, I16, I32, I64,\n     Uint, U8, U16, U32, U64,\n@@ -1200,9 +1200,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-impl Copy for PrimitiveType {}\n-\n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Copy, Encodable, Decodable)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1215,8 +1213,6 @@ pub enum TypeKind {\n     TypeTypedef,\n }\n \n-impl Copy for TypeKind {}\n-\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s.as_slice() {\n@@ -1873,14 +1869,12 @@ impl Clean<Item> for doctree::Constant {\n     }\n }\n \n-#[deriving(Show, Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Copy, Show, Clone, Encodable, Decodable, PartialEq)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n }\n \n-impl Copy for Mutability {}\n-\n impl Clean<Mutability> for ast::Mutability {\n     fn clean(&self, _: &DocContext) -> Mutability {\n         match self {"}, {"sha": "83552884d7ffaa00eca8d1da99d8a8f6f5e94cb8", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -70,7 +70,7 @@ impl Module {\n     }\n }\n \n-#[deriving(Show, Clone, Encodable, Decodable)]\n+#[deriving(Copy, Show, Clone, Encodable, Decodable)]\n pub enum StructType {\n     /// A normal struct\n     Plain,\n@@ -82,8 +82,6 @@ pub enum StructType {\n     Unit\n }\n \n-impl Copy for StructType {}\n-\n pub enum TypeBound {\n     RegionBound,\n     TraitBound(ast::TraitRef)"}, {"sha": "5572bcb6aa8f0053fe9bcac024c3225975928de2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -29,15 +29,19 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n+#[deriving(Copy)]\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n+#[deriving(Copy)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n+#[deriving(Copy)]\n pub struct MutableSpace(pub clean::Mutability);\n /// Similar to VisSpace, but used for mutability\n+#[deriving(Copy)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for properly emitting the stability level.\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);\n@@ -48,11 +52,6 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n-impl Copy for VisSpace {}\n-impl Copy for UnsafetySpace {}\n-impl Copy for MutableSpace {}\n-impl Copy for RawMutableSpace {}\n-\n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n         let VisSpace(v) = *self; v"}, {"sha": "7c346539f6a79759fd7691efb51df7f3a4121e2e", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -19,7 +19,7 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n pub enum ItemType {\n     Module          = 0,\n     Struct          = 1,\n@@ -41,8 +41,6 @@ pub enum ItemType {\n     Constant        = 18,\n }\n \n-impl Copy for ItemType {}\n-\n impl ItemType {\n     pub fn from_item(item: &clean::Item) -> ItemType {\n         match item.inner {"}, {"sha": "8831b5e7d96fe5db5675c3f3055bc1abb8a3fe9f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -225,13 +225,12 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n+#[deriving(Copy)]\n struct Item<'a> {\n     cx: &'a Context,\n     item: &'a clean::Item,\n }\n \n-impl<'a> Copy for Item<'a> {}\n-\n struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n \n /// Struct representing one entry in the JS search index. These are all emitted"}, {"sha": "2f3079f75b923f1106a24b90cd273013f2fa05b1", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c007568bfb27fc4ac6cc2dd485099836c6af702/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=4c007568bfb27fc4ac6cc2dd485099836c6af702", "patch": "@@ -27,6 +27,7 @@ use html::render::cache;\n \n #[deriving(Zero, Encodable, Decodable, PartialEq, Eq)]\n /// The counts for each stability level.\n+#[deriving(Copy)]\n pub struct Counts {\n     pub deprecated: uint,\n     pub experimental: uint,\n@@ -39,8 +40,6 @@ pub struct Counts {\n     pub unmarked: uint,\n }\n \n-impl Copy for Counts {}\n-\n impl Add<Counts, Counts> for Counts {\n     fn add(self, other: Counts) -> Counts {\n         Counts {"}]}