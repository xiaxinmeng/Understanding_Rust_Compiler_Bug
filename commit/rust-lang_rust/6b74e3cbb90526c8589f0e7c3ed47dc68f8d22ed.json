{"sha": "6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzRlM2NiYjkwNTI2Yzg1ODlmMGU3YzNlZDQ3ZGM2OGY4ZDIyZWQ=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-06-19T08:14:54Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-06-20T06:54:32Z"}, "message": "Add ClashingExternDecl lint.\n\nThis lint checks that all declarations for extern fns of the same name\nare declared with the same types.", "tree": {"sha": "eedaf754f64c435b7a8814e1e898854da169af77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eedaf754f64c435b7a8814e1e898854da169af77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "html_url": "https://github.com/rust-lang/rust/commit/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a540b1b38dc2a28c11e481f95f43daebb52493d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a540b1b38dc2a28c11e481f95f43daebb52493d3", "html_url": "https://github.com/rust-lang/rust/commit/a540b1b38dc2a28c11e481f95f43daebb52493d3"}], "stats": {"total": 238, "additions": 233, "deletions": 5}, "files": [{"sha": "0115c4df2fd3e9901b0fa9f4e738681ddadb2910", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "patch": "@@ -277,6 +277,9 @@ pub mod primitive;\n // crate uses the this crate as its libcore.\n #[path = \"../stdarch/crates/core_arch/src/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n+// FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_decl is\n+// merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n+#[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n "}, {"sha": "b7f728ec60cfdab9b0b8aa2641c3f24de4ae3d23", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 226, "deletions": 5, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "patch": "@@ -26,15 +26,15 @@ use rustc_ast::attr::{self, HasAttrs};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::visit::{FnCtxt, FnKind};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n use rustc_feature::{GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{GenericParamKind, PatKind};\n-use rustc_hir::{HirIdSet, Node};\n+use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n+use rustc_hir::{HirId, HirIdSet, Node};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -48,7 +48,7 @@ use rustc_trait_selection::traits::misc::can_type_implement_copy;\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n-use log::debug;\n+use log::{debug, trace};\n use std::fmt::Write;\n \n // hardwired lints from librustc_middle\n@@ -2053,3 +2053,224 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n         }\n     }\n }\n+\n+declare_lint! {\n+    pub CLASHING_EXTERN_DECL,\n+    Warn,\n+    \"detects when an extern fn has been declared with the same name but different types\"\n+}\n+\n+pub struct ClashingExternDecl {\n+    seen_decls: FxHashMap<Symbol, HirId>,\n+}\n+\n+/// Differentiate between whether the name for an extern decl came from the link_name attribute or\n+/// just from declaration itself. This is important because we don't want to report clashes on\n+/// symbol name if they don't actually clash because one or the other links against a symbol with a\n+/// different name.\n+enum SymbolName {\n+    /// The name of the symbol + the span of the annotation which introduced the link name.\n+    Link(Symbol, Span),\n+    /// No link name, so just the name of the symbol.\n+    Normal(Symbol),\n+}\n+\n+impl SymbolName {\n+    fn get_name(&self) -> Symbol {\n+        match self {\n+            SymbolName::Link(s, _) | SymbolName::Normal(s) => *s,\n+        }\n+    }\n+}\n+\n+impl ClashingExternDecl {\n+    crate fn new() -> Self {\n+        ClashingExternDecl { seen_decls: FxHashMap::default() }\n+    }\n+    /// Insert a new foreign item into the seen set. If a symbol with the same name already exists\n+    /// for the item, return its HirId without updating the set.\n+    fn insert(&mut self, tcx: TyCtxt<'_>, fi: &hir::ForeignItem<'_>) -> Option<HirId> {\n+        let hid = fi.hir_id;\n+\n+        let name =\n+            &tcx.codegen_fn_attrs(tcx.hir().local_def_id(hid)).link_name.unwrap_or(fi.ident.name);\n+\n+        if self.seen_decls.contains_key(name) {\n+            // Avoid updating the map with the new entry when we do find a collision. We want to\n+            // make sure we're always pointing to the first definition as the previous declaration.\n+            // This lets us avoid emitting \"knock-on\" diagnostics.\n+            Some(*self.seen_decls.get(name).unwrap())\n+        } else {\n+            self.seen_decls.insert(*name, hid)\n+        }\n+    }\n+\n+    /// Get the name of the symbol that's linked against for a given extern declaration. That is,\n+    /// the name specified in a #[link_name = ...] attribute if one was specified, else, just the\n+    /// symbol's name.\n+    fn name_of_extern_decl(tcx: TyCtxt<'_>, fi: &hir::ForeignItem<'_>) -> SymbolName {\n+        let did = tcx.hir().local_def_id(fi.hir_id);\n+        if let Some((overridden_link_name, overridden_link_name_span)) =\n+            tcx.codegen_fn_attrs(did).link_name.map(|overridden_link_name| {\n+                // FIXME: Instead of searching through the attributes again to get span\n+                // information, we could have codegen_fn_attrs also give span information back for\n+                // where the attribute was defined. However, until this is found to be a\n+                // bottleneck, this does just fine.\n+                (\n+                    overridden_link_name,\n+                    tcx.get_attrs(did.to_def_id())\n+                        .iter()\n+                        .find(|at| at.check_name(sym::link_name))\n+                        .unwrap()\n+                        .span,\n+                )\n+            })\n+        {\n+            SymbolName::Link(overridden_link_name, overridden_link_name_span)\n+        } else {\n+            SymbolName::Normal(fi.ident.name)\n+        }\n+    }\n+\n+    /// Checks whether two types are structurally the same enough that the declarations shouldn't\n+    /// clash. We need this so we don't emit a lint when two modules both declare an extern struct,\n+    /// with the same members (as the declarations shouldn't clash).\n+    fn structurally_same_type<'a, 'tcx>(\n+        cx: &LateContext<'a, 'tcx>,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+    ) -> bool {\n+        let tcx = cx.tcx;\n+        if a == b || rustc_middle::ty::TyS::same_type(a, b) {\n+            // All nominally-same types are structurally same, too.\n+            true\n+        } else {\n+            // Do a full, depth-first comparison between the two.\n+            use rustc_middle::ty::TyKind::*;\n+            let a_kind = &a.kind;\n+            let b_kind = &b.kind;\n+\n+            match (a_kind, b_kind) {\n+                (Adt(..), Adt(..)) => {\n+                    // Adts are pretty straightforward: just compare the layouts.\n+                    use rustc_target::abi::LayoutOf;\n+                    let a_layout = cx.layout_of(a).unwrap().layout;\n+                    let b_layout = cx.layout_of(b).unwrap().layout;\n+                    a_layout == b_layout\n+                }\n+                (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n+                    // For arrays, we also check the constness of the type.\n+                    a_const.val == b_const.val\n+                        && Self::structurally_same_type(cx, a_const.ty, b_const.ty)\n+                        && Self::structurally_same_type(cx, a_ty, b_ty)\n+                }\n+                (Slice(a_ty), Slice(b_ty)) => Self::structurally_same_type(cx, a_ty, b_ty),\n+                (RawPtr(a_tymut), RawPtr(b_tymut)) => {\n+                    a_tymut.mutbl == a_tymut.mutbl\n+                        && Self::structurally_same_type(cx, &a_tymut.ty, &b_tymut.ty)\n+                }\n+                (Ref(_a_region, a_ty, a_mut), Ref(_b_region, b_ty, b_mut)) => {\n+                    // For structural sameness, we don't need the region to be same.\n+                    a_mut == b_mut && Self::structurally_same_type(cx, a_ty, b_ty)\n+                }\n+                (FnDef(..), FnDef(..)) => {\n+                    // As we don't compare regions, skip_binder is fine.\n+                    let a_poly_sig = a.fn_sig(tcx);\n+                    let b_poly_sig = b.fn_sig(tcx);\n+\n+                    let a_sig = a_poly_sig.skip_binder();\n+                    let b_sig = b_poly_sig.skip_binder();\n+\n+                    (a_sig.abi, a_sig.unsafety, a_sig.c_variadic)\n+                        == (b_sig.abi, b_sig.unsafety, b_sig.c_variadic)\n+                        && a_sig.inputs().iter().eq_by(b_sig.inputs().iter(), |a, b| {\n+                            Self::structurally_same_type(cx, a, b)\n+                        })\n+                        && Self::structurally_same_type(cx, a_sig.output(), b_sig.output())\n+                }\n+                (Tuple(a_substs), Tuple(b_substs)) => {\n+                    a_substs.types().eq_by(b_substs.types(), |a_ty, b_ty| {\n+                        Self::structurally_same_type(cx, a_ty, b_ty)\n+                    })\n+                }\n+                // For these, it's not quite as easy to define structural-sameness quite so easily.\n+                // For the purposes of this lint, take the conservative approach and mark them as\n+                // not structurally same.\n+                (Dynamic(..), Dynamic(..))\n+                | (Error(..), Error(..))\n+                | (Closure(..), Closure(..))\n+                | (Generator(..), Generator(..))\n+                | (GeneratorWitness(..), GeneratorWitness(..))\n+                | (Projection(..), Projection(..))\n+                | (Opaque(..), Opaque(..)) => false,\n+                // These definitely should have been caught above.\n+                (Bool, Bool) | (Char, Char) | (Never, Never) | (Str, Str) => unreachable!(),\n+                _ => false,\n+            }\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(ClashingExternDecl => [CLASHING_EXTERN_DECL]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDecl {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, this_fi: &hir::ForeignItem<'_>) {\n+        trace!(\"ClashingExternDecl: check_foreign_item: {:?}\", this_fi);\n+        if let ForeignItemKind::Fn(..) = this_fi.kind {\n+            let tcx = *&cx.tcx;\n+            if let Some(existing_hid) = self.insert(tcx, this_fi) {\n+                let existing_decl_ty = tcx.type_of(tcx.hir().local_def_id(existing_hid));\n+                let this_decl_ty = tcx.type_of(tcx.hir().local_def_id(this_fi.hir_id));\n+                debug!(\n+                    \"ClashingExternDecl: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n+                    existing_hid, existing_decl_ty, this_fi.hir_id, this_decl_ty\n+                );\n+                // Check that the declarations match.\n+                if !Self::structurally_same_type(cx, existing_decl_ty, this_decl_ty) {\n+                    let orig_fi = tcx.hir().expect_foreign_item(existing_hid);\n+                    let orig = Self::name_of_extern_decl(tcx, orig_fi);\n+\n+                    // We want to ensure that we use spans for both decls that include where the\n+                    // name was defined, whether that was from the link_name attribute or not.\n+                    let get_relevant_span =\n+                        |fi: &hir::ForeignItem<'_>| match Self::name_of_extern_decl(tcx, fi) {\n+                            SymbolName::Normal(_) => fi.span,\n+                            SymbolName::Link(_, annot_span) => fi.span.to(annot_span),\n+                        };\n+                    // Finally, emit the diagnostic.\n+                    tcx.struct_span_lint_hir(\n+                        CLASHING_EXTERN_DECL,\n+                        this_fi.hir_id,\n+                        get_relevant_span(this_fi),\n+                        |lint| {\n+                            let mut expected_str = DiagnosticStyledString::new();\n+                            expected_str.push(existing_decl_ty.fn_sig(tcx).to_string(), false);\n+                            let mut found_str = DiagnosticStyledString::new();\n+                            found_str.push(this_decl_ty.fn_sig(tcx).to_string(), true);\n+\n+                            lint.build(&format!(\n+                                \"`{}` redeclare{} with a different signature\",\n+                                this_fi.ident.name,\n+                                if orig.get_name() == this_fi.ident.name {\n+                                    \"d\".to_string()\n+                                } else {\n+                                    format!(\"s `{}`\", orig.get_name())\n+                                }\n+                            ))\n+                            .span_label(\n+                                get_relevant_span(orig_fi),\n+                                &format!(\"`{}` previously declared here\", orig.get_name()),\n+                            )\n+                            .span_label(\n+                                get_relevant_span(this_fi),\n+                                \"this signature doesn't match the previous declaration\",\n+                            )\n+                            .note_expected_found(&\"\", expected_str, &\"\", found_str)\n+                            .emit()\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "ca2ca3145abc8180391a527980dd8e8ddcc4cafe", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "patch": "@@ -30,6 +30,7 @@\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n+#![feature(iter_order_by)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(or_patterns)]\n@@ -154,6 +155,7 @@ macro_rules! late_lint_passes {\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n+                ClashingExternDecl: ClashingExternDecl::new(),\n             ]\n         );\n     };"}, {"sha": "1d1cdda1257aa5c67e82f14b21f54b160ab88684", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=6b74e3cbb90526c8589f0e7c3ed47dc68f8d22ed", "patch": "@@ -205,13 +205,15 @@ mod imp {\n         #[cfg(target_arch = \"aarch64\")]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel) -> NsId;\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, i: libc::c_ulong) -> NsId;\n         }\n \n         #[cfg(not(target_arch = \"aarch64\"))]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel, ...) -> NsId;\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }"}]}