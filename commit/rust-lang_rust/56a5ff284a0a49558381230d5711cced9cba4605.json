{"sha": "56a5ff284a0a49558381230d5711cced9cba4605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTVmZjI4NGEwYTQ5NTU4MzgxMjMwZDU3MTFjY2VkOWNiYTQ2MDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-09T23:41:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-10T00:48:10Z"}, "message": "std: Tweak process raising/lowering implementations\n\n* Slate these features to be stable in 1.2 instead of 1.1 (not being backported)\n* Have the `FromRawFd` implementations follow the contract of the `FromRawFd`\n  trait by taking ownership of the primitive specified.\n* Refactor the implementations slightly to remove the `unreachable!` blocks as\n  well as separating the stdio representation of `std::process` from\n  `std::sys::process`.", "tree": {"sha": "a95e5a7eea7ec22f78fab25a54e1029e0fdfdc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95e5a7eea7ec22f78fab25a54e1029e0fdfdc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a5ff284a0a49558381230d5711cced9cba4605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a5ff284a0a49558381230d5711cced9cba4605", "html_url": "https://github.com/rust-lang/rust/commit/56a5ff284a0a49558381230d5711cced9cba4605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a5ff284a0a49558381230d5711cced9cba4605/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a8d313c8351771dc5507dde14f654ca4f0707d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a8d313c8351771dc5507dde14f654ca4f0707d", "html_url": "https://github.com/rust-lang/rust/commit/71a8d313c8351771dc5507dde14f654ca4f0707d"}], "stats": {"total": 161, "additions": 60, "deletions": 101}, "files": [{"sha": "d70b9f099037a289236a177393bae25aa0cf3aa7", "filename": "src/libstd/process.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -243,13 +243,15 @@ impl Command {\n \n     fn spawn_inner(&self, default_io: StdioImp) -> io::Result<Child> {\n         let default_io = Stdio(default_io);\n-        let (their_stdin, our_stdin) = try!(\n+\n+        // See comment on `setup_io` for what `_drop_later` is.\n+        let (their_stdin, our_stdin, _drop_later) = try!(\n             setup_io(self.stdin.as_ref().unwrap_or(&default_io), true)\n         );\n-        let (their_stdout, our_stdout) = try!(\n+        let (their_stdout, our_stdout, _drop_later) = try!(\n             setup_io(self.stdout.as_ref().unwrap_or(&default_io), false)\n         );\n-        let (their_stderr, our_stderr) = try!(\n+        let (their_stderr, our_stderr, _drop_later) = try!(\n             setup_io(self.stderr.as_ref().unwrap_or(&default_io), false)\n         );\n \n@@ -271,7 +273,7 @@ impl Command {\n     /// By default, stdin, stdout and stderr are inherited from the parent.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn spawn(&mut self) -> io::Result<Child> {\n-        self.spawn_inner(StdioImp::Raw(imp::Stdio::Inherit))\n+        self.spawn_inner(StdioImp::Inherit)\n     }\n \n     /// Executes the command as a child process, waiting for it to finish and\n@@ -341,19 +343,30 @@ impl AsInnerMut<imp::Command> for Command {\n     fn as_inner_mut(&mut self) -> &mut imp::Command { &mut self.inner }\n }\n \n+// Takes a `Stdio` configuration (this module) and whether the to-be-owned\n+// handle will be readable.\n+//\n+// Returns a triple of (stdio to spawn with, stdio to store, stdio to drop). The\n+// stdio to spawn with is passed down to the `sys` module and indicates how the\n+// stdio stream should be set up. The \"stdio to store\" is an object which\n+// should be returned in the `Child` that makes its way out. The \"stdio to drop\"\n+// represents the raw value of \"stdio to spawn with\", but is the owned variant\n+// for it. This needs to be dropped after the child spawns\n fn setup_io(io: &Stdio, readable: bool)\n-            -> io::Result<(imp::Stdio, Option<AnonPipe>)>\n+            -> io::Result<(imp::Stdio, Option<AnonPipe>, Option<AnonPipe>)>\n {\n     Ok(match io.0 {\n         StdioImp::MakePipe => {\n             let (reader, writer) = try!(pipe::anon_pipe());\n             if readable {\n-                (imp::Stdio::Piped(reader), Some(writer))\n+                (imp::Stdio::Raw(reader.raw()), Some(writer), Some(reader))\n             } else {\n-                (imp::Stdio::Piped(writer), Some(reader))\n+                (imp::Stdio::Raw(writer.raw()), Some(reader), Some(writer))\n             }\n         }\n-        StdioImp::Raw(ref raw) => (raw.clone_if_copy(), None),\n+        StdioImp::Raw(ref owned) => (imp::Stdio::Raw(owned.raw()), None, None),\n+        StdioImp::Inherit => (imp::Stdio::Inherit, None, None),\n+        StdioImp::None => (imp::Stdio::None, None, None),\n     })\n }\n \n@@ -379,7 +392,9 @@ pub struct Stdio(StdioImp);\n // The internal enum for stdio setup; see below for descriptions.\n enum StdioImp {\n     MakePipe,\n-    Raw(imp::Stdio),\n+    Raw(imp::RawStdio),\n+    Inherit,\n+    None,\n }\n \n impl Stdio {\n@@ -389,16 +404,16 @@ impl Stdio {\n \n     /// The child inherits from the corresponding parent descriptor.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn inherit() -> Stdio { Stdio(StdioImp::Raw(imp::Stdio::Inherit)) }\n+    pub fn inherit() -> Stdio { Stdio(StdioImp::Inherit) }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn null() -> Stdio { Stdio(StdioImp::Raw(imp::Stdio::None)) }\n+    pub fn null() -> Stdio { Stdio(StdioImp::None) }\n }\n \n-impl FromInner<imp::Stdio> for Stdio {\n-    fn from_inner(inner: imp::Stdio) -> Stdio {\n+impl FromInner<imp::RawStdio> for Stdio {\n+    fn from_inner(inner: imp::RawStdio) -> Stdio {\n         Stdio(StdioImp::Raw(inner))\n     }\n }"}, {"sha": "cfe7a1f2dda0d491d5509099b875db1d71069f38", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -65,46 +65,28 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawFd for process::Stdio {\n-    /// Creates a new instance of `Stdio` from the raw underlying file\n-    /// descriptor.\n-    ///\n-    /// When this `Stdio` is used as an I/O handle for a child process the given\n-    /// file descriptor will be `dup`d into the destination file descriptor in\n-    /// the child process.\n-    ///\n-    /// Note that this function **does not** take ownership of the file\n-    /// descriptor provided and it will **not** be closed when `Stdio` goes out\n-    /// of scope. As a result this method is unsafe because due to the lack of\n-    /// knowledge about the lifetime of the provided file descriptor, this could\n-    /// cause another I/O primitive's ownership property of its file descriptor\n-    /// to be violated.\n-    ///\n-    /// Also note that this file descriptor may be used multiple times to spawn\n-    /// processes. For example the `Command::spawn` function could be called\n-    /// more than once to spawn more than one process sharing this file\n-    /// descriptor.\n     unsafe fn from_raw_fd(fd: RawFd) -> process::Stdio {\n-        process::Stdio::from_inner(sys::process::Stdio::Fd(fd))\n+        process::Stdio::from_inner(sys::fd::FileDesc::new(fd))\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdin {\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdout {\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStderr {\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()"}, {"sha": "58e205a01cae018a254e44ba4aacb20ed5558f1a", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -283,8 +283,6 @@ impl File {\n         Ok(File(fd))\n     }\n \n-    pub fn into_fd(self) -> FileDesc { self.0 }\n-\n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n         let mut stat: raw::stat = unsafe { mem::zeroed() };\n         try!(cvt(unsafe {"}, {"sha": "946857c05bc4a252d7ac83cdf7e5b9990c2ba0d9", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -44,6 +44,6 @@ impl AnonPipe {\n         self.0.write(buf)\n     }\n \n+    pub fn raw(&self) -> libc::c_int { self.0.raw() }\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n-    pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "9178ca7aba4cef95d9821214461e50cf0435a5b0", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -18,9 +18,10 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_void, c_int, gid_t, uid_t};\n use ptr;\n+use sys::fd::FileDesc;\n+use sys::fs::{File, OpenOptions};\n use sys::pipe::AnonPipe;\n use sys::{self, c, cvt, cvt_r};\n-use sys::fs::{File, OpenOptions};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -121,11 +122,12 @@ pub struct Process {\n \n pub enum Stdio {\n     Inherit,\n-    Piped(AnonPipe),\n     None,\n-    Fd(c_int),\n+    Raw(c_int),\n }\n \n+pub type RawStdio = FileDesc;\n+\n const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n \n impl Process {\n@@ -252,10 +254,9 @@ impl Process {\n         }\n \n         let setup = |src: Stdio, dst: c_int| {\n-            let fd = match src {\n-                Stdio::Inherit => return true,\n-                Stdio::Fd(fd) => return cvt_r(|| libc::dup2(fd, dst)).is_ok(),\n-                Stdio::Piped(pipe) => pipe.into_fd(),\n+            match src {\n+                Stdio::Inherit => true,\n+                Stdio::Raw(fd) => cvt_r(|| libc::dup2(fd, dst)).is_ok(),\n \n                 // If a stdio file descriptor is set to be ignored, we open up\n                 // /dev/null into that file descriptor. Otherwise, the first\n@@ -269,13 +270,12 @@ impl Process {\n                     let devnull = CStr::from_ptr(b\"/dev/null\\0\".as_ptr()\n                                                     as *const _);\n                     if let Ok(f) = File::open_c(devnull, &opts) {\n-                        f.into_fd()\n+                        cvt_r(|| libc::dup2(f.fd().raw(), dst)).is_ok()\n                     } else {\n-                        return false\n+                        false\n                     }\n                 }\n-            };\n-            cvt_r(|| libc::dup2(fd.raw(), dst)).is_ok()\n+            }\n         };\n \n         if !setup(in_fd, libc::STDIN_FILENO) { fail(&mut output) }\n@@ -418,14 +418,3 @@ fn translate_status(status: c_int) -> ExitStatus {\n         ExitStatus::Signal(imp::WTERMSIG(status))\n     }\n }\n-\n-impl Stdio {\n-    pub fn clone_if_copy(&self) -> Stdio {\n-        match *self {\n-            Stdio::Inherit => Stdio::Inherit,\n-            Stdio::None => Stdio::None,\n-            Stdio::Fd(fd) => Stdio::Fd(fd),\n-            Stdio::Piped(_) => unreachable!(),\n-        }\n-    }\n-}"}, {"sha": "6f59be2687a1b3daaba78744527344b35373ad4c", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -10,58 +10,43 @@\n \n //! Extensions to `std::process` for Windows.\n \n-#![stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#![stable(feature = \"process_extensions\", since = \"1.2.0\")]\n \n use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle};\n use process;\n use sys;\n use sys_common::{AsInner, FromInner};\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n-    /// Creates a new instance of `Stdio` from the raw underlying handle.\n-    ///\n-    /// When this `Stdio` is used as an I/O handle for a child process the given\n-    /// handle will be duplicated via `DuplicateHandle` to ensure that the\n-    /// handle has the correct permissions to cross the process boundary.\n-    ///\n-    /// Note that this function **does not** take ownership of the handle\n-    /// provided and it will **not** be closed when `Stdio` goes out of scope.\n-    /// As a result this method is unsafe because due to the lack of knowledge\n-    /// about the lifetime of the provided handle, this could cause another I/O\n-    /// primitive's ownership property of its handle to be violated.\n-    ///\n-    /// Also note that this handle may be used multiple times to spawn\n-    /// processes. For example the `Command::spawn` function could be called\n-    /// more than once to spawn more than one process sharing this handle.\n     unsafe fn from_raw_handle(handle: RawHandle) -> process::Stdio {\n-        let handle = sys::handle::RawHandle::new(handle as *mut _);\n-        process::Stdio::from_inner(sys::process::Stdio::Handle(handle))\n+        let handle = sys::handle::Handle::new(handle as *mut _);\n+        process::Stdio::from_inner(handle)\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::Child {\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdin {\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdout {\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStderr {\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _"}, {"sha": "b2a6607314a50600b000ab8ce3c626e36ecd189d", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -38,6 +38,8 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n impl AnonPipe {\n     pub fn handle(&self) -> &Handle { &self.inner }\n \n+    pub fn raw(&self) -> libc::HANDLE { self.inner.raw() }\n+\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }"}, {"sha": "0b0268d4746ab6b905d20222340d86b79dea753f", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a5ff284a0a49558381230d5711cced9cba4605/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=56a5ff284a0a49558381230d5711cced9cba4605", "patch": "@@ -28,7 +28,6 @@ use sync::StaticMutex;\n use sys::c;\n use sys::fs::{OpenOptions, File};\n use sys::handle::{Handle, RawHandle};\n-use sys::pipe::AnonPipe;\n use sys::stdio;\n use sys::{self, cvt};\n use sys_common::{AsInner, FromInner};\n@@ -107,11 +106,12 @@ pub struct Process {\n \n pub enum Stdio {\n     Inherit,\n-    Piped(AnonPipe),\n     None,\n-    Handle(RawHandle),\n+    Raw(libc::HANDLE),\n }\n \n+pub type RawStdio = Handle;\n+\n impl Process {\n     pub fn spawn(cfg: &Command,\n                  in_handle: Stdio,\n@@ -356,15 +356,6 @@ fn make_dirp(d: Option<&OsString>) -> (*const u16, Vec<u16>) {\n }\n \n impl Stdio {\n-    pub fn clone_if_copy(&self) -> Stdio {\n-        match *self {\n-            Stdio::Inherit => Stdio::Inherit,\n-            Stdio::None => Stdio::None,\n-            Stdio::Handle(handle) => Stdio::Handle(handle),\n-            Stdio::Piped(_) => unreachable!(),\n-        }\n-    }\n-\n     fn to_handle(&self, stdio_id: libc::DWORD) -> io::Result<Handle> {\n         use libc::DUPLICATE_SAME_ACCESS;\n \n@@ -374,11 +365,8 @@ impl Stdio {\n                     io.handle().duplicate(0, true, DUPLICATE_SAME_ACCESS)\n                 })\n             }\n-            Stdio::Handle(ref handle) => {\n-                handle.duplicate(0, true, DUPLICATE_SAME_ACCESS)\n-            }\n-            Stdio::Piped(ref pipe) => {\n-                pipe.handle().duplicate(0, true, DUPLICATE_SAME_ACCESS)\n+            Stdio::Raw(handle) => {\n+                RawHandle::new(handle).duplicate(0, true, DUPLICATE_SAME_ACCESS)\n             }\n \n             // Similarly to unix, we don't actually leave holes for the"}]}