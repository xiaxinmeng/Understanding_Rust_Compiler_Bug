{"sha": "c868f0255f677a4cedb62c27af96758fffdd6f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjhmMDI1NWY2NzdhNGNlZGI2MmMyN2FmOTY3NThmZmZkZDZmOGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-17T15:14:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-17T15:23:53Z"}, "message": "Fill the diagnostic code field in publish_diagnostics", "tree": {"sha": "1ecb70db8fdbe4ea9b9a8f7333d3f90bbf4c3dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ecb70db8fdbe4ea9b9a8f7333d3f90bbf4c3dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c868f0255f677a4cedb62c27af96758fffdd6f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c868f0255f677a4cedb62c27af96758fffdd6f8f", "html_url": "https://github.com/rust-lang/rust/commit/c868f0255f677a4cedb62c27af96758fffdd6f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c868f0255f677a4cedb62c27af96758fffdd6f8f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789d9ca1d32afd55c7cb8d0db45652048abd7341", "url": "https://api.github.com/repos/rust-lang/rust/commits/789d9ca1d32afd55c7cb8d0db45652048abd7341", "html_url": "https://github.com/rust-lang/rust/commit/789d9ca1d32afd55c7cb8d0db45652048abd7341"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "d9ad8db6f76999def37cbbf11d770ffa0d8c0b4c", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=c868f0255f677a4cedb62c27af96758fffdd6f8f", "patch": "@@ -1,6 +1,8 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::{InactiveCode, UnresolvedModule};\n-pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n+pub use hir_expand::diagnostics::{\n+    Diagnostic, DiagnosticCode, DiagnosticSink, DiagnosticSinkBuilder,\n+};\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n     NoSuchField,"}, {"sha": "1043c6aeb5becc71a32202b086a16574bafae0af", "filename": "crates/hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs?ref=c868f0255f677a4cedb62c27af96758fffdd6f8f", "patch": "@@ -20,7 +20,7 @@ use syntax::SyntaxNodePtr;\n \n use crate::InFile;\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n \n impl DiagnosticCode {"}, {"sha": "3df73ed4fa3450a5c21a4ad78a5ac34516ef558d", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=c868f0255f677a4cedb62c27af96758fffdd6f8f", "patch": "@@ -10,7 +10,7 @@ mod field_shorthand;\n use std::cell::RefCell;\n \n use hir::{\n-    diagnostics::{Diagnostic as _, DiagnosticSinkBuilder},\n+    diagnostics::{Diagnostic as _, DiagnosticCode, DiagnosticSinkBuilder},\n     Semantics,\n };\n use ide_db::base_db::SourceDatabase;\n@@ -35,15 +35,23 @@ pub struct Diagnostic {\n     pub severity: Severity,\n     pub fix: Option<Fix>,\n     pub unused: bool,\n+    pub code: Option<DiagnosticCode>,\n }\n \n impl Diagnostic {\n     fn error(range: TextRange, message: String) -> Self {\n-        Self { message, range, severity: Severity::Error, fix: None, unused: false }\n+        Self { message, range, severity: Severity::Error, fix: None, unused: false, code: None }\n     }\n \n     fn hint(range: TextRange, message: String) -> Self {\n-        Self { message, range, severity: Severity::WeakWarning, fix: None, unused: false }\n+        Self {\n+            message,\n+            range,\n+            severity: Severity::WeakWarning,\n+            fix: None,\n+            unused: false,\n+            code: None,\n+        }\n     }\n \n     fn with_fix(self, fix: Option<Fix>) -> Self {\n@@ -53,6 +61,10 @@ impl Diagnostic {\n     fn with_unused(self, unused: bool) -> Self {\n         Self { unused, ..self }\n     }\n+\n+    fn with_code(self, code: Option<DiagnosticCode>) -> Self {\n+        Self { code, ..self }\n+    }\n }\n \n #[derive(Debug)]\n@@ -126,7 +138,8 @@ pub(crate) fn diagnostics(\n             // Override severity and mark as unused.\n             res.borrow_mut().push(\n                 Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n-                    .with_unused(true),\n+                    .with_unused(true)\n+                    .with_code(Some(d.code())),\n             );\n         })\n         // Only collect experimental diagnostics when they're enabled.\n@@ -137,8 +150,10 @@ pub(crate) fn diagnostics(\n     let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n-            res.borrow_mut()\n-                .push(Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()));\n+            res.borrow_mut().push(\n+                Diagnostic::error(sema.diagnostics_display_range(d).range, d.message())\n+                    .with_code(Some(d.code())),\n+            );\n         });\n \n     if let Some(m) = sema.to_module_def(file_id) {\n@@ -149,11 +164,15 @@ pub(crate) fn diagnostics(\n }\n \n fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n+    Diagnostic::error(sema.diagnostics_display_range(d).range, d.message())\n+        .with_fix(d.fix(&sema))\n+        .with_code(Some(d.code()))\n }\n \n fn warning_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n+    Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n+        .with_fix(d.fix(&sema))\n+        .with_code(Some(d.code()))\n }\n \n fn check_unnecessary_braces_in_use_statement(\n@@ -589,6 +608,11 @@ fn test_fn() {\n                             },\n                         ),\n                         unused: false,\n+                        code: Some(\n+                            DiagnosticCode(\n+                                \"unresolved-module\",\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],"}, {"sha": "a1057cc548e44223eb3457f9c38e782b69bd02e6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c868f0255f677a4cedb62c27af96758fffdd6f8f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c868f0255f677a4cedb62c27af96758fffdd6f8f", "patch": "@@ -18,7 +18,7 @@ use lsp_types::{\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DiagnosticTag,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n-    HoverContents, Location, Position, PrepareRenameResponse, Range, RenameParams,\n+    HoverContents, Location, NumberOrString, Position, PrepareRenameResponse, Range, RenameParams,\n     SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n     SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n     SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n@@ -1127,7 +1127,7 @@ pub(crate) fn publish_diagnostics(\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),\n             severity: Some(to_proto::diagnostic_severity(d.severity)),\n-            code: None,\n+            code: d.code.map(|d| d.as_str().to_owned()).map(NumberOrString::String),\n             code_description: None,\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,"}]}