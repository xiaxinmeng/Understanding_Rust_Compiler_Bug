{"sha": "c516eee503ae643ead9553fed70528230feb2b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTZlZWU1MDNhZTY0M2VhZDk1NTNmZWQ3MDUyODIzMGZlYjJiMWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-28T20:58:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-28T21:01:36Z"}, "message": "Move std::cell::clone_ref to a clone associated function on std::cell::Ref\n\n... and generalize the bounds on the value type.", "tree": {"sha": "c00c3b387b0fe64f1406675a1579e67f8995c28f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00c3b387b0fe64f1406675a1579e67f8995c28f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c516eee503ae643ead9553fed70528230feb2b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c516eee503ae643ead9553fed70528230feb2b1f", "html_url": "https://github.com/rust-lang/rust/commit/c516eee503ae643ead9553fed70528230feb2b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c516eee503ae643ead9553fed70528230feb2b1f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621a10e7f32d790c39a0b4528369cf7959dd7d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/621a10e7f32d790c39a0b4528369cf7959dd7d34", "html_url": "https://github.com/rust-lang/rust/commit/621a10e7f32d790c39a0b4528369cf7959dd7d34"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "dbb0db3336632b4de9d7ebe783ce7e07d165c4f3", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c516eee503ae643ead9553fed70528230feb2b1f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c516eee503ae643ead9553fed70528230feb2b1f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c516eee503ae643ead9553fed70528230feb2b1f", "patch": "@@ -545,13 +545,30 @@ impl<'b, T: ?Sized> Deref for Ref<'b, T> {\n ///\n /// A `Clone` implementation would interfere with the widespread\n /// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n+#[deprecated(since = \"1.2.0\", reason = \"moved to a `Ref::clone` associated function\")]\n #[unstable(feature = \"core\",\n            reason = \"likely to be moved to a method, pending language changes\")]\n #[inline]\n pub fn clone_ref<'b, T:Clone>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n-    Ref {\n-        _value: orig._value,\n-        _borrow: orig._borrow.clone(),\n+    Ref::clone(orig)\n+}\n+\n+impl<'b, T: ?Sized> Ref<'b, T> {\n+    /// Copies a `Ref`.\n+    ///\n+    /// The `RefCell` is already immutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as `Ref::clone(...)`.\n+    /// A `Clone` implementation or a method would interfere with the widespread\n+    /// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n+    #[unstable(feature = \"cell_extras\",\n+               reason = \"likely to be moved to a method, pending language changes\")]\n+    #[inline]\n+    pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n+        Ref {\n+            _value: orig._value,\n+            _borrow: orig._borrow.clone(),\n+        }\n     }\n }\n "}, {"sha": "eae8cd2c0f3a1a1a96e14b8837b31167d684ec10", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c516eee503ae643ead9553fed70528230feb2b1f/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c516eee503ae643ead9553fed70528230feb2b1f/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=c516eee503ae643ead9553fed70528230feb2b1f", "patch": "@@ -115,13 +115,13 @@ fn discard_doesnt_unborrow() {\n }\n \n #[test]\n-fn clone_ref_updates_flag() {\n+fn ref_clone_updates_flag() {\n     let x = RefCell::new(0);\n     {\n         let b1 = x.borrow();\n         assert_eq!(x.borrow_state(), BorrowState::Reading);\n         {\n-            let _b2 = clone_ref(&b1);\n+            let _b2 = Ref::clone(&b1);\n             assert_eq!(x.borrow_state(), BorrowState::Reading);\n         }\n         assert_eq!(x.borrow_state(), BorrowState::Reading);"}]}