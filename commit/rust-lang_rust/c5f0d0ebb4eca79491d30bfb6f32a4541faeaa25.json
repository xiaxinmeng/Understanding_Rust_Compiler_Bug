{"sha": "c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25", "node_id": "C_kwDOAAsO6NoAKGM1ZjBkMGViYjRlY2E3OTQ5MWQzMGJmYjZmMzJhNDU0MWZhZWFhMjU", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-19T11:20:39Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-26T06:53:35Z"}, "message": "Make `TypeFolder::fold_*` return `Result`", "tree": {"sha": "f88a42f39883f2d3c79aaac74a9b30899cf4de0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f88a42f39883f2d3c79aaac74a9b30899cf4de0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGghG8ACgkQB8rDzKfg\nZD/phA/+JkhYZzyppn72ItQpWbMoYqUjsFp+lP33j9hgHRZrpuCXY4vSdvn0YvUt\n5I0BrFURhJqTRQzmo2nH5YAN2LQTTNx9gHs/LE8VR0xPnHWcVVHnjMDVI6RwXwSD\ndSBbKFk7sDK/NTwa3NvMeKWpYAHQs5pocE7pKUcnzHG8ViuqZSlB/sHAUU+JqmeI\n+W8VdT2vz6SJjdpFx5k4aJmvSTq9wUtZeccAGQoms+QYI4FCwwdbWV6820U2TzM3\nCBwsvyOoOzRnLeuYB3MvtFipufR1WtipSzM4KP0ExcfDuoutCM58eV3uxxlCNGAQ\nW3MmDNmoOjbVnsIftY88RbM6cKYVHRhyF4zwR3sY6iEvljD+0bp93kOol6N6hp6H\n/nrSTsB4JIeGeTf+K4tFDFDvrB9+vRxT90WG6S8lyuNh6q/xk/cvD68QUBIYJQK1\n2aCzJRJHXMRTL/jslgvnmelATlhAkJvAAbMwNJDSl59UYjaguvR/3MpiR5KIjzvz\nAmBRDASAbEPLNLAbeKtuUoKIy6ZPvO8AFlN2MoDf6gFahZjbi9t7EQxXpKe4vsXQ\nqgZIN/zNk/y9QL6bgUKBMOO2Dji+J3q0AnpfbYWr+3V/C6puvu/+M3kPN5taFRVj\nIQSHH2lq7AxBt+pARUR+y/zI3L/pOVppgw+dCdOmjUesc9M78DM=\n=0h5n\n-----END PGP SIGNATURE-----", "payload": "tree f88a42f39883f2d3c79aaac74a9b30899cf4de0e\nparent 9adfd9db78b274bd710a94d7778cbd5db11b9241\nauthor LeSeulArtichaut <leseulartichaut@gmail.com> 1621423239 +0200\ncommitter Alan Egerton <eggyal@gmail.com> 1637909615 +0000\n\nMake `TypeFolder::fold_*` return `Result`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25", "html_url": "https://github.com/rust-lang/rust/commit/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9adfd9db78b274bd710a94d7778cbd5db11b9241", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adfd9db78b274bd710a94d7778cbd5db11b9241", "html_url": "https://github.com/rust-lang/rust/commit/9adfd9db78b274bd710a94d7778cbd5db11b9241"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "a306656984f3129a011cda892592c87485181d61", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c5f0d0ebb4eca79491d30bfb6f32a4541faeaa25", "patch": "@@ -46,8 +46,8 @@ use std::ops::ControlFlow;\n ///\n /// To implement this conveniently, use the derive macro located in `rustc_macros`.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n-    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self;\n-    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error>;\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.super_fold_with(folder)\n     }\n \n@@ -193,32 +193,43 @@ impl TypeFoldable<'tcx> for hir::Constness {\n /// identity fold, it should invoke `foo.fold_with(self)` to fold each\n /// sub-item.\n pub trait TypeFolder<'tcx>: Sized {\n+    type Error = !;\n+\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n-    fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n+    fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(\n+        &mut self,\n+        c: &'tcx ty::Const<'tcx>,\n+    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+    fn fold_predicate(\n+        &mut self,\n+        p: ty::Predicate<'tcx>,\n+    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n         p.super_fold_with(self)\n     }\n \n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+    fn fold_mir_const(\n+        &mut self,\n+        c: mir::ConstantKind<'tcx>,\n+    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n         bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n     }\n }"}]}