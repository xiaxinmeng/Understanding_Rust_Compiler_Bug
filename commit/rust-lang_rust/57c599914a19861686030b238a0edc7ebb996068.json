{"sha": "57c599914a19861686030b238a0edc7ebb996068", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzU5OTkxNGExOTg2MTY4NjAzMGIyMzhhMGVkYzdlYmI5OTYwNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-23T22:41:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-27T18:02:54Z"}, "message": "librustc: Terminate name searches at the nearest module scope for paths that contain at least two components. r=graydon", "tree": {"sha": "da3e6ee27b1260b140dacf0085cc258f15279e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3e6ee27b1260b140dacf0085cc258f15279e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c599914a19861686030b238a0edc7ebb996068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c599914a19861686030b238a0edc7ebb996068", "html_url": "https://github.com/rust-lang/rust/commit/57c599914a19861686030b238a0edc7ebb996068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c599914a19861686030b238a0edc7ebb996068/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b659392ea4a7a15226519f26d081431f624c466", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b659392ea4a7a15226519f26d081431f624c466", "html_url": "https://github.com/rust-lang/rust/commit/6b659392ea4a7a15226519f26d081431f624c466"}], "stats": {"total": 3322, "additions": 2536, "deletions": 786}, "files": [{"sha": "0c1cc566fe2ec43ff1c4007033afd6813845fb66", "filename": "src/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,18 +12,18 @@\n extern mod core(vers = \"0.6\");\n \n #[cfg(cargo)]\n-extern mod self(name = \"cargo\", vers = \"0.6\");\n+extern mod this(name = \"cargo\", vers = \"0.6\");\n \n #[cfg(fuzzer)]\n-extern mod self(name = \"fuzzer\", vers = \"0.6\");\n+extern mod this(name = \"fuzzer\", vers = \"0.6\");\n \n #[cfg(rustdoc)]\n-extern mod self(name = \"rustdoc\", vers = \"0.6\");\n+extern mod this(name = \"rustdoc\", vers = \"0.6\");\n \n #[cfg(rusti)]\n-extern mod self(name = \"rusti\", vers = \"0.6\");\n+extern mod this(name = \"rusti\", vers = \"0.6\");\n \n #[cfg(rustc)]\n-extern mod self(name = \"rustc\", vers = \"0.6\");\n+extern mod this(name = \"rustc\", vers = \"0.6\");\n \n-fn main() { self::main() }\n\\ No newline at end of file\n+fn main() { this::main() }"}, {"sha": "e05260bace208be412710b9f416e2a8ef94c3471", "filename": "src/libcargo/pgp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fpgp.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::os;\n+use core::run;\n+\n fn gpgv(args: ~[~str]) -> { status: int, out: ~str, err: ~str } {\n     return run::program_output(~\"gpgv\", args);\n }"}, {"sha": "0aa4fd68d57db2fe7184464a6512ad9b83b3182c", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,21 +15,26 @@\n #[forbid(deprecated_pattern)];\n \n use cast::transmute;\n+use iter;\n+use libc;\n use ptr::addr_of;\n+use sys;\n+use uint;\n+use vec;\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n \n #[abi = \"cdecl\"]\n-extern mod rustrt {\n+pub extern mod rustrt {\n     #[legacy_exports];\n     fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n                                  ++v: **vec::raw::VecRepr,\n                                  ++n: libc::size_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n+pub extern mod rusti {\n     #[legacy_exports];\n     fn move_val_init<T>(dst: &mut T, -src: T);\n }\n@@ -157,6 +162,13 @@ pub mod traits {\n pub mod traits {}\n \n pub mod raw {\n+    use at_vec::{rusti, rustrt};\n+    use libc;\n+    use ptr;\n+    use sys;\n+    use uint;\n+    use vec;\n+\n     pub type VecRepr = vec::raw::VecRepr;\n     pub type SliceRepr = vec::raw::SliceRepr;\n "}, {"sha": "370c9bb44041bbe7b07a5c9c992d6ea4d4a559a9", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,7 @@\n \n //! Boolean logic\n \n+use cmp;\n use cmp::Eq;\n \n /// Negation / inverse"}, {"sha": "79ce8d3585871a01feab3f17547c4881c4e86f5f", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,6 +15,10 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n+use str;\n+use u32;\n+use uint;\n+use unicode;\n \n /*\n     Lu  Uppercase_Letter    an uppercase letter"}, {"sha": "1d934b9af14bc2de50c74b83197b9151ad6a8c70", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use task;\n+\n // helper for transmutation, shown below.\n type RustClosure = (int,int);\n pub struct Handler<T, U> {"}, {"sha": "8806f31c66af25f1ee191f44da9d067b5624bc71", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -235,7 +235,7 @@ mod stackwalk;\n // 'core' so that macro-expanded references to core::error and such\n // can be resolved within libcore.\n #[doc(hidden)] // FIXME #3538\n-mod core {\n+pub mod core {\n     pub const error : u32 = 1_u32;\n     pub const warn : u32 = 2_u32;\n     pub const info : u32 = 3_u32;"}, {"sha": "e4b18646b327f4af338e5eeeb54229050d0a2c9a", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -22,6 +22,10 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use managed;\n+use option;\n+use vec;\n+\n type DListLink<T> = Option<DListNode<T>>;\n \n enum DListNode<T> = @{"}, {"sha": "dd6b07211213907f69c4e287811c12eb59f8c9c4", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -23,8 +23,10 @@ Note that recursive use is not permitted.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cast;\n use cast::reinterpret_cast;\n use ptr::null;\n+use vec;\n \n /**\n  * A growable, modifiable vector type that accumulates elements into a"}, {"sha": "866232dc49cd625d90613a656a70650e54bd309b", "filename": "src/libcore/either.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,11 @@\n \n //! A type that represents one of two alternatives\n \n+use cmp;\n use cmp::Eq;\n+use result;\n use result::Result;\n+use vec;\n \n /// The either type\n #[deriving_eq]"}, {"sha": "5d7e0306b064bc2380e4e553da144cac7d4656eb", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -82,7 +82,7 @@ debug!(\"hello, %s!\", \"world\");\n \n use cmp::Eq;\n use option::{Some, None};\n-\n+use str;\n \n /*\n  * We have a 'ct' (compile-time) module that parses format strings into a\n@@ -98,6 +98,10 @@ use option::{Some, None};\n // Functions used by the fmt extension at compile time\n #[doc(hidden)]\n pub mod ct {\n+    use char;\n+    use str;\n+    use vec;\n+\n     pub enum Signedness { Signed, Unsigned, }\n     pub enum Caseness { CaseUpper, CaseLower, }\n     pub enum Ty {\n@@ -332,6 +336,12 @@ pub mod ct {\n // implement it 0this way, I think.\n #[doc(hidden)]\n pub mod rt {\n+    use float;\n+    use str;\n+    use sys;\n+    use uint;\n+    use vec;\n+\n     pub const flag_none : u32 = 0u32;\n     pub const flag_left_justify   : u32 = 0b00000000000001u32;\n     pub const flag_left_zero_pad  : u32 = 0b00000000000010u32;"}, {"sha": "ce90f757769beda4a3336e4968c71c1c3a8fb710", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,6 +14,9 @@\n \n //! Operations and constants for `f32`\n \n+use cmp;\n+use num;\n+\n pub use cmath::c_float_utils::*;\n pub use cmath::c_float_targ_consts::*;\n "}, {"sha": "97d9e8e758452fee755d65482c46ea432ec71e1d", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,6 +14,11 @@\n \n //! Operations and constants for `f64`\n \n+use cmath;\n+use cmp;\n+use libc;\n+use num;\n+\n pub use cmath::c_double_utils::*;\n pub use cmath::c_double_targ_consts::*;\n "}, {"sha": "a6d568c5892fc8f26a5aef07f945443ea8d1da36", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -18,7 +18,10 @@ Simple compression\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use libc;\n use libc::{c_void, size_t, c_int};\n+use ptr;\n+use vec;\n \n extern mod rustrt {\n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,"}, {"sha": "2f8422fa4f704f97a06c57ae7e35994ba0f0f4a5", "filename": "src/libcore/float.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -26,6 +26,13 @@\n \n use m_float = f64;\n \n+use cmp::{Eq, Ord};\n+use f64;\n+use num;\n+use num::Num::from_int;\n+use str;\n+use uint;\n+\n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::logarithm;\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n@@ -35,8 +42,6 @@ pub use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n pub use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n pub use f64::signbit;\n pub use f64::{j0, j1, jn, y0, y1, yn};\n-use cmp::{Eq, Ord};\n-use num::Num::from_int;\n \n pub const NaN: float = 0.0/0.0;\n "}, {"sha": "89f5a4eb8f066fce7079d8dfee72d7c2adfaf846", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -39,10 +39,15 @@ with destructors.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-pub use stackwalk::Word;\n-use libc::size_t;\n-use libc::uintptr_t;\n+use cast;\n+use io;\n+use libc::{size_t, uintptr_t};\n+use ptr;\n use send_map::linear::LinearMap;\n+use stackwalk;\n+use sys;\n+\n+pub use stackwalk::Word;\n \n // Mirrors rust_stack.h stk_seg\n struct StackSegment {"}, {"sha": "d3d6c5ae2424ba760d82f6a871359e19c19e9c8d", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -23,9 +23,12 @@\n  * CPRNG like rand::rng.\n  */\n \n-use io::Writer;\n-use io::WriterUtil;\n+use io;\n+use io::{Writer, WriterUtil};\n+use os;\n use to_bytes::IterBytes;\n+use uint;\n+use vec;\n \n /**\n  * Types that can meaningfully be hashed should implement this."}, {"sha": "3d65c65221ee8563d16def415a2bea92678e34ff", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,9 +14,15 @@\n \n use T = self::inst::T;\n \n+use char;\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n+use iter;\n+use num;\n use num::Num::from_int;\n+use str;\n+use uint;\n+use vec;\n \n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);"}, {"sha": "da60b567f665afd33ea87eacc18ff28d0d9e85f4", "filename": "src/libcore/int-template/i16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,5 +12,5 @@\n \n mod inst {\n     pub type T = i16;\n-    pub const bits: uint = u16::bits;\n-}\n\\ No newline at end of file\n+    pub const bits: uint = ::u16::bits;\n+}"}, {"sha": "1bc45bb71af7eb0dcc8ca638d7b2a6e60e760e4b", "filename": "src/libcore/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,5 +12,5 @@\n \n mod inst {\n     pub type T = i32;\n-    pub const bits: uint = u32::bits;\n+    pub const bits: uint = ::u32::bits;\n }"}, {"sha": "83d15aa857d95fa52714e8106f8c2b8153dfd8bf", "filename": "src/libcore/int-template/i64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,5 +12,5 @@\n \n mod inst {\n     pub type T = i64;\n-    pub const bits: uint = u64::bits;\n-}\n\\ No newline at end of file\n+    pub const bits: uint = ::u64::bits;\n+}"}, {"sha": "740442ed725be7fda7e7e14f951b94bf21d23692", "filename": "src/libcore/int-template/i8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,5 +12,5 @@\n \n mod inst {\n     pub type T = i8;\n-    pub const bits: uint = u8::bits;\n-}\n\\ No newline at end of file\n+    pub const bits: uint = ::u8::bits;\n+}"}, {"sha": "9e06cc95270e1c12baea416c984d272210dd1120", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,7 +14,7 @@ pub use self::inst::pow;\n \n mod inst {\n     pub type T = int;\n-    pub const bits: uint = uint::bits;\n+    pub const bits: uint = ::uint::bits;\n \n     /// Returns `base` raised to the power of `exponent`\n     pub pure fn pow(base: int, exponent: uint) -> int {"}, {"sha": "1d25adb1e31b184f7322f3af72ce2a29f8ef1e79", "filename": "src/libcore/io.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -21,9 +21,18 @@ use result::Result;\n \n use cmp::Eq;\n use dvec::DVec;\n+use int;\n+use libc;\n use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n use libc::consts::os::posix88::*;\n use libc::consts::os::extra::*;\n+use option;\n+use os;\n+use ptr;\n+use result;\n+use str;\n+use uint;\n+use vec;\n \n #[allow(non_camel_case_types)] // not sure what to do about this\n type fd_t = c_int;\n@@ -1019,6 +1028,9 @@ pub fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n // fsync related\n \n pub mod fsync {\n+    use libc;\n+    use option;\n+    use os;\n \n     pub enum Level {\n         // whatever fsync does on that platform"}, {"sha": "59eb9fbae8eea7dd2b2fe627b03f4e5a77293541", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,7 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n+use iter;\n \n use self::inst::{IMPL_T, EACH, SIZE_HINT};\n "}, {"sha": "42ed4b5f73cc02d92e348a080268b1b9a45cef5e", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n mod inst {\n+    use dlist;\n+    use managed;\n+    use option;\n+\n     #[allow(non_camel_case_types)]\n     pub type IMPL_T<A> = dlist::DList<A>;\n \n@@ -45,4 +49,4 @@ mod inst {\n     pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n         Some(self.len())\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f338578d1432a123e00cb74e1f14f1fb1c17c225", "filename": "src/libcore/iter-trait/dvec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n mod inst {\n+    use dvec;\n+\n     #[allow(non_camel_case_types)]\n     pub type IMPL_T<A> = dvec::DVec<A>;\n \n@@ -29,4 +31,4 @@ mod inst {\n     pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n         Some(self.len())\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "aa9660709804d91a22339d4afd657eff98d2de28", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -18,6 +18,7 @@ The iteration traits and common implementation\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n+use vec;\n \n /// A function used to initialize the elements of a sequence\n pub type InitOp<T> = &fn(uint) -> T;"}, {"sha": "cb8f2b7088657e00ffc31e860b7a7c9b1f5975e7", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,6 +15,10 @@\n #[forbid(deprecated_pattern)];\n \n use cast::transmute;\n+use io;\n+use libc;\n+use repr;\n+use vec;\n \n #[nolink]\n extern mod rustrt {"}, {"sha": "5bbb5f6bec20d727b86b41e45b384abf1f33e82e", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,7 @@\n \n use cmp::{Eq, Ord};\n use intrinsic::TyDesc;\n+use ptr;\n \n pub mod raw {\n     pub struct BoxHeaderRepr {"}, {"sha": "9206f78b91524a9a35648ab6eef2daf46187ec55", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -46,8 +46,15 @@ will once again be the preferred module for intertask communication.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cast;\n+use either;\n use either::Either;\n+use libc;\n use libc::size_t;\n+use ptr;\n+use sys;\n+use task;\n+use vec;\n // After snapshot, change p2::addr_of => addr_of\n \n /**"}, {"sha": "747b0a45501523998049761b33cba5a86486cf35", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -45,6 +45,8 @@ let unwrapped_msg = match move msg {\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n+use option;\n+use util;\n \n /// The option type\n #[deriving_eq]"}, {"sha": "4fe2050574df92172f2496198f49846fa1272ad7", "filename": "src/libcore/os.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -30,14 +30,24 @@\n  * to write OS-ignorant code by default.\n  */\n \n-use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n-           mode_t, pid_t, FILE};\n-pub use libc::{close, fclose};\n-\n+use cast;\n+use either;\n+use io;\n+use libc;\n+use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t};\n+use libc::{mode_t, pid_t, FILE};\n+use option;\n use option::{Some, None};\n+use private;\n+use ptr;\n+use str;\n+use task;\n+use task::TaskBuilder;\n+use uint;\n+use vec;\n \n+pub use libc::{close, fclose};\n pub use os::consts::*;\n-use task::TaskBuilder;\n \n // FIXME: move these to str perhaps? #2620\n \n@@ -127,6 +137,12 @@ pub fn env() -> ~[(~str,~str)] {\n \n mod global_env {\n     //! Internal module for serializing access to getenv/setenv\n+    use either;\n+    use libc;\n+    use oldcomm;\n+    use private;\n+    use str;\n+    use task;\n \n     extern mod rustrt {\n         fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n@@ -142,16 +158,16 @@ mod global_env {\n         let env_ch = get_global_env_chan();\n         let po = oldcomm::Port();\n         oldcomm::send(env_ch, MsgGetEnv(str::from_slice(n),\n-                                     oldcomm::Chan(&po)));\n+                                        oldcomm::Chan(&po)));\n         oldcomm::recv(po)\n     }\n \n     pub fn setenv(n: &str, v: &str) {\n         let env_ch = get_global_env_chan();\n         let po = oldcomm::Port();\n         oldcomm::send(env_ch, MsgSetEnv(str::from_slice(n),\n-                                     str::from_slice(v),\n-                                     oldcomm::Chan(&po)));\n+                                        str::from_slice(v),\n+                                        oldcomm::Chan(&po)));\n         oldcomm::recv(po)\n     }\n \n@@ -195,6 +211,13 @@ mod global_env {\n     }\n \n     mod impl_ {\n+        use cast;\n+        use libc;\n+        use option;\n+        use ptr;\n+        use str;\n+        use vec;\n+\n         extern mod rustrt {\n             fn rust_env_pairs() -> ~[~str];\n         }"}, {"sha": "7b745c477b1ef81654097d48e9a0c75ac5e004f1", "filename": "src/libcore/path.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,6 +19,9 @@ Cross-platform file path handling\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n+use libc;\n+use ptr;\n+use str;\n \n #[deriving_eq]\n pub struct WindowsPath {\n@@ -87,6 +90,8 @@ pub pure fn Path(s: &str) -> Path {\n mod stat {\n     #[cfg(target_arch = \"x86\")]\n     pub mod arch {\n+        use libc;\n+\n         pub fn default_stat() -> libc::stat {\n             libc::stat {\n                 st_dev: 0,\n@@ -115,6 +120,8 @@ mod stat {\n \n     #[cfg(target_arch = \"x86_64\")]\n     pub mod arch {\n+        use libc;\n+\n         pub fn default_stat() -> libc::stat {\n             libc::stat {\n                 st_dev: 0,\n@@ -144,6 +151,8 @@ mod stat {\n mod stat {\n     #[cfg(target_arch = \"x86_64\")]\n     pub mod arch {\n+        use libc;\n+\n         pub fn default_stat() -> libc::stat {\n             libc::stat {\n                 st_dev: 0,\n@@ -176,6 +185,8 @@ mod stat {\n #[cfg(target_os = \"macos\")]\n mod stat {\n     pub mod arch {\n+        use libc;\n+\n         pub fn default_stat() -> libc::stat {\n             libc::stat {\n                 st_dev: 0,\n@@ -738,6 +749,8 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n \n // Various windows helpers, and tests for the impl.\n mod windows {\n+    use libc;\n+\n     #[inline(always)]\n     pub pure fn is_sep(u: u8) -> bool {\n         u == '/' as u8 || u == '\\\\' as u8"}, {"sha": "12c01b307d5594455c003b5a2788b1e1747cdefb", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -90,7 +90,14 @@ bounded and unbounded protocols allows for less code duplication.\n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n use either::{Either, Left, Right};\n+use libc;\n+use option;\n use option::unwrap;\n+use pipes;\n+use ptr;\n+use private;\n+use task;\n+use vec;\n \n #[doc(hidden)]\n const SPIN_COUNT: uint = 0;"}, {"sha": "c9fda4b69ecc3f6c1a4e44342c470fb181860fc7", "filename": "src/libcore/private.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,8 +15,14 @@\n \n #[doc(hidden)];\n \n-use task::TaskBuilder;\n-use task::atomically;\n+use cast;\n+use libc;\n+use oldcomm;\n+use option;\n+use pipes;\n+use ptr;\n+use task;\n+use task::{TaskBuilder, atomically};\n \n extern mod rustrt {\n     #[legacy_exports];"}, {"sha": "f7faeb2b5731ed30f92eb5f7fdb724c3f8255340", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,8 +13,11 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cast;\n use cmp::{Eq, Ord};\n+use libc;\n use libc::{c_void, size_t};\n+use sys;\n \n #[nolink]\n #[abi = \"cdecl\"]"}, {"sha": "651b62d341202d7484a32493efd28dbec3a4a786", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,6 +14,14 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use int;\n+use str;\n+use task;\n+use u32;\n+use uint;\n+use util;\n+use vec;\n+\n #[allow(non_camel_case_types)] // runtime type\n enum rctx {}\n "}, {"sha": "55eb53bc0266a509567fd96a5c39ca35dfe00ee3", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,6 +19,8 @@ Runtime type reflection\n \n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n use libc::c_void;\n+use sys;\n+use vec;\n \n /**\n  * Trait for visitor that wishes to reflect on data. To use this, create a"}, {"sha": "9a597bd814cddaf619b5dfc61cd55587e8bd115f", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,16 +17,31 @@ More runtime type reflection\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-use io::{Writer, WriterUtil};\n-use libc::c_void;\n-use to_str::ToStr;\n use cast::transmute;\n+use cast;\n+use char;\n+use dvec::DVec;\n+use intrinsic;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n+use io;\n+use io::{Writer, WriterUtil};\n+use libc::c_void;\n+use managed;\n+use managed::raw::BoxHeaderRepr;\n+use ptr;\n+use reflect;\n use reflect::{MovePtr, MovePtrAdaptor, align};\n+use repr;\n+use str;\n+use sys;\n+use sys::TypeDesc;\n+use to_str::ToStr;\n+use uint;\n use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n+use vec;\n+\n pub use managed::raw::BoxRepr;\n-use dvec::DVec;\n \n /// Helpers\n "}, {"sha": "539c8394fdfd9b72c00cd62b672cd53b7af41e37", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,8 +15,11 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cmp;\n use cmp::Eq;\n+use either;\n use either::Either;\n+use vec;\n \n /// The result type\n #[deriving_eq]"}, {"sha": "5ad2da4824130658ce22f1c8a3f2de002229856d", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,10 +15,9 @@\n #[forbid(deprecated_pattern)];\n //! Runtime calls emitted by the compiler.\n \n-use libc::c_char;\n-use libc::c_void;\n-use libc::size_t;\n-use libc::uintptr_t;\n+use libc::{c_char, c_void, size_t, uintptr_t};\n+use str;\n+use sys;\n \n use gc::{cleanup_stack_for_failure, gc, Word};\n "}, {"sha": "faa0151903252cf506c77079fed9acf890f11e63", "filename": "src/libcore/run.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,9 +13,18 @@\n #[forbid(deprecated_pattern)];\n \n //! Process spawning\n-use option::{Some, None};\n-use libc::{pid_t, c_void, c_int};\n+use io;\n use io::ReaderUtil;\n+use libc;\n+use libc::{pid_t, c_void, c_int};\n+use oldcomm;\n+use option::{Some, None};\n+use os;\n+use ptr;\n+use run;\n+use str;\n+use task;\n+use vec;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {"}, {"sha": "9159fee30d1eff383fac77398bf1c4f9ae59f42b", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -45,6 +45,12 @@ pub trait SendMap<K:Eq Hash, V: Copy> {\n \n /// Open addressing with linear probing.\n pub mod linear {\n+    use cmp;\n+    use option;\n+    use rand;\n+    use uint;\n+    use vec;\n+\n     const INITIAL_CAPACITY: uint = 32u; // 2^5\n \n     struct Bucket<K:Eq Hash,V> {"}, {"sha": "5ba6c70800106527fa08506c7b330356141df7de", "filename": "src/libcore/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -20,10 +20,19 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use at_vec;\n+use cast;\n+use char;\n use cmp::{Eq, Ord};\n+use libc;\n use libc::size_t;\n use io::WriterUtil;\n+use ptr;\n+use str;\n use to_str::ToStr;\n+use u8;\n+use uint;\n+use vec;\n \n /*\n Section: Creating a string\n@@ -1936,6 +1945,11 @@ pub pure fn escape_unicode(s: &str) -> ~str {\n \n /// Unsafe operations\n pub mod raw {\n+    use cast;\n+    use libc;\n+    use ptr;\n+    use str::raw;\n+    use vec;\n \n     /// Create a Rust string from a null-terminated *u8 buffer\n     pub unsafe fn from_buf(buf: *u8) -> ~str {"}, {"sha": "1d1a3778ef70ea6003ed8b699818cf0eb84db516", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,16 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cast;\n use cmp::{Eq, Ord};\n+use gc;\n+use io;\n+use libc;\n use libc::{c_void, c_char, size_t};\n+use ptr;\n+use repr;\n+use str;\n+use vec;\n \n pub type FreeGlue = fn(*TypeDesc, *c_void);\n "}, {"sha": "b1bf296591955ad83e3bd06ebbb9929f718afec5", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -26,12 +26,8 @@ magic.\n \n */\n \n-use task::local_data_priv::{\n-    local_pop,\n-    local_get,\n-    local_set,\n-    local_modify\n-};\n+use rt;\n+use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n \n /**\n  * Indexes a task-local data slot. The function's code pointer is used for"}, {"sha": "c6b3cfa6626bb56d94d2bad9750a415c72bbd140", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,11 @@\n \n #[doc(hidden)]; // FIXME #3538\n \n+use cast;\n+use dvec;\n+use libc;\n+use option;\n+use task::rt;\n use task::local_data::LocalDataKey;\n \n #[cfg(notest)]"}, {"sha": "2b7da541b1ca15bf89ed86fe7c2cf67876c6d4dc", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -38,11 +38,16 @@\n  * ~~~\n  */\n \n+use cmp;\n use cmp::Eq;\n+use oldcomm;\n+use option;\n use result::Result;\n use pipes::{stream, Chan, Port};\n+use result;\n use task::local_data_priv::{local_get, local_set};\n use task::rt::{task_id, rust_task};\n+use util;\n use util::replace;\n \n mod local_data_priv;"}, {"sha": "e95c6d90eee1babb67b02b4c29bf6e27408a80d5", "filename": "src/libcore/task/rt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Frt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,8 @@ The task interface to the runtime\n \n #[doc(hidden)]; // FIXME #3538\n \n+use libc;\n+\n #[allow(non_camel_case_types)] // runtime type\n pub type sched_id = int;\n #[allow(non_camel_case_types)] // runtime type"}, {"sha": "3ae3eb2e8d4800a968027f9e0813b3f78679b063", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -73,8 +73,16 @@\n #[doc(hidden)]; // FIXME #3538\n #[warn(deprecated_mode)];\n \n+use cast;\n+use option;\n+use private;\n+use ptr;\n+use send_map;\n+use task::rt;\n use task::rt::rust_task;\n use task::rt::rust_closure;\n+use uint;\n+use util;\n \n macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = move *ptr::addr_of(&($x)); move y } )"}, {"sha": "edd69219c3fcda27d6a97b2bb2c550cd2558fd27", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -18,7 +18,9 @@ The `ToBytes` and `IterBytes` traits\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use io;\n use io::Writer;\n+use str;\n \n pub type Cb = fn(buf: &[const u8]) -> bool;\n "}, {"sha": "963901c2c75d84df32c894c8a325fb5dd2711234", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -18,49 +18,52 @@ The `ToStr` trait for converting to strings\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use str;\n+use vec;\n+\n pub trait ToStr { pub pure fn to_str() -> ~str; }\n \n impl int: ToStr {\n-    pure fn to_str() -> ~str { int::str(self) }\n+    pure fn to_str() -> ~str { ::int::str(self) }\n }\n impl i8: ToStr {\n-    pure fn to_str() -> ~str { i8::str(self) }\n+    pure fn to_str() -> ~str { ::i8::str(self) }\n }\n impl i16: ToStr {\n-    pure fn to_str() -> ~str { i16::str(self) }\n+    pure fn to_str() -> ~str { ::i16::str(self) }\n }\n impl i32: ToStr {\n-    pure fn to_str() -> ~str { i32::str(self) }\n+    pure fn to_str() -> ~str { ::i32::str(self) }\n }\n impl i64: ToStr {\n-    pure fn to_str() -> ~str { i64::str(self) }\n+    pure fn to_str() -> ~str { ::i64::str(self) }\n }\n impl uint: ToStr {\n-    pure fn to_str() -> ~str { uint::str(self) }\n+    pure fn to_str() -> ~str { ::uint::str(self) }\n }\n impl u8: ToStr {\n-    pure fn to_str() -> ~str { u8::str(self) }\n+    pure fn to_str() -> ~str { ::u8::str(self) }\n }\n impl u16: ToStr {\n-    pure fn to_str() -> ~str { u16::str(self) }\n+    pure fn to_str() -> ~str { ::u16::str(self) }\n }\n impl u32: ToStr {\n-    pure fn to_str() -> ~str { u32::str(self) }\n+    pure fn to_str() -> ~str { ::u32::str(self) }\n }\n impl u64: ToStr {\n-    pure fn to_str() -> ~str { u64::str(self) }\n+    pure fn to_str() -> ~str { ::u64::str(self) }\n }\n impl float: ToStr {\n-    pure fn to_str() -> ~str { float::to_str(self, 4u) }\n+    pure fn to_str() -> ~str { ::float::to_str(self, 4u) }\n }\n impl f32: ToStr {\n-    pure fn to_str() -> ~str { float::to_str(self as float, 4u) }\n+    pure fn to_str() -> ~str { ::float::to_str(self as float, 4u) }\n }\n impl f64: ToStr {\n-    pure fn to_str() -> ~str { float::to_str(self as float, 4u) }\n+    pure fn to_str() -> ~str { ::float::to_str(self as float, 4u) }\n }\n impl bool: ToStr {\n-    pure fn to_str() -> ~str { bool::to_str(self) }\n+    pure fn to_str() -> ~str { ::bool::to_str(self) }\n }\n impl (): ToStr {\n     pure fn to_str() -> ~str { ~\"()\" }\n@@ -69,10 +72,10 @@ impl ~str: ToStr {\n     pure fn to_str() -> ~str { copy self }\n }\n impl &str: ToStr {\n-    pure fn to_str() -> ~str { str::from_slice(self) }\n+    pure fn to_str() -> ~str { ::str::from_slice(self) }\n }\n impl @str: ToStr {\n-    pure fn to_str() -> ~str { str::from_slice(self) }\n+    pure fn to_str() -> ~str { ::str::from_slice(self) }\n }\n \n impl<A: ToStr Copy, B: ToStr Copy> (A, B): ToStr {"}, {"sha": "c602c19317021f8e02297f0c424926297ce92de1", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,6 +15,7 @@\n //! Operations on tuples\n \n use cmp::{Eq, Ord};\n+use vec;\n \n pub trait CopyableTuple<T, U> {\n     pure fn first() -> T;"}, {"sha": "1f3808fab1b272362656d4535fb45bf50859e612", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,13 @@\n \n use T = self::inst::T;\n \n+use char;\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n+use iter;\n+use num;\n+use str;\n+use vec;\n \n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);"}, {"sha": "fb1762ef300fc4d6078ad28997910d429d2cddba", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,8 @@ pub use self::inst::{\n };\n \n mod inst {\n+    use sys;\n+\n     pub type T = uint;\n \n     #[cfg(target_arch = \"x86\")]"}, {"sha": "2742e5f6e4fa380751879d7aee0cf9d12669a7d6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,20 +14,27 @@\n #[forbid(deprecated_pattern)];\n #[warn(non_camel_case_types)];\n \n+use cast;\n use cmp::{Eq, Ord};\n+use iter;\n+use libc;\n+use libc::size_t;\n use option::{Some, None};\n+use ptr;\n use ptr::addr_of;\n-use libc::size_t;\n+use sys;\n+use uint;\n+use vec;\n \n #[abi = \"cdecl\"]\n-extern mod rustrt {\n+pub extern mod rustrt {\n     fn vec_reserve_shared(++t: *sys::TypeDesc,\n                           ++v: **raw::VecRepr,\n                           ++n: libc::size_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n+pub extern mod rusti {\n     fn move_val_init<T>(dst: &mut T, -src: T);\n     fn init<T>() -> T;\n }\n@@ -1799,6 +1806,11 @@ pub struct UnboxedVecRepr {\n \n /// Unsafe operations\n pub mod raw {\n+    use managed;\n+    use option;\n+    use ptr;\n+    use sys;\n+    use vec::rusti;\n \n     /// The internal representation of a (boxed) vector\n     pub struct VecRepr {\n@@ -1939,6 +1951,10 @@ pub mod raw {\n \n /// Operations on `[u8]`\n pub mod bytes {\n+    use libc;\n+    use uint;\n+    use vec;\n+    use vec::raw;\n \n     /// Bytewise string comparison\n     pub pure fn cmp(a: &~[u8], b: &~[u8]) -> int {"}, {"sha": "a2b67e8380bd025c52a3f1af8844238bf76e67a2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,24 +8,37 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{c_int, c_uint, c_char};\n+use back::rpath;\n use driver::session;\n-use session::Session;\n use lib::llvm::llvm;\n-use syntax::attr;\n-use middle::ty;\n+use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n+use lib::llvm::{PassManagerRef, FileType};\n+use lib;\n+use metadata::common::link_meta;\n+use metadata::filesearch;\n use metadata::{encoder, cstore};\n use middle::trans::common::crate_ctxt;\n-use metadata::common::link_meta;\n+use middle::ty;\n+use session::Session;\n+use session;\n+use util::ppaux;\n+\n+use core::char;\n+use core::cmp;\n+use core::hash;\n+use core::io::{Writer, WriterUtil};\n+use core::libc::{c_int, c_uint, c_char};\n+use core::os;\n+use core::ptr;\n+use core::run;\n+use core::str;\n+use core::vec;\n use std::map::HashMap;\n use std::sha1::sha1;\n use syntax::ast;\n-use syntax::print::pprust;\n-use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n-        PassManagerRef, FileType};\n-use metadata::filesearch;\n use syntax::ast_map::{path, path_mod, path_name};\n-use io::{Writer, WriterUtil};\n+use syntax::attr;\n+use syntax::print::pprust;\n \n enum output_type {\n     output_type_none,\n@@ -65,8 +78,16 @@ fn WriteOutputFile(sess: Session,\n     }\n }\n \n-mod jit {\n+pub mod jit {\n     #[legacy_exports];\n+\n+    use lib::llvm::llvm;\n+    use metadata::cstore;\n+\n+    use core::cast;\n+    use core::ptr;\n+    use core::str;\n+\n     #[nolink]\n     #[abi = \"rust-intrinsic\"]\n     extern mod rusti {\n@@ -133,6 +154,16 @@ mod jit {\n \n mod write {\n     #[legacy_exports];\n+\n+    use back::link::jit;\n+    use driver::session;\n+    use lib::llvm::llvm;\n+    use lib;\n+\n+    use core::char;\n+    use core::str;\n+    use core::vec;\n+\n     fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n                ot == output_type_exe {\n@@ -609,7 +640,7 @@ fn mangle_exported_name(ccx: @crate_ctxt, path: path, t: ty::t) -> ~str {\n fn mangle_internal_name_by_type_only(ccx: @crate_ctxt,\n                                      t: ty::t, name: ~str) ->\n    ~str {\n-    let s = util::ppaux::ty_to_short_str(ccx.tcx, t);\n+    let s = ppaux::ty_to_short_str(ccx.tcx, t);\n     let hash = get_symbol_hash(ccx, t);\n     return mangle(ccx.sess,\n                   ~[path_name(ccx.sess.ident_of(name)),"}, {"sha": "04c653d4a13bed5db50a781ecc5c4fec105f1e58", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,12 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map;\n-use std::map::HashMap;\n-use metadata::cstore;\n use driver::session;\n+use metadata::cstore;\n use metadata::filesearch;\n \n+use core::os;\n+use core::uint;\n+use core::util;\n+use core::vec;\n+use std::map::HashMap;\n+use std::map;\n+\n export get_rpath_flags;\n \n pure fn not_win32(os: session::os) -> bool {\n@@ -116,7 +121,7 @@ fn get_rpath_relative_to_output(os: session::os,\n     let prefix = match os {\n         session::os_linux | session::os_freebsd => \"$ORIGIN\",\n         session::os_macos => \"@executable_path\",\n-        session::os_win32 => core::util::unreachable()\n+        session::os_win32 => util::unreachable()\n     };\n \n     Path(prefix).push_rel(&get_relative_to(&os::make_absolute(output),"}, {"sha": "43f134702cbaa4f127e6b1b99e976daf58f0a1bf", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back::target_strs;\n use driver::session;\n-use session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n+use session::sess_os_to_meta_os;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return {"}, {"sha": "1d459aaa6f3f814f996e523092d54fdd20a20804", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back::target_strs;\n use driver::session;\n-use session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n+use session::sess_os_to_meta_os;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return {"}, {"sha": "12cf35d263302f19bda21392d7e08f5b01e67b2e", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,27 +9,49 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back::link;\n+use back::{x86, x86_64};\n+use front;\n+use lib::llvm::llvm;\n use metadata::{creader, cstore, filesearch};\n-use session::{Session, Session_, OptLevel, No, Less, Default, Aggressive};\n-use syntax::parse;\n-use syntax::{ast, codemap};\n-use syntax::attr;\n+use metadata;\n use middle::{trans, freevars, kind, ty, typeck, lint};\n-use syntax::print::{pp, pprust};\n+use middle;\n+use session::{Session, Session_, OptLevel, No, Less, Default, Aggressive};\n+use session;\n use util::ppaux;\n-use back::link;\n-use result::{Ok, Err};\n-use std::getopts;\n-use std::getopts::{opt_present};\n-use std::getopts::groups;\n+\n+use core::cmp;\n+use core::int;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::option;\n+use core::os;\n+use core::result::{Ok, Err};\n+use core::str;\n+use core::vec;\n use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n-use io::WriterUtil;\n-use back::{x86, x86_64};\n+use std::getopts::groups;\n+use std::getopts::{opt_present};\n+use std::getopts;\n use std::map::HashMap;\n-use lib::llvm::llvm;\n-\n-enum pp_mode {ppm_normal, ppm_expanded, ppm_typed, ppm_identified,\n-              ppm_expanded_identified }\n+use std;\n+use syntax::ast;\n+use syntax::ast_map;\n+use syntax::attr;\n+use syntax::codemap;\n+use syntax::diagnostic;\n+use syntax::parse;\n+use syntax::print::{pp, pprust};\n+use syntax;\n+\n+enum pp_mode {\n+    ppm_normal,\n+    ppm_expanded,\n+    ppm_typed,\n+    ppm_identified,\n+    ppm_expanded_identified\n+}\n \n /**\n  * The name used for source code that doesn't originate in a file"}, {"sha": "58391bbbdd4dfc1aa498bbb933b02340b6300524", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,15 +11,22 @@\n \n use back::link;\n use back::target_strs;\n+use back;\n+use driver;\n+use driver::session;\n use metadata::filesearch;\n+use metadata;\n use middle::lint;\n \n+use core::cmp;\n+use core::option;\n use syntax::ast::node_id;\n use syntax::ast::{int_ty, uint_ty, float_ty};\n use syntax::codemap::span;\n+use syntax::diagnostic;\n use syntax::parse::parse_sess;\n use syntax::{ast, codemap};\n-\n+use syntax;\n \n enum os { os_win32, os_macos, os_linux, os_freebsd, }\n "}, {"sha": "fc1f8d06bb19e8c9b16e69827560e64fc9948171", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,9 @@\n \n use syntax::{ast, fold, attr};\n \n+use core::option;\n+use core::vec;\n+\n export strip_unconfigured_items;\n export metas_in_cfg;\n export strip_items;"}, {"sha": "9575c4695f89228288d46d9def28c34512e0d999", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,13 +9,18 @@\n // except according to those terms.\n \n use driver::session::Session;\n-use syntax::codemap;\n+\n+use core::vec;\n use syntax::ast;\n use syntax::ast_util::*;\n use syntax::attr;\n+use syntax::codemap;\n+use syntax::fold;\n \n export maybe_inject_libcore_ref;\n \n+const CORE_VERSION: &static/str = \"0.6\";\n+\n fn maybe_inject_libcore_ref(sess: Session,\n                             crate: @ast::crate) -> @ast::crate {\n     if use_core(crate) {\n@@ -31,29 +36,56 @@ fn use_core(crate: @ast::crate) -> bool {\n \n fn inject_libcore_ref(sess: Session,\n                       crate: @ast::crate) -> @ast::crate {\n-\n-    fn spanned<T: Copy>(x: T) -> @ast::spanned<T> {\n-        return @{node: x,\n-            span: dummy_sp()};\n+    fn spanned<T: Copy>(x: T) -> ast::spanned<T> {\n+        return {node: x, span: dummy_sp()};\n     }\n \n-    let n1 = sess.next_node_id();\n-    let n2 = sess.next_node_id();\n-\n-    let vi1 = @{node: ast::view_item_use(sess.ident_of(~\"core\"), ~[], n1),\n-                attrs: ~[],\n-                vis: ast::private,\n-                span: dummy_sp()};\n-    let vp = spanned(ast::view_path_glob(\n-        ident_to_path(dummy_sp(), sess.ident_of(~\"core\")),\n-        n2));\n-    let vi2 = @{node: ast::view_item_import(~[vp]),\n-                attrs: ~[],\n-                vis: ast::private,\n-                span: dummy_sp()};\n-\n-    let vis = vec::append(~[vi1, vi2], crate.node.module.view_items);\n-\n-    return @{node: {module: { view_items: vis,.. crate.node.module },\n-                 .. crate.node},.. *crate }\n+    let precursor = @{\n+        fold_crate: |crate, span, fld| {\n+            let n1 = sess.next_node_id();\n+            let vi1 = @{node: ast::view_item_use(sess.ident_of(~\"core\"),\n+                                                 ~[],\n+                                                 n1),\n+                        attrs: ~[\n+                            spanned({\n+                                style: ast::attr_inner,\n+                                value: spanned(ast::meta_name_value(\n+                                    ~\"vers\",\n+                                    spanned(ast::lit_str(\n+                                        @CORE_VERSION.to_str()))\n+                                )),\n+                                is_sugared_doc: false\n+                            })\n+                        ],\n+                        vis: ast::private,\n+                        span: dummy_sp()};\n+\n+            let vis = vec::append(~[vi1], crate.module.view_items);\n+            let mut new_module = { view_items: vis, ..crate.module };\n+            new_module = fld.fold_mod(new_module);\n+\n+            let new_crate = { module: new_module, ..crate };\n+            (new_crate, span)\n+        },\n+        fold_mod: |module, fld| {\n+            let n2 = sess.next_node_id();\n+\n+            let vp = @spanned(\n+                ast::view_path_glob(ident_to_path(dummy_sp(),\n+                                                  sess.ident_of(~\"core\")),\n+                                    n2));\n+            let vi2 = @{node: ast::view_item_import(~[vp]),\n+                        attrs: ~[],\n+                        vis: ast::private,\n+                        span: dummy_sp()};\n+\n+            let vis = vec::append(~[vi2], module.view_items);\n+            let new_module = { view_items: vis, ..module };\n+            fold::noop_fold_mod(new_module, fld)\n+        },\n+        ..*fold::default_ast_fold()\n+    };\n+\n+    let fold = fold::make_fold(precursor);\n+    @fold.fold_crate(*crate)\n }"}, {"sha": "e8b15ac1c1f60bfb47aa282c4aa91568febcca68", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,11 +12,11 @@ use driver::session::Session;\n use syntax::parse;\n use syntax::ast;\n \n-export inject_intrinsic;\n+use core::vec;\n \n-fn inject_intrinsic(sess: Session,\n-                    crate: @ast::crate) -> @ast::crate {\n+export inject_intrinsic;\n \n+fn inject_intrinsic(sess: Session, crate: @ast::crate) -> @ast::crate {\n     let intrinsic_module = @(include_str!(\"intrinsic.rs\").to_owned());\n \n     let item = parse::parse_item_from_source_str(~\"<intrinsic>\","}, {"sha": "a699b91f444e70fd60466202543d618adfd5b480", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,16 +10,19 @@\n \n // Code that generates a test runner to run all the tests in a crate\n \n-use syntax::{ast, ast_util};\n-use syntax::ast_util::*;\n-//import syntax::ast_util::dummy_sp;\n-use syntax::fold;\n-use syntax::print::pprust;\n-use syntax::codemap::span;\n use driver::session;\n+use front::config;\n use session::Session;\n+\n+use core::dvec::DVec;\n+use core::option;\n+use core::vec;\n+use syntax::ast_util::*;\n use syntax::attr;\n-use dvec::DVec;\n+use syntax::codemap::span;\n+use syntax::fold;\n+use syntax::print::pprust;\n+use syntax::{ast, ast_util};\n \n export modify_for_testing;\n "}, {"sha": "dbfe31223882675d4213c40dc1ed363f481edca6", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,12 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cast;\n+use core::cmp;\n+use core::int;\n+use core::io;\n+use core::libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n+use core::option;\n+use core::ptr;\n+use core::str;\n+use core::uint;\n+use core::vec;\n use std::map::HashMap;\n \n-use libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n-\n type Opcode = u32;\n type Bool = c_uint;\n+\n const True: Bool = 1 as Bool;\n const False: Bool = 0 as Bool;\n \n@@ -1058,8 +1067,8 @@ fn SetLinkage(Global: ValueRef, Link: Linkage) {\n \n /* Memory-managed object interface to type handles. */\n \n-type type_names = @{type_names: std::map::HashMap<TypeRef, ~str>,\n-                    named_types: std::map::HashMap<~str, TypeRef>};\n+type type_names = @{type_names: HashMap<TypeRef, ~str>,\n+                    named_types: HashMap<~str, TypeRef>};\n \n fn associate_type(tn: type_names, s: ~str, t: TypeRef) {\n     assert tn.type_names.insert(t, s);\n@@ -1075,8 +1084,8 @@ fn name_has_type(tn: type_names, s: ~str) -> Option<TypeRef> {\n }\n \n fn mk_type_names() -> type_names {\n-    @{type_names: std::map::HashMap(),\n-      named_types: std::map::HashMap()}\n+    @{type_names: HashMap(),\n+      named_types: HashMap()}\n }\n \n fn type_to_str(names: type_names, ty: TypeRef) -> ~str {"}, {"sha": "8a4aa78fe44d5bd7b867d1b27dd88a7d36816d4f", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,25 +10,36 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use syntax::diagnostic::span_handler;\n-use syntax::{ast, ast_util};\n+use metadata::cstore;\n+use metadata::common::*;\n+use metadata::decoder;\n+use metadata::filesearch::FileSearch;\n+use metadata::loader;\n+\n+use core::dvec::DVec;\n+use core::either;\n+use core::option;\n+use core::vec;\n use syntax::attr;\n-use syntax::visit;\n use syntax::codemap::span;\n-use std::map::HashMap;\n-use syntax::print::pprust;\n-use metadata::filesearch::FileSearch;\n-use metadata::common::*;\n-use dvec::DVec;\n+use syntax::diagnostic::span_handler;\n use syntax::parse::token::ident_interner;\n+use syntax::print::pprust;\n+use syntax::visit;\n+use syntax::{ast, ast_util};\n+use std::map::HashMap;\n \n export read_crates;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n-fn read_crates(diag: span_handler, crate: ast::crate,\n-               cstore: cstore::CStore, filesearch: FileSearch,\n-               os: loader::os, static: bool, intr: @ident_interner) {\n+fn read_crates(diag: span_handler,\n+               crate: ast::crate,\n+               cstore: cstore::CStore,\n+               filesearch: FileSearch,\n+               os: loader::os,\n+               static: bool,\n+               intr: @ident_interner) {\n     let e = @{diag: diag,\n               filesearch: filesearch,\n               cstore: cstore,"}, {"sha": "a497597796e8662993a87b6d07419b09edf5171b", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,10 +11,13 @@\n // Searching for information from the cstore\n \n use metadata::common::*;\n+use metadata::cstore;\n+use metadata::decoder;\n+use metadata;\n use middle::ty;\n \n use core::dvec::DVec;\n-use core::option::{Some, None};\n+use core::vec;\n use reader = std::ebml::reader;\n use std::ebml;\n use std::map::HashMap;"}, {"sha": "212f955833169b3fa2efe27243ef998fb1c358e3", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,8 +11,16 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use std::map;\n+use metadata::creader;\n+use metadata::cstore;\n+use metadata::decoder;\n+\n+use core::option;\n+use core::str;\n+use core::vec;\n use std::map::HashMap;\n+use std::map;\n+use std;\n use syntax::{ast, attr};\n use syntax::parse::token::ident_interner;\n "}, {"sha": "294e34248bcc8c81db8d6fbcd54663def77d46e9", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,12 +16,22 @@ use hash::{Hash, HashUtil};\n use io::WriterUtil;\n use metadata::common::*;\n use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n+use metadata::csearch;\n+use metadata::cstore;\n+use metadata::decoder;\n use metadata::tydecode::{parse_ty_data, parse_def_id, parse_bounds_data};\n use metadata::tydecode::{parse_ident};\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use reader = std::ebml::reader;\n+use core::cmp;\n+use core::dvec;\n+use core::int;\n+use core::io;\n+use core::option;\n+use core::str;\n+use core::vec;\n+use std::ebml::reader;\n use std::ebml;\n use std::map::HashMap;\n use std::map;"}, {"sha": "d44b47593ba6ebfdbc0d5d3dabd5b214874c8a33", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,28 +10,42 @@\n \n // Metadata encoding\n \n+use metadata::common::*;\n+use metadata::csearch;\n+use metadata::cstore;\n+use metadata::decoder;\n+use metadata::tyencode;\n+use middle::resolve;\n+use middle::ty::node_id_to_type;\n+use middle::ty;\n+use middle;\n use util::ppaux::ty_to_str;\n \n-use std::{ebml, map};\n+use core::dvec;\n+use core::flate;\n+use core::float;\n+use core::hash::{Hash, HashUtil};\n+use core::int;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::str::to_bytes;\n+use core::str;\n+use core::to_bytes::IterBytes;\n+use core::uint;\n+use core::vec;\n use std::map::HashMap;\n-use io::WriterUtil;\n-use writer = std::ebml::writer;\n+use std::{ebml, map};\n+use std;\n use syntax::ast::*;\n-use syntax::print::pprust;\n-use syntax::{ast_util, visit};\n-use syntax::ast_util::*;\n-use metadata::common::*;\n-use middle::ty;\n-use middle::ty::node_id_to_type;\n-use middle::resolve;\n+use syntax::ast;\n use syntax::ast_map;\n+use syntax::ast_util::*;\n use syntax::attr;\n-use str::to_bytes;\n-use syntax::ast;\n use syntax::diagnostic::span_handler;\n-\n-use hash::{Hash, HashUtil};\n-use to_bytes::IterBytes;\n+use syntax::print::pprust;\n+use syntax::{ast_util, visit};\n+use syntax;\n+use writer = std::ebml::writer;\n \n export encode_parms;\n export encode_metadata;\n@@ -458,7 +472,7 @@ fn encode_info_for_ctor(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n         let its_ty = node_id_to_type(ecx.tcx, id);\n         debug!(\"fn name = %s ty = %s its node id = %d\",\n                ecx.tcx.sess.str_of(ident),\n-               util::ppaux::ty_to_str(ecx.tcx, its_ty), id);\n+               ty_to_str(ecx.tcx, its_ty), id);\n         encode_type(ecx, ebml_w, its_ty);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(ident));\n         match item {"}, {"sha": "a9f8a485c5c7db197d4bb9581b788d983cb01031", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,7 +12,12 @@\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore.\n \n-use result::Result;\n+use core::option;\n+use core::os;\n+use core::result::Result;\n+use core::result;\n+use core::str;\n+\n export FileSearch;\n export mk_filesearch;\n export pick;"}, {"sha": "e75329340c2feb7a10d84c271e004936dfe12801", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,14 +10,26 @@\n \n //! Finds crate binaries and loads their metadata\n \n-use syntax::diagnostic::span_handler;\n-use syntax::{ast, attr};\n-use syntax::print::pprust;\n-use syntax::codemap::span;\n use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n+use metadata::decoder;\n+use metadata::encoder;\n use metadata::filesearch::FileSearch;\n-use io::WriterUtil;\n+use metadata::filesearch;\n+use syntax::codemap::span;\n+use syntax::diagnostic::span_handler;\n use syntax::parse::token::ident_interner;\n+use syntax::print::pprust;\n+use syntax::{ast, attr};\n+\n+use core::cast;\n+use core::flate;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::option;\n+use core::ptr;\n+use core::str;\n+use core::uint;\n+use core::vec;\n \n export os;\n export os_macos, os_win32, os_linux, os_freebsd;"}, {"sha": "8c4eba2b75ea9c17c7788921c149b8e389979a47", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,10 @@\n use middle::ty;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n \n+use core::io;\n+use core::str;\n+use core::uint;\n+use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_util;"}, {"sha": "07838bcb1aa57c0e61edaaa91fbcfdfdb8e03af4", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,12 +10,16 @@\n \n // Type encoding\n \n-use io::WriterUtil;\n+use middle::ty;\n+use middle::ty::vid;\n+\n+use core::io::WriterUtil;\n+use core::io;\n+use core::uint;\n+use core::vec;\n use std::map::HashMap;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n-use middle::ty;\n-use middle::ty::vid;\n use syntax::print::pprust::*;\n \n export ctxt;"}, {"sha": "815b91f6e7c32f5c5bf40f72259f6e774d228349", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -20,10 +20,12 @@ use middle::freevars::freevar_entry;\n use middle::typeck::{method_origin, method_map_entry, vtable_res};\n use middle::typeck::{vtable_origin};\n use middle::{ty, typeck};\n+use middle;\n use util::ppaux::ty_to_str;\n \n-use reader = std::ebml::reader;\n+use core::{dvec, option, vec};\n use std::ebml::reader::get_doc;\n+use std::ebml::reader;\n use std::ebml::writer::Encoder;\n use std::ebml;\n use std::map::HashMap;\n@@ -41,6 +43,7 @@ use syntax::fold;\n use syntax::parse;\n use syntax::print::pprust;\n use syntax::visit;\n+use syntax;\n use writer = std::ebml::writer;\n \n export maps;"}, {"sha": "43a2c6edaba717b1f1931850aba39949ca28c3e5", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -18,8 +18,16 @@\n // 4. moves to dnot affect things loaned out in any way\n \n use middle::ty::{CopyValue, MoveValue, ReadValue};\n-\n-use dvec::DVec;\n+use middle::ty;\n+\n+use core::cmp;\n+use core::dvec::DVec;\n+use core::uint;\n+use core::vec;\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::print::pprust;\n+use syntax::visit;\n \n export check_loans;\n "}, {"sha": "8cff25640cb0ae063d3f1fb53598afc41b3e8339", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,11 +16,18 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use middle::mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n use middle::borrowck::preserve::{preserve_condition, pc_ok, pc_if_pure};\n+use middle::mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n+use middle::pat_util;\n use middle::ty::{ty_region};\n+use middle::ty;\n \n+use core::dvec;\n use core::send_map::linear::LinearMap;\n+use core::vec;\n+use syntax::ast;\n+use syntax::print::pprust;\n+use syntax::visit;\n \n export gather_loans;\n "}, {"sha": "c79a733e92d4619c433ef936b753be37beacdd3f", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,8 +12,12 @@\n // Loan(Ex, M, S) = Ls holds if ToAddr(Ex) will remain valid for the entirety\n // of the scope S, presuming that the returned set of loans `Ls` are honored.\n \n+use middle::ty;\n+\n+use core::result::{Result, Ok, Err};\n+use syntax::ast;\n+\n export public_methods;\n-use result::{Result, Ok, Err};\n \n impl borrowck_ctxt {\n     fn loan(cmt: cmt,"}, {"sha": "19b22931a1c00cb44f97969f5ffe9a6db3cd7d59", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -226,13 +226,18 @@ Borrowck results in two maps.\n \n #[legacy_exports];\n \n+use middle::liveness;\n use middle::mem_categorization::*;\n+use middle::region;\n use middle::ty::to_str;\n+use middle::ty;\n use util::common::indenter;\n use util::ppaux::{expr_repr, note_and_explain_region};\n use util::ppaux::{ty_to_str, region_to_str, explain_region};\n \n+use core::cmp;\n use core::dvec::DVec;\n+use core::io;\n use core::result::{Result, Ok, Err};\n use std::list::{List, Cons, Nil};\n use std::list;\n@@ -333,7 +338,7 @@ type root_map_key = {id: ast::node_id, derefs: uint};\n \n // set of ids of local vars / formal arguments that are modified / moved.\n // this is used in trans for optimization purposes.\n-type mutbl_map = std::map::HashMap<ast::node_id, ()>;\n+type mutbl_map = HashMap<ast::node_id, ()>;\n \n // Errors that can occur\"]\n enum bckerr_code {"}, {"sha": "af2832cf11ee1aed844d37e02b37ce84eee652fa", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,6 +13,10 @@\n // the scope S.\n //\n \n+use middle::ty;\n+\n+use syntax::ast;\n+\n export public_methods, preserve_condition, pc_ok, pc_if_pure;\n \n enum preserve_condition {"}, {"sha": "8a498c1935b4c6809459371fc7ad8818cd9a4731", "filename": "src/librustc/middle/capture.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcapture.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,10 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::{ast, ast_util};\n-use syntax::codemap::span;\n-use std::map;\n+use middle::freevars;\n+use middle::ty;\n+\n+use core::option;\n+use core::vec;\n use std::map::HashMap;\n+use std::map;\n+use syntax::codemap::span;\n+use syntax::{ast, ast_util};\n \n export capture_mode;\n export capture_var;"}, {"sha": "e87d83c9c15611671e01d8ffd8c78169fd2eb59b", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,13 +16,18 @@ use middle::ty;\n use middle::typeck::method_map;\n use util::ppaux::ty_to_str;\n \n+use core::cmp;\n+use core::option;\n+use core::uint;\n+use core::vec;\n use std::map::HashMap;\n+use std::sort;\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat, walk_pat};\n+use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n use syntax::visit;\n-use std::sort;\n \n struct AltCheckCtxt {\n     tcx: ty::ctxt,\n@@ -470,7 +475,7 @@ fn ctor_arity(cx: @AltCheckCtxt, ctor: ctor, ty: ty::t) -> uint {\n }\n \n fn wild() -> @pat {\n-    @{id: 0, node: pat_wild, span: syntax::ast_util::dummy_sp()}\n+    @{id: 0, node: pat_wild, span: ast_util::dummy_sp()}\n }\n \n fn specialize(cx: @AltCheckCtxt, r: ~[@pat], ctor_id: ctor, arity: uint,"}, {"sha": "f7fa5c60b2f914fa0e2b13c3dba0a9e5c56fd2a7", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast::*;\n-use syntax::{visit, ast_util, ast_map};\n use driver::session::Session;\n+use middle::resolve;\n+use middle::ty;\n+use middle::typeck;\n+use util::ppaux;\n+\n+use core::dvec::DVec;\n+use core::option;\n use std::map::HashMap;\n-use dvec::DVec;\n+use syntax::ast::*;\n+use syntax::{visit, ast_util, ast_map};\n \n fn check_crate(sess: Session, crate: @crate, ast_map: ast_map::map,\n                def_map: resolve::DefMap,\n@@ -88,7 +94,7 @@ fn check_expr(sess: Session, def_map: resolve::DefMap,\n             let ety = ty::expr_ty(tcx, e);\n             if !ty::type_is_numeric(ety) {\n                 sess.span_err(e.span, ~\"can not cast to `\" +\n-                              util::ppaux::ty_to_str(tcx, ety) +\n+                              ppaux::ty_to_str(tcx, ety) +\n                               ~\"` in a constant expression\");\n             }\n           }"}, {"sha": "d96d29f68359663b87d87ac6f9593f7e6104fb53", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n+\n use syntax::ast::*;\n use syntax::visit;\n "}, {"sha": "ec498c18d897c15950f939c70c985d70c1f104a9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::resolve;\n+use middle::ty;\n+use middle;\n+\n+use core::cmp;\n+use core::float;\n+use core::vec;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n "}, {"sha": "3cd82a8ed2ae14dcdf6bfe604013e6c6cf99fb15", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,11 +11,16 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-use syntax::print::pprust::path_to_str;\n+use middle::resolve;\n+use middle::ty;\n+\n+use core::int;\n+use core::option::*;\n+use core::vec;\n use std::map::*;\n-use option::*;\n-use syntax::{ast, ast_util, visit};\n use syntax::codemap::span;\n+use syntax::print::pprust::path_to_str;\n+use syntax::{ast, ast_util, visit};\n \n export annotate_freevars;\n export freevar_map;"}, {"sha": "36a1fe62c58983d814980fc0d719c16061718a60", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,11 +9,20 @@\n // except according to those terms.\n \n use middle::freevars::freevar_entry;\n+use middle::freevars;\n use middle::lint::{non_implicitly_copyable_typarams, implicit_copies};\n+use middle::liveness;\n+use middle::pat_util;\n use middle::ty::{CopyValue, MoveValue, ReadValue};\n use middle::ty::{Kind, kind_copyable, kind_noncopyable, kind_const};\n+use middle::ty;\n+use middle::typeck;\n+use middle;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n+use core::option;\n+use core::str;\n+use core::vec;\n use std::map::HashMap;\n use syntax::ast::*;\n use syntax::codemap::span;\n@@ -71,7 +80,7 @@ fn kind_to_str(k: Kind) -> ~str {\n     str::connect(kinds, ~\" \")\n }\n \n-type rval_map = std::map::HashMap<node_id, ()>;\n+type rval_map = HashMap<node_id, ()>;\n \n type ctx = {tcx: ty::ctxt,\n             method_map: typeck::method_map,"}, {"sha": "9bfd87923a86d2bec543952a27fd81449a79b921", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -29,6 +29,7 @@ use syntax::ast_util::{local_def};\n use syntax::visit::{default_simple_visitor, mk_simple_visitor};\n use syntax::visit::{visit_crate, visit_item};\n \n+use core::ptr;\n use std::map::HashMap;\n use str_eq = str::eq;\n "}, {"sha": "ad15e07673ea3addeba42b128b73759a08532e34", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,19 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::session;\n use driver::session::Session;\n+use driver::session;\n+use middle::pat_util::{pat_bindings};\n use middle::ty;\n-use syntax::{ast, ast_util, visit};\n-use syntax::attr;\n-use syntax::codemap::span;\n-use std::map::{Map,HashMap};\n-use std::smallintmap::{Map,SmallIntMap};\n-use io::WriterUtil;\n use util::ppaux::{ty_to_str};\n-use middle::pat_util::{pat_bindings};\n+\n+use core::char;\n+use core::cmp;\n+use core::either;\n+use core::i8;\n+use core::i16;\n+use core::i32;\n+use core::i64;\n+use core::int;\n+use core::io::WriterUtil;\n+use core::str;\n+use core::u8;\n+use core::u16;\n+use core::u32;\n+use core::u64;\n+use core::uint;\n+use core::vec;\n+use std::map::{Map, HashMap};\n+use std::map;\n+use std::smallintmap::{Map, SmallIntMap};\n+use std::smallintmap;\n use syntax::ast_util::{path_to_ident};\n+use syntax::attr;\n+use syntax::codemap::span;\n use syntax::print::pprust::{expr_to_str, mode_to_str, pat_to_str};\n+use syntax::{ast, ast_util, visit};\n+\n export lint, ctypes, unused_imports, while_true, path_statement, old_vecs;\n export unrecognized_lint, non_implicitly_copyable_typarams;\n export vecs_implicitly_copyable, implicit_copies, legacy_modes;\n@@ -226,7 +245,7 @@ fn get_lint_dict() -> lint_dict {\n            default: warn}),\n         */\n     ];\n-    std::map::hash_from_vec(v)\n+    map::hash_from_vec(v)\n }\n \n // This is a highly not-optimal set of data structure decisions.\n@@ -242,7 +261,7 @@ type lint_settings = {\n };\n \n fn mk_lint_settings() -> lint_settings {\n-    {default_settings: std::smallintmap::mk(),\n+    {default_settings: smallintmap::mk(),\n      settings_map: HashMap()}\n }\n \n@@ -266,7 +285,7 @@ fn get_lint_settings_level(settings: lint_settings,\n // This is kind of unfortunate. It should be somewhere else, or we should use\n // a persistent data structure...\n fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n-    std::smallintmap::SmallIntMap_(@{v: copy modes.v})\n+    smallintmap::SmallIntMap_(@{v: copy modes.v})\n }\n \n type ctxt_ = {dict: lint_dict,\n@@ -386,7 +405,7 @@ fn build_settings_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n fn build_settings_crate(sess: session::Session, crate: @ast::crate) {\n \n     let cx = ctxt_({dict: get_lint_dict(),\n-                    curr: std::smallintmap::mk(),\n+                    curr: smallintmap::mk(),\n                     is_default: true,\n                     sess: sess});\n "}, {"sha": "da1f82a33b7596a622587411ba739b9e36c8b289", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -103,10 +103,20 @@\n  */\n \n use middle::capture::{cap_move, cap_drop, cap_copy, cap_ref};\n+use middle::capture;\n+use middle::pat_util;\n use middle::ty::MoveValue;\n+use middle::ty;\n+use middle::typeck;\n \n+use core::cmp;\n use core::dvec::DVec;\n use core::io::WriterUtil;\n+use core::io;\n+use core::ptr;\n+use core::to_str;\n+use core::uint;\n+use core::vec;\n use std::map::HashMap;\n use syntax::ast::*;\n use syntax::codemap::span;\n@@ -414,7 +424,7 @@ impl IrMaps {\n fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n             sp: span, id: node_id, &&self: @IrMaps, v: vt<@IrMaps>) {\n     debug!(\"visit_fn: id=%d\", id);\n-    let _i = util::common::indenter();\n+    let _i = ::util::common::indenter();\n \n     // swap in a new set of IR maps for this function body:\n     let fn_maps = @IrMaps(self.tcx, self.method_map,"}, {"sha": "04c57025157ab0bfd571bf7a6124c91bb00a81a9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -46,12 +46,18 @@\n  * then an index to jump forward to the relevant item.\n  */\n \n-use syntax::ast;\n+use middle::ty;\n+use middle::typeck;\n+use util::ppaux::{ty_to_str, region_to_str};\n+use util::common::indenter;\n+\n+use core::cmp;\n+use core::to_bytes;\n+use core::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n+use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust;\n-use util::ppaux::{ty_to_str, region_to_str};\n-use util::common::indenter;\n \n enum categorization {\n     cat_rvalue,                     // result of eval'ing some misc expr"}, {"sha": "9677c517094abfa44e9bf9ff6c61536009dec59f", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::resolve;\n use middle::ty::{CopyValue, MoveValue, ReadValue};\n+use middle::ty;\n \n use syntax::ast::*;\n use syntax::ast_util;\n@@ -23,12 +25,12 @@ export pat_is_variant_or_struct, pat_is_binding, pat_is_binding_or_wild;\n export pat_is_const;\n export arms_have_by_move_bindings;\n \n-type PatIdMap = std::map::HashMap<ident, node_id>;\n+type PatIdMap = HashMap<ident, node_id>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern.\n fn pat_id_map(dm: resolve::DefMap, pat: @pat) -> PatIdMap {\n-    let map = std::map::HashMap();\n+    let map = HashMap();\n     do pat_bindings(dm, pat) |_bm, p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n     };"}, {"sha": "b9f70bd4d3326f5e4ed2ed4e61ca1cdf79e280ae", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,21 +12,22 @@\n // outside their scopes.\n \n use middle::ty::{ty_struct, ty_enum};\n+use middle::ty;\n use middle::typeck::{method_map, method_origin, method_param, method_self};\n use middle::typeck::{method_static, method_trait};\n-use /*mod*/ syntax::ast;\n-use /*mod*/ syntax::visit;\n-use syntax::ast_map;\n+\n+use core::dvec::DVec;\n+use core::util::ignore;\n use syntax::ast::{def_variant, expr_field, expr_method_call, expr_struct};\n use syntax::ast::{expr_unary, ident, item_struct, item_enum, item_impl};\n use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n use syntax::ast::{provided, required};\n+use syntax::ast;\n use syntax::ast_map::{node_item, node_method};\n+use syntax::ast_map;\n use syntax::ast_util::{Private, Public, has_legacy_export_attr, is_local};\n use syntax::ast_util::{visibility_to_privacy};\n-\n-use core::util::ignore;\n-use dvec::DVec;\n+use syntax::visit;\n \n fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     let privileged_items = @DVec();"}, {"sha": "11dde31ab393ad02512f861d84e88814ae468f5a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,11 +19,14 @@ region parameterized.\n \n use driver::session::Session;\n use metadata::csearch;\n+use middle::resolve;\n use middle::ty::{region_variance, rv_covariant, rv_invariant};\n use middle::ty::{rv_contravariant};\n use middle::ty;\n \n+use core::cmp;\n use core::dvec::DVec;\n+use core::vec;\n use std::list;\n use std::list::list;\n use std::map::HashMap;\n@@ -564,7 +567,7 @@ impl determine_rp_ctxt {\n         self.item_id = item_id;\n         self.anon_implies_rp = anon_implies_rp;\n         debug!(\"with_item_id(%d, %b)\", item_id, anon_implies_rp);\n-        let _i = util::common::indenter();\n+        let _i = ::util::common::indenter();\n         f();\n         self.item_id = old_item_id;\n         self.anon_implies_rp = old_anon_implies_rp;"}, {"sha": "acaf668969c631c3f5197309eeed7b3c3fed588d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 253, "deletions": 100, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,10 @@ use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n use middle::pat_util::{pat_bindings};\n+\n+use core::cmp;\n+use core::str;\n+use core::vec;\n use syntax::ast::{_mod, add, arm, binding_mode, bitand, bitor, bitxor, blk};\n use syntax::ast::{capture_clause};\n use syntax::ast::{crate, crate_num, decl_item, def, def_arg, def_binding};\n@@ -35,16 +39,16 @@ use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n use syntax::ast::{gt, ident, impure_fn, inherited, item, item_struct};\n use syntax::ast::{item_const, item_enum, item_fn, item_foreign_mod};\n use syntax::ast::{item_impl, item_mac, item_mod, item_trait, item_ty, le};\n-use syntax::ast::{local, local_crate, lt, method, mode, module_ns, mul, ne};\n-use syntax::ast::{neg, node_id, pat, pat_enum, pat_ident, path, prim_ty};\n-use syntax::ast::{pat_box, pat_lit, pat_range, pat_rec, pat_struct};\n-use syntax::ast::{pat_tup, pat_uniq, pat_wild, private, provided, public};\n-use syntax::ast::{required, rem, self_ty_, shl, shr, stmt_decl, struct_dtor};\n-use syntax::ast::{struct_field, struct_variant_kind, sty_by_ref, sty_static};\n-use syntax::ast::{subtract, trait_ref, tuple_variant_kind, Ty, ty_bool};\n-use syntax::ast::{ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16};\n-use syntax::ast::{ty_i32, ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str};\n-use syntax::ast::{ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n+use syntax::ast::{local, local_crate, lt, method, mode, module_ns, mul};\n+use syntax::ast::{named_field, ne, neg, node_id, pat, pat_enum, pat_ident};\n+use syntax::ast::{path, pat_box, pat_lit, pat_range, pat_rec, pat_struct};\n+use syntax::ast::{pat_tup, pat_uniq, pat_wild, prim_ty, private, provided};\n+use syntax::ast::{public, required, rem, self_ty_, shl, shr, stmt_decl};\n+use syntax::ast::{struct_dtor, struct_field, struct_variant_kind, sty_by_ref};\n+use syntax::ast::{sty_static, subtract, trait_ref, tuple_variant_kind, Ty};\n+use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n+use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, ty_param, ty_path};\n+use syntax::ast::{ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n use syntax::ast::{type_value_ns, ty_param_bound, unnamed_field};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n@@ -54,6 +58,8 @@ use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private, visibility_to_privacy};\n use syntax::ast_util::has_legacy_export_attr;\n use syntax::attr::{attr_metas, contains_name};\n+use syntax::parse::token::ident_interner;\n+use syntax::parse::token::special_idents;\n use syntax::print::pprust::{pat_to_str, path_to_str};\n use syntax::codemap::span;\n use syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n@@ -66,7 +72,6 @@ use dvec::DVec;\n use option::{Some, get, is_some, is_none};\n use str::{connect, split_str};\n use vec::pop;\n-use syntax::parse::token::ident_interner;\n \n use std::list::{Cons, List, Nil};\n use std::map::HashMap;\n@@ -317,9 +322,14 @@ enum UseLexicalScopeFlag {\n     UseLexicalScope\n }\n \n-struct ModulePrefixResult {\n-    result: ResolveResult<@Module>,\n-    prefix_len: uint\n+enum SearchThroughModulesFlag {\n+    DontSearchThroughModules,\n+    SearchThroughModules\n+}\n+\n+enum ModulePrefixResult {\n+    NoPrefixFound,\n+    PrefixFound(@Module, uint)\n }\n \n impl XrayFlag : cmp::Eq {\n@@ -475,10 +485,19 @@ enum ParentLink {\n     BlockParentLink(@Module, node_id)\n }\n \n+/// The type of module this is.\n+enum ModuleKind {\n+    NormalModuleKind,\n+    ExternModuleKind,\n+    TraitModuleKind,\n+    AnonymousModuleKind,\n+}\n+\n /// One node in the tree of modules.\n struct Module {\n     parent_link: ParentLink,\n     mut def_id: Option<def_id>,\n+    kind: ModuleKind,\n \n     children: HashMap<ident,@NameBindings>,\n     imports: DVec<@ImportDirective>,\n@@ -527,10 +546,12 @@ struct Module {\n \n fn Module(parent_link: ParentLink,\n           def_id: Option<def_id>,\n+          kind: ModuleKind,\n           legacy_exports: bool) -> Module {\n     Module {\n         parent_link: parent_link,\n         def_id: def_id,\n+        kind: kind,\n         children: HashMap(),\n         imports: DVec(),\n         anonymous_children: HashMap(),\n@@ -589,10 +610,11 @@ impl NameBindings {\n     fn define_module(privacy: Privacy,\n                      parent_link: ParentLink,\n                      def_id: Option<def_id>,\n+                     kind: ModuleKind,\n                      legacy_exports: bool,\n                      sp: span) {\n         // Merges the module with the existing type def or creates a new one.\n-        let module_ = @Module(parent_link, def_id, legacy_exports);\n+        let module_ = @Module(parent_link, def_id, kind, legacy_exports);\n         match self.type_def {\n             None => {\n                 self.type_def = Some(TypeNsDef {\n@@ -794,6 +816,7 @@ fn Resolver(session: Session, lang_items: LanguageItems,\n     (*graph_root).define_module(Public,\n                                 NoParentLink,\n                                 Some({ crate: 0, node: 0 }),\n+                                NormalModuleKind,\n                                 has_legacy_export_attr(crate.node.attrs),\n                                 crate.span);\n \n@@ -824,7 +847,7 @@ fn Resolver(session: Session, lang_items: LanguageItems,\n         xray_context: NoXray,\n         current_trait_refs: None,\n \n-        self_ident: syntax::parse::token::special_idents::self_,\n+        self_ident: special_idents::self_,\n         primitive_type_table: @PrimitiveTypeTable(session.\n                                                   parse_sess.interner),\n \n@@ -1111,8 +1134,12 @@ impl Resolver {\n \n                 let parent_link = self.get_parent_link(new_parent, ident);\n                 let def_id = { crate: 0, node: item.id };\n-                (*name_bindings).define_module(privacy, parent_link,\n-                                               Some(def_id), legacy, sp);\n+                (*name_bindings).define_module(privacy,\n+                                               parent_link,\n+                                               Some(def_id),\n+                                               NormalModuleKind,\n+                                               legacy,\n+                                               sp);\n \n                 let new_parent =\n                     ModuleReducedGraphParent((*name_bindings).get_module());\n@@ -1134,6 +1161,7 @@ impl Resolver {\n                         (*name_bindings).define_module(privacy,\n                                                        parent_link,\n                                                        Some(def_id),\n+                                                       ExternModuleKind,\n                                                        legacy,\n                                                        sp);\n \n@@ -1251,8 +1279,12 @@ impl Resolver {\n                         let parent_link = self.get_parent_link(new_parent,\n                                                                ident);\n                         let def_id = local_def(item.id);\n-                        name_bindings.define_module(privacy, parent_link,\n-                                                    Some(def_id), false, sp);\n+                        name_bindings.define_module(privacy,\n+                                                    parent_link,\n+                                                    Some(def_id),\n+                                                    TraitModuleKind,\n+                                                    false,\n+                                                    sp);\n \n                         let new_parent = ModuleReducedGraphParent(\n                             name_bindings.get_module());\n@@ -1313,6 +1345,7 @@ impl Resolver {\n                     name_bindings.define_module(privacy,\n                                                 parent_link,\n                                                 Some(local_def(item.id)),\n+                                                TraitModuleKind,\n                                                 false,\n                                                 sp);\n                     module_parent_opt = Some(ModuleReducedGraphParent(\n@@ -1568,6 +1601,7 @@ impl Resolver {\n                         (*child_name_bindings).define_module(privacy,\n                                                              parent_link,\n                                                              Some(def_id),\n+                                                             NormalModuleKind,\n                                                              false,\n                                                              view_item.span);\n                         self.build_reduced_graph_for_external_crate\n@@ -1626,7 +1660,9 @@ impl Resolver {\n \n             let parent_module = self.get_module_from_parent(parent);\n             let new_module = @Module(BlockParentLink(parent_module, block_id),\n-                                     None, false);\n+                                     None,\n+                                     AnonymousModuleKind,\n+                                     false);\n             parent_module.anonymous_children.insert(block_id, new_module);\n             new_parent = ModuleReducedGraphParent(new_module);\n         } else {\n@@ -1660,6 +1696,7 @@ impl Resolver {\n                     child_name_bindings.define_module(Public,\n                                                       parent_link,\n                                                       Some(def_id),\n+                                                      NormalModuleKind,\n                                                       false,\n                                                       dummy_sp());\n                     modules.insert(def_id,\n@@ -1791,6 +1828,7 @@ impl Resolver {\n                         (*child_name_bindings).define_module(Public,\n                                                              parent_link,\n                                                              None,\n+                                                             NormalModuleKind,\n                                                              false,\n                                                              dummy_sp());\n                     }\n@@ -1804,6 +1842,7 @@ impl Resolver {\n                         (*child_name_bindings).define_module(Public,\n                                                              parent_link,\n                                                              None,\n+                                                             NormalModuleKind,\n                                                              false,\n                                                              dummy_sp());\n                     }\n@@ -1874,6 +1913,7 @@ impl Resolver {\n                                                 Public,\n                                                 parent_link,\n                                                 Some(def),\n+                                                NormalModuleKind,\n                                                 false,\n                                                 dummy_sp());\n                                             type_module =\n@@ -2722,23 +2762,13 @@ impl Resolver {\n                self.idents_to_str((*module_path).get()),\n                self.module_to_str(module_));\n \n-        // The first element of the module path must be in the current scope\n-        // chain.\n-\n-        let resolve_result = match use_lexical_scope {\n-            DontUseLexicalScope => {\n-                self.resolve_module_prefix(module_, module_path)\n-            }\n-            UseLexicalScope => {\n-                let result = self.resolve_module_in_lexical_scope(\n-                    module_,\n-                    module_path.get_elt(0));\n-                ModulePrefixResult { result: result, prefix_len: 1 }\n-            }\n-        };\n+        // Resolve the module prefix, if any.\n+        let module_prefix_result = self.resolve_module_prefix(module_,\n+                                                              module_path);\n \n         let mut search_module;\n-        match resolve_result.result {\n+        let mut start_index;\n+        match module_prefix_result {\n             Failed => {\n                 self.session.span_err(span, ~\"unresolved name\");\n                 return Failed;\n@@ -2748,21 +2778,61 @@ impl Resolver {\n                         bailing\");\n                 return Indeterminate;\n             }\n-            Success(resulting_module) => {\n-                search_module = resulting_module;\n+            Success(NoPrefixFound) => {\n+                // There was no prefix, so we're considering the first element\n+                // of the path. How we handle this depends on whether we were\n+                // instructed to use lexical scope or not.\n+                match use_lexical_scope {\n+                    DontUseLexicalScope => {\n+                        // This is a crate-relative path. We will start the\n+                        // resolution process at index zero.\n+                        search_module = self.graph_root.get_module();\n+                        start_index = 0;\n+                    }\n+                    UseLexicalScope => {\n+                        // This is not a crate-relative path. We resolve the\n+                        // first component of the path in the current lexical\n+                        // scope and then proceed to resolve below that.\n+                        let result = self.resolve_module_in_lexical_scope(\n+                            module_,\n+                            module_path.get_elt(0));\n+                        match result {\n+                            Failed => {\n+                                self.session.span_err(span,\n+                                                      ~\"unresolved name\");\n+                                return Failed;\n+                            }\n+                            Indeterminate => {\n+                                debug!(\"(resolving module path for import) \\\n+                                        indeterminate; bailing\");\n+                                return Indeterminate;\n+                            }\n+                            Success(containing_module) => {\n+                                search_module = containing_module;\n+                                start_index = 1;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            Success(PrefixFound(containing_module, index)) => {\n+                search_module = containing_module;\n+                start_index = index;\n             }\n         }\n \n         return self.resolve_module_path_from_root(search_module,\n                                                   module_path,\n-                                                  resolve_result.prefix_len,\n+                                                  start_index,\n                                                   xray,\n                                                   span);\n     }\n \n     fn resolve_item_in_lexical_scope(module_: @Module,\n                                      name: ident,\n-                                     namespace: Namespace)\n+                                     namespace: Namespace,\n+                                     search_through_modules:\n+                                        SearchThroughModulesFlag)\n                                   -> ResolveResult<Target> {\n \n         debug!(\"(resolving item in lexical scope) resolving `%s` in \\\n@@ -2818,7 +2888,30 @@ impl Resolver {\n                             module\");\n                     return Failed;\n                 }\n-                ModuleParentLink(parent_module_node, _) |\n+                ModuleParentLink(parent_module_node, _) => {\n+                    match search_through_modules {\n+                        DontSearchThroughModules => {\n+                            match search_module.kind {\n+                                NormalModuleKind => {\n+                                    // We stop the search here.\n+                                    debug!(\"(resolving item in lexical \\\n+                                            scope) unresolved module: not \\\n+                                            searching through module \\\n+                                            parents\");\n+                                    return Failed;\n+                                }\n+                                ExternModuleKind |\n+                                TraitModuleKind |\n+                                AnonymousModuleKind => {\n+                                    search_module = parent_module_node;\n+                                }\n+                            }\n+                        }\n+                        SearchThroughModules => {\n+                            search_module = parent_module_node;\n+                        }\n+                    }\n+                }\n                 BlockParentLink(parent_module_node, _) => {\n                     search_module = parent_module_node;\n                 }\n@@ -2854,9 +2947,8 @@ impl Resolver {\n                                     -> ResolveResult<@Module> {\n         // If this module is an anonymous module, resolve the item in the\n         // lexical scope. Otherwise, resolve the item from the crate root.\n-        let resolve_result = self.resolve_item_in_lexical_scope(module_,\n-                                                                name,\n-                                                                TypeNS);\n+        let resolve_result = self.resolve_item_in_lexical_scope(\n+            module_, name, TypeNS, DontSearchThroughModules);\n         match resolve_result {\n             Success(target) => {\n                 match target.bindings.type_def {\n@@ -2894,46 +2986,102 @@ impl Resolver {\n     }\n \n     /**\n-     * Resolves a \"module prefix\". A module prefix is one of (a) the name of a\n-     * module; (b) \"self::\"; (c) some chain of \"super::\".\n+     * Returns the nearest normal module parent of the given module.\n+     */\n+    fn get_nearest_normal_module_parent(module_: @Module) -> Option<@Module> {\n+        let mut module_ = module_;\n+        loop {\n+            match module_.parent_link {\n+                NoParentLink => return None,\n+                ModuleParentLink(new_module, _) |\n+                BlockParentLink(new_module, _) => {\n+                    match new_module.kind {\n+                        NormalModuleKind => return Some(new_module),\n+                        ExternModuleKind |\n+                        TraitModuleKind |\n+                        AnonymousModuleKind => module_ = new_module,\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the nearest normal module parent of the given module, or the\n+     * module itself if it is a normal module.\n+     */\n+    fn get_nearest_normal_module_parent_or_self(module_: @Module) -> @Module {\n+        match module_.kind {\n+            NormalModuleKind => return module_,\n+            ExternModuleKind | TraitModuleKind | AnonymousModuleKind => {\n+                match self.get_nearest_normal_module_parent(module_) {\n+                    None => module_,\n+                    Some(new_module) => new_module\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Resolves a \"module prefix\". A module prefix is one of (a) `self::`;\n+     * (b) some chain of `super::`.\n      */\n     fn resolve_module_prefix(module_: @Module,\n                              module_path: @DVec<ident>)\n-                          -> ModulePrefixResult {\n+                          -> ResolveResult<ModulePrefixResult> {\n         let interner = self.session.parse_sess.interner;\n \n-        let mut containing_module = self.graph_root.get_module();\n-        let mut i = 0;\n-        loop {\n-            if *interner.get(module_path.get_elt(i)) == ~\"self\" {\n-                containing_module = module_;\n-                i += 1;\n-                break;\n-            }\n-            if *interner.get(module_path.get_elt(i)) == ~\"super\" {\n-                match containing_module.parent_link {\n-                    NoParentLink => {\n-                        return ModulePrefixResult {\n-                            result: Failed,\n-                            prefix_len: i\n-                        };\n-                    }\n-                    BlockParentLink(new_module, _) |\n-                    ModuleParentLink(new_module, _) => {\n-                        containing_module = new_module;\n-                    }\n+        // Start at the current module if we see `self` or `super`, or at the\n+        // top of the crate otherwise.\n+        let mut containing_module;\n+        let mut i;\n+        if *interner.get(module_path.get_elt(0)) == ~\"self\" {\n+            containing_module =\n+                self.get_nearest_normal_module_parent_or_self(module_);\n+            i = 1;\n+        } else if *interner.get(module_path.get_elt(0)) == ~\"super\" {\n+            containing_module =\n+                self.get_nearest_normal_module_parent_or_self(module_);\n+            i = 0;  // We'll handle `super` below.\n+        } else {\n+            return Success(NoPrefixFound);\n+        }\n+\n+        // Now loop through all the `super`s we find.\n+        while i < module_path.len() &&\n+                *interner.get(module_path.get_elt(i)) == ~\"super\" {\n+            debug!(\"(resolving module prefix) resolving `super` at %s\",\n+                   self.module_to_str(containing_module));\n+            match self.get_nearest_normal_module_parent(containing_module) {\n+                None => return Failed,\n+                Some(new_module) => {\n+                    containing_module = new_module;\n+                    i += 1;\n                 }\n-                i += 1;\n-            } else {\n-                break;\n             }\n         }\n \n+        debug!(\"(resolving module prefix) finished resolving prefix at %s\",\n+               self.module_to_str(containing_module));\n+\n+        return Success(PrefixFound(containing_module, i));\n+\n+        /*\n+        // If we reached the end, return the containing module.\n+        if i == module_path.len() {\n+            return ModulePrefixResult {\n+                result: Success(containing_module),\n+                prefix_len: i\n+            };\n+        }\n+\n         // Is the containing module the current module? If so, we allow\n         // globs to be unresolved.\n         let allow_globs = core::managed::ptr_eq(containing_module, module_);\n \n         let name = module_path.get_elt(i);\n+        i += 1;\n+\n         let resolve_result = self.resolve_name_in_module(containing_module,\n                                                          name,\n                                                          TypeNS,\n@@ -2950,13 +3098,13 @@ impl Resolver {\n                                         module!\");\n                                 return ModulePrefixResult {\n                                     result: Failed,\n-                                    prefix_len: i + 1\n+                                    prefix_len: i\n                                 };\n                             }\n                             Some(module_def) => {\n                                 return ModulePrefixResult {\n                                     result: Success(module_def),\n-                                    prefix_len: i + 1\n+                                    prefix_len: i\n                                 };\n                             }\n                         }\n@@ -2966,7 +3114,7 @@ impl Resolver {\n                                 wasn't actually a module!\");\n                         return ModulePrefixResult {\n                             result: Failed,\n-                            prefix_len: i + 1\n+                            prefix_len: i\n                         };\n                     }\n                 }\n@@ -2976,17 +3124,18 @@ impl Resolver {\n                         bailing\");\n                 return ModulePrefixResult {\n                     result: Indeterminate,\n-                    prefix_len: i + 1\n+                    prefix_len: i\n                 };\n             }\n             Failed => {\n                 debug!(\"(resolving crate-relative module) failed to resolve\");\n                 return ModulePrefixResult {\n                     result: Failed,\n-                    prefix_len: i + 1\n+                    prefix_len: i\n                 };\n             }\n         }\n+        */\n     }\n \n     fn name_is_exported(module_: @Module, name: ident) -> bool {\n@@ -3109,7 +3258,8 @@ impl Resolver {\n         debug!(\"(resolving one-level naming result) searching for module\");\n         match self.resolve_item_in_lexical_scope(module_,\n                                                  source_name,\n-                                                 TypeNS) {\n+                                                 TypeNS,\n+                                                 SearchThroughModules) {\n             Failed => {\n                 debug!(\"(resolving one-level renaming import) didn't find \\\n                         module result\");\n@@ -3135,8 +3285,9 @@ impl Resolver {\n         } else {\n             debug!(\"(resolving one-level naming result) searching for value\");\n             match self.resolve_item_in_lexical_scope(module_,\n-                                                   source_name,\n-                                                   ValueNS) {\n+                                                     source_name,\n+                                                     ValueNS,\n+                                                     SearchThroughModules) {\n \n                 Failed => {\n                     debug!(\"(resolving one-level renaming import) didn't \\\n@@ -3157,8 +3308,9 @@ impl Resolver {\n \n             debug!(\"(resolving one-level naming result) searching for type\");\n             match self.resolve_item_in_lexical_scope(module_,\n-                                                   source_name,\n-                                                   TypeNS) {\n+                                                     source_name,\n+                                                     TypeNS,\n+                                                     SearchThroughModules) {\n \n                 Failed => {\n                     debug!(\"(resolving one-level renaming import) didn't \\\n@@ -3831,7 +3983,7 @@ impl Resolver {\n \n                 if !self.session.building_library &&\n                     is_none(&self.session.main_fn) &&\n-                    item.ident == syntax::parse::token::special_idents::main {\n+                    item.ident == special_idents::main {\n \n                     self.session.main_fn = Some((item.id, item.span));\n                 }\n@@ -4571,7 +4723,8 @@ impl Resolver {\n                                     -> BareIdentifierPatternResolution {\n         match self.resolve_item_in_lexical_scope(self.current_module,\n                                                  name,\n-                                                 ValueNS) {\n+                                                 ValueNS,\n+                                                 SearchThroughModules) {\n             Success(target) => {\n                 match target.bindings.value_def {\n                     None => {\n@@ -4608,10 +4761,11 @@ impl Resolver {\n      * If `check_ribs` is true, checks the local definitions first; i.e.\n      * doesn't skip straight to the containing module.\n      */\n-    fn resolve_path(path: @path, namespace: Namespace, check_ribs: bool,\n+    fn resolve_path(path: @path,\n+                    namespace: Namespace,\n+                    check_ribs: bool,\n                     visitor: ResolveVisitor)\n                  -> Option<def> {\n-\n         // First, resolve the types.\n         for path.types.each |ty| {\n             self.resolve_type(*ty, visitor);\n@@ -4625,8 +4779,8 @@ impl Resolver {\n \n         if path.idents.len() > 1 {\n             return self.resolve_module_relative_path(path,\n-                                                  self.xray_context,\n-                                                  namespace);\n+                                                     self.xray_context,\n+                                                     namespace);\n         }\n \n         return self.resolve_identifier(path.idents.last(),\n@@ -4797,10 +4951,10 @@ impl Resolver {\n \n         let mut containing_module;\n         match self.resolve_module_path_from_root(root_module,\n-                                               module_path_idents,\n-                                               0,\n-                                               xray,\n-                                               path.span) {\n+                                                 module_path_idents,\n+                                                 0,\n+                                                 xray,\n+                                                 path.span) {\n \n             Failed => {\n                 self.session.span_err(path.span,\n@@ -4821,9 +4975,9 @@ impl Resolver {\n \n         let name = path.idents.last();\n         match self.resolve_definition_of_name_in_module(containing_module,\n-                                                      name,\n-                                                      namespace,\n-                                                      xray) {\n+                                                        name,\n+                                                        namespace,\n+                                                        xray) {\n             NoNameDefinition => {\n                 // We failed to resolve the name. Report an error.\n                 return None;\n@@ -4870,8 +5024,9 @@ impl Resolver {\n                                                 -> Option<def> {\n         // Check the items.\n         match self.resolve_item_in_lexical_scope(self.current_module,\n-                                               ident,\n-                                               namespace) {\n+                                                 ident,\n+                                                 namespace,\n+                                                 SearchThroughModules) {\n             Success(target) => {\n                 match (*target.bindings).def_for_namespace(namespace) {\n                     None => {\n@@ -4909,10 +5064,8 @@ impl Resolver {\n                     item_struct(class_def, _) => {\n                       for vec::each(class_def.fields) |field| {\n                         match field.node.kind {\n-                          syntax::ast::unnamed_field\n-                            => {},\n-                          syntax::ast::named_field(ident, _, _)\n-                            => {\n+                          unnamed_field => {},\n+                          named_field(ident, _, _) => {\n                               if str::eq_slice(self.session.str_of(ident),\n                                                name) {\n                                 return true\n@@ -5352,7 +5505,7 @@ impl Resolver {\n                     current_module = module_;\n                 }\n                 BlockParentLink(module_, _) => {\n-                    idents.push(syntax::parse::token::special_idents::opaque);\n+                    idents.push(special_idents::opaque);\n                     current_module = module_;\n                 }\n             }"}, {"sha": "7880babbd12d09d9986089cef9aba1b06f2fff99", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -145,17 +145,24 @@\n use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, BasicBlockRef};\n+use middle::const_eval;\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n+use middle::trans::consts;\n+use middle::trans::controlflow;\n use middle::trans::datum::*;\n use middle::trans::expr::Dest;\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::ty::{CopyValue, MoveValue, ReadValue};\n use util::common::indenter;\n \n use core::dvec::DVec;\n+use core::dvec;\n use std::map::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n@@ -279,7 +286,7 @@ fn variant_opt(tcx: ty::ctxt, pat_id: ast::node_id) -> Opt {\n                     return var(v.disr_val, {enm: enum_id, var: var_id});\n                 }\n             }\n-            core::util::unreachable();\n+            ::core::util::unreachable();\n         }\n         ast::def_struct(_) => {\n             return lit(UnitLikeStructLit(pat_id));\n@@ -1543,7 +1550,7 @@ fn trans_alt_inner(scope_cx: block,\n         // to an alloca() that will be the value for that local variable.\n         // Note that we use the names because each binding will have many ids\n         // from the various alternatives.\n-        let bindings_map = std::map::HashMap();\n+        let bindings_map = HashMap();\n         do pat_bindings(tcx.def_map, arm.pats[0]) |bm, p_id, s, path| {\n             let ident = path_to_ident(path);\n             let variable_ty = node_id_type(bcx, p_id);"}, {"sha": "68e25b58de29d7d7b2dbef424b100e1f004db471", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -34,20 +34,43 @@ use driver::session::Session;\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n use lib::llvm::{True, False};\n use lib::llvm::{llvm, mk_target_data, mk_type_names};\n+use lib;\n use metadata::common::link_meta;\n use metadata::{csearch, cstore, decoder, encoder};\n+use middle::astencode;\n use middle::pat_util::*;\n+use middle::resolve;\n+use middle::trans::alt;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n+use middle::trans::consts;\n+use middle::trans::controlflow;\n+use middle::trans::datum;\n+use middle::trans::debuginfo;\n+use middle::trans::expr;\n+use middle::trans::foreign;\n+use middle::trans::glue;\n+use middle::trans::inline;\n+use middle::trans::meth;\n+use middle::trans::monomorphize;\n+use middle::trans::reachable;\n use middle::trans::shape::*;\n+use middle::trans::tvec;\n use middle::trans::type_of::*;\n use util::common::indenter;\n use util::common::is_main_name;\n use util::ppaux::{ty_to_str, ty_to_short_str};\n use util::ppaux;\n \n+use core::either;\n+use core::hash;\n+use core::int;\n+use core::io;\n use core::libc::{c_uint, c_ulonglong};\n use core::option::{is_none, is_some};\n+use core::option;\n+use core::uint;\n use std::map::HashMap;\n use std::smallintmap;\n use std::{map, time, list};"}, {"sha": "e3ffd7a2f9a110ad244812f68617f8d7e0de23c2", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,10 @@ use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n use libc::{c_uint, c_int};\n use middle::trans::common::*;\n \n+use core::cast;\n+use core::libc;\n+use core::str;\n+use core::vec;\n use std::map::HashMap;\n use syntax::codemap;\n "}, {"sha": "4c78c60f5b6f0b378912d2e1a4bf82e8a587b665", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,9 +19,15 @@\n use lib::llvm::ValueRef;\n use middle::trans::base::{get_item_val, trans_external_path};\n use middle::trans::build::*;\n+use middle::trans::callee;\n+use middle::trans::closure;\n use middle::trans::common::{block, node_id_type_params};\n use middle::trans::datum::*;\n use middle::trans::datum::Datum;\n+use middle::trans::inline;\n+use middle::trans::meth;\n+use middle::trans::monomorphize;\n+use middle::typeck;\n use util::common::indenter;\n \n use syntax::ast;"}, {"sha": "26ba1869c27e82940c98d9308edc1ed4f7640a72", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,10 +13,14 @@ use back::link::{mangle_internal_name_by_path_and_seq};\n use back::link::{mangle_internal_name_by_path};\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n+use middle::capture;\n use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::{Datum, INIT, ByRef, ByValue, FromLvalue};\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n "}, {"sha": "ff78021bfa72ed9056d2e9af02874f147e395763", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,26 +13,48 @@\n \n */\n \n-use libc::c_uint;\n-use vec::raw::to_ptr;\n-use std::map::{HashMap,Set};\n-use syntax::{ast, ast_map};\n-use driver::session;\n-use session::Session;\n-use middle::ty;\n use back::{link, abi, upcall};\n-use syntax::codemap::span;\n-use lib::llvm::{llvm, target_data, type_names, associate_type,\n-                   name_has_type};\n+use driver::session;\n+use driver::session::Session;\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n use lib::llvm::{True, False, Bool};\n-use metadata::{csearch};\n+use lib::llvm::{llvm, target_data, type_names, associate_type, name_has_type};\n+use lib;\n use metadata::common::link_meta;\n+use metadata::{csearch};\n+use middle::astencode;\n+use middle::resolve;\n+use middle::trans::base;\n+use middle::trans::build;\n+use middle::trans::callee;\n+use middle::trans::datum;\n+use middle::trans::debuginfo;\n+use middle::trans::glue;\n+use middle::trans::meth;\n+use middle::trans::reachable;\n+use middle::trans::shape;\n+use middle::trans::type_of;\n+use middle::trans::type_use;\n+use middle::ty;\n+use middle::typeck;\n+use util::ppaux::{expr_repr, ty_to_str};\n+\n+use core::cast;\n+use core::cmp;\n+use core::hash;\n+use core::libc::c_uint;\n+use core::ptr;\n+use core::str;\n+use core::to_bytes;\n+use core::vec::raw::to_ptr;\n+use core::vec;\n+use std::map::{HashMap, Set};\n+use syntax::ast::ident;\n use syntax::ast_map::path;\n-use util::ppaux::ty_to_str;\n-use syntax::print::pprust::expr_to_str;\n+use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n-use syntax::ast::ident;\n+use syntax::print::pprust::expr_to_str;\n+use syntax::{ast, ast_map};\n \n type namegen = fn@(~str) -> ident;\n fn new_namegen(intr: @ident_interner) -> namegen {\n@@ -633,7 +655,7 @@ impl block {\n     }\n \n     fn expr_to_str(e: @ast::expr) -> ~str {\n-        util::ppaux::expr_repr(self.tcx(), e)\n+        expr_repr(self.tcx(), e)\n     }\n \n     fn expr_is_lval(e: @ast::expr) -> bool {\n@@ -1196,7 +1218,7 @@ impl mono_param_id : to_bytes::IterBytes {\n     }\n }\n \n-impl mono_id_ : core::to_bytes::IterBytes {\n+impl mono_id_ : to_bytes::IterBytes {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f);\n     }"}, {"sha": "94da557d39b2a650b6305f8c46f8aeaf17ba4d43", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::const_eval;\n use middle::trans::base::get_insn_ctxt;\n use middle::trans::common::*;\n+use middle::trans::consts;\n+use middle::trans::expr;\n+use middle::ty;\n \n use syntax::{ast, ast_util, codemap, ast_map};\n "}, {"sha": "f23a07e5dbe36184acbfbb289ce14a7e2f8388ab", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,9 +10,12 @@\n \n use lib::llvm::ValueRef;\n use middle::trans::base::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n \n+use core::str;\n+\n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n \n fn trans_block(bcx: block, b: ast::blk, dest: expr::Dest) -> block {"}, {"sha": "1723c0bddd323065949c2d5d8080809b71960f94", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -99,9 +99,18 @@ use lib::llvm::ValueRef;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::common::*;\n+use middle::trans::common;\n+use middle::trans::tvec;\n+use middle::typeck;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::cmp;\n+use core::option;\n+use core::uint;\n+use core::vec;\n+use syntax::parse::token::special_idents;\n+\n enum CopyAction {\n     INIT,\n     DROP_EXISTING\n@@ -669,7 +678,7 @@ impl Datum {\n                 // Check whether this struct is a newtype struct.\n                 let fields = ty::struct_fields(ccx.tcx, did, substs);\n                 if fields.len() != 1 || fields[0].ident !=\n-                    syntax::parse::token::special_idents::unnamed_field {\n+                    special_idents::unnamed_field {\n                     return None;\n                 }\n "}, {"sha": "ed188a7019ea9344b3c4fa090bec50617c09a174", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,9 +15,15 @@ use middle::pat_util::*;\n use middle::trans::base;\n use middle::trans::build::B;\n use middle::trans::common::*;\n+use middle::trans::shape;\n+use middle::trans::type_of;\n+use middle::trans;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::libc;\n+use core::option;\n+use core::sys;\n use std::map::HashMap;\n use std::map;\n use syntax::ast::Ty;"}, {"sha": "d3a1772a6b0f8fbb618d676f61b50e98565fe866", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -112,10 +112,18 @@ lvalues are *never* stored by value.\n */\n \n use lib::llvm::ValueRef;\n+use middle::resolve;\n use middle::trans::base::*;\n use middle::trans::callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n+use middle::trans::callee;\n+use middle::trans::closure;\n use middle::trans::common::*;\n+use middle::trans::consts;\n+use middle::trans::controlflow;\n use middle::trans::datum::*;\n+use middle::trans::machine;\n+use middle::trans::meth;\n+use middle::trans::tvec;\n use middle::ty::MoveValue;\n use middle::ty::struct_mutable_fields;\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};"}, {"sha": "b32d6ef608736826c30a0264fbf551d4c7d4400d", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,21 +17,26 @@ use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{Struct, Array, ModuleRef, CallConv, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};\n use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use lib;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore};\n+use middle::trans::glue;\n+use middle::trans::machine;\n+use middle::trans::shape;\n use middle::trans::type_of::*;\n+use middle::trans::type_of;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n use util::ppaux::ty_to_str;\n \n use core::libc::c_uint;\n-use std::map::HashMap;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};\n+use syntax::parse::token::special_idents;\n \n export link_name, trans_foreign_mod, register_foreign_fn, trans_foreign_fn,\n        trans_intrinsic;\n@@ -1284,7 +1289,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n         let t = ty::node_id_to_type(ccx.tcx, id);\n         let ps = link::mangle_internal_name_by_path(\n             ccx, vec::append_one(path, ast_map::path_name(\n-                syntax::parse::token::special_idents::clownshoe_abi\n+                special_idents::clownshoe_abi\n             )));\n         let llty = type_of_fn_from_ty(ccx, t);\n         let llfndecl = decl_internal_cdecl_fn(ccx.llmod, ps, llty);\n@@ -1323,7 +1328,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n \n         let shim_name = link::mangle_internal_name_by_path(\n             ccx, vec::append_one(path, ast_map::path_name(\n-                syntax::parse::token::special_idents::clownshoe_stack_shim\n+                special_idents::clownshoe_stack_shim\n             )));\n         return build_shim_fn_(ccx, shim_name, llrustfn, tys,\n                            lib::llvm::CCallConv,"}, {"sha": "9396f64fdbe1e3a0b0d27221b5cf50e6effc1d1b", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,9 +14,17 @@\n \n use lib::llvm::{ValueRef, TypeRef};\n use middle::trans::base::*;\n+use middle::trans::callee;\n+use middle::trans::closure;\n use middle::trans::common::*;\n use middle::trans::build::*;\n+use middle::trans::reflect;\n+use middle::trans::tvec;\n use middle::trans::type_of::type_of;\n+use middle::trans::uniq;\n+\n+use core::io;\n+use core::str;\n \n fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");"}, {"sha": "d97272b095976b163861963b446265938fecc5dc", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{impl_owned_self, impl_self, no_self};\n use middle::trans::base::{trans_item, get_item_val, self_arg, trans_fn};\n use middle::trans::common::*;\n+use middle::trans::common;\n+use middle::trans::inline;\n+use middle::trans::monomorphize;\n \n+use core::vec;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util::local_def;"}, {"sha": "b05737820546361358a157532815c56ea2d67306", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,6 +11,10 @@\n // Information concerning the machine representation of various types.\n \n use middle::trans::common::*;\n+use middle::trans::type_of;\n+use middle::ty;\n+\n+use syntax::parse::token::special_idents;\n \n // Creates a simpler, size-equivalent type. The resulting type is guaranteed\n // to have (a) the same size as the type that was passed in; (b) to be non-\n@@ -39,7 +43,7 @@ pub fn simplify_type(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n           ty::ty_struct(did, ref substs) => {\n             let simpl_fields = (if ty::ty_dtor(tcx, did).is_present() {\n                 // remember the drop flag\n-                  ~[{ident: syntax::parse::token::special_idents::dtor,\n+                  ~[{ident: special_idents::dtor,\n                      mt: {ty: ty::mk_u8(tcx),\n                           mutbl: ast::m_mutbl}}] }\n                 else { ~[] }) +"}, {"sha": "c5f7fc02384734af1ab694eaab8dde90c8aeb0e9", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,16 +9,24 @@\n // except according to those terms.\n \n use back::{link, abi};\n+use driver;\n use lib::llvm::llvm::LLVMGetParam;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n+use lib;\n use metadata::csearch;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::expr::{SaveIn, Ignore};\n+use middle::trans::expr;\n+use middle::trans::glue;\n+use middle::trans::inline;\n+use middle::trans::monomorphize;\n use middle::trans::type_of::*;\n+use middle::typeck;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::libc::c_uint;"}, {"sha": "f74c4b96e0297b68cccc60c17fb7b3da137160b5", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,10 +14,21 @@ use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n use middle::trans::base::{trans_fn, impl_self, decl_internal_cdecl_fn};\n use middle::trans::base::{trans_item, get_item_val, no_self, self_arg};\n+use middle::trans::base;\n use middle::trans::common::*;\n+use middle::trans::datum;\n+use middle::trans::foreign;\n+use middle::trans::machine;\n+use middle::trans::meth;\n+use middle::trans::shape;\n use middle::trans::type_of::type_of_fn_from_ty;\n+use middle::trans::type_of;\n+use middle::trans::type_use;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use middle::typeck;\n \n+use core::option;\n+use core::vec;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util::local_def;"}, {"sha": "d0363b973212a250eda17c55f22e1f0fa750750a", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,17 +15,22 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n+use driver::session::*;\n+use middle::resolve;\n+use middle::ty;\n+use middle::typeck;\n+\n+use core::vec;\n+use std::map::HashMap;\n use syntax::ast::*;\n-use syntax::{visit, ast_util, ast_map};\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n use syntax::print::pprust::expr_to_str;\n-use std::map::HashMap;\n-use driver::session::*;\n+use syntax::{visit, ast_util, ast_map};\n \n export map, find_reachable;\n \n-type map = std::map::HashMap<node_id, ()>;\n+type map = HashMap<node_id, ()>;\n \n type ctx = {exp_map2: resolve::ExportMap2,\n             tcx: ty::ctxt,\n@@ -34,7 +39,7 @@ type ctx = {exp_map2: resolve::ExportMap2,\n \n fn find_reachable(crate_mod: _mod, exp_map2: resolve::ExportMap2,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n-    let rmap = std::map::HashMap();\n+    let rmap = HashMap();\n     let cx = {exp_map2: exp_map2, tcx: tcx,\n               method_map: method_map, rmap: rmap};\n     traverse_public_mod(cx, ast::crate_node_id, crate_mod);"}, {"sha": "7f770899c5085788425589ae8310a236e35010e4", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,9 +13,13 @@ use lib::llvm::{TypeRef, ValueRef};\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::{ArgVals, DontAutorefArg};\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::SaveIn;\n+use middle::trans::glue;\n+use middle::trans::meth;\n+use middle::trans::shape;\n use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n "}, {"sha": "c6b8457bb958a033624f8ed12edcba69b0cb7155", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,12 +17,14 @@ use lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::*;\n+use middle::trans;\n use middle::ty::field;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n use core::dvec::DVec;\n use core::option::is_some;\n+use core::vec;\n use std::map::HashMap;\n use syntax::ast;\n use syntax::ast_util::dummy_sp;\n@@ -36,13 +38,13 @@ type ctxt = {mut next_tag_id: u16, pad: u16, pad2: u32};\n fn mk_global(ccx: @crate_ctxt, name: ~str, llval: ValueRef, internal: bool) ->\n    ValueRef {\n     let llglobal = do str::as_c_str(name) |buf| {\n-        lib::llvm::llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval), buf)\n+        llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval), buf)\n     };\n-    lib::llvm::llvm::LLVMSetInitializer(llglobal, llval);\n-    lib::llvm::llvm::LLVMSetGlobalConstant(llglobal, True);\n+    llvm::LLVMSetInitializer(llglobal, llval);\n+    llvm::LLVMSetGlobalConstant(llglobal, True);\n \n     if internal {\n-        lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n+        ::lib::llvm::SetLinkage(llglobal, ::lib::llvm::InternalLinkage);\n     }\n \n     return llglobal;\n@@ -51,7 +53,7 @@ fn mk_global(ccx: @crate_ctxt, name: ~str, llval: ValueRef, internal: bool) ->\n fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     let llshapetablesty = trans::common::T_named_struct(~\"shapes\");\n     let _llshapetables = str::as_c_str(~\"shapes\", |buf| {\n-        lib::llvm::llvm::LLVMAddGlobal(llmod, llshapetablesty, buf)\n+        llvm::LLVMAddGlobal(llmod, llshapetablesty, buf)\n     });\n \n     return {mut next_tag_id: 0u16, pad: 0u16, pad2: 0u32};"}, {"sha": "b6df2486af2cfa3c20be8276220f0a918f1f4514", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,7 +14,11 @@ use middle::trans::build::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore, SaveIn};\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::shape::llsize_of;\n+use middle::trans::type_of;\n+use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n "}, {"sha": "85830ca9277095964def845f1749f2d8a8803d59", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,6 +11,9 @@\n use lib::llvm::llvm;\n use lib::llvm::{TypeRef};\n use middle::trans::common::*;\n+use middle::trans::common;\n+use middle::trans::expr;\n+use util::ppaux;\n \n use std::map::HashMap;\n use syntax::ast;\n@@ -258,7 +261,7 @@ fn llvm_type_name(cx: @crate_ctxt,\n     return fmt!(\n         \"%s %s[#%d]\",\n           name,\n-        util::ppaux::parameterized(\n+        ppaux::parameterized(\n             cx.tcx,\n             ty::item_path_str(cx.tcx, did),\n             None,"}, {"sha": "ee2d4a8472942357db4e993988947b39490e0fd2", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -28,8 +28,13 @@\n // invasive.)\n \n use metadata::csearch;\n+use middle::freevars;\n use middle::trans::common::*;\n+use middle::trans::inline;\n \n+use core::option;\n+use core::uint;\n+use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n use std::map::HashMap;"}, {"sha": "c4490dd86f35a7c6466babd097b4a27291afc520", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back;\n use lib::llvm::ValueRef;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::common::*;\n use middle::trans::datum::immediate_rvalue;\n+use middle::trans::datum;\n+use middle::trans::glue;\n \n use syntax::ast;\n "}, {"sha": "c072889c5249ad5ad2341df9869776a3e2dd3380", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 52, "deletions": 31, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,25 +10,43 @@\n \n #[warn(deprecated_pattern)];\n \n-use core::dvec::DVec;\n-use std::{map, smallintmap};\n-use result::Result;\n-use std::map::HashMap;\n use driver::session;\n-use session::Session;\n-use syntax::{ast, ast_map};\n-use syntax::ast_util;\n-use syntax::ast_util::{is_local, local_def};\n-use syntax::codemap::span;\n use metadata::csearch;\n-use util::ppaux::{region_to_str, explain_region, vstore_to_str,\n-                  note_and_explain_region, bound_region_to_str};\n-use middle::lint;\n+use metadata;\n+use middle::const_eval;\n+use middle::freevars;\n use middle::lint::{get_lint_level, allow};\n+use middle::lint;\n+use middle::resolve::{Impl, MethodInfo};\n+use middle::resolve;\n+use middle::ty;\n+use middle::typeck;\n+use middle;\n+use session::Session;\n+use util::ppaux::{note_and_explain_region, bound_region_to_str};\n+use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n+use util::ppaux::{ty_to_str, proto_ty_to_str, tys_to_str};\n+\n+use core::cast;\n+use core::cmp;\n+use core::dvec::DVec;\n+use core::dvec;\n+use core::ops;\n+use core::option;\n+use core::result::Result;\n+use core::result;\n+use core::to_bytes;\n+use core::uint;\n+use core::vec;\n+use std::map::HashMap;\n+use std::{map, smallintmap};\n use syntax::ast::*;\n+use syntax::ast_util::{is_local, local_def};\n+use syntax::ast_util;\n+use syntax::codemap::span;\n use syntax::print::pprust::*;\n-use util::ppaux::{ty_to_str, proto_ty_to_str, tys_to_str};\n-use middle::resolve::{Impl, MethodInfo};\n+use syntax::{ast, ast_map};\n+use syntax;\n \n export ProvidedMethodSource;\n export ProvidedMethodInfo;\n@@ -1542,7 +1560,8 @@ fn substs_is_noop(substs: &substs) -> bool {\n fn substs_to_str(cx: ctxt, substs: &substs) -> ~str {\n     fmt!(\"substs(self_r=%s, self_ty=%s, tps=%?)\",\n          substs.self_r.map_default(~\"none\", |r| region_to_str(cx, *r)),\n-         substs.self_ty.map_default(~\"none\", |t| ty_to_str(cx, *t)),\n+         substs.self_ty.map_default(~\"none\",\n+                                    |t| ::util::ppaux::ty_to_str(cx, *t)),\n          tys_to_str(cx, substs.tps))\n }\n \n@@ -1552,7 +1571,7 @@ fn param_bound_to_str(cx: ctxt, pb: &param_bound) -> ~str {\n         bound_durable => ~\"durable\",\n         bound_owned => ~\"owned\",\n         bound_const => ~\"const\",\n-        bound_trait(t) => ty_to_str(cx, t)\n+        bound_trait(t) => ::util::ppaux::ty_to_str(cx, t)\n     }\n }\n \n@@ -1566,11 +1585,11 @@ fn subst(cx: ctxt,\n \n     debug!(\"subst(substs=%s, typ=%s)\",\n            substs_to_str(cx, substs),\n-           ty_to_str(cx, typ));\n+           ::util::ppaux::ty_to_str(cx, typ));\n \n     if substs_is_noop(substs) { return typ; }\n     let r = do_subst(cx, substs, typ);\n-    debug!(\"  r = %s\", ty_to_str(cx, r));\n+    debug!(\"  r = %s\", ::util::ppaux::ty_to_str(cx, r));\n     return r;\n \n     fn do_subst(cx: ctxt,\n@@ -1588,7 +1607,8 @@ fn subst(cx: ctxt,\n                     re_bound(br_self) => substs.self_r.expect(\n                         fmt!(\"ty::subst: \\\n                       Reference to self region when given substs with no \\\n-                      self region, ty = %s\", ty_to_str(cx, typ))),\n+                      self region, ty = %s\",\n+                      ::util::ppaux::ty_to_str(cx, typ))),\n                     _ => r\n                 },\n                 |t| do_subst(cx, substs, t),\n@@ -2351,26 +2371,26 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n     fn type_requires(cx: ctxt, seen: @mut ~[def_id],\n                      r_ty: t, ty: t) -> bool {\n         debug!(\"type_requires(%s, %s)?\",\n-               ty_to_str(cx, r_ty),\n-               ty_to_str(cx, ty));\n+               ::util::ppaux::ty_to_str(cx, r_ty),\n+               ::util::ppaux::ty_to_str(cx, ty));\n \n         let r = {\n             get(r_ty).sty == get(ty).sty ||\n                 subtypes_require(cx, seen, r_ty, ty)\n         };\n \n         debug!(\"type_requires(%s, %s)? %b\",\n-               ty_to_str(cx, r_ty),\n-               ty_to_str(cx, ty),\n+               ::util::ppaux::ty_to_str(cx, r_ty),\n+               ::util::ppaux::ty_to_str(cx, ty),\n                r);\n         return r;\n     }\n \n     fn subtypes_require(cx: ctxt, seen: @mut ~[def_id],\n                         r_ty: t, ty: t) -> bool {\n         debug!(\"subtypes_require(%s, %s)?\",\n-               ty_to_str(cx, r_ty),\n-               ty_to_str(cx, ty));\n+               ::util::ppaux::ty_to_str(cx, r_ty),\n+               ::util::ppaux::ty_to_str(cx, ty));\n \n         let r = match get(ty).sty {\n           ty_nil |\n@@ -2447,8 +2467,8 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n         };\n \n         debug!(\"subtypes_require(%s, %s)? %b\",\n-               ty_to_str(cx, r_ty),\n-               ty_to_str(cx, ty),\n+               ::util::ppaux::ty_to_str(cx, r_ty),\n+               ::util::ppaux::ty_to_str(cx, ty),\n                r);\n \n         return r;\n@@ -2461,7 +2481,8 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n fn type_structurally_contains(cx: ctxt, ty: t, test: fn(x: &sty) -> bool) ->\n    bool {\n     let sty = &get(ty).sty;\n-    debug!(\"type_structurally_contains: %s\", ty_to_str(cx, ty));\n+    debug!(\"type_structurally_contains: %s\",\n+           ::util::ppaux::ty_to_str(cx, ty));\n     if test(sty) { return true; }\n     match *sty {\n       ty_enum(did, ref substs) => {\n@@ -3260,8 +3281,8 @@ fn occurs_check(tcx: ctxt, sp: span, vid: TyVid, rt: t) {\n             tcx.sess.span_fatal\n                 (sp, ~\"type inference failed because I \\\n                      could not find a type\\n that's both of the form \"\n-                 + ty_to_str(tcx, mk_var(tcx, vid)) +\n-                 ~\" and of the form \" + ty_to_str(tcx, rt) +\n+                 + ::util::ppaux::ty_to_str(tcx, mk_var(tcx, vid)) +\n+                 ~\" and of the form \" + ::util::ppaux::ty_to_str(tcx, rt) +\n                  ~\" - such a type would have to be infinitely large.\");\n     }\n }\n@@ -3343,7 +3364,7 @@ fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n       ty_nil | ty_bot | ty_bool | ty_int(_) |\n       ty_uint(_) | ty_float(_) | ty_estr(_) |\n       ty_type | ty_opaque_box | ty_opaque_closure_ptr(_) => {\n-        ty_to_str(cx, t)\n+        ::util::ppaux::ty_to_str(cx, t)\n       }\n \n       ty_enum(id, _) => fmt!(\"enum %s\", item_path_str(cx, id)),"}, {"sha": "82438f86e9ffbf914d2d64f93afa8daeb1c41c96", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -53,11 +53,17 @@\n  */\n \n use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use middle::ty;\n use middle::typeck::check::fn_ctxt;\n+use middle::typeck::collect;\n use middle::typeck::rscope::{anon_rscope, binding_rscope, empty_rscope};\n use middle::typeck::rscope::{in_anon_rscope, in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope};\n \n+use core::result;\n+use core::vec;\n+use syntax::ast;\n+\n pub trait ast_conv {\n     fn tcx() -> ty::ctxt;\n     fn ccx() -> @crate_ctxt;"}, {"sha": "b62b4d7971234587971efbdbdcd582bc7b7f51ac", "filename": "src/librustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,8 +10,14 @@\n \n use middle::pat_util::{pat_is_binding, pat_is_const};\n use middle::pat_util::{pat_is_variant_or_struct};\n+use middle::ty;\n+use middle::typeck::check::demand;\n \n+use core::vec;\n+use std::map::HashMap;\n+use syntax::ast;\n use syntax::ast_util::walk_pat;\n+use syntax::ast_util;\n use syntax::print::pprust;\n \n fn check_alt(fcx: @fn_ctxt,\n@@ -195,13 +201,13 @@ fn check_struct_pat_fields(pcx: pat_ctxt,\n     let tcx = pcx.fcx.ccx.tcx;\n \n     // Index the class fields.\n-    let field_map = std::map::HashMap();\n+    let field_map = HashMap();\n     for class_fields.eachi |i, class_field| {\n         field_map.insert(class_field.ident, i);\n     }\n \n     // Typecheck each field.\n-    let found_fields = std::map::HashMap();\n+    let found_fields = HashMap();\n     for fields.each |field| {\n         match field_map.find(field.ident) {\n             Some(index) => {"}, {"sha": "1f8c9c845503788ca7faafd8e7a27aa7a32e277f", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::check::fn_ctxt;\n+use middle::typeck::infer;\n+\n+use core::result;\n+use syntax::ast;\n \n // Requires that the two types unify, and prints an error message if they\n // don't."}, {"sha": "a3df14be9c6ad22f246d840ca124e3a633dbf252", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -80,14 +80,22 @@ obtained the type `Foo`, we would never match this method.\n */\n \n use middle::resolve::{Impl, MethodInfo};\n+use middle::resolve;\n use middle::ty::*;\n+use middle::ty;\n use middle::typeck::check;\n+use middle::typeck::check::vtable;\n use middle::typeck::coherence::get_base_type_def_id;\n+use middle::typeck::infer;\n \n use core::dvec::DVec;\n+use core::result;\n+use core::uint;\n+use core::vec;\n use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n+use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::node_id_to_str;\n use syntax::ast_util::dummy_sp;"}, {"sha": "70f7dbb4a4e4fb198560607e0adf6f0d5794cfe0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -76,24 +76,44 @@ type parameter).\n \n */\n \n+use middle::capture;\n+use middle::const_eval;\n+use middle::pat_util;\n use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_};\n+use middle::ty;\n use middle::typeck::astconv::{ast_conv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n+use middle::typeck::astconv;\n use middle::typeck::check::method::TransformTypeNormally;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::infer::{resolve_type, force_tvar};\n+use middle::typeck::infer;\n use middle::typeck::rscope::{anon_rscope, binding_rscope, bound_self_region};\n use middle::typeck::rscope::{empty_rscope, in_anon_rscope};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n+use middle::typeck::rscope;\n use util::ppaux;\n \n+use core::either;\n+use core::option;\n+use core::ptr;\n use core::result::{Result, Ok, Err};\n+use core::result;\n+use core::str;\n+use core::vec;\n use std::map::HashMap;\n+use std::map;\n use syntax::ast::ty_i;\n+use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_util::{is_local, visibility_to_privacy, Private, Public};\n+use syntax::ast_util;\n+use syntax::codemap;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust;\n+use syntax::visit;\n+use syntax;\n \n export alt;\n export vtable;\n@@ -1688,7 +1708,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n     fn check_struct_constructor(fcx: @fn_ctxt,\n                                 id: ast::node_id,\n-                                span: syntax::codemap::span,\n+                                span: codemap::span,\n                                 class_id: ast::def_id,\n                                 fields: ~[ast::field],\n                                 base_expr: Option<@ast::expr>) -> bool {\n@@ -1769,7 +1789,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n     fn check_struct_enum_variant(fcx: @fn_ctxt,\n                                  id: ast::node_id,\n-                                 span: syntax::codemap::span,\n+                                 span: codemap::span,\n                                  enum_id: ast::def_id,\n                                  variant_id: ast::def_id,\n                                  fields: ~[ast::field]) -> bool {\n@@ -2997,7 +3017,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n         (1u, ~[], ty::mk_nil_ptr(tcx))\n       }\n       ~\"visit_tydesc\" => {\n-          let tydesc_name = syntax::parse::token::special_idents::tydesc;\n+          let tydesc_name = special_idents::tydesc;\n           let ty_visitor_name = tcx.sess.ident_of(~\"TyVisitor\");\n           assert tcx.intrinsic_defs.contains_key(tydesc_name);\n           assert ccx.tcx.intrinsic_defs.contains_key(ty_visitor_name);"}, {"sha": "797a21c38e20b697683f6d4fb27619bb5479abcb", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -32,12 +32,16 @@ use middle::pat_util::pat_bindings;\n use middle::ty::{encl_region, re_scope};\n use middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n use middle::ty::{vstore_uniq};\n+use middle::ty;\n use middle::typeck::infer::{resolve_and_force_all_but_regions, fres};\n use util::ppaux::{note_and_explain_region, ty_to_str};\n \n+use core::result;\n use syntax::ast::{ProtoBare, ProtoBox, ProtoUniq, ProtoBorrowed};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n+use syntax::ast;\n use syntax::print::pprust;\n+use syntax::visit;\n \n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;"}, {"sha": "dfba93f947f374ef88be47f45226bfe242e52aca", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,8 +11,10 @@\n // #[warn(deprecated_mode)];\n // #[warn(deprecated_pattern)];\n \n+use middle::ty;\n use util::ppaux;\n \n+use syntax::ast;\n use syntax::print::pprust::{expr_to_str};\n \n // Helper functions related to manipulating region types."}, {"sha": "53d2084acab2f4cd42fd53ad4368ffa0f5af05c3", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,15 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::resolve;\n+use middle::ty;\n use middle::typeck::check::{fn_ctxt, impl_self_ty};\n use middle::typeck::infer::{fixup_err_to_str, infer_ctxt};\n use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n+use middle::typeck::infer;\n use util::common::indenter;\n use util::ppaux;\n \n+use core::result;\n+use core::uint;\n+use core::vec;\n use result::{Result, Ok, Err};\n+use syntax::ast;\n+use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust;\n+use syntax::visit;\n \n // vtable resolution looks for places where trait bounds are\n // subsituted in and figures out which vtable is used. There is some"}, {"sha": "84d3eea1b35833704ae2fd83323b165177cd1786", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,12 +12,18 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n+use middle::pat_util;\n+use middle::ty;\n use middle::typeck::check::{fn_ctxt, lookup_local};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::{resolve_type};\n+use middle::typeck::infer;\n use util::ppaux;\n \n-use result::{Result, Ok, Err};\n+use core::result::{Result, Ok, Err};\n+use core::vec;\n+use syntax::ast;\n+use syntax::visit;\n \n export resolve_type_vars_in_fn;\n export resolve_type_vars_in_expr;"}, {"sha": "1dd10f61f1fb66a3c5d8b208889ab3e1cd280646", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,10 @@\n // has at most one implementation for each type. Then we build a mapping from\n // each trait in the system to its implementations.\n \n+use driver;\n use metadata::csearch::{ProvidedTraitMethodInfo, each_path, get_impl_traits};\n use metadata::csearch::{get_impls_for_mod};\n+use metadata::csearch;\n use metadata::cstore::{CStore, iter_crate_data};\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n use middle::resolve::{Impl, MethodInfo};\n@@ -27,6 +29,7 @@ use middle::ty::{ty_rec, ty_rptr, ty_struct, ty_trait, ty_tup, ty_uint};\n use middle::ty::{ty_param, ty_self, ty_type, ty_opaque_box, ty_uniq};\n use middle::ty::{ty_opaque_closure_ptr, ty_unboxed_vec, type_kind_ext};\n use middle::ty::{type_is_ty_var};\n+use middle::ty;\n use middle::typeck::infer::{infer_ctxt, can_mk_subty};\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n@@ -35,20 +38,26 @@ use syntax::ast::{item, item_struct, item_const, item_enum, item_fn};\n use syntax::ast::{item_foreign_mod, item_impl, item_mac, item_mod};\n use syntax::ast::{item_trait, item_ty, local_crate, method, node_id};\n use syntax::ast::{trait_ref};\n+use syntax::ast;\n use syntax::ast_map::node_item;\n+use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, dummy_sp};\n use syntax::attr;\n use syntax::codemap::span;\n+use syntax::parse;\n use syntax::visit::{default_simple_visitor, default_visitor};\n use syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n use core::dvec::DVec;\n use core::result::Ok;\n-use std::map::HashMap;\n+use core::send_map;\n use core::uint::range;\n+use core::uint;\n use core::vec::{len, push};\n+use core::vec;\n+use std::map::HashMap;\n \n struct UniversalQuantificationResult {\n     monotype: t,\n@@ -307,7 +316,7 @@ impl CoherenceChecker {\n         for self.each_provided_trait_method(trait_did) |trait_method| {\n             // Synthesize an ID.\n             let tcx = self.crate_context.tcx;\n-            let new_id = syntax::parse::next_node_id(tcx.sess.parse_sess);\n+            let new_id = parse::next_node_id(tcx.sess.parse_sess);\n             let new_did = local_def(new_id);\n \n             // XXX: Perform substitutions.\n@@ -883,7 +892,7 @@ impl CoherenceChecker {\n \n             // Create a new def ID for this provided method.\n             let parse_sess = &self.crate_context.tcx.sess.parse_sess;\n-            let new_did = local_def(syntax::parse::next_node_id(*parse_sess));\n+            let new_did = local_def(parse::next_node_id(*parse_sess));\n \n             let provided_method_info =\n                 @ProvidedMethodInfo {"}, {"sha": "8a897e726647420db6b0a8e7b2d61a54c20d13a2", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -30,15 +30,28 @@ are represented as `ty_param()` instances.\n \n */\n \n+use metadata::csearch;\n use middle::ty::{FnMeta, FnSig, FnTyBase, InstantiatedTraitRef};\n+use middle::ty;\n use middle::typeck::astconv::{ast_conv, ty_of_fn_decl, ty_of_arg};\n use middle::typeck::astconv::{ast_ty_to_ty};\n+use middle::typeck::astconv;\n+use middle::typeck::infer;\n use middle::typeck::rscope::*;\n+use middle::typeck::rscope;\n use util::common::pluralize;\n use util::ppaux;\n use util::ppaux::bound_to_str;\n \n+use core::dvec;\n+use core::option;\n+use core::vec;\n+use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_util::trait_method_to_ty_method;\n+use syntax::ast_util;\n+use syntax::codemap;\n+use syntax::visit;\n \n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n@@ -47,7 +60,7 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n     for crate.node.module.items.each |crate_item| {\n         if crate_item.ident\n-            == syntax::parse::token::special_idents::intrinsic {\n+            == ::syntax::parse::token::special_idents::intrinsic {\n \n             match crate_item.node {\n               ast::item_mod(m) => {"}, {"sha": "a41c1efb6c33c62a41d91ab81d42cd7372322017", "filename": "src/librustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -58,9 +58,13 @@\n // A.  But this upper-bound might be stricter than what is truly\n // needed.\n \n+use middle::ty;\n use middle::typeck::infer::combine::combine_fields;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::option;\n+use syntax::ast;\n+\n fn to_ares(+c: cres<ty::t>) -> ares {\n     match c {\n         Ok(_) => Ok(None),"}, {"sha": "dc60ee9caeeaf7a22dc85120e4742abe1f9bbe26", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -54,10 +54,14 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n+use middle::ty;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::vec;\n use syntax::ast::Onceness;\n+use syntax::ast;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "c5c19cd16e8500099865012bc99697479d6e23d9", "filename": "src/librustc/middle/typeck/infer/floating.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,9 +14,13 @@ Code related to floating-point type inference.\n \n */\n \n+use middle::ty;\n use middle::ty::ty_float;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::uint;\n+use syntax::ast;\n+\n // Bitvector to represent sets of floating-point types.\n pub enum float_ty_set = uint;\n "}, {"sha": "6a6a817e97e83d2748ddc4692ab4589191ec34d5", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::lattice::*;\n+use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n \n use syntax::ast::{Many, Once};"}, {"sha": "e6701182342f5d59864de234041ab0fe6152b744", "filename": "src/librustc/middle/typeck/infer/integral.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,12 @@ Code related to integral type inference.\n \n */\n \n+use middle::ty;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::uint;\n+use syntax::ast;\n+\n // Bitvector to represent sets of integral types\n enum int_ty_set = uint;\n "}, {"sha": "c8d63ea796e6e06dcd9ef75faa7aeb1c0ae77da7", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::unify::*;\n use middle::typeck::infer::to_str::ToStr;"}, {"sha": "7a402e2218d94d9e2752366ed4b59e6ae50fed5b", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::lattice::*;\n+use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n \n+use std::list;\n use syntax::ast::{Many, Once};\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export."}, {"sha": "279318079b9a27aaa6ec8d79692fb0150baedb54", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -286,6 +286,8 @@ use util::ppaux::{ty_to_str, mt_to_str};\n use core::cmp::Eq;\n use core::dvec::DVec;\n use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n+use core::result;\n+use core::vec;\n use std::map::HashMap;\n use std::smallintmap;\n use syntax::ast::{ret_style, purity};"}, {"sha": "0b903f13adbaf653c822dfdf2b7e54d723b0f1d5", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -454,13 +454,19 @@ write it)\n #[warn(deprecated_pattern)];\n \n use middle::region::is_subregion_of;\n+use middle::region;\n+use middle::ty;\n use middle::ty::{Region, RegionVid, re_static, re_infer, re_free, re_bound};\n use middle::ty::{re_scope, ReVar, ReSkolemized};\n use middle::typeck::infer::to_str::ToStr;\n use syntax::codemap;\n use util::ppaux::note_and_explain_region;\n \n+use core::cmp;\n use core::dvec::DVec;\n+use core::to_bytes;\n+use core::uint;\n+use core::vec;\n use result::Result;\n use result::{Ok, Err};\n use std::map::HashMap;"}, {"sha": "2448a49444b412a5075778c4516ba78896b2c515", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -46,10 +46,16 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n+use middle::ty;\n use middle::typeck::infer::floating::*;\n+use middle::typeck::infer::floating;\n use middle::typeck::infer::integral::*;\n+use middle::typeck::infer::integral;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::uint;\n+use core::vec;\n+\n const resolve_nested_tvar: uint = 0b00000001;\n const resolve_rvar: uint        = 0b00000010;\n const resolve_ivar: uint        = 0b00000100;"}, {"sha": "b87f42490e2e232000351a60a988597fb0ace245", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::to_str::ToStr;\n use middle::typeck::infer::unify::*;"}, {"sha": "99b1dab639874bb1ac1776a50adfae3ed7e53a17", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::integral::int_ty_set;\n use middle::typeck::infer::floating::float_ty_set;\n use middle::typeck::infer::unify::{redirect, root, var_value};\n+use util::ppaux;\n+\n+use core::uint;\n \n trait ToStr {\n     fn to_str(cx: infer_ctxt) -> ~str;\n@@ -30,7 +34,7 @@ impl ty::mt: ToStr {\n \n impl ty::Region: ToStr {\n     fn to_str(cx: infer_ctxt) -> ~str {\n-        util::ppaux::region_to_str(cx.tcx, self)\n+        ppaux::region_to_str(cx.tcx, self)\n     }\n }\n "}, {"sha": "17464d8c13e59f25473ea891a5003bd49a1968e7", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use middle::typeck::infer::combine::combine;\n use middle::typeck::infer::floating::*;\n+use middle::typeck::infer::floating;\n use middle::typeck::infer::integral::*;\n+use middle::typeck::infer::integral;\n use middle::typeck::infer::to_str::ToStr;\n \n+use core::result;\n use std::smallintmap::SmallIntMap;\n \n enum var_value<V:Copy, T:Copy> {"}, {"sha": "ae8d2112ab34ab595864d6b5907732865e5757d0", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -52,6 +52,7 @@ independently:\n \n use metadata::csearch;\n use middle::pat_util::{pat_id_map, PatIdMap};\n+use middle::resolve;\n use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n use middle::ty::{ty_param_substs_and_ty, vstore_uniq};\n use middle::ty;\n@@ -62,6 +63,8 @@ use util::ppaux;\n \n use core::dvec::DVec;\n use core::result::Result;\n+use core::result;\n+use core::vec;\n use std::list::{List, Nil, Cons};\n use std::list;\n use std::map::HashMap;\n@@ -390,8 +393,8 @@ fn check_crate(tcx: ty::ctxt,\n     -> (method_map, vtable_map) {\n \n     let ccx = @crate_ctxt_({trait_map: trait_map,\n-                            method_map: std::map::HashMap(),\n-                            vtable_map: std::map::HashMap(),\n+                            method_map: map::HashMap(),\n+                            vtable_map: map::HashMap(),\n                             coherence_info: @coherence::CoherenceInfo(),\n                             tcx: tcx\n                            });"}, {"sha": "8a1a56724461580b29dec380a9a3a5fdc042bb7a", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n+\n use core::result::Result;\n+use core::result;\n+use syntax::ast;\n use syntax::parse::token::special_idents;\n \n trait region_scope {"}, {"sha": "9f5866a210b1f1e3aed172b1765bb34ec10be915", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,8 +19,6 @@\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n-#[no_core];\n-\n #[legacy_modes];\n #[legacy_exports];\n \n@@ -29,12 +27,14 @@\n #[allow(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n+#[no_core];\n+\n extern mod core(vers = \"0.6\");\n+use core::*;\n+\n extern mod std(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n-use core::*;\n-\n /*\n Alternate names for some modules.\n "}, {"sha": "d32c2856ea4840986405cee1c8364eb3b9343b3c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n use syntax::ast;\n use syntax::codemap::{span};\n use syntax::visit;\n use syntax::print;\n+use syntax;\n+\n+use core::option;\n+use core::str;\n+use core::vec;\n+use std::map::HashMap;\n \n fn indent<R>(op: fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}, {"sha": "c8ecfb890042443490b74f31b85eb147dc93b8cb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n use middle::ty;\n use middle::ty::{arg, canon_mode};\n use middle::ty::{bound_copy, bound_const, bound_durable, bound_owned,\n@@ -34,6 +33,10 @@ use syntax::print::pprust::{path_to_str, proto_to_str,\n use syntax::{ast, ast_util};\n use syntax::ast_map;\n \n+use core::str;\n+use core::vec;\n+use std::map::HashMap;\n+\n fn note_and_explain_region(cx: ctxt,\n                            prefix: ~str,\n                            region: ty::Region,"}, {"sha": "bdb92611454b5c4f0ff9d59e536f8253b989c3f8", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,6 +17,10 @@ query AST-related information, shielding the rest of Rustdoc from its\n non-sendableness.\n */\n \n+use parse;\n+use util;\n+\n+use core::oldcomm;\n use rustc::back::link;\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n@@ -30,6 +34,7 @@ use syntax::ast_map;\n use syntax::codemap;\n use syntax::diagnostic::handler;\n use syntax::diagnostic;\n+use syntax;\n \n pub type Ctxt = {\n     ast: @ast::crate,"}, {"sha": "9acef45cc9217b50992eafb3489bdc3934c41c28", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,9 +15,13 @@ The attribute parser provides methods for pulling documentation out of\n an AST's attributes.\n */\n \n+use core::str;\n+use core::tuple;\n+use core::vec;\n use syntax::ast;\n use syntax::attr;\n-use core::tuple;\n+use syntax::codemap;\n+use syntax;\n \n pub type CrateAttrs = {\n     name: Option<~str>"}, {"sha": "7562016cf47c56afb9217727d63349caf91b7def", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,12 +16,20 @@ corresponding AST nodes. The information gathered here is the basis\n of the natural-language documentation for a crate.\n */\n \n+use astsrv;\n+use attr_parser;\n use doc::ItemUtils;\n+use doc;\n use extract::to_str;\n use fold::Fold;\n+use fold;\n+\n+use core::option;\n+use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n use std::map::HashMap;\n+use std::par;\n \n pub fn mk_pass() -> Pass {\n     {"}, {"sha": "5bce6c8ffff7d2cb363b678c4dd5526b3294bca9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use result::Result;\n+use core::cmp;\n+use core::os;\n+use core::result;\n+use core::run;\n+use core::vec;\n+use core::result::Result;\n use std::getopts;\n use std::cell::Cell;\n "}, {"sha": "f9c0fb829d0b514e6f5e670b0e6b4c526df3007c", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,8 +15,15 @@ If the first paragraph of a long description is short enough then it\n is interpreted as the brief description.\n */\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n+\n+use core::str;\n+use core::vec;\n+use std::par;\n \n pub fn mk_pass() -> Pass {\n     {"}, {"sha": "4b5f82235dd0b1ab4241784240a5d5703570e897", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,12 @@\n \n //! The document model\n \n+use doc;\n+\n+use core::cmp;\n+use core::option;\n+use core::vec;\n+\n pub type AstId = int;\n \n pub type Doc_ = {"}, {"sha": "46b21063774634d15a937bfb7e2abe2ddd5f6e2d", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,10 @@\n \n //! Escapes text sequences\n \n+use text_pass;\n+\n+use core::str;\n+\n pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"escape\", escape)\n }"}, {"sha": "b4912f13983dbd6a6622427f0ce7dd4de6a8d6a1", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,9 +10,15 @@\n \n //! Converts the Rust AST to the rustdoc document model\n \n-use syntax::ast;\n+use astsrv;\n use doc::ItemUtils;\n-use task::local_data::local_data_get;\n+use doc;\n+\n+use core::cast;\n+use core::task::local_data::local_data_get;\n+use core::vec;\n+use syntax::ast;\n+use syntax;\n \n /* can't import macros yet, so this is copied from token.rs. See its comment\n  * there. */"}, {"sha": "85f218d8f1629128e861b79429700a69184cb063", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use doc;\n+\n+use core::vec;\n+use std::par;\n+\n pub struct Fold<T> {\n     ctxt: T,\n     fold_doc: FoldDoc<T>,"}, {"sha": "cdf2c48dd7da00c7c2ea1c5ba877e8dcc5c6c84c", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,8 +10,17 @@\n \n //! Build indexes as appropriate for the markdown pass\n \n+use astsrv;\n+use config;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n+use markdown_pass;\n+use markdown_writer;\n+\n+use core::str;\n+use std::par;\n \n pub fn mk_pass(+config: config::Config) -> Pass {\n     {"}, {"sha": "39ba0bafb0d59c35517b429d22428acfdbe6e2a7", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,10 +10,20 @@\n \n //! Generate markdown from a document tree\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n+use fold;\n+use markdown_pass;\n use markdown_writer::Writer;\n use markdown_writer::WriterUtils;\n use markdown_writer::WriterFactory;\n+use sort_pass;\n+\n+use core::str;\n+use core::vec;\n+use std::par;\n+use syntax;\n \n pub fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n     let f = fn~(move writer_factory,"}, {"sha": "adad3c5f5e17e921a491f9eec58670d446df4d16", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use config;\n use doc::ItemUtils;\n-use io::ReaderUtil;\n+use doc;\n+\n+use core::io::ReaderUtil;\n+use core::io;\n+use core::libc;\n+use core::oldcomm;\n+use core::os;\n+use core::pipes;\n+use core::result;\n+use core::run;\n+use core::str;\n+use core::task;\n use std::future;\n+use syntax;\n \n pub enum WriteInstr {\n     Write(~str),"}, {"sha": "d582119081bec1cfe670ee0840950dbe85110212", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,10 +15,20 @@ Each page corresponds is a logical section. There may be pages for\n individual modules, pages for the crate, indexes, etc.\n */\n \n+use astsrv;\n+use config;\n use doc::{ItemUtils, PageUtils};\n+use doc;\n use fold::Fold;\n-use syntax::ast;\n+use fold;\n+use sort_pass;\n use util::NominalOp;\n+use util;\n+\n+use core::oldcomm;\n+use core::option;\n+use core::vec;\n+use syntax::ast;\n \n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     {"}, {"sha": "cc3bdf9f82c65616e1c2eff087d545052a81bc82", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use astsrv;\n+use doc;\n+\n+use core::vec;\n+\n /// A single operation on the document model\n pub type Pass = {\n     name: ~str,"}, {"sha": "e183c13b90fa64505869171f79d2b194fb2120aa", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,8 +10,12 @@\n \n //! Records the full path to items\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n+\n use syntax::ast;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "c5756571a410a790b4163a5649c0b32bd6a6334f", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,8 +10,14 @@\n \n //! Prunes things with the #[doc(hidden)] attribute\n \n+use astsrv;\n+use attr_parser;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n+\n+use core::vec;\n use std::map::HashMap;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "c1852128622b1fbcf1867f9c7abafe4e26066ed4", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,7 +12,13 @@\n \n #[legacy_exports];\n \n+use astsrv;\n+use doc;\n use fold::Fold;\n+use fold;\n+\n+use core::util;\n+use syntax::ast;\n \n export mk_pass;\n \n@@ -56,7 +62,7 @@ fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n             ast_map::node_item(item, _) => {\n                 item.vis == ast::public\n             }\n-            _ => core::util::unreachable()\n+            _ => util::unreachable()\n         }\n     }\n }"}, {"sha": "090016a6f9c160771f47b75c1a2984dfa84858da", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,8 +10,14 @@\n \n //! Breaks rustdocs into sections according to their headers\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n+\n+use core::str;\n+use std::par;\n \n pub fn mk_pass() -> Pass {\n     {"}, {"sha": "58349318bbbec14736072515cdc436f128f13fcd", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,7 +10,11 @@\n \n //! Sorts items by name\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n+use extract;\n+use sort_pass;\n \n pub fn mk_pass() -> Pass {\n     pure fn by_item_name(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {"}, {"sha": "4f69a307c204bcaec3f231660709b894298799cc", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,7 +10,11 @@\n \n //! Sorts items by type\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n+use extract;\n+use sort_pass;\n \n pub fn mk_pass() -> Pass {\n     pure fn by_score(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {"}, {"sha": "a660f0c42ad63be51a537b7dc64284140ff36536", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,11 +10,15 @@\n \n //! A general sorting pass\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n-use std::sort;\n+use fold;\n use util::NominalOp;\n \n+use std::sort;\n+\n pub type ItemLtEqOp = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n type ItemLtEq = NominalOp<ItemLtEqOp>;"}, {"sha": "30e91f95569ca3cfcd392ab1c49593775c4a670f", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,10 +10,15 @@\n \n //! Generic pass for performing an operation on all descriptions\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n use fold::Fold;\n+use fold;\n use util::NominalOp;\n \n+use std::par;\n+\n pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     {\n         name: name,"}, {"sha": "78f56ceaba7b911bae95e2a62a246718f691fddc", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,6 +16,10 @@ is interpreted as the brief description.\n */\n \n use doc::ItemUtils;\n+use doc;\n+use text_pass;\n+\n+use core::str;\n \n pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"trim\", |s| str::trim(s) )"}, {"sha": "ae69e83c3c71c91a041764abc1dae983217625ec", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,13 +10,20 @@\n \n //! Pulls type information out of the AST and attaches it to the document\n \n+use astsrv;\n use doc::ItemUtils;\n+use doc;\n+use extract::to_str;\n+use extract;\n use fold::Fold;\n+use fold;\n+\n+use core::vec;\n+use std::map::HashMap;\n+use std::par;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;\n-use std::map::HashMap;\n-use extract::to_str;\n \n pub fn mk_pass() -> Pass {\n     {"}, {"sha": "e18d1652a5b7e97ff93e2cd2544c3e420a58b461", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,6 +19,13 @@ instances where the string containing the doc comment is opened in the\n middle of a line, and each of the following lines is indented.\n */\n \n+use text_pass;\n+\n+use core::str;\n+use core::uint;\n+use core::vec;\n+use std::par;\n+\n pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"unindent\", unindent)\n }"}, {"sha": "998b64421d5068f4fff1e6846e91fc2c32800b59", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::oldcomm;\n+use core::task;\n+\n // Just a named container for our op, so it can have impls\n pub struct NominalOp<T> {\n     op: T"}, {"sha": "63d15f8f76ec3a1083459e4184995077efc2a2a1", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,12 +15,17 @@\n  * between tasks.\n  */\n \n-use private::{SharedMutableState, shared_mutable_state,\n-                clone_shared_mutable_state, unwrap_shared_mutable_state,\n-                get_shared_mutable_state, get_shared_immutable_state};\n-use sync::{Mutex,  mutex_with_condvars,\n-              RWlock, rwlock_with_condvars};\n-\n+use sync;\n+use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n+\n+use core::cast;\n+use core::pipes;\n+use core::private::{SharedMutableState, shared_mutable_state};\n+use core::private::{clone_shared_mutable_state, unwrap_shared_mutable_state};\n+use core::private::{get_shared_mutable_state, get_shared_immutable_state};\n+use core::ptr;\n+use core::task;\n+use core::util;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n pub struct Condvar { is_mutex: bool, failed: &mut bool, cond: &sync::Condvar }"}, {"sha": "9359a707d4c36ef9b1d1daa41e9a173c6a30dda8", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -34,10 +34,18 @@\n \n #[forbid(deprecated_mode)];\n \n+use list;\n use list::{List, Cons, Nil};\n-use cast::reinterpret_cast;\n-use sys::TypeDesc;\n-use libc::size_t;\n+\n+use core::at_vec;\n+use core::cast::reinterpret_cast;\n+use core::cast;\n+use core::libc::size_t;\n+use core::ptr;\n+use core::sys::TypeDesc;\n+use core::sys;\n+use core::uint;\n+use core::vec;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {"}, {"sha": "4cad9d1675de52b3a2d9b2344900118d122ce8a3", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,7 +9,11 @@\n // except according to those terms.\n \n #[forbid(deprecated_mode)];\n-use io::Reader;\n+\n+use core::io::Reader;\n+use core::iter;\n+use core::str;\n+use core::vec;\n \n pub trait ToBase64 {\n     pure fn to_base64() -> ~str;"}, {"sha": "828de1eb546b23b4dda275497273b271892c7a19", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,7 +10,10 @@\n \n #[forbid(deprecated_mode)];\n \n-use vec::{to_mut, from_elem};\n+use core::ops;\n+use core::uint;\n+use core::vec::{to_mut, from_elem};\n+use core::vec;\n \n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined."}, {"sha": "42facbc20d0897fe5df2895e26e54d40ac7b7105", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -37,6 +37,12 @@\n  */\n #[forbid(deprecated_mode)];\n \n+use core::libc;\n+use core::oldcomm;\n+use core::option;\n+use core::ptr;\n+use core::task;\n+\n /**\n  * The type representing a foreign chunk of memory\n  *"}, {"sha": "29c75e629e90e30975855b383ca224c95ba487f2", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n #[forbid(deprecated_mode)];\n+\n+use core::option;\n+\n /// A dynamic, mutable location.\n ///\n /// Similar to a mutable option type, but friendlier."}, {"sha": "7c126c7338b71267bd26e933c813239c9662407e", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,6 +11,10 @@\n #[forbid(deprecated_mode)];\n /// Additional general-purpose comparison functionality.\n \n+use core::f32;\n+use core::f64;\n+use core::float;\n+\n const fuzzy_epsilon: float = 1.0e-6;\n \n pub trait FuzzyEq {"}, {"sha": "850e53c2d48e74ada8b1c12f066e9288e40febf3", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,8 +17,9 @@ Higher level communication abstractions.\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n \n-use pipes::{GenericChan, GenericSmartChan, GenericPort,\n-            Chan, Port, Selectable, Peekable};\n+use core::pipes::{GenericChan, GenericSmartChan, GenericPort};\n+use core::pipes::{Chan, Port, Selectable, Peekable};\n+use core::pipes;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T: Owned, U: Owned> {"}, {"sha": "bcbe750ff7efa7a10e990d5519f64c8a8ce868d1", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,8 +11,9 @@\n #[forbid(deprecated_mode)];\n //! Unsafe debugging functions for inspecting values.\n \n-use cast::reinterpret_cast;\n-\n+use core::cast::reinterpret_cast;\n+use core::ptr;\n+use core::sys;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {"}, {"sha": "ff4fab0e1dfe68275565353c0c430013625d1053", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,9 +12,11 @@\n #[forbid(deprecated_mode)];\n #[forbid(non_camel_case_types)];\n \n-use option::{Some, None};\n-use dvec::DVec;\n-use core::cmp::{Eq};\n+use core::cmp::Eq;\n+use core::dvec::DVec;\n+use core::dvec;\n+use core::uint;\n+use core::vec;\n \n pub trait Deque<T> {\n     fn size() -> uint;"}, {"sha": "86cc15d068be96d74999f506615723ceda482ba3", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,8 +9,14 @@\n // except according to those terms.\n \n #[forbid(deprecated_mode)];\n+\n use serialize;\n \n+use core::io;\n+use core::ops;\n+use core::str;\n+use core::vec;\n+\n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:\n //     http://www.matroska.org/technical/specs/rfc/index.html\n@@ -54,6 +60,13 @@ enum EbmlEncoderTag {\n // --------------------------------------\n \n pub mod reader {\n+    use serialize;\n+\n+    use core::int;\n+    use core::io;\n+    use core::ops;\n+    use core::str;\n+    use core::vec;\n \n     // ebml reading\n \n@@ -271,7 +284,7 @@ pub mod reader {\n         fn read_u8 (&self) -> u8  { doc_as_u8 (self.next_doc(EsU8 )) }\n         fn read_uint(&self) -> uint {\n             let v = doc_as_u64(self.next_doc(EsUint));\n-            if v > (core::uint::max_value as u64) {\n+            if v > (::core::uint::max_value as u64) {\n                 fail fmt!(\"uint %? too large for this architecture\", v);\n             }\n             v as uint\n@@ -385,6 +398,9 @@ pub mod reader {\n }\n \n pub mod writer {\n+    use core::io;\n+    use core::str;\n+    use core::vec;\n \n     // ebml writing\n     pub struct Encoder {\n@@ -546,7 +562,7 @@ pub mod writer {\n         }\n     }\n \n-    impl Encoder: serialize::Encoder {\n+    impl Encoder: ::serialize::Encoder {\n         fn emit_nil(&self) {}\n \n         fn emit_uint(&self, v: uint) {"}, {"sha": "c1515a8b5e23f2b48e007ea822b140bb6f57d37d", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -38,10 +38,13 @@ block the scheduler thread, so will their pipes.\n */\n \n // The basic send/recv interface FlatChan and PortChan will implement\n+use core::io;\n use core::pipes::GenericChan;\n use core::pipes::GenericPort;\n-\n+use core::pipes;\n use core::sys::size_of;\n+use core::uint;\n+use core::vec;\n \n /**\n A FlatPort, consisting of a `BytePort` that recieves byte vectors,\n@@ -69,18 +72,20 @@ pub struct FlatChan<T, F: Flattener<T>, C: ByteChan> {\n Constructors for flat pipes that using serialization-based flattening.\n */\n pub mod serial {\n-\n     pub use DefaultEncoder = ebml::writer::Encoder;\n     pub use DefaultDecoder = ebml::reader::Decoder;\n \n-    use core::io::{Reader, Writer};\n-    use core::pipes::{Port, Chan};\n     use serialize::{Decodable, Encodable};\n     use flatpipes::flatteners::{DeserializingUnflattener,\n                                 SerializingFlattener};\n     use flatpipes::flatteners::{deserialize_buffer, serialize_value};\n     use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n     use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n+    use flatpipes::{FlatPort, FlatChan};\n+\n+    use core::io::{Reader, Writer};\n+    use core::pipes::{Port, Chan};\n+    use core::pipes;\n \n     pub type ReaderPort<T, R> = FlatPort<\n         T, DeserializingUnflattener<DefaultDecoder, T>,\n@@ -141,7 +146,6 @@ pub mod serial {\n         let (port, chan) = pipes::stream();\n         return (pipe_port(move port), pipe_chan(move chan));\n     }\n-\n }\n \n // FIXME #4074 this doesn't correctly enforce POD bounds\n@@ -159,9 +163,11 @@ pub mod pod {\n \n     use core::io::{Reader, Writer};\n     use core::pipes::{Port, Chan};\n+    use core::pipes;\n     use flatpipes::flatteners::{PodUnflattener, PodFlattener};\n     use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n     use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n+    use flatpipes::{FlatPort, FlatChan};\n \n     pub type ReaderPort<T: Copy Owned, R> =\n         FlatPort<T, PodUnflattener<T>, ReaderBytePort<R>>;\n@@ -242,7 +248,7 @@ pub trait ByteChan {\n \n const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n \n-impl<T, U: Unflattener<T>, P: BytePort> FlatPort<T, U, P>: GenericPort<T> {\n+pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n     fn recv() -> T {\n         match self.try_recv() {\n             Some(move val) => move val,\n@@ -287,7 +293,7 @@ impl<T, U: Unflattener<T>, P: BytePort> FlatPort<T, U, P>: GenericPort<T> {\n     }\n }\n \n-impl<T, F: Flattener<T>, C: ByteChan> FlatChan<T, F, C>: GenericChan<T> {\n+impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C>: GenericChan<T> {\n     fn send(val: T) {\n         self.byte_chan.send(CONTINUE.to_vec());\n         let bytes = self.flattener.flatten(move val);\n@@ -299,7 +305,7 @@ impl<T, F: Flattener<T>, C: ByteChan> FlatChan<T, F, C>: GenericChan<T> {\n     }\n }\n \n-impl<T, U: Unflattener<T>, P: BytePort> FlatPort<T, U, P> {\n+pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P> {\n     static fn new(u: U, p: P) -> FlatPort<T, U, P> {\n         FlatPort {\n             unflattener: move u,\n@@ -308,7 +314,7 @@ impl<T, U: Unflattener<T>, P: BytePort> FlatPort<T, U, P> {\n     }\n }\n \n-impl<T, F: Flattener<T>, C: ByteChan> FlatChan<T, F, C> {\n+pub impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n     static fn new(f: F, c: C) -> FlatChan<T, F, C> {\n         FlatChan {\n             flattener: move f,\n@@ -319,14 +325,16 @@ impl<T, F: Flattener<T>, C: ByteChan> FlatChan<T, F, C> {\n \n \n pub mod flatteners {\n+    use ebml;\n+    use flatpipes::util::BufReader;\n+    use json;\n+    use serialize::{Encoder, Decoder, Encodable, Decodable};\n \n-    use core::sys::size_of;\n-\n-    use serialize::{Encoder, Decoder,\n-                        Encodable, Decodable};\n-\n+    use core::cast;\n     use core::io::{Writer, Reader, BytesWriter, ReaderUtil};\n-    use flatpipes::util::BufReader;\n+    use core::ptr;\n+    use core::sys::size_of;\n+    use core::vec;\n \n     // XXX: Is copy/send equivalent to pod?\n     pub struct PodUnflattener<T: Copy Owned> {\n@@ -488,9 +496,9 @@ pub mod flatteners {\n }\n \n pub mod bytepipes {\n-\n     use core::io::{Writer, Reader, ReaderUtil};\n     use core::pipes::{Port, Chan};\n+    use core::pipes;\n \n     pub struct ReaderBytePort<R: Reader> {\n         reader: R\n@@ -556,12 +564,12 @@ pub mod bytepipes {\n     pub impl PipeBytePort: BytePort {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             if self.buf.len() >= count {\n-                let mut bytes = core::util::replace(&mut self.buf, ~[]);\n+                let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n                 self.buf = bytes.slice(count, bytes.len());\n                 bytes.truncate(count);\n                 return Some(bytes);\n             } else if self.buf.len() > 0 {\n-                let mut bytes = core::util::replace(&mut self.buf, ~[]);\n+                let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n                 assert count > bytes.len();\n                 match self.try_recv(count - bytes.len()) {\n                     Some(move rest) => {\n@@ -580,7 +588,7 @@ pub mod bytepipes {\n                     None => return None\n                 }\n             } else {\n-                core::util::unreachable()\n+                ::core::util::unreachable()\n             }\n         }\n     }\n@@ -612,8 +620,8 @@ pub mod bytepipes {\n \n // XXX: This belongs elsewhere\n mod util {\n-\n-    use io::{Reader, BytesReader};\n+    use core::io::{Reader, BytesReader};\n+    use core::io;\n \n     pub struct BufReader {\n         buf: ~[u8],\n@@ -632,7 +640,7 @@ mod util {\n             // Recreating the BytesReader state every call since\n             // I can't get the borrowing to work correctly\n             let bytes_reader = BytesReader {\n-                bytes: core::util::id::<&[u8]>(self.buf),\n+                bytes: ::core::util::id::<&[u8]>(self.buf),\n                 pos: self.pos\n             };\n "}, {"sha": "6a24e1e58177485783883fa7eb8d38c198a0e2b4", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -22,8 +22,7 @@\n  */\n \n use core::cmp::{Eq, Ord};\n-use option::{Some, None};\n-use option = option;\n+use core::option::{Some, None};\n \n pub type Treemap<K, V> = @TreeNode<K, V>;\n "}, {"sha": "ccb26a4439d146cae8643bd1577dbd059e73ec5f", "filename": "src/libstd/future.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -21,9 +21,12 @@\n  * ~~~\n  */\n \n-use either::Either;\n-use pipes::{recv, oneshot, ChanOne, PortOne, send_one, recv_one};\n-use cast::copy_lifetime;\n+use core::cast::copy_lifetime;\n+use core::cast;\n+use core::either::Either;\n+use core::option;\n+use core::pipes::{recv, oneshot, ChanOne, PortOne, send_one, recv_one};\n+use core::task;\n \n #[doc = \"The future type\"]\n pub struct Future<A> {"}, {"sha": "acbe32c74dc4942e3ed946d36c853b2f7b9873f2", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -76,8 +76,11 @@\n \n use core::cmp::Eq;\n use core::result::{Err, Ok};\n+use core::result;\n use core::option;\n use core::option::{Some, None};\n+use core::str;\n+use core::vec;\n \n #[deriving_eq]\n enum Name {\n@@ -450,6 +453,10 @@ enum FailType {\n  *  groups of short and long option names, together.\n  */\n pub mod groups {\n+    use getopts::Result;\n+\n+    use core::str;\n+    use core::vec;\n \n     /** one group of options, e.g., both -h and --help, along with\n      * their shared description and properties"}, {"sha": "c3f30c45e62355786ab5270cbd54f6480afe7a5e", "filename": "src/libstd/json.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,11 +15,19 @@\n \n //! json serialization\n \n-use core::cmp::{Eq, Ord};\n-use io::{WriterUtil, ReaderUtil};\n-use send_map::linear;\n+use serialize;\n use sort::Sort;\n \n+use core::char;\n+use core::cmp::{Eq, Ord};\n+use core::float;\n+use core::io::{WriterUtil, ReaderUtil};\n+use core::io;\n+use core::send_map::linear;\n+use core::str;\n+use core::to_str;\n+use core::vec;\n+\n /// Represents a json value\n pub enum Json {\n     Number(float),"}, {"sha": "5922b20300e32551e20af011a6c389205c4dbd09", "filename": "src/libstd/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -13,8 +13,8 @@\n \n use core::cmp::Eq;\n use core::option;\n-use option::*;\n-use option::{Some, None};\n+use core::option::*;\n+use core::vec;\n \n #[deriving_eq]\n pub enum List<T> {"}, {"sha": "0e5a7972838f45b7202b601b10e86ba32c2fdc65", "filename": "src/libstd/map.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,14 +11,17 @@\n //! A map type\n #[forbid(deprecated_mode)];\n \n-use io::WriterUtil;\n-use to_str::ToStr;\n-use mutable::Mut;\n-use send_map::linear::LinearMap;\n-\n use core::cmp::Eq;\n-use hash::Hash;\n-use to_bytes::IterBytes;\n+use core::hash::Hash;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::ops;\n+use core::to_str::ToStr;\n+use core::mutable::Mut;\n+use core::send_map::linear::LinearMap;\n+use core::to_bytes::IterBytes;\n+use core::uint;\n+use core::vec;\n \n /// A convenience type to treat a hashmap as a set\n pub type Set<K:Eq IterBytes Hash> = HashMap<K, ()>;\n@@ -103,7 +106,7 @@ pub trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n     pure fn each_value_ref(fn(value: &V) -> bool);\n }\n \n-mod util {\n+pub mod util {\n     pub type Rational = {num: int, den: int}; // : int::positive(*.den);\n \n     pub pure fn rational_leq(x: Rational, y: Rational) -> bool {\n@@ -117,6 +120,13 @@ mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n pub mod chained {\n+    use map::util;\n+\n+    use core::io;\n+    use core::ops;\n+    use core::option;\n+    use core::uint;\n+    use core::vec;\n \n     const initial_capacity: uint = 32u; // 2^5\n "}, {"sha": "d10533008d965d9018f82cad9c34be5dabb6f518", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,10 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n pub pure fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     // subtle: if orig_len is merely uint, then the code below\n     // which performs shifts by 32 bits or more has undefined"}, {"sha": "ebe0ac690fe90b08a3544e16883b874c6d0cd6d1", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,6 +11,14 @@\n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n #[forbid(deprecated_mode)];\n \n+use core::libc;\n+use core::oldcomm;\n+use core::ptr;\n+use core::result;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n use iotask = uv::iotask::IoTask;\n use interact = uv::iotask::interact;\n \n@@ -139,6 +147,14 @@ pub fn get_addr(node: &str, iotask: iotask)\n }\n \n pub mod v4 {\n+    use uv::ll;\n+\n+    use core::ptr;\n+    use core::result;\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n+\n     /**\n      * Convert a str to `ip_addr`\n      *\n@@ -225,6 +241,9 @@ pub mod v4 {\n     }\n }\n pub mod v6 {\n+    use core::result;\n+    use core::str;\n+\n     /**\n      * Convert a str to `ip_addr`\n      *"}, {"sha": "ca365e2a7d3e34a1abfd504ffd47a17875e34652", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,13 +12,23 @@\n // XXX Need FFI fixes\n #[allow(deprecated_mode)];\n \n+use future;\n+use future_spawn = future::spawn;\n use ip = net_ip;\n+use uv;\n use uv::iotask;\n use uv::iotask::IoTask;\n-use future_spawn = future::spawn;\n-use result::{Result};\n-use libc::size_t;\n-use io::{Reader, ReaderUtil, Writer};\n+\n+use core::io::{Reader, ReaderUtil, Writer};\n+use core::io;\n+use core::libc::size_t;\n+use core::libc;\n+use core::oldcomm;\n+use core::ptr;\n+use core::result::{Result};\n+use core::result;\n+use core::uint;\n+use core::vec;\n \n #[nolink]\n extern mod rustrt {\n@@ -901,6 +911,8 @@ fn tear_down_socket_data(socket_data: @TcpSocketData) unsafe {\n // shared implementation for tcp::read\n fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n     -> result::Result<~[u8],TcpErrData> unsafe {\n+    use timer;\n+\n     log(debug, ~\"starting tcp::read\");\n     let iotask = (*socket_data).iotask;\n     let rs_result = read_start_common_impl(socket_data);\n@@ -1258,6 +1270,17 @@ type TcpBufferedSocketData = {\n \n //#[cfg(test)]\n mod test {\n+    use net;\n+    use net::ip;\n+    use uv;\n+\n+    use core::io;\n+    use core::oldcomm;\n+    use core::result;\n+    use core::str;\n+    use core::task;\n+    use core::vec;\n+\n     // FIXME don't run on fbsd or linux 32 bit (#2064)\n     #[cfg(target_os=\"win32\")]\n     #[cfg(target_os=\"darwin\")]\n@@ -1566,7 +1589,8 @@ mod test {\n     }\n \n     fn impl_tcp_socket_impl_reader_handles_eof() {\n-        use io::{Reader,ReaderUtil};\n+        use core::io::{Reader,ReaderUtil};\n+\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 10041u;"}, {"sha": "f920e7e9da646389ec75274535e288c72f229df6", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,8 +11,24 @@\n //! Types/fns concerning URLs (see RFC 3986)\n #[forbid(deprecated_mode)];\n \n-use io::ReaderUtil;\n-use send_map::linear::LinearMap;\n+use map;\n+use map::HashMap;\n+\n+use core::cmp::Eq;\n+use core::dvec::DVec;\n+use core::from_str::FromStr;\n+use core::io::{Reader, ReaderUtil};\n+use core::io;\n+use core::send_map::linear::LinearMap;\n+use core::send_map;\n+use core::str;\n+use core::to_bytes::IterBytes;\n+use core::to_bytes;\n+use core::to_str::ToStr;\n+use core::to_str;\n+use core::uint;\n+use core::util;\n+use core::vec;\n \n #[deriving_eq]\n struct Url {\n@@ -654,7 +670,7 @@ pub pure fn from_str(rawurl: &str) -> Result<Url, ~str> {\n     Ok(Url::new(scheme, userinfo, host, port, path, query, fragment))\n }\n \n-impl Url: from_str::FromStr {\n+impl Url: FromStr {\n     static pure fn from_str(s: &str) -> Option<Url> {\n         match from_str(s) {\n             Ok(move url) => Some(url),"}, {"sha": "d88d298ef18d074ce93fe859a0265725fb8980c3", "filename": "src/libstd/par.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,6 +10,12 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::cast;\n+use core::ptr;\n+use core::sys;\n+use core::uint;\n+use core::vec;\n+\n use future_spawn = future::spawn;\n \n "}, {"sha": "87699a9c894e6331f4b423baeda089212b7b04e6", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,19 +10,21 @@\n \n #[forbid(deprecated_mode)];\n \n-use io::Writer;\n-use io::WriterUtil;\n use serialize;\n \n-pub struct Encoder {\n+use core::io::Writer;\n+use core::io::WriterUtil;\n+use core::io;\n+\n+pub struct Serializer {\n     wr: io::Writer,\n }\n \n-pub fn Encoder(wr: io::Writer) -> Encoder {\n-    Encoder { wr: wr }\n+pub fn Serializer(wr: io::Writer) -> Serializer {\n+    Serializer { wr: wr }\n }\n \n-pub impl Encoder: serialize::Encoder {\n+pub impl Serializer: serialize::Encoder {\n     fn emit_nil(&self) {\n         self.wr.write_str(~\"()\")\n     }"}, {"sha": "4281867635918f0df03af2c11378a2e4fe496b0a", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -2,7 +2,8 @@\n //! A priority queue implemented with a binary heap\n \n use core::cmp::Ord;\n-use ptr::addr_of;\n+use core::ptr::addr_of;\n+use core::vec;\n \n #[abi = \"rust-intrinsic\"]\n extern \"C\" mod rusti {"}, {"sha": "f384cceb41be239307142f190dcceb441521abd0", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,7 +11,9 @@\n // FIXME #3921. This is unsafe because linenoise uses global mutable\n // state without mutexes.\n \n-use libc::{c_char, c_int};\n+use core::libc::{c_char, c_int};\n+use core::str;\n+use core::task;\n \n extern mod rustrt {\n     #[legacy_exports];\n@@ -79,4 +81,4 @@ pub unsafe fn complete(cb: CompletionCb) unsafe {\n     }\n \n     rustrt::linenoiseSetCompletionCallback(callback);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7196dfad8e5167b5139b335e53d618f574b64029", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -35,6 +35,13 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::cast;\n+use core::char;\n+use core::option;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n /// The type of ropes.\n pub type Rope = node::Root;\n \n@@ -441,6 +448,8 @@ pub fn loop_leaves(rope: Rope, it: fn(node::Leaf) -> bool) -> bool{\n \n pub mod iterator {\n     pub mod leaf {\n+        use rope::node;\n+\n         pub fn start(rope: Rope) -> node::leaf_iterator::T {\n             match (rope) {\n               node::Empty      => return node::leaf_iterator::empty(),\n@@ -452,6 +461,8 @@ pub mod iterator {\n         }\n     }\n     pub mod char {\n+        use rope::node;\n+\n         pub fn start(rope: Rope) -> node::char_iterator::T {\n             match (rope) {\n               node::Empty      => return node::char_iterator::empty(),\n@@ -543,7 +554,15 @@ pub fn char_at(rope: Rope, pos: uint) -> char {\n /*\n  Section: Implementation\n */\n-mod node {\n+pub mod node {\n+    use rope::node;\n+\n+    use core::cast;\n+    use core::char;\n+    use core::option;\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n \n     /// Implementation of type `rope`\n     pub enum Root {\n@@ -1116,6 +1135,9 @@ mod node {\n     }\n \n     pub mod leaf_iterator {\n+        use core::option;\n+        use core::vec;\n+\n         pub type T = {\n             stack:            ~[mut @Node],\n             mut stackpos: int\n@@ -1153,6 +1175,11 @@ mod node {\n     }\n \n     pub mod char_iterator {\n+        use rope::node::leaf_iterator;\n+\n+        use core::option;\n+        use core::str;\n+\n         pub type T = {\n             leaf_iterator: leaf_iterator::T,\n             mut leaf:  Option<Leaf>,"}, {"sha": "97d5ad18780360ef4e8ac2c5371dc1847ed98c0f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,6 +17,9 @@ Core encoding and decoding interfaces.\n #[forbid(deprecated_mode)];\n #[forbid(non_camel_case_types)];\n \n+use core::at_vec;\n+use core::vec;\n+\n pub trait Encoder {\n     // Primitive types:\n     fn emit_nil(&self);"}, {"sha": "264a8791e0185109ba1ffdab1c52629d371ab6da", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -24,6 +24,10 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n /*\n  * A SHA-1 implementation derived from Paul E. Jones's reference\n  * implementation, which is written for clarity, not speed. At some"}, {"sha": "e412d237e65bf2136c83ce545385e0d47e14b8b8", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,10 +14,13 @@\n  */\n #[forbid(deprecated_mode)];\n \n+use map;\n+use map::Map;\n+\n+use core::dvec::DVec;\n+use core::ops;\n use core::option;\n use core::option::{Some, None};\n-use dvec::DVec;\n-use map::Map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be."}, {"sha": "b497f63b67423cf92403cba13e6fe9dcfc41b188", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,9 +11,11 @@\n //! Sorting methods\n #[forbid(deprecated_mode)];\n \n-use vec::{len, push};\n use core::cmp::{Eq, Ord};\n-use dvec::DVec;\n+use core::dvec::DVec;\n+use core::util;\n+use core::vec::{len, push};\n+use core::vec;\n \n type Le<T> = pure fn(v1: &T, v2: &T) -> bool;\n "}, {"sha": "669c8b14fd9439d36507fe07acb2feeb39422fa1", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -26,15 +26,15 @@ not required in or otherwise suitable for the core library.\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n-#[no_core];\n-\n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n // XXX this is set to allow because there are two methods in encoding\n // that can't be silenced otherwise. Most every module is set to forbid\n #[allow(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+#[no_core];\n+\n extern mod core(vers = \"0.6\");\n use core::*;\n "}, {"sha": "66a3d6499563eeb817fc5ff40eea5a0e64cc375c", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,7 +17,13 @@\n  * in std.\n  */\n \n-use private::{Exclusive, exclusive};\n+use core::option;\n+use core::pipes;\n+use core::private::{Exclusive, exclusive};\n+use core::ptr;\n+use core::task;\n+use core::util;\n+use core::vec;\n \n /****************************************************************************\n  * Internals"}, {"sha": "35bea7b01b4431668d95286a05f78abfc0135722", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,8 +11,11 @@\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n-use pipes::{Chan, Port};\n-use task::{SchedMode, SingleThreaded};\n+use core::pipes::{Chan, Port};\n+use core::pipes;\n+use core::task::{SchedMode, SingleThreaded};\n+use core::task;\n+use core::vec;\n \n enum Msg<T> {\n     Execute(~fn(&T)),"}, {"sha": "afb9290f6cfbd442f8cead90afade5dfe0adf2a5", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,8 +12,9 @@\n \n #[forbid(deprecated_mode)];\n \n-use core::option;\n-use option::{None, Some};\n+use core::os;\n+use core::rand;\n+use core::str;\n \n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let r = rand::Rng();"}, {"sha": "ae5949e6f183d42ad2cfcc58a8406d7627144e7e", "filename": "src/libstd/term.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,7 +11,12 @@\n //! Simple ANSI color library\n #[forbid(deprecated_mode)];\n \n-use core::Option;\n+use core::i32;\n+use core::io;\n+use core::option;\n+use core::os;\n+use core::str;\n+use core::vec;\n \n // FIXME (#2807): Windows support.\n "}, {"sha": "a3959295735f227a29342acabf231877ae28b65d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,17 +17,28 @@\n \n #[forbid(deprecated_mode)];\n \n+use getopts;\n+use sort;\n+use term;\n+\n use core::cmp::Eq;\n-use either::Either;\n-use result::{Ok, Err};\n-use io::WriterUtil;\n-use libc::size_t;\n-use task::TaskBuilder;\n+use core::either::Either;\n+use core::either;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::libc::size_t;\n+use core::oldcomm;\n+use core::option;\n+use core::result;\n+use core::str;\n+use core::task::TaskBuilder;\n+use core::task;\n+use core::vec;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n     #[legacy_exports];\n-    fn rust_sched_threads() -> libc::size_t;\n+    fn rust_sched_threads() -> size_t;\n }\n \n // The name of a test. By convention this follows the rules for rust"}, {"sha": "61f9dbb6cea50937fbd08c4f8483e2ef95b3f867", "filename": "src/libstd/time.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -11,9 +11,13 @@\n #[forbid(deprecated_mode)];\n \n use core::cmp::Eq;\n-use libc::{c_char, c_int, c_long, size_t, time_t};\n-use io::{Reader, ReaderUtil};\n-use result::{Result, Ok, Err};\n+use core::int;\n+use core::libc::{c_char, c_int, c_long, size_t, time_t};\n+use core::i32;\n+use core::io::{Reader, ReaderUtil};\n+use core::io;\n+use core::result::{Result, Ok, Err};\n+use core::str;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {"}, {"sha": "ae132af8b6b369a423c641c959718e7d5bb1081c", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,9 +12,16 @@\n \n #[forbid(deprecated_mode)];\n \n+use uv;\n use uv::iotask;\n use uv::iotask::IoTask;\n \n+use core::either;\n+use core::libc;\n+use core::oldcomm;\n+use core::ptr;\n+use core;\n+\n /**\n  * Wait for timeout period then send provided value over a channel\n  *\n@@ -32,7 +39,9 @@ use uv::iotask::IoTask;\n  * * val - a value of type T to send over the provided `ch`\n  */\n pub fn delayed_send<T: Owned>(iotask: IoTask,\n-                                  msecs: uint, ch: oldcomm::Chan<T>, val: T) {\n+                              msecs: uint,\n+                              ch: oldcomm::Chan<T>,\n+                              val: T) {\n         unsafe {\n             let timer_done_po = oldcomm::Port::<()>();\n             let timer_done_ch = oldcomm::Chan(&timer_done_po);\n@@ -108,8 +117,9 @@ pub fn sleep(iotask: IoTask, msecs: uint) {\n  * be a `some(T)`. If not, then `none` will be returned.\n  */\n pub fn recv_timeout<T: Copy Owned>(iotask: IoTask,\n-                              msecs: uint,\n-                              wait_po: oldcomm::Port<T>) -> Option<T> {\n+                                   msecs: uint,\n+                                   wait_po: oldcomm::Port<T>)\n+                                -> Option<T> {\n     let timeout_po = oldcomm::Port::<()>();\n     let timeout_ch = oldcomm::Chan(&timeout_po);\n     delayed_send(iotask, msecs, timeout_ch, ());"}, {"sha": "0cbfbe87de4c93d289c27724b13efd9b2f86e7f3", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,10 +16,15 @@ use ll = uv_ll;\n use iotask = uv_iotask;\n use get_gl = get;\n use uv_iotask::{IoTask, spawn_iotask};\n-use private::{chan_from_global_ptr, weaken_task};\n+\n+use core::either::{Left, Right};\n+use core::libc;\n use core::oldcomm::{Port, Chan, select2, listen};\n-use task::TaskBuilder;\n-use either::{Left, Right};\n+use core::private::{chan_from_global_ptr, weaken_task};\n+use core::str;\n+use core::task::TaskBuilder;\n+use core::task;\n+use core::vec;\n \n extern mod rustrt {\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;"}, {"sha": "ed2da88bac417bc19f2ff40f9806375be809bbae", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,12 +16,15 @@\n  */\n #[forbid(deprecated_mode)];\n \n-use libc::c_void;\n-use ptr::addr_of;\n-use core::oldcomm::{Port, Chan, listen};\n-use task::TaskBuilder;\n use ll = uv_ll;\n \n+use core::libc::c_void;\n+use core::libc;\n+use core::oldcomm::{Port, Chan, listen};\n+use core::ptr::addr_of;\n+use core::task::TaskBuilder;\n+use core::task;\n+\n /// Used to abstract-away direct interaction with a libuv loop.\n pub enum IoTask {\n     IoTask_({"}, {"sha": "b4d617afdeebf47bd98ab5bd9a693df368876a02", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -32,8 +32,12 @@\n \n #[allow(non_camel_case_types)]; // C types\n \n-use libc::size_t;\n-use ptr::to_unsafe_ptr;\n+use core::libc::size_t;\n+use core::libc;\n+use core::ptr::to_unsafe_ptr;\n+use core::ptr;\n+use core::str;\n+use core::vec;\n \n // libuv struct mappings\n pub type uv_ip4_addr = {\n@@ -315,6 +319,8 @@ pub type uv_getaddrinfo_t = {\n };\n \n pub mod uv_ll_struct_stubgen {\n+    use core::ptr;\n+\n     pub fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         return gen_stub_os();\n         #[cfg(target_os = \"linux\")]"}, {"sha": "45c95146e8e8c1958f6c900dffd90a27ba8586b0", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,15 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n-use send_map::linear::LinearMap;\n-use pipes::{recv, oneshot, PortOne, send_one};\n-use either::{Right,Left,Either};\n-\n use json;\n use sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n+use core::either::{Either, Left, Right};\n+use core::io;\n+use core::option;\n+use core::pipes::{recv, oneshot, PortOne, send_one};\n+use core::result;\n+use core::send_map::linear::LinearMap;\n+use core::task;\n+use core::to_bytes;\n+\n /**\n *\n * This is a loose clone of the fbuild build system, made a touch more"}, {"sha": "c7c8c77c70fa3c14335e5f7ae9bc1f1df2423462", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,10 +10,17 @@\n \n // The Rust abstract syntax tree.\n \n-use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n+use ast;\n use codemap::{span, FileName};\n use parse::token;\n \n+use core::cast;\n+use core::cmp;\n+use core::ptr;\n+use core::task;\n+use core::to_bytes;\n+use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n #[auto_encode]\n #[auto_decode]\n type spanned<T> = {node: T, span: span};"}, {"sha": "f35d8c4e1c48580f69eb5fcfafce246ce44843bc", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,13 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map;\n-use std::map::HashMap;\n use ast::*;\n-use print::pprust;\n+use ast;\n use ast_util::{path_to_ident, stmt_id};\n+use ast_util;\n+use attr;\n+use codemap;\n use diagnostic::span_handler;\n use parse::token::ident_interner;\n+use print::pprust;\n+use visit;\n+\n+use core::cmp;\n+use core::either;\n+use core::str;\n+use core::vec;\n+use std::map::HashMap;\n+use std::map;\n+use std;\n \n enum path_elt {\n     path_mod(ident),"}, {"sha": "eaa61b304cd16816f20c594f21279340910ed42b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use codemap::{span, BytePos};\n use ast::*;\n+use ast;\n+use ast_util;\n+use codemap::{span, BytePos};\n+use visit;\n+\n+use core::cmp;\n+use core::int;\n+use core::option;\n+use core::str;\n+use core::to_bytes;\n+use core::vec;\n \n pure fn spanned<T>(+lo: BytePos, +hi: BytePos, +t: T) -> spanned<T> {\n     respan(mk_sp(lo, hi), move t)\n@@ -262,10 +272,10 @@ pure fn is_call_expr(e: @expr) -> bool {\n }\n \n // This makes def_id hashable\n-impl def_id : core::to_bytes::IterBytes {\n+impl def_id : to_bytes::IterBytes {\n     #[inline(always)]\n-    pure fn iter_bytes(&self, +lsb0: bool, f: core::to_bytes::Cb) {\n-        core::to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f);\n+    pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n+        to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f);\n     }\n }\n "}, {"sha": "5062cefc4971c5176a5cd81cddae56b9a704eab2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,13 +10,21 @@\n \n // Functions dealing with attributes and meta_items\n \n-use std::map;\n-use std::map::HashMap;\n-use either::Either;\n-use diagnostic::span_handler;\n+use ast;\n use ast_util::{spanned, dummy_spanned};\n-use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use attr;\n use codemap::BytePos;\n+use diagnostic::span_handler;\n+use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n+\n+use core::cmp;\n+use core::either::Either;\n+use core::either;\n+use core::option;\n+use core::vec;\n+use std::map::HashMap;\n+use std::map;\n+use std;\n \n // Constructors\n export mk_name_value_item_str;"}, {"sha": "b717d0847896a626ba693ca638661707b0a2e744", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -21,7 +21,14 @@ source code snippets, etc.\n \n */\n \n-use dvec::DVec;\n+use ast_util;\n+\n+use core::cmp;\n+use core::dvec::DVec;\n+use core::str;\n+use core::to_bytes;\n+use core::uint;\n+use core::vec;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n trait Pos {"}, {"sha": "71113a468387047469f52729079ff81d7a524a7e", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::term;\n-use io::WriterUtil;\n use codemap::span;\n+use codemap;\n+\n+use core::cmp;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::option;\n+use core::str;\n+use core::vec;\n+use std::term;\n \n export emitter, emit;\n export level, fatal, error, warning, note;"}, {"sha": "b8fe00e246c7c14d5fa479c19499c570380e0e53", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -88,8 +88,12 @@ node twice.\n \n */\n \n-use ext::base::*;\n+use ast_util;\n+use attr;\n use codemap::span;\n+use ext::base::*;\n+\n+use core::vec;\n use std::map;\n use std::map::HashMap;\n \n@@ -259,11 +263,20 @@ priv impl ext_ctxt {\n         @{span: span, global: false, idents: strs, rp: None, types: ~[]}\n     }\n \n+    fn path_global(span: span, strs: ~[ast::ident]) -> @ast::path {\n+        @{span: span, global: true, idents: strs, rp: None, types: ~[]}\n+    }\n+\n     fn path_tps(span: span, strs: ~[ast::ident],\n                 tps: ~[@ast::Ty]) -> @ast::path {\n         @{span: span, global: false, idents: strs, rp: None, types: tps}\n     }\n \n+    fn path_tps_global(span: span, strs: ~[ast::ident],\n+                       tps: ~[@ast::Ty]) -> @ast::path {\n+        @{span: span, global: true, idents: strs, rp: None, types: tps}\n+    }\n+\n     fn ty_path(span: span, strs: ~[ast::ident],\n                tps: ~[@ast::Ty]) -> @ast::Ty {\n         @{id: self.next_id(),\n@@ -334,6 +347,10 @@ priv impl ext_ctxt {\n         self.expr(span, ast::expr_path(self.path(span, strs)))\n     }\n \n+    fn expr_path_global(span: span, strs: ~[ast::ident]) -> @ast::expr {\n+        self.expr(span, ast::expr_path(self.path_global(span, strs)))\n+    }\n+\n     fn expr_var(span: span, var: ~str) -> @ast::expr {\n         self.expr_path(span, ~[self.ident_of(var)])\n     }\n@@ -424,7 +441,7 @@ fn mk_ser_impl(\n     let ty_param = cx.bind_path(\n         span,\n         cx.ident_of(~\"__S\"),\n-        cx.path(\n+        cx.path_global(\n             span,\n             ~[\n                 cx.ident_of(~\"std\"),\n@@ -436,7 +453,7 @@ fn mk_ser_impl(\n     );\n \n     // Make a path to the std::serialize::Encodable trait.\n-    let path = cx.path_tps(\n+    let path = cx.path_tps_global(\n         span,\n         ~[\n             cx.ident_of(~\"std\"),\n@@ -468,7 +485,7 @@ fn mk_deser_impl(\n     let ty_param = cx.bind_path(\n         span,\n         cx.ident_of(~\"__D\"),\n-        cx.path(\n+        cx.path_global(\n             span,\n             ~[\n                 cx.ident_of(~\"std\"),\n@@ -480,7 +497,7 @@ fn mk_deser_impl(\n     );\n \n     // Make a path to the std::serialize::Decodable trait.\n-    let path = cx.path_tps(\n+    let path = cx.path_tps_global(\n         span,\n         ~[\n             cx.ident_of(~\"std\"),\n@@ -815,7 +832,7 @@ fn mk_deser_fields(\n             cx.expr_blk(\n                 cx.expr_call(\n                     span,\n-                    cx.expr_path(span, ~[\n+                    cx.expr_path_global(span, ~[\n                         cx.ident_of(~\"std\"),\n                         cx.ident_of(~\"serialize\"),\n                         cx.ident_of(~\"Decodable\"),\n@@ -1019,7 +1036,7 @@ fn mk_enum_deser_variant_nary(\n         let expr_lambda = cx.lambda_expr(\n             cx.expr_call(\n                 span,\n-                cx.expr_path(span, ~[\n+                cx.expr_path_global(span, ~[\n                     cx.ident_of(~\"std\"),\n                     cx.ident_of(~\"serialize\"),\n                     cx.ident_of(~\"Decodable\"),"}, {"sha": "dc774805ed3f648390af5da88e47ff61b4b89056", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,12 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n-use parse::parser;\n-use diagnostic::span_handler;\n-use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n+use ast;\n use ast_util::dummy_sp;\n-use parse::token;\n+use codemap;\n+use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n+use diagnostic::span_handler;\n+use ext;\n+use parse;\n+use parse::{parser, token};\n+\n+use core::io;\n+use core::vec;\n+use std::map::HashMap;\n \n // new-style macro! tt code:\n //"}, {"sha": "d63f14b57749a1d2df13677fbe1a6bafd99295ec", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n+use codemap;\n use codemap::span;\n use ext::base::ext_ctxt;\n+use ext::build;\n+\n+use core::dvec;\n+use core::option;\n \n fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n     @ast::expr {\n@@ -55,10 +61,19 @@ fn mk_raw_path_(sp: span,\n              -> @ast::path {\n     @{ span: sp, global: false, idents: idents, rp: None, types: move types }\n }\n+fn mk_raw_path_global(sp: span, idents: ~[ast::ident]) -> @ast::path {\n+    let p : @ast::path = @{span: sp, global: true, idents: idents,\n+                           rp: None, types: ~[]};\n+    return p;\n+}\n fn mk_path(cx: ext_ctxt, sp: span, idents: ~[ast::ident]) ->\n     @ast::expr {\n     mk_expr(cx, sp, ast::expr_path(mk_raw_path(sp, idents)))\n }\n+fn mk_path_global(cx: ext_ctxt, sp: span, idents: ~[ast::ident]) ->\n+    @ast::expr {\n+    mk_expr(cx, sp, ast::expr_path(mk_raw_path_global(sp, idents)))\n+}\n fn mk_access_(cx: ext_ctxt, sp: span, p: @ast::expr, m: ast::ident)\n     -> @ast::expr {\n     mk_expr(cx, sp, ast::expr_field(p, m, ~[]))\n@@ -80,6 +95,11 @@ fn mk_call(cx: ext_ctxt, sp: span, fn_path: ~[ast::ident],\n     let pathexpr = mk_path(cx, sp, fn_path);\n     return mk_call_(cx, sp, pathexpr, args);\n }\n+fn mk_call_global(cx: ext_ctxt, sp: span, fn_path: ~[ast::ident],\n+                  args: ~[@ast::expr]) -> @ast::expr {\n+    let pathexpr = mk_path_global(cx, sp, fn_path);\n+    return mk_call_(cx, sp, pathexpr, args);\n+}\n // e = expr, t = type\n fn mk_base_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n    @ast::expr {\n@@ -244,6 +264,15 @@ fn mk_ty_path(cx: ext_ctxt,\n     let ty = @{ id: cx.next_id(), node: move ty, span: span };\n     ty\n }\n+fn mk_ty_path_global(cx: ext_ctxt,\n+                     span: span,\n+                     idents: ~[ ast::ident ])\n+                  -> @ast::Ty {\n+    let ty = build::mk_raw_path_global(span, idents);\n+    let ty = ast::ty_path(ty, cx.next_id());\n+    let ty = @{ id: cx.next_id(), node: move ty, span: span };\n+    ty\n+}\n fn mk_simple_ty_path(cx: ext_ctxt,\n                      span: span,\n                      ident: ast::ident)"}, {"sha": "4f88ffeeb0468ada2d95b7b96596005f9754a539", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use ext::base::*;\n+use ext::base;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::mac_result {"}, {"sha": "3cbc8f3834fd4c9a6aa760ab636687d5015b33b8", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -19,9 +19,13 @@ use ast::{struct_variant_kind, sty_by_ref, sty_region, tuple_variant_kind};\n use ast::{ty_nil, ty_param, ty_param_bound, ty_path, ty_rptr, unnamed_field};\n use ast::{variant};\n use ext::base::ext_ctxt;\n+use ext::build;\n use codemap::span;\n use parse::token::special_idents::clownshoes_extensions;\n \n+use core::dvec;\n+use core::uint;\n+\n enum Junction {\n     Conjunction,\n     Disjunction,\n@@ -202,7 +206,9 @@ fn create_derived_impl(cx: ext_ctxt,\n     // Create the type parameters.\n     let impl_ty_params = dvec::DVec();\n     for ty_params.each |ty_param| {\n-        let bound = build::mk_ty_path(cx, span, trait_path.map(|x| *x));\n+        let bound = build::mk_ty_path_global(cx,\n+                                             span,\n+                                             trait_path.map(|x| *x));\n         let bounds = @~[ ty_param_bound(bound) ];\n         let impl_ty_param = build::mk_ty_param(cx, ty_param.ident, bounds);\n         impl_ty_params.push(move impl_ty_param);\n@@ -212,7 +218,7 @@ fn create_derived_impl(cx: ext_ctxt,\n     // Create the reference to the trait.\n     let trait_path = {\n         span: span,\n-        global: false,\n+        global: true,\n         idents: trait_path.map(|x| *x),\n         rp: None,\n         types: ~[]"}, {"sha": "c07853a400bbc763408b765a1d174cc03c125522", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,8 +14,14 @@\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n+\n use ext::base::*;\n+use ext::base;\n use ext::build::mk_uniq_str;\n+\n+use core::option;\n+use core::os;\n+\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])"}, {"sha": "a9eff93e6b8c3a8a3ae6d5a3da26849776fe787c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n-\n-use ast::{crate, expr_, expr_mac, mac_invoc_tt,\n-          tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n-use fold::*;\n+use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n+use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n+use ast;\n+use codemap::{span, ExpandedFrom};\n use ext::base::*;\n+use fold::*;\n use parse::{parser, parse_expr_from_source_str, new_parser_from_tts};\n \n-\n-use codemap::{span, ExpandedFrom};\n-\n+use core::option;\n+use core::vec;\n+use std::map::HashMap;\n \n fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,\n@@ -276,18 +276,17 @@ fn core_macros() -> ~str {\n     macro_rules! ignore (($($x:tt)*) => (()))\n \n     macro_rules! error ( ($( $arg:expr ),+) => (\n-        log(core::error, fmt!( $($arg),+ )) ))\n+        log(::core::error, fmt!( $($arg),+ )) ))\n     macro_rules! warn ( ($( $arg:expr ),+) => (\n-        log(core::warn, fmt!( $($arg),+ )) ))\n+        log(::core::warn, fmt!( $($arg),+ )) ))\n     macro_rules! info ( ($( $arg:expr ),+) => (\n-        log(core::info, fmt!( $($arg),+ )) ))\n+        log(::core::info, fmt!( $($arg),+ )) ))\n     macro_rules! debug ( ($( $arg:expr ),+) => (\n-        log(core::debug, fmt!( $($arg),+ )) ))\n+        log(::core::debug, fmt!( $($arg),+ )) ))\n \n     macro_rules! die(\n         ($msg: expr) => (\n-            core::sys::begin_unwind($msg,\n-                                    file!().to_owned(), line!())\n+            ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n         );\n         () => (\n             die!(~\\\"explicit failure\\\")"}, {"sha": "b8a27096f7304c739c1ac9c91eecbbefc0f59ff4", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -15,10 +15,14 @@\n  * should all get sucked into either the standard library extfmt module or the\n  * compiler syntax extension plugin interface.\n  */\n-use extfmt::ct::*;\n-use ext::base::*;\n+\n+use ast;\n use codemap::span;\n+use ext::base::*;\n+use ext::base;\n use ext::build::*;\n+use extfmt::ct::*;\n+\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n@@ -57,7 +61,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n     }\n     fn make_rt_path_expr(cx: ext_ctxt, sp: span, nm: @~str) -> @ast::expr {\n         let path = make_path_vec(cx, nm);\n-        return mk_path(cx, sp, path);\n+        return mk_path_global(cx, sp, path);\n     }\n     // Produces an AST expression that represents a RT::conv record,\n     // which tells the RT::conv* functions how to perform the conversion\n@@ -87,7 +91,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                 let count_lit = mk_uint(cx, sp, c as uint);\n                 let count_is_path = make_path_vec(cx, @~\"CountIs\");\n                 let count_is_args = ~[count_lit];\n-                return mk_call(cx, sp, count_is_path, count_is_args);\n+                return mk_call_global(cx, sp, count_is_path, count_is_args);\n               }\n               _ => cx.span_unimpl(sp, ~\"unimplemented fmt! conversion\")\n             }\n@@ -129,7 +133,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n         let path = make_path_vec(cx, @fname);\n         let cnv_expr = make_rt_conv_expr(cx, sp, cnv);\n         let args = ~[cnv_expr, arg];\n-        return mk_call(cx, arg.span, path, args);\n+        return mk_call_global(cx, arg.span, path, args);\n     }\n \n     fn make_new_conv(cx: ext_ctxt, sp: span, cnv: Conv, arg: @ast::expr) ->\n@@ -285,10 +289,11 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n     }\n \n     let arg_vec = mk_fixed_vec_e(cx, fmt_sp, piece_exprs);\n-    return mk_call(cx, fmt_sp,\n-                   ~[cx.parse_sess().interner.intern(@~\"str\"),\n-                     cx.parse_sess().interner.intern(@~\"concat\")],\n-                   ~[arg_vec]);\n+    return mk_call_global(cx,\n+                          fmt_sp,\n+                          ~[cx.parse_sess().interner.intern(@~\"str\"),\n+                            cx.parse_sess().interner.intern(@~\"concat\")],\n+                          ~[arg_vec]);\n }\n //\n // Local Variables:"}, {"sha": "563c56e02b5069ecfc9edeb3a022e3be2158a2c1", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n+use codemap;\n use ext::base::*;\n-use io::WriterUtil;\n+use ext::base;\n+use print;\n+\n+use core::io::WriterUtil;\n+use core::option;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n     -> base::mac_result {"}, {"sha": "7a87d909fe6776b9f9742bb0efd08965742cb9d0", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -14,11 +14,16 @@\n // something smarter.\n \n use ast::{ident, node_id};\n+use ast;\n use ast_util::{ident_to_path, respan, dummy_sp};\n+use ast_util;\n+use attr;\n use codemap::span;\n use ext::base::mk_ctxt;\n use ext::quote::rt::*;\n \n+use core::vec;\n+\n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n     #[legacy_exports];\n@@ -34,6 +39,14 @@ fn path(ids: ~[ident], span: span) -> @ast::path {\n       types: ~[]}\n }\n \n+fn path_global(ids: ~[ident], span: span) -> @ast::path {\n+    @{span: span,\n+      global: true,\n+      idents: ids,\n+      rp: None,\n+      types: ~[]}\n+}\n+\n trait append_types {\n     fn add_ty(ty: @ast::Ty) -> @ast::path;\n     fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path;\n@@ -82,6 +95,7 @@ trait ext_ctxt_ast_builder {\n                     +params: ~[ast::ty_param]) -> @ast::item;\n     fn item_ty(name: ident, span: span, ty: @ast::Ty) -> @ast::item;\n     fn ty_vars(+ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n+    fn ty_vars_global(+ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n     fn ty_field_imm(name: ident, ty: @ast::Ty) -> ast::ty_field;\n     fn ty_rec(+v: ~[ast::ty_field]) -> @ast::Ty;\n     fn field_imm(name: ident, e: @ast::expr) -> ast::field;\n@@ -303,4 +317,9 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n         ty_params.map(|p| self.ty_path_ast_builder(\n             path(~[p.ident], dummy_sp())))\n     }\n+\n+    fn ty_vars_global(+ty_params: ~[ast::ty_param]) -> ~[@ast::Ty] {\n+        ty_params.map(|p| self.ty_path_ast_builder(\n+            path(~[p.ident], dummy_sp())))\n+    }\n }"}, {"sha": "8eecafa8fa43a60ddf56a51650ceed60fbb352c6", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -29,9 +29,10 @@ that.\n \n */\n \n+use ast;\n use ext::base::ext_ctxt;\n-\n use ext::pipes::proto::{state, protocol, next_state};\n+use ext::pipes::proto;\n \n impl ext_ctxt: proto::visitor<(), (), ()>  {\n     fn visit_proto(_proto: protocol,"}, {"sha": "76749f6b2db839d7f0636d04a69341adb3445ebc", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -37,6 +37,7 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n+use core::str;\n use std::bitv::{Bitv};\n \n fn analyze(proto: protocol, _cx: ext_ctxt) {"}, {"sha": "67b5c81ad2d821383d5471c46efd1514f732c6a6", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -43,14 +43,15 @@ FIXME (#3072) - This is still incomplete.\n \n */\n \n+use ast;\n+use ast::tt_delim;\n use codemap::span;\n+use ext::base;\n use ext::base::ext_ctxt;\n-use ast::tt_delim;\n-use parse::lexer::{new_tt_reader, reader};\n-use parse::parser::Parser;\n-\n use ext::pipes::parse_proto::proto_parser;\n use ext::pipes::proto::{visit, protocol};\n+use parse::lexer::{new_tt_reader, reader};\n+use parse::parser::Parser;\n \n #[legacy_exports]\n mod ast_builder;"}, {"sha": "ef9c086e3f5c42940a707e00c40a8c76ff2b297a", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -10,18 +10,19 @@\n \n // A protocol compiler for Rust.\n \n-use to_str::ToStr;\n-\n-use dvec::DVec;\n-\n use ast::ident;\n use ast_util::dummy_sp;\n-use util::interner;\n use ext::base::ext_ctxt;\n-use parse::*;\n+use ext::pipes::ast_builder::{append_types, path, path_global};\n use ext::pipes::proto::*;\n use ext::quote::rt::*;\n-use ext::pipes::ast_builder::{append_types, path};\n+use parse::*;\n+use util::interner;\n+\n+use core::dvec::DVec;\n+use core::str;\n+use core::to_str::ToStr;\n+use core::vec;\n \n trait gen_send {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item;\n@@ -59,13 +60,14 @@ impl message: gen_send {\n \n             let pipe_ty = cx.ty_path_ast_builder(\n                 path(~[this.data_name()], span)\n-                .add_tys(cx.ty_vars(this.ty_params)));\n+                .add_tys(cx.ty_vars_global(this.ty_params)));\n             let args_ast = vec::append(\n                 ~[cx.arg(cx.ident_of(~\"pipe\"),\n                               pipe_ty)],\n                 args_ast);\n \n             let mut body = ~\"{\\n\";\n+            body += fmt!(\"use super::%s;\\n\", self.name());\n \n             if this.proto.is_bounded() {\n                 let (sp, rp) = match (this.dir, next.dir) {\n@@ -76,11 +78,11 @@ impl message: gen_send {\n                 };\n \n                 body += ~\"let b = pipe.reuse_buffer();\\n\";\n-                body += fmt!(\"let %s = pipes::SendPacketBuffered(\\\n-                              ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n+                body += fmt!(\"let %s = ::pipes::SendPacketBuffered(\\\n+                              ::ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n                              sp, next.name);\n-                body += fmt!(\"let %s = pipes::RecvPacketBuffered(\\\n-                              ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n+                body += fmt!(\"let %s = ::pipes::RecvPacketBuffered(\\\n+                              ::ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n                              rp, next.name);\n             }\n             else {\n@@ -91,24 +93,23 @@ impl message: gen_send {\n                   (recv, recv) => \"(move c, move s)\"\n                 };\n \n-                body += fmt!(\"let %s = pipes::entangle();\\n\", pat);\n+                body += fmt!(\"let %s = ::pipes::entangle();\\n\", pat);\n             }\n-            body += fmt!(\"let message = %s::%s(%s);\\n\",\n-                         this.proto.name,\n+            body += fmt!(\"let message = %s(%s);\\n\",\n                          self.name(),\n                          str::connect(vec::append_one(\n                            arg_names.map(|x| ~\"move \" + cx.str_of(*x)),\n                              ~\"move s\"), ~\", \"));\n \n             if !try {\n-                body += fmt!(\"pipes::send(move pipe, move message);\\n\");\n+                body += fmt!(\"::pipes::send(move pipe, move message);\\n\");\n                 // return the new channel\n                 body += ~\"move c }\";\n             }\n             else {\n-                body += fmt!(\"if pipes::send(move pipe, move message) {\\n \\\n-                                  pipes::rt::make_some(move c) \\\n-                              } else { pipes::rt::make_none() } }\");\n+                body += fmt!(\"if ::pipes::send(move pipe, move message) {\\n \\\n+                                  ::pipes::rt::make_some(move c) \\\n+                              } else { ::pipes::rt::make_none() } }\");\n             }\n \n             let body = cx.parse_expr(body);\n@@ -142,7 +143,8 @@ impl message: gen_send {\n                     ~[cx.arg(cx.ident_of(~\"pipe\"),\n                                   cx.ty_path_ast_builder(\n                                       path(~[this.data_name()], span)\n-                                      .add_tys(cx.ty_vars(this.ty_params))))],\n+                                      .add_tys(cx.ty_vars_global(\n+                                        this.ty_params))))],\n                     args_ast);\n \n                 let message_args = if arg_names.len() == 0 {\n@@ -154,18 +156,21 @@ impl message: gen_send {\n                 };\n \n                 let mut body = ~\"{ \";\n-                body += fmt!(\"let message = %s::%s%s;\\n\",\n-                             this.proto.name,\n+                body += fmt!(\"use super::%s;\\n\", self.name());\n+                body += fmt!(\"let message = %s%s;\\n\",\n                              self.name(),\n                              message_args);\n \n                 if !try {\n-                    body += fmt!(\"pipes::send(move pipe, move message);\\n\");\n+                    body += fmt!(\"::pipes::send(move pipe, move message);\\n\");\n                     body += ~\" }\";\n                 } else {\n-                    body += fmt!(\"if pipes::send(move pipe, move message) { \\\n-                                      pipes::rt::make_some(()) \\\n-                                  } else { pipes::rt::make_none() } }\");\n+                    body += fmt!(\"if ::pipes::send(move pipe, move message) \\\n+                                        { \\\n+                                      ::pipes::rt::make_some(()) \\\n+                                  } else { \\\n+                                    ::pipes::rt::make_none() \\\n+                                  } }\");\n                 }\n \n                 let body = cx.parse_expr(body);\n@@ -190,7 +195,7 @@ impl message: gen_send {\n \n     fn to_ty(cx: ext_ctxt) -> @ast::Ty {\n         cx.ty_path_ast_builder(path(~[cx.ident_of(self.name())], self.span())\n-          .add_tys(cx.ty_vars(self.get_params())))\n+          .add_tys(cx.ty_vars_global(self.get_params())))\n     }\n }\n \n@@ -261,14 +266,14 @@ impl state: to_type_decls {\n                     self.data_name(),\n                     self.span,\n                     cx.ty_path_ast_builder(\n-                        path(~[cx.ident_of(~\"pipes\"),\n-                               cx.ident_of(dir.to_str() + ~\"Packet\")],\n+                        path_global(~[cx.ident_of(~\"pipes\"),\n+                                      cx.ident_of(dir.to_str() + ~\"Packet\")],\n                              dummy_sp())\n                         .add_ty(cx.ty_path_ast_builder(\n-                            path(~[cx.ident_of(self.proto.name),\n+                            path(~[cx.ident_of(~\"super\"),\n                                    self.data_name()],\n                                  dummy_sp())\n-                            .add_tys(cx.ty_vars(self.ty_params))))),\n+                            .add_tys(cx.ty_vars_global(self.ty_params))))),\n                     self.ty_params));\n         }\n         else {\n@@ -277,15 +282,15 @@ impl state: to_type_decls {\n                     self.data_name(),\n                     self.span,\n                     cx.ty_path_ast_builder(\n-                        path(~[cx.ident_of(~\"pipes\"),\n-                               cx.ident_of(dir.to_str()\n-                                           + ~\"PacketBuffered\")],\n+                        path_global(~[cx.ident_of(~\"pipes\"),\n+                                      cx.ident_of(dir.to_str()\n+                                                  + ~\"PacketBuffered\")],\n                              dummy_sp())\n                         .add_tys(~[cx.ty_path_ast_builder(\n-                            path(~[cx.ident_of(self.proto.name),\n+                            path(~[cx.ident_of(~\"super\"),\n                                    self.data_name()],\n-                                 dummy_sp())\n-                            .add_tys(cx.ty_vars(self.ty_params))),\n+                                        dummy_sp())\n+                            .add_tys(cx.ty_vars_global(self.ty_params))),\n                                    self.proto.buffer_ty_path(cx)])),\n                     self.ty_params));\n         };\n@@ -303,10 +308,10 @@ impl protocol: gen_init {\n \n         let body = if !self.is_bounded() {\n             match start_state.dir {\n-              send => quote_expr!( pipes::entangle() ),\n+              send => quote_expr!( ::pipes::entangle() ),\n               recv => {\n                 quote_expr!({\n-                    let (s, c) = pipes::entangle();\n+                    let (s, c) = ::pipes::entangle();\n                     (move c, move s)\n                 })\n               }\n@@ -338,7 +343,7 @@ impl protocol: gen_init {\n             let fty = s.to_ty(ext_cx);\n             ext_cx.field_imm(ext_cx.ident_of(s.name),\n                              quote_expr!(\n-                                 pipes::mk_packet::<$fty>()\n+                                 ::pipes::mk_packet::<$fty>()\n                              ))\n         }))\n     }\n@@ -347,7 +352,7 @@ impl protocol: gen_init {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);\n         let buffer = quote_expr!(\n-            ~{header: pipes::BufferHeader(),\n+            ~{header: ::pipes::BufferHeader(),\n               data: $buffer_fields}\n         );\n \n@@ -358,12 +363,12 @@ impl protocol: gen_init {\n                         fmt!(\"data.%s.set_buffer_(buffer)\",\n                              s.name))),\n                 ext_cx.parse_expr(\n-                    fmt!(\"ptr::addr_of(&(data.%s))\",\n+                    fmt!(\"::ptr::addr_of(&(data.%s))\",\n                          self.states[0].name))));\n \n         quote_expr!({\n             let buffer = $buffer;\n-            do pipes::entangle_buffer(move buffer) |buffer, data| {\n+            do ::pipes::entangle_buffer(move buffer) |buffer, data| {\n                 $entangle_body\n             }\n         })\n@@ -381,7 +386,7 @@ impl protocol: gen_init {\n         }\n \n         cx.ty_path_ast_builder(path(~[cx.ident_of(~\"__Buffer\")], self.span)\n-                               .add_tys(cx.ty_vars(params)))\n+                               .add_tys(cx.ty_vars_global(params)))\n     }\n \n     fn gen_buffer_type(cx: ext_ctxt) -> @ast::item {\n@@ -395,7 +400,7 @@ impl protocol: gen_init {\n                 }\n             }\n             let ty = s.to_ty(cx);\n-            let fty = quote_ty!( pipes::Packet<$ty> );\n+            let fty = quote_ty!( ::pipes::Packet<$ty> );\n \n             cx.ty_field_imm(cx.ident_of(s.name), fty)\n         };"}, {"sha": "a2673c481b11c8b9e79123022a1ef9cfaede1e85", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use to_str::ToStr;\n-use dvec::DVec;\n-\n+use ast;\n use ext::pipes::ast_builder::{path, append_types};\n \n+use core::cmp;\n+use core::dvec::DVec;\n+use core::to_str::ToStr;\n+\n enum direction { send, recv }\n \n impl direction : cmp::Eq {"}, {"sha": "184093715c69101172ac35b098b279197c41aa3c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,12 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use mod ast;\n-use mod parse::token;\n-\n+use ast;\n+use attr;\n use codemap::{span, BytePos};\n use ext::base::ext_ctxt;\n+use ext::base;\n+use ext::build;\n use parse::token::*;\n+use parse::token;\n+use parse;\n+\n+use core::str;\n \n /**\n *\n@@ -27,6 +32,12 @@ use parse::token::*;\n */\n \n pub mod rt {\n+    use ast;\n+    use parse;\n+    use print::pprust;\n+\n+    use core::str;\n+\n     pub use ast::*;\n     pub use parse::token::*;\n     pub use parse::new_parser_from_tts;\n@@ -577,15 +588,15 @@ fn expand_parse_call(cx: ext_ctxt,\n                                  id_ext(cx, ~\"parse_sess\")), ~[]);\n \n     let new_parser_call =\n-        build::mk_call(cx, sp,\n-                       ids_ext(cx, ~[~\"syntax\",\n-                                     ~\"ext\",\n-                                     ~\"quote\",\n-                                     ~\"rt\",\n-                                     ~\"new_parser_from_tts\"]),\n-                       ~[parse_sess_call(),\n-                         cfg_call(),\n-                         tts_expr]);\n+        build::mk_call_global(cx, sp,\n+                              ids_ext(cx, ~[~\"syntax\",\n+                                            ~\"ext\",\n+                                            ~\"quote\",\n+                                            ~\"rt\",\n+                                            ~\"new_parser_from_tts\"]),\n+                              ~[parse_sess_call(),\n+                                cfg_call(),\n+                                tts_expr]);\n \n     build::mk_call_(cx, sp,\n                     build::mk_access_(cx, sp, new_parser_call,"}, {"sha": "47c6ea8876eb33b0dac1d57b1a300a861be91b99", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,10 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ext::base::*;\n+use codemap;\n use codemap::{span, Loc, FileMap};\n-use print::pprust;\n+use ext::base::*;\n+use ext::base;\n use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n+use print::pprust;\n+\n+use core::io;\n+use core::result;\n+use core::str;\n+use core::vec;\n \n export expand_line;\n export expand_col;"}, {"sha": "c202778d0df595bb633d404151f27a5b796a8681", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use codemap::span;\n+use ext::base;\n use ext::base::ext_ctxt;\n use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};"}, {"sha": "c7b4a2b239a3cc843551cd2a3dee695b182443d5", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -9,19 +9,25 @@\n // except according to those terms.\n \n // Earley-like parser for macros.\n-use parse::token;\n-use parse::token::{Token, EOF, to_str, nonterminal};\n-use parse::lexer::*; //resolve bug?\n-//import parse::lexer::{reader, tt_reader, tt_reader_as_reader};\n-use parse::parser::Parser;\n-//import parse::common::parser_common;\n-use parse::common::*; //resolve bug?\n-use parse::parse_sess;\n-use dvec::DVec;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use ast_util::mk_sp;\n-use std::map::HashMap;\n use codemap::BytePos;\n+use codemap;\n+use parse::common::*; //resolve bug?\n+use parse::lexer::*; //resolve bug?\n+use parse::parse_sess;\n+use parse::parser::Parser;\n+use parse::token::{Token, EOF, to_str, nonterminal};\n+use parse::token;\n+\n+use core::dvec::DVec;\n+use core::dvec;\n+use core::io;\n+use core::option;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+use std::map::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "7386b3b67b9f533b63b5e968694b40a008ce63df", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,19 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ext::base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n+use ast::{ident, matcher_, matcher, match_tok, match_nonterminal, match_seq};\n+use ast::{tt_delim};\n+use ast;\n+use ast_util::dummy_sp;\n use codemap::span;\n-use ast::{ident, matcher_, matcher, match_tok,\n-             match_nonterminal, match_seq, tt_delim};\n+use ext::base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n+use ext::base;\n+use ext::tt::macro_parser::{error};\n+use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n+use ext::tt::macro_parser::{parse, parse_or_else, success, failure};\n use parse::lexer::{new_tt_reader, reader};\n-use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use parse::parser::Parser;\n-use ext::tt::macro_parser::{parse, parse_or_else, success, failure,\n-                            named_match, matched_seq, matched_nonterminal,\n-                            error};\n-use std::map::HashMap;\n use parse::token::special_idents;\n-use ast_util::dummy_sp;\n+use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n+use print;\n+\n+use core::io;\n+use std::map::HashMap;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                      arg: ~[ast::token_tree]) -> base::mac_result {"}, {"sha": "c1745fac710acf62b581a628711a849eb7e0756f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use diagnostic::span_handler;\n+use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n-use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n+use ast_util;\n use codemap::span;\n+use diagnostic::span_handler;\n+use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident, ident_interner};\n+\n+use core::option;\n+use core::vec;\n+use std;\n use std::map::HashMap;\n \n export tt_reader,  new_tt_reader, dup_tt_reader, tt_next_token;"}, {"sha": "6d32c73e1f703d53c44ba267199a5b8e4bb340de", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use codemap::span;\n use ast::*;\n+use ast;\n+use codemap::span;\n+\n+use core::option;\n+use core::vec;\n \n export ast_fold_precursor;\n export ast_fold;"}, {"sha": "a3fd069afbb8ddd01e385d304efcc867660cb44c", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use either::{Either, Left, Right};\n+use ast;\n use ast_util::spanned;\n use parse::common::*; //resolve bug?\n+use parse::token;\n+\n+use core::either::{Either, Left, Right};\n \n export parser_attr;\n "}, {"sha": "7f57c77783366036bd7f2a26dd1d0e9d823fa3ed", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,6 +12,7 @@\n   Predicates on exprs and stmts that the pretty-printer and parser use\n  */\n \n+use ast;\n use ast_util::operator_prec;\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {"}, {"sha": "0cd3ef0ee736d0ef44ec3c972c5f4fa05615ce55", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,11 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::ReaderUtil;\n+use ast;\n+use codemap::{CodeMap, FileMap, CharPos};\n+use diagnostic;\n+use parse::lexer::{is_whitespace, get_str_from, reader};\n+use parse::lexer::{string_reader, bump, is_eof, nextch};\n+use parse::lexer;\n+use parse::token;\n+use parse;\n use util::interner;\n-use parse::lexer::{string_reader, bump, is_eof, nextch,\n-                   is_whitespace, get_str_from, reader};\n-use codemap::{FileMap, CharPos};\n+\n+use core::cmp;\n+use core::io::ReaderUtil;\n+use core::io;\n+use core::str;\n+use core::uint;\n+use core::vec;\n \n export cmnt;\n export lit;"}, {"sha": "ca0bbbb7369a0a79fc6885701c9395deb737b274", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::{HashMap};\n+use ast;\n use ast_util::spanned;\n-use parse::parser::Parser;\n use parse::lexer::reader;\n+use parse::parser::Parser;\n+use parse::token;\n+\n+use core::option;\n+use std::map::HashMap;\n \n type seq_sep = {\n     sep: Option<token::Token>,"}, {"sha": "c51f7e4dad667ccfd6dbe3ae63be5efddf3974d6", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,10 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use diagnostic::span_handler;\n+use ast;\n+use ast_util;\n use codemap::{span, CodeMap, CharPos, BytePos};\n-use ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader,\n-                             tt_next_token};\n+use codemap;\n+use diagnostic::span_handler;\n+use ext::tt::transcribe::{tt_next_token};\n+use ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader};\n+use parse::token;\n+\n+use core::char;\n+use core::either;\n+use core::str;\n+use core::u64;\n+\n+use std;\n \n export reader, string_reader, new_string_reader, is_whitespace;\n export tt_reader,  new_tt_reader;"}, {"sha": "fb5c62501791c96f3296a398b74fae959a879acd", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -12,6 +12,20 @@\n \n #[legacy_exports];\n \n+use ast::node_id;\n+use ast;\n+use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n+use codemap;\n+use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n+use parse::attr::parser_attr;\n+use parse::lexer::{reader, string_reader};\n+use parse::parser::Parser;\n+use parse::token::{ident_interner, mk_ident_interner};\n+use util::interner;\n+\n+use core::io;\n+use core::result;\n+\n export parser;\n export common;\n export lexer;\n@@ -36,15 +50,6 @@ export parse_stmt_from_source_str;\n export parse_tts_from_source_str;\n export parse_from_source_str;\n \n-use ast::node_id;\n-use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n-use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n-use parse::attr::parser_attr;\n-use parse::lexer::{reader, string_reader};\n-use parse::parser::Parser;\n-use parse::token::{ident_interner, mk_ident_interner};\n-use util::interner;\n-\n \n #[legacy_exports]\n mod lexer;"}, {"sha": "6b73cf308a24789f81de63365a35df20518a31ac", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -17,10 +17,17 @@ Obsolete syntax that becomes too hard to parse can be\n removed.\n */\n \n-use codemap::span;\n use ast::{expr, expr_lit, lit_nil};\n+use ast;\n use ast_util::{respan};\n+use codemap::span;\n use parse::token::Token;\n+use parse::token;\n+\n+use core::cmp;\n+use core::option;\n+use core::str;\n+use core::to_bytes;\n \n /// The specific types of unsupported syntax\n pub enum ObsoleteSyntax {"}, {"sha": "f85ca3fefef88e781c5a11c90bb6dc61178e00da", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 71, "deletions": 68, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,76 +8,79 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use print::pprust::expr_to_str;\n-\n-use result::Result;\n-use either::{Either, Left, Right};\n-use std::map::HashMap;\n-use parse::token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n-                   INTERPOLATED, special_idents};\n-use codemap::{span,FssNone, BytePos};\n-use util::interner::Interner;\n+use ast::{ProtoBox, ProtoUniq, provided, public, pure_fn, purity, re_static};\n+use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n+use ast::{bind_by_value, bind_by_move, bitand, bitor, bitxor, blk};\n+use ast::{blk_check_mode, box, by_copy, by_move, by_ref, by_val};\n+use ast::{capture_clause, capture_item, crate, crate_cfg, decl, decl_item};\n+use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n+use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n+use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n+use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n+use ast::{expr_fail, expr_field, expr_fn, expr_fn_block, expr_if, expr_index};\n+use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n+use ast::{expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat};\n+use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n+use ast::{expr_unary_move, expr_vec, expr_vstore, expr_vstore_mut_box};\n+use ast::{expr_vstore_fixed, expr_vstore_slice, expr_vstore_box};\n+use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n+use ast::{expr_vstore_uniq, TyFn, Onceness, Once, Many};\n+use ast::{foreign_item, foreign_item_const, foreign_item_fn, foreign_mod};\n+use ast::{ident, impure_fn, infer, inherited, item, item_, item_const};\n+use ast::{item_const, item_enum, item_fn, item_foreign_mod, item_impl};\n+use ast::{item_mac, item_mod, item_struct, item_trait, item_ty, lit, lit_};\n+use ast::{lit_bool, lit_float, lit_float_unsuffixed, lit_int};\n+use ast::{lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const};\n+use ast::{m_imm, m_mutbl, mac_, mac_invoc_tt, matcher, match_nonterminal};\n+use ast::{match_seq, match_tok, method, mode, module_ns, mt, mul, mutability};\n+use ast::{named_field, neg, noreturn, not, pat, pat_box, pat_enum, pat_ident};\n+use ast::{pat_lit, pat_range, pat_rec, pat_region, pat_struct, pat_tup};\n+use ast::{pat_uniq, pat_wild, path, private, Proto, ProtoBare, ProtoBorrowed};\n+use ast::{re_self, re_anon, re_named, region, rem, required, ret_style};\n+use ast::{return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr};\n+use ast::{stmt_semi, stmt_mac, struct_def, struct_field, struct_immutable};\n+use ast::{struct_mutable, struct_variant_kind, subtract, sty_box, sty_by_ref};\n+use ast::{sty_region, sty_static, sty_uniq, sty_value, token_tree};\n+use ast::{trait_method, trait_ref, tt_delim, tt_seq, tt_tok, tt_nonterminal};\n+use ast::{tuple_variant_kind, Ty, ty_, ty_bot, ty_box, ty_field, ty_fn};\n+use ast::{ty_fixed_length_vec, type_value_ns, uniq, unnamed_field};\n+use ast::{ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_param_bound};\n+use ast::{ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec};\n+use ast::{unsafe_blk, unsafe_fn, variant, view_item, view_item_};\n+use ast::{view_item_export, view_item_import, view_item_use, view_path};\n+use ast::{view_path_glob, view_path_list, view_path_simple, visibility};\n+use ast::{vstore, vstore_box, vstore_fixed, vstore_slice, vstore_uniq};\n+use ast;\n use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n+use ast_util;\n+use classify;\n+use codemap::{span,FssNone, BytePos};\n+use codemap;\n+use parse::attr::parser_attr;\n+use parse::common::{seq_sep_none, token_to_str};\n+use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;\n+use parse::obsolete::{ObsoleteClassTraits, ObsoleteModeInFnType};\n+use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n+use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n+use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith, ObsoleteClassMethod};\n+use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::prec::{as_prec, token_to_binop};\n-use parse::attr::parser_attr;\n-use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n-                    seq_sep_none, token_to_str};\n-use dvec::DVec;\n-use vec::{push};\n-use parse::obsolete::{\n-    ObsoleteSyntax,\n-    ObsoleteLowerCaseKindBounds, ObsoleteLet,\n-    ObsoleteFieldTerminator, ObsoleteStructCtor,\n-    ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits,\n-    ObsoleteModeInFnType, ObsoleteMoveInit, ObsoleteBinaryMove,\n-};\n-use ast::{_mod, add, arg, arm, attribute,\n-             bind_by_ref, bind_infer, bind_by_value, bind_by_move,\n-             bitand, bitor, bitxor, blk, blk_check_mode, box, by_copy,\n-             by_move, by_ref, by_val, capture_clause,\n-             capture_item, struct_immutable, struct_mutable,\n-             crate, crate_cfg, decl, decl_item, decl_local,\n-             default_blk, deref, div, enum_def, enum_variant_kind, expl, expr,\n-             expr_, expr_addr_of, expr_match, expr_again, expr_assert,\n-             expr_assign, expr_assign_op, expr_binary, expr_block, expr_break,\n-             expr_call, expr_cast, expr_copy, expr_do_body, expr_fail,\n-             expr_field, expr_fn, expr_fn_block, expr_if, expr_index,\n-             expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac,\n-             expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat,\n-             expr_ret, expr_swap, expr_struct, expr_tup, expr_unary,\n-             expr_unary_move, expr_vec, expr_vstore, expr_vstore_mut_box,\n-             expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl,\n-             foreign_item, foreign_item_const, foreign_item_fn, foreign_mod,\n-             ident, impure_fn, infer, inherited,\n-             item, item_, item_struct, item_const, item_enum, item_fn,\n-             item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n-             item_ty, lit, lit_, lit_bool, lit_float, lit_float_unsuffixed,\n-             lit_int, lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local,\n-             m_const, m_imm, m_mutbl, mac_,\n-             mac_invoc_tt, matcher, match_nonterminal, match_seq,\n-             match_tok, method, mode, module_ns, mt, mul, mutability,\n-             named_field, neg, noreturn, not, pat, pat_box, pat_enum,\n-             pat_ident, pat_lit, pat_range, pat_rec, pat_region, pat_struct,\n-             pat_tup, pat_uniq, pat_wild, path, private, Proto, ProtoBare,\n-             ProtoBorrowed, ProtoBox, ProtoUniq, provided, public, pure_fn,\n-             purity, re_static, re_self, re_anon, re_named, region,\n-             rem, required, ret_style, return_val, self_ty, shl, shr, stmt,\n-             stmt_decl, stmt_expr, stmt_semi, stmt_mac, struct_def,\n-             struct_field, struct_variant_kind, subtract, sty_box, sty_by_ref,\n-             sty_region, sty_static, sty_uniq, sty_value, token_tree,\n-             trait_method, trait_ref, tt_delim, tt_seq, tt_tok,\n-             tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot,\n-             ty_box, ty_field, ty_fn, ty_infer, ty_mac, ty_method, ty_nil,\n-             ty_param, ty_param_bound, ty_path, ty_ptr, ty_rec, ty_rptr,\n-             ty_tup, ty_u32, ty_uniq, ty_vec, ty_fixed_length_vec,\n-             type_value_ns, uniq, unnamed_field, unsafe_blk, unsafe_fn,\n-             variant, view_item, view_item_, view_item_export,\n-             view_item_import, view_item_use, view_path, view_path_glob,\n-             view_path_list, view_path_simple, visibility, vstore, vstore_box,\n-             vstore_fixed, vstore_slice, vstore_uniq,\n-             expr_vstore_fixed, expr_vstore_slice, expr_vstore_box,\n-             expr_vstore_uniq, TyFn, Onceness, Once, Many};\n+use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n+use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n+use parse::token;\n+use print::pprust::expr_to_str;\n+use util::interner::Interner;\n+\n+use core::cmp;\n+use core::dvec::DVec;\n+use core::dvec;\n+use core::either::{Either, Left, Right};\n+use core::either;\n+use core::result::Result;\n+use core::vec::push;\n+use core::vec;\n+use std::map::HashMap;\n \n export Parser;\n \n@@ -195,7 +198,7 @@ fn Parser(sess: parse_sess, cfg: ast::crate_cfg,\n         keywords: token::keyword_table(),\n         strict_keywords: token::strict_keyword_table(),\n         reserved_keywords: token::reserved_keyword_table(),\n-        obsolete_set: std::map::HashMap(),\n+        obsolete_set: HashMap(),\n         mod_path_stack: ~[],\n     }\n }"}, {"sha": "f286b15c7523e2fd56c089d7ec744a28bcab0c0f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use util::interner;\n+use ast;\n+use ast_util;\n+use parse::token;\n use util::interner::Interner;\n+use util::interner;\n+\n+use core::cast;\n+use core::char;\n+use core::cmp;\n+use core::str;\n+use core::task;\n use std::map::HashMap;\n \n #[auto_encode]\n@@ -332,7 +341,7 @@ mod special_idents {\n }\n \n struct ident_interner {\n-    priv interner: util::interner::Interner<@~str>,\n+    priv interner: Interner<@~str>,\n }\n \n impl ident_interner {"}, {"sha": "c9d2abfe0cba3d9b4ee83ce441c9d9865622e94f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::WriterUtil;\n-use dvec::DVec;\n+use core::cmp;\n+use core::dvec::DVec;\n+use core::io::WriterUtil;\n+use core::io;\n+use core::str;\n+use core::vec;\n \n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's"}, {"sha": "ad4080c3094aba008379e6215df8b438d2b5d5cc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,16 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use parse::{comments, lexer, token};\n-use codemap::{CodeMap, BytePos};\n-use print::pp::{break_offset, word, printer, space, zerobreak, hardbreak};\n-use print::pp::{breaks, consistent, inconsistent, eof};\n use ast::{required, provided};\n+use ast;\n+use ast_util;\n use ast_util::{operator_prec};\n-use dvec::DVec;\n+use attr;\n+use codemap::{CodeMap, BytePos};\n+use codemap;\n+use diagnostic;\n use parse::classify::*;\n use parse::token::ident_interner;\n-use str::{push_str, push_char};\n+use parse::token;\n+use parse::{comments, lexer, token};\n+use parse;\n+use print::pp::{break_offset, word, printer, space, zerobreak, hardbreak};\n+use print::pp::{breaks, consistent, inconsistent, eof};\n+use print::pp;\n+use print::pprust;\n+\n+use core::char;\n+use core::dvec::DVec;\n+use core::io;\n+use core::option;\n+use core::str::{push_str, push_char};\n+use core::str;\n+use core::u64;\n+use core::vec;\n \n // The ps is stored here to prevent recursive type.\n enum ann_node {"}, {"sha": "0777269f8f7fc3e27cd659fa45e734844e6f97e4", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -16,8 +16,6 @@\n \n #[crate_type = \"lib\"];\n \n-#[no_core];\n-\n #[legacy_modes];\n #[legacy_exports];\n \n@@ -26,11 +24,13 @@\n #[allow(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-extern mod core(vers = \"0.6\");\n-extern mod std(vers = \"0.6\");\n+#[no_core];\n \n+extern mod core(vers = \"0.6\");\n use core::*;\n \n+extern mod std(vers = \"0.6\");\n+\n pub mod syntax {\n     pub use ext;\n     pub use parse;"}, {"sha": "b7d894a7e9f823835ea7079acce9adbd39ab5060", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -8,9 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use ast::*;\n+use ast;\n+use ast_util;\n use codemap::span;\n+use parse;\n+\n+use core::option;\n+use core::vec;\n \n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's"}, {"sha": "0eb922643c620ee86f202033eaec93fa206161f1", "filename": "src/test/run-pass/super.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c599914a19861686030b238a0edc7ebb996068/src%2Ftest%2Frun-pass%2Fsuper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c599914a19861686030b238a0edc7ebb996068/src%2Ftest%2Frun-pass%2Fsuper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsuper.rs?ref=57c599914a19861686030b238a0edc7ebb996068", "patch": "@@ -0,0 +1,12 @@\n+pub mod a {\n+    pub fn f() {}\n+    pub mod b {\n+        fn g() {\n+            super::f();\n+        }\n+    }\n+}\n+\n+fn main() {\n+}\n+"}]}