{"sha": "4d333ebb6372c135e5a723da899528cc22d07faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzMzZWJiNjM3MmMxMzVlNWE3MjNkYTg5OTUyOGNjMjJkMDdmYWE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:33:13Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:33:13Z"}, "message": "Get rid of do-er antipattern", "tree": {"sha": "7ab4c7f113a1686d7378502e2685d3529cb6f5ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab4c7f113a1686d7378502e2685d3529cb6f5ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d333ebb6372c135e5a723da899528cc22d07faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d333ebb6372c135e5a723da899528cc22d07faa", "html_url": "https://github.com/rust-lang/rust/commit/4d333ebb6372c135e5a723da899528cc22d07faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d333ebb6372c135e5a723da899528cc22d07faa/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf0fa20a7d895612ceee1948d6a9895e53bee4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf0fa20a7d895612ceee1948d6a9895e53bee4a", "html_url": "https://github.com/rust-lang/rust/commit/caf0fa20a7d895612ceee1948d6a9895e53bee4a"}], "stats": {"total": 145, "additions": 100, "deletions": 45}, "files": [{"sha": "162d567d978fcabdc23a134fd20bf8080e8adece", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -52,12 +52,12 @@ impl Completions {\n     }\n \n     pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &Type) {\n-        let item = Render::new(RenderContext::new(ctx)).add_field(field, ty);\n+        let item = render_field(RenderContext::new(ctx), field, ty);\n         self.add(item);\n     }\n \n     pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &Type) {\n-        let item = Render::new(RenderContext::new(ctx)).add_tuple_field(field, ty);\n+        let item = render_tuple_field(RenderContext::new(ctx), field, ty);\n         self.add(item);\n     }\n \n@@ -67,9 +67,7 @@ impl Completions {\n         local_name: String,\n         resolution: &ScopeDef,\n     ) {\n-        if let Some(item) =\n-            Render::new(RenderContext::new(ctx)).render_resolution(local_name, resolution)\n-        {\n+        if let Some(item) = render_resolution(RenderContext::new(ctx), local_name, resolution) {\n             self.add(item);\n         }\n     }\n@@ -84,7 +82,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = MacroRender::new(RenderContext::new(ctx), name, macro_).render() {\n+        if let Some(item) = render_macro(RenderContext::new(ctx), name, macro_) {\n             self.add(item);\n         }\n     }\n@@ -95,18 +93,18 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let item = FunctionRender::new(RenderContext::new(ctx), local_name, func).render();\n+        let item = render_fn(RenderContext::new(ctx), local_name, func);\n         self.add(item)\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        if let Some(item) = ConstRender::new(RenderContext::new(ctx), constant).render() {\n+        if let Some(item) = render_const(RenderContext::new(ctx), constant) {\n             self.add(item);\n         }\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if let Some(item) = TypeAliasRender::new(RenderContext::new(ctx), type_alias).render() {\n+        if let Some(item) = render_type_alias(RenderContext::new(ctx), type_alias) {\n             self.add(item)\n         }\n     }\n@@ -117,8 +115,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         path: ModPath,\n     ) {\n-        let item =\n-            EnumVariantRender::new(RenderContext::new(ctx), None, variant, Some(path)).render();\n+        let item = render_enum_variant(RenderContext::new(ctx), None, variant, Some(path));\n         self.add(item);\n     }\n \n@@ -128,8 +125,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n     ) {\n-        let item =\n-            EnumVariantRender::new(RenderContext::new(ctx), local_name, variant, None).render();\n+        let item = render_enum_variant(RenderContext::new(ctx), local_name, variant, None);\n         self.add(item);\n     }\n }"}, {"sha": "b54241d5122cd1fc3cfb7787767f4f6cfc32c531", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -19,14 +19,32 @@ use crate::{\n };\n \n pub(crate) use crate::render::{\n-    const_::ConstRender, enum_variant::EnumVariantRender, function::FunctionRender,\n-    macro_::MacroRender, type_alias::TypeAliasRender,\n+    const_::render_const, enum_variant::render_enum_variant, function::render_fn,\n+    macro_::render_macro, type_alias::render_type_alias,\n };\n \n-/// Generic renderer for completion items.\n-#[derive(Debug)]\n-pub(crate) struct Render<'a> {\n+pub(crate) fn render_field<'a>(\n+    ctx: RenderContext<'a>,\n+    field: hir::Field,\n+    ty: &Type,\n+) -> CompletionItem {\n+    Render::new(ctx).add_field(field, ty)\n+}\n+\n+pub(crate) fn render_tuple_field<'a>(\n     ctx: RenderContext<'a>,\n+    field: usize,\n+    ty: &Type,\n+) -> CompletionItem {\n+    Render::new(ctx).add_tuple_field(field, ty)\n+}\n+\n+pub(crate) fn render_resolution<'a>(\n+    ctx: RenderContext<'a>,\n+    local_name: String,\n+    resolution: &ScopeDef,\n+) -> Option<CompletionItem> {\n+    Render::new(ctx).render_resolution(local_name, resolution)\n }\n \n /// Interface for data and methods required for items rendering.\n@@ -74,12 +92,18 @@ impl<'a> RenderContext<'a> {\n     }\n }\n \n+/// Generic renderer for completion items.\n+#[derive(Debug)]\n+struct Render<'a> {\n+    ctx: RenderContext<'a>,\n+}\n+\n impl<'a> Render<'a> {\n-    pub(crate) fn new(ctx: RenderContext<'a>) -> Render<'a> {\n+    fn new(ctx: RenderContext<'a>) -> Render<'a> {\n         Render { ctx }\n     }\n \n-    pub(crate) fn add_field(&mut self, field: hir::Field, ty: &Type) -> CompletionItem {\n+    fn add_field(&mut self, field: hir::Field, ty: &Type) -> CompletionItem {\n         let is_deprecated = self.ctx.is_deprecated(field);\n         let name = field.name(self.ctx.db());\n         let mut item = CompletionItem::new(\n@@ -96,17 +120,17 @@ impl<'a> Render<'a> {\n             item = item.set_score(score);\n         }\n \n-        return item.build();\n+        item.build()\n     }\n \n-    pub(crate) fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n+    fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), field.to_string())\n             .kind(CompletionItemKind::Field)\n             .detail(ty.display(self.ctx.db()).to_string())\n             .build()\n     }\n \n-    pub(crate) fn render_resolution(\n+    fn render_resolution(\n         self,\n         local_name: String,\n         resolution: &ScopeDef,\n@@ -120,15 +144,15 @@ impl<'a> Render<'a> {\n \n         let kind = match resolution {\n             ScopeDef::ModuleDef(Function(func)) => {\n-                let item = FunctionRender::new(self.ctx, Some(local_name), *func).render();\n+                let item = render_fn(self.ctx, Some(local_name), *func);\n                 return Some(item);\n             }\n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item = EnumVariantRender::new(self.ctx, Some(local_name), *var, None).render();\n+                let item = render_enum_variant(self.ctx, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n-                let item = MacroRender::new(self.ctx, local_name, *mac).render();\n+                let item = render_macro(self.ctx, local_name, *mac);\n                 return item;\n             }\n "}, {"sha": "039bdabc051ac7adf7b7d1ec32b6915b1e64f10d", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -11,20 +11,27 @@ use crate::{\n     render::RenderContext,\n };\n \n+pub(crate) fn render_const<'a>(\n+    ctx: RenderContext<'a>,\n+    const_: hir::Const,\n+) -> Option<CompletionItem> {\n+    ConstRender::new(ctx, const_).render()\n+}\n+\n #[derive(Debug)]\n-pub(crate) struct ConstRender<'a> {\n+struct ConstRender<'a> {\n     ctx: RenderContext<'a>,\n     const_: hir::Const,\n     ast_node: Const,\n }\n \n impl<'a> ConstRender<'a> {\n-    pub(crate) fn new(ctx: RenderContext<'a>, const_: hir::Const) -> ConstRender<'a> {\n+    fn new(ctx: RenderContext<'a>, const_: hir::Const) -> ConstRender<'a> {\n         let ast_node = const_.source(ctx.db()).value;\n         ConstRender { ctx, const_, ast_node }\n     }\n \n-    pub(crate) fn render(self) -> Option<CompletionItem> {\n+    fn render(self) -> Option<CompletionItem> {\n         let name = self.name()?;\n         let detail = self.detail();\n "}, {"sha": "fd412ed0eef881f348f4d3b36a0a5016767eb834", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -9,8 +9,17 @@ use crate::{\n     render::{builder_ext::Params, RenderContext},\n };\n \n+pub(crate) fn render_enum_variant<'a>(\n+    ctx: RenderContext<'a>,\n+    local_name: Option<String>,\n+    variant: hir::EnumVariant,\n+    path: Option<ModPath>,\n+) -> CompletionItem {\n+    EnumVariantRender::new(ctx, local_name, variant, path).render()\n+}\n+\n #[derive(Debug)]\n-pub(crate) struct EnumVariantRender<'a> {\n+struct EnumVariantRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n     variant: hir::EnumVariant,\n@@ -21,7 +30,7 @@ pub(crate) struct EnumVariantRender<'a> {\n }\n \n impl<'a> EnumVariantRender<'a> {\n-    pub(crate) fn new(\n+    fn new(\n         ctx: RenderContext<'a>,\n         local_name: Option<String>,\n         variant: hir::EnumVariant,\n@@ -51,7 +60,7 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    pub(crate) fn render(self) -> CompletionItem {\n+    fn render(self) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),"}, {"sha": "4fa6eafd72f6f8d83ac64e9bc580df1471385d4e", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -8,16 +8,24 @@ use crate::{\n     render::{builder_ext::Params, RenderContext},\n };\n \n+pub(crate) fn render_fn<'a>(\n+    ctx: RenderContext<'a>,\n+    local_name: Option<String>,\n+    fn_: hir::Function,\n+) -> CompletionItem {\n+    FunctionRender::new(ctx, local_name, fn_).render()\n+}\n+\n #[derive(Debug)]\n-pub(crate) struct FunctionRender<'a> {\n+struct FunctionRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n     fn_: hir::Function,\n     ast_node: Fn,\n }\n \n impl<'a> FunctionRender<'a> {\n-    pub(crate) fn new(\n+    fn new(\n         ctx: RenderContext<'a>,\n         local_name: Option<String>,\n         fn_: hir::Function,\n@@ -28,7 +36,7 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, fn_, ast_node }\n     }\n \n-    pub(crate) fn render(self) -> CompletionItem {\n+    fn render(self) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())"}, {"sha": "96be59cc336aeda40e1b3865b6ce8a0c60c691a9", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -9,8 +9,16 @@ use crate::{\n     render::RenderContext,\n };\n \n+pub(crate) fn render_macro<'a>(\n+    ctx: RenderContext<'a>,\n+    name: String,\n+    macro_: hir::MacroDef,\n+) -> Option<CompletionItem> {\n+    MacroRender::new(ctx, name, macro_).render()\n+}\n+\n #[derive(Debug)]\n-pub(crate) struct MacroRender<'a> {\n+struct MacroRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n     macro_: hir::MacroDef,\n@@ -20,19 +28,15 @@ pub(crate) struct MacroRender<'a> {\n }\n \n impl<'a> MacroRender<'a> {\n-    pub(crate) fn new(\n-        ctx: RenderContext<'a>,\n-        name: String,\n-        macro_: hir::MacroDef,\n-    ) -> MacroRender<'a> {\n+    fn new(ctx: RenderContext<'a>, name: String, macro_: hir::MacroDef) -> MacroRender<'a> {\n         let docs = ctx.docs(macro_);\n         let docs_str = docs.as_ref().map_or(\"\", |s| s.as_str());\n         let (bra, ket) = guess_macro_braces(&name, docs_str);\n \n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    pub(crate) fn render(&self) -> Option<CompletionItem> {\n+    fn render(&self) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {"}, {"sha": "9605c7fa9424b3fb0e9b7564c30c59caf10c0228", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d333ebb6372c135e5a723da899528cc22d07faa/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=4d333ebb6372c135e5a723da899528cc22d07faa", "patch": "@@ -11,20 +11,27 @@ use crate::{\n     render::RenderContext,\n };\n \n+pub(crate) fn render_type_alias<'a>(\n+    ctx: RenderContext<'a>,\n+    type_alias: hir::TypeAlias,\n+) -> Option<CompletionItem> {\n+    TypeAliasRender::new(ctx, type_alias).render()\n+}\n+\n #[derive(Debug)]\n-pub(crate) struct TypeAliasRender<'a> {\n+struct TypeAliasRender<'a> {\n     ctx: RenderContext<'a>,\n     type_alias: hir::TypeAlias,\n     ast_node: TypeAlias,\n }\n \n impl<'a> TypeAliasRender<'a> {\n-    pub(crate) fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> TypeAliasRender<'a> {\n+    fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> TypeAliasRender<'a> {\n         let ast_node = type_alias.source(ctx.db()).value;\n         TypeAliasRender { ctx, type_alias, ast_node }\n     }\n \n-    pub(crate) fn render(self) -> Option<CompletionItem> {\n+    fn render(self) -> Option<CompletionItem> {\n         let name = self.name()?;\n         let detail = self.detail();\n "}]}