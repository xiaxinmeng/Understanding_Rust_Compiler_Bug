{"sha": "b3342b4920f2c89e0e41a8c365f576c1d9cdc004", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMzQyYjQ5MjBmMmM4OWUwZTQxYThjMzY1ZjU3NmMxZDljZGMwMDQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-29T14:11:28Z"}, "message": "liveness: Remove unused clean_exit_var", "tree": {"sha": "3a34c37fe01df38c6f99993dd480549822418f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a34c37fe01df38c6f99993dd480549822418f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3342b4920f2c89e0e41a8c365f576c1d9cdc004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3342b4920f2c89e0e41a8c365f576c1d9cdc004", "html_url": "https://github.com/rust-lang/rust/commit/b3342b4920f2c89e0e41a8c365f576c1d9cdc004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3342b4920f2c89e0e41a8c365f576c1d9cdc004/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f13d97d275c806ea6616071566d8c4f875f18a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f13d97d275c806ea6616071566d8c4f875f18a8", "html_url": "https://github.com/rust-lang/rust/commit/3f13d97d275c806ea6616071566d8c4f875f18a8"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "db97445f50b9c0d6db30f5129f37e29964f600f8", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3342b4920f2c89e0e41a8c365f576c1d9cdc004/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3342b4920f2c89e0e41a8c365f576c1d9cdc004/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=b3342b4920f2c89e0e41a8c365f576c1d9cdc004", "patch": "@@ -85,13 +85,6 @@\n //!   the function, whether it be by explicit return, panic, or other means.\n //!\n //! - `fallthrough_ln`: a live node that represents a fallthrough\n-//!\n-//! - `clean_exit_var`: a synthetic variable that is only 'read' from the\n-//!   fallthrough node. It is only live if the function could converge\n-//!   via means other than an explicit `return` expression. That is, it is\n-//!   only dead if the end of the function's block can never be reached.\n-//!   It is the responsibility of typeck to ensure that there are no\n-//!   `return` expressions in a function declared as diverging.\n \n use self::LiveNodeKind::*;\n use self::VarKind::*;\n@@ -253,7 +246,6 @@ struct LocalInfo {\n enum VarKind {\n     Param(HirId, Symbol),\n     Local(LocalInfo),\n-    CleanExit,\n }\n \n struct IrMaps<'tcx> {\n@@ -309,7 +301,6 @@ impl IrMaps<'tcx> {\n             Local(LocalInfo { id: node_id, .. }) | Param(node_id, _) => {\n                 self.variable_map.insert(node_id, v);\n             }\n-            CleanExit => {}\n         }\n \n         debug!(\"{:?} is {:?}\", v, vk);\n@@ -329,14 +320,13 @@ impl IrMaps<'tcx> {\n     fn variable_name(&self, var: Variable) -> String {\n         match self.var_kinds[var.get()] {\n             Local(LocalInfo { name, .. }) | Param(_, name) => name.to_string(),\n-            CleanExit => \"<clean-exit>\".to_owned(),\n         }\n     }\n \n     fn variable_is_shorthand(&self, var: Variable) -> bool {\n         match self.var_kinds[var.get()] {\n             Local(LocalInfo { is_shorthand, .. }) => is_shorthand,\n-            Param(..) | CleanExit => false,\n+            Param(..) => false,\n         }\n     }\n \n@@ -649,7 +639,6 @@ impl RWUTable {\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,\n-    clean_exit_var: Variable,\n }\n \n const ACC_READ: u32 = 1;\n@@ -680,7 +669,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let specials = Specials {\n             exit_ln: ir.add_live_node(ExitNode),\n             fallthrough_ln: ir.add_live_node(ExitNode),\n-            clean_exit_var: ir.add_variable(CleanExit),\n         };\n \n         let tables = ir.tcx.typeck_tables_of(def_id);\n@@ -913,7 +901,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // explicitly return:\n         let s = self.s;\n         self.init_from_succ(s.fallthrough_ln, s.exit_ln);\n-        self.acc(s.fallthrough_ln, s.clean_exit_var, ACC_READ);\n \n         let entry_ln = self.propagate_through_expr(body, s.fallthrough_ln);\n "}]}