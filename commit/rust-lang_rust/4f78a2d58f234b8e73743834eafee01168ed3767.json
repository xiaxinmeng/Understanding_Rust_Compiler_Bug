{"sha": "4f78a2d58f234b8e73743834eafee01168ed3767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNzhhMmQ1OGYyMzRiOGU3Mzc0MzgzNGVhZmVlMDExNjhlZDM3Njc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-22T15:45:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-22T15:45:41Z"}, "message": "Rollup merge of #53574 - vorner:ptr_as_ref_unchecked, r=Mark-Simulacrum\n\nSuggest direct raw-pointer dereference\n\nPeople often come looking for some kind of `as_ref_unchecked` method on\nraw pointers that would give them `&T` and not `Option<&T>` when they\nare sure the pointer is not NULL.\n\nThere's no such method, but taking a reference of the dereferenced\npointer accomplishes the same thing. Therefore, suggest using that, at\nthe `as_ref` site \u2012 it's a place people are likely going to look into.", "tree": {"sha": "0cf4631cedf29c5c39276ed66af147bdf42e6992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf4631cedf29c5c39276ed66af147bdf42e6992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f78a2d58f234b8e73743834eafee01168ed3767", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbfYUlCRBK7hj4Ov3rIwAAdHIIAKm5yjwQR8aqm/X0gJ+6pbeR\nVvE5HxowRwAyaUnhoYGIa0sP//3oKbGKypgyat1w1kosqrxLqcDOTbXwOg7U7YLY\nVtWWgJJbpq+n9g27cRle7+bWrytgE0Pt7qQ/wcKRW7JURoboS/7uz0rPFlNnWa7j\nNvrkxHRbKlM+YMeRPNpm8+rU5JhXP6LDB5pgAQqGpJXoAhUvhjXtca/m+JXv2pSw\nmdMzLofcSXPYl3UPw/+SHr+IxdAN8e0vbltKeaWcZE/pty0bQlwf2jxW7whTfNUx\nGaYYe2d6XN8OVnSe9XPo6lXfne6olHOtwmc1fsDquBvB21G30Wq2O1kXy41Tvc0=\n=ng8h\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cf4631cedf29c5c39276ed66af147bdf42e6992\nparent ef4b2edbd757bb5042875bc5b1eeebb45bbaea22\nparent 18f41e54d9c457da3e60735f494bffe92f8a303b\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534952741 +0200\ncommitter GitHub <noreply@github.com> 1534952741 +0200\n\nRollup merge of #53574 - vorner:ptr_as_ref_unchecked, r=Mark-Simulacrum\n\nSuggest direct raw-pointer dereference\n\nPeople often come looking for some kind of `as_ref_unchecked` method on\nraw pointers that would give them `&T` and not `Option<&T>` when they\nare sure the pointer is not NULL.\n\nThere's no such method, but taking a reference of the dereferenced\npointer accomplishes the same thing. Therefore, suggest using that, at\nthe `as_ref` site \u2012 it's a place people are likely going to look into.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f78a2d58f234b8e73743834eafee01168ed3767", "html_url": "https://github.com/rust-lang/rust/commit/4f78a2d58f234b8e73743834eafee01168ed3767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f78a2d58f234b8e73743834eafee01168ed3767/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4b2edbd757bb5042875bc5b1eeebb45bbaea22", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4b2edbd757bb5042875bc5b1eeebb45bbaea22", "html_url": "https://github.com/rust-lang/rust/commit/ef4b2edbd757bb5042875bc5b1eeebb45bbaea22"}, {"sha": "18f41e54d9c457da3e60735f494bffe92f8a303b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f41e54d9c457da3e60735f494bffe92f8a303b", "html_url": "https://github.com/rust-lang/rust/commit/18f41e54d9c457da3e60735f494bffe92f8a303b"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "57351822cc3cfe765ebd961dde0e12c61ff470e6", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4f78a2d58f234b8e73743834eafee01168ed3767/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f78a2d58f234b8e73743834eafee01168ed3767/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=4f78a2d58f234b8e73743834eafee01168ed3767", "patch": "@@ -582,6 +582,21 @@ impl<T: ?Sized> *const T {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// # Null-unchecked version\n+    ///\n+    /// If you are sure the pointer can never be null and are looking for some kind of\n+    /// `as_ref_unchecked` that returns the `&T` instead of `Option<&T>, know that you can\n+    /// dereference the pointer directly.\n+    ///\n+    /// ```\n+    /// let ptr: *const u8 = &10u8 as *const u8;\n+    ///\n+    /// unsafe {\n+    ///     let val_back = &*ptr;\n+    ///     println!(\"We got back the value: {}!\", val_back);\n+    /// }\n+    /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n@@ -1303,6 +1318,21 @@ impl<T: ?Sized> *mut T {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// # Null-unchecked version\n+    ///\n+    /// If you are sure the pointer can never be null and are looking for some kind of\n+    /// `as_ref_unchecked` that returns the `&T` instead of `Option<&T>, know that you can\n+    /// dereference the pointer directly.\n+    ///\n+    /// ```\n+    /// let ptr: *mut u8 = &mut 10u8 as *mut u8;\n+    ///\n+    /// unsafe {\n+    ///     let val_back = &*ptr;\n+    ///     println!(\"We got back the value: {}!\", val_back);\n+    /// }\n+    /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {"}]}