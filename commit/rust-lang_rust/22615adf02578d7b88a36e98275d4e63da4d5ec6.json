{"sha": "22615adf02578d7b88a36e98275d4e63da4d5ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjE1YWRmMDI1NzhkN2I4OGEzNmU5ODI3NWQ0ZTYzZGE0ZDVlYzY=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-05-16T16:54:12Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-05-19T21:05:08Z"}, "message": "Catch thread in example\n\n - Consume result of thread join()\n - Add link to threading model", "tree": {"sha": "ff62bfbb84fe1b50dd1050fc3d60a55be71ef023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff62bfbb84fe1b50dd1050fc3d60a55be71ef023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22615adf02578d7b88a36e98275d4e63da4d5ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22615adf02578d7b88a36e98275d4e63da4d5ec6", "html_url": "https://github.com/rust-lang/rust/commit/22615adf02578d7b88a36e98275d4e63da4d5ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22615adf02578d7b88a36e98275d4e63da4d5ec6/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764ef92ae7a26cbb9c2121de3812a0a17739f65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/764ef92ae7a26cbb9c2121de3812a0a17739f65f", "html_url": "https://github.com/rust-lang/rust/commit/764ef92ae7a26cbb9c2121de3812a0a17739f65f"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "1bdab88d71da08226d7238b0c2a1c32106ad7e4a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22615adf02578d7b88a36e98275d4e63da4d5ec6/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22615adf02578d7b88a36e98275d4e63da4d5ec6/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=22615adf02578d7b88a36e98275d4e63da4d5ec6", "patch": "@@ -26,8 +26,9 @@\n //! [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n //!\n //! Atomic variables are safe to share between threads (they implement `Sync`)\n-//! but they do not themselves provide the mechanism for sharing. The most\n-//! common way to share an atomic variable is to put it into an `Arc` (an\n+//! but they do not themselves provide the mechanism for sharing and follow the\n+//! [threading model](../../../std/thread/index.html#the-threading-model) of rust.\n+//! The most common way to share an atomic variable is to put it into an `Arc` (an\n //! atomically-reference-counted shared pointer).\n //!\n //! Most atomic types may be stored in static variables, initialized using\n@@ -48,12 +49,16 @@\n //!     let spinlock = Arc::new(AtomicUsize::new(1));\n //!\n //!     let spinlock_clone = spinlock.clone();\n-//!     thread::spawn(move|| {\n+//!     let thread = thread::spawn(move|| {\n //!         spinlock_clone.store(0, Ordering::SeqCst);\n //!     });\n //!\n //!     // Wait for the other thread to release the lock\n //!     while spinlock.load(Ordering::SeqCst) != 0 {}\n+//!\n+//!     if let Err(panic) = thread.join() {\n+//!         println!(\"Thread had an error: {:?}\", panic);\n+//!     }\n //! }\n //! ```\n //!"}]}