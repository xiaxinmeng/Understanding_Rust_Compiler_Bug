{"sha": "b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "node_id": "C_kwDOAAsO6NoAKGI2NTZmNWU5YTY0ZDZmZTBmMGI3NWU3NmU2MzUwZmIwOGNlYTU2MmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-23T06:14:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T06:14:31Z"}, "message": "Rollup merge of #103354 - clubby789:escape-string-literals, r=compiler-errors\n\nEscape string literals when fixing overlong char literal\n\nFixes #103323\n\n````@rustbot```` label +A-diagnostics +A-suggestion-diagnostics", "tree": {"sha": "649aff2c2c3392d57c0c43afb76d563945fb534c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649aff2c2c3392d57c0c43afb76d563945fb534c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVNvHCRBK7hj4Ov3rIwAArCAIAKM1MhCYfc7WdbpwDtUle5hm\nBFsAZon1PInTmNSRcjx3DJjgjTumUlCBWicuHDZWH6u9zoVXts9Ua7lebOwu6Yxe\nkRIUCf4rkBuvu0It/wLYx0sjyeNYYiAqvCVrba3Jto7OBYB/ZCvwINO4qLDI6uCr\n3kjkhLjgze/C9DRfhW/kf4IDgbETkrGKaux4AUUAlSwITIwiMBd4xcPPu6xiuifX\nLZcLBdtq1A5L8z1TQmxCOvSrUDiIyTB4/YZbzEOnC20MatkpbvB0IZOj0XFoOdQz\nFS+OTZyCUS4M4ebk7fVmkeXwMHvCC5E2Ry4ltuxHslGeX3hr57KYfE15Xxmxc/0=\n=lohq\n-----END PGP SIGNATURE-----\n", "payload": "tree 649aff2c2c3392d57c0c43afb76d563945fb534c\nparent 1a077420f864868ec0c8b5d401a4dbb60f18c77d\nparent 876248506c9dcb0f4f57db49021374bb0bfc1bd7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666505671 +0200\ncommitter GitHub <noreply@github.com> 1666505671 +0200\n\nRollup merge of #103354 - clubby789:escape-string-literals, r=compiler-errors\n\nEscape string literals when fixing overlong char literal\n\nFixes #103323\n\n````@rustbot```` label +A-diagnostics +A-suggestion-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "html_url": "https://github.com/rust-lang/rust/commit/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a077420f864868ec0c8b5d401a4dbb60f18c77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a077420f864868ec0c8b5d401a4dbb60f18c77d", "html_url": "https://github.com/rust-lang/rust/commit/1a077420f864868ec0c8b5d401a4dbb60f18c77d"}, {"sha": "876248506c9dcb0f4f57db49021374bb0bfc1bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/876248506c9dcb0f4f57db49021374bb0bfc1bd7", "html_url": "https://github.com/rust-lang/rust/commit/876248506c9dcb0f4f57db49021374bb0bfc1bd7"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "9ff703e521ff666aa5b2a44d8bb0effe9b776725", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -2271,6 +2271,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n             FailureCode::Error0308(failure_str) => {\n+                fn escape_literal(s: &str) -> String {\n+                    let mut escaped = String::with_capacity(s.len());\n+                    let mut chrs = s.chars().peekable();\n+                    while let Some(first) = chrs.next() {\n+                        match (first, chrs.peek()) {\n+                            ('\\\\', Some(&delim @ '\"') | Some(&delim @ '\\'')) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(delim);\n+                                chrs.next();\n+                            }\n+                            ('\"' | '\\'', _) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(first)\n+                            }\n+                            (c, _) => escaped.push(c),\n+                        };\n+                    }\n+                    escaped\n+                }\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n                 if let Some((expected, found)) = trace.values.ty() {\n                     match (expected.kind(), found.kind()) {\n@@ -2292,7 +2311,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 err.span_suggestion(\n                                     span,\n                                     \"if you meant to write a `char` literal, use single quotes\",\n-                                    format!(\"'{}'\", code),\n+                                    format!(\"'{}'\", escape_literal(code)),\n                                     Applicability::MachineApplicable,\n                                 );\n                             }\n@@ -2307,7 +2326,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                     err.span_suggestion(\n                                         span,\n                                         \"if you meant to write a `str` literal, use double quotes\",\n-                                        format!(\"\\\"{}\\\"\", code),\n+                                        format!(\"\\\"{}\\\"\", escape_literal(code)),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }"}, {"sha": "f075de714267688eb0711fe0e631f14cb9c485d3", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -113,11 +113,26 @@ pub(crate) fn emit_unescape_error(\n                 } else {\n                     (\"\", \"if you meant to write a `str` literal, use double quotes\")\n                 };\n-\n+                let mut escaped = String::with_capacity(lit.len());\n+                let mut chrs = lit.chars().peekable();\n+                while let Some(first) = chrs.next() {\n+                    match (first, chrs.peek()) {\n+                        ('\\\\', Some('\"')) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"');\n+                            chrs.next();\n+                        }\n+                        ('\"', _) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"')\n+                        }\n+                        (c, _) => escaped.push(c),\n+                    };\n+                }\n                 handler.span_suggestion(\n                     span_with_quotes,\n                     msg,\n-                    format!(\"{}\\\"{}\\\"\", prefix, lit),\n+                    format!(\"{prefix}\\\"{escaped}\\\"\"),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "bab1854dc51735737921efd4e28076b47085d453", "filename": "src/test/ui/inference/char-as-str-single.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -8,4 +8,5 @@\n fn main() {\n     let _: char = 'a'; //~ ERROR mismatched types\n     let _: char = '\u4eba'; //~ ERROR mismatched types\n+    let _: char = '\\''; //~ ERROR mismatched types\n }"}, {"sha": "736920643b2c4dd5ac7c8bc2ee9d0480b23c0e00", "filename": "src/test/ui/inference/char-as-str-single.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -8,4 +8,5 @@\n fn main() {\n     let _: char = \"a\"; //~ ERROR mismatched types\n     let _: char = \"\u4eba\"; //~ ERROR mismatched types\n+    let _: char = \"'\"; //~ ERROR mismatched types\n }"}, {"sha": "3375ec6ac32cac2508a3d104f1f8af48af6fe1a4", "filename": "src/test/ui/inference/char-as-str-single.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -24,6 +24,19 @@ help: if you meant to write a `char` literal, use single quotes\n LL |     let _: char = '\u4eba';\n    |                   ~~~~\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:11:19\n+   |\n+LL |     let _: char = \"'\";\n+   |            ----   ^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = '\\'';\n+   |                   ~~~~\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "6aea809cbdb29ff0b8e127017d53339470af16ec", "filename": "src/test/ui/inference/str-as-char.fixed", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -4,5 +4,7 @@\n // run-rustfix\n \n fn main() {\n-    let _: &str = \"a\"; //~ ERROR mismatched types\n+    let _: &str = \"a\";   //~ ERROR mismatched types\n+    let _: &str = \"\\\"\\\"\\\"\"; //~ ERROR character literal may only contain one codepoint\n+    let _: &str = \"\\\"\\\"\\\"\"; //~ ERROR character literal may only contain one codepoint\n }"}, {"sha": "eaa8d788c34674ea2ad88003c097a7d3552c024a", "filename": "src/test/ui/inference/str-as-char.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -4,5 +4,7 @@\n // run-rustfix\n \n fn main() {\n-    let _: &str = 'a'; //~ ERROR mismatched types\n+    let _: &str = 'a';   //~ ERROR mismatched types\n+    let _: &str = '\"\"\"'; //~ ERROR character literal may only contain one codepoint\n+    let _: &str = '\\\"\\\"\\\"'; //~ ERROR character literal may only contain one codepoint\n }"}, {"sha": "2c84dac8e0c15e481112c257a2c3db7c953d8b6c", "filename": "src/test/ui/inference/str-as-char.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b656f5e9a64d6fe0f0b75e76e6350fb08cea562d/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr?ref=b656f5e9a64d6fe0f0b75e76e6350fb08cea562d", "patch": "@@ -1,3 +1,25 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/str-as-char.rs:8:19\n+   |\n+LL |     let _: &str = '\"\"\"';\n+   |                   ^^^^^\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"\\\"\\\"\\\"\";\n+   |                   ~~~~~~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/str-as-char.rs:9:19\n+   |\n+LL |     let _: &str = '\\\"\\\"\\\"';\n+   |                   ^^^^^^^^\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"\\\"\\\"\\\"\";\n+   |                   ~~~~~~~~\n+\n error[E0308]: mismatched types\n   --> $DIR/str-as-char.rs:7:19\n    |\n@@ -11,6 +33,6 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     let _: &str = \"a\";\n    |                   ~~~\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}