{"sha": "5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMWUwMTE5NmRjZmFlYTJjZThkZjQyNzFmZjM5OGQyMGFjMTIzZTk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-06T07:26:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T07:26:11Z"}, "message": "Rollup merge of #77560 - rschoon:fix-litkind-rc-bytebuf, r=lcnr\n\nFix LitKind's byte buffer to use refcounted slice\n\nWhile working on adding a new lint for clippy (see https://github.com/rust-lang/rust-clippy/pull/6044) for avoiding shared ownership of \"mutable buffer\" types (such as using `Rc<Vec<T>>` instead of `Rc<[T]>`), I noticed a type exported from rustc_ast and used by clippy gets caught by the lint. This PR fixes the exported type.\n\nThis PR includes the actual change to clippy too, but I will open a PR directly against clippy for that part (although it will currently fail to build there).", "tree": {"sha": "e65ff642ee85e8c3fff185097399357f13332f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65ff642ee85e8c3fff185097399357f13332f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffBwTCRBK7hj4Ov3rIwAAdHIIAAiBXSWkuWiPXhfKYqphe481\nRfyyBfb2wX/cHsmL14NM8cBE/6C7dq/4VMgR4uol8gvWOolIgm9e3tfvwj4R3M/7\ndBKFRPqLhyY6dkB2lma0f2WYpq/QtY9EoxA3mNrgw2/DXuNAqkIM6hGrUnruoVzw\n31GnXqg4k6I+IxAZsSAAx6nn3IP9SaEqsEXifGtsuLQ/2XUxyTD7tBM3fFiwdr4U\nTO4VS3zI3KMXMNMRYAU9J0VFvH4O+gBwmgmVuSjpITjlaOLdLzYR6pGhH8EmGT2h\niiKEuVFlmilq7ZwLoNe4La3d4+uh+pptzMyeZVNEOp6MPRtOrJtJivyALQvZep4=\n=wkED\n-----END PGP SIGNATURE-----\n", "payload": "tree e65ff642ee85e8c3fff185097399357f13332f4b\nparent 2970af8e288d95a39b56b6b0784f9d4e664e7644\nparent 62f7712a1fd500604f76442f627ea35ce7217177\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601969171 +0900\ncommitter GitHub <noreply@github.com> 1601969171 +0900\n\nRollup merge of #77560 - rschoon:fix-litkind-rc-bytebuf, r=lcnr\n\nFix LitKind's byte buffer to use refcounted slice\n\nWhile working on adding a new lint for clippy (see https://github.com/rust-lang/rust-clippy/pull/6044) for avoiding shared ownership of \"mutable buffer\" types (such as using `Rc<Vec<T>>` instead of `Rc<[T]>`), I noticed a type exported from rustc_ast and used by clippy gets caught by the lint. This PR fixes the exported type.\n\nThis PR includes the actual change to clippy too, but I will open a PR directly against clippy for that part (although it will currently fail to build there).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "html_url": "https://github.com/rust-lang/rust/commit/5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2970af8e288d95a39b56b6b0784f9d4e664e7644", "url": "https://api.github.com/repos/rust-lang/rust/commits/2970af8e288d95a39b56b6b0784f9d4e664e7644", "html_url": "https://github.com/rust-lang/rust/commit/2970af8e288d95a39b56b6b0784f9d4e664e7644"}, {"sha": "62f7712a1fd500604f76442f627ea35ce7217177", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f7712a1fd500604f76442f627ea35ce7217177", "html_url": "https://github.com/rust-lang/rust/commit/62f7712a1fd500604f76442f627ea35ce7217177"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "492d5788fc04f46abe01076aa7527e8f878f6a04", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "patch": "@@ -1606,7 +1606,7 @@ pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),\n     /// A byte string (`b\"foo\"`).\n-    ByteStr(Lrc<Vec<u8>>),\n+    ByteStr(Lrc<[u8]>),\n     /// A byte char (`b'f'`).\n     Byte(u8),\n     /// A character literal (`'a'`)."}, {"sha": "f6f1ad0a9c3f22f24c329fddb28e0a323bd0e1fc", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "patch": "@@ -4,7 +4,6 @@ use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n use crate::tokenstream::TokenTree;\n \n-use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -108,7 +107,7 @@ impl LitKind {\n                 });\n                 error?;\n                 buf.shrink_to_fit();\n-                LitKind::ByteStr(Lrc::new(buf))\n+                LitKind::ByteStr(buf.into())\n             }\n             token::ByteStrRaw(_) => {\n                 let s = symbol.as_str();\n@@ -128,7 +127,7 @@ impl LitKind {\n                     symbol.to_string().into_bytes()\n                 };\n \n-                LitKind::ByteStr(Lrc::new(bytes))\n+                LitKind::ByteStr(bytes.into())\n             }\n             token::Err => LitKind::Err(symbol),\n         })"}, {"sha": "f76bbd8381940630bd1bbfbdda3da0018a5bab96", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "patch": "@@ -13,8 +13,6 @@ use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n use std::rc::Rc;\n \n-use rustc_data_structures::sync::Lrc;\n-\n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include\n // a given file into the current one.\n@@ -216,7 +214,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes)))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "b71ff6e7557496ac2b5cddbce0390efa4dc3c29f", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "patch": "@@ -31,7 +31,7 @@ crate fn lit_to_const<'tcx>(\n         (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n-            let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n+            let allocation = Allocation::from_byte_aligned_bytes(data as &[u8]);\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }"}, {"sha": "062c9bd2d9e6c9eb83770ec5c342a4d48bd1da46", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1e01196dcfaea2ce8df4271ff398d20ac123e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=5c1e01196dcfaea2ce8df4271ff398d20ac123e9", "patch": "@@ -155,7 +155,7 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::from(s.as_slice())),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}]}