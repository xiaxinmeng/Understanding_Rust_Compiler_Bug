{"sha": "8557cb47cba1f343563f92b14151661425573270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTdjYjQ3Y2JhMWYzNDM1NjNmOTJiMTQxNTE2NjE0MjU1NzMyNzA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-20T11:15:21Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-01T19:30:18Z"}, "message": "don't store method_fty\n\nIt is redundant with the item type. This is not much of a win,\nas there are really not *that* many methods, but it makes the code\nuglier.", "tree": {"sha": "aefda050d18cc3407a63a8185dc4151fd01f1b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefda050d18cc3407a63a8185dc4151fd01f1b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8557cb47cba1f343563f92b14151661425573270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8557cb47cba1f343563f92b14151661425573270", "html_url": "https://github.com/rust-lang/rust/commit/8557cb47cba1f343563f92b14151661425573270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8557cb47cba1f343563f92b14151661425573270/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c921e8a5797d5e770a633d53116a24deab8067", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c921e8a5797d5e770a633d53116a24deab8067", "html_url": "https://github.com/rust-lang/rust/commit/a1c921e8a5797d5e770a633d53116a24deab8067"}], "stats": {"total": 37, "additions": 8, "deletions": 29}, "files": [{"sha": "c436963f6ad8dfb7e920d483b172b34a995ca01b", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=8557cb47cba1f343563f92b14151661425573270", "patch": "@@ -163,8 +163,7 @@ pub const tag_lang_items_missing: usize = 0x76;\n pub const tag_item_unnamed_field: usize = 0x77;\n pub const tag_items_data_item_visibility: usize = 0x78;\n \n-// GAP 0x79\n-pub const tag_item_method_fty: usize = 0x7a;\n+// GAP 0x79, 0x7a\n \n pub const tag_mod_child: usize = 0x7b;\n pub const tag_misc_info: usize = 0x108; // top-level only"}, {"sha": "69d3e55835f5b488bc085d9b1b3961dc1c3e0bfa", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8557cb47cba1f343563f92b14151661425573270", "patch": "@@ -219,14 +219,6 @@ fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Opt\n     })\n }\n \n-fn doc_method_fty<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>,\n-                        cdata: Cmd) -> ty::BareFnTy<'tcx> {\n-    let tp = reader::get_doc(doc, tag_item_method_fty);\n-    TyDecoder::with_doc(tcx, cdata.cnum, tp,\n-                        &mut |_, did| translate_def_id(cdata, did))\n-        .parse_bare_fn_ty()\n-}\n-\n pub fn item_type<'tcx>(_item_id: DefId, item: rbml::Doc,\n                        tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n     doc_type(item, tcx, cdata)\n@@ -880,7 +872,13 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n         Some('r') | Some('p') => {\n             let generics = doc_generics(item_doc, tcx, cdata, tag_method_ty_generics);\n             let predicates = doc_predicates(item_doc, tcx, cdata, tag_method_ty_generics);\n-            let fty = doc_method_fty(item_doc, tcx, cdata);\n+            let ity = tcx.lookup_item_type(def_id).ty;\n+            let fty = match ity.sty {\n+                ty::TyBareFn(_, fty) => fty.clone(),\n+                _ => tcx.sess.bug(&format!(\n+                    \"the type {:?} of the method {:?} is not a function?\",\n+                    ity, name))\n+            };\n             let explicit_self = get_explicit_self(item_doc);\n \n             ty::MethodTraitItem(Rc::new(ty::Method::new(name,"}, {"sha": "dd23584994b9a2dfe4d26bc372be4424451c5cf5", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8557cb47cba1f343563f92b14151661425573270/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8557cb47cba1f343563f92b14151661425573270", "patch": "@@ -235,22 +235,6 @@ fn encode_region(ecx: &EncodeContext,\n     rbml_w.end_tag();\n }\n \n-fn encode_method_fty<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n-                               rbml_w: &mut Encoder,\n-                               typ: &ty::BareFnTy<'tcx>) {\n-    rbml_w.start_tag(tag_item_method_fty);\n-\n-    let ty_str_ctxt = &tyencode::ctxt {\n-        diag: ecx.diag,\n-        ds: def_to_string,\n-        tcx: ecx.tcx,\n-        abbrevs: &ecx.type_abbrevs\n-    };\n-    tyencode::enc_bare_fn_ty(rbml_w, ty_str_ctxt, typ);\n-\n-    rbml_w.end_tag();\n-}\n-\n fn encode_symbol(ecx: &EncodeContext,\n                  rbml_w: &mut Encoder,\n                  id: NodeId) {\n@@ -755,7 +739,6 @@ fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_generics(rbml_w, ecx, index,\n                     &method_ty.generics, &method_ty.predicates,\n                     tag_method_ty_generics);\n-    encode_method_fty(ecx, rbml_w, &method_ty.fty);\n     encode_visibility(rbml_w, method_ty.vis);\n     encode_explicit_self(rbml_w, &method_ty.explicit_self);\n     match method_ty.explicit_self {\n@@ -826,7 +809,6 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     let stab = stability::lookup(ecx.tcx, m.def_id);\n     encode_stability(rbml_w, stab);\n \n-    // The type for methods gets encoded twice, which is unfortunate.\n     encode_bounds_and_type_for_item(rbml_w, ecx, index, m.def_id.local_id());\n \n     let elem = ast_map::PathName(m.name);"}]}