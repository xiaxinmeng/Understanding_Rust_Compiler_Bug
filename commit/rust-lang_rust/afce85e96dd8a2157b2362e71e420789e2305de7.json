{"sha": "afce85e96dd8a2157b2362e71e420789e2305de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmY2U4NWU5NmRkOGEyMTU3YjIzNjJlNzFlNDIwNzg5ZTIzMDVkZTc=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-15T14:20:20Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-15T14:20:20Z"}, "message": "Add lint for unnecessary casts (cast to same type)", "tree": {"sha": "4771b15c39433cd3163582cd7fe1021e9c7218c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4771b15c39433cd3163582cd7fe1021e9c7218c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afce85e96dd8a2157b2362e71e420789e2305de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afce85e96dd8a2157b2362e71e420789e2305de7", "html_url": "https://github.com/rust-lang/rust/commit/afce85e96dd8a2157b2362e71e420789e2305de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afce85e96dd8a2157b2362e71e420789e2305de7/comments", "author": null, "committer": null, "parents": [{"sha": "c76517d6c4160083e642f6981f68b1ce6690206e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c76517d6c4160083e642f6981f68b1ce6690206e", "html_url": "https://github.com/rust-lang/rust/commit/c76517d6c4160083e642f6981f68b1ce6690206e"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "a32224c1de1f75ccdc1d249a67d66bf08a8a6e44", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -293,6 +293,7 @@ All notable changes to this project will be documented in this file.\n [`cast_possible_wrap`]: https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap\n [`cast_precision_loss`]: https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss\n [`cast_sign_loss`]: https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss\n+[`cast_unnecessary`]: https://github.com/Manishearth/rust-clippy/wiki#cast_unnecessary\n [`char_lit_as_u8`]: https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8\n [`chars_next_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp\n [`clone_double_ref`]: https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref"}, {"sha": "a402b87f079c4ef3eb3564286c31798df952a9d6", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 189 lints included in this crate:\n+There are 190 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -201,6 +201,7 @@ name\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                       | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[cast_unnecessary](https://github.com/Manishearth/rust-clippy/wiki#cast_unnecessary)                                   | warn    | cast to the same type, e.g `x as i32` where `x: i32`\n [char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                       | warn    | casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                       | warn    | using `.chars().next()` to check if a string starts with a char\n [clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                   | warn    | using `clone` on `&&T`"}, {"sha": "93eb449ebe0667b35a627c11df550475324dc02f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -488,6 +488,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BOX_VEC,\n+        types::CAST_UNNECESSARY,\n         types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,"}, {"sha": "161b2a1226cd8abbed0c17fa24ad5befc5d167d9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -379,6 +379,22 @@ declare_lint! {\n      and `x > i32::MAX`\"\n }\n \n+/// **What it does:** Checks for casts to the same type\n+///\n+/// **Why is this bad?** It's just unnecessary\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _ = 2i32 as i32\n+/// ```\n+declare_lint! {\n+    pub CAST_UNNECESSARY,\n+    Warn,\n+    \"cast to the same type, e.g `x as i32` where `x: i32`\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: &ty::TyS) -> usize {\n@@ -503,14 +519,21 @@ impl LintPass for CastPass {\n         lint_array!(CAST_PRECISION_LOSS,\n                     CAST_SIGN_LOSS,\n                     CAST_POSSIBLE_TRUNCATION,\n-                    CAST_POSSIBLE_WRAP)\n+                    CAST_POSSIBLE_WRAP,\n+                    CAST_UNNECESSARY)\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n+            if cast_from.sty == cast_to.sty && !in_external_macro(cx, expr.span) {\n+                span_lint(cx,\n+                          CAST_UNNECESSARY,\n+                          expr.span,\n+                          &format!(\"casting to the same type is unnecessary ({} -> {})\", cast_from, cast_to));\n+            }\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {"}, {"sha": "7b64b50a1caf2a0a8e93046e6af334b54411141f", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -61,4 +61,15 @@ fn main() {\n     1u32 as usize; // Should not trigger any lint\n     1i32 as isize; // Neither should this\n     1i32 as usize;\n+\n+    // Test cast_unnecessary\n+    1i32 as i32;\n+    1f32 as f32;\n+    false as bool;\n+    &1i32 as &i32;\n+\n+    1i32 as i64;      // Should not trigger\n+\n+    let v = vec!(1);\n+    &v as &[i32]; // Should not trigger\n }"}, {"sha": "289d1d0ac4ffcf0698ac82058373a113e134c85c", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afce85e96dd8a2157b2362e71e420789e2305de7/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afce85e96dd8a2157b2362e71e420789e2305de7/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=afce85e96dd8a2157b2362e71e420789e2305de7", "patch": "@@ -274,5 +274,37 @@ error: casting i32 to usize may lose the sign of the value\n 63 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n+warning: casting to the same type is unnecessary (i32 -> i32)\n+  --> $DIR/cast.rs:66:5\n+   |\n+66 |     1i32 as i32;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: #[warn(cast_unnecessary)] on by default\n+\n+warning: casting to the same type is unnecessary (f32 -> f32)\n+  --> $DIR/cast.rs:67:5\n+   |\n+67 |     1f32 as f32;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: #[warn(cast_unnecessary)] on by default\n+\n+warning: casting to the same type is unnecessary (bool -> bool)\n+  --> $DIR/cast.rs:68:5\n+   |\n+68 |     false as bool;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(cast_unnecessary)] on by default\n+\n+warning: casting to the same type is unnecessary (&i32 -> &i32)\n+  --> $DIR/cast.rs:69:5\n+   |\n+69 |     &1i32 as &i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(cast_unnecessary)] on by default\n+\n error: aborting due to 42 previous errors\n "}]}