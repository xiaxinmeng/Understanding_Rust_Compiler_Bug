{"sha": "7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzM1ZWFhMTJjNGExMTg1YTdhMThmYWQ2ZDhmMzkxMzljYTY2OGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-03-27T04:03:50Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-04-06T18:05:45Z"}, "message": "chalkify: Implement Rule Implied-Bound-From-Trait", "tree": {"sha": "c20c8c6faa8a2e2bb9e97699f216a92d2a8026f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c20c8c6faa8a2e2bb9e97699f216a92d2a8026f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "html_url": "https://github.com/rust-lang/rust/commit/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7678d5021e5c984af52f4d1e9147f7a2d6a7ddc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7678d5021e5c984af52f4d1e9147f7a2d6a7ddc3", "html_url": "https://github.com/rust-lang/rust/commit/7678d5021e5c984af52f4d1e9147f7a2d6a7ddc3"}], "stats": {"total": 217, "additions": 212, "deletions": 5}, "files": [{"sha": "3d24b087c595834a0af70ccf0ebf5db716fbf6a1", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -90,6 +90,28 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n     }\n }\n \n+/// Transforms an existing goal into a FromEnv goal.\n+///\n+/// Used for lowered where clauses (see rustc guide).\n+trait IntoFromEnvGoal {\n+    fn into_from_env_goal(self) -> Self;\n+}\n+\n+impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n+    fn into_from_env_goal(self) -> DomainGoal<'tcx> {\n+        use self::DomainGoal::*;\n+        match self {\n+            Holds(wc_atom) => FromEnv(wc_atom),\n+            WellFormed(..) |\n+            FromEnv(..) |\n+            WellFormedTy(..) |\n+            FromEnvTy(..) |\n+            RegionOutlives(..) |\n+            TypeOutlives(..) => self,\n+        }\n+    }\n+}\n+\n crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     -> Lrc<Vec<Clause<'tcx>>>\n {\n@@ -107,9 +129,9 @@ crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     -> Lrc<Vec<Clause<'tcx>>>\n {\n-    // Rule Implemented-From-Env (see rustc guide)\n-    //\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n+\n+    // Rule Implemented-From-Env (see rustc guide)\n     //\n     // ```\n     // forall<Self, P1..Pn> {\n@@ -130,11 +152,50 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     let impl_trait = DomainGoal::Holds(WhereClauseAtom::Implemented(trait_pred));\n \n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n-    let clause = ProgramClause {\n+    let implemented_from_env = ProgramClause {\n         goal: impl_trait,\n         hypotheses: vec![from_env],\n     };\n-    Lrc::new(vec![Clause::ForAll(ty::Binder::dummy(clause))])\n+    let mut clauses = vec![\n+        Clause::ForAll(ty::Binder::dummy(implemented_from_env))\n+    ];\n+\n+    // Rule Implied-Bound-From-Trait\n+    //\n+    // For each where clause WC:\n+    // ```\n+    // forall<Self, P1..Pn> {\n+    //   FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn)\n+    // }\n+    // ```\n+\n+    // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`, for each where clause WC\n+    // FIXME: Remove the [1..] slice; this is a hack because the query\n+    // predicates_of currently includes the trait itself (`Self: Trait<P1..Pn>`).\n+    let where_clauses = &tcx.predicates_of(def_id).predicates;\n+    let implied_bound_clauses =\n+        where_clauses[1..].into_iter()\n+        .map(|wc| implied_bound_from_trait(trait_pred, wc));\n+    clauses.extend(implied_bound_clauses);\n+\n+    Lrc::new(clauses)\n+}\n+\n+/// For a given `where_clause`, returns a clause `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`.\n+fn implied_bound_from_trait<'tcx>(\n+    trait_pred: ty::TraitPredicate<'tcx>,\n+    where_clause: &ty::Predicate<'tcx>,\n+) -> Clause<'tcx> {\n+    // `FromEnv(Self: Trait<P1..Pn>)`\n+    let impl_trait = DomainGoal::FromEnv(WhereClauseAtom::Implemented(trait_pred));\n+\n+    // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`\n+    Clause::ForAll(\n+        where_clause.lower().map_bound(|goal| ProgramClause {\n+            goal: goal.into_from_env_goal(),\n+            hypotheses: vec![impl_trait.into()],\n+        })\n+    )\n }\n \n fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)"}, {"sha": "74feb0105ccf1ced50accc11a62f8a6c53180a92", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -11,6 +11,9 @@\n #![feature(rustc_attrs)]\n \n #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n trait Foo<S, T, U> {\n     fn s(S) -> S;\n     fn t(T) -> T;"}, {"sha": "45753c3bb90c2977a6b88e17e9fe1d1c43b8d3b2", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -4,5 +4,23 @@ error: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+  --> $DIR/lower_trait.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+  --> $DIR/lower_trait.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+  --> $DIR/lower_trait.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "e5eaf4591ece8685d4711f6fdc369374c070c5b6", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+trait Foo<F> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n+{\n+    fn s(F) -> F;\n+}\n+\n+fn main() {\n+    println!(\"hello\");\n+}"}, {"sha": "9aed0c018c947b9d420352566c5f78541b9b6938", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -0,0 +1,26 @@\n+error: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n+  --> $DIR/lower_trait_higher_rank.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(F: std::marker::Sized) :- FromEnv(Self: Foo<F>).\n+  --> $DIR/lower_trait_higher_rank.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n+  --> $DIR/lower_trait_higher_rank.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n+  --> $DIR/lower_trait_higher_rank.rs:13:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b2ce3ca48b27af60d20245db38317069576a1f14", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::fmt::{Debug, Display};\n+use std::borrow::Borrow;\n+\n+#[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+                              //~| ERROR FromEnv\n+                              //~| ERROR RegionOutlives\n+                              //~| ERROR TypeOutlives\n+trait Foo<'a, 'b, S, T, U> where S: Debug, T: Borrow<U>, U: ?Sized, 'a: 'b, U: 'b {\n+    fn s(S) -> S;\n+    fn t(T) -> T;\n+    fn u(U) -> U;\n+}\n+\n+fn main() {\n+    println!(\"hello\");\n+}"}, {"sha": "a9ecaec3aff9ef2080b9a1ac60fcf2eb30da2d0e", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac35eaa12c4a1185a7a18fad6d8f39139ca668c/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=7ac35eaa12c4a1185a7a18fad6d8f39139ca668c", "patch": "@@ -0,0 +1,44 @@\n+error: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(S: std::fmt::Debug) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+  --> $DIR/lower_trait_where_clause.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}