{"sha": "5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDllMTJlMTViOGIzNzczOWNiMjkzNWFlM2U4ZTEzYzY5M2JkOGY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-05-19T23:43:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-20T00:25:37Z"}, "message": "Added two version of reverse and a swap function to the standard library.", "tree": {"sha": "207a6fc129d8095db6e63e50fe0f62d1c2fdd85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/207a6fc129d8095db6e63e50fe0f62d1c2fdd85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "html_url": "https://github.com/rust-lang/rust/commit/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f938f4945bcf6ba27f872b179a517e4d5c39a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f938f4945bcf6ba27f872b179a517e4d5c39a4f", "html_url": "https://github.com/rust-lang/rust/commit/7f938f4945bcf6ba27f872b179a517e4d5c39a4f"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "f3f06a1dc85dbbc0fa7d087bf064ef3a079b15cf", "filename": "src/lib/vec.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "patch": "@@ -322,6 +322,45 @@ fn freeze[T](vec[mutable T] v) -> vec[T] {\n     ret result;\n }\n \n+// Swaps two elements in a vector\n+fn swap[T](&vec[T] v, uint a, uint b) {\n+    let T t = v.(a);\n+    v.(a) = v.(b);\n+    v.(b) = t;\n+}\n+\n+// In place vector reversal\n+fn reverse[T](&vec[T] v) -> () {\n+    let uint i = 0u;\n+    auto ln = len[T](v);\n+\n+    while(i < ln / 2u) {\n+        swap(v, i, ln - i - 1u);\n+        i += 1u;\n+    }\n+}\n+\n+// Functional vector reversal. Returns a reversed copy of v.\n+fn reversed[T](vec[T] v) -> vec[T] {\n+    let vec[T] res = [];\n+\n+    auto i = len[T](v);\n+    if (i == 0u) {\n+        ret res;\n+    }\n+    else {\n+        i -= 1u;\n+    }\n+\n+    while(i != 0u) {\n+        push[T](res, v.(i));\n+        i -= 1u;\n+    }\n+    push[T](res, v.(0));\n+\n+    ret res;\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "5cc9b8a363b782213fff98c77772abc3d3420977", "filename": "src/test/run-pass/vec-reverse.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f/src%2Ftest%2Frun-pass%2Fvec-reverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d09e12e15b8b37739cb2935ae3e8e13c693bd8f/src%2Ftest%2Frun-pass%2Fvec-reverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-reverse.rs?ref=5d09e12e15b8b37739cb2935ae3e8e13c693bd8f", "patch": "@@ -0,0 +1,29 @@\n+use std;\n+import std::vec;\n+\n+fn main() {\n+  let vec[int] v = [10, 20];\n+\n+  assert v.(0) == 10;\n+  assert v.(1) == 20;\n+\n+  vec::reverse[int](v);\n+\n+  assert v.(0) == 20;\n+  assert v.(1) == 10;\n+\n+  auto v2 = vec::reversed[int](v);\n+\n+  assert v2.(0) == 10;\n+  assert v2.(1) == 20;\n+\n+  v.(0) = 30;\n+\n+  assert v2.(0) == 10;\n+\n+  // Make sure they work with 0-length vectors too.\n+  let vec[int] v3 = [];\n+  auto v4 = vec::reversed[int](v3);\n+\n+  vec::reverse[int](v3);\n+}"}]}