{"sha": "bd9c67e181aaf304767593a239486e07119286cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOWM2N2UxODFhYWYzMDQ3Njc1OTNhMjM5NDg2ZTA3MTE5Mjg2Y2M=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T11:43:55Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-16T14:29:22Z"}, "message": "rustc: check for signed division/remainder overflow.", "tree": {"sha": "79eec316ffa8d1e6b74a08fe900267e95ba129d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79eec316ffa8d1e6b74a08fe900267e95ba129d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9c67e181aaf304767593a239486e07119286cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9c67e181aaf304767593a239486e07119286cc", "html_url": "https://github.com/rust-lang/rust/commit/bd9c67e181aaf304767593a239486e07119286cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9c67e181aaf304767593a239486e07119286cc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3c9a1e885964309445e097cab64fe302e144e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c9a1e885964309445e097cab64fe302e144e1", "html_url": "https://github.com/rust-lang/rust/commit/cb3c9a1e885964309445e097cab64fe302e144e1"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "3d03cd946c48fadf517ca238ab75d540e63dd313", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bd9c67e181aaf304767593a239486e07119286cc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9c67e181aaf304767593a239486e07119286cc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bd9c67e181aaf304767593a239486e07119286cc", "patch": "@@ -27,6 +27,7 @@ use syntax::{ast_map, ast_util, codemap};\n \n use std::cmp::Ordering;\n use std::collections::hash_map::Entry::Vacant;\n+use std::{i8, i16, i32, i64};\n use std::rc::Rc;\n \n fn lookup_const<'a>(tcx: &'a ty::ctxt, e: &Expr) -> Option<&'a Expr> {\n@@ -263,19 +264,46 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             }\n           }\n           (Ok(const_int(a)), Ok(const_int(b))) => {\n+            let is_a_min_value = |&:| {\n+                let int_ty = match ty::expr_ty_opt(tcx, e).map(|ty| &ty.sty) {\n+                    Some(&ty::ty_int(int_ty)) => int_ty,\n+                    _ => return false\n+                };\n+                let int_ty = if let ast::TyIs(_) = int_ty {\n+                    tcx.sess.target.int_type\n+                } else {\n+                    int_ty\n+                };\n+                match int_ty {\n+                    ast::TyI8 => (a as i8) == i8::MIN,\n+                    ast::TyI16 =>  (a as i16) == i16::MIN,\n+                    ast::TyI32 =>  (a as i32) == i32::MIN,\n+                    ast::TyI64 =>  (a as i64) == i64::MIN,\n+                    ast::TyIs(_) => unreachable!()\n+                }\n+            };\n             match op.node {\n               ast::BiAdd => Ok(const_int(a + b)),\n               ast::BiSub => Ok(const_int(a - b)),\n               ast::BiMul => Ok(const_int(a * b)),\n-              ast::BiDiv if b == 0 => {\n-                  Err(\"attempted to divide by zero\".to_string())\n+              ast::BiDiv => {\n+                  if b == 0 {\n+                      Err(\"attempted to divide by zero\".to_string())\n+                  } else if b == -1 && is_a_min_value() {\n+                      Err(\"attempted to divide with overflow\".to_string())\n+                  } else {\n+                      Ok(const_int(a / b))\n+                  }\n               }\n-              ast::BiDiv => Ok(const_int(a / b)),\n-              ast::BiRem if b == 0 => {\n-                  Err(\"attempted remainder with a divisor of \\\n-                       zero\".to_string())\n+              ast::BiRem => {\n+                  if b == 0 {\n+                      Err(\"attempted remainder with a divisor of zero\".to_string())\n+                  } else if b == -1 && is_a_min_value() {\n+                      Err(\"attempted remainder with overflow\".to_string())\n+                  } else {\n+                      Ok(const_int(a % b))\n+                  }\n               }\n-              ast::BiRem => Ok(const_int(a % b)),\n               ast::BiAnd | ast::BiBitAnd => Ok(const_int(a & b)),\n               ast::BiOr | ast::BiBitOr => Ok(const_int(a | b)),\n               ast::BiBitXor => Ok(const_int(a ^ b)),"}]}