{"sha": "6158304f8b64ef7cdf58b14bc675baf33a27a853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTgzMDRmOGI2NGVmN2NkZjU4YjE0YmM2NzViYWYzM2EyN2E4NTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T21:30:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T21:30:58Z"}, "message": "Simplify", "tree": {"sha": "0567887ad19474aee4c9a70f46b1ca2c48ce7ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0567887ad19474aee4c9a70f46b1ca2c48ce7ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6158304f8b64ef7cdf58b14bc675baf33a27a853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6158304f8b64ef7cdf58b14bc675baf33a27a853", "html_url": "https://github.com/rust-lang/rust/commit/6158304f8b64ef7cdf58b14bc675baf33a27a853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6158304f8b64ef7cdf58b14bc675baf33a27a853/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba4f949c23dcf53f34995c90b7c01e6c641b1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba4f949c23dcf53f34995c90b7c01e6c641b1f0", "html_url": "https://github.com/rust-lang/rust/commit/5ba4f949c23dcf53f34995c90b7c01e6c641b1f0"}], "stats": {"total": 70, "additions": 25, "deletions": 45}, "files": [{"sha": "4c759cc25e4afaaf44835203f0f0d3f5bc666964", "filename": "crates/assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -1,9 +1,6 @@\n use std::borrow::Cow;\n \n-use syntax::{\n-    ast::{self, HasQuotes, HasStringValue},\n-    AstToken, TextRange, TextSize,\n-};\n+use syntax::{ast, AstToken, TextRange, TextSize};\n use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};"}, {"sha": "b4b8988461eac8208e4d9813193cfd586d73fe85", "filename": "crates/assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -1,8 +1,4 @@\n-use syntax::{\n-    ast::{self, HasStringValue},\n-    AstToken,\n-    SyntaxKind::STRING,\n-};\n+use syntax::{ast, AstToken, SyntaxKind::STRING};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "aebbfc4dfea1908921e71789b72b03b8e5dcbc75", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -8,7 +8,7 @@ use base_db::FileId;\n use either::Either;\n use mbe::parse_to_token_tree;\n use parser::FragmentKind;\n-use syntax::ast::{self, AstToken, HasStringValue};\n+use syntax::ast::{self, AstToken};\n \n macro_rules! register_builtin {\n     ( LAZY: $(($name:ident, $kind: ident) => $expand:ident),* , EAGER: $(($e_name:ident, $e_kind: ident) => $e_expand:ident),*  ) => {"}, {"sha": "e97d1be1aa8644cc631350236ab120be64778157", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -2,7 +2,6 @@\n \n use std::{collections::BTreeMap, convert::TryFrom};\n \n-use ast::{HasQuotes, HasStringValue};\n use hir::Semantics;\n use ide_db::call_info::ActiveParameter;\n use itertools::Itertools;"}, {"sha": "ce35ac01afd3e8686acb4ce43c5fc6a5734a9a67", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, token_ext::HasStringValue, AstNode, AstToken, NameOwner, SyntaxNode},\n+    ast::{self, support, AstNode, AstToken, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n "}, {"sha": "bf0035986b0d7fa4974ac40f7993ac6c4a359bb2", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6158304f8b64ef7cdf58b14bc675baf33a27a853/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=6158304f8b64ef7cdf58b14bc675baf33a27a853", "patch": "@@ -114,36 +114,6 @@ impl QuoteOffsets {\n     }\n }\n \n-pub trait HasQuotes: AstToken {\n-    fn quote_offsets(&self) -> Option<QuoteOffsets> {\n-        let text = self.text().as_str();\n-        let offsets = QuoteOffsets::new(text)?;\n-        let o = self.syntax().text_range().start();\n-        let offsets = QuoteOffsets {\n-            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n-            contents: offsets.contents + o,\n-        };\n-        Some(offsets)\n-    }\n-    fn open_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.0)\n-    }\n-\n-    fn close_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.1)\n-    }\n-\n-    fn text_range_between_quotes(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.contents)\n-    }\n-}\n-\n-impl HasQuotes for ast::String {}\n-\n-pub trait HasStringValue: HasQuotes {\n-    fn value(&self) -> Option<Cow<'_, str>>;\n-}\n-\n impl ast::String {\n     pub fn is_raw(&self) -> bool {\n         self.text().starts_with('r')\n@@ -153,10 +123,8 @@ impl ast::String {\n         assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n         Some(range + contents_range.start())\n     }\n-}\n \n-impl HasStringValue for ast::String {\n-    fn value(&self) -> Option<Cow<'_, str>> {\n+    pub fn value(&self) -> Option<Cow<'_, str>> {\n         if self.is_raw() {\n             let text = self.text().as_str();\n             let text =\n@@ -181,6 +149,26 @@ impl HasStringValue for ast::String {\n         let res = if buf == text { Cow::Borrowed(text) } else { Cow::Owned(buf) };\n         Some(res)\n     }\n+\n+    pub fn quote_offsets(&self) -> Option<QuoteOffsets> {\n+        let text = self.text().as_str();\n+        let offsets = QuoteOffsets::new(text)?;\n+        let o = self.syntax().text_range().start();\n+        let offsets = QuoteOffsets {\n+            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n+            contents: offsets.contents + o,\n+        };\n+        Some(offsets)\n+    }\n+    pub fn text_range_between_quotes(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.contents)\n+    }\n+    pub fn open_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.0)\n+    }\n+    pub fn close_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.1)\n+    }\n }\n \n impl ast::ByteString {"}]}