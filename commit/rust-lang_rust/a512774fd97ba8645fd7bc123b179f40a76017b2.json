{"sha": "a512774fd97ba8645fd7bc123b179f40a76017b2", "node_id": "C_kwDOAAsO6NoAKGE1MTI3NzRmZDk3YmE4NjQ1ZmQ3YmMxMjNiMTc5ZjQwYTc2MDE3YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T18:58:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T18:58:07Z"}, "message": "Auto merge of #14752 - ponyii:fix/generate_derive_breaks_indentation, r=Veykril\n\nfix: assists no longer break indentation\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/14674\n\nThese are _ad hoc_ patches for a number of assists that can produce incorrectly indented code, namely:\n- generate_derive\n- add_missing_impl_members\n- add_missing_default_members\n\nSome general solution is required in future, as the same problem arises in many other assists, e.g.\n- replace_derive_with...\n- generate_default_from_enum...\n- generate_default_from_new\n- generate_delegate_methods\n(the list is incomplete)", "tree": {"sha": "9fa99f50287e58850637377816596782aaf15d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa99f50287e58850637377816596782aaf15d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a512774fd97ba8645fd7bc123b179f40a76017b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a512774fd97ba8645fd7bc123b179f40a76017b2", "html_url": "https://github.com/rust-lang/rust/commit/a512774fd97ba8645fd7bc123b179f40a76017b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a512774fd97ba8645fd7bc123b179f40a76017b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f840c22369e0bdabb965bd7fa1729cb846fdb18", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f840c22369e0bdabb965bd7fa1729cb846fdb18", "html_url": "https://github.com/rust-lang/rust/commit/2f840c22369e0bdabb965bd7fa1729cb846fdb18"}, {"sha": "49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2", "html_url": "https://github.com/rust-lang/rust/commit/49f1092f14d7b2f096fa32d3e1d45c8844a22ee2"}], "stats": {"total": 227, "additions": 217, "deletions": 10}, "files": [{"sha": "89e03a98d6f866ddbb5b2a4f2ac2eb057cd8ce48", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 168, "deletions": 4, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=a512774fd97ba8645fd7bc123b179f40a76017b2", "patch": "@@ -1346,8 +1346,8 @@ struct SomeStruct {\n }\n impl PartialEq for SomeStruct {\n     $0fn ne(&self, other: &Self) -> bool {\n-            !self.eq(other)\n-        }\n+        !self.eq(other)\n+    }\n }\n \"#,\n         );\n@@ -1511,11 +1511,175 @@ fn main() {\n     struct S;\n     impl Tr for S {\n         fn method() {\n-        ${0:todo!()}\n-    }\n+            ${0:todo!()}\n+        }\n     }\n }\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_add_missing_preserves_indentation() {\n+        // in different modules\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self);\n+    }\n+}\n+struct S;\n+impl m::Foo for S { $0 }\"#,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self);\n+    }\n+}\n+struct S;\n+impl m::Foo for S {\n+    $0const CONST_MULTILINE: (\n+        i32,\n+        i32\n+    );\n+\n+    fn foo(&self) {\n+        todo!()\n+    }\n+}\"#,\n+        );\n+        // in the same module\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+mod m {\n+    trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self);\n+        fn bar(&self);\n+        fn baz(&self);\n+    }\n+\n+    struct S;\n+\n+    impl Foo for S {\n+        fn bar(&self) {}\n+$0\n+    }\n+}\"#,\n+            r#\"\n+mod m {\n+    trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self);\n+        fn bar(&self);\n+        fn baz(&self);\n+    }\n+\n+    struct S;\n+\n+    impl Foo for S {\n+        fn bar(&self) {}\n+\n+        $0type Output;\n+\n+        const CONST_2: i32;\n+\n+        const CONST_MULTILINE: (\n+            i32,\n+            i32\n+        );\n+\n+        fn foo(&self) {\n+            todo!()\n+        }\n+\n+        fn baz(&self) {\n+            todo!()\n+        }\n+\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_default_preserves_indentation() {\n+        check_assist(\n+            add_missing_default_members,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: = (\n+            i32,\n+            i32,\n+        ) = (3, 14);\n+\n+        fn valid(some: u32) -> bool { false }\n+        fn foo(some: u32) -> bool;\n+    }\n+}\n+struct S;\n+impl m::Foo for S { $0 }\"#,\n+            r#\"\n+mod m {\n+    pub trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+        const CONST_MULTILINE: = (\n+            i32,\n+            i32,\n+        ) = (3, 14);\n+\n+        fn valid(some: u32) -> bool { false }\n+        fn foo(some: u32) -> bool;\n+    }\n+}\n+struct S;\n+impl m::Foo for S {\n+    $0const CONST: usize = 42;\n+\n+    const CONST_MULTILINE: = (\n+        i32,\n+        i32,\n+    ) = (3, 14);\n+\n+    fn valid(some: u32) -> bool { false }\n+}\"#,\n+        )\n+    }\n }"}, {"sha": "78ac2eb30e59148955799ab5122a656e09f8842a", "filename": "crates/ide-assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=a512774fd97ba8645fd7bc123b179f40a76017b2", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, AstNode, HasAttrs},\n+    ast::{self, edit::IndentLevel, AstNode, HasAttrs},\n     SyntaxKind::{COMMENT, WHITESPACE},\n     TextSize,\n };\n@@ -42,7 +42,12 @@ pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n                 .next();\n             match derive_attr {\n                 None => {\n-                    builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n+                    let indent_level = IndentLevel::from_node(nominal.syntax());\n+                    builder.insert_snippet(\n+                        cap,\n+                        node_start,\n+                        format!(\"#[derive($0)]\\n{indent_level}\"),\n+                    );\n                 }\n                 Some(tt) => {\n                     // Just move the cursor.\n@@ -84,6 +89,20 @@ mod tests {\n             \"struct Foo { $0 a: i32, }\",\n             \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n         );\n+        check_assist(\n+            generate_derive,\n+            \"\n+mod m {\n+    struct Foo { a: i32,$0 }\n+}\n+            \",\n+            \"\n+mod m {\n+    #[derive($0)]\n+    struct Foo { a: i32, }\n+}\n+            \",\n+        );\n     }\n \n     #[test]\n@@ -111,6 +130,24 @@ struct Foo { a: i32$0, }\n struct Foo { a: i32, }\n             \",\n         );\n+        check_assist(\n+            generate_derive,\n+            \"\n+mod m {\n+    /// `Foo` is a pretty important struct.\n+    /// It does stuff.\n+    struct Foo { a: i32,$0 }\n+}\n+            \",\n+            \"\n+mod m {\n+    /// `Foo` is a pretty important struct.\n+    /// It does stuff.\n+    #[derive($0)]\n+    struct Foo { a: i32, }\n+}\n+            \",\n+        );\n     }\n \n     #[test]"}, {"sha": "8f7ea26306c427d0b4d802dbcf78a2b29dc6236f", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=a512774fd97ba8645fd7bc123b179f40a76017b2", "patch": "@@ -9,8 +9,8 @@ use stdx::format_to;\n use syntax::{\n     ast::{\n         self,\n-        edit::{self, AstNodeEdit},\n-        edit_in_place::{AttrsOwnerEdit, Removable},\n+        edit::{AstNodeEdit, IndentLevel},\n+        edit_in_place::{AttrsOwnerEdit, Indent, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n     ted, AstNode, AstToken, Direction, SourceFile,\n@@ -139,9 +139,11 @@ pub fn add_trait_assoc_items_to_impl(\n \n     let transform = PathTransform::trait_impl(&target_scope, &source_scope, trait_, impl_.clone());\n \n+    let new_indent_level = IndentLevel::from_node(impl_.syntax()) + 1;\n     let items = items.into_iter().map(|assoc_item| {\n         transform.apply(assoc_item.syntax());\n         assoc_item.remove_attrs_and_docs();\n+        assoc_item.reindent_to(new_indent_level);\n         assoc_item\n     });\n \n@@ -153,8 +155,10 @@ pub fn add_trait_assoc_items_to_impl(\n         first_item.get_or_insert_with(|| item.clone());\n         match &item {\n             ast::AssocItem::Fn(fn_) if fn_.body().is_none() => {\n-                let body = make::block_expr(None, Some(make::ext::expr_todo()))\n-                    .indent(edit::IndentLevel(1));\n+                let body = AstNodeEdit::indent(\n+                    &make::block_expr(None, Some(make::ext::expr_todo())),\n+                    new_indent_level,\n+                );\n                 ted::replace(fn_.get_or_create_body().syntax(), body.clone_for_update().syntax())\n             }\n             ast::AssocItem::TypeAlias(type_alias) => {"}, {"sha": "995e8d8d1529009a21968d765652513062243be4", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512774fd97ba8645fd7bc123b179f40a76017b2/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=a512774fd97ba8645fd7bc123b179f40a76017b2", "patch": "@@ -465,6 +465,8 @@ impl ast::Impl {\n }\n \n impl ast::AssocItemList {\n+    /// Attention! This function does align the first line of `item` with respect to `self`,\n+    /// but it does _not_ change indentation of other lines (if any).\n     pub fn add_item(&self, item: ast::AssocItem) {\n         let (indent, position, whitespace) = match self.assoc_items().last() {\n             Some(last_item) => ("}]}