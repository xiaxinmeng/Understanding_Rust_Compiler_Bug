{"sha": "357667104371d446cc029267e8095365c17ba085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzY2NzEwNDM3MWQ0NDZjYzAyOTI2N2U4MDk1MzY1YzE3YmEwODU=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T18:30:57Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T18:30:57Z"}, "message": "Rewrite snapshot checks", "tree": {"sha": "078b56f8e1fba04aad022880833a5d2c5ee858b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078b56f8e1fba04aad022880833a5d2c5ee858b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357667104371d446cc029267e8095365c17ba085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357667104371d446cc029267e8095365c17ba085", "html_url": "https://github.com/rust-lang/rust/commit/357667104371d446cc029267e8095365c17ba085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357667104371d446cc029267e8095365c17ba085/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a719ad255c62933f58c2b2a5e767fb3b3c5a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a719ad255c62933f58c2b2a5e767fb3b3c5a26", "html_url": "https://github.com/rust-lang/rust/commit/42a719ad255c62933f58c2b2a5e767fb3b3c5a26"}], "stats": {"total": 345, "additions": 100, "deletions": 245}, "files": [{"sha": "432793de29ad7ed19064a821bd39e6ec19f26fbf", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 29, "deletions": 154, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=357667104371d446cc029267e8095365c17ba085", "patch": "@@ -61,7 +61,6 @@ fn add_keyword(\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     add_keyword(ctx, acc, \"fn\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"type\", \"type \", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"use\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"impl\", \"impl $0 {}\", ctx.is_new_item);\n     add_keyword(ctx, acc, \"trait\", \"impl $0 {}\", ctx.is_new_item);\n@@ -111,145 +110,49 @@ fn complete_return(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{\n-        completion::{\n-            test_utils::{do_completion, do_completion_with_position},\n-            CompletionItem, CompletionKind,\n-        },\n-        CompletionItemKind,\n+    use crate::completion::{\n+        test_utils::{do_completion, get_completions},\n+        CompletionItem, CompletionKind,\n     };\n     use insta::assert_debug_snapshot;\n \n     fn do_keyword_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Keyword)\n     }\n \n-    fn get_completion_text_and_assert_positions(code: &str) -> Vec<(String, String)> {\n-        let (position, completion_items) =\n-            do_completion_with_position(code, CompletionKind::Keyword);\n-        let mut returned_keywords = Vec::<(String, String)>::new();\n-\n-        for item in completion_items {\n-            assert!(item.text_edit().len() == 1);\n-            assert!(item.kind() == Some(CompletionItemKind::Keyword));\n-            let atom = item.text_edit().iter().next().unwrap().clone();\n-            assert!(atom.delete.start() == position.offset);\n-            assert!(atom.delete.end() == position.offset);\n-            let pair = (item.label().to_string(), atom.insert);\n-            returned_keywords.push(pair);\n-        }\n-        returned_keywords.sort();\n-        returned_keywords\n-    }\n-\n-    #[test]\n-    fn completes_keywords_in_use_stmt_new_approach() {\n-        assert_debug_snapshot!(\n-            get_completion_text_and_assert_positions(r\"\n-            use <|>\n-            \"),\n-            @r###\"\n-        [\n-            (\n-                \"crate\",\n-                \"crate::\",\n-            ),\n-            (\n-                \"self\",\n-                \"self\",\n-            ),\n-            (\n-                \"super\",\n-                \"super::\",\n-            ),\n-        ]\n-        \"###\n-        );\n+    fn get_keyword_completions(code: &str) -> Vec<String> {\n+        get_completions(code, CompletionKind::Keyword)\n     }\n \n     #[test]\n     fn completes_keywords_in_use_stmt() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                use <|>\n-                \",\n-            ),\n+            get_keyword_completions(r\"use <|>\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"crate\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"crate::\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"self\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"self\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"super\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"super::\",\n-                kind: Keyword,\n-            },\n+            \"kw crate\",\n+            \"kw self\",\n+            \"kw super\",\n         ]\n         \"###\n         );\n \n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                use a::<|>\n-                \",\n-            ),\n+            get_keyword_completions(r\"use a::<|>\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"self\",\n-                source_range: 24..24,\n-                delete: 24..24,\n-                insert: \"self\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"super\",\n-                source_range: 24..24,\n-                delete: 24..24,\n-                insert: \"super::\",\n-                kind: Keyword,\n-            },\n+            \"kw self\",\n+            \"kw super\",\n         ]\n         \"###\n         );\n \n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                use a::{b, <|>}\n-                \",\n-            ),\n+            get_keyword_completions(r\"use a::{b, <|>}\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"self\",\n-                source_range: 28..28,\n-                delete: 28..28,\n-                insert: \"self\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"super\",\n-                source_range: 28..28,\n-                delete: 28..28,\n-                insert: \"super::\",\n-                kind: Keyword,\n-            },\n+            \"kw self\",\n+            \"kw super\",\n         ]\n         \"###\n         );\n@@ -258,50 +161,22 @@ mod tests {\n     #[test]\n     fn completes_various_keywords_in_function() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() {\n-                    <|>\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"fn quux() { <|> }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"return;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw const\",\n+            \"kw extern\",\n+            \"kw fn\",\n+            \"kw let\",\n+            \"kw loop\",\n+            \"kw match\",\n+            \"kw mod\",\n+            \"kw return\",\n+            \"kw static\",\n+            \"kw type\",\n+            \"kw unsafe\",\n+            \"kw use\",\n+            \"kw while\",\n         ]\n         \"###\n         );"}, {"sha": "d1a4dd881236ca01cb1aae684cc1f512e93514db", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=357667104371d446cc029267e8095365c17ba085", "patch": "@@ -125,6 +125,32 @@ pub enum CompletionItemKind {\n     Attribute,\n }\n \n+impl CompletionItemKind {\n+    pub fn tag(&self) -> String {\n+        let tag = match self {\n+            CompletionItemKind::Snippet => \"sn\",\n+            CompletionItemKind::Keyword => \"kw\",\n+            CompletionItemKind::Module => \"md\",\n+            CompletionItemKind::Function => \"fn\",\n+            CompletionItemKind::BuiltinType => \"bt\",\n+            CompletionItemKind::Struct => \"st\",\n+            CompletionItemKind::Enum => \"en\",\n+            CompletionItemKind::EnumVariant => \"ev\",\n+            CompletionItemKind::Binding => \"bn\",\n+            CompletionItemKind::Field => \"fd\",\n+            CompletionItemKind::Static => \"sc\",\n+            CompletionItemKind::Const => \"ct\",\n+            CompletionItemKind::Trait => \"tt\",\n+            CompletionItemKind::TypeAlias => \"ta\",\n+            CompletionItemKind::Method => \"me\",\n+            CompletionItemKind::TypeParam => \"tp\",\n+            CompletionItemKind::Macro => \"ma\",\n+            CompletionItemKind::Attribute => \"at\",\n+        };\n+        tag.to_owned()\n+    }\n+}\n+\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub(crate) enum CompletionKind {\n     /// Parser-based keyword completion."}, {"sha": "bc39689ab0667209105ea95c19d20278d80b5d0d", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 10, "deletions": 74, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=357667104371d446cc029267e8095365c17ba085", "patch": "@@ -121,115 +121,51 @@ mod tests {\n \n     #[test]\n     fn test_unsafe_is_prev() {\n-        check_pattern_is_applicable(\n-            r\"\n-        unsafe i<|>\n-        \",\n-            unsafe_is_prev,\n-        );\n+        check_pattern_is_applicable(r\"unsafe i<|>\", unsafe_is_prev);\n     }\n \n     #[test]\n     fn test_if_is_prev() {\n-        check_pattern_is_applicable(\n-            r\"\n-        if l<|>\n-        \",\n-            if_is_prev,\n-        );\n+        check_pattern_is_applicable(r\"if l<|>\", if_is_prev);\n     }\n \n     #[test]\n     fn test_inside_trait() {\n-        check_pattern_is_applicable(\n-            r\"\n-        trait A {\n-            fn<|>\n-        }\n-        \",\n-            inside_trait,\n-        );\n+        check_pattern_is_applicable(r\"trait A { fn<|> }\", inside_trait);\n     }\n \n     #[test]\n     fn test_has_trait_as_prev_sibling() {\n-        check_pattern_is_applicable(\n-            r\"\n-        trait A w<|> {\n-        }\n-        \",\n-            has_trait_as_prev_sibling,\n-        );\n+        check_pattern_is_applicable(r\"trait A w<|> {}\", has_trait_as_prev_sibling);\n     }\n \n     #[test]\n     fn test_has_impl_as_prev_sibling() {\n-        check_pattern_is_applicable(\n-            r\"\n-        impl A w<|> {\n-        }\n-        \",\n-            has_impl_as_prev_sibling,\n-        );\n+        check_pattern_is_applicable(r\"impl A w<|> {}\", has_impl_as_prev_sibling);\n     }\n \n     #[test]\n     fn test_parent_block_expr() {\n-        check_pattern_is_applicable(\n-            r\"\n-        fn my_fn() {\n-            let a = 2;\n-            f<|>\n-        }\n-        \",\n-            has_block_expr_parent,\n-        );\n+        check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f<|> }\", has_block_expr_parent);\n     }\n \n     #[test]\n     fn test_has_ref_pat_parent_in_func_parameters() {\n-        check_pattern_is_applicable(\n-            r\"\n-        fn my_fn(&<|>) {\n-            let a = 2;\n-        }\n-        \",\n-            has_ref_pat_parent,\n-        );\n+        check_pattern_is_applicable(r\"fn my_fn(&<|>) {}\", has_ref_pat_parent);\n     }\n \n     #[test]\n     fn test_has_ref_pat_parent_in_let_statement() {\n-        check_pattern_is_applicable(\n-            r\"\n-        fn my_fn() {\n-            let &<|>\n-        }\n-        \",\n-            has_ref_pat_parent,\n-        );\n+        check_pattern_is_applicable(r\"fn my_fn() { let &<|> }\", has_ref_pat_parent);\n     }\n \n     #[test]\n     fn test_has_bind_pat_parent_in_func_parameters() {\n-        check_pattern_is_applicable(\n-            r\"\n-        fn my_fn(m<|>) {\n-        }\n-        \",\n-            has_bind_pat_parent,\n-        );\n+        check_pattern_is_applicable(r\"fn my_fn(m<|>) {}\", has_bind_pat_parent);\n     }\n \n     #[test]\n     fn test_has_bind_pat_parent_in_let_statement() {\n-        check_pattern_is_applicable(\n-            r\"\n-        fn my_fn() {\n-            let m<|>\n-        }\n-        \",\n-            has_bind_pat_parent,\n-        );\n+        check_pattern_is_applicable(r\"fn my_fn() { let m<|> }\", has_bind_pat_parent);\n     }\n }"}, {"sha": "c660de7b157a1b673cbb313f7842474ef9f6ac2d", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357667104371d446cc029267e8095365c17ba085/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=357667104371d446cc029267e8095365c17ba085", "patch": "@@ -3,7 +3,7 @@\n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n     mock_analysis::{analysis_and_position, single_file_with_position},\n-    CompletionItem, FilePosition,\n+    CompletionItem,\n };\n use hir::Semantics;\n use ra_syntax::{AstNode, NodeOrToken, SyntaxElement};\n@@ -12,37 +12,55 @@ pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionI\n     do_completion_with_options(code, kind, &CompletionConfig::default())\n }\n \n-pub(crate) fn do_completion_with_position(\n-    code: &str,\n-    kind: CompletionKind,\n-) -> (FilePosition, Vec<CompletionItem>) {\n-    do_completion_with_options_and_position(code, kind, &CompletionConfig::default())\n+pub(crate) fn get_completions(code: &str, kind: CompletionKind) -> Vec<String> {\n+    get_completions_with_options(code, kind, &CompletionConfig::default())\n }\n \n pub(crate) fn do_completion_with_options(\n     code: &str,\n     kind: CompletionKind,\n     options: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n-    do_completion_with_options_and_position(code, kind, options).1\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, options)\n+        .into_iter()\n+        .filter(|c| c.completion_kind == kind)\n+        .collect();\n+    kind_completions.sort_by_key(|c| c.label().to_owned());\n+    kind_completions\n }\n \n-pub(crate) fn do_completion_with_options_and_position(\n-    code: &str,\n-    kind: CompletionKind,\n-    options: &CompletionConfig,\n-) -> (FilePosition, Vec<CompletionItem>) {\n+fn get_all_completion_items(code: &str, options: &CompletionConfig) -> Vec<CompletionItem> {\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = analysis.completions(options, position).unwrap().unwrap();\n-    let completion_items: Vec<CompletionItem> = completions.into();\n-    let mut kind_completions: Vec<CompletionItem> =\n-        completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();\n+    analysis.completions(options, position).unwrap().unwrap().into()\n+}\n+\n+pub(crate) fn get_all_completions(code: &str, options: &CompletionConfig) -> Vec<String> {\n+    let mut kind_completions = get_all_completion_items(code, options);\n+    kind_completions.sort_by_key(|c| c.label().to_owned());\n+    kind_completions\n+        .into_iter()\n+        .map(|it| format!(\"{} {}\", it.kind().unwrap().tag(), it.label()))\n+        .collect()\n+}\n+\n+pub(crate) fn get_completions_with_options(\n+    code: &str,\n+    kind: CompletionKind,\n+    options: &CompletionConfig,\n+) -> Vec<String> {\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, options)\n+        .into_iter()\n+        .filter(|c| c.completion_kind == kind)\n+        .collect();\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n-    (position, kind_completions)\n+    kind_completions\n+        .into_iter()\n+        .map(|it| format!(\"{} {}\", it.kind().unwrap().tag(), it.label()))\n+        .collect()\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {"}]}