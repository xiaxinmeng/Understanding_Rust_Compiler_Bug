{"sha": "47756bb0faaf49be5c4086fd0fdbdd57f055781b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NzU2YmIwZmFhZjQ5YmU1YzQwODZmZDBmZGJkZDU3ZjA1NTc4MWI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T12:45:05Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T10:23:32Z"}, "message": "shim: adjust valid shim asserts\n\nThis commit makes valid shim asserts more specific - checking for the\nspecific types that are valid for a given type of shim - and removes\nasserts for types which require substitutions.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "3c6574823a024679a436a9ef0530f7ec1999a36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6574823a024679a436a9ef0530f7ec1999a36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47756bb0faaf49be5c4086fd0fdbdd57f055781b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8VcKQACgkQJZLnbIc4\nH9l9hA/9FCuj8BHNyf7J7r7yVRqrwmAsmnOS5YWXnns+4J2webQWmk4OEBe/Mxm8\n9cAkNFhNontNhTrcsOaFkIfKMC3TnwqwRh7nW+THk1j7gG3p/cNA6qcYkPmfdHFD\nMcg02SmItkqNb/ySTvhKzZsV4zM76Qwm2QZvJTMbEp5H7XxCob55fWzRIuEs+mCc\n8qxhMH8uybNOy3P7m4PbXKI55nLUktxLLehqmi2wtb476eqpCHbktuXiB6uO3w8P\no5y1D+Vp8gRR+y/Uc9WWC/AcL36uNLoFHvageaQwDMvbu/v9gkRQHqtfLSY59Kst\n1wCSpBXvBhutDyd3WfXiYyFi45HwF+5VT1DNaVPLHQyI3AJTy4l3CNdLH8veHRbX\nwg+mJ6UmTkApRJmsj9LIbGFTouiFStyseHCnDBjY68PpgXVczUrcF2pqFU1Z2iJL\npMrFDCOWohuxCq5qnonxiV1u2o77+sCuk88fn8gUR1w1Lu64OGsXQ5usrXM/gX8I\n24gSLCxeHmd1ehax6ViqOefarvFDc0eA4CVFEFZc+FP75I5GX+rMO2cgsVMGDRz0\noT7IKLMuvKVJM24Yp/MBahFTTF+JoY2y+eUOhyHznD+YJ4WqJurohKX4Tfn6wDP3\n7wHApDwIbURM3bBgBLM2cLxl7aFUFFf93wu2ouzvnr3p2hrfAmY=\n=8Uew\n-----END PGP SIGNATURE-----", "payload": "tree 3c6574823a024679a436a9ef0530f7ec1999a36f\nparent 19e849516e19fcb0a16be7d3e329c1bbb1746fa3\nauthor David Wood <david@davidtw.co> 1592829905 +0100\ncommitter David Wood <david@davidtw.co> 1595240612 +0100\n\nshim: adjust valid shim asserts\n\nThis commit makes valid shim asserts more specific - checking for the\nspecific types that are valid for a given type of shim - and removes\nasserts for types which require substitutions.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47756bb0faaf49be5c4086fd0fdbdd57f055781b", "html_url": "https://github.com/rust-lang/rust/commit/47756bb0faaf49be5c4086fd0fdbdd57f055781b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47756bb0faaf49be5c4086fd0fdbdd57f055781b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e849516e19fcb0a16be7d3e329c1bbb1746fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e849516e19fcb0a16be7d3e329c1bbb1746fa3", "html_url": "https://github.com/rust-lang/rust/commit/19e849516e19fcb0a16be7d3e329c1bbb1746fa3"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "bfa9bb9e0f0e1a6657ac8dce2b864fa3342838dc", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/47756bb0faaf49be5c4086fd0fdbdd57f055781b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47756bb0faaf49be5c4086fd0fdbdd57f055781b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=47756bb0faaf49be5c4086fd0fdbdd57f055781b", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::lang_items::FnMutTraitLangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::{Idx, IndexVec};\n@@ -36,11 +36,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             build_call_shim(tcx, instance, Some(Adjustment::Deref), CallKind::Direct(def_id), None)\n         }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n-            // FIXME(eddyb) support generating shims for a \"shallow type\",\n-            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n-            // `Foo<Bar>` or `[String]` etc.\n-            assert!(!ty.needs_subst());\n-\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.fn_trait_kind_from_lang_item(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n@@ -83,22 +78,8 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n                 None,\n             )\n         }\n-        ty::InstanceDef::DropGlue(def_id, ty) => {\n-            // FIXME(eddyb) support generating shims for a \"shallow type\",\n-            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n-            // `Foo<Bar>` or `[String]` etc.\n-            assert!(!ty.needs_subst());\n-\n-            build_drop_shim(tcx, def_id, ty)\n-        }\n-        ty::InstanceDef::CloneShim(def_id, ty) => {\n-            // FIXME(eddyb) support generating shims for a \"shallow type\",\n-            // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n-            // `Foo<Bar>` or `[String]` etc.\n-            assert!(!ty.needs_subst());\n-\n-            build_clone_shim(tcx, def_id, ty)\n-        }\n+        ty::InstanceDef::DropGlue(def_id, ty) => build_drop_shim(tcx, def_id, ty),\n+        ty::InstanceDef::CloneShim(def_id, ty) => build_clone_shim(tcx, def_id, ty),\n         ty::InstanceDef::Virtual(..) => {\n             bug!(\"InstanceDef::Virtual ({:?}) is for direct calls only\", instance)\n         }"}, {"sha": "324ae4ec29e9b9cd7eb75a243e0069b15495bb16", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/47756bb0faaf49be5c4086fd0fdbdd57f055781b/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47756bb0faaf49be5c4086fd0fdbdd57f055781b/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=47756bb0faaf49be5c4086fd0fdbdd57f055781b", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n-use rustc_span::sym;\n+use rustc_span::{sym, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n@@ -67,12 +67,19 @@ fn inner_resolve_instance<'tcx>(\n                 let ty = substs.type_at(0);\n \n                 if ty.needs_drop(tcx, param_env) {\n-                    // `DropGlue` requires a monomorphic aka concrete type.\n-                    if ty.needs_subst() {\n-                        return Ok(None);\n+                    debug!(\" => nontrivial drop glue\");\n+                    match ty.kind {\n+                        ty::Closure(..)\n+                        | ty::Generator(..)\n+                        | ty::Tuple(..)\n+                        | ty::Adt(..)\n+                        | ty::Dynamic(..)\n+                        | ty::Array(..)\n+                        | ty::Slice(..) => {}\n+                        // Drop shims can only be built from ADTs.\n+                        _ => return Ok(None),\n                     }\n \n-                    debug!(\" => nontrivial drop glue\");\n                     ty::InstanceDef::DropGlue(def_id, Some(ty))\n                 } else {\n                     debug!(\" => trivial drop glue\");\n@@ -224,17 +231,13 @@ fn resolve_associated_item<'tcx>(\n                 trait_closure_kind,\n             ))\n         }\n-        traits::ImplSourceFnPointer(ref data) => {\n-            // `FnPtrShim` requires a monomorphic aka concrete type.\n-            if data.fn_ty.needs_subst() {\n-                return Ok(None);\n-            }\n-\n-            Some(Instance {\n+        traits::ImplSourceFnPointer(ref data) => match data.fn_ty.kind {\n+            ty::FnDef(..) | ty::FnPtr(..) => Some(Instance {\n                 def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n                 substs: rcvr_substs,\n-            })\n-        }\n+            }),\n+            _ => None,\n+        },\n         traits::ImplSourceObject(ref data) => {\n             let index = traits::get_vtable_index_of_object_method(tcx, data, def_id);\n             Some(Instance { def: ty::InstanceDef::Virtual(def_id, index), substs: rcvr_substs })\n@@ -246,10 +249,12 @@ fn resolve_associated_item<'tcx>(\n                 if name == sym::clone {\n                     let self_ty = trait_ref.self_ty();\n \n-                    // `CloneShim` requires a monomorphic aka concrete type.\n-                    if self_ty.needs_subst() {\n-                        return Ok(None);\n-                    }\n+                    let is_copy = self_ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env);\n+                    match self_ty.kind {\n+                        _ if is_copy => (),\n+                        ty::Array(..) | ty::Closure(..) | ty::Tuple(..) => {}\n+                        _ => return Ok(None),\n+                    };\n \n                     Some(Instance {\n                         def: ty::InstanceDef::CloneShim(def_id, self_ty),"}]}