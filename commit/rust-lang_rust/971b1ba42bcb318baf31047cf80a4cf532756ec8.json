{"sha": "971b1ba42bcb318baf31047cf80a4cf532756ec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MWIxYmE0MmJjYjMxOGJhZjMxMDQ3Y2Y4MGE0Y2Y1MzI3NTZlYzg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-30T10:18:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-03T10:36:56Z"}, "message": "Record build and test result of extended tools into toolstates.json.", "tree": {"sha": "067132d0ba595ab165b52c608f6567469c625792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/067132d0ba595ab165b52c608f6567469c625792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971b1ba42bcb318baf31047cf80a4cf532756ec8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAloj08gACgkQ/vbIBR0O\nATzXrxAAn/DR0jkOKRarVxZkh0GhLuv6SOseL3SDuTd0XmPjEVzyB79S36mt2rjm\nhSi1gA9mTcbnSY0CpzxuEu2x9b7XszTmqF0aN+Xs534WUyVAZyLVZBd+KTtLqz3U\nCJJ+i8tckZ45hn4h0A5J2/0oTkP1HwkPPYDKrZ01vEwl83odIe8SOabqdOXogGfh\njYvp1ermKzhH2vdT8ULPe4MlkodvF5Zx2hiuiZaw+KnjtXKAG0PzLWQcPgcrV7n2\ngXiRG8RpVCp6gK0OIm2HsBaB24pRrQo++thRbk0iOTHVcNEblJLJnkmmcj2pGjtA\n7fxh8oOz051n61eW52KNtyRLNWCR22m0aomfTKubicAST058pM9Mqx2jMLry18/g\nH09Rdp+QcspouqX7EIYXiN8yrtuGh5ak/D/o3WN6G1zWI/aJoAys5AdQizTV4O7A\nNvSuUX1c2Mio+mgm1xM1DCnzNRjhrLQWRcLIgXy7j+jcJOX4tshSVfGfBG436ayR\n/RgzVOGqzsLYrd5mdqFclotakhe7POaUMdi7IwMzovboT471q3CH4qpE8o4f3CGS\nhTD76pl+d+mWb5+EpNs/AM9uQz/+5KQEgxGS3LGlyyJFUYktHHU7NHxBdoVWO6a9\n46XWWe3WmyJfcYRCxClPvtYRLhgMFxgmB2VhzCRETuT5Vh5f+Y4=\n=IpOq\n-----END PGP SIGNATURE-----", "payload": "tree 067132d0ba595ab165b52c608f6567469c625792\nparent 128199e39c2644e3e0c0580869a561f9211e6d98\nauthor kennytm <kennytm@gmail.com> 1512037127 +0800\ncommitter kennytm <kennytm@gmail.com> 1512297416 +0800\n\nRecord build and test result of extended tools into toolstates.json.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971b1ba42bcb318baf31047cf80a4cf532756ec8", "html_url": "https://github.com/rust-lang/rust/commit/971b1ba42bcb318baf31047cf80a4cf532756ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971b1ba42bcb318baf31047cf80a4cf532756ec8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128199e39c2644e3e0c0580869a561f9211e6d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/128199e39c2644e3e0c0580869a561f9211e6d98", "html_url": "https://github.com/rust-lang/rust/commit/128199e39c2644e3e0c0580869a561f9211e6d98"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "18c1f160c03d28eb1cc1cbea804e89551fef51cd", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -301,6 +301,10 @@\n # As a side-effect also generates MIR for all libraries.\n #test-miri = false\n \n+# After building or testing extended tools (e.g. clippy and rustfmt), append the\n+# result (broken, compiling, testing) into this JSON file.\n+#save-toolstates = \"/path/to/toolstates.json\"\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "8f3133bc9d81bd5222fa6be1df1d0697fcd01015", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -65,19 +65,21 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) {\n+fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) -> bool {\n     if !build.fail_fast {\n         if !build.try_run(cmd, expect) {\n             let mut failures = build.delayed_failures.borrow_mut();\n             failures.push(format!(\"{:?}\", cmd));\n+            return false;\n         }\n     } else {\n         build.run_expecting(cmd, expect);\n     }\n+    true\n }\n \n fn try_run(build: &Build, cmd: &mut Command) {\n-    try_run_expecting(build, cmd, BuildExpectation::None)\n+    try_run_expecting(build, cmd, BuildExpectation::None);\n }\n \n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n@@ -257,11 +259,13 @@ impl Step for Rls {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        try_run_expecting(\n+        if try_run_expecting(\n             build,\n             &mut cargo,\n             builder.build.config.toolstate.rls.passes(ToolState::Testing),\n-        );\n+        ) {\n+            build.save_toolstate(\"rls\", ToolState::Testing);\n+        }\n     }\n }\n \n@@ -305,11 +309,13 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        try_run_expecting(\n+        if try_run_expecting(\n             build,\n             &mut cargo,\n             builder.build.config.toolstate.rustfmt.passes(ToolState::Testing),\n-        );\n+        ) {\n+            build.save_toolstate(\"rustfmt\", ToolState::Testing);\n+        }\n     }\n }\n \n@@ -354,11 +360,13 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run_expecting(\n+            if try_run_expecting(\n                 build,\n                 &mut cargo,\n                 builder.build.config.toolstate.miri.passes(ToolState::Testing),\n-            );\n+            ) {\n+                build.save_toolstate(\"miri\", ToolState::Testing);\n+            }\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n         }\n@@ -411,11 +419,13 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run_expecting(\n+            if try_run_expecting(\n                 build,\n                 &mut cargo,\n                 builder.build.config.toolstate.clippy.passes(ToolState::Testing),\n-            );\n+            ) {\n+                build.save_toolstate(\"clippy-driver\", ToolState::Testing);\n+            }\n         } else {\n             eprintln!(\"failed to test clippy: could not build\");\n         }"}, {"sha": "9dd37d8e4560cd8681576d5a62c84e280f697a70", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -112,6 +112,8 @@ pub struct Config {\n     pub channel: String,\n     pub quiet_tests: bool,\n     pub test_miri: bool,\n+    pub save_toolstates: Option<PathBuf>,\n+\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n@@ -279,6 +281,7 @@ struct Rust {\n     dist_src: Option<bool>,\n     quiet_tests: Option<bool>,\n     test_miri: Option<bool>,\n+    save_toolstates: Option<String>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -473,6 +476,7 @@ impl Config {\n             set(&mut config.test_miri, rust.test_miri);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n+            config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n \n             match rust.codegen_units {\n                 Some(0) => config.rust_codegen_units = Some(num_cpus::get() as u32),"}, {"sha": "48ca2838e4febd9001244ef7231174420043bb9b", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -77,6 +77,7 @@ def v(*args):\n o(\"debuginfo-lines\", \"rust.debuginfo-lines\", \"build with line number debugger metadata\")\n o(\"debuginfo-only-std\", \"rust.debuginfo-only-std\", \"build only libstd with debugging information\")\n o(\"debug-jemalloc\", \"rust.debug-jemalloc\", \"build jemalloc with --enable-debug --enable-fill\")\n+v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n \n v(\"prefix\", \"install.prefix\", \"set installation prefix\")\n v(\"localstatedir\", \"install.localstatedir\", \"local state directory\")"}, {"sha": "2f00c313a0c30268067b50fff2fc66cc572bb3a9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -190,6 +190,7 @@ mod job {\n pub use config::Config;\n use flags::Subcommand;\n use cache::{Interned, INTERNER};\n+use toolstate::ToolState;\n \n /// A structure representing a Rust compiler.\n ///\n@@ -874,6 +875,30 @@ impl Build {\n         }\n     }\n \n+    /// Updates the actual toolstate of a tool.\n+    ///\n+    /// The toolstates are saved to the file specified by the key\n+    /// `rust.save-toolstates` in `config.toml`. If unspecified, nothing will be\n+    /// done. The file is updated immediately after this function completes.\n+    pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n+        use std::io::{Seek, SeekFrom};\n+\n+        if let Some(ref path) = self.config.save_toolstates {\n+            let mut file = t!(fs::OpenOptions::new()\n+                .create(true)\n+                .read(true)\n+                .write(true)\n+                .open(path));\n+\n+            let mut current_toolstates: HashMap<Box<str>, ToolState> =\n+                serde_json::from_reader(&mut file).unwrap_or_default();\n+            current_toolstates.insert(tool.into(), state);\n+            t!(file.seek(SeekFrom::Start(0)));\n+            t!(file.set_len(0));\n+            t!(serde_json::to_writer(file, &current_toolstates));\n+        }\n+    }\n+\n     /// Get a list of crates from a root crate.\n     ///\n     /// Returns Vec<(crate, path to crate, is_root_crate)>"}, {"sha": "fa9bdc43c378cb69c3346a3c4df278c421f8b5c8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -115,7 +115,19 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        if !build.try_run(&mut cargo, expectation) {\n+        let is_expected = build.try_run(&mut cargo, expectation);\n+        // If the expectation is \"Failing\", `try_run` returning true actually\n+        // means a build-failure is successfully observed, i.e. the tool is\n+        // broken. Thus the XOR here.\n+        // Sorry for the complicated logic, but we can remove this expectation\n+        // logic after #45861 is fully fixed.\n+        build.save_toolstate(tool, if is_expected ^ (expectation == BuildExpectation::Failing) {\n+            ToolState::Compiling\n+        } else {\n+            ToolState::Broken\n+        });\n+\n+        if !is_expected {\n             if expectation == BuildExpectation::None {\n                 exit(1);\n             } else {"}, {"sha": "00dbcc86af4d18c3b1ee3bfedcf2a2cecf929aa2", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b1ba42bcb318baf31047cf80a4cf532756ec8/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=971b1ba42bcb318baf31047cf80a4cf532756ec8", "patch": "@@ -10,7 +10,7 @@\n \n use build_helper::BuildExpectation;\n \n-#[derive(Copy, Clone, Debug, Deserialize, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n     /// The tool compiles successfully, but the test suite fails"}]}