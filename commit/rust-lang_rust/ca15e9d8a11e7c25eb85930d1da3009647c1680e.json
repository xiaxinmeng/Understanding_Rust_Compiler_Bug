{"sha": "ca15e9d8a11e7c25eb85930d1da3009647c1680e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTVlOWQ4YTExZTdjMjVlYjg1OTMwZDFkYTMwMDk2NDdjMTY4MGU=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-09-19T23:07:34Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-09-19T23:12:02Z"}, "message": "Fix time complexity in BinaryHeap::peek_mut docs", "tree": {"sha": "ac4f64480082bdecbea3f8e592a30d77bd2dd7d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4f64480082bdecbea3f8e592a30d77bd2dd7d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca15e9d8a11e7c25eb85930d1da3009647c1680e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca15e9d8a11e7c25eb85930d1da3009647c1680e", "html_url": "https://github.com/rust-lang/rust/commit/ca15e9d8a11e7c25eb85930d1da3009647c1680e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca15e9d8a11e7c25eb85930d1da3009647c1680e/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1e3633f734930a50000cc424fbcdc6629885c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1e3633f734930a50000cc424fbcdc6629885c3", "html_url": "https://github.com/rust-lang/rust/commit/af1e3633f734930a50000cc424fbcdc6629885c3"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "06e5ac037ca796ce3883beaed8c873b3146c8344", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca15e9d8a11e7c25eb85930d1da3009647c1680e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca15e9d8a11e7c25eb85930d1da3009647c1680e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=ca15e9d8a11e7c25eb85930d1da3009647c1680e", "patch": "@@ -399,7 +399,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Time complexity\n     ///\n-    /// Cost is *O*(1) in the worst case.\n+    /// If the item is modified then the worst case time complexity is *O*(log(*n*)),\n+    /// otherwise it's *O*(1).\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n         if self.is_empty() { None } else { Some(PeekMut { heap: self, sift: false }) }"}]}