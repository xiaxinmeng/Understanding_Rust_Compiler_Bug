{"sha": "d36bdf2d307328d471289e782e1878e21d9a3e91", "node_id": "C_kwDOAAsO6NoAKGQzNmJkZjJkMzA3MzI4ZDQ3MTI4OWU3ODJlMTg3OGUyMWQ5YTNlOTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-01-31T22:38:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-31T22:38:52Z"}, "message": "Rollup merge of #107486 - compiler-errors:bound-ty-keep-name, r=oli-obk\n\nTrack bound types like bound regions\n\nWhen we instantiate bound types into placeholder types, we throw away the names for some reason. These names are particularly useful for error reporting once we have `for<T>` binders.\n\nr? types", "tree": {"sha": "2f503ba044e6f9cf20aa4c9db05b5d8a223e7968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f503ba044e6f9cf20aa4c9db05b5d8a223e7968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36bdf2d307328d471289e782e1878e21d9a3e91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2Zh8CRBK7hj4Ov3rIwAAOMkIAFd4mDpVjLGJMYQE8jRSgEyq\nMba5W3saFrB8kXTzd/EV6ndIepuSZXPHEzCbXu43Zf0ndHa8O87/eulbkpxEy7qM\nfxnRG98d1EraGRFd+5Mv4u7gfYilzsGM8J6QCw5s1lXmVOu7VnDQZZ7eKAiCRjSF\ncW7f9HgQIsA3LD1ImqgEpBgYNzDdsrhO4qio0jfsYFlgQ+oj1ZHtwZUG6VjcrF1X\nAeoy+bxJHiekMeUWjAIwnEeT51wRDQLh3iiSXamzbEQi9yeBlX7UW8L2Hct6iH3g\npWNAjjLrkgtQhjTr9O0HdRufsNs268WdL/BtYeblkaBV3CN5Hsf146megncPOVI=\n=jNfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f503ba044e6f9cf20aa4c9db05b5d8a223e7968\nparent 53bb6322dbc80d8a7da69e1ea4dbff98c4a70abb\nparent 0e98a162c86cbc4a1bad86d63a0eb72739bb99f3\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1675204732 +0100\ncommitter GitHub <noreply@github.com> 1675204732 +0100\n\nRollup merge of #107486 - compiler-errors:bound-ty-keep-name, r=oli-obk\n\nTrack bound types like bound regions\n\nWhen we instantiate bound types into placeholder types, we throw away the names for some reason. These names are particularly useful for error reporting once we have `for<T>` binders.\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36bdf2d307328d471289e782e1878e21d9a3e91", "html_url": "https://github.com/rust-lang/rust/commit/d36bdf2d307328d471289e782e1878e21d9a3e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36bdf2d307328d471289e782e1878e21d9a3e91/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53bb6322dbc80d8a7da69e1ea4dbff98c4a70abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/53bb6322dbc80d8a7da69e1ea4dbff98c4a70abb", "html_url": "https://github.com/rust-lang/rust/commit/53bb6322dbc80d8a7da69e1ea4dbff98c4a70abb"}, {"sha": "0e98a162c86cbc4a1bad86d63a0eb72739bb99f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e98a162c86cbc4a1bad86d63a0eb72739bb99f3", "html_url": "https://github.com/rust-lang/rust/commit/0e98a162c86cbc4a1bad86d63a0eb72739bb99f3"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "21e700418105047a8a52540a41a85c7b26e140b1", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -1930,7 +1930,7 @@ pub(super) fn check_type_bounds<'tcx>(\n         smallvec::SmallVec::with_capacity(defs.count());\n     InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param.kind {\n         GenericParamDefKind::Type { .. } => {\n-            let kind = ty::BoundTyKind::Param(param.name);\n+            let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n             let bound_var = ty::BoundVariableKind::Ty(kind);\n             bound_vars.push(bound_var);\n             tcx.mk_ty(ty::Bound("}, {"sha": "31be107b35472a44dd373d95a7cc17df856b9a94", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n-                    name: bound_ty.var,\n+                    name: bound_ty.kind,\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {"}, {"sha": "f39170bb2916de0802b05016d86ef28b90429659", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -2044,7 +2044,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n ) -> SubstsRef<'tcx> {\n     struct ReplaceParamAndInferWithPlaceholder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-        idx: usize,\n+        idx: u32,\n     }\n \n     impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n@@ -2056,7 +2056,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n             if let ty::Infer(_) = t.kind() {\n                 self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundVar::from_usize({\n+                    name: ty::BoundTyKind::Anon({\n                         let idx = self.idx;\n                         self.idx += 1;\n                         idx\n@@ -2077,7 +2077,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_usize({\n+                        name: ty::BoundVar::from_u32({\n                             let idx = self.idx;\n                             self.idx += 1;\n                             idx"}, {"sha": "1445bc1ed32e60c604e275f948ce30722390a2b2", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -610,7 +610,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n+                    .or_insert_with(|| {\n+                        ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n+                    })\n                     .expect_ty();\n                 self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n             }"}, {"sha": "09c3d5b736cf18832270bf4b4e141cbdb5d083a8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -1369,7 +1369,7 @@ pub struct Placeholder<T> {\n \n pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n \n-pub type PlaceholderType = Placeholder<BoundVar>;\n+pub type PlaceholderType = Placeholder<BoundTyKind>;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n #[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]"}, {"sha": "e8e00d5feb873110e3df1a5d49d59c34e8bd79f9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -698,8 +698,10 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n-                ty::BoundTyKind::Param(p) => p!(write(\"{}\", p)),\n+                ty::BoundTyKind::Anon(bv) => {\n+                    self.pretty_print_bound_var(debruijn, ty::BoundVar::from_u32(bv))?\n+                }\n+                ty::BoundTyKind::Param(_, s) => p!(write(\"{}\", s)),\n             },\n             ty::Adt(def, substs) => {\n                 p!(print_def_path(def.did(), substs));"}, {"sha": "8df639750c7010931366dec18638924bf10597b8", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -240,6 +240,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AssocKind,\n     crate::ty::AliasKind,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n+    crate::ty::Placeholder<crate::ty::BoundTyKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,"}, {"sha": "060d864389cb0f4ffa3f3c84b9f9ab5bcb353705", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -1504,13 +1504,22 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundTyKind {\n-    Anon,\n-    Param(Symbol),\n+    Anon(u32),\n+    Param(DefId, Symbol),\n+}\n+\n+impl BoundTyKind {\n+    pub fn expect_anon(self) -> u32 {\n+        match self {\n+            BoundTyKind::Anon(i) => i,\n+            _ => bug!(),\n+        }\n+    }\n }\n \n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n-        BoundTy { var, kind: BoundTyKind::Anon }\n+        BoundTy { var, kind: BoundTyKind::Anon(var.as_u32()) }\n     }\n }\n "}, {"sha": "53cae3e720c5ae6e2ac1fd70a634c53202223d03", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -783,7 +783,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderType { universe, name: bound_ty.var };\n+                let p = ty::PlaceholderType { universe, name: bound_ty.kind };\n                 self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_ty(ty::Placeholder(p))\n             }"}, {"sha": "0a4136dc1cfe5f508c252874cf7be7fe43cbd259", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -524,7 +524,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .kind\n                         {\n                             GenericParamDefKind::Type { .. } => {\n-                                let kind = ty::BoundTyKind::Param(param.name);\n+                                let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n                                 let bound_var = ty::BoundVariableKind::Ty(kind);\n                                 bound_vars.push(bound_var);\n                                 tcx.mk_ty(ty::Bound("}, {"sha": "dbd5f13fe4e8b20462c2c40c009a0b78a4a5a518", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -725,7 +725,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n                 ty::INNERMOST,\n                 ty::BoundTy {\n                     var: ty::BoundVar::from(param.index),\n-                    kind: ty::BoundTyKind::Param(param.name),\n+                    kind: ty::BoundTyKind::Param(param.def_id, param.name),\n                 },\n             ))\n             .into(),"}, {"sha": "9c5db3314c5cd6e547a3e94bd44d75ed62d521cd", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -370,7 +370,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Placeholder(_placeholder) => {\n                 chalk_ir::TyKind::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: _placeholder.universe.as_usize() },\n-                    idx: _placeholder.name.as_usize(),\n+                    idx: _placeholder.name.expect_anon() as usize,\n                 })\n             }\n             ty::Infer(_infer) => unimplemented!(),\n@@ -452,10 +452,6 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             ),\n             TyKind::Foreign(def_id) => ty::Foreign(def_id.0),\n             TyKind::Error => return interner.tcx.ty_error(),\n-            TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n-                universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n-                name: ty::BoundVar::from_usize(placeholder.idx),\n-            }),\n             TyKind::Alias(alias_ty) => match alias_ty {\n                 chalk_ir::AliasTy::Projection(projection) => ty::Alias(\n                     ty::Projection,\n@@ -473,13 +469,17 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 ),\n             },\n             TyKind::Function(_quantified_ty) => unimplemented!(),\n-            TyKind::BoundVar(_bound) => ty::Bound(\n-                ty::DebruijnIndex::from_usize(_bound.debruijn.depth() as usize),\n+            TyKind::BoundVar(bound) => ty::Bound(\n+                ty::DebruijnIndex::from_usize(bound.debruijn.depth() as usize),\n                 ty::BoundTy {\n-                    var: ty::BoundVar::from_usize(_bound.index),\n-                    kind: ty::BoundTyKind::Anon,\n+                    var: ty::BoundVar::from_usize(bound.index),\n+                    kind: ty::BoundTyKind::Anon(bound.index as u32),\n                 },\n             ),\n+            TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n+                universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n+                name: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+            }),\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n             TyKind::Dyn(_) => unimplemented!(),\n         };\n@@ -504,7 +504,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n             ty::RePlaceholder(placeholder_region) => {\n                 chalk_ir::LifetimeData::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: placeholder_region.universe.index() },\n-                    idx: 0,\n+                    idx: 0, // FIXME: This `idx: 0` is sus.\n                 })\n                 .intern(interner)\n             }\n@@ -674,7 +674,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let self_ty = interner.tcx.mk_ty(ty::Bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n-            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon },\n+            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon(0) },\n         ));\n         let where_clauses = predicates.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n@@ -1038,7 +1038,7 @@ pub(crate) struct ParamsSubstitutor<'tcx> {\n     binder_index: ty::DebruijnIndex,\n     list: Vec<rustc_middle::ty::ParamTy>,\n     next_ty_placeholder: usize,\n-    pub(crate) params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    pub(crate) params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n     pub(crate) named_regions: BTreeMap<DefId, u32>,\n }\n \n@@ -1072,15 +1072,15 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n-                    name: ty::BoundVar::from_usize(idx),\n+                    name: ty::BoundTyKind::Anon(idx as u32),\n                 })),\n                 None => {\n                     self.list.push(param);\n                     let idx = self.list.len() - 1 + self.next_ty_placeholder;\n-                    self.params.insert(idx, param);\n+                    self.params.insert(idx as u32, param);\n                     self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                         universe: ty::UniverseIndex::from_usize(0),\n-                        name: ty::BoundVar::from_usize(idx),\n+                        name: ty::BoundTyKind::Anon(idx as u32),\n                     }))\n                 }\n             },\n@@ -1119,13 +1119,13 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n \n pub(crate) struct ReverseParamsSubstitutor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n }\n \n impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n     pub(crate) fn new(\n         tcx: TyCtxt<'tcx>,\n-        params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+        params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n     ) -> Self {\n         Self { tcx, params }\n     }\n@@ -1139,7 +1139,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n             ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n-                match self.params.get(&name.as_usize()) {\n+                match self.params.get(&name.expect_anon()) {\n                     Some(param) => self.tcx.mk_ty(ty::Param(*param)),\n                     None => t,\n                 }\n@@ -1171,7 +1171,8 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n-                self.next_ty_placeholder = self.next_ty_placeholder.max(p.name.as_usize() + 1);\n+                self.next_ty_placeholder =\n+                    self.next_ty_placeholder.max(p.name.expect_anon() as usize + 1);\n             }\n \n             _ => (),\n@@ -1186,6 +1187,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n                 if let ty::BoundRegionKind::BrAnon(anon, _) = p.name {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n                 }\n+                // FIXME: This doesn't seem to handle BrNamed at all?\n             }\n \n             _ => (),"}, {"sha": "5855a8e28dd1d0e0efd8de964215de1046e5353d", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36bdf2d307328d471289e782e1878e21d9a3e91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=d36bdf2d307328d471289e782e1878e21d9a3e91", "patch": "@@ -6,12 +6,10 @@\n pub(crate) mod db;\n pub(crate) mod lowering;\n \n-use rustc_data_structures::fx::FxHashMap;\n-\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ParamTy, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,\n@@ -41,7 +39,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n     let mut params_substitutor =\n         ParamsSubstitutor::new(tcx, placeholders_collector.next_ty_placeholder);\n     let obligation = obligation.fold_with(&mut params_substitutor);\n-    let params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n+    let params = params_substitutor.params;\n \n     let max_universe = obligation.max_universe.index();\n "}]}