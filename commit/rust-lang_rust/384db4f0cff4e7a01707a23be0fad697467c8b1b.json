{"sha": "384db4f0cff4e7a01707a23be0fad697467c8b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NGRiNGYwY2ZmNGU3YTAxNzA3YTIzYmUwZmFkNjk3NDY3YzhiMWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-19T20:57:25Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:04Z"}, "message": "Add support for all integer types", "tree": {"sha": "54ce02303f76461b1b967d46caf9f59a9df52881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ce02303f76461b1b967d46caf9f59a9df52881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384db4f0cff4e7a01707a23be0fad697467c8b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384db4f0cff4e7a01707a23be0fad697467c8b1b", "html_url": "https://github.com/rust-lang/rust/commit/384db4f0cff4e7a01707a23be0fad697467c8b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384db4f0cff4e7a01707a23be0fad697467c8b1b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d2baff9485f3a6e54ab606c188c80fab76f13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d2baff9485f3a6e54ab606c188c80fab76f13d", "html_url": "https://github.com/rust-lang/rust/commit/b3d2baff9485f3a6e54ab606c188c80fab76f13d"}], "stats": {"total": 74, "additions": 58, "deletions": 16}, "files": [{"sha": "670e0b1fef5e5e37eff2507f36ef0e83cb7e64a9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/384db4f0cff4e7a01707a23be0fad697467c8b1b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384db4f0cff4e7a01707a23be0fad697467c8b1b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=384db4f0cff4e7a01707a23be0fad697467c8b1b", "patch": "@@ -457,13 +457,52 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .map(|v| Variant(v.did))\n                 .collect()\n         }\n-        ty::TyUint(ast::UintTy::Usize) => {\n+        ty::TyChar => {\n+            let (min, max) = (0u128, char::MAX as u128);\n             return (vec![\n-                ConstantRange(ty::Const::from_usize(cx.tcx, 0),\n-                              ty::Const::from_usize(cx.tcx, 100),\n-                              RangeEnd::Excluded),\n+                ConstantRange(ty::Const::from_bits(cx.tcx, min, cx.tcx.types.char),\n+                              ty::Const::from_bits(cx.tcx, max, cx.tcx.types.char),\n+                              RangeEnd::Included),\n             ], true)\n         }\n+        ty::TyInt(int_ty) => {\n+            use syntax::ast::IntTy::*;\n+            let (min, max, ty) = match int_ty {\n+                Isize => (isize::MIN as i128, isize::MAX as i128, cx.tcx.types.isize),\n+                I8    => (   i8::MIN as i128,    i8::MAX as i128, cx.tcx.types.i8),\n+                I16   => (  i16::MIN as i128,   i16::MAX as i128, cx.tcx.types.i16),\n+                I32   => (  i32::MIN as i128,   i32::MAX as i128, cx.tcx.types.i32),\n+                I64   => (  i64::MIN as i128,   i64::MAX as i128, cx.tcx.types.i64),\n+                I128  => ( i128::MIN as i128,  i128::MAX as i128, cx.tcx.types.i128),\n+            };\n+            return (vec![\n+                ConstantRange(\n+                    ty::Const::from_bits(cx.tcx, unsafe {\n+                        transmute::<i128, u128>(min)\n+                    }, ty),\n+                    ty::Const::from_bits(cx.tcx, unsafe {\n+                        transmute::<i128, u128>(max)\n+                    }, ty),\n+                    RangeEnd::Included\n+                ),\n+            ], true);\n+        }\n+        ty::TyUint(uint_ty) => {\n+            use syntax::ast::UintTy::*;\n+            let (min, (max, ty)) = (0u128, match uint_ty {\n+                Usize => (usize::MAX as u128, cx.tcx.types.usize),\n+                U8    => (   u8::MAX as u128, cx.tcx.types.u8),\n+                U16   => (  u16::MAX as u128, cx.tcx.types.u16),\n+                U32   => (  u32::MAX as u128, cx.tcx.types.u32),\n+                U64   => (  u64::MAX as u128, cx.tcx.types.u64),\n+                U128  => ( u128::MAX as u128, cx.tcx.types.u128),\n+            });\n+            return (vec![\n+                ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n+                              ty::Const::from_bits(cx.tcx, max, ty),\n+                              RangeEnd::Included),\n+            ], true);\n+        }\n         _ => {\n             if cx.is_uninhabited(pcx.ty) {\n                 vec![]\n@@ -666,26 +705,27 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         let (all_ctors, _ranged) = all_constructors(cx, pcx);\n         debug!(\"all_ctors = {:#?}\", all_ctors);\n \n-        fn to_inc_range_pair<'tcx>(tcx: TyCtxt<'_, '_, '_>, ctor: &Constructor<'tcx>) -> Option<(u64, u64)> {\n+        fn to_inc_range_pair<'tcx>(_tcx: TyCtxt<'_, '_, '_>, ctor: &Constructor<'tcx>) -> Option<(u128, u128, Ty<'tcx>)> {\n             match ctor {\n                 Single | Variant(_) | Slice(_) => {\n                     None\n                 }\n                 ConstantValue(const_) => {\n-                    if let Some(val) = const_.assert_usize(tcx) {\n-                        return Some((val, val));\n+                    if let Some(val) = const_.assert_bits(const_.ty) {\n+                        return Some((val, val, const_.ty));\n                     }\n                     None\n                 }\n                 ConstantRange(lo, hi, end) => {\n-                    if let Some(lo) = lo.assert_usize(tcx) {\n-                        if let Some(hi) = hi.assert_usize(tcx) {\n+                    let ty = lo.ty;\n+                    if let Some(lo) = lo.assert_bits(lo.ty) {\n+                        if let Some(hi) = hi.assert_bits(hi.ty) {\n                             if lo > hi || lo == hi && end == &RangeEnd::Excluded {\n                                 return None;\n                             } else if end == &RangeEnd::Included {\n-                                return Some((lo, hi));\n+                                return Some((lo, hi, ty));\n                             } else {\n-                                return Some((lo, hi - 1));\n+                                return Some((lo, hi - 1, ty));\n                             }\n                         }\n                     }\n@@ -700,12 +740,14 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                     ranges: Vec<Constructor<'tcx>>,\n                      ctor: &Constructor<'tcx>)\n                      -> (Vec<Constructor<'tcx>>, bool) {\n-            if let Some((lo1, hi1)) = to_inc_range_pair(cx.tcx, ctor) {\n+            if let Some((lo1, hi1, ty)) = to_inc_range_pair(cx.tcx, ctor) {\n                 let mut ctor_was_useful = false;\n                 // values only consists of ranges\n                 let mut new_ranges = vec![];\n                 let mut ranges: Vec<_> =\n-                    ranges.into_iter().filter_map(|r| to_inc_range_pair(cx.tcx, &r)).collect();\n+                    ranges.into_iter().filter_map(|r| {\n+                        to_inc_range_pair(cx.tcx, &r).map(|(lo, hi, _)| (lo, hi))\n+                    }).collect();\n                 while let Some((lo2, hi2)) = ranges.pop() {\n                     // eprintln!(\"{:?} {:?}\", (lo2, hi2), (lo1, hi1));\n                     if lo1 <= lo2 && hi1 >= hi2 {\n@@ -745,9 +787,9 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 }\n                 // transform ranges to proper format\n                 (new_ranges.into_iter().map(|(lo, hi)| {\n-                    ConstantRange(ty::Const::from_usize(cx.tcx, lo),\n-                                ty::Const::from_usize(cx.tcx, hi),\n-                                RangeEnd::Included)\n+                    ConstantRange(ty::Const::from_bits(cx.tcx, lo, ty),\n+                                  ty::Const::from_bits(cx.tcx, hi, ty),\n+                                  RangeEnd::Included)\n                 }).collect(), ctor_was_useful)\n             } else {\n                 (ranges, false)"}]}