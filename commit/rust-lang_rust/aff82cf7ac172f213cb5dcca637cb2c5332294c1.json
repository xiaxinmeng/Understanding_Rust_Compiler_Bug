{"sha": "aff82cf7ac172f213cb5dcca637cb2c5332294c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjgyY2Y3YWMxNzJmMjEzY2I1ZGNjYTYzN2NiMmM1MzMyMjk0YzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-07T12:44:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-07T12:44:18Z"}, "message": "Merge #3378\n\n3378: vscode: redesign inlay hints to be capable of handling multiple editors for one source file r=Veetaha a=Veetaha\n\nFixes: #3008 (inlay corruption with multiple editors for one file).\r\nFixes: #3319 (unnecessary requests for inlay hints when switching unrelated source files or output/log/console windows)\r\nAlso, I don't know how, but the problem described in #3057 doesn't appear for me anymore (maybe it was some fix on the server-side, idk), the inlay hints are displaying right away. Though the last time I checked this it was caused by the server returning an empty array of hints and responding with a very big latency, I am not sure that this redesign actually fixed #3057....\r\n\r\nWe didn't handle the case when one rust source file is open in multiple editors in vscode (e.g. by manually adding another editor for the same file or by opening an inline git diff view or just any kind of preview within the same file).\r\n\r\nThe git diff preview is actually quite special because it causes memory leaks in vscode (https://github.com/microsoft/vscode/issues/91782). It is not removed from `visibleEditors` once it is closed. However, this bug doesn't affect the inlay hints anymore, because we don't issue a request and set inlay hints for each editor in isolation. Editors are grouped by their respective files and we issue requests only for files and then update all duplicate editors using the results (so we just update the decorations for already closed git diff preview read-only editors).\r\n\r\nAlso, note on a hack I had to use. `vscode.TextEdtior` identity is not actually public, its `id` field is not exposed to us. I created a dedicated upstream issue for this (https://github.com/microsoft/vscode/issues/91788).\r\n\r\nRegarding #3319: the newly designed hints client doesn't issue requests for type hints when switching the visible editors if it has them already cached (though it does rerender things anyway, but this could be optimized in future if so wanted).\r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\n![bug_demo](https://user-images.githubusercontent.com/36276403/75613171-3cd0d480-5b33-11ea-9066-954fb2fb18a5.gif)\r\n\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> After </summary>\r\n\r\n![multi-cursor-replace](https://user-images.githubusercontent.com/36276403/75612710-d5b12100-5b2e-11ea-99ba-214b4219e6d3.gif)\r\n\r\n</details>\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "cd0c527ac79338d8719a6ce766bf3fd81aaa90f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0c527ac79338d8719a6ce766bf3fd81aaa90f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff82cf7ac172f213cb5dcca637cb2c5332294c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeY5ciCRBK7hj4Ov3rIwAAdHIIALGfkZPfew24N95cXjt1Q1fH\ntLXtcQgPSzw6D+xgcEeUqoU0eH71/SHmnrbX7KNS0kDUDd0e2NfOCXNoxRF9QmQe\nN5g31POEnvXon04kXtgWJm8z12ZgxNDeefGAyr+AVwY+AS893WK6hfG0MtFFtrJT\nhrTtFxr+5W/j9pGP4qrw39HzBjud+ju7cTLycNRZkamgYq6U8eOHrZC0IvJJg0H2\nWU0DqT6gw7xs57MFcMNYZRlsJjTBcs0WWkINs0bAPwOuBeTaz7S5bCFsKyPlzXz8\n4l/+6gaWHEoVGtWUZ3znL7g1MVLszFJvPj2IM9/NzsLTY7nJm2qbE7utrOVlFKQ=\n=eC4p\n-----END PGP SIGNATURE-----\n", "payload": "tree cd0c527ac79338d8719a6ce766bf3fd81aaa90f6\nparent 013e9080564aa497e6de92ae4bd1f162328b3cd8\nparent 65cecff316e9217eb0f58df189a3f05de5d8d51c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583585058 +0000\ncommitter GitHub <noreply@github.com> 1583585058 +0000\n\nMerge #3378\n\n3378: vscode: redesign inlay hints to be capable of handling multiple editors for one source file r=Veetaha a=Veetaha\n\nFixes: #3008 (inlay corruption with multiple editors for one file).\r\nFixes: #3319 (unnecessary requests for inlay hints when switching unrelated source files or output/log/console windows)\r\nAlso, I don't know how, but the problem described in #3057 doesn't appear for me anymore (maybe it was some fix on the server-side, idk), the inlay hints are displaying right away. Though the last time I checked this it was caused by the server returning an empty array of hints and responding with a very big latency, I am not sure that this redesign actually fixed #3057....\r\n\r\nWe didn't handle the case when one rust source file is open in multiple editors in vscode (e.g. by manually adding another editor for the same file or by opening an inline git diff view or just any kind of preview within the same file).\r\n\r\nThe git diff preview is actually quite special because it causes memory leaks in vscode (https://github.com/microsoft/vscode/issues/91782). It is not removed from `visibleEditors` once it is closed. However, this bug doesn't affect the inlay hints anymore, because we don't issue a request and set inlay hints for each editor in isolation. Editors are grouped by their respective files and we issue requests only for files and then update all duplicate editors using the results (so we just update the decorations for already closed git diff preview read-only editors).\r\n\r\nAlso, note on a hack I had to use. `vscode.TextEdtior` identity is not actually public, its `id` field is not exposed to us. I created a dedicated upstream issue for this (https://github.com/microsoft/vscode/issues/91788).\r\n\r\nRegarding #3319: the newly designed hints client doesn't issue requests for type hints when switching the visible editors if it has them already cached (though it does rerender things anyway, but this could be optimized in future if so wanted).\r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\n![bug_demo](https://user-images.githubusercontent.com/36276403/75613171-3cd0d480-5b33-11ea-9066-954fb2fb18a5.gif)\r\n\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> After </summary>\r\n\r\n![multi-cursor-replace](https://user-images.githubusercontent.com/36276403/75612710-d5b12100-5b2e-11ea-99ba-214b4219e6d3.gif)\r\n\r\n</details>\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff82cf7ac172f213cb5dcca637cb2c5332294c1", "html_url": "https://github.com/rust-lang/rust/commit/aff82cf7ac172f213cb5dcca637cb2c5332294c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff82cf7ac172f213cb5dcca637cb2c5332294c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "013e9080564aa497e6de92ae4bd1f162328b3cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/013e9080564aa497e6de92ae4bd1f162328b3cd8", "html_url": "https://github.com/rust-lang/rust/commit/013e9080564aa497e6de92ae4bd1f162328b3cd8"}, {"sha": "65cecff316e9217eb0f58df189a3f05de5d8d51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cecff316e9217eb0f58df189a3f05de5d8d51c", "html_url": "https://github.com/rust-lang/rust/commit/65cecff316e9217eb0f58df189a3f05de5d8d51c"}], "stats": {"total": 336, "additions": 202, "deletions": 134}, "files": [{"sha": "25ef38aed047f4c074e4e238fed9cb939745ea04", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=aff82cf7ac172f213cb5dcca637cb2c5332294c1", "patch": "@@ -3,7 +3,7 @@ import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n import { createClient } from './client';\n-import { isRustDocument } from './util';\n+import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n     private constructor(\n@@ -22,17 +22,15 @@ export class Ctx {\n         return res;\n     }\n \n-    get activeRustEditor(): vscode.TextEditor | undefined {\n+    get activeRustEditor(): RustEditor | undefined {\n         const editor = vscode.window.activeTextEditor;\n-        return editor && isRustDocument(editor.document)\n+        return editor && isRustEditor(editor)\n             ? editor\n             : undefined;\n     }\n \n-    get visibleRustEditors(): vscode.TextEditor[] {\n-        return vscode.window.visibleTextEditors.filter(\n-            editor => isRustDocument(editor.document),\n-        );\n+    get visibleRustEditors(): RustEditor[] {\n+        return vscode.window.visibleTextEditors.filter(isRustEditor);\n     }\n \n     registerCommand(name: string, factory: (ctx: Ctx) => Cmd) {"}, {"sha": "e1a82e03e824164db441e67137f543d3c7c64549", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 174, "deletions": 116, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=aff82cf7ac172f213cb5dcca637cb2c5332294c1", "patch": "@@ -1,156 +1,214 @@\n+import * as lc from \"vscode-languageclient\";\n import * as vscode from 'vscode';\n import * as ra from './rust-analyzer-api';\n \n-import { Ctx } from './ctx';\n-import { log, sendRequestWithRetry, isRustDocument } from './util';\n+import { Ctx, Disposable } from './ctx';\n+import { sendRequestWithRetry, isRustDocument, RustDocument, RustEditor } from './util';\n \n-export function activateInlayHints(ctx: Ctx) {\n-    const hintsUpdater = new HintsUpdater(ctx);\n-    vscode.window.onDidChangeVisibleTextEditors(\n-        async _ => hintsUpdater.refresh(),\n-        null,\n-        ctx.subscriptions\n-    );\n \n-    vscode.workspace.onDidChangeTextDocument(\n-        async event => {\n-            if (event.contentChanges.length === 0) return;\n-            if (!isRustDocument(event.document)) return;\n-            await hintsUpdater.refresh();\n+export function activateInlayHints(ctx: Ctx) {\n+    const maybeUpdater = {\n+        updater: null as null | HintsUpdater,\n+        onConfigChange() {\n+            if (!ctx.config.displayInlayHints) {\n+                return this.dispose();\n+            }\n+            if (!this.updater) this.updater = new HintsUpdater(ctx);\n         },\n-        null,\n-        ctx.subscriptions\n-    );\n+        dispose() {\n+            this.updater?.dispose();\n+            this.updater = null;\n+        }\n+    };\n+\n+    ctx.pushCleanup(maybeUpdater);\n \n     vscode.workspace.onDidChangeConfiguration(\n-        async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints),\n-        null,\n-        ctx.subscriptions\n+        maybeUpdater.onConfigChange, maybeUpdater, ctx.subscriptions\n     );\n \n-    ctx.pushCleanup({\n-        dispose() {\n-            hintsUpdater.clear();\n+    maybeUpdater.onConfigChange();\n+}\n+\n+\n+const typeHints = {\n+    decorationType: vscode.window.createTextEditorDecorationType({\n+        after: {\n+            color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n+            fontStyle: \"normal\",\n         }\n-    });\n+    }),\n \n-    // XXX: we don't await this, thus Promise rejections won't be handled, but\n-    // this should never throw in fact...\n-    void hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n-}\n+    toDecoration(hint: ra.InlayHint.TypeHint, conv: lc.Protocol2CodeConverter): vscode.DecorationOptions {\n+        return {\n+            range: conv.asRange(hint.range),\n+            renderOptions: { after: { contentText: `: ${hint.label}` } }\n+        };\n+    }\n+};\n+\n+const paramHints = {\n+    decorationType: vscode.window.createTextEditorDecorationType({\n+        before: {\n+            color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n+            fontStyle: \"normal\",\n+        }\n+    }),\n \n-const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n-    after: {\n-        color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n-        fontStyle: \"normal\",\n-    },\n-});\n-\n-const parameterHintDecorationType = vscode.window.createTextEditorDecorationType({\n-    before: {\n-        color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n-        fontStyle: \"normal\",\n-    },\n-});\n-\n-class HintsUpdater {\n-    private pending = new Map<string, vscode.CancellationTokenSource>();\n-    private ctx: Ctx;\n-    private enabled: boolean;\n-\n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n-        this.enabled = false;\n+    toDecoration(hint: ra.InlayHint.ParamHint, conv: lc.Protocol2CodeConverter): vscode.DecorationOptions {\n+        return {\n+            range: conv.asRange(hint.range),\n+            renderOptions: { before: { contentText: `${hint.label}: ` } }\n+        };\n     }\n+};\n \n-    async setEnabled(enabled: boolean): Promise<void> {\n-        log.debug({ enabled, prev: this.enabled });\n+class HintsUpdater implements Disposable {\n+    private sourceFiles = new Map<string, RustSourceFile>(); // map Uri -> RustSourceFile\n+    private readonly disposables: Disposable[] = [];\n \n-        if (this.enabled === enabled) return;\n-        this.enabled = enabled;\n+    constructor(private readonly ctx: Ctx) {\n+        vscode.window.onDidChangeVisibleTextEditors(\n+            this.onDidChangeVisibleTextEditors,\n+            this,\n+            this.disposables\n+        );\n \n-        if (this.enabled) {\n-            return await this.refresh();\n-        } else {\n-            return this.clear();\n-        }\n+        vscode.workspace.onDidChangeTextDocument(\n+            this.onDidChangeTextDocument,\n+            this,\n+            this.disposables\n+        );\n+\n+        // Set up initial cache shape\n+        ctx.visibleRustEditors.forEach(editor => this.sourceFiles.set(\n+            editor.document.uri.toString(),\n+            {\n+                document: editor.document,\n+                inlaysRequest: null,\n+                cachedDecorations: null\n+            }\n+        ));\n+\n+        this.syncCacheAndRenderHints();\n     }\n \n-    clear() {\n-        this.ctx.visibleRustEditors.forEach(it => {\n-            this.setTypeDecorations(it, []);\n-            this.setParameterDecorations(it, []);\n-        });\n+    dispose() {\n+        this.sourceFiles.forEach(file => file.inlaysRequest?.cancel());\n+        this.ctx.visibleRustEditors.forEach(editor => this.renderDecorations(editor, { param: [], type: [] }));\n+        this.disposables.forEach(d => d.dispose());\n+    }\n+\n+    onDidChangeTextDocument({ contentChanges, document }: vscode.TextDocumentChangeEvent) {\n+        if (contentChanges.length === 0 || !isRustDocument(document)) return;\n+        this.syncCacheAndRenderHints();\n     }\n \n-    async refresh() {\n-        if (!this.enabled) return;\n-        await Promise.all(this.ctx.visibleRustEditors.map(it => this.refreshEditor(it)));\n+    private syncCacheAndRenderHints() {\n+        // FIXME: make inlayHints request pass an array of files?\n+        this.sourceFiles.forEach((file, uri) => this.fetchHints(file).then(hints => {\n+            if (!hints) return;\n+\n+            file.cachedDecorations = this.hintsToDecorations(hints);\n+\n+            for (const editor of this.ctx.visibleRustEditors) {\n+                if (editor.document.uri.toString() === uri) {\n+                    this.renderDecorations(editor, file.cachedDecorations);\n+                }\n+            }\n+        }));\n     }\n \n-    private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n-        const newHints = await this.queryHints(editor.document.uri.toString());\n-        if (newHints == null) return;\n-\n-        const newTypeDecorations = newHints\n-            .filter(hint => hint.kind === ra.InlayKind.TypeHint)\n-            .map(hint => ({\n-                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n-                renderOptions: {\n-                    after: {\n-                        contentText: `: ${hint.label}`,\n-                    },\n-                },\n-            }));\n-        this.setTypeDecorations(editor, newTypeDecorations);\n-\n-        const newParameterDecorations = newHints\n-            .filter(hint => hint.kind === ra.InlayKind.ParameterHint)\n-            .map(hint => ({\n-                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n-                renderOptions: {\n-                    before: {\n-                        contentText: `${hint.label}: `,\n-                    },\n-                },\n-            }));\n-        this.setParameterDecorations(editor, newParameterDecorations);\n+    onDidChangeVisibleTextEditors() {\n+        const newSourceFiles = new Map<string, RustSourceFile>();\n+\n+        // Rerendering all, even up-to-date editors for simplicity\n+        this.ctx.visibleRustEditors.forEach(async editor => {\n+            const uri = editor.document.uri.toString();\n+            const file = this.sourceFiles.get(uri) ?? {\n+                document: editor.document,\n+                inlaysRequest: null,\n+                cachedDecorations: null\n+            };\n+            newSourceFiles.set(uri, file);\n+\n+            // No text documents changed, so we may try to use the cache\n+            if (!file.cachedDecorations) {\n+                file.inlaysRequest?.cancel();\n+\n+                const hints = await this.fetchHints(file);\n+                if (!hints) return;\n+\n+                file.cachedDecorations = this.hintsToDecorations(hints);\n+            }\n+\n+            this.renderDecorations(editor, file.cachedDecorations);\n+        });\n+\n+        // Cancel requests for no longer visible (disposed) source files\n+        this.sourceFiles.forEach((file, uri) => {\n+            if (!newSourceFiles.has(uri)) file.inlaysRequest?.cancel();\n+        });\n+\n+        this.sourceFiles = newSourceFiles;\n     }\n \n-    private setTypeDecorations(\n-        editor: vscode.TextEditor,\n-        decorations: vscode.DecorationOptions[],\n-    ) {\n-        editor.setDecorations(\n-            typeHintDecorationType,\n-            this.enabled ? decorations : [],\n-        );\n+    private renderDecorations(editor: RustEditor, decorations: InlaysDecorations) {\n+        editor.setDecorations(typeHints.decorationType, decorations.type);\n+        editor.setDecorations(paramHints.decorationType, decorations.param);\n     }\n \n-    private setParameterDecorations(\n-        editor: vscode.TextEditor,\n-        decorations: vscode.DecorationOptions[],\n-    ) {\n-        editor.setDecorations(\n-            parameterHintDecorationType,\n-            this.enabled ? decorations : [],\n-        );\n+    private hintsToDecorations(hints: ra.InlayHint[]): InlaysDecorations {\n+        const decorations: InlaysDecorations = { type: [], param: [] };\n+        const conv = this.ctx.client.protocol2CodeConverter;\n+\n+        for (const hint of hints) {\n+            switch (hint.kind) {\n+                case ra.InlayHint.Kind.TypeHint: {\n+                    decorations.type.push(typeHints.toDecoration(hint, conv));\n+                    continue;\n+                }\n+                case ra.InlayHint.Kind.ParamHint: {\n+                    decorations.param.push(paramHints.toDecoration(hint, conv));\n+                    continue;\n+                }\n+            }\n+        }\n+        return decorations;\n     }\n \n-    private async queryHints(documentUri: string): Promise<ra.InlayHint[] | null> {\n-        this.pending.get(documentUri)?.cancel();\n+    private async fetchHints(file: RustSourceFile): Promise<null | ra.InlayHint[]> {\n+        file.inlaysRequest?.cancel();\n \n         const tokenSource = new vscode.CancellationTokenSource();\n-        this.pending.set(documentUri, tokenSource);\n+        file.inlaysRequest = tokenSource;\n \n-        const request = { textDocument: { uri: documentUri } };\n+        const request = { textDocument: { uri: file.document.uri.toString() } };\n \n         return sendRequestWithRetry(this.ctx.client, ra.inlayHints, request, tokenSource.token)\n             .catch(_ => null)\n             .finally(() => {\n-                if (!tokenSource.token.isCancellationRequested) {\n-                    this.pending.delete(documentUri);\n+                if (file.inlaysRequest === tokenSource) {\n+                    file.inlaysRequest = null;\n                 }\n             });\n     }\n }\n+\n+interface InlaysDecorations {\n+    type: vscode.DecorationOptions[];\n+    param: vscode.DecorationOptions[];\n+}\n+\n+interface RustSourceFile {\n+    /*\n+    * Source of the token to cancel in-flight inlay hints request if any.\n+    */\n+    inlaysRequest: null | vscode.CancellationTokenSource;\n+    /**\n+    * Last applied decorations.\n+    */\n+    cachedDecorations: null | InlaysDecorations;\n+\n+    document: RustDocument;\n+}"}, {"sha": "bd6e3ada083cb56b7f6ba40db17fd8369694ed25", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=aff82cf7ac172f213cb5dcca637cb2c5332294c1", "patch": "@@ -86,14 +86,20 @@ export interface Runnable {\n export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n \n \n-export const enum InlayKind {\n-    TypeHint = \"TypeHint\",\n-    ParameterHint = \"ParameterHint\",\n-}\n-export interface InlayHint {\n-    range: lc.Range;\n-    kind: InlayKind;\n-    label: string;\n+\n+export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint;\n+\n+export namespace InlayHint {\n+    export const enum Kind {\n+        TypeHint = \"TypeHint\",\n+        ParamHint = \"ParameterHint\",\n+    }\n+    interface Common {\n+        range: lc.Range;\n+        label: string;\n+    }\n+    export type TypeHint = Common & { kind: Kind.TypeHint };\n+    export type ParamHint = Common & { kind: Kind.ParamHint };\n }\n export interface InlayHintsParams {\n     textDocument: lc.TextDocumentIdentifier;"}, {"sha": "95a5f1227ca25ae1782352d014f0d8c5f7c5f729", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aff82cf7ac172f213cb5dcca637cb2c5332294c1/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=aff82cf7ac172f213cb5dcca637cb2c5332294c1", "patch": "@@ -1,7 +1,6 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n-import { TextDocument } from \"vscode\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n     try {\n@@ -67,9 +66,16 @@ function sleep(ms: number) {\n     return new Promise(resolve => setTimeout(resolve, ms));\n }\n \n-export function isRustDocument(document: TextDocument) {\n+export type RustDocument = vscode.TextDocument & { languageId: \"rust\" };\n+export type RustEditor = vscode.TextEditor & { document: RustDocument; id: string };\n+\n+export function isRustDocument(document: vscode.TextDocument): document is RustDocument {\n     return document.languageId === 'rust'\n         // SCM diff views have the same URI as the on-disk document but not the same content\n         && document.uri.scheme !== 'git'\n         && document.uri.scheme !== 'svn';\n-}\n\\ No newline at end of file\n+}\n+\n+export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n+    return isRustDocument(editor.document);\n+}"}]}