{"sha": "945c9447093a2ca944e70bae125f2af69f8eac16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWM5NDQ3MDkzYTJjYTk0NGU3MGJhZTEyNWYyYWY2OWY4ZWFjMTY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T09:20:51Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-14T13:56:17Z"}, "message": "Merge `block_in_if_condition_expr` and `block_in_if_condition_stmt` lints into `block_in_if_condition` lint", "tree": {"sha": "8feb74f2bcd6b1fe8d293fd29de49d52394853b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8feb74f2bcd6b1fe8d293fd29de49d52394853b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945c9447093a2ca944e70bae125f2af69f8eac16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945c9447093a2ca944e70bae125f2af69f8eac16", "html_url": "https://github.com/rust-lang/rust/commit/945c9447093a2ca944e70bae125f2af69f8eac16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945c9447093a2ca944e70bae125f2af69f8eac16/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1842b0cace2a73b55e6d85dc145a102603c7e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1842b0cace2a73b55e6d85dc145a102603c7e5a", "html_url": "https://github.com/rust-lang/rust/commit/e1842b0cace2a73b55e6d85dc145a102603c7e5a"}], "stats": {"total": 101, "additions": 41, "deletions": 60}, "files": [{"sha": "0b270e6acd2a4439a5e3133d585d9cb175dbeee3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1274,8 +1274,7 @@ Released 2018-09-13\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n-[`block_in_if_condition_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_expr\n-[`block_in_if_condition_stmt`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_stmt\n+[`block_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box"}, {"sha": "8a5e595749fd10fbdcb22667e756766795205429", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -8,43 +8,40 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `if` conditions that use blocks to contain an\n-    /// expression.\n+    /// **What it does:** Checks for `if` conditions that use blocks containing an\n+    /// expression, statements or conditions that use closures with blocks.\n     ///\n-    /// **Why is this bad?** It isn't really Rust style, same as using parentheses\n-    /// to contain expressions.\n+    /// **Why is this bad?** Style, using blocks in the condition makes it hard to read.\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:**\n+    /// **Examples:**\n     /// ```rust\n+    /// // Bad\n     /// if { true } { /* ... */ }\n+    ///\n+    /// // Good\n+    /// if true { /* ... */ }\n     /// ```\n-    pub BLOCK_IN_IF_CONDITION_EXPR,\n-    style,\n-    \"braces that can be eliminated in conditions, e.g., `if { true } ...`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `if` conditions that use blocks containing\n-    /// statements, or conditions that use closures with blocks.\n     ///\n-    /// **Why is this bad?** Using blocks in the condition makes it hard to read.\n+    /// // or\n     ///\n-    /// **Known problems:** None.\n+    /// ```rust\n+    /// # fn somefunc() -> bool { true };\n     ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// if { let x = somefunc(); x } {}\n-    /// // or\n-    /// if somefunc(|x| { x == 47 }) {}\n+    /// // Bad\n+    /// if { let x = somefunc(); x } { /* ... */ }\n+    ///\n+    /// // Good\n+    /// let res = { let x = somefunc(); x };\n+    /// if res { /* ... */ }\n     /// ```\n-    pub BLOCK_IN_IF_CONDITION_STMT,\n+    pub BLOCK_IN_IF_CONDITION,\n     style,\n-    \"complex blocks in conditions, e.g., `if { let x = true; x } ...`\"\n+    \"useless or complex blocks that can be eliminated in conditions\"\n }\n \n-declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT]);\n+declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION]);\n \n struct ExVisitor<'a, 'tcx> {\n     found_block: Option<&'tcx Expr<'tcx>>,\n@@ -72,7 +69,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";\n const COMPLEX_BLOCK_MESSAGE: &str = \"in an `if` condition, avoid complex blocks or closures with blocks; \\\n-                                     instead, move the block or closure higher and bind it with a `let`\";\n+                                    instead, move the block or closure higher and bind it with a `let`\";\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n@@ -92,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n-                                BLOCK_IN_IF_CONDITION_EXPR,\n+                                BLOCK_IN_IF_CONDITION,\n                                 cond.span,\n                                 BRACED_EXPR_MESSAGE,\n                                 \"try\",\n@@ -118,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         let mut applicability = Applicability::MachineApplicable;\n                         span_lint_and_sugg(\n                             cx,\n-                            BLOCK_IN_IF_CONDITION_STMT,\n+                            BLOCK_IN_IF_CONDITION,\n                             expr.span.with_hi(cond.span.hi()),\n                             COMPLEX_BLOCK_MESSAGE,\n                             \"try\",\n@@ -140,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                 let mut visitor = ExVisitor { found_block: None, cx };\n                 walk_expr(&mut visitor, cond);\n                 if let Some(block) = visitor.found_block {\n-                    span_lint(cx, BLOCK_IN_IF_CONDITION_STMT, block.span, COMPLEX_BLOCK_MESSAGE);\n+                    span_lint(cx, BLOCK_IN_IF_CONDITION, block.span, COMPLEX_BLOCK_MESSAGE);\n                 }\n             }\n         }"}, {"sha": "98b696533d81c16dee27cedc880572ad3f84dc5a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -507,8 +507,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &bit_mask::INEFFECTIVE_BIT_MASK,\n         &bit_mask::VERBOSE_BIT_MASK,\n         &blacklisted_name::BLACKLISTED_NAME,\n-        &block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n-        &block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n+        &block_in_if_condition::BLOCK_IN_IF_CONDITION,\n         &booleans::LOGIC_BUG,\n         &booleans::NONMINIMAL_BOOL,\n         &bytecount::NAIVE_BYTECOUNT,\n@@ -1209,8 +1208,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION),\n         LintId::of(&booleans::LOGIC_BUG),\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n@@ -1456,8 +1454,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&doc::MISSING_SAFETY_DOC),"}, {"sha": "4ae60f7d8088f98395d7615d727b27cfe240a06a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -74,16 +74,9 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"blacklisted_name\",\n     },\n     Lint {\n-        name: \"block_in_if_condition_expr\",\n+        name: \"block_in_if_condition\",\n         group: \"style\",\n-        desc: \"braces that can be eliminated in conditions, e.g., `if { true } ...`\",\n-        deprecation: None,\n-        module: \"block_in_if_condition\",\n-    },\n-    Lint {\n-        name: \"block_in_if_condition_stmt\",\n-        group: \"style\",\n-        desc: \"complex blocks in conditions, e.g., `if { let x = true; x } ...`\",\n+        desc: \"useless or complex blocks that can be eliminated in conditions\",\n         deprecation: None,\n         module: \"block_in_if_condition\",\n     },"}, {"sha": "ae01c6d3042aaa1194f646259de24ad75f5c7115", "filename": "tests/ui/block_in_if_condition.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.fixed?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::block_in_if_condition)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n "}, {"sha": "88555dc47c20393ea91afa75de2e1b8ce8bbaee6", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::block_in_if_condition)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n "}, {"sha": "89e9ad26f49f487990a47b67149f886dc2f369f6", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,13 +1,13 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:27:5\n+  --> $DIR/block_in_if_condition.rs:26:5\n    |\n LL | /     if {\n LL | |         let x = 3;\n LL | |         x == 3\n LL | |     } {\n    | |_____^\n    |\n-   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n+   = note: `-D clippy::block-in-if-condition` implied by `-D warnings`\n help: try\n    |\n LL |     let res = {\n@@ -17,15 +17,13 @@ LL |     }; if res {\n    |\n \n error: omit braces around single expression condition\n-  --> $DIR/block_in_if_condition.rs:38:8\n+  --> $DIR/block_in_if_condition.rs:37:8\n    |\n LL |     if { true } {\n    |        ^^^^^^^^ help: try: `true`\n-   |\n-   = note: `-D clippy::block-in-if-condition-expr` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/block_in_if_condition.rs:47:8\n+  --> $DIR/block_in_if_condition.rs:46:8\n    |\n LL |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`"}, {"sha": "87b3fb94dafde43c06799e52844487a86550175f", "filename": "tests/ui/block_in_if_condition_closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition_closure.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::block_in_if_condition)]\n #![allow(unused, clippy::let_and_return)]\n \n fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {\n@@ -10,7 +9,7 @@ fn pred_test() {\n     let v = 3;\n     let sky = \"blue\";\n     // This is a sneaky case, where the block isn't directly in the condition,\n-    // but is actually nside a closure that the condition is using.\n+    // but is actually inside a closure that the condition is using.\n     // The same principle applies -- add some extra expressions to make sure\n     // linter isn't confused by them.\n     if v == 3"}, {"sha": "3df25691c3c47fb1c303977c7f6683c139867d2f", "filename": "tests/ui/block_in_if_condition_closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fblock_in_if_condition_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition_closure.stderr?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,5 +1,5 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:19:17\n+  --> $DIR/block_in_if_condition_closure.rs:18:17\n    |\n LL |               |x| {\n    |  _________________^\n@@ -8,10 +8,10 @@ LL | |                 x == target\n LL | |             },\n    | |_____________^\n    |\n-   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n+   = note: `-D clippy::block-in-if-condition` implied by `-D warnings`\n \n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:28:13\n+  --> $DIR/block_in_if_condition_closure.rs:27:13\n    |\n LL |           |x| {\n    |  _____________^"}]}