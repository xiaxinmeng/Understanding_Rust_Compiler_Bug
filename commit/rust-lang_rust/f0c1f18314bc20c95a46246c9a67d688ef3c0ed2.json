{"sha": "f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzFmMTgzMTRiYzIwYzk1YTQ2MjQ2YzlhNjdkNjg4ZWYzYzBlZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-30T14:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-30T14:29:45Z"}, "message": "Merge pull request #501 from RalfJung/travis\n\nrewrite cargo-miri test in Python", "tree": {"sha": "9df938c33cc8bcabef80d1169d7aad38bfa75e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df938c33cc8bcabef80d1169d7aad38bfa75e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb2GrZCRBK7hj4Ov3rIwAAdHIIABkVKyIMM0Gfrs8smDlngwFR\n732pAeBvBdLsRjFV9jhAuC1HP7J6GL8yd8QKNCv9C2hwsok1bgJawGMtoUVRHrU1\n0xdIvkAGN3Xxc9ONFg/2M1OjP7tYa4dxTtH9Vwcgair9WxxyqoTMhMia+9pX4SLq\nhOyTqXOFMeEeaKTIudsE05Jx1oYvDZgjT4Chm8ctOnzuVbl29gs37T/IdWDgxLXE\n3VSmZW6rjXVg60yjPkoLdkCPvwDPT97JKoajt9eLodaF3yaT3D2JUeAdLs2kDKxY\nUIetsnSlbxUpxLGikS+wbQAjzBCNyVHyh4q+9R2E0Dpg6bPDGBEva/B6JzL90P8=\n=AjbC\n-----END PGP SIGNATURE-----\n", "payload": "tree 9df938c33cc8bcabef80d1169d7aad38bfa75e17\nparent 9c57f2ba358e391c0c522d3023f69f2c278111ca\nparent 8fe51ca669bd257795759816bfb29e986ca3217e\nauthor Ralf Jung <post@ralfj.de> 1540909785 +0100\ncommitter GitHub <noreply@github.com> 1540909785 +0100\n\nMerge pull request #501 from RalfJung/travis\n\nrewrite cargo-miri test in Python"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "html_url": "https://github.com/rust-lang/rust/commit/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c57f2ba358e391c0c522d3023f69f2c278111ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c57f2ba358e391c0c522d3023f69f2c278111ca", "html_url": "https://github.com/rust-lang/rust/commit/9c57f2ba358e391c0c522d3023f69f2c278111ca"}, {"sha": "8fe51ca669bd257795759816bfb29e986ca3217e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe51ca669bd257795759816bfb29e986ca3217e", "html_url": "https://github.com/rust-lang/rust/commit/8fe51ca669bd257795759816bfb29e986ca3217e"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "f989c7705b19a9f597a7b7a5d3992ce0df3cd7a2", "filename": ".travis.yml", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "patch": "@@ -11,8 +11,8 @@ os:\n - osx\n \n before_script:\n-# mac os weirdness (https://github.com/travis-ci/travis-ci/issues/6307)\n-- rvm get stable\n+# macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307)\n+- if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then rvm get stable; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [ \"$TRAVIS_EVENT_TYPE\" = cron ]; then\n@@ -36,35 +36,18 @@ script:\n - |\n   # Test and install plain miri\n   cargo build --release --all-features &&\n-  #cargo test --release --all-features &&\n+  cargo test --release --all-features &&\n   cargo install --all-features --force --path .\n - |\n   # get ourselves a MIR-full libstd\n   xargo/build.sh &&\n   export MIRI_SYSROOT=~/.xargo/HOST\n-#- |\n-#  # run all tests with full mir\n-#  cargo test --release --all-features\n+- |\n+  # run all tests with full mir\n+  cargo test --release --all-features\n - |\n   # Test cargo integration\n-  cd cargo-miri-test &&\n-  # Test `cargo miri`\n-    # We ignore the exit code because we want to see the output even on failure, and\n-    # I found no way to preserve the exit code so that we can test for it later.\n-    # Variables set in this subshell in the parenthesis are not available\n-    # on the outside.\n-    # We assume that if this fails, it'll also print something about the failure on\n-    # stdout/stderr and we'll catch that.\n-    # FIXME: Disabling validation, still investigating whether there is UB here\n-    (cargo miri -q >stdout.real 2>stderr.real -- -Zmiri-disable-validation || true) &&\n-    # Print file names and contents (`cat` would just print contents)\n-    tail -n +0 stdout.real stderr.real &&\n-    # Verify output\n-    diff -u stdout.ref stdout.real &&\n-    diff -u stderr.ref stderr.real &&\n-  # test `cargo miri test`\n-    cargo miri test &&\n-  cd ..\n+  (cd cargo-miri-test && ./run-test.py)\n \n notifications:\n   email:"}, {"sha": "506de85ffcb2ce456a40c3a602f6f8187cd54cf3", "filename": "cargo-miri-test/run-test.py", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2/cargo-miri-test%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2/cargo-miri-test%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Frun-test.py?ref=f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "patch": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+'''\n+Test whether cargo-miri works properly.\n+Assumes the `MIRI_SYSROOT` env var to be set appropriately,\n+and the working directory to contain the cargo-miri-test project.\n+'''\n+\n+import sys, subprocess\n+\n+def test_cargo_miri():\n+    print(\"==> Testing `cargo miri` <==\")\n+    ## Call `cargo miri`, capture all output\n+    # FIXME: Disabling validation, still investigating whether there is UB here\n+    p = subprocess.Popen(\n+        [\"cargo\", \"miri\", \"-q\", \"--\", \"-Zmiri-disable-validation\"],\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE\n+    )\n+    (stdout, stderr) = p.communicate()\n+    stdout = stdout.decode(\"UTF-8\")\n+    stderr = stderr.decode(\"UTF-8\")\n+    # Show output\n+    print(\"=> captured stdout <=\")\n+    print(stdout, end=\"\")\n+    print(\"=> captured stderr <=\")\n+    print(stderr, end=\"\")\n+    # Test for failures\n+    if p.returncode != 0:\n+        sys.exit(1)\n+    if stdout != open('stdout.ref').read():\n+        print(\"stdout does not match reference\")\n+        sys.exit(1)\n+    if stderr != open('stderr.ref').read():\n+        print(\"stderr does not match reference\")\n+        sys.exit(1)\n+\n+def test_cargo_miri_test():\n+    print(\"==> Testing `cargo miri test` <==\")\n+    subprocess.check_call([\"cargo\", \"miri\", \"test\"])\n+\n+test_cargo_miri()\n+test_cargo_miri_test()\n+sys.exit(0)"}]}