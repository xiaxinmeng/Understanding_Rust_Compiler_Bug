{"sha": "b02172971fa658f2e6d3cdb3cbf3bf663801d656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjE3Mjk3MWZhNjU4ZjJlNmQzY2RiM2NiZjNiZjY2MzgwMWQ2NTY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-19T21:44:38Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T03:12:14Z"}, "message": "Make trans give correct types to monomorphic dtors\n\nIrritatingly, class dtors have a different type from resource\ndtors (because class dtors have a self argument), and the monomorphic\ncase wasn't reflecting that. Fixed.", "tree": {"sha": "00fac80cda795ef11ffb6af11e11cd80ed1c3cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fac80cda795ef11ffb6af11e11cd80ed1c3cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02172971fa658f2e6d3cdb3cbf3bf663801d656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02172971fa658f2e6d3cdb3cbf3bf663801d656", "html_url": "https://github.com/rust-lang/rust/commit/b02172971fa658f2e6d3cdb3cbf3bf663801d656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02172971fa658f2e6d3cdb3cbf3bf663801d656/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00171165205a1d5222563d0e2bdf7f970758b388", "url": "https://api.github.com/repos/rust-lang/rust/commits/00171165205a1d5222563d0e2bdf7f970758b388", "html_url": "https://github.com/rust-lang/rust/commit/00171165205a1d5222563d0e2bdf7f970758b388"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "47baa8aebca52546cea0f52c7a781b0941ca9807", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b02172971fa658f2e6d3cdb3cbf3bf663801d656", "patch": "@@ -754,7 +754,8 @@ fn trans_class_drop(bcx: block, v0: ValueRef, dtor_did: ast::def_id,\n       // We have to cast v0\n      let classptr = GEPi(bcx, v0, [0u, 1u]);\n      // Find and call the actual destructor\n-     let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did, substs.tps);\n+     let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did, some(class_did),\n+                                  substs.tps);\n      // The second argument is the \"self\" argument for drop\n      let params = lib::llvm::fn_ty_param_tys\n          (llvm::LLVMGetElementType\n@@ -829,7 +830,11 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n-fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n+fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n+                // Parent ID is an option because resources don't\n+                // have one. We can make this a def_id when\n+                // resources get removed.\n+                opt_id: option<ast::def_id>, substs: [ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n     if (substs.len() > 0u) {\n@@ -841,14 +846,27 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n     } else if did.crate == ast::local_crate {\n         get_item_val(ccx, did.node)\n     } else {\n-        let fty = ty::mk_fn(ccx.tcx, {purity: ast::impure_fn,\n-                                      proto: ast::proto_bare,\n-                                      inputs: [{mode: ast::expl(ast::by_ref),\n+        alt opt_id {\n+           some(parent_id) {\n+             let tcx = ccx.tcx;\n+             let name = csearch::get_symbol(ccx.sess.cstore, did);\n+             let class_ty = ty::subst_tps(tcx, substs,\n+                              ty::lookup_item_type(tcx, parent_id).ty);\n+             let llty = type_of_dtor(ccx, class_ty);\n+             get_extern_fn(ccx.externs, ccx.llmod, name, lib::llvm::CCallConv,\n+                           llty)\n+           }\n+           none {\n+             let fty = ty::mk_fn(ccx.tcx, {purity: ast::impure_fn,\n+                                       proto: ast::proto_bare,\n+                                     inputs: [{mode: ast::expl(ast::by_ref),\n                                                 ty: ty::mk_nil_ptr(ccx.tcx)}],\n                                       output: ty::mk_nil(ccx.tcx),\n                                       ret_style: ast::return_val,\n                                       constraints: []});\n-        trans_external_path(ccx, did, fty)\n+             trans_external_path(ccx, did, fty)\n+           }\n+      }\n     }\n }\n \n@@ -862,7 +880,7 @@ fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n     with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) {|bcx|\n         let valptr = GEPi(bcx, rs, [0u, 1u]);\n         // Find and call the actual destructor.\n-        let dtor_addr = get_res_dtor(ccx, did, tps);\n+        let dtor_addr = get_res_dtor(ccx, did, none, tps);\n         let args = [bcx.fcx.llretptr, null_env_ptr(bcx)];\n         // Kludge to work around the fact that we know the precise type of the\n         // value here, but the dtor expects a type that might have opaque"}, {"sha": "f0d98da5adb9c91f801c93155fb45444339b7ea8", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=b02172971fa658f2e6d3cdb3cbf3bf663801d656", "patch": "@@ -21,12 +21,14 @@ import std::map::hashmap;\n \n import ty_ctxt = middle::ty::ctxt;\n \n-type nominal_id = @{did: ast::def_id, tps: [ty::t]};\n+type nominal_id = @{did: ast::def_id, parent_id: option<ast::def_id>,\n+                    tps: [ty::t]};\n \n fn mk_nominal_id(tcx: ty::ctxt, did: ast::def_id,\n+                 parent_id: option<ast::def_id>,\n                  tps: [ty::t]) -> nominal_id {\n     let tps_norm = tps.map { |t| ty::normalize_ty(tcx, t) };\n-    @{did: did, tps: tps_norm}\n+    @{did: did, parent_id: parent_id, tps: tps_norm}\n }\n \n fn hash_nominal_id(&&ri: nominal_id) -> uint {\n@@ -233,7 +235,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n           tk_enum { [s_variant_enum_t(ccx.tcx)] }\n           tk_newtype | tk_complex {\n             let mut s = [shape_enum], id;\n-            let nom_id = mk_nominal_id(ccx.tcx, did, substs.tps);\n+            let nom_id = mk_nominal_id(ccx.tcx, did, none, substs.tps);\n             alt ccx.shape_cx.tag_id_to_index.find(nom_id) {\n               none {\n                 id = ccx.shape_cx.next_tag_id;\n@@ -335,7 +337,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n           else { [shape_struct] };\n         let mut sub = [];\n         option::iter(m_dtor_did) {|dtor_did|\n-          let ri = @{did: dtor_did, tps: tps};\n+          let ri = @{did: dtor_did, parent_id: some(did), tps: tps};\n           let id = interner::intern(ccx.shape_cx.resources, ri);\n           add_u16(s, id as u16);\n \n@@ -362,7 +364,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n         for substs.tps.each() {|t| assert !ty::type_has_params(t); }\n         let subt = ty::subst(ccx.tcx, substs, raw_subt);\n         let tps = substs.tps;\n-        let ri = @{did: did, tps: tps};\n+        let ri = @{did: did, parent_id: none, tps: tps};\n         let id = interner::intern(ccx.shape_cx.resources, ri);\n \n         let mut s = [shape_res];\n@@ -597,7 +599,8 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     for uint::range(0u, len) {|i|\n         let ri = interner::get(ccx.shape_cx.resources, i);\n         for ri.tps.each() {|s| assert !ty::type_has_params(s); }\n-        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n+        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.parent_id,\n+                                            ri.tps)];\n     }\n     ret mk_global(ccx, \"resource_shapes\", C_struct(dtors), true);\n }"}, {"sha": "dc8dc1b92cf362b939a1ceab64bb4f350c55d46c", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02172971fa658f2e6d3cdb3cbf3bf663801d656/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=b02172971fa658f2e6d3cdb3cbf3bf663801d656", "patch": "@@ -8,6 +8,7 @@ import std::map::hashmap;\n import ty::*;\n \n export type_of;\n+export type_of_dtor;\n export type_of_explicit_args;\n export type_of_fn_from_ty;\n export type_of_fn;\n@@ -251,3 +252,9 @@ fn llvm_type_name(cx: @crate_ctxt, t: ty::t) -> str {\n     );\n }\n \n+fn type_of_dtor(ccx: @crate_ctxt, self_ty: ty::t) -> TypeRef {\n+    T_fn([T_ptr(type_of(ccx, ty::mk_nil(ccx.tcx))),\n+          T_ptr(type_of(ccx, self_ty))],\n+         llvm::LLVMVoidType())\n+}\n+"}]}