{"sha": "f69b07144a151f46aaee1b6230ba4160e9394562", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWIwNzE0NGExNTFmNDZhYWVlMWI2MjMwYmE0MTYwZTkzOTQ1NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-20T06:18:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-20T06:18:52Z"}, "message": "Auto merge of #62710 - estebank:bad-named-args, r=petrochenkov\n\nSpecific error for positional args after named args in `format!()`\n\nWhen writing positional arguments after named arguments in the\n`format!()` and `println!()` macros, provide a targeted diagnostic.\n\nFollow up to https://github.com/rust-lang/rust/pull/57522/files#r247278885", "tree": {"sha": "02ca15cf898d938e58df4cb0a8301dd42dd17ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ca15cf898d938e58df4cb0a8301dd42dd17ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69b07144a151f46aaee1b6230ba4160e9394562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69b07144a151f46aaee1b6230ba4160e9394562", "html_url": "https://github.com/rust-lang/rust/commit/f69b07144a151f46aaee1b6230ba4160e9394562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69b07144a151f46aaee1b6230ba4160e9394562/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d22273283dce210b26362aa0dcc3fc10bf7e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d22273283dce210b26362aa0dcc3fc10bf7e81", "html_url": "https://github.com/rust-lang/rust/commit/e9d22273283dce210b26362aa0dcc3fc10bf7e81"}, {"sha": "33ec1823d758c08fd7f2eaddabe083dfb3c4b26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ec1823d758c08fd7f2eaddabe083dfb3c4b26f", "html_url": "https://github.com/rust-lang/rust/commit/33ec1823d758c08fd7f2eaddabe083dfb3c4b26f"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "2d296147a1ff28ccfc663414be070942c10d333a", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=f69b07144a151f46aaee1b6230ba4160e9394562", "patch": "@@ -146,16 +146,13 @@ fn parse_args<'a>(\n         if p.token == token::Eof {\n             break;\n         } // accept trailing commas\n-        if named || (p.token.is_ident() && p.look_ahead(1, |t| *t == token::Eq)) {\n+        if p.token.is_ident() && p.look_ahead(1, |t| *t == token::Eq) {\n             named = true;\n             let name = if let token::Ident(name, _) = p.token.kind {\n                 p.bump();\n                 name\n             } else {\n-                return Err(ecx.struct_span_err(\n-                    p.token.span,\n-                    \"expected ident, positional arguments cannot follow named arguments\",\n-                ));\n+                unreachable!();\n             };\n \n             p.expect(&token::Eq)?;\n@@ -176,6 +173,17 @@ fn parse_args<'a>(\n             args.push(e);\n         } else {\n             let e = p.parse_expr()?;\n+            if named {\n+                let mut err = ecx.struct_span_err(\n+                    e.span,\n+                    \"positional arguments cannot follow named arguments\",\n+                );\n+                err.span_label(e.span, \"positional arguments must be before named arguments\");\n+                for (_, pos) in &names {\n+                    err.span_label(args[*pos].span, \"named argument\");\n+                }\n+                err.emit();\n+            }\n             args.push(e);\n         }\n     }\n@@ -721,13 +729,14 @@ pub fn expand_format_args_nl<'cx>(\n \n /// Take the various parts of `format_args!(efmt, args..., name=names...)`\n /// and construct the appropriate formatting expression.\n-pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt<'_>,\n-                                    sp: Span,\n-                                    efmt: P<ast::Expr>,\n-                                    args: Vec<P<ast::Expr>>,\n-                                    names: FxHashMap<Symbol, usize>,\n-                                    append_newline: bool)\n-                                    -> P<ast::Expr> {\n+pub fn expand_preparsed_format_args(\n+    ecx: &mut ExtCtxt<'_>,\n+    sp: Span,\n+    efmt: P<ast::Expr>,\n+    args: Vec<P<ast::Expr>>,\n+    names: FxHashMap<Symbol, usize>,\n+    append_newline: bool,\n+) -> P<ast::Expr> {\n     // NOTE: this verbose way of initializing `Vec<Vec<ArgumentType>>` is because\n     // `ArgumentType` does not derive `Clone`.\n     let arg_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n@@ -906,6 +915,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt<'_>,\n         .map(|span| fmt.span.from_inner(*span))\n         .collect();\n \n+    let named_pos: FxHashSet<usize> = names.values().cloned().collect();\n+\n     let mut cx = Context {\n         ecx,\n         args,\n@@ -971,14 +982,12 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt<'_>,\n     }\n \n     // Make sure that all arguments were used and all arguments have types.\n-    let num_pos_args = cx.args.len() - cx.names.len();\n-\n     let errs = cx.arg_types\n                  .iter()\n                  .enumerate()\n                  .filter(|(i, ty)| ty.is_empty() && !cx.count_positions.contains_key(&i))\n                  .map(|(i, _)| {\n-                    let msg = if i >= num_pos_args {\n+                    let msg = if named_pos.contains(&i) {\n                         // named argument\n                         \"named argument never used\"\n                     } else {"}, {"sha": "0ebe1fa2dff929f6735ba577bf7738efabbf5a0a", "filename": "src/test/ui/if/ifmt-bad-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs?ref=f69b07144a151f46aaee1b6230ba4160e9394562", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     format!(\"{} {}\", 1, 2, foo=1, bar=2);  //~ ERROR: multiple unused formatting arguments\n \n     format!(\"{foo}\", foo=1, foo=2);  //~ ERROR: duplicate argument\n-    format!(\"\", foo=1, 2);           //~ ERROR: positional arguments cannot follow\n+    format!(\"{foo} {} {}\", foo=1, 2);   //~ ERROR: positional arguments cannot follow\n \n     // bad named arguments, #35082\n "}, {"sha": "835b5b6592b786485b42e529193aea677bbe3424", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=f69b07144a151f46aaee1b6230ba4160e9394562", "patch": "@@ -146,11 +146,13 @@ note: previously here\n LL |     format!(\"{foo}\", foo=1, foo=2);\n    |                          ^\n \n-error: expected ident, positional arguments cannot follow named arguments\n-  --> $DIR/ifmt-bad-arg.rs:41:24\n+error: positional arguments cannot follow named arguments\n+  --> $DIR/ifmt-bad-arg.rs:41:35\n    |\n-LL |     format!(\"\", foo=1, 2);\n-   |                        ^\n+LL |     format!(\"{foo} {} {}\", foo=1, 2);\n+   |                                -  ^ positional arguments must be before named arguments\n+   |                                |\n+   |                                named argument\n \n error: there is no argument named `valueb`\n   --> $DIR/ifmt-bad-arg.rs:45:23"}, {"sha": "ffa7a2817ff36fcbc78174329aac737ecab532d6", "filename": "src/test/ui/macros/format-parse-errors.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.rs?ref=f69b07144a151f46aaee1b6230ba4160e9394562", "patch": "@@ -1,9 +1,15 @@\n fn main() {\n+    let foo = \"\";\n+    let bar = \"\";\n     format!(); //~ ERROR requires at least a format string argument\n     format!(struct); //~ ERROR expected expression\n     format!(\"s\", name =); //~ ERROR expected expression\n-    format!(\"s\", foo = foo, bar); //~ ERROR expected `=`\n-    format!(\"s\", foo = struct); //~ ERROR expected expression\n+    format!(\n+        \"s {foo} {} {}\",\n+        foo = foo,\n+        bar, //~ ERROR positional arguments cannot follow named arguments\n+    );\n+    format!(\"s {foo}\", foo = struct); //~ ERROR expected expression\n     format!(\"s\", struct); //~ ERROR expected expression\n \n     // This error should come after parsing errors to ensure they are non-fatal."}, {"sha": "906738d738232254df52966407baeee33a9d2f29", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69b07144a151f46aaee1b6230ba4160e9394562/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=f69b07144a151f46aaee1b6230ba4160e9394562", "patch": "@@ -1,43 +1,45 @@\n error: requires at least a format string argument\n-  --> $DIR/format-parse-errors.rs:2:5\n+  --> $DIR/format-parse-errors.rs:4:5\n    |\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/format-parse-errors.rs:3:13\n+  --> $DIR/format-parse-errors.rs:5:13\n    |\n LL |     format!(struct);\n    |             ^^^^^^ expected expression\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/format-parse-errors.rs:4:24\n+  --> $DIR/format-parse-errors.rs:6:24\n    |\n LL |     format!(\"s\", name =);\n    |                        ^ expected expression\n \n-error: expected `=`, found end of macro arguments\n-  --> $DIR/format-parse-errors.rs:5:32\n+error: positional arguments cannot follow named arguments\n+  --> $DIR/format-parse-errors.rs:10:9\n    |\n-LL |     format!(\"s\", foo = foo, bar);\n-   |                                ^ expected `=`\n+LL |         foo = foo,\n+   |               --- named argument\n+LL |         bar,\n+   |         ^^^ positional arguments must be before named arguments\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/format-parse-errors.rs:6:24\n+  --> $DIR/format-parse-errors.rs:12:30\n    |\n-LL |     format!(\"s\", foo = struct);\n-   |                        ^^^^^^ expected expression\n+LL |     format!(\"s {foo}\", foo = struct);\n+   |                              ^^^^^^ expected expression\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/format-parse-errors.rs:7:18\n+  --> $DIR/format-parse-errors.rs:13:18\n    |\n LL |     format!(\"s\", struct);\n    |                  ^^^^^^ expected expression\n \n error: format argument must be a string literal\n-  --> $DIR/format-parse-errors.rs:10:13\n+  --> $DIR/format-parse-errors.rs:16:13\n    |\n LL |     format!(123);\n    |             ^^^"}]}