{"sha": "45c10db41f2af5919621ff69f5dc090cc917c1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzEwZGI0MWYyYWY1OTE5NjIxZmY2OWY1ZGMwOTBjYzkxN2MxZDM=", "commit": {"author": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T23:08:53Z"}, "committer": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T23:08:53Z"}, "message": "Clarified and simplified algorithm for increasing size of buffer in\nread_to_end()", "tree": {"sha": "f200f094811cb05d82cd2d218c62bb41dd45aa85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f200f094811cb05d82cd2d218c62bb41dd45aa85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c10db41f2af5919621ff69f5dc090cc917c1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c10db41f2af5919621ff69f5dc090cc917c1d3", "html_url": "https://github.com/rust-lang/rust/commit/45c10db41f2af5919621ff69f5dc090cc917c1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c10db41f2af5919621ff69f5dc090cc917c1d3/comments", "author": null, "committer": null, "parents": [{"sha": "92f3d9a6b46a116a48b0dd35b66c8f66786296d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f3d9a6b46a116a48b0dd35b66c8f66786296d6", "html_url": "https://github.com/rust-lang/rust/commit/92f3d9a6b46a116a48b0dd35b66c8f66786296d6"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "3de9a06892627bd294587adafe73f9063dec2bd6", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45c10db41f2af5919621ff69f5dc090cc917c1d3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c10db41f2af5919621ff69f5dc090cc917c1d3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=45c10db41f2af5919621ff69f5dc090cc917c1d3", "patch": "@@ -101,15 +101,14 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n     let mut len = start_len;\n-    let mut cap_bump = 16;\n+    let min_cap_bump = 16;\n     let ret;\n     loop {\n         if len == buf.len() {\n             if buf.capacity() == buf.len() {\n-                if cap_bump < DEFAULT_BUF_SIZE {\n-                    cap_bump *= 2;\n-                }\n-                buf.reserve(cap_bump);\n+                // reserve() rounds up our request to the nearest power of two, so after the first\n+                // time the capacity is exceeded, we double our capacity at each call to reserve. \n+                buf.reserve(min_cap_bump);\n             }\n             let new_area = buf.capacity() - buf.len();\n             buf.extend(iter::repeat(0).take(new_area));"}]}