{"sha": "125e7124e7194bab639d525ec4ac2fa43633fb38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNWU3MTI0ZTcxOTRiYWI2MzlkNTI1ZWM0YWMyZmE0MzYzM2ZiMzg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:47:54Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:55:12Z"}, "message": "Use Indent::to_string_with_newline to avoid unnecessary allocation", "tree": {"sha": "e56ad8ee779eb298f5fc509f7c30ac67e3152305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56ad8ee779eb298f5fc509f7c30ac67e3152305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125e7124e7194bab639d525ec4ac2fa43633fb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125e7124e7194bab639d525ec4ac2fa43633fb38", "html_url": "https://github.com/rust-lang/rust/commit/125e7124e7194bab639d525ec4ac2fa43633fb38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125e7124e7194bab639d525ec4ac2fa43633fb38/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "html_url": "https://github.com/rust-lang/rust/commit/9d47e7370e1be5e3d4e790a6c1d95b51acb281af"}], "stats": {"total": 226, "additions": 109, "deletions": 117}, "files": [{"sha": "87100c7be419339b69b219bdfed7c193dddf628b", "filename": "rustfmt-core/src/chains.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fchains.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -67,8 +67,10 @@ use shape::Shape;\n use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp,\n             trimmed_last_line_width, wrap_str};\n \n+use std::borrow::Cow;\n use std::cmp::min;\n use std::iter;\n+\n use syntax::{ast, ptr};\n use syntax::codemap::Span;\n \n@@ -246,13 +248,13 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     let connector = if fits_single_line && !parent_rewrite_contains_newline {\n         // Yay, we can put everything on one line.\n-        String::new()\n+        Cow::from(\"\")\n     } else {\n         // Use new lines.\n         if context.force_one_line_chain {\n             return None;\n         }\n-        format!(\"\\n{}\", nested_shape.indent.to_string(context.config))\n+        nested_shape.indent.to_string_with_newline(context.config)\n     };\n \n     let first_connector = if is_small_parent || fits_single_line\n@@ -261,7 +263,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     {\n         \"\"\n     } else {\n-        connector.as_str()\n+        &connector\n     };\n \n     let result = if is_small_parent && rewrites.len() > 1 {"}, {"sha": "8b148ccfc376ace2876d66af7e14bc4b0555c225", "filename": "rustfmt-core/src/comment.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -319,7 +319,7 @@ fn rewrite_comment_inner(\n         .width\n         .checked_sub(closer.len() + opener.len())\n         .unwrap_or(1);\n-    let indent_str = shape.indent.to_string(config);\n+    let indent_str = shape.indent.to_string_with_newline(config);\n     let fmt_indent = shape.indent + (opener.len() - line_start.len());\n     let mut fmt = StringFormat {\n         opener: \"\",\n@@ -360,7 +360,7 @@ fn rewrite_comment_inner(\n     let mut code_block_buffer = String::with_capacity(128);\n     let mut is_prev_line_multi_line = false;\n     let mut inside_code_block = false;\n-    let comment_line_separator = format!(\"\\n{}{}\", indent_str, line_start);\n+    let comment_line_separator = format!(\"{}{}\", indent_str, line_start);\n     let join_code_block_with_comment_line_separator = |s: &str| {\n         let mut result = String::with_capacity(s.len() + 128);\n         let mut iter = s.lines().peekable();\n@@ -408,7 +408,6 @@ fn rewrite_comment_inner(\n             } else if is_prev_line_multi_line && !line.is_empty() {\n                 result.push(' ')\n             } else if is_last && !closer.is_empty() && line.is_empty() {\n-                result.push('\\n');\n                 result.push_str(&indent_str);\n             } else {\n                 result.push_str(&comment_line_separator);\n@@ -520,9 +519,9 @@ pub fn recover_missing_comment_in_span(\n         let force_new_line_before_comment =\n             missing_snippet[..pos].contains('\\n') || total_width > context.config.max_width();\n         let sep = if force_new_line_before_comment {\n-            format!(\"\\n{}\", shape.indent.to_string(context.config))\n+            shape.indent.to_string_with_newline(context.config)\n         } else {\n-            String::from(\" \")\n+            Cow::from(\" \")\n         };\n         Some(format!(\"{}{}\", sep, missing_comment))\n     }\n@@ -705,12 +704,6 @@ impl RichChar for (usize, char) {\n     }\n }\n \n-impl RichChar for (char, usize) {\n-    fn get_char(&self) -> char {\n-        self.0\n-    }\n-}\n-\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum CharClassesStatus {\n     Normal,"}, {"sha": "1ed85619235b3db33dde0b4f5f72e2f0504716eb", "filename": "rustfmt-core/src/expr.rs", "status": "modified", "additions": 53, "deletions": 44, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fexpr.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -392,10 +392,10 @@ where\n         rhs_shape = rhs_shape.offset_left(infix.len())?;\n     }\n     let rhs_result = rhs.rewrite(context, rhs_shape)?;\n-    let indent_str = rhs_shape.indent.to_string(context.config);\n+    let indent_str = rhs_shape.indent.to_string_with_newline(context.config);\n     let infix_with_sep = match separator_place {\n-        SeparatorPlace::Back => format!(\"{}\\n{}\", infix, indent_str),\n-        SeparatorPlace::Front => format!(\"\\n{}{}\", indent_str, infix),\n+        SeparatorPlace::Back => format!(\"{}{}\", infix, indent_str),\n+        SeparatorPlace::Front => format!(\"{}{}\", indent_str, infix),\n     };\n     Some(format!(\n         \"{}{}{}{}\",\n@@ -489,10 +489,10 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         }\n     } else {\n         format!(\n-            \"[\\n{}{}\\n{}]\",\n-            nested_shape.indent.to_string(context.config),\n+            \"[{}{}{}]\",\n+            nested_shape.indent.to_string_with_newline(context.config),\n             list_str,\n-            shape.block().indent.to_string(context.config)\n+            shape.block().indent.to_string_with_newline(context.config)\n         )\n     };\n \n@@ -1065,7 +1065,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n \n-        let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n+        let alt_block_sep = &shape.indent.to_string_with_newline(context.config);\n         let (cond_str, used_width) = self.rewrite_cond(context, shape, &alt_block_sep)?;\n         // If `used_width` is 0, it indicates that whole control flow is written in a single line.\n         if used_width == 0 {\n@@ -1185,9 +1185,9 @@ fn rewrite_label(opt_label: Option<ast::Label>) -> Cow<'static, str> {\n fn extract_comment(span: Span, context: &RewriteContext, shape: Shape) -> Option<String> {\n     match rewrite_missing_comment(span, shape, context) {\n         Some(ref comment) if !comment.is_empty() => Some(format!(\n-            \"\\n{indent}{}\\n{indent}\",\n+            \"{indent}{}{indent}\",\n             comment,\n-            indent = shape.indent.to_string(context.config)\n+            indent = shape.indent.to_string_with_newline(context.config)\n         )),\n         _ => None,\n     }\n@@ -1271,7 +1271,7 @@ fn rewrite_match(\n         IndentStyle::Block => cond_shape.offset_left(6)?,\n     };\n     let cond_str = cond.rewrite(context, cond_shape)?;\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n+    let alt_block_sep = &shape.indent.to_string_with_newline(context.config);\n     let block_sep = match context.config.control_brace_style() {\n         ControlBraceStyle::AlwaysNextLine => &alt_block_sep,\n         _ if last_line_extendable(&cond_str) => \" \",\n@@ -1562,8 +1562,7 @@ fn rewrite_match_body(\n     };\n \n     let comma = arm_comma(context.config, body, is_last);\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n-    let alt_block_sep = alt_block_sep.as_str();\n+    let alt_block_sep = &shape.indent.to_string_with_newline(context.config);\n \n     let combine_orig_body = |body_str: &str| {\n         let block_sep = match context.config.control_brace_style() {\n@@ -1583,31 +1582,31 @@ fn rewrite_match_body(\n     let combine_next_line_body = |body_str: &str| {\n         if is_block {\n             return Some(format!(\n-                \"{} =>\\n{}{}\",\n+                \"{} =>{}{}\",\n                 pats_str,\n-                next_line_indent.to_string(context.config),\n+                next_line_indent.to_string_with_newline(context.config),\n                 body_str\n             ));\n         }\n \n-        let indent_str = shape.indent.to_string(context.config);\n-        let nested_indent_str = next_line_indent.to_string(context.config);\n+        let indent_str = shape.indent.to_string_with_newline(context.config);\n+        let nested_indent_str = next_line_indent.to_string_with_newline(context.config);\n         let (body_prefix, body_suffix) = if context.config.match_arm_blocks() {\n             let comma = if context.config.match_block_trailing_comma() {\n                 \",\"\n             } else {\n                 \"\"\n             };\n-            (\"{\", format!(\"\\n{}}}{}\", indent_str, comma))\n+            (\"{\", format!(\"{}}}{}\", indent_str, comma))\n         } else {\n             (\"\", String::from(\",\"))\n         };\n \n         let block_sep = match context.config.control_brace_style() {\n-            ControlBraceStyle::AlwaysNextLine => format!(\"{}{}\\n\", alt_block_sep, body_prefix),\n-            _ if body_prefix.is_empty() => \"\\n\".to_owned(),\n-            _ if forbid_same_line => format!(\"{}{}\\n\", alt_block_sep, body_prefix),\n-            _ => format!(\" {}\\n\", body_prefix),\n+            ControlBraceStyle::AlwaysNextLine => format!(\"{}{}\", alt_block_sep, body_prefix),\n+            _ if body_prefix.is_empty() => \"\".to_owned(),\n+            _ if forbid_same_line => format!(\"{}{}\", alt_block_sep, body_prefix),\n+            _ => format!(\" {}\", body_prefix),\n         } + &nested_indent_str;\n \n         Some(format!(\n@@ -1697,8 +1696,8 @@ fn rewrite_guard(\n         if let Some(cond_shape) = cond_shape {\n             if let Some(cond_str) = guard.rewrite(context, cond_shape) {\n                 return Some(format!(\n-                    \"\\n{}if {}\",\n-                    cond_shape.indent.to_string(context.config),\n+                    \"{}if {}\",\n+                    cond_shape.indent.to_string_with_newline(context.config),\n                     cond_str\n                 ));\n             }\n@@ -1749,9 +1748,9 @@ fn rewrite_pat_expr(\n     let nested_shape = shape\n         .block_indent(context.config.tab_spaces())\n         .with_max_width(context.config);\n-    let nested_indent_str = nested_shape.indent.to_string(context.config);\n+    let nested_indent_str = nested_shape.indent.to_string_with_newline(context.config);\n     expr.rewrite(context, nested_shape)\n-        .map(|expr_rw| format!(\"\\n{}{}\", nested_indent_str, expr_rw))\n+        .map(|expr_rw| format!(\"{}{}\", nested_indent_str, expr_rw))\n }\n \n fn can_extend_match_arm_body(body: &ast::Expr) -> bool {\n@@ -2322,18 +2321,28 @@ pub fn wrap_args_with_parens(\n         || (context.inside_macro && !args_str.contains('\\n')\n             && args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n     {\n+        let mut result = String::with_capacity(args_str.len() + 4);\n         if context.config.spaces_within_parens_and_brackets() && !args_str.is_empty() {\n-            format!(\"( {} )\", args_str)\n+            result.push_str(\"( \");\n+            result.push_str(args_str);\n+            result.push_str(\" )\");\n         } else {\n-            format!(\"({})\", args_str)\n+            result.push_str(\"(\");\n+            result.push_str(args_str);\n+            result.push_str(\")\");\n         }\n+        result\n     } else {\n-        format!(\n-            \"(\\n{}{}\\n{})\",\n-            nested_shape.indent.to_string(context.config),\n-            args_str,\n-            shape.block().indent.to_string(context.config)\n-        )\n+        let nested_indent_str = nested_shape.indent.to_string_with_newline(context.config);\n+        let indent_str = shape.block().indent.to_string_with_newline(context.config);\n+        let mut result =\n+            String::with_capacity(args_str.len() + 2 + indent_str.len() + nested_indent_str.len());\n+        result.push_str(\"(\");\n+        result.push_str(&nested_indent_str);\n+        result.push_str(args_str);\n+        result.push_str(&indent_str);\n+        result.push_str(\")\");\n+        result\n     }\n }\n \n@@ -2425,17 +2434,17 @@ fn rewrite_index(\n     let new_index_rw = index.rewrite(context, index_shape);\n     match (orig_index_rw, new_index_rw) {\n         (_, Some(ref new_index_str)) if !new_index_str.contains('\\n') => Some(format!(\n-            \"{}\\n{}{}{}{}\",\n+            \"{}{}{}{}{}\",\n             expr_str,\n-            indent.to_string(context.config),\n+            indent.to_string_with_newline(context.config),\n             lbr,\n             new_index_str,\n             rbr\n         )),\n         (None, Some(ref new_index_str)) => Some(format!(\n-            \"{}\\n{}{}{}{}\",\n+            \"{}{}{}{}{}\",\n             expr_str,\n-            indent.to_string(context.config),\n+            indent.to_string_with_newline(context.config),\n             lbr,\n             new_index_str,\n             rbr\n@@ -2562,10 +2571,10 @@ pub fn wrap_struct_field(\n             || fields_str.len() > one_line_width)\n     {\n         format!(\n-            \"\\n{}{}\\n{}\",\n-            nested_shape.indent.to_string(context.config),\n+            \"{}{}{}\",\n+            nested_shape.indent.to_string_with_newline(context.config),\n             fields_str,\n-            shape.indent.to_string(context.config)\n+            shape.indent.to_string_with_newline(context.config)\n         )\n     } else {\n         // One liner or visual indent.\n@@ -2588,7 +2597,7 @@ pub fn rewrite_field(\n     }\n     let mut attrs_str = field.attrs.rewrite(context, shape)?;\n     if !attrs_str.is_empty() {\n-        attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n+        attrs_str.push_str(&shape.indent.to_string_with_newline(context.config));\n     };\n     let name = field.ident.node.to_string();\n     if field.is_shorthand {\n@@ -2847,7 +2856,7 @@ pub fn choose_rhs<R: Rewrite>(\n                 Shape::indented(shape.indent.block_indent(context.config), context.config)\n                     .sub_width(shape.rhs_overhead(context.config))?;\n             let new_rhs = expr.rewrite(context, new_shape);\n-            let new_indent_str = &new_shape.indent.to_string(context.config);\n+            let new_indent_str = &new_shape.indent.to_string_with_newline(context.config);\n \n             match (orig_rhs, new_rhs) {\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n@@ -2857,9 +2866,9 @@ pub fn choose_rhs<R: Rewrite>(\n                     Some(format!(\" {}\", orig_rhs))\n                 }\n                 (Some(ref orig_rhs), Some(ref new_rhs)) if prefer_next_line(orig_rhs, new_rhs) => {\n-                    Some(format!(\"\\n{}{}\", new_indent_str, new_rhs))\n+                    Some(format!(\"{}{}\", new_indent_str, new_rhs))\n                 }\n-                (None, Some(ref new_rhs)) => Some(format!(\"\\n{}{}\", new_indent_str, new_rhs)),\n+                (None, Some(ref new_rhs)) => Some(format!(\"{}{}\", new_indent_str, new_rhs)),\n                 (None, None) => None,\n                 (Some(ref orig_rhs), _) => Some(format!(\" {}\", orig_rhs)),\n             }"}, {"sha": "add3cdc0d79f6256a6a49c314541208d06c808f2", "filename": "rustfmt-core/src/items.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fitems.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -318,8 +318,7 @@ impl<'a> FmtVisitor<'a> {\n         // start of the body, but we need more spans from the compiler to solve\n         // this.\n         if newline_brace {\n-            result.push('\\n');\n-            result.push_str(&indent.to_string(self.config));\n+            result.push_str(&indent.to_string_with_newline(self.config));\n         } else {\n             result.push(' ');\n         }\n@@ -471,8 +470,7 @@ impl<'a> FmtVisitor<'a> {\n             return None;\n         }\n         let mut result = String::with_capacity(1024);\n-        result.push('\\n');\n-        let indentation = self.block_indent.to_string(self.config);\n+        let indentation = self.block_indent.to_string_with_newline(self.config);\n         result.push_str(&indentation);\n \n         let itemize_list_with = |one_line_width: usize| {\n@@ -571,8 +569,7 @@ pub fn format_impl(\n     if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.node {\n         let mut result = String::with_capacity(128);\n         let ref_and_type = format_impl_ref_and_type(context, item, offset)?;\n-        let indent_str = offset.to_string(context.config);\n-        let sep = format!(\"\\n{}\", &indent_str);\n+        let sep = offset.to_string_with_newline(context.config);\n         result.push_str(&ref_and_type);\n \n         let where_budget = if result.contains('\\n') {\n@@ -623,10 +620,9 @@ pub fn format_impl(\n         }\n \n         if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') {\n-            result.push('\\n');\n             let width = offset.block_indent + context.config.tab_spaces() - 1;\n             let where_indent = Indent::new(0, width);\n-            result.push_str(&where_indent.to_string(context.config));\n+            result.push_str(&where_indent.to_string_with_newline(context.config));\n         }\n         result.push_str(&where_clause_str);\n \n@@ -662,13 +658,11 @@ pub fn format_impl(\n \n             visitor.format_missing(item.span.hi() - BytePos(1));\n \n-            let inner_indent_str = visitor.block_indent.to_string(context.config);\n-            let outer_indent_str = offset.block_only().to_string(context.config);\n+            let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n+            let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-            result.push('\\n');\n             result.push_str(&inner_indent_str);\n             result.push_str(visitor.buffer.to_string().trim());\n-            result.push('\\n');\n             result.push_str(&outer_indent_str);\n         }\n \n@@ -957,9 +951,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         if offset.width() + last_line_width(&result) + trait_bound_str.len()\n             > context.config.comment_width()\n         {\n-            result.push('\\n');\n             let trait_indent = offset.block_only().block_indent(context.config);\n-            result.push_str(&trait_indent.to_string(context.config));\n+            result.push_str(&trait_indent.to_string_with_newline(context.config));\n         }\n         result.push_str(&trait_bound_str);\n \n@@ -995,10 +988,9 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             && last_line_width(&result) + where_clause_str.len() + offset.width()\n                 > context.config.comment_width()\n         {\n-            result.push('\\n');\n             let width = offset.block_indent + context.config.tab_spaces() - 1;\n             let where_indent = Indent::new(0, width);\n-            result.push_str(&where_indent.to_string(context.config));\n+            result.push_str(&where_indent.to_string_with_newline(context.config));\n         }\n         result.push_str(&where_clause_str);\n \n@@ -1026,20 +1018,17 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         match context.config.brace_style() {\n             _ if last_line_contains_single_line_comment(&result) => {\n-                result.push('\\n');\n-                result.push_str(&offset.to_string(context.config));\n+                result.push_str(&offset.to_string_with_newline(context.config));\n             }\n             BraceStyle::AlwaysNextLine => {\n-                result.push('\\n');\n-                result.push_str(&offset.to_string(context.config));\n+                result.push_str(&offset.to_string_with_newline(context.config));\n             }\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n                 if !where_clause_str.is_empty()\n                     && (!trait_items.is_empty() || result.contains('\\n'))\n                 {\n-                    result.push('\\n');\n-                    result.push_str(&offset.to_string(context.config));\n+                    result.push_str(&offset.to_string_with_newline(context.config));\n                 } else {\n                     result.push(' ');\n                 }\n@@ -1061,13 +1050,11 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n             visitor.format_missing(item.span.hi() - BytePos(1));\n \n-            let inner_indent_str = visitor.block_indent.to_string(context.config);\n-            let outer_indent_str = offset.block_only().to_string(context.config);\n+            let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n+            let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-            result.push('\\n');\n             result.push_str(&inner_indent_str);\n             result.push_str(visitor.buffer.to_string().trim());\n-            result.push('\\n');\n             result.push_str(&outer_indent_str);\n         } else if result.contains('\\n') {\n             result.push('\\n');\n@@ -1395,7 +1382,10 @@ pub fn rewrite_type_alias(\n     if where_clause_str.is_empty() {\n         result.push_str(\" =\");\n     } else {\n-        result.push_str(&format!(\"\\n{}=\", indent.to_string(context.config)));\n+        result.push_str(&format!(\n+            \"{}=\",\n+            indent.to_string_with_newline(context.config)\n+        ));\n     }\n \n     // 1 = \";\"\n@@ -1589,7 +1579,11 @@ fn rewrite_static(\n             let nested_indent = offset.block_indent(context.config);\n             let nested_shape = Shape::indented(nested_indent, context.config);\n             let ty_str = static_parts.ty.rewrite(context, nested_shape)?;\n-            format!(\"\\n{}{}\", nested_indent.to_string(context.config), ty_str)\n+            format!(\n+                \"{}{}\",\n+                nested_indent.to_string_with_newline(context.config),\n+                ty_str\n+            )\n         }\n     };\n \n@@ -1866,8 +1860,7 @@ fn rewrite_fn_base(\n         } else {\n             result.push_str(\"(\");\n             if context.config.indent_style() == IndentStyle::Visual {\n-                result.push('\\n');\n-                result.push_str(&arg_indent.to_string(context.config));\n+                result.push_str(&arg_indent.to_string_with_newline(context.config));\n             }\n         }\n     } else {\n@@ -1923,11 +1916,9 @@ fn rewrite_fn_base(\n     let mut args_last_line_contains_comment = false;\n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n-        result.push('\\n');\n-        result.push_str(&arg_indent.to_string(context.config));\n+        result.push_str(&arg_indent.to_string_with_newline(context.config));\n         result.push_str(&arg_str);\n-        result.push('\\n');\n-        result.push_str(&indent.to_string(context.config));\n+        result.push_str(&indent.to_string_with_newline(context.config));\n         result.push(')');\n     } else {\n         result.push_str(&arg_str);\n@@ -1948,8 +1939,7 @@ fn rewrite_fn_base(\n             .map_or(false, |last_line| last_line.contains(\"//\"))\n         {\n             args_last_line_contains_comment = true;\n-            result.push('\\n');\n-            result.push_str(&arg_indent.to_string(context.config));\n+            result.push_str(&arg_indent.to_string_with_newline(context.config));\n         }\n         result.push(')');\n     }\n@@ -1988,8 +1978,7 @@ fn rewrite_fn_base(\n                 arg_indent\n             };\n \n-            result.push('\\n');\n-            result.push_str(&indent.to_string(context.config));\n+            result.push_str(&indent.to_string_with_newline(context.config));\n             indent\n         } else {\n             result.push(' ');\n@@ -2488,9 +2477,9 @@ fn rewrite_where_clause_rfc_style(\n         rewrite_comments_before_after_where(context, span_before, span_after, shape)?;\n \n     let starting_newline = if where_clause_option.snuggle && comment_before.is_empty() {\n-        \" \".to_owned()\n+        Cow::from(\" \")\n     } else {\n-        \"\\n\".to_owned() + &block_shape.indent.to_string(context.config)\n+        block_shape.indent.to_string_with_newline(context.config)\n     };\n \n     let clause_shape = block_shape.block_left(context.config.tab_spaces())?;\n@@ -2544,9 +2533,9 @@ fn rewrite_where_clause_rfc_style(\n \n     let comment_separator = |comment: &str, shape: Shape| {\n         if comment.is_empty() {\n-            String::new()\n+            Cow::from(\"\")\n         } else {\n-            format!(\"\\n{}\", shape.indent.to_string(context.config))\n+            shape.indent.to_string_with_newline(context.config)\n         }\n     };\n     let newline_before_where = comment_separator(&comment_before, shape);\n@@ -2557,9 +2546,9 @@ fn rewrite_where_clause_rfc_style(\n         && comment_after.is_empty() && !preds_str.contains('\\n')\n         && 6 + preds_str.len() <= shape.width || where_single_line\n     {\n-        String::from(\" \")\n+        Cow::from(\" \")\n     } else {\n-        format!(\"\\n{}\", clause_shape.indent.to_string(context.config))\n+        clause_shape.indent.to_string_with_newline(context.config)\n     };\n     Some(format!(\n         \"{}{}{}where{}{}{}{}\",\n@@ -2817,10 +2806,10 @@ impl Rewrite for ast::ForeignItem {\n                 ty.rewrite(context, shape).map(|ty_str| {\n                     // 1 = space between prefix and type.\n                     let sep = if prefix.len() + ty_str.len() + 1 <= shape.width {\n-                        String::from(\" \")\n+                        Cow::from(\" \")\n                     } else {\n                         let nested_indent = shape.indent.block_indent(context.config);\n-                        format!(\"\\n{}\", nested_indent.to_string(context.config))\n+                        nested_indent.to_string_with_newline(context.config)\n                     };\n                     format!(\"{}{}{};\", prefix, sep, ty_str)\n                 })"}, {"sha": "7a6e24dc6a8152781f1237867a651bc396d8d6d0", "filename": "rustfmt-core/src/macros.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmacros.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -250,14 +250,14 @@ pub fn rewrite_macro(\n                     Some(format!(\"{}{}{}; {}{}\", macro_name, lbr, lhs, rhs, rbr))\n                 } else {\n                     Some(format!(\n-                        \"{}{}\\n{}{};\\n{}{}\\n{}{}\",\n+                        \"{}{}{}{};{}{}{}{}\",\n                         macro_name,\n                         lbr,\n-                        nested_shape.indent.to_string(context.config),\n+                        nested_shape.indent.to_string_with_newline(context.config),\n                         lhs,\n-                        nested_shape.indent.to_string(context.config),\n+                        nested_shape.indent.to_string_with_newline(context.config),\n                         rhs,\n-                        shape.indent.to_string(context.config),\n+                        shape.indent.to_string_with_newline(context.config),\n                         rbr\n                     ))\n                 }\n@@ -350,15 +350,14 @@ pub fn rewrite_macro_def(\n     };\n \n     if multi_branch_style {\n-        result += \" {\\n\";\n-        result += &arm_shape.indent.to_string(context.config);\n+        result += \" {\";\n+        result += &arm_shape.indent.to_string_with_newline(context.config);\n     }\n \n     result += write_list(&branch_items, &fmt)?.as_str();\n \n     if multi_branch_style {\n-        result += \"\\n\";\n-        result += &indent.to_string(context.config);\n+        result += &indent.to_string_with_newline(context.config);\n         result += \"}\";\n     }\n "}, {"sha": "8a6b0e685c4939889e8487ece16c431916910881", "filename": "rustfmt-core/src/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fstring.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -55,7 +55,7 @@ pub fn rewrite_string<'a>(\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n     let shape = fmt.shape;\n-    let indent = shape.indent.to_string(fmt.config);\n+    let indent = shape.indent.to_string_with_newline(fmt.config);\n     let punctuation = \":,;.\";\n \n     // `cur_start` is the position in `orig` of the start of the current line.\n@@ -133,7 +133,6 @@ pub fn rewrite_string<'a>(\n \n         result.push_str(line);\n         result.push_str(fmt.line_end);\n-        result.push('\\n');\n         result.push_str(&indent);\n         result.push_str(fmt.line_start);\n "}, {"sha": "6d2dc84cec94acbb0cd36bb1508a08b7627ea848", "filename": "rustfmt-core/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ftypes.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -784,7 +784,7 @@ pub fn join_bounds(context: &RewriteContext, shape: Shape, type_strs: &[String])\n     let result = type_strs.join(joiner);\n     if result.contains('\\n') || result.len() > shape.width {\n         let joiner_indent = shape.indent.block_indent(context.config);\n-        let joiner = format!(\"\\n{}+ \", joiner_indent.to_string(context.config));\n+        let joiner = format!(\"{}+ \", joiner_indent.to_string_with_newline(context.config));\n         type_strs.join(&joiner)\n     } else {\n         result"}, {"sha": "0921c189cd7837e7b8169f2a647ace4d4e54cecb", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125e7124e7194bab639d525ec4ac2fa43633fb38/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=125e7124e7194bab639d525ec4ac2fa43633fb38", "patch": "@@ -674,8 +674,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if is_internal {\n             match self.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => {\n-                    let sep_str = format!(\"\\n{}{{\", self.block_indent.to_string(self.config));\n-                    self.push_str(&sep_str);\n+                    let indent_str = self.block_indent.to_string_with_newline(self.config);\n+                    self.push_str(&indent_str);\n+                    self.push_str(\"{\");\n                 }\n                 _ => self.push_str(\" {\"),\n             }"}]}