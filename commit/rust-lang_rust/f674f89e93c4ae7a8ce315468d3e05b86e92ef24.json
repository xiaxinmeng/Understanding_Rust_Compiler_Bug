{"sha": "f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzRmODllOTNjNGFlN2E4Y2UzMTU0NjhkM2UwNWI4NmU5MmVmMjQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T21:09:12Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:45:55Z"}, "message": "Store Const directly in ConstantRange", "tree": {"sha": "85b6f70cf144259dc6d3da02b331ad9fcc22f1dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b6f70cf144259dc6d3da02b331ad9fcc22f1dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "html_url": "https://github.com/rust-lang/rust/commit/f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f674f89e93c4ae7a8ce315468d3e05b86e92ef24/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "html_url": "https://github.com/rust-lang/rust/commit/019212420216a8a4ec6ec9c11cd14cab7e4f9b89"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "96d120cdefd7a5759500e26b60a6ac729cb180a8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f674f89e93c4ae7a8ce315468d3e05b86e92ef24/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f674f89e93c4ae7a8ce315468d3e05b86e92ef24/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "patch": "@@ -594,7 +594,7 @@ enum Constructor<'tcx> {\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange<'tcx>),\n     /// Ranges of non-integer literal values (`2.0..=5.2`).\n-    ConstantRange(u128, u128, Ty<'tcx>, RangeEnd, Span),\n+    ConstantRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, Ty<'tcx>, RangeEnd, Span),\n     /// Array patterns of length `n`.\n     FixedLenSlice(u64),\n     /// Slice patterns. Captures any array constructor of `length >= i + j`.\n@@ -939,11 +939,7 @@ impl<'tcx> Constructor<'tcx> {\n                 PatKind::Slice { prefix, slice: Some(wild), suffix }\n             }\n             &ConstantValue(value, _) => PatKind::Constant { value },\n-            &ConstantRange(lo, hi, ty, end, _) => PatKind::Range(PatRange {\n-                lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n-                hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n-                end,\n-            }),\n+            &ConstantRange(lo, hi, _, end, _) => PatKind::Range(PatRange { lo, hi, end }),\n             IntRange(range) => {\n                 return range.to_pat(cx.tcx);\n             }\n@@ -1730,9 +1726,14 @@ fn pat_constructor<'tcx>(\n         }\n         PatKind::Range(PatRange { lo, hi, end }) => {\n             let ty = lo.ty;\n-            let lo = lo.eval_bits(tcx, param_env, lo.ty);\n-            let hi = hi.eval_bits(tcx, param_env, hi.ty);\n-            if let Some(int_range) = IntRange::from_range(tcx, lo, hi, ty, &end, pat.span) {\n+            if let Some(int_range) = IntRange::from_range(\n+                tcx,\n+                lo.eval_bits(tcx, param_env, lo.ty),\n+                hi.eval_bits(tcx, param_env, hi.ty),\n+                ty,\n+                &end,\n+                pat.span,\n+            ) {\n                 Some(IntRange(int_range))\n             } else {\n                 Some(ConstantRange(lo, hi, ty, end, pat.span))\n@@ -2132,10 +2133,9 @@ fn constructor_covered_by_range<'tcx>(\n         PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n-    let from_bits = |bits| ty::Const::from_bits(tcx, bits, ty::ParamEnv::empty().and(ty));\n     let (ctor_from, ctor_to, ctor_end) = match *ctor {\n         ConstantValue(value, _) => (value, value, RangeEnd::Included),\n-        ConstantRange(from, to, _, ctor_end, _) => (from_bits(from), from_bits(to), ctor_end),\n+        ConstantRange(from, to, _, ctor_end, _) => (from, to, ctor_end),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", ctor),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);"}]}