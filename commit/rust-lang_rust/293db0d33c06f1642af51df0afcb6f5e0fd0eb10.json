{"sha": "293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5M2RiMGQzM2MwNmYxNjQyYWY1MWRmMGFmY2I2ZjVlMGZkMGViMTA=", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-09-09T01:12:02Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-09-09T01:12:02Z"}, "message": "Allow giving reasons for disallowed_methods", "tree": {"sha": "2c499183d3c664af33d9111b4a091dd3e571475b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c499183d3c664af33d9111b4a091dd3e571475b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "html_url": "https://github.com/rust-lang/rust/commit/293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27afd6ade4bb1123a8bf82001629b69d23d62aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/27afd6ade4bb1123a8bf82001629b69d23d62aff", "html_url": "https://github.com/rust-lang/rust/commit/27afd6ade4bb1123a8bf82001629b69d23d62aff"}], "stats": {"total": 113, "additions": 69, "deletions": 44}, "files": [{"sha": "1167b26c8f15392727471040c614b556998fdd40", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "patch": "@@ -1,33 +1,44 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::fn_def_id;\n \n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{def::Res, def_id::DefId, Crate, Expr};\n+use rustc_hir::{def::Res, def_id::DefIdMap, Crate, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Symbol;\n+\n+use crate::utils::conf;\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Denies the configured methods and functions in clippy.toml\n     ///\n     /// ### Why is this bad?\n-    /// Some methods are undesirable in certain contexts,\n-    /// and it's beneficial to lint for them as needed.\n+    /// Some methods are undesirable in certain contexts, and it's beneficial to\n+    /// lint for them as needed.\n     ///\n     /// ### Example\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml\n-    /// disallowed-methods = [\"std::vec::Vec::leak\", \"std::time::Instant::now\"]\n+    /// disallowed-methods = [\n+    ///     # Can use a string as the path of the disallowed method.\n+    ///     \"std::boxed::Box::new\",\n+    ///     # Can also use an inline table with a `path` key.\n+    ///     { path = \"std::time::Instant::now\" },\n+    ///     # When using an inline table, can add a `reason` for why the method\n+    ///     # is disallowed.\n+    ///     { path = \"std::vec::Vec::leak\", reason = \"no leaking memory\" },\n+    /// ]\n     /// ```\n     ///\n     /// ```rust,ignore\n     /// // Example code where clippy issues a warning\n     /// let xs = vec![1, 2, 3, 4];\n     /// xs.leak(); // Vec::leak is disallowed in the config.\n+    /// // The diagnostic contains the message \"no leaking memory\".\n     ///\n     /// let _now = Instant::now(); // Instant::now is disallowed in the config.\n+    ///\n+    /// let _box = Box::new(3); // Box::new is disallowed in the config.\n     /// ```\n     ///\n     /// Use instead:\n@@ -43,18 +54,15 @@ declare_clippy_lint! {\n \n #[derive(Clone, Debug)]\n pub struct DisallowedMethod {\n-    disallowed: FxHashSet<Vec<Symbol>>,\n-    def_ids: FxHashSet<(DefId, Vec<Symbol>)>,\n+    conf_disallowed: Vec<conf::DisallowedMethod>,\n+    disallowed: DefIdMap<Option<String>>,\n }\n \n impl DisallowedMethod {\n-    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+    pub fn new(conf_disallowed: Vec<conf::DisallowedMethod>) -> Self {\n         Self {\n-            disallowed: disallowed\n-                .iter()\n-                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n-                .collect(),\n-            def_ids: FxHashSet::default(),\n+            conf_disallowed,\n+            disallowed: DefIdMap::default(),\n         }\n     }\n }\n@@ -63,32 +71,36 @@ impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        for path in &self.disallowed {\n-            let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n-            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>())\n-            {\n-                self.def_ids.insert((id, path.clone()));\n+        for conf in &self.conf_disallowed {\n+            let (path, reason) = match conf {\n+                conf::DisallowedMethod::Simple(path) => (path, None),\n+                conf::DisallowedMethod::WithReason { path, reason } => (\n+                    path,\n+                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n+                ),\n+            };\n+            let segs: Vec<_> = path.split(\"::\").collect();\n+            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs) {\n+                self.disallowed.insert(id, reason);\n             }\n         }\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some(def_id) = fn_def_id(cx, expr) {\n-            if self.def_ids.iter().any(|(id, _)| def_id == *id) {\n-                let func_path = cx.get_def_path(def_id);\n-                let func_path_string = func_path\n-                    .into_iter()\n-                    .map(Symbol::to_ident_string)\n-                    .collect::<Vec<_>>()\n-                    .join(\"::\");\n-\n-                span_lint(\n-                    cx,\n-                    DISALLOWED_METHOD,\n-                    expr.span,\n-                    &format!(\"use of a disallowed method `{}`\", func_path_string),\n-                );\n+        let def_id = match fn_def_id(cx, expr) {\n+            Some(def_id) => def_id,\n+            None => return,\n+        };\n+        let reason = match self.disallowed.get(&def_id) {\n+            Some(reason) => reason,\n+            None => return,\n+        };\n+        let func_path = cx.tcx.def_path_str(def_id);\n+        let msg = format!(\"use of a disallowed method `{}`\", func_path);\n+        span_lint_and_then(cx, DISALLOWED_METHOD, expr.span, &msg, |diag| {\n+            if let Some(reason) = reason {\n+                diag.note(reason);\n             }\n-        }\n+        });\n     }\n }"}, {"sha": "9544309ae4f45f9ef66b2c7f7c5d103190b33c7f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "patch": "@@ -2105,8 +2105,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(float_equality_without_abs::FloatEqualityWithoutAbs));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n     store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n-    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(disallowed_method::DisallowedMethod::new(&disallowed_methods)));\n+    let disallowed_methods = conf.disallowed_methods.clone();\n+    store.register_late_pass(move || Box::new(disallowed_method::DisallowedMethod::new(disallowed_methods.clone())));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n     store.register_late_pass(|| Box::new(undropped_manually_drops::UndroppedManuallyDrops));"}, {"sha": "8b087507b11897d597fd73accefeec72c6839081", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "patch": "@@ -15,6 +15,14 @@ pub struct Rename {\n     pub rename: String,\n }\n \n+/// A single disallowed method, used by the `DISALLOWED_METHOD` lint.\n+#[derive(Clone, Debug, Deserialize)]\n+#[serde(untagged)]\n+pub enum DisallowedMethod {\n+    Simple(String),\n+    WithReason { path: String, reason: Option<String> },\n+}\n+\n /// Conf with parse errors\n #[derive(Default)]\n pub struct TryConf {\n@@ -243,7 +251,7 @@ define_Conf! {\n     /// Lint: DISALLOWED_METHOD.\n     ///\n     /// The list of disallowed methods, written as fully qualified paths.\n-    (disallowed_methods: Vec<String> = Vec::new()),\n+    (disallowed_methods: Vec<crate::utils::conf::DisallowedMethod> = Vec::new()),\n     /// Lint: DISALLOWED_TYPE.\n     ///\n     /// The list of disallowed types, written as fully qualified paths."}, {"sha": "f1d4a4619c5dc995105fd11715f4d422e5c4bec9", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "patch": "@@ -1,5 +1,8 @@\n disallowed-methods = [\n+    # just a string is shorthand for path only\n     \"std::iter::Iterator::sum\",\n-    \"regex::Regex::is_match\",\n-    \"regex::Regex::new\"\n+    # can give path and reason with an inline table\n+    { path = \"regex::Regex::is_match\", reason = \"no matching allowed\" },\n+    # can use an inline table but omit reason\n+    { path = \"regex::Regex::new\" },\n ]"}, {"sha": "38123220a4320e5ceb5dd0137cc4d08b3e761d89", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/293db0d33c06f1642af51df0afcb6f5e0fd0eb10/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=293db0d33c06f1642af51df0afcb6f5e0fd0eb10", "patch": "@@ -1,18 +1,20 @@\n-error: use of a disallowed method `regex::re_unicode::Regex::new`\n+error: use of a disallowed method `regex::Regex::new`\n   --> $DIR/conf_disallowed_method.rs:7:14\n    |\n LL |     let re = Regex::new(r\"ab.*c\").unwrap();\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::disallowed-method` implied by `-D warnings`\n \n-error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n+error: use of a disallowed method `regex::Regex::is_match`\n   --> $DIR/conf_disallowed_method.rs:8:5\n    |\n LL |     re.is_match(\"abc\");\n    |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: no matching allowed (from clippy.toml)\n \n-error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n+error: use of a disallowed method `std::iter::Iterator::sum`\n   --> $DIR/conf_disallowed_method.rs:11:5\n    |\n LL |     a.iter().sum::<i32>();"}]}