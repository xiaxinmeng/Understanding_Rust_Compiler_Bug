{"sha": "7be202fa3c53ab1d4e208245653fde033ec0131c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTIwMmZhM2M1M2FiMWQ0ZTIwODI0NTY1M2ZkZTAzM2VjMDEzMWM=", "commit": {"author": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2016-10-13T01:34:08Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-10-13T01:34:08Z"}, "message": "Add support for spaces_within_parens config (#1187)\n\n* Add support for spaces_within_parens config\r\n\r\n* Changes based on review comments", "tree": {"sha": "00683c92e043cee446aab7b103ac42bde18ecf17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00683c92e043cee446aab7b103ac42bde18ecf17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be202fa3c53ab1d4e208245653fde033ec0131c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be202fa3c53ab1d4e208245653fde033ec0131c", "html_url": "https://github.com/rust-lang/rust/commit/7be202fa3c53ab1d4e208245653fde033ec0131c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be202fa3c53ab1d4e208245653fde033ec0131c/comments", "author": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724f75eaa5d5eb72baabab7bc3ec3b8ed0d52815", "url": "https://api.github.com/repos/rust-lang/rust/commits/724f75eaa5d5eb72baabab7bc3ec3b8ed0d52815", "html_url": "https://github.com/rust-lang/rust/commit/724f75eaa5d5eb72baabab7bc3ec3b8ed0d52815"}], "stats": {"total": 164, "additions": 156, "deletions": 8}, "files": [{"sha": "ad14f81a819eb7a540df461d858ee8e61d39a55e", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -416,6 +416,7 @@ create_config! {\n     space_after_bound_colon: bool, true,\n         \"Leave a space after the colon in a trait or lifetime bound\";\n     spaces_around_ranges: bool, false, \"Put spaces around the  .. and ... range operators\";\n+    spaces_within_parens: bool, false, \"Put spaces within non-empty parentheses\";\n     use_try_shorthand: bool, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Replace,\n         \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";"}, {"sha": "e1d74a3cc79e15feccfae6550cec28860e43bf30", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -1536,7 +1536,11 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         None => return Err(Ordering::Less),\n     };\n \n-    Ok(format!(\"{}({})\", callee_str, list_str))\n+    Ok(if context.config.spaces_within_parens && list_str.len() > 0 {\n+        format!(\"{}( {} )\", callee_str, list_str)\n+    } else {\n+        format!(\"{}({})\", callee_str, list_str)\n+    })\n }\n \n fn rewrite_paren(context: &RewriteContext,\n@@ -1549,7 +1553,12 @@ fn rewrite_paren(context: &RewriteContext,\n     // paren on the same line as the subexpr.\n     let subexpr_str = subexpr.rewrite(context, try_opt!(width.checked_sub(2)), offset + 1);\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n-    subexpr_str.map(|s| format!(\"({})\", s))\n+\n+    subexpr_str.map(|s| if context.config.spaces_within_parens && s.len() > 0 {\n+        format!(\"( {} )\", s)\n+    } else {\n+        format!(\"({})\", s)\n+    })\n }\n \n fn rewrite_struct_lit<'a>(context: &RewriteContext,\n@@ -1749,7 +1758,11 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n         return items.next()\n             .unwrap()\n             .rewrite(&aligned, budget, indent)\n-            .map(|s| format!(\"({},)\", s));\n+            .map(|s| if context.config.spaces_within_parens {\n+                format!(\"( {}, )\", s)\n+            } else {\n+                format!(\"({},)\", s)\n+            });\n     }\n \n     let list_lo = context.codemap.span_after(span, \"(\");\n@@ -1764,7 +1777,11 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n                              span.hi - BytePos(1));\n     let list_str = try_opt!(format_item_list(items, budget, indent, context.config));\n \n-    Some(format!(\"({})\", list_str))\n+    if context.config.spaces_within_parens && list_str.len() > 0 {\n+        Some(format!(\"( {} )\", list_str))\n+    } else {\n+        Some(format!(\"({})\", list_str))\n+    }\n }\n \n fn rewrite_binary_op(context: &RewriteContext,"}, {"sha": "c3e58cba83540c75d618fc787db24b888f72160a", "filename": "src/items.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -961,7 +961,17 @@ fn format_tuple_struct(context: &RewriteContext,\n                              context.codemap.span_after(span, \"(\"),\n                              span.hi);\n     let body = try_opt!(format_item_list(items, item_budget, item_indent, context.config));\n+\n+    if context.config.spaces_within_parens && body.len() > 0 {\n+        result.push(' ');\n+    }\n+\n     result.push_str(&body);\n+\n+    if context.config.spaces_within_parens && body.len() > 0 {\n+        result.push(' ');\n+    }\n+\n     result.push(')');\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n@@ -1386,12 +1396,18 @@ fn rewrite_fn_base(context: &RewriteContext,\n             result.push_str(&arg_indent.to_string(context.config));\n             arg_indent = arg_indent + 1; // extra space for `(`\n             result.push('(');\n+            if context.config.spaces_within_parens && fd.inputs.len() > 0 {\n+                result.push(' ')\n+            }\n         } else {\n             result.push_str(\"(\\n\");\n             result.push_str(&arg_indent.to_string(context.config));\n         }\n     } else {\n         result.push('(');\n+        if context.config.spaces_within_parens && fd.inputs.len() > 0 {\n+            result.push(' ')\n+        }\n     }\n \n     if multi_line_ret_str {\n@@ -1432,6 +1448,9 @@ fn rewrite_fn_base(context: &RewriteContext,\n         result.push(')');\n     } else {\n         result.push_str(&arg_str);\n+        if context.config.spaces_within_parens && fd.inputs.len() > 0 {\n+            result.push(' ')\n+        }\n         result.push(')');\n     }\n "}, {"sha": "149844cd196e3e34994dcf0ab38cf3e2ea93e25a", "filename": "src/patterns.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -234,10 +234,20 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n         let list = try_opt!(format_item_list(items, width, offset, context.config));\n \n         match path_str {\n-            Some(path_str) => Some(format!(\"{}({})\", path_str, list)),\n+            Some(path_str) => {\n+                Some(if context.config.spaces_within_parens {\n+                    format!(\"{}( {} )\", path_str, list)\n+                } else {\n+                    format!(\"{}({})\", path_str, list)\n+                })\n+            }\n             None => {\n                 let comma = if add_comma { \",\" } else { \"\" };\n-                Some(format!(\"({}{})\", list, comma))\n+                Some(if context.config.spaces_within_parens {\n+                    format!(\"( {}{} )\", list, comma)\n+                } else {\n+                    format!(\"({}{})\", list, comma)\n+                })\n             }\n         }\n     }"}, {"sha": "624f17f6be810f53f04aaf9273336bc19c9196b1", "filename": "src/types.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -311,7 +311,11 @@ fn format_function_type<'a, I>(inputs: I,\n         String::new()\n     };\n \n-    Some(format!(\"({}){}{}\", list_str, infix, output))\n+    Some(if context.config.spaces_within_parens {\n+        format!(\"( {} ){}{}\", list_str, infix, output)\n+    } else {\n+        format!(\"({}){}{}\", list_str, infix, output)\n+    })\n }\n \n impl Rewrite for ast::WherePredicate {\n@@ -575,7 +579,12 @@ impl Rewrite for ast::Ty {\n             // comments.\n             ast::TyKind::Paren(ref ty) => {\n                 let budget = try_opt!(width.checked_sub(2));\n-                ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"({})\", ty_str))\n+                ty.rewrite(context, budget, offset + 1)\n+                    .map(|ty_str| if context.config.spaces_within_parens {\n+                        format!(\"( {} )\", ty_str)\n+                    } else {\n+                        format!(\"({})\", ty_str)\n+                    })\n             }\n             ast::TyKind::Vec(ref ty) => {\n                 let budget = try_opt!(width.checked_sub(2));"}, {"sha": "63978eaf8543268be0247bffa1f119a3fc1f72f7", "filename": "tests/source/spaces-within-parens.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/tests%2Fsource%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/tests%2Fsource%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-parens.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -0,0 +1,46 @@\n+// rustfmt-spaces_within_parens: true\n+\n+enum E {\n+    A(u32),\n+    B(u32, u32),\n+    C(u32, u32, u32),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1(u32);\n+struct TupleStruct2(u32, u32);\n+\n+fn fooEmpty() {}\n+\n+fn foo(e: E, _: u32) -> (u32, u32) {\n+\n+    // Tuples\n+    let t1 = ();\n+    let t2 = (1,);\n+    let t3 = (1, 2);\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1(1);\n+    let ts2 = TupleStruct2(1, 2);\n+\n+    // Tuple pattern\n+    let (a,b,c) = (1,2,3);\n+\n+    // Expressions\n+    let x = (1 + 2) * (3);\n+\n+    // Function call\n+    fooEmpty();\n+    foo(1, 2);\n+\n+    // Pattern matching\n+    match e {\n+        A(_) => (),\n+        B(_, _) => (),\n+        C(..) => (),\n+        D => (),\n+    }\n+\n+    (1,2)\n+}"}, {"sha": "2a0a566ddea8f0a736f0fa1853351eb7a500026c", "filename": "tests/target/spaces-within-parens.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7be202fa3c53ab1d4e208245653fde033ec0131c/tests%2Ftarget%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be202fa3c53ab1d4e208245653fde033ec0131c/tests%2Ftarget%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-parens.rs?ref=7be202fa3c53ab1d4e208245653fde033ec0131c", "patch": "@@ -0,0 +1,46 @@\n+// rustfmt-spaces_within_parens: true\n+\n+enum E {\n+    A( u32 ),\n+    B( u32, u32 ),\n+    C( u32, u32, u32 ),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1( u32 );\n+struct TupleStruct2( u32, u32 );\n+\n+fn fooEmpty() {}\n+\n+fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n+\n+    // Tuples\n+    let t1 = ();\n+    let t2 = ( 1, );\n+    let t3 = ( 1, 2 );\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1( 1 );\n+    let ts2 = TupleStruct2( 1, 2 );\n+\n+    // Tuple pattern\n+    let ( a, b, c ) = ( 1, 2, 3 );\n+\n+    // Expressions\n+    let x = ( 1 + 2 ) * ( 3 );\n+\n+    // Function call\n+    fooEmpty();\n+    foo( 1, 2 );\n+\n+    // Pattern matching\n+    match e {\n+        A( _ ) => (),\n+        B( _, _ ) => (),\n+        C( .. ) => (),\n+        D => (),\n+    }\n+\n+    ( 1, 2 )\n+}"}]}