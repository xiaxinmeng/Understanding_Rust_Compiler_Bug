{"sha": "7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "node_id": "C_kwDOAAsO6NoAKDdlOTY2YmNkMDNmNmQwZmFlNDFmNThjZjgwYmNiMTA1NjZhYjk3MWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T14:04:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T14:04:22Z"}, "message": "Auto merge of #108640 - matthiaskrgr:rollup-rii4t5t, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #108516 (Restrict `#[rustc_box]` to `Box::new` calls)\n - #108575 (Erase **all** regions when probing for associated types on ambiguity in astconv)\n - #108585 (Run compiler test suite in parallel on Fuchsia)\n - #108606 (Add test case for mismatched open/close delims)\n - #108609 (Highlight whole expression for E0599)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e506c2d96410294010e4767e40b397f55460b540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e506c2d96410294010e4767e40b397f55460b540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "html_url": "https://github.com/rust-lang/rust/commit/7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18caf88956ecf454e24307e598b8ac9967f10b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/18caf88956ecf454e24307e598b8ac9967f10b07", "html_url": "https://github.com/rust-lang/rust/commit/18caf88956ecf454e24307e598b8ac9967f10b07"}, {"sha": "832987bb1e0691b44a057414d57d23c64e6c7d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/832987bb1e0691b44a057414d57d23c64e6c7d97", "html_url": "https://github.com/rust-lang/rust/commit/832987bb1e0691b44a057414d57d23c64e6c7d97"}], "stats": {"total": 316, "additions": 252, "deletions": 64}, "files": [{"sha": "3ccd84398ec2720b45a71eb71dcbb1cae73f3a10", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -22,9 +22,6 @@ ast_lowering_misplaced_impl_trait =\n ast_lowering_misplaced_assoc_ty_binding =\n     associated type bounds are only allowed in where clauses and function signatures, not in {$position}\n \n-ast_lowering_rustc_box_attribute_error =\n-    #[rustc_box] requires precisely one argument and no other attributes are allowed\n-\n ast_lowering_underscore_expr_lhs_assign =\n     in expressions, `_` can only be used on the left-hand side of an assignment\n     .label = `_` not allowed here"}, {"sha": "5e6b6050bc0eaeaa8ba1c96c41be008607745b20", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -87,13 +87,6 @@ pub struct MisplacedAssocTyBinding<'a> {\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(Diagnostic, Clone, Copy)]\n-#[diag(ast_lowering_rustc_box_attribute_error)]\n-pub struct RustcBoxAttributeError {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_underscore_expr_lhs_assign)]\n pub struct UnderscoreExprLhsAssign {"}, {"sha": "ffb30b1b39127972724c914624007b4cd1fe2f87", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -2,7 +2,7 @@ use super::errors::{\n     AsyncGeneratorsNotSupported, AsyncNonMoveClosureNotSupported, AwaitOnlyInAsyncFnAndBlocks,\n     BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignemnt,\n     GeneratorTooManyParameters, InclusiveRangeWithNoEnd, NotSupportedForLifetimeBinderAsyncClosure,\n-    RustcBoxAttributeError, UnderscoreExprLhsAssign,\n+    UnderscoreExprLhsAssign,\n };\n use super::ResolverAstLoweringExt;\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n@@ -83,15 +83,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Tup(elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n                 ExprKind::Call(f, args) => {\n-                    if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n-                        if let [inner] = &args[..] && e.attrs.len() == 1 {\n-                            let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n-                            return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n-                        } else {\n-                            let guar = self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n-                            hir::ExprKind::Err(guar)\n-                        }\n-                    } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n+                    if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n                     } else {\n                         let f = self.lower_expr(f);"}, {"sha": "f5ce02c9e618efd3bce9a5de5d9a5ccd76dc35ce", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -2399,8 +2399,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n-                                        tcx.erase_regions(impl_.self_ty()),\n-                                        tcx.erase_regions(qself_ty),\n+                                        impl_.self_ty(),\n+                                        // Must fold past escaping bound vars too,\n+                                        // since we have those at this point in astconv.\n+                                        tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased),\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative"}, {"sha": "60d56263d2e38bb69590618d2d926beb96311b58", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -333,6 +333,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcvr_ty.prefix_string(self.tcx),\n             ty_str_reported,\n         );\n+        if tcx.sess.source_map().is_multiline(sugg_span) {\n+            err.span_label(sugg_span.with_hi(span.lo()), \"\");\n+        }\n         let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n             short_ty_str\n         } else {"}, {"sha": "93e7fb330e093e165a6f38dd37701af5eb535874", "filename": "compiler/rustc_mir_build/locales/en-US.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -374,3 +374,9 @@ mir_build_suggest_let_else = you might want to use `let else` to handle the {$co\n     } matched\n \n mir_build_suggest_attempted_int_lit = alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+\n+\n+mir_build_rustc_box_attribute_error = `#[rustc_box]` attribute used incorrectly\n+    .attributes = no other attributes may be applied\n+    .not_box = `#[rustc_box]` may only be applied to a `Box::new()` call\n+    .missing_box = `#[rustc_box]` requires the `owned_box` lang item"}, {"sha": "dc4d2276e4aab43439bb00f729f4a64b52f40b04", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -888,3 +888,22 @@ pub enum MiscPatternSuggestion {\n         start_span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(mir_build_rustc_box_attribute_error)]\n+pub struct RustcBoxAttributeError {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub reason: RustcBoxAttrReason,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum RustcBoxAttrReason {\n+    #[note(mir_build_attributes)]\n+    Attributes,\n+    #[note(mir_build_not_box)]\n+    NotBoxNew,\n+    #[note(mir_build_missing_box)]\n+    MissingBox,\n+}"}, {"sha": "a937ec247413b0b629c6ad23c207c3b7b184cbe7", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors;\n use crate::thir::cx::region::Scope;\n use crate::thir::cx::Cx;\n use crate::thir::util::UserAnnotatedTyHelpers;\n@@ -18,7 +19,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use rustc_target::abi::VariantIdx;\n \n impl<'tcx> Cx<'tcx> {\n@@ -262,6 +263,7 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {\n         let tcx = self.tcx;\n         let expr_ty = self.typeck_results().expr_ty(expr);\n@@ -322,6 +324,34 @@ impl<'tcx> Cx<'tcx> {\n                         fn_span: expr.span,\n                     }\n                 } else {\n+                    let attrs = tcx.hir().attrs(expr.hir_id);\n+                    if attrs.iter().any(|a| a.name_or_empty() == sym::rustc_box) {\n+                        if attrs.len() != 1 {\n+                            tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                span: attrs[0].span,\n+                                reason: errors::RustcBoxAttrReason::Attributes,\n+                            });\n+                        } else if let Some(box_item) = tcx.lang_items().owned_box() {\n+                            if let hir::ExprKind::Path(hir::QPath::TypeRelative(ty, fn_path)) = fun.kind\n+                                && let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind\n+                                && path.res.opt_def_id().map_or(false, |did| did == box_item)\n+                                && fn_path.ident.name == sym::new\n+                                && let [value] = args\n+                            {\n+                                return Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind: ExprKind::Box { value: self.mirror_expr(value) } }\n+                            } else {\n+                                tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                    span: expr.span,\n+                                    reason: errors::RustcBoxAttrReason::NotBoxNew\n+                                });\n+                            }\n+                        } else {\n+                            tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                span: attrs[0].span,\n+                                reason: errors::RustcBoxAttrReason::MissingBox,\n+                            });\n+                        }\n+                    }\n                     let adt_data =\n                         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {\n                             // Tuple-like ADTs are represented as ExprKind::Call. We convert them here."}, {"sha": "e7d1d9781d5c43acc9581f057961827726cef35c", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -9,6 +9,7 @@\n \n import argparse\n from dataclasses import dataclass\n+import fcntl\n import glob\n import hashlib\n import json\n@@ -146,6 +147,9 @@ def host_arch_triple(self):\n     def zxdb_script_path(self):\n         return os.path.join(self.tmp_dir(), \"zxdb_script\")\n \n+    def pm_lockfile_path(self):\n+        return os.path.join(self.tmp_dir(), \"pm.lock\")\n+\n     def log_info(self, msg):\n         print(msg)\n \n@@ -460,6 +464,9 @@ def start(self):\n             stderr=self.subprocess_output(),\n         )\n \n+        # Create lockfiles\n+        open(self.pm_lockfile_path(), 'a').close()\n+\n         # Write to file\n         self.write_to_file()\n \n@@ -676,19 +683,25 @@ def log(msg):\n             log(\"Publishing package to repo...\")\n \n             # Publish package to repo\n-            subprocess.check_call(\n-                [\n-                    self.tool_path(\"pm\"),\n-                    \"publish\",\n-                    \"-a\",\n-                    \"-repo\",\n-                    self.repo_dir(),\n-                    \"-f\",\n-                    far_path,\n-                ],\n-                stdout=log_file,\n-                stderr=log_file,\n-            )\n+            with open(self.pm_lockfile_path(), 'w') as pm_lockfile:\n+                fcntl.lockf(pm_lockfile.fileno(), fcntl.LOCK_EX)\n+                subprocess.check_call(\n+                    [\n+                        self.tool_path(\"pm\"),\n+                        \"publish\",\n+                        \"-a\",\n+                        \"-repo\",\n+                        self.repo_dir(),\n+                        \"-f\",\n+                        far_path,\n+                    ],\n+                    stdout=log_file,\n+                    stderr=log_file,\n+                )\n+                # This lock should be released automatically when the pm\n+                # lockfile is closed, but we'll be polite and unlock it now\n+                # since the spec leaves some wiggle room.\n+                fcntl.lockf(pm_lockfile.fileno(), fcntl.LOCK_UN)\n \n             log(\"Running ffx test...\")\n "}, {"sha": "4d97b8c6cb90b4d7c144a04498803cffe579ece9", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -716,7 +716,7 @@ run the full `tests/ui` test suite:\n     --stage=2                                                                 \\\n     test tests/ui                                                             \\\n     --target x86_64-unknown-fuchsia                                           \\\n-    --run=always --jobs 1                                                     \\\n+    --run=always                                                              \\\n     --test-args --target-rustcflags                                           \\\n     --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\\n@@ -728,9 +728,6 @@ run the full `tests/ui` test suite:\n )\n ```\n \n-*Note: The test suite cannot be run in parallel at the moment, so `x.py`\n-must be run with `--jobs 1` to ensure only one test runs at a time.*\n-\n By default, `x.py` compiles test binaries with `panic=unwind`. If you built your\n Rust toolchain with `-Cpanic=abort`, you need to tell `x.py` to compile test\n binaries with `panic=abort` as well:\n@@ -907,7 +904,7 @@ through our `x.py` invocation. The full invocation is:\n     --stage=2                                                                 \\\n     test tests/${TEST}                                                        \\\n     --target x86_64-unknown-fuchsia                                           \\\n-    --run=always --jobs 1                                                     \\\n+    --run=always                                                              \\\n     --test-args --target-rustcflags                                           \\\n     --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\"}, {"sha": "50bef3709309d66e3fc117850ebe09dc1b223a67", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -287,15 +287,12 @@ impl<'a> VecArgs<'a> {\n                     Some(VecArgs::Repeat(&args[0], &args[1]))\n                 } else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n-                    if_chain! {\n-                        if let hir::ExprKind::Box(boxed) = args[0].kind;\n-                        if let hir::ExprKind::Array(args) = boxed.kind;\n-                        then {\n-                            return Some(VecArgs::Vec(args));\n-                        }\n+                    if let hir::ExprKind::Call(_, [arg]) = &args[0].kind\n+                        && let hir::ExprKind::Array(args) = arg.kind {\n+                        Some(VecArgs::Vec(args))\n+                    } else {\n+                        None\n                     }\n-\n-                    None\n                 } else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n                     Some(VecArgs::Vec(&[]))\n                 } else {"}, {"sha": "41c23ff86b25efc5f5582e58fca4aa90dd4f4d9e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -1432,12 +1432,13 @@ impl<'test> TestCx<'test> {\n         expect_help: bool,\n         expect_note: bool,\n     ) -> bool {\n-        match actual_error.kind {\n-            Some(ErrorKind::Help) => expect_help,\n-            Some(ErrorKind::Note) => expect_note,\n-            Some(ErrorKind::Error) | Some(ErrorKind::Warning) => true,\n-            Some(ErrorKind::Suggestion) | None => false,\n-        }\n+        !actual_error.msg.is_empty()\n+            && match actual_error.kind {\n+                Some(ErrorKind::Help) => expect_help,\n+                Some(ErrorKind::Note) => expect_note,\n+                Some(ErrorKind::Error) | Some(ErrorKind::Warning) => true,\n+                Some(ErrorKind::Suggestion) | None => false,\n+            }\n     }\n \n     fn should_emit_metadata(&self, pm: Option<PassMode>) -> Emit {"}, {"sha": "b3726fb38671b00a0c9df1798a1dcd9a7ee8990b", "filename": "tests/ui/attributes/rustc-box.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fattributes%2Frustc-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fattributes%2Frustc-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Frustc-box.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,18 @@\n+#![feature(rustc_attrs, stmt_expr_attributes)]\n+\n+fn foo(_: u32, _: u32) {}\n+fn bar(_: u32) {}\n+\n+fn main() {\n+    #[rustc_box]\n+    Box::new(1); // OK\n+    #[rustc_box]\n+    Box::pin(1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box]\n+    foo(1, 1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box]\n+    bar(1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box] //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustfmt::skip]\n+    Box::new(1);\n+}"}, {"sha": "073a18c7d58ec3fade1f8851a8d658f1cbcda206", "filename": "tests/ui/attributes/rustc-box.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fattributes%2Frustc-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fattributes%2Frustc-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Frustc-box.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,34 @@\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:10:5\n+   |\n+LL |     Box::pin(1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:12:5\n+   |\n+LL |     foo(1, 1);\n+   |     ^^^^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:14:5\n+   |\n+LL |     bar(1);\n+   |     ^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:15:5\n+   |\n+LL |     #[rustc_box]\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: no other attributes may be applied\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "bd51378cf1a5079f8e24ad41cf70edb7ef9a7b1b", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -48,14 +48,17 @@ LL |      .two(0, /* isize */);\n error[E0599]: `Foo` is not an iterator\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n-LL | pub struct Foo;\n-   | --------------\n-   | |\n-   | method `take` not found for this struct\n-   | doesn't satisfy `Foo: Iterator`\n+LL |   pub struct Foo;\n+   |   --------------\n+   |   |\n+   |   method `take` not found for this struct\n+   |   doesn't satisfy `Foo: Iterator`\n ...\n-LL |      .take()\n-   |       ^^^^ `Foo` is not an iterator\n+LL | /     y.zero()\n+LL | |      .take()\n+   | |      -^^^^ `Foo` is not an iterator\n+   | |______|\n+   | \n    |\n    = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`"}, {"sha": "861761b64f4f4e7a9ac02e824b0900e647b26d15", "filename": "tests/ui/parser/issues/issue-104367.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,6 @@\n+#[derive(A)]\n+struct S {\n+    d: [u32; {\n+        #![cfg] {\n+            #![w,) //~ ERROR mismatched closing delimiter\n+                   //~ ERROR this file contains an unclosed delimiter"}, {"sha": "e6e76535761fb37a4b4c2e6df5e2ec66274a7e3f", "filename": "tests/ui/parser/issues/issue-104367.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104367.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,26 @@\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-104367.rs:5:15\n+   |\n+LL |             #![w,)\n+   |               ^  ^ mismatched closing delimiter\n+   |               |\n+   |               unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-104367.rs:6:71\n+   |\n+LL | struct S {\n+   |          - unclosed delimiter\n+LL |     d: [u32; {\n+   |        -     - unclosed delimiter\n+   |        |\n+   |        unclosed delimiter\n+LL |         #![cfg] {\n+   |                 - unclosed delimiter\n+LL |             #![w,)\n+   |                  - missing open `(` for this delimiter\n+LL |\n+   |                                                                       ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6146b795de19a6cd7951609d4efc2b3bb63f40b2", "filename": "tests/ui/parser/issues/issue-105209.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: -Zunpretty=ast-tree\n+#![c={#![c[)x   //~ ERROR mismatched closing delimiter\n+                //~ ERROR this file contains an unclosed delimiter"}, {"sha": "c75eafa18335effdc963aad9a4c3ed11a322c3ec", "filename": "tests/ui/parser/issues/issue-105209.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-105209.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,22 @@\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-105209.rs:2:11\n+   |\n+LL | #![c={#![c[)x\n+   |           ^^ mismatched closing delimiter\n+   |           |\n+   |           unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-105209.rs:3:68\n+   |\n+LL | #![c={#![c[)x\n+   |   -  -  -  - missing open `(` for this delimiter\n+   |   |  |  |\n+   |   |  |  unclosed delimiter\n+   |   |  unclosed delimiter\n+   |   unclosed delimiter\n+LL |\n+   |                                                                    ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fbaf41245e9b602d4becfaa49fbaba85458f3d63", "filename": "tests/ui/suggestions/suggest-trait-in-ufcs-in-hrtb.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.rs?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,8 @@\n+pub struct Bar<S>(S);\n+\n+pub trait Foo {}\n+\n+impl<S> Foo for Bar<S> where for<'a> <&'a S>::Item: Foo {}\n+//~^ ERROR ambiguous associated type\n+\n+fn main() {}"}, {"sha": "0ca5b9b920790d09252d594510069f84694c2b08", "filename": "tests/ui/suggestions/suggest-trait-in-ufcs-in-hrtb.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-trait-in-ufcs-in-hrtb.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -0,0 +1,9 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/suggest-trait-in-ufcs-in-hrtb.rs:5:38\n+   |\n+LL | impl<S> Foo for Bar<S> where for<'a> <&'a S>::Item: Foo {}\n+   |                                      ^^^^^^^^^^^^^ help: use the fully-qualified path: `<&'a S as IntoIterator>::Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0223`."}, {"sha": "b622122f33ea7cf6642ad2c8d18f86013edef0ed", "filename": "tests/ui/typeck/issue-31173.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Ftypeck%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/tests%2Fui%2Ftypeck%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-31173.stderr?ref=7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "patch": "@@ -24,8 +24,17 @@ note: required by a bound in `cloned`\n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut IntoIter<u8>, [closure@issue-31173.rs:7:21]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:12:10\n    |\n-LL |         .collect();\n-   |          ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n+LL |       let temp: Vec<u8> = it\n+   |  _________________________-\n+LL | |         .take_while(|&x| {\n+LL | |             found_e = true;\n+LL | |             false\n+LL | |         })\n+LL | |         .cloned()\n+LL | |         .collect();\n+   | |         -^^^^^^^ method cannot be called due to unsatisfied trait bounds\n+   | |_________|\n+   | \n   --> $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n    = note: doesn't satisfy `<_ as Iterator>::Item = &_`"}]}