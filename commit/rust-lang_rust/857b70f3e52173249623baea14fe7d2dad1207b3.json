{"sha": "857b70f3e52173249623baea14fe7d2dad1207b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1N2I3MGYzZTUyMTczMjQ5NjIzYmFlYTE0ZmU3ZDJkYWQxMjA3YjM=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-05-08T15:56:50Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-05-08T17:24:18Z"}, "message": "Please the `make tidy`", "tree": {"sha": "b75ce444519e61e2337c1bad1e24a9d75f9a04b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75ce444519e61e2337c1bad1e24a9d75f9a04b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/857b70f3e52173249623baea14fe7d2dad1207b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/857b70f3e52173249623baea14fe7d2dad1207b3", "html_url": "https://github.com/rust-lang/rust/commit/857b70f3e52173249623baea14fe7d2dad1207b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/857b70f3e52173249623baea14fe7d2dad1207b3/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1e6e046abf0766f176e39805dd34e3de064cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e6e046abf0766f176e39805dd34e3de064cb3", "html_url": "https://github.com/rust-lang/rust/commit/1e1e6e046abf0766f176e39805dd34e3de064cb3"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "2412bdc220ece0c722b91c72c7add96146481572", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/857b70f3e52173249623baea14fe7d2dad1207b3/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857b70f3e52173249623baea14fe7d2dad1207b3/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=857b70f3e52173249623baea14fe7d2dad1207b3", "patch": "@@ -24,7 +24,8 @@\n //! claim temporary, exclusive, mutable access to the inner value. Borrows for `RefCell<T>`s are\n //! tracked 'at runtime', unlike Rust's native reference types which are entirely tracked\n //! statically, at compile time. Because `RefCell<T>` borrows are dynamic it is possible to attempt\n-//! to borrow a value that is already mutably borrowed; when this happens it results in thread panic.\n+//! to borrow a value that is already mutably borrowed; when this happens it results in thread\n+//! panic.\n //!\n //! # When to choose interior mutability\n //!"}]}