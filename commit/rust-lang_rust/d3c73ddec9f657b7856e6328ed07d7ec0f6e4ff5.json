{"sha": "d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzczZGRlYzlmNjU3Yjc4NTZlNjMyOGVkMDdkN2VjMGY2ZTRmZjU=", "commit": {"author": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-19T17:53:35Z"}, "committer": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-24T01:36:06Z"}, "message": "typo", "tree": {"sha": "a491f8d2c717798d5775bcca5dd8d84e93a4932e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a491f8d2c717798d5775bcca5dd8d84e93a4932e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5", "html_url": "https://github.com/rust-lang/rust/commit/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5/comments", "author": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8869ee03d7f258e1b76a11c6fbb01b5708a9f504", "url": "https://api.github.com/repos/rust-lang/rust/commits/8869ee03d7f258e1b76a11c6fbb01b5708a9f504", "html_url": "https://github.com/rust-lang/rust/commit/8869ee03d7f258e1b76a11c6fbb01b5708a9f504"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "80341409037683e6db06685ec7b9c424839fdab7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d3c73ddec9f657b7856e6328ed07d7ec0f6e4ff5", "patch": "@@ -11,7 +11,7 @@\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n-//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allow doing this in a single-threaded\n //! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n //! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n //! use [`Mutex`](../../std/sync/struct.Mutex.html),"}]}