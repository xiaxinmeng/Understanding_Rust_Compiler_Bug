{"sha": "3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZGNjYzMxMWVmNGYyOWM2YmY4Njc2ZjdhNDE0ZjhiMGVmOTM2MGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-01T22:48:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-01T22:48:50Z"}, "message": "Support #[cfg] on methods", "tree": {"sha": "d549b68d12d06d8ee6917ef163a91a72d1231036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d549b68d12d06d8ee6917ef163a91a72d1231036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "html_url": "https://github.com/rust-lang/rust/commit/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768247f393a18ec56d7a92cded2545e6f7d92649", "url": "https://api.github.com/repos/rust-lang/rust/commits/768247f393a18ec56d7a92cded2545e6f7d92649", "html_url": "https://github.com/rust-lang/rust/commit/768247f393a18ec56d7a92cded2545e6f7d92649"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "8efe4c9944ca141b26d05340e1af3d2af3efac74", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "patch": "@@ -12,6 +12,7 @@ export noop_fold_pat;\n export noop_fold_mod;\n export noop_fold_ty;\n export noop_fold_block;\n+export noop_fold_item_underscore;\n export wrap;\n export fold_ty_param;\n export fold_ty_params;"}, {"sha": "bd4b4712393d589fd9810e0871457a72308bd209", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "patch": "@@ -27,6 +27,7 @@ fn strip_items(crate: @ast::crate, in_cfg: in_cfg_pred)\n         @{fold_mod: |a,b| fold_mod(ctxt, a, b),\n           fold_block: fold::wrap(|a,b| fold_block(ctxt, a, b) ),\n           fold_foreign_mod: |a,b| fold_foreign_mod(ctxt, a, b),\n+          fold_item_underscore: |a,b| fold_item_underscore(ctxt, a, b),\n           .. *fold::default_ast_fold()};\n \n     let fold = fold::make_fold(precursor);\n@@ -79,6 +80,22 @@ fn fold_foreign_mod(cx: ctxt, nm: ast::foreign_mod,\n     };\n }\n \n+fn fold_item_underscore(cx: ctxt, item: ast::item_, fld: fold::ast_fold) -> ast::item_ {\n+    let item = match item {\n+        ast::item_impl(a, b, c, Some(methods)) => {\n+            let methods = methods.filter(|m| method_in_cfg(cx, *m) );\n+            ast::item_impl(a, b, c, Some(methods))\n+        }\n+        ast::item_trait(a, b, ref methods) => {\n+            let methods = methods.filter(|m| trait_method_in_cfg(cx, m) );\n+            ast::item_trait(a, b, methods)\n+        }\n+        _ => item\n+    };\n+\n+    fold::noop_fold_item_underscore(item, fld)\n+}\n+\n fn filter_stmt(cx: ctxt, &&stmt: @ast::stmt) ->\n    Option<@ast::stmt> {\n     match stmt.node {\n@@ -118,6 +135,17 @@ fn view_item_in_cfg(cx: ctxt, item: @ast::view_item) -> bool {\n     return cx.in_cfg(item.attrs);\n }\n \n+fn method_in_cfg(cx: ctxt, meth: @ast::method) -> bool {\n+    return cx.in_cfg(meth.attrs);\n+}\n+\n+fn trait_method_in_cfg(cx: ctxt, meth: &ast::trait_method) -> bool {\n+    match *meth {\n+        ast::required(ref meth) => cx.in_cfg(meth.attrs),\n+        ast::provided(@ref meth) => cx.in_cfg(meth.attrs)\n+    }\n+}\n+\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n fn in_cfg(cfg: ast::crate_cfg, attrs: ~[ast::attribute]) -> bool {"}, {"sha": "cc2f0fec96f41a580d60ab94adce41dae3f592a8", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edccc311ef4f29c6bf8676f7a414f8b0ef9360d/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=3edccc311ef4f29c6bf8676f7a414f8b0ef9360d", "patch": "@@ -1,3 +1,7 @@\n+// Crate use statements\n+#[cfg(bogus)]\n+use flippity;\n+\n #[cfg(bogus)]\n const b: bool = false;\n \n@@ -115,4 +119,34 @@ mod test_use_statements {\n         #[cfg(bogus)]\n         use flippity_foo;\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+mod test_methods {\n+    struct Foo {\n+        bar: uint\n+    }\n+\n+    impl Foo: Fooable {\n+        #[cfg(bogus)]\n+        static fn what() { }\n+\n+        static fn what() { }\n+\n+        #[cfg(bogus)]\n+        fn the() { }\n+\n+        fn the() { }\n+    }\n+\n+    trait Fooable {\n+        #[cfg(bogus)]\n+        static fn what();\n+\n+        static fn what();\n+\n+        #[cfg(bogus)]\n+        fn the();\n+\n+        fn the();\n+    }\n+}"}]}