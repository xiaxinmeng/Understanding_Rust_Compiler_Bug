{"sha": "55aee8d49628ae8218e91745c388d5dc36771248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWVlOGQ0OTYyOGFlODIxOGU5MTc0NWMzODhkNWRjMzY3NzEyNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-29T03:52:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-29T03:52:53Z"}, "message": "Auto merge of #69255 - estebank:e0599-details, r=varkor\n\nAdd more context to E0599 errors\n\nPoint at the intermediary unfulfilled trait bounds.\n\nFix #52523, fix #61661, cc #36513, fix #68131, fix #64417, fix #61768, cc #57457, cc #9082, fix #57994, cc #64934, cc #65149.", "tree": {"sha": "512a6133c328d989a01912ced8f23c2de54faac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512a6133c328d989a01912ced8f23c2de54faac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55aee8d49628ae8218e91745c388d5dc36771248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55aee8d49628ae8218e91745c388d5dc36771248", "html_url": "https://github.com/rust-lang/rust/commit/55aee8d49628ae8218e91745c388d5dc36771248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55aee8d49628ae8218e91745c388d5dc36771248/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5703b7aafb70e77547e8f03876a5911a2e89a2a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5703b7aafb70e77547e8f03876a5911a2e89a2a5", "html_url": "https://github.com/rust-lang/rust/commit/5703b7aafb70e77547e8f03876a5911a2e89a2a5"}, {"sha": "2fb35adc4873017fa5d8fdd94ee0d508614cbc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb35adc4873017fa5d8fdd94ee0d508614cbc94", "html_url": "https://github.com/rust-lang/rust/commit/2fb35adc4873017fa5d8fdd94ee0d508614cbc94"}], "stats": {"total": 793, "additions": 635, "deletions": 158}, "files": [{"sha": "77c612cf34abd2937b985f305f3aea178f166302", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -581,6 +581,20 @@ impl<'tcx, N> Vtable<'tcx, N> {\n         }\n     }\n \n+    pub fn borrow_nested_obligations(&self) -> &[N] {\n+        match &self {\n+            VtableImpl(i) => &i.nested[..],\n+            VtableParam(n) => &n[..],\n+            VtableBuiltin(i) => &i.nested[..],\n+            VtableAutoImpl(d) => &d.nested[..],\n+            VtableClosure(c) => &c.nested[..],\n+            VtableGenerator(c) => &c.nested[..],\n+            VtableObject(d) => &d.nested[..],\n+            VtableFnPointer(d) => &d.nested[..],\n+            VtableTraitAlias(d) => &d.nested[..],\n+        }\n+    }\n+\n     pub fn map<M, F>(self, f: F) -> Vtable<'tcx, M>\n     where\n         F: FnMut(N) -> M,"}, {"sha": "5c0caa48d0e7784d53354e6b4fed78734fc318a3", "filename": "src/librustc_infer/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -645,8 +645,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     span,\n                     E0491,\n-                    \"in type `{}`, reference has a longer lifetime \\\n-                                                than the data it references\",\n+                    \"in type `{}`, reference has a longer lifetime than the data it references\",\n                     self.ty_to_string(ty)\n                 );\n                 note_and_explain_region("}, {"sha": "d5ad1e90d16f4a38932d92d6ec33b5a97762cba9", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,7 +1,6 @@\n use super::Parser;\n \n use rustc_errors::PResult;\n-use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause};\n use syntax::token;\n@@ -157,7 +156,10 @@ impl<'a> Parser<'a> {\n         };\n         Ok(ast::Generics {\n             params,\n-            where_clause: WhereClause { predicates: Vec::new(), span: DUMMY_SP },\n+            where_clause: WhereClause {\n+                predicates: Vec::new(),\n+                span: self.prev_span.shrink_to_hi(),\n+            },\n             span,\n         })\n     }"}, {"sha": "b09522bbd33dad57b6da5c160bf9a00a2ec1b9be", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -14,7 +14,7 @@ use crate::check::FnCtxt;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n-use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable, WithConstness};\n+use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -67,7 +67,7 @@ pub enum MethodError<'tcx> {\n // could lead to matches if satisfied, and a list of not-in-scope traits which may work.\n pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n-    pub unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n+    pub unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n     pub out_of_scope_traits: Vec<DefId>,\n     pub lev_candidate: Option<ty::AssocItem>,\n     pub mode: probe::Mode,\n@@ -76,7 +76,7 @@ pub struct NoMatchData<'tcx> {\n impl<'tcx> NoMatchData<'tcx> {\n     pub fn new(\n         static_candidates: Vec<CandidateSource>,\n-        unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n+        unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n         out_of_scope_traits: Vec<DefId>,\n         lev_candidate: Option<ty::AssocItem>,\n         mode: probe::Mode,"}, {"sha": "3e2826907b880dc7e5d5466d20aae6ed5ad47be2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -14,8 +14,7 @@ use rustc::session::config::nightly_options;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n-    self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n-    WithConstness,\n+    self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -78,7 +77,7 @@ struct ProbeContext<'a, 'tcx> {\n \n     /// Collects near misses when trait bounds for type parameters are unsatisfied and is only used\n     /// for error reporting\n-    unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n+    unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n }\n@@ -1224,7 +1223,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         self_ty: Ty<'tcx>,\n         probes: ProbesIter,\n-        possibly_unsatisfied_predicates: &mut Vec<TraitRef<'tcx>>,\n+        possibly_unsatisfied_predicates: &mut Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+        )>,\n         unstable_candidates: Option<&mut Vec<(&'b Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>>\n     where\n@@ -1343,7 +1345,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         self_ty: Ty<'tcx>,\n         probe: &Candidate<'tcx>,\n-        possibly_unsatisfied_predicates: &mut Vec<TraitRef<'tcx>>,\n+        possibly_unsatisfied_predicates: &mut Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+        )>,\n     ) -> ProbeResult {\n         debug!(\"consider_probe: self_ty={:?} probe={:?}\", self_ty, probe);\n \n@@ -1398,21 +1403,45 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let predicate = trait_ref.without_const().to_predicate();\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n-                        if self.probe(|_| self.select_trait_candidate(trait_ref).is_err()) {\n+                        if self.probe(|_| {\n+                            match self.select_trait_candidate(trait_ref) {\n+                                Err(_) => return true,\n+                                Ok(Some(vtable))\n+                                    if !vtable.borrow_nested_obligations().is_empty() =>\n+                                {\n+                                    for obligation in vtable.borrow_nested_obligations() {\n+                                        // Determine exactly which obligation wasn't met, so\n+                                        // that we can give more context in the error.\n+                                        if !self.predicate_may_hold(&obligation) {\n+                                            result = ProbeResult::NoMatch;\n+                                            let o = self.resolve_vars_if_possible(obligation);\n+                                            let predicate =\n+                                                self.resolve_vars_if_possible(&predicate);\n+                                            let p = if predicate == o.predicate {\n+                                                // Avoid \"`MyStruct: Foo` which is required by\n+                                                // `MyStruct: Foo`\" in E0599.\n+                                                None\n+                                            } else {\n+                                                Some(predicate)\n+                                            };\n+                                            possibly_unsatisfied_predicates.push((o.predicate, p));\n+                                        }\n+                                    }\n+                                }\n+                                _ => {\n+                                    // Some nested subobligation of this predicate\n+                                    // failed.\n+                                    result = ProbeResult::NoMatch;\n+                                    let predicate = self.resolve_vars_if_possible(&predicate);\n+                                    possibly_unsatisfied_predicates.push((predicate, None));\n+                                }\n+                            }\n+                            false\n+                        }) {\n                             // This candidate's primary obligation doesn't even\n                             // select - don't bother registering anything in\n                             // `potentially_unsatisfied_predicates`.\n                             return ProbeResult::NoMatch;\n-                        } else {\n-                            // Some nested subobligation of this predicate\n-                            // failed.\n-                            //\n-                            // FIXME: try to find the exact nested subobligation\n-                            // and point at it rather than reporting the entire\n-                            // trait-ref?\n-                            result = ProbeResult::NoMatch;\n-                            let trait_ref = self.resolve_vars_if_possible(&trait_ref);\n-                            possibly_unsatisfied_predicates.push(trait_ref);\n                         }\n                     }\n                     vec![]\n@@ -1429,9 +1458,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let o = self.resolve_vars_if_possible(&o);\n                 if !self.predicate_may_hold(&o) {\n                     result = ProbeResult::NoMatch;\n-                    if let &ty::Predicate::Trait(ref pred, _) = &o.predicate {\n-                        possibly_unsatisfied_predicates.push(pred.skip_binder().trait_ref);\n-                    }\n+                    possibly_unsatisfied_predicates.push((o.predicate, None));\n                 }\n             }\n "}, {"sha": "44f87319ebf4fae5ff4d6d2877d33fde97e93204", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 239, "deletions": 24, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::map as hir_map;\n use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n@@ -16,6 +16,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n+use rustc_span::symbol::kw;\n use rustc_span::{source_map, FileName, Span};\n use syntax::ast;\n use syntax::util::lev_distance;\n@@ -496,7 +497,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if !static_sources.is_empty() {\n                     err.note(\n                         \"found the following associated functions; to be used as methods, \\\n-                              functions must have a `self` parameter\",\n+                         functions must have a `self` parameter\",\n                     );\n                     err.span_label(span, \"this is an associated function, not a method\");\n                 }\n@@ -534,22 +535,159 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     report_candidates(span, &mut err, static_sources, sugg_span);\n                 }\n \n+                let mut restrict_type_params = false;\n                 if !unsatisfied_predicates.is_empty() {\n+                    let def_span =\n+                        |def_id| self.tcx.sess.source_map().def_span(self.tcx.def_span(def_id));\n+                    let mut type_params = FxHashMap::default();\n+                    let mut bound_spans = vec![];\n+                    let mut collect_type_param_suggestions =\n+                        |self_ty: Ty<'_>, parent_pred: &ty::Predicate<'_>, obligation: &str| {\n+                            if let (ty::Param(_), ty::Predicate::Trait(p, _)) =\n+                                (&self_ty.kind, parent_pred)\n+                            {\n+                                if let ty::Adt(def, _) = p.skip_binder().trait_ref.self_ty().kind {\n+                                    let id = self.tcx.hir().as_local_hir_id(def.did).unwrap();\n+                                    let node = self.tcx.hir().get(id);\n+                                    match node {\n+                                        hir::Node::Item(hir::Item { kind, .. }) => {\n+                                            if let Some(g) = kind.generics() {\n+                                                let key = match &g.where_clause.predicates[..] {\n+                                                    [.., pred] => {\n+                                                        (pred.span().shrink_to_hi(), false)\n+                                                    }\n+                                                    [] => (\n+                                                        g.where_clause\n+                                                            .span_for_predicates_or_empty_place(),\n+                                                        true,\n+                                                    ),\n+                                                };\n+                                                type_params\n+                                                    .entry(key)\n+                                                    .or_insert_with(FxHashSet::default)\n+                                                    .insert(obligation.to_owned());\n+                                            }\n+                                        }\n+                                        _ => {}\n+                                    }\n+                                }\n+                            }\n+                        };\n+                    let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str, quiet: &str| {\n+                        let msg = format!(\n+                            \"doesn't satisfy `{}`\",\n+                            if obligation.len() > 50 { quiet } else { obligation }\n+                        );\n+                        match &self_ty.kind {\n+                            // Point at the type that couldn't satisfy the bound.\n+                            ty::Adt(def, _) => bound_spans.push((def_span(def.did), msg)),\n+                            // Point at the trait object that couldn't satisfy the bound.\n+                            ty::Dynamic(preds, _) => {\n+                                for pred in *preds.skip_binder() {\n+                                    match pred {\n+                                        ty::ExistentialPredicate::Trait(tr) => {\n+                                            bound_spans.push((def_span(tr.def_id), msg.clone()))\n+                                        }\n+                                        ty::ExistentialPredicate::Projection(_)\n+                                        | ty::ExistentialPredicate::AutoTrait(_) => {}\n+                                    }\n+                                }\n+                            }\n+                            // Point at the closure that couldn't satisfy the bound.\n+                            ty::Closure(def_id, _) => bound_spans\n+                                .push((def_span(*def_id), format!(\"doesn't satisfy `{}`\", quiet))),\n+                            _ => {}\n+                        }\n+                    };\n+                    let mut format_pred = |pred| {\n+                        match pred {\n+                            ty::Predicate::Projection(pred) => {\n+                                // `<Foo as Iterator>::Item = String`.\n+                                let trait_ref =\n+                                    pred.skip_binder().projection_ty.trait_ref(self.tcx);\n+                                let assoc = self\n+                                    .tcx\n+                                    .associated_item(pred.skip_binder().projection_ty.item_def_id);\n+                                let ty = pred.skip_binder().ty;\n+                                let obligation = format!(\"{}::{} = {}\", trait_ref, assoc.ident, ty);\n+                                let quiet = format!(\n+                                    \"<_ as {}>::{} = {}\",\n+                                    trait_ref.print_only_trait_path(),\n+                                    assoc.ident,\n+                                    ty\n+                                );\n+                                bound_span_label(trait_ref.self_ty(), &obligation, &quiet);\n+                                Some((obligation, trait_ref.self_ty()))\n+                            }\n+                            ty::Predicate::Trait(poly_trait_ref, _) => {\n+                                let p = poly_trait_ref.skip_binder().trait_ref;\n+                                let self_ty = p.self_ty();\n+                                let path = p.print_only_trait_path();\n+                                let obligation = format!(\"{}: {}\", self_ty, path);\n+                                let quiet = format!(\"_: {}\", path);\n+                                bound_span_label(self_ty, &obligation, &quiet);\n+                                Some((obligation, self_ty))\n+                            }\n+                            _ => None,\n+                        }\n+                    };\n                     let mut bound_list = unsatisfied_predicates\n                         .iter()\n-                        .map(|p| format!(\"`{} : {}`\", p.self_ty(), p.print_only_trait_path()))\n-                        .collect::<Vec<_>>();\n-                    bound_list.sort();\n-                    bound_list.dedup(); // #35677\n-                    let bound_list = bound_list.join(\"\\n\");\n-                    err.note(&format!(\n-                        \"the method `{}` exists but the following trait bounds \\\n-                                       were not satisfied:\\n{}\",\n-                        item_name, bound_list\n-                    ));\n+                        .filter_map(|(pred, parent_pred)| {\n+                            format_pred(*pred).map(|(p, self_ty)| match parent_pred {\n+                                None => format!(\"`{}`\", p),\n+                                Some(parent_pred) => match format_pred(*parent_pred) {\n+                                    None => format!(\"`{}`\", p),\n+                                    Some((parent_p, _)) => {\n+                                        collect_type_param_suggestions(self_ty, parent_pred, &p);\n+                                        format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n+                                    }\n+                                },\n+                            })\n+                        })\n+                        .enumerate()\n+                        .collect::<Vec<(usize, String)>>();\n+                    for ((span, empty_where), obligations) in type_params.into_iter() {\n+                        restrict_type_params = true;\n+                        err.span_suggestion_verbose(\n+                            span,\n+                            &format!(\n+                                \"consider restricting the type parameter{s} to satisfy the \\\n+                                 trait bound{s}\",\n+                                s = pluralize!(obligations.len())\n+                            ),\n+                            format!(\n+                                \"{} {}\",\n+                                if empty_where { \" where\" } else { \",\" },\n+                                obligations.into_iter().collect::<Vec<_>>().join(\", \")\n+                            ),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+\n+                    bound_list.sort_by(|(_, a), (_, b)| a.cmp(&b)); // Sort alphabetically.\n+                    bound_list.dedup_by(|(_, a), (_, b)| a == b); // #35677\n+                    bound_list.sort_by_key(|(pos, _)| *pos); // Keep the original predicate order.\n+                    bound_spans.sort();\n+                    bound_spans.dedup();\n+                    for (span, msg) in bound_spans.into_iter() {\n+                        err.span_label(span, &msg);\n+                    }\n+                    if !bound_list.is_empty() {\n+                        let bound_list = bound_list\n+                            .into_iter()\n+                            .map(|(_, path)| path)\n+                            .collect::<Vec<_>>()\n+                            .join(\"\\n\");\n+                        err.note(&format!(\n+                            \"the method `{}` exists but the following trait bounds were not \\\n+                             satisfied:\\n{}\",\n+                            item_name, bound_list\n+                        ));\n+                    }\n                 }\n \n-                if actual.is_numeric() && actual.is_fresh() {\n+                if actual.is_numeric() && actual.is_fresh() || restrict_type_params {\n                 } else {\n                     self.suggest_traits_to_import(\n                         &mut err,\n@@ -558,6 +696,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         item_name,\n                         source,\n                         out_of_scope_traits,\n+                        &unsatisfied_predicates,\n                     );\n                 }\n \n@@ -757,13 +896,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: ast::Ident,\n         source: SelfSource<'b>,\n         valid_out_of_scope_traits: Vec<DefId>,\n+        unsatisfied_predicates: &[(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)],\n     ) {\n         if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n         }\n \n         let type_is_local = self.type_derefs_to_local(span, rcvr_ty, source);\n \n+        let mut arbitrary_rcvr = vec![];\n         // There are no traits implemented, so lets suggest some traits to\n         // implement, by finding ones that have the item name, and are\n         // legal to implement.\n@@ -776,16 +917,71 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // this isn't perfect (that is, there are cases when\n                 // implementing a trait would be legal but is rejected\n                 // here).\n-                (type_is_local || info.def_id.is_local())\n+                !unsatisfied_predicates.iter().any(|(p, _)| match p {\n+                    // Hide traits if they are present in predicates as they can be fixed without\n+                    // having to implement them.\n+                    ty::Predicate::Trait(t, _) => t.def_id() != info.def_id,\n+                    ty::Predicate::Projection(p) => p.item_def_id() != info.def_id,\n+                    _ => true,\n+                }) && (type_is_local || info.def_id.is_local())\n                     && self\n                         .associated_item(info.def_id, item_name, Namespace::ValueNS)\n                         .filter(|item| {\n+                            if let ty::AssocKind::Method = item.kind {\n+                                let id = self.tcx.hir().as_local_hir_id(item.def_id);\n+                                if let Some(hir::Node::TraitItem(hir::TraitItem {\n+                                    kind: hir::TraitItemKind::Method(fn_sig, method),\n+                                    ..\n+                                })) = id.map(|id| self.tcx.hir().get(id))\n+                                {\n+                                    let self_first_arg = match method {\n+                                        hir::TraitMethod::Required([ident, ..]) => {\n+                                            ident.name == kw::SelfLower\n+                                        }\n+                                        hir::TraitMethod::Provided(body_id) => {\n+                                            match &self.tcx.hir().body(*body_id).params[..] {\n+                                                [hir::Param {\n+                                                    pat:\n+                                                        hir::Pat {\n+                                                            kind:\n+                                                                hir::PatKind::Binding(\n+                                                                    _,\n+                                                                    _,\n+                                                                    ident,\n+                                                                    ..,\n+                                                                ),\n+                                                            ..\n+                                                        },\n+                                                    ..\n+                                                }, ..] => ident.name == kw::SelfLower,\n+                                                _ => false,\n+                                            }\n+                                        }\n+                                        _ => false,\n+                                    };\n+\n+                                    if !fn_sig.decl.implicit_self.has_implicit_self()\n+                                        && self_first_arg\n+                                    {\n+                                        if let Some(ty) = fn_sig.decl.inputs.get(0) {\n+                                            arbitrary_rcvr.push(ty.span);\n+                                        }\n+                                        return false;\n+                                    }\n+                                }\n+                            }\n                             // We only want to suggest public or local traits (#45781).\n                             item.vis == ty::Visibility::Public || info.def_id.is_local()\n                         })\n                         .is_some()\n             })\n             .collect::<Vec<_>>();\n+        for span in &arbitrary_rcvr {\n+            err.span_label(\n+                *span,\n+                \"the method might not be found because of this arbitrary self type\",\n+            );\n+        }\n \n         if !candidates.is_empty() {\n             // Sort from most relevant to least relevant.\n@@ -808,7 +1004,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let message = |action| {\n                 format!(\n                     \"the following {traits_define} an item `{name}`, perhaps you need to {action} \\\n-                 {one_of_them}:\",\n+                     {one_of_them}:\",\n                     traits_define =\n                         if candidates.len() == 1 { \"trait defines\" } else { \"traits define\" },\n                     action = action,\n@@ -906,19 +1102,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             if !suggested {\n-                let mut msg = message(if let Some(param) = param_type {\n+                let action = if let Some(param) = param_type {\n                     format!(\"restrict type parameter `{}` with\", param)\n                 } else {\n+                    // FIXME: it might only need to be imported into scope, not implemented.\n                     \"implement\".to_string()\n-                });\n-                for (i, trait_info) in candidates.iter().enumerate() {\n-                    msg.push_str(&format!(\n-                        \"\\ncandidate #{}: `{}`\",\n-                        i + 1,\n-                        self.tcx.def_path_str(trait_info.def_id),\n-                    ));\n+                };\n+                let mut use_note = true;\n+                if let [trait_info] = &candidates[..] {\n+                    if let Some(span) = self.tcx.hir().span_if_local(trait_info.def_id) {\n+                        err.span_note(\n+                            self.tcx.sess.source_map().def_span(span),\n+                            &format!(\n+                                \"`{}` defines an item `{}`, perhaps you need to {} it\",\n+                                self.tcx.def_path_str(trait_info.def_id),\n+                                item_name,\n+                                action\n+                            ),\n+                        );\n+                        use_note = false\n+                    }\n+                }\n+                if use_note {\n+                    let mut msg = message(action);\n+                    for (i, trait_info) in candidates.iter().enumerate() {\n+                        msg.push_str(&format!(\n+                            \"\\ncandidate #{}: `{}`\",\n+                            i + 1,\n+                            self.tcx.def_path_str(trait_info.def_id),\n+                        ));\n+                    }\n+                    err.note(&msg[..]);\n                 }\n-                err.note(&msg[..]);\n             }\n         }\n     }"}, {"sha": "fe27da5ac645f5329c2cbaaae1cb6e66090adf6b", "filename": "src/test/ui/associated-const/associated-const-no-item.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,8 +5,11 @@ LL | const X: i32 = <i32>::ID;\n    |                       ^^ associated item not found in `i32`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `ID`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n+note: `Foo` defines an item `ID`, perhaps you need to implement it\n+  --> $DIR/associated-const-no-item.rs:1:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "50ca5cad4bc6893d39dcdd3201e9161e73fe80f1", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,8 +5,11 @@ LL |     a.test_mut();\n    |       ^^^^^^^^ help: there is a method with a similar name: `get_mut`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `test_mut`, perhaps you need to implement it:\n-           candidate #1: `MyIter`\n+note: `MyIter` defines an item `test_mut`, perhaps you need to implement it\n+  --> $DIR/auto-ref-slice-plus-ref.rs:14:1\n+   |\n+LL | trait MyIter {\n+   | ^^^^^^^^^^^^\n \n error[E0599]: no method named `test` found for struct `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n@@ -15,8 +18,11 @@ LL |     a.test();\n    |       ^^^^ method not found in `std::vec::Vec<{integer}>`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `test`, perhaps you need to implement it:\n-           candidate #1: `MyIter`\n+note: `MyIter` defines an item `test`, perhaps you need to implement it\n+  --> $DIR/auto-ref-slice-plus-ref.rs:14:1\n+   |\n+LL | trait MyIter {\n+   | ^^^^^^^^^^^^\n \n error[E0599]: no method named `test` found for array `[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:10:11\n@@ -25,8 +31,11 @@ LL |     ([1]).test();\n    |           ^^^^ method not found in `[{integer}; 1]`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `test`, perhaps you need to implement it:\n-           candidate #1: `MyIter`\n+note: `MyIter` defines an item `test`, perhaps you need to implement it\n+  --> $DIR/auto-ref-slice-plus-ref.rs:14:1\n+   |\n+LL | trait MyIter {\n+   | ^^^^^^^^^^^^\n \n error[E0599]: no method named `test` found for reference `&[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:11:12\n@@ -35,8 +44,11 @@ LL |     (&[1]).test();\n    |            ^^^^ method not found in `&[{integer}; 1]`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `test`, perhaps you need to implement it:\n-           candidate #1: `MyIter`\n+note: `MyIter` defines an item `test`, perhaps you need to implement it\n+  --> $DIR/auto-ref-slice-plus-ref.rs:14:1\n+   |\n+LL | trait MyIter {\n+   | ^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8836de0023c9d5370527f918b42cebcb27bc7d35", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -8,8 +8,8 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |                   ^^^^^^^^^ associated item not found in `Foo<A, B>`\n    |\n    = note: the method `HOST_SIZE` exists but the following trait bounds were not satisfied:\n-           `A : std::marker::Sized`\n-           `B : std::marker::Sized`\n+           `A: std::marker::Sized`\n+           `B: std::marker::Sized`\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/too_generic_eval_ice.rs:7:13"}, {"sha": "c4c85773fbc1d26c3b7bebbeb6c4dde80f9a0a4a", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -2,13 +2,20 @@ error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the cu\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n-   | ------------------ method `clone` not found for this\n+   | ------------------\n+   | |\n+   | method `clone` not found for this\n+   | doesn't satisfy `Bar<NotClone>: std::clone::Clone`\n+...\n+LL | struct NotClone;\n+   | ---------------- doesn't satisfy `NotClone: std::clone::Clone`\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method not found in `Bar<NotClone>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `Bar<NotClone> : std::clone::Clone`\n+           `NotClone: std::clone::Clone`\n+           which is required by `Bar<NotClone>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "64cce056a2688dfdc660eba738dd22b62e704c16", "filename": "src/test/ui/impl-trait/issues/issue-21659-show-relevant-trait-impls-3.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -8,8 +8,11 @@ LL |     f1.foo(1usize);\n    |        ^^^ method not found in `Bar`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `foo`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n+note: `Foo` defines an item `foo`, perhaps you need to implement it\n+  --> $DIR/issue-21659-show-relevant-trait-impls-3.rs:1:1\n+   |\n+LL | trait Foo<A> {\n+   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c0ca341385df5f8d98e95d9cf6d437c35d03a0b5", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -126,8 +126,11 @@ LL |     1u64.method2();\n    |          ^^^^^^^ method not found in `u64`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:47:44\n@@ -136,8 +139,11 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n    |                                            ^^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&u64>>`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method2` found for struct `no_method_suggested_traits::Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:50:37\n@@ -146,8 +152,11 @@ LL |     no_method_suggested_traits::Foo.method2();\n    |                                     ^^^^^^^ method not found in `no_method_suggested_traits::Foo`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:71\n@@ -156,8 +165,11 @@ LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).metho\n    |                                                                       ^^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method2` found for enum `no_method_suggested_traits::Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:54:40\n@@ -166,8 +178,11 @@ LL |     no_method_suggested_traits::Bar::X.method2();\n    |                                        ^^^^^^^ method not found in `no_method_suggested_traits::Bar`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:56:74\n@@ -176,8 +191,11 @@ LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).me\n    |                                                                          ^^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-           candidate #1: `foo::Bar`\n+note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n+  --> $DIR/no-method-suggested-traits.rs:8:5\n+   |\n+LL |     pub trait Bar {\n+   |     ^^^^^^^^^^^^^\n \n error[E0599]: no method named `method3` found for struct `Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:59:9"}, {"sha": "3e0a532b2b8f37b378515a05ee866010035632d4", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -7,7 +7,8 @@ LL |     println!(\"{}\", z.to_string());\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n-           `*const u8 : std::string::ToString`\n+           `*const u8: std::fmt::Display`\n+           which is required by `*const u8: std::string::ToString`\n \n error: aborting due to previous error\n "}, {"sha": "25be266c5289332cd74c311a2340060efc8c1bf9", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n use std::vec::IntoIter;\n \n pub fn get_tok(it: &mut IntoIter<u8>) {"}, {"sha": "20bfdeea4b1fac7dbe7302b2352f192d04ccb28b", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,21 +1,31 @@\n-error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-31173.rs:10:10\n+error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n+  --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .cloned()\n    |          ^^^^^^ expected `u8`, found reference\n    |\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n-  --> $DIR/issue-31173.rs:14:10\n+error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>` in the current scope\n+  --> $DIR/issue-31173.rs:18:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>`\n+   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n+   |\n+LL | pub struct Cloned<I> {\n+   | -------------------- doesn't satisfy `_: std::iter::Iterator`\n+...\n+LL | pub struct TakeWhile<I, P> {\n+   | -------------------------- doesn't satisfy `<_ as std::iter::Iterator>::Item = &_`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>> : std::iter::Iterator`\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>> : std::iter::Iterator`\n+           `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n+           which is required by `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           which is required by `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "978221e502f80b11d5bb6c7ef7dc1d8fbf0a186e", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,8 +5,8 @@ LL |     this.is_subset(other)\n    |          ^^^^^^^^^ method not found in `&std::collections::HashSet<T>`\n    |\n    = note: the method `is_subset` exists but the following trait bounds were not satisfied:\n-           `T : std::cmp::Eq`\n-           `T : std::hash::Hash`\n+           `T: std::cmp::Eq`\n+           `T: std::hash::Hash`\n \n error: aborting due to previous error\n "}, {"sha": "5db521536a804058def4aacb43b05f362045c534", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &Some(42).as_deref();\n    |                             ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "f2133c8c84d21c542305d9674ba3bd8b66b39691", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &mut Some(42).as_deref_mut();\n    |                                 ^^^^^^^^^^^^ method not found in `std::option::Option<{integer}>`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "2dfc6d53750e703fc12d98cea40f71b8b0a2947b", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &Ok(42).as_deref();\n    |                           ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "1d65c57e5e9ec182321a49156864111310ca2d70", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &Err(41).as_deref_err();\n    |                            ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "2f4bf0c94b5cb038a20d0be493dfe82fb6f01887", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &mut Ok(42).as_deref_mut();\n    |                               ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_err`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "b76d36c804e5f522fcba291b5946ecac68b9f67c", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,7 +5,8 @@ LL |     let _result = &mut Err(41).as_deref_mut_err();\n    |                                ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n+           `<{integer} as std::ops::Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "93aaf4b9d823758dd83840a8fb5327e79e228613", "filename": "src/test/ui/issues/issue-5153.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,12 +1,11 @@\n error[E0599]: no method named `foo` found for reference `&dyn Foo` in the current scope\n   --> $DIR/issue-5153.rs:10:27\n    |\n+LL |     fn foo(self: Box<Self>);\n+   |                  --------- the method might not be found because of this arbitrary self type\n+...\n LL |     (&5isize as &dyn Foo).foo();\n    |                           ^^^ method not found in `&dyn Foo`\n-   |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `foo`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "5c611cd43d3ccdf77c39e938c62ecceb778492e8", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -6,8 +6,11 @@ LL |     a.f();\n    |\n    = note: `a` is a function, perhaps you wish to call it\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `f`, perhaps you need to implement it:\n-           candidate #1: `Trait`\n+note: `Trait` defines an item `f`, perhaps you need to implement it\n+  --> $DIR/issue-57362-1.rs:8:1\n+   |\n+LL | trait Trait {\n+   | ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2edc00974645530ad741960f43c8b1d3f3a5e6ec", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -5,8 +5,11 @@ LL |     let x = <fn (&())>::make_g();\n    |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `make_g`, perhaps you need to implement it:\n-           candidate #1: `X`\n+note: `X` defines an item `make_g`, perhaps you need to implement it\n+  --> $DIR/issue-57362-2.rs:8:1\n+   |\n+LL | trait X {\n+   | ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4678642dd6d0cb9bfff87afa1879d6af72ae7b3d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -35,17 +35,20 @@ error[E0599]: no method named `take` found for struct `Foo` in the current scope\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n-   | --------------- method `take` not found for this\n+   | ---------------\n+   | |\n+   | method `take` not found for this\n+   | doesn't satisfy `Foo: std::iter::Iterator`\n ...\n LL |      .take()\n    |       ^^^^ method not found in `Foo`\n    |\n    = note: the method `take` exists but the following trait bounds were not satisfied:\n-           `&mut Foo : std::iter::Iterator`\n+           `Foo: std::iter::Iterator`\n+           which is required by `&mut Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following traits define an item `take`, perhaps you need to implement one of them:\n-           candidate #1: `std::io::Read`\n-           candidate #2: `std::iter::Iterator`\n+   = note: the following trait defines an item `take`, perhaps you need to implement it:\n+           candidate #1: `std::iter::Iterator`\n \n error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7"}, {"sha": "36211b4ce701d18082d0fb032feacda9856c2b7a", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n // Regression test for #36053. ICE was caused due to obligations\n // being added to a special, dedicated fulfillment cx during\n // a probe."}, {"sha": "f8c0470172d1989b542a95c00300d61f806c6b5f", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,15 +1,27 @@\n-error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n-  --> $DIR/issue-36053-2.rs:7:55\n+error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>` in the current scope\n+  --> $DIR/issue-36053-2.rs:11:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                                       ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`\n+   |                                       --------------  ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>`\n+   |                                       |\n+   |                                       doesn't satisfy `<_ as std::ops::FnOnce<(&&str,)>>::Output = bool`\n+   |                                       doesn't satisfy `_: std::ops::FnMut<(&&str,)>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n+   |\n+LL | pub struct Filter<I, P> {\n+   | ----------------------- doesn't satisfy `_: std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]> : std::iter::Iterator`\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]> : std::iter::Iterator`\n+           `<[closure@$DIR/issue-36053-2.rs:11:39: 11:53] as std::ops::FnOnce<(&&str,)>>::Output = bool`\n+           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&&str,)>`\n+           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           which is required by `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-36053-2.rs:7:32\n+  --> $DIR/issue-36053-2.rs:11:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`"}, {"sha": "5ab191b9270491a4cb5a47a4953126ec1c5b2e4a", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,11 +1,14 @@\n error[E0599]: no method named `unwrap` found for enum `std::result::Result<(), Foo>` in the current scope\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n+LL | struct Foo;\n+   | ----------- doesn't satisfy `Foo: std::fmt::Debug`\n+...\n LL |     a.unwrap();\n    |       ^^^^^^ method not found in `std::result::Result<(), Foo>`\n    |\n    = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n-           `Foo : std::fmt::Debug`\n+           `Foo: std::fmt::Debug`\n \n error: aborting due to previous error\n "}, {"sha": "3cdd6372ec18c3959b58f151242d60be42435170", "filename": "src/test/ui/never_type/issue-2149.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -13,8 +13,11 @@ LL |     [\"hi\"].bind(|x| [x] );\n    |            ^^^^ method not found in `[&str; 1]`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `bind`, perhaps you need to implement it:\n-           candidate #1: `VecMonad`\n+note: `VecMonad` defines an item `bind`, perhaps you need to implement it\n+  --> $DIR/issue-2149.rs:1:1\n+   |\n+LL | trait VecMonad<A> {\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "021aa8670f78f7b46027091c63ea6c4e008247fb", "filename": "src/test/ui/object-pointer-types.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-pointer-types.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,22 +1,20 @@\n error[E0599]: no method named `owned` found for reference `&dyn Foo` in the current scope\n   --> $DIR/object-pointer-types.rs:11:7\n    |\n+LL |     fn owned(self: Box<Self>);\n+   |                    --------- the method might not be found because of this arbitrary self type\n+...\n LL |     x.owned();\n    |       ^^^^^ method not found in `&dyn Foo`\n-   |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `owned`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n \n error[E0599]: no method named `owned` found for mutable reference `&mut dyn Foo` in the current scope\n   --> $DIR/object-pointer-types.rs:17:7\n    |\n+LL |     fn owned(self: Box<Self>);\n+   |                    --------- the method might not be found because of this arbitrary self type\n+...\n LL |     x.owned();\n    |       ^^^^^ method not found in `&mut dyn Foo`\n-   |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `owned`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n \n error[E0599]: no method named `managed` found for struct `std::boxed::Box<(dyn Foo + 'static)>` in the current scope\n   --> $DIR/object-pointer-types.rs:23:7"}, {"sha": "37873031da3e982ad9847868c3023f2e0d9ea917", "filename": "src/test/ui/self/point-at-arbitrary-self-type-trait-method.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -2,16 +2,14 @@ error[E0599]: no method named `foo` found for struct `A` in the current scope\n   --> $DIR/point-at-arbitrary-self-type-trait-method.rs:9:7\n    |\n LL | trait B { fn foo(self: Box<Self>); }\n-   |              --- the method is available for `std::boxed::Box<A>` here\n+   |              ---       --------- the method might not be found because of this arbitrary self type\n+   |              |\n+   |              the method is available for `std::boxed::Box<A>` here\n LL | struct A;\n    | --------- method `foo` not found for this\n ...\n LL |     A.foo()\n    |       ^^^ method not found in `A`\n-   |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `foo`, perhaps you need to implement it:\n-           candidate #1: `B`\n \n error: aborting due to previous error\n "}, {"sha": "a55d79ee03534ee5746fbb4823ea108c9c52e443", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -2,16 +2,22 @@ error[E0599]: no method named `foo_one` found for struct `MyStruct` in the curre\n   --> $DIR/specialization-trait-not-implemented.rs:22:29\n    |\n LL | struct MyStruct;\n-   | ---------------- method `foo_one` not found for this\n+   | ----------------\n+   | |\n+   | method `foo_one` not found for this\n+   | doesn't satisfy `MyStruct: Foo`\n ...\n LL |     println!(\"{}\", MyStruct.foo_one());\n    |                             ^^^^^^^ method not found in `MyStruct`\n    |\n    = note: the method `foo_one` exists but the following trait bounds were not satisfied:\n-           `MyStruct : Foo`\n+           `MyStruct: Foo`\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `foo_one`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n+note: `Foo` defines an item `foo_one`, perhaps you need to implement it\n+  --> $DIR/specialization-trait-not-implemented.rs:7:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fefdf149f556c85cfe029f7fb4ce7f90609b324c", "filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -0,0 +1,31 @@\n+#[derive(Default, PartialEq)]\n+struct Foo<T> {\n+    bar: Box<[T]>,\n+}\n+\n+trait Bar {\n+    fn foo(&self) {}\n+}\n+\n+impl<T: Default + Bar> Bar for Foo<T> {}\n+\n+impl<T> Foo<T> {\n+    fn bar(&self) {\n+        self.foo();\n+        //~^ ERROR no method named `foo` found for reference `&Foo<T>` in the current scope\n+    }\n+}\n+\n+struct Fin<T> where T: Bar {\n+    bar: Box<[T]>,\n+}\n+\n+impl<T: Default + Bar> Bar for Fin<T> {}\n+\n+impl<T: Bar> Fin<T> {\n+    fn bar(&self) {\n+        self.foo();\n+        //~^ ERROR no method named `foo` found for reference `&Fin<T>` in the current scope\n+    }\n+}\n+fn main() {}"}, {"sha": "c6d94826c0c86b5ea98a99de4d7fcc48ec7797b0", "filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -0,0 +1,39 @@\n+error[E0599]: no method named `foo` found for reference `&Foo<T>` in the current scope\n+  --> $DIR/missing-trait-bounds-for-method-call.rs:14:14\n+   |\n+LL | struct Foo<T> {\n+   | ------------- doesn't satisfy `Foo<T>: Bar`\n+...\n+LL |         self.foo();\n+   |              ^^^ method not found in `&Foo<T>`\n+   |\n+   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+           `T: Bar`\n+           which is required by `Foo<T>: Bar`\n+           `T: std::default::Default`\n+           which is required by `Foo<T>: Bar`\n+help: consider restricting the type parameters to satisfy the trait bounds\n+   |\n+LL | struct Foo<T> where T: Bar, T: std::default::Default {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `foo` found for reference `&Fin<T>` in the current scope\n+  --> $DIR/missing-trait-bounds-for-method-call.rs:27:14\n+   |\n+LL | struct Fin<T> where T: Bar {\n+   | -------------------------- doesn't satisfy `Fin<T>: Bar`\n+...\n+LL |         self.foo();\n+   |              ^^^ method not found in `&Fin<T>`\n+   |\n+   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+           `T: std::default::Default`\n+           which is required by `Fin<T>: Bar`\n+help: consider restricting the type parameter to satisfy the trait bound\n+   |\n+LL | struct Fin<T> where T: Bar, T: std::default::Default {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "49a37498fd95522f413ca6f43e26f8cf87488409", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n use std::env::args;\n use std::fs::File;\n use std::io::{stdout, Write, BufWriter};"}, {"sha": "e4234cfcd51126fdf05601644c80c8238be366d6", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:29\n    |\n LL |     let fp = BufWriter::new(fp);\n    |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -8,7 +8,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -17,7 +17,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -26,13 +26,19 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&dyn std::io::Write>` in the current scope\n-  --> $DIR/mut-borrow-needed-by-trait.rs:22:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:26:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::io::BufWriter<&dyn std::io::Write>`\n+   | \n+  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   | ------------------------------ doesn't satisfy `_: std::io::Write`\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n-           `std::io::BufWriter<&dyn std::io::Write> : std::io::Write`\n+           `&dyn std::io::Write: std::io::Write`\n+           which is required by `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "2c0591c95f69086b4ccdae985aeeefb2af479df4", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -8,8 +8,11 @@ LL |     S.a();\n    |       ^ method not found in `S`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `a`, perhaps you need to implement it:\n-           candidate #1: `method::A`\n+note: `method::A` defines an item `a`, perhaps you need to implement it\n+  --> $DIR/trait-item-privacy.rs:6:5\n+   |\n+LL |     trait A {\n+   |     ^^^^^^^\n \n error[E0599]: no method named `b` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:68:7\n@@ -49,8 +52,11 @@ LL |     S::a(&S);\n    |        ^ function or associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `a`, perhaps you need to implement it:\n-           candidate #1: `method::A`\n+note: `method::A` defines an item `a`, perhaps you need to implement it\n+  --> $DIR/trait-item-privacy.rs:6:5\n+   |\n+LL |     trait A {\n+   |     ^^^^^^^\n \n error[E0599]: no function or associated item named `b` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:80:8\n@@ -83,8 +89,11 @@ LL |     S::A;\n    |        ^ associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `A`, perhaps you need to implement it:\n-           candidate #1: `assoc_const::A`\n+note: `assoc_const::A` defines an item `A`, perhaps you need to implement it\n+  --> $DIR/trait-item-privacy.rs:24:5\n+   |\n+LL |     trait A {\n+   |     ^^^^^^^\n \n error[E0599]: no associated item named `B` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:98:8"}, {"sha": "4e153081d9fe96a286332ba9f3311c0588839131", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -15,8 +15,11 @@ LL |     3i32.test();\n    |          ^^^^ method not found in `i32`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `test`, perhaps you need to implement it:\n-           candidate #1: `Foo`\n+note: `Foo` defines an item `test`, perhaps you need to implement it\n+  --> $DIR/trivial-bounds-leak.rs:4:1\n+   |\n+LL | pub trait Foo {\n+   | ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:25:15"}, {"sha": "01c8e8471aac2b2242f7904646bb3838720c65ea", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -11,16 +11,20 @@ error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the c\n   --> $DIR/union-derive-clone.rs:37:15\n    |\n LL | union U5<T> {\n-   | ----------- method `clone` not found for this\n+   | -----------\n+   | |\n+   | method `clone` not found for this\n+   | doesn't satisfy `U5<CloneNoCopy>: std::clone::Clone`\n+...\n+LL | struct CloneNoCopy;\n+   | ------------------- doesn't satisfy `CloneNoCopy: std::marker::Copy`\n ...\n LL |     let w = u.clone();\n    |               ^^^^^ method not found in `U5<CloneNoCopy>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `U5<CloneNoCopy> : std::clone::Clone`\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `clone`, perhaps you need to implement it:\n-           candidate #1: `std::clone::Clone`\n+           `CloneNoCopy: std::marker::Copy`\n+           which is required by `U5<CloneNoCopy>: std::clone::Clone`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bedaf27c2dddfc2325a521eb3c5a2416885139bd", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "fb78095224b904751e7606b61cf7fe5557710176", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,14 +1,25 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<dyn Foo>` in the current scope\n-  --> $DIR/unique-object-noncopyable.rs:24:16\n+  --> $DIR/unique-object-noncopyable.rs:28:16\n    |\n+LL | trait Foo {\n+   | ---------\n+   | |\n+   | doesn't satisfy `dyn Foo: std::clone::Clone`\n+   | doesn't satisfy `dyn Foo: std::marker::Sized`\n+...\n LL |     let _z = y.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<dyn Foo>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- doesn't satisfy `std::boxed::Box<dyn Foo>: std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `std::boxed::Box<dyn Foo> : std::clone::Clone`\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `clone`, perhaps you need to implement it:\n-           candidate #1: `std::clone::Clone`\n+           `dyn Foo: std::marker::Sized`\n+           which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n+           `dyn Foo: std::clone::Clone`\n+           which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n \n error: aborting due to previous error\n "}, {"sha": "091b8a4386235647d9ea2f9911c1e02826a52e3f", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n #[derive(Debug)]\n struct R {\n   b: bool,"}, {"sha": "ea6575d1d85dc1de7b51ee23c428cb77d04b4c59", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,11 +1,20 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<R>` in the current scope\n-  --> $DIR/unique-pinned-nocopy.rs:12:16\n+  --> $DIR/unique-pinned-nocopy.rs:16:16\n    |\n+LL | struct R {\n+   | -------- doesn't satisfy `R: std::clone::Clone`\n+...\n LL |     let _j = i.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<R>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- doesn't satisfy `std::boxed::Box<R>: std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `std::boxed::Box<R> : std::clone::Clone`\n+           `R: std::clone::Clone`\n+           which is required by `std::boxed::Box<R>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}]}