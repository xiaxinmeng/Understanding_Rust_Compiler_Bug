{"sha": "8e0398c060ba50bde4fe47a3685c0857285001bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDM5OGMwNjBiYTUwYmRlNGZlNDdhMzY4NWMwODU3Mjg1MDAxYmQ=", "commit": {"author": {"name": "Hrvoje Niksic", "email": "hniksic@gmail.com", "date": "2020-03-01T20:31:08Z"}, "committer": {"name": "Hrvoje Niksic", "email": "hniksic@gmail.com", "date": "2020-03-19T13:48:48Z"}, "message": "Clarify the relationship between `forget()` and `ManuallyDrop`.\n\nAs discussed on reddit, this commit addresses two issues with the\ndocumentation of `mem::forget()`:\n\n* The documentation of `mem::forget()` can confuse the reader because of the\n  discrepancy between usage examples that show correct usage and the\n  accompanying text which speaks of the possibility of double-free.  The\n  text that says \"if the panic occurs before `mem::forget` was called\"\n  refers to a variant of the second example that was never shown, modified\n  to use `mem::forget` instead of `ManuallyDrop`.  Ideally the documentation\n  should show both variants, so it's clear what it's talking about.\n\n  Also, the double free could be fixed just by placing `mem::forget(v)`\n  before the construction of `s`.  Since the lifetimes of `s` and `v`\n  wouldn't overlap, there would be no point where panic could cause a double\n  free.  This could be mentioned, and contrasted against the more robust fix\n  of using `ManuallyDrop`.\n\n* This sentence seems unjustified: \"For some types, operations such as\n  passing ownership (to a funcion like `mem::forget`) requires them to\n  actually be fully owned right now [...]\".  Unlike C++, Rust has no move\n  constructors, its moves are (possibly elided) bitwise copies.  Even if you\n  pass an invalid object to `mem::forget`, no harm should come to pass\n  because `mem::forget` consumes the object and exists solely to prevent\n  drop, so there no one left to observe the invalid state state.", "tree": {"sha": "db7ba4ff2d66135bb5ebd5006b27dac98ea90deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7ba4ff2d66135bb5ebd5006b27dac98ea90deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0398c060ba50bde4fe47a3685c0857285001bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0398c060ba50bde4fe47a3685c0857285001bd", "html_url": "https://github.com/rust-lang/rust/commit/8e0398c060ba50bde4fe47a3685c0857285001bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0398c060ba50bde4fe47a3685c0857285001bd/comments", "author": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6f982cc908aacc39c3ac97f31c989f81cc213c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f982cc908aacc39c3ac97f31c989f81cc213c", "html_url": "https://github.com/rust-lang/rust/commit/3c6f982cc908aacc39c3ac97f31c989f81cc213c"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "19e3b2a8bb9222d0039342b64f0792f3efeb9da7", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8e0398c060ba50bde4fe47a3685c0857285001bd/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0398c060ba50bde4fe47a3685c0857285001bd/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=8e0398c060ba50bde4fe47a3685c0857285001bd", "patch": "@@ -69,8 +69,26 @@ pub use crate::intrinsics::transmute;\n /// ```\n ///\n /// The practical use cases for `forget` are rather specialized and mainly come\n-/// up in unsafe or FFI code. However, [`ManuallyDrop`] is usually preferred\n-/// for such cases, e.g.:\n+/// up in unsafe or FFI code. For example:\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// let mut v = vec![65, 122];\n+/// // Build a `String` using the contents of `v`\n+/// let s = unsafe { String::from_raw_parts(v.as_mut_ptr(), 2, v.capacity()) };\n+/// // immediately leak `v` because its memory is now managed by `s`\n+/// mem::forget(v);\n+/// assert_eq!(s, \"Az\");\n+/// // `s` is implicitly dropped and its memory deallocated.\n+/// ```\n+///\n+/// The above is correct, but brittle. If code gets added between the construction of\n+/// `String` and the invocation of `mem::forget()`, a panic within it will cause a double\n+/// free because the same memory is handled by both `v` and `s`. This can be fixed by\n+/// storing the result of `v.as_mut_ptr()` in a local variable and calling `mem::forget()`\n+/// before `String::from_raw_parts`. This kind of issue can be more robustly prevented by\n+/// using [`ManuallyDrop`], which is usually preferred for such cases:\n ///\n /// ```\n /// use std::mem::ManuallyDrop;\n@@ -88,16 +106,14 @@ pub use crate::intrinsics::transmute;\n /// // `s` is implicitly dropped and its memory deallocated.\n /// ```\n ///\n-/// Using `ManuallyDrop` here has two advantages:\n+/// `ManuallyDrop` robustly prevents double-free because we disable `v`'s destructor\n+/// before doing anything else. `mem::forget()` doesn't allow this because it consumes its\n+/// argument, forcing us to call it only after extracting anything we need from `v`.\n ///\n-/// * We do not \"touch\" `v` after disassembling it. For some types, operations\n-///   such as passing ownership (to a function like `mem::forget`) requires them to actually\n-///   be fully owned right now; that is a promise we do not want to make here as we are\n-///   in the process of transferring ownership to the new `String` we are building.\n-/// * In case of an unexpected panic, `ManuallyDrop` is not dropped, but if the panic\n-///   occurs before `mem::forget` was called we might end up dropping invalid data,\n-///   or double-dropping. In other words, `ManuallyDrop` errs on the side of leaking\n-///   instead of erring on the side of dropping.\n+/// Note that the above code cannot panic between construction of `ManuallyDrop` and\n+/// building the string. But even if it could (after a modification), a panic there would\n+/// result in a leak and not a double free. In other words, `ManuallyDrop` errs on the\n+/// side of leaking instead of erring on the side of dropping.\n ///\n /// [drop]: fn.drop.html\n /// [uninit]: fn.uninitialized.html"}]}