{"sha": "3481bf4102424d648a3f9efa74558ed17d492d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODFiZjQxMDI0MjRkNjQ4YTNmOWVmYTc0NTU4ZWQxN2Q0OTJkNTU=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-15T18:12:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T18:12:27Z"}, "message": "Rollup merge of #5226 - ThibsG:DerefExplicit1566, r=flip1995\n\nAdd lint for explicit deref and deref_mut method calls\n\nThis PR adds the lint `explicit_deref_method` that suggests replacing `deref()` and `deref_mut()` with `&*a` and `&mut *a`.\n\nIt doesn't lint inside macros.\n\nThis PR is the continuation of  #3258.\n\nchangelog: Add lint `explicit_deref_method`.\n\nFixes: #1566", "tree": {"sha": "fae9f8af5ffdef53478173ef1b65270b0bccdf25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae9f8af5ffdef53478173ef1b65270b0bccdf25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3481bf4102424d648a3f9efa74558ed17d492d55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJel06LCRBK7hj4Ov3rIwAAdHIIABko4u1WHFxzn4JfZDPis1Qq\ns4tnP4YDhuLotIIu48fCecRwdijsCtuZdrtWMmExb4VtarJAT3X3c4k6V9v2w8nf\n5U6R3we+4EP1OzVxcTLVZpoJJaSNxmoQRPKSK38Tc8XpZ+mKzBPb+BAuBYKSHCBr\nv1HYz7Mnqfi5zCgyfUXGKxYIOf3s6A+wUcFhritkmutr7AnImiwZSFmGZ3XLUwv0\nTcjkBjo3VHm3Bsq1ddwB5HZtWYhRmgiMD7J1llKP7TaeDkG0w5OHpejrk6CrwgkV\nvLUwUB0zoQUxt/F/N8ow1jtJ2/GmWveyn3FB+xDnWlFTGEw+gZSReHWztiQDj/s=\n=PY3x\n-----END PGP SIGNATURE-----\n", "payload": "tree fae9f8af5ffdef53478173ef1b65270b0bccdf25\nparent a9a4c8e630f03889160e0eafa9c546f9cb71921a\nparent 3c2bbcf00e3b97ab1fb03665b4afc7b7df0cd25e\nauthor Philipp Krones <hello@philkrones.com> 1586974347 +0200\ncommitter GitHub <noreply@github.com> 1586974347 +0200\n\nRollup merge of #5226 - ThibsG:DerefExplicit1566, r=flip1995\n\nAdd lint for explicit deref and deref_mut method calls\n\nThis PR adds the lint `explicit_deref_method` that suggests replacing `deref()` and `deref_mut()` with `&*a` and `&mut *a`.\n\nIt doesn't lint inside macros.\n\nThis PR is the continuation of  #3258.\n\nchangelog: Add lint `explicit_deref_method`.\n\nFixes: #1566\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3481bf4102424d648a3f9efa74558ed17d492d55", "html_url": "https://github.com/rust-lang/rust/commit/3481bf4102424d648a3f9efa74558ed17d492d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3481bf4102424d648a3f9efa74558ed17d492d55/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a4c8e630f03889160e0eafa9c546f9cb71921a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a4c8e630f03889160e0eafa9c546f9cb71921a", "html_url": "https://github.com/rust-lang/rust/commit/a9a4c8e630f03889160e0eafa9c546f9cb71921a"}, {"sha": "3c2bbcf00e3b97ab1fb03665b4afc7b7df0cd25e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2bbcf00e3b97ab1fb03665b4afc7b7df0cd25e", "html_url": "https://github.com/rust-lang/rust/commit/3c2bbcf00e3b97ab1fb03665b4afc7b7df0cd25e"}], "stats": {"total": 381, "additions": 381, "deletions": 0}, "files": [{"sha": "2c4bb42566d062a90e06b6efc205501efa9cb5a1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -1256,6 +1256,7 @@ Released 2018-09-13\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n+[`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n [`explicit_into_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n [`explicit_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\n [`explicit_write`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write"}, {"sha": "68ec07e2bcb0f58f874bdbce221741d1559c7c54", "filename": "clippy_lints/src/dereference.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -0,0 +1,113 @@\n+use crate::utils::{get_parent_expr, implements_trait, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX, PREC_PREFIX};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n+    ///\n+    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// when not part of a method chain.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// use std::ops::Deref;\n+    /// let a: &mut String = &mut String::from(\"foo\");\n+    /// let b: &str = a.deref();\n+    /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let a: &mut String = &mut String::from(\"foo\");\n+    /// let b = &*a;\n+    /// ```\n+    ///\n+    /// This lint excludes\n+    /// ```rust,ignore\n+    /// let _ = d.unwrap().deref();\n+    /// ```\n+    pub EXPLICIT_DEREF_METHODS,\n+    pedantic,\n+    \"Explicit use of deref or deref_mut method while not in a method chain.\"\n+}\n+\n+declare_lint_pass!(Dereferencing => [\n+    EXPLICIT_DEREF_METHODS\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if !expr.span.from_expansion();\n+            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n+            if args.len() == 1;\n+\n+            then {\n+                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n+                    // Check if we have the whole call chain here\n+                    if let ExprKind::MethodCall(..) = parent_expr.kind {\n+                        return;\n+                    }\n+                    // Check for Expr that we don't want to be linted\n+                    let precedence = parent_expr.precedence();\n+                    match precedence {\n+                        // Lint a Call is ok though\n+                        ExprPrecedence::Call | ExprPrecedence::AddrOf => (),\n+                        _ => {\n+                            if precedence.order() >= PREC_PREFIX && precedence.order() <= PREC_POSTFIX {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n+                let name = method_name.ident.as_str();\n+                lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n+            }\n+        }\n+    }\n+}\n+\n+fn lint_deref(cx: &LateContext<'_, '_>, method_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n+    match method_name {\n+        \"deref\" => {\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_trait()\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHODS,\n+                    expr_span,\n+                    \"explicit deref method call\",\n+                    \"try this\",\n+                    format!(\"&*{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        },\n+        \"deref_mut\" => {\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_mut_trait()\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHODS,\n+                    expr_span,\n+                    \"explicit deref_mut method call\",\n+                    \"try this\",\n+                    format!(\"&mut *{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        },\n+        _ => (),\n+    }\n+}"}, {"sha": "de1bab3a0b9407d34ad9f7e6f0f5100800d90ed1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -191,6 +191,7 @@ mod copies;\n mod copy_iterator;\n mod dbg_macro;\n mod default_trait_access;\n+mod dereference;\n mod derive;\n mod doc;\n mod double_comparison;\n@@ -513,6 +514,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n+        &dereference::EXPLICIT_DEREF_METHODS,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n@@ -1039,6 +1041,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n+    store.register_late_pass(|| box dereference::Dereferencing);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1089,6 +1092,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n+        LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),"}, {"sha": "1d147e01066fca91a52b619eac62c2492e4c5bb2", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -528,6 +528,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"explicit_deref_methods\",\n+        group: \"pedantic\",\n+        desc: \"Explicit use of deref or deref_mut method while not in a method chain.\",\n+        deprecation: None,\n+        module: \"dereference\",\n+    },\n     Lint {\n         name: \"explicit_into_iter_loop\",\n         group: \"pedantic\","}, {"sha": "459ca91b93b9e5b7dc4f67d7481e8a32ad8a7884", "filename": "tests/ui/dereference.fixed", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.fixed?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_methods)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn concat(deref_str: &str) -> String {\n+    format!(\"{}bar\", deref_str)\n+}\n+\n+fn just_return(deref_str: &str) -> &str {\n+    deref_str\n+}\n+\n+struct CustomVec(Vec<u8>);\n+impl Deref for CustomVec {\n+    type Target = Vec<u8>;\n+\n+    fn deref(&self) -> &Vec<u8> {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", &*a, &*a);\n+\n+    println!(\"{}\", &*a);\n+\n+    #[allow(clippy::match_single_binding)]\n+    match &*a {\n+        _ => (),\n+    }\n+\n+    let b: String = concat(&*a);\n+\n+    let b = &*just_return(a);\n+\n+    let b: String = concat(&*just_return(a));\n+\n+    let b: &str = &*a.deref();\n+\n+    let opt_a = Some(a.clone());\n+    let b = &*opt_a.unwrap();\n+\n+    // following should not require linting\n+\n+    let cv = CustomVec(vec![0, 42]);\n+    let c = cv.deref()[0];\n+\n+    let b: &str = &*a.deref();\n+\n+    let b: String = a.deref().clone();\n+\n+    let b: usize = a.deref_mut().len();\n+\n+    let b: &usize = &a.deref().len();\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n+    }\n+    let b: &str = expr_deref!(a);\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n+}"}, {"sha": "8dc5272e67fa529fb5afc0bc8a6d1db62a51bdc1", "filename": "tests/ui/dereference.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_methods)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn concat(deref_str: &str) -> String {\n+    format!(\"{}bar\", deref_str)\n+}\n+\n+fn just_return(deref_str: &str) -> &str {\n+    deref_str\n+}\n+\n+struct CustomVec(Vec<u8>);\n+impl Deref for CustomVec {\n+    type Target = Vec<u8>;\n+\n+    fn deref(&self) -> &Vec<u8> {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+\n+    let b: &str = a.deref();\n+\n+    let b: &mut str = a.deref_mut();\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+\n+    println!(\"{}\", a.deref());\n+\n+    #[allow(clippy::match_single_binding)]\n+    match a.deref() {\n+        _ => (),\n+    }\n+\n+    let b: String = concat(a.deref());\n+\n+    let b = just_return(a).deref();\n+\n+    let b: String = concat(just_return(a).deref());\n+\n+    let b: &str = a.deref().deref();\n+\n+    let opt_a = Some(a.clone());\n+    let b = opt_a.unwrap().deref();\n+\n+    // following should not require linting\n+\n+    let cv = CustomVec(vec![0, 42]);\n+    let c = cv.deref()[0];\n+\n+    let b: &str = &*a.deref();\n+\n+    let b: String = a.deref().clone();\n+\n+    let b: usize = a.deref_mut().len();\n+\n+    let b: &usize = &a.deref().len();\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n+    }\n+    let b: &str = expr_deref!(a);\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n+}"}, {"sha": "d26b462a4336236b79472bc5dd8b001f99c08473", "filename": "tests/ui/dereference.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3481bf4102424d648a3f9efa74558ed17d492d55/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=3481bf4102424d648a3f9efa74558ed17d492d55", "patch": "@@ -0,0 +1,70 @@\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:30:19\n+   |\n+LL |     let b: &str = a.deref();\n+   |                   ^^^^^^^^^ help: try this: `&*a`\n+   |\n+   = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n+\n+error: explicit deref_mut method call\n+  --> $DIR/dereference.rs:32:23\n+   |\n+LL |     let b: &mut str = a.deref_mut();\n+   |                       ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:35:39\n+   |\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                       ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:35:50\n+   |\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                                  ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:37:20\n+   |\n+LL |     println!(\"{}\", a.deref());\n+   |                    ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:40:11\n+   |\n+LL |     match a.deref() {\n+   |           ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:44:28\n+   |\n+LL |     let b: String = concat(a.deref());\n+   |                            ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:46:13\n+   |\n+LL |     let b = just_return(a).deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:48:28\n+   |\n+LL |     let b: String = concat(just_return(a).deref());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:50:19\n+   |\n+LL |     let b: &str = a.deref().deref();\n+   |                   ^^^^^^^^^^^^^^^^^ help: try this: `&*a.deref()`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:53:13\n+   |\n+LL |     let b = opt_a.unwrap().deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n+\n+error: aborting due to 11 previous errors\n+"}]}