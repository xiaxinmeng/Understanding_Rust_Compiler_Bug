{"sha": "62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyY2JlYTFjYTE0NDFhN2Q5Yzk3ZDNjMmFhMzZmOWZhNTQ2YWQ5YTQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-14T18:19:59Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-14T22:52:31Z"}, "message": "Add span to some import resolution errors", "tree": {"sha": "0e7af780d37af4bc2c8ca492984c57e9aecdc1e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7af780d37af4bc2c8ca492984c57e9aecdc1e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "html_url": "https://github.com/rust-lang/rust/commit/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f8b22d4f304abd6227f1476396b0a3a94e241f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f8b22d4f304abd6227f1476396b0a3a94e241f", "html_url": "https://github.com/rust-lang/rust/commit/52f8b22d4f304abd6227f1476396b0a3a94e241f"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "90a153996dc846c4637122977039eb39f0292a35", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "patch": "@@ -2058,7 +2058,8 @@ pub impl Resolver {\n                             self.resolve_single_import(module_,\n                                                        containing_module,\n                                                        target,\n-                                                       source);\n+                                                       source,\n+                                                       span);\n                     }\n                     GlobImport => {\n                         let span = import_directive.span;\n@@ -2121,7 +2122,8 @@ pub impl Resolver {\n                              module_: @mut Module,\n                              containing_module: @mut Module,\n                              target: ident,\n-                             source: ident)\n+                             source: ident,\n+                             span: span)\n                           -> ResolveResult<()> {\n         debug!(\"(resolving single import) resolving `%s` = `%s::%s` from \\\n                 `%s`\",\n@@ -2325,14 +2327,14 @@ pub impl Resolver {\n         }\n \n         if resolve_fail {\n-            self.session.err(fmt!(\"unresolved import: there is no `%s` in `%s`\",\n-                                  *self.session.str_of(source),\n-                                  self.module_to_str(containing_module)));\n+            self.session.span_err(span, fmt!(\"unresolved import: there is no `%s` in `%s`\",\n+                                             *self.session.str_of(source),\n+                                             self.module_to_str(containing_module)));\n             return Failed;\n         } else if priv_fail {\n-            self.session.err(fmt!(\"unresolved import: found `%s` in `%s` but it is private\",\n-                                  *self.session.str_of(source),\n-                                  self.module_to_str(containing_module)));\n+            self.session.span_err(span, fmt!(\"unresolved import: found `%s` in `%s` but it is \\\n+                                             private\", *self.session.str_of(source),\n+                                             self.module_to_str(containing_module)));\n             return Failed;\n         }\n "}, {"sha": "fc69c34c1183be9c381b3ce3b6e163dff70d7900", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=62cbea1ca1441a7d9c97d3c2aa36f9fa546ad9a4", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use foo::bar; //~ ERROR unresolved import. maybe a missing `extern mod foo`?\n-              //~^ ERROR failed to resolve import\n-use x = bar::baz; //~ ERROR unresolved import: could not find `baz` in `bar`\n-                  //~^ ERROR failed to resolve import\n+              //~^ ERROR failed to resolve import `foo::bar`\n+use x = bar::baz; //~ ERROR unresolved import: there is no `baz` in `bar`\n+                  //~^ ERROR failed to resolve import `bar::baz`\n \n mod bar {\n     struct bar;"}]}