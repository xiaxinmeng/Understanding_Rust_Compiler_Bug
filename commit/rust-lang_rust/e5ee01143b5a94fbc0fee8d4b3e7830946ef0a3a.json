{"sha": "e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZWUwMTE0M2I1YTk0ZmJjMGZlZThkNGIzZTc4MzA5NDZlZjBhM2E=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-22T11:18:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T08:47:43Z"}, "message": "Rename exported_symbol_ids query to something more explicit and document what it is doing.", "tree": {"sha": "8230214639378276c57954c10666207c02f3e312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8230214639378276c57954c10666207c02f3e312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "html_url": "https://github.com/rust-lang/rust/commit/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1733a61141d125beb45587dd89d54cd4a01cdd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1733a61141d125beb45587dd89d54cd4a01cdd5a", "html_url": "https://github.com/rust-lang/rust/commit/1733a61141d125beb45587dd89d54cd4a01cdd5a"}], "stats": {"total": 109, "additions": 62, "deletions": 47}, "files": [{"sha": "84fdeba4ab3ccbe3742c52c591f306490979484b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -556,7 +556,7 @@ define_dep_nodes!( <'tcx>\n     [] RvaluePromotableMap(DefId),\n     [] ImplParent(DefId),\n     [] TraitOfItem(DefId),\n-    [] IsExportedSymbol(DefId),\n+    [] IsReachableNonGeneric(DefId),\n     [] IsMirAvailable(DefId),\n     [] ItemAttrs(DefId),\n     [] FnArgNames(DefId),\n@@ -574,7 +574,7 @@ define_dep_nodes!( <'tcx>\n     [] GetPanicStrategy(CrateNum),\n     [] IsNoBuiltins(CrateNum),\n     [] ImplDefaultness(DefId),\n-    [] ExportedSymbolIds(CrateNum),\n+    [] ReachableNonGenerics(CrateNum),\n     [] NativeLibraries(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] DeriveRegistrarFn(CrateNum),"}, {"sha": "cfc552bdc85c56a84a0b65aee363c43e75edd565", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -212,9 +212,9 @@ impl<'tcx> QueryDescription<'tcx> for queries::item_attrs<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::is_exported_symbol<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_reachable_non_generic<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n-        bug!(\"is_exported_symbol\")\n+        bug!(\"is_reachable_non_generic\")\n     }\n }\n \n@@ -383,7 +383,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::is_sanitizer_runtime<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::exported_symbol_ids<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the exported symbols of a crate\")\n     }"}, {"sha": "e91ccce8ffa97441671725d6d03eb6ed308e5b68", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -238,7 +238,6 @@ define_maps! { <'tcx>\n     [] fn fn_arg_names: FnArgNames(DefId) -> Vec<ast::Name>,\n     [] fn impl_parent: ImplParent(DefId) -> Option<DefId>,\n     [] fn trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n-    [] fn is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n     [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] fn rvalue_promotable_map: RvaluePromotableMap(DefId) -> Lrc<ItemLocalSet>,\n@@ -290,7 +289,23 @@ define_maps! { <'tcx>\n     [] fn lint_levels: lint_levels_node(CrateNum) -> Lrc<lint::LintLevelMap>,\n \n     [] fn impl_defaultness: ImplDefaultness(DefId) -> hir::Defaultness,\n-    [] fn exported_symbol_ids: ExportedSymbolIds(CrateNum) -> Lrc<DefIdSet>,\n+\n+    // The DefIds of all non-generic functions and statics in the given crate\n+    // that can be reached from outside the crate.\n+    //\n+    // We expect this items to be available for being linked to.\n+    //\n+    // This query can also be called for LOCAL_CRATE. In this case it will\n+    // compute which items will be reachable to other crates, taking into account\n+    // the kind of crate that is currently compiled. Crates with only a\n+    // C interface have fewer reachable things.\n+    //\n+    // Does not include external symbols that don't have a corresponding DefId,\n+    // like the compiler-generated `main` function and so on.\n+    [] fn reachable_non_generics: ReachableNonGenerics(CrateNum) -> Lrc<DefIdSet>,\n+    [] fn is_reachable_non_generic: IsReachableNonGeneric(DefId) -> bool,\n+\n+\n     [] fn native_libraries: NativeLibraries(CrateNum) -> Lrc<Vec<NativeLibrary>>,\n     [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,"}, {"sha": "13f286d6a26868250d6fb7d1b5b8eb2c7dfe8553", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -851,7 +851,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::RvaluePromotableMap => { force!(rvalue_promotable_map, def_id!()); }\n         DepKind::ImplParent => { force!(impl_parent, def_id!()); }\n         DepKind::TraitOfItem => { force!(trait_of_item, def_id!()); }\n-        DepKind::IsExportedSymbol => { force!(is_exported_symbol, def_id!()); }\n+        DepKind::IsReachableNonGeneric => { force!(is_reachable_non_generic, def_id!()); }\n         DepKind::IsMirAvailable => { force!(is_mir_available, def_id!()); }\n         DepKind::ItemAttrs => { force!(item_attrs, def_id!()); }\n         DepKind::FnArgNames => { force!(fn_arg_names, def_id!()); }\n@@ -868,7 +868,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::GetPanicStrategy => { force!(panic_strategy, krate!()); }\n         DepKind::IsNoBuiltins => { force!(is_no_builtins, krate!()); }\n         DepKind::ImplDefaultness => { force!(impl_defaultness, def_id!()); }\n-        DepKind::ExportedSymbolIds => { force!(exported_symbol_ids, krate!()); }\n+        DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n         DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n         DepKind::DeriveRegistrarFn => { force!(derive_registrar_fn, krate!()); }"}, {"sha": "789ecd0f6136b1766436313795d9a85da1d8913c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -225,9 +225,6 @@ impl<'a> CrateLoader<'a> {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n \n-        let exported_symbols = crate_root.exported_symbols\n-                                         .decode((&metadata, self.sess))\n-                                         .collect();\n         let trait_impls = crate_root\n             .impls\n             .decode((&metadata, self.sess))\n@@ -238,7 +235,6 @@ impl<'a> CrateLoader<'a> {\n             name,\n             extern_crate: Cell::new(None),\n             def_path_table: Lrc::new(def_path_table),\n-            exported_symbols,\n             trait_impls,\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {\n                 self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)"}, {"sha": "2e95c23b4aed1f3a63b29a5bb0b19e4b79a63dc1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -78,8 +78,6 @@ pub struct CrateMetadata {\n     /// compilation support.\n     pub def_path_table: Lrc<DefPathTable>,\n \n-    pub exported_symbols: FxHashSet<DefIndex>,\n-\n     pub trait_impls: FxHashMap<(u32, DefIndex), schema::LazySeq<DefIndex>>,\n \n     pub dep_kind: Cell<DepKind>,"}, {"sha": "20fc45696a95b4bfc18a8a39f0da42b2780941b1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -160,9 +160,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     fn_arg_names => { cdata.get_fn_arg_names(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n-    is_exported_symbol => {\n-        cdata.exported_symbols.contains(&def_id.index)\n-    }\n     item_body_nested_bodies => { cdata.item_body_nested_bodies(def_id.index) }\n     const_is_rvalue_promotable_to_static => {\n         cdata.const_is_rvalue_promotable_to_static(def_id.index)\n@@ -179,7 +176,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     extern_crate => { Lrc::new(cdata.extern_crate.get()) }\n     is_no_builtins => { cdata.is_no_builtins(tcx.sess) }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n-    exported_symbol_ids => { Lrc::new(cdata.get_exported_symbols()) }\n+    reachable_non_generics => { Lrc::new(cdata.reachable_non_generics()) }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     plugin_registrar_fn => {\n         cdata.root.plugin_registrar_fn.map(|index| {"}, {"sha": "2831b63bbac59728ac8e8c542d474da43bdc1231", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -1006,10 +1006,11 @@ impl<'a, 'tcx> CrateMetadata {\n         arg_names.decode(self).collect()\n     }\n \n-    pub fn get_exported_symbols(&self) -> DefIdSet {\n-        self.exported_symbols\n-            .iter()\n-            .map(|&index| self.local_def_id(index))\n+    pub fn reachable_non_generics(&self) -> DefIdSet {\n+        self.root\n+            .reachable_non_generics\n+            .decode(self)\n+            .map(|index| self.local_def_id(index))\n             .collect()\n     }\n "}, {"sha": "7198f7ccf35e59a6645ae7f44e7d1b65abdfc5e7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -53,7 +53,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Encoder<'a>,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     link_meta: &'a LinkMeta,\n-    exported_symbols: &'a NodeSet,\n+    reachable_non_generics: &'a NodeSet,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -395,10 +395,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // Encode exported symbols info.\n         i = self.position();\n-        let exported_symbols = self.tracked(\n-            IsolatedEncoder::encode_exported_symbols,\n-            self.exported_symbols);\n-        let exported_symbols_bytes = self.position() - i;\n+        let reachable_non_generics = self.tracked(\n+            IsolatedEncoder::encode_reachable_non_generics,\n+            self.reachable_non_generics);\n+        let reachable_non_generics_bytes = self.position() - i;\n \n         // Encode and index the items.\n         i = self.position();\n@@ -442,7 +442,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             codemap,\n             def_path_table,\n             impls,\n-            exported_symbols,\n+            reachable_non_generics,\n             index,\n         });\n \n@@ -462,7 +462,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n-            println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n+            println!(\"    exp. symbols bytes: {}\", reachable_non_generics_bytes);\n             println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n             println!(\"           index bytes: {}\", index_bytes);\n@@ -1388,9 +1388,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // middle::reachable module but filters out items that either don't have a\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n-    fn encode_exported_symbols(&mut self, exported_symbols: &NodeSet) -> LazySeq<DefIndex> {\n+    fn encode_reachable_non_generics(&mut self,\n+                                     reachable_non_generics: &NodeSet)\n+                                     -> LazySeq<DefIndex> {\n         let tcx = self.tcx;\n-        self.lazy_seq(exported_symbols.iter().map(|&id| tcx.hir.local_def_id(id).index))\n+        self.lazy_seq(reachable_non_generics.iter()\n+                                            .map(|&id| tcx.hir.local_def_id(id).index))\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {\n@@ -1664,7 +1667,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n \n pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n-                                 exported_symbols: &NodeSet)\n+                                 reachable_non_generics: &NodeSet)\n                                  -> EncodedMetadata\n {\n     let mut cursor = Cursor::new(vec![]);\n@@ -1678,7 +1681,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx,\n             link_meta,\n-            exported_symbols,\n+            reachable_non_generics,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),"}, {"sha": "3e7d31513a22dc9270c5bd6e50d8945068a22e76", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -202,7 +202,7 @@ pub struct CrateRoot {\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n-    pub exported_symbols: LazySeq<DefIndex>,\n+    pub reachable_non_generics: LazySeq<DefIndex>,\n     pub index: LazySeq<index::Index>,\n }\n "}, {"sha": "10c2f9f758f14a07eb376222ad2a4c17a918d1ab", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -736,7 +736,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n         }\n         Some(_) => true,\n         None => {\n-            if tcx.is_exported_symbol(def_id) ||\n+            if tcx.is_reachable_non_generic(def_id) ||\n                 tcx.is_foreign_item(def_id)\n             {\n                 // We can link to the item in question, no instance needed\n@@ -984,7 +984,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             }\n             MonoItemCollectionMode::Lazy => {\n                 self.entry_fn == Some(def_id) ||\n-                self.tcx.is_exported_symbol(def_id) ||\n+                self.tcx.is_reachable_non_generic(def_id) ||\n                 attr::contains_name(&self.tcx.get_attrs(def_id),\n                                     \"rustc_std_internal_symbol\")\n             }"}, {"sha": "d65c1e03298a1cee8041f795bb08d3ebaf190215", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -363,7 +363,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     can_be_internalized = false;\n                                     Visibility::Hidden\n                                 } else if def_id.is_local() {\n-                                    if tcx.is_exported_symbol(def_id) {\n+                                    if tcx.is_reachable_non_generic(def_id) {\n                                         can_be_internalized = false;\n                                         default_visibility(def_id)\n                                     } else {\n@@ -385,7 +385,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         (Linkage::External, visibility)\n                     }\n                     MonoItem::Static(def_id) => {\n-                        let visibility = if tcx.is_exported_symbol(def_id) {\n+                        let visibility = if tcx.is_reachable_non_generic(def_id) {\n                             can_be_internalized = false;\n                             default_visibility(def_id)\n                         } else {\n@@ -395,7 +395,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     }\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n-                        let visibility = if tcx.is_exported_symbol(def_id) {\n+                        let visibility = if tcx.is_reachable_non_generic(def_id) {\n                             can_be_internalized = false;\n                             default_visibility(def_id)\n                         } else {"}, {"sha": "57da02eaa5232329cb63b885c8495d6c141d055f", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -61,7 +61,7 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType])\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.exported_symbol_ids = |tcx, cnum| {\n+    providers.reachable_non_generics = |tcx, cnum| {\n         let export_threshold = threshold(tcx);\n         Lrc::new(tcx.exported_symbols(cnum)\n             .iter()\n@@ -77,8 +77,8 @@ pub fn provide(providers: &mut Providers) {\n             .collect())\n     };\n \n-    providers.is_exported_symbol = |tcx, id| {\n-        tcx.exported_symbol_ids(id.krate).contains(&id)\n+    providers.is_reachable_non_generic = |tcx, id| {\n+        tcx.reachable_non_generics(id.krate).contains(&id)\n     };\n \n     providers.exported_symbols = |tcx, cnum| {\n@@ -156,7 +156,7 @@ pub fn provide_extern(providers: &mut Providers) {\n             tcx.is_panic_runtime(cnum) || tcx.is_compiler_builtins(cnum);\n \n         let mut crate_exports: Vec<_> = tcx\n-            .exported_symbol_ids(cnum)\n+            .reachable_non_generics(cnum)\n             .iter()\n             .map(|&def_id| {\n                 let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n@@ -190,6 +190,11 @@ pub fn provide_extern(providers: &mut Providers) {\n \n         Arc::new(crate_exports)\n     };\n+\n+    providers.is_reachable_non_generic = |tcx, id| {\n+        tcx.reachable_non_generics(id.krate).contains(&id)\n+    };\n+\n     providers.symbol_export_level = export_level;\n }\n "}, {"sha": "54cc561e8041505065d1eae557cacb52072dec58", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -151,7 +151,7 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n             if cx.tcx.is_translated_item(instance_def_id) {\n                 if instance_def_id.is_local() {\n-                    if !cx.tcx.is_exported_symbol(instance_def_id) {\n+                    if !cx.tcx.is_reachable_non_generic(instance_def_id) {\n                         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                     }\n                 } else {"}, {"sha": "fd9cb8c5a6bed38ff33bf598ca72b64ce75cd0f0", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -134,7 +134,7 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n \n                 let g = declare::define_global(cx, &sym[..], llty).unwrap();\n \n-                if !cx.tcx.is_exported_symbol(def_id) {\n+                if !cx.tcx.is_reachable_non_generic(def_id) {\n                     unsafe {\n                         llvm::LLVMRustSetVisibility(g, llvm::Visibility::Hidden);\n                     }"}, {"sha": "0a3f06b55f1e87af8e395c8ce5711e60673407a9", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=e5ee01143b5a94fbc0fee8d4b3e7830946ef0a3a", "patch": "@@ -32,7 +32,7 @@ pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n     // visible). It might better to use the `exported_items` set from\n     // `driver::CrateAnalysis` in the future, but (atm) this set is not\n     // available in the translation pass.\n-    !cx.tcx.is_exported_symbol(def_id)\n+    !cx.tcx.is_reachable_non_generic(def_id)\n }\n \n #[allow(non_snake_case)]"}]}