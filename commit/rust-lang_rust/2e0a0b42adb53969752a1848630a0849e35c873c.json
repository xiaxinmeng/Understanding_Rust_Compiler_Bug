{"sha": "2e0a0b42adb53969752a1848630a0849e35c873c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMGEwYjQyYWRiNTM5Njk3NTJhMTg0ODYzMGEwODQ5ZTM1Yzg3M2M=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-11T19:59:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-11T19:59:02Z"}, "message": "Rollup merge of #78832 - lcnr:const-evaluatable-unevaluated, r=oli-obk\n\nlook at assoc ct, check the type of nodes\n\nan example where types matter are function objects, see the added test which previously passed.\n\nNow does a shallow comparison of unevaluated constants.\n\nr? ```@oli-obk```", "tree": {"sha": "c5269b6643e4c5371d7784cf4b43faa170faaf4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5269b6643e4c5371d7784cf4b43faa170faaf4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0a0b42adb53969752a1848630a0849e35c873c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrEKGCRBK7hj4Ov3rIwAAdHIIABp6DJwGN6rjklt+Q0lGrrKT\nMFF/QZFxtDt7svRqDKhcXZhwniwkfyLlCbmKlvfxM3fdhOMTAvM41tGZKrphRGyy\nVjEK7pklsue2BLywdodzooDioOXNp3NgUN3fVwk/DyEIGur4JgOp0Qt4H7NhZMvn\nTK36LhQL6RuoP6L64SfSP9k5nMGbAv9JO1UMn6IjRXzRtv8P79HRmANL6bCSRDo4\nniXWdnI9T20NikgnfDNNRRK+k83aG0r2h3jERDiWjIiwBbF0Od1R5xMn2Z94EOn5\nOUOLP6cPEuigzmQVQaFh79Z1eGchaIiSfMo7uzhAJwaqLYPMoMXrRZ1HLMHVf+M=\n=z5MM\n-----END PGP SIGNATURE-----\n", "payload": "tree c5269b6643e4c5371d7784cf4b43faa170faaf4f\nparent 56e0806a1a7b4820be49fa76cde55f4b91c894e1\nparent 439171e094e00e7d3ac0b2d8f65c23cac87836f2\nauthor Jonas Schievink <jonasschievink@gmail.com> 1605124742 +0100\ncommitter GitHub <noreply@github.com> 1605124742 +0100\n\nRollup merge of #78832 - lcnr:const-evaluatable-unevaluated, r=oli-obk\n\nlook at assoc ct, check the type of nodes\n\nan example where types matter are function objects, see the added test which previously passed.\n\nNow does a shallow comparison of unevaluated constants.\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0a0b42adb53969752a1848630a0849e35c873c", "html_url": "https://github.com/rust-lang/rust/commit/2e0a0b42adb53969752a1848630a0849e35c873c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0a0b42adb53969752a1848630a0849e35c873c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e0806a1a7b4820be49fa76cde55f4b91c894e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e0806a1a7b4820be49fa76cde55f4b91c894e1", "html_url": "https://github.com/rust-lang/rust/commit/56e0806a1a7b4820be49fa76cde55f4b91c894e1"}, {"sha": "439171e094e00e7d3ac0b2d8f65c23cac87836f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/439171e094e00e7d3ac0b2d8f65c23cac87836f2", "html_url": "https://github.com/rust-lang/rust/commit/439171e094e00e7d3ac0b2d8f65c23cac87836f2"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "e1721a5a88a76f6edf98a7f76ddfcaa52c7c8e3e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e0a0b42adb53969752a1848630a0849e35c873c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0a0b42adb53969752a1848630a0849e35c873c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=2e0a0b42adb53969752a1848630a0849e35c873c", "patch": "@@ -512,6 +512,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 block = &self.body.basic_blocks()[next];\n             } else {\n                 assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+                // `AbstractConst`s should not contain any promoteds as they require references which\n+                // are not allowed.\n+                assert!(!self.nodes.iter().any(|n| matches!(\n+                    n.node,\n+                    Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(_, _, Some(_)), ty: _ })\n+                )));\n+\n                 self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n                 if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n                     self.error(Some(unused.span), \"dead code\")?;\n@@ -609,6 +616,10 @@ pub(super) fn try_unify<'tcx>(\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             let a_ct = a_ct.subst(tcx, a.substs);\n             let b_ct = b_ct.subst(tcx, b.substs);\n+            if a_ct.ty != b_ct.ty {\n+                return false;\n+            }\n+\n             match (a_ct.val, b_ct.val) {\n                 // We can just unify errors with everything to reduce the amount of\n                 // emitted errors here.\n@@ -621,6 +632,12 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n+                // We may want to instead recurse into unevaluated constants here. That may require some\n+                // care to prevent infinite recursion, so let's just ignore this for now.\n+                (\n+                    ty::ConstKind::Unevaluated(a_def, a_substs, None),\n+                    ty::ConstKind::Unevaluated(b_def, b_substs, None),\n+                ) => a_def == b_def && a_substs == b_substs,\n                 // FIXME(const_evaluatable_checked): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here."}, {"sha": "533fe55b45beea4d32c09302c1aa76ddb62f3a10", "filename": "src/test/ui/const-generics/const_evaluatable_checked/associated-consts.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs?ref=2e0a0b42adb53969752a1848630a0849e35c873c", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+pub trait BlockCipher {\n+    const BLOCK_SIZE: usize;\n+}\n+\n+struct FooCipher;\n+impl BlockCipher for FooCipher {\n+    const BLOCK_SIZE: usize = 64;\n+}\n+\n+struct BarCipher;\n+impl BlockCipher for BarCipher {\n+    const BLOCK_SIZE: usize = 32;\n+}\n+\n+pub struct Block<C>(C);\n+\n+pub fn test<C: BlockCipher, const M: usize>()\n+where\n+    [u8; M - C::BLOCK_SIZE]: Sized,\n+{\n+    let _ = [0; M - C::BLOCK_SIZE];\n+}\n+\n+fn main() {\n+    test::<FooCipher, 128>();\n+    test::<BarCipher, 64>();\n+}"}, {"sha": "05049d9c2a6efb7716c063a7fe32d4e39c0c2c34", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs?ref=2e0a0b42adb53969752a1848630a0849e35c873c", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+use std::mem::size_of;\n+use std::marker::PhantomData;\n+\n+struct Foo<T>(PhantomData<T>);\n+\n+fn test<T>() -> [u8; size_of::<T>()] {\n+    [0; size_of::<Foo<T>>()]\n+    //~^ ERROR unconstrained generic constant\n+}\n+\n+fn main() {\n+    test::<u32>();\n+}"}, {"sha": "1f6dddb04e56c91ce53910b2ea229d3791735f8e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e0a0b42adb53969752a1848630a0849e35c873c/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=2e0a0b42adb53969752a1848630a0849e35c873c", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/different-fn.rs:10:9\n+   |\n+LL |     [0; size_of::<Foo<T>>()]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a `where` bound for this expression\n+  --> $DIR/different-fn.rs:10:9\n+   |\n+LL |     [0; size_of::<Foo<T>>()]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}