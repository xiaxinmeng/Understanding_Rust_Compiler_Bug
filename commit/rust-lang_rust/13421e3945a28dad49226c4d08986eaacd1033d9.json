{"sha": "13421e3945a28dad49226c4d08986eaacd1033d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDIxZTM5NDVhMjhkYWQ0OTIyNmM0ZDA4OTg2ZWFhY2QxMDMzZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-27T13:14:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-27T13:14:37Z"}, "message": "Auto merge of #3705 - matthiaskrgr:rustup, r=phansch\n\nrustup\n\nrustup https://github.com/rust-lang/rust/pull/57907/ and https://github.com/rust-lang/rust/pull/57726\nFixes #3708", "tree": {"sha": "f41723aa15ec9dae7e0b59f7dec8583346ba7d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41723aa15ec9dae7e0b59f7dec8583346ba7d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13421e3945a28dad49226c4d08986eaacd1033d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13421e3945a28dad49226c4d08986eaacd1033d9", "html_url": "https://github.com/rust-lang/rust/commit/13421e3945a28dad49226c4d08986eaacd1033d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13421e3945a28dad49226c4d08986eaacd1033d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3270c6f47ac6fe35e01e42e57357d4a4086ba25", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3270c6f47ac6fe35e01e42e57357d4a4086ba25", "html_url": "https://github.com/rust-lang/rust/commit/e3270c6f47ac6fe35e01e42e57357d4a4086ba25"}, {"sha": "16c0a2fa6fc34380b60a54282e7e2ec1dafa2f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c0a2fa6fc34380b60a54282e7e2ec1dafa2f48", "html_url": "https://github.com/rust-lang/rust/commit/16c0a2fa6fc34380b60a54282e7e2ec1dafa2f48"}], "stats": {"total": 805, "additions": 696, "deletions": 109}, "files": [{"sha": "337139e1b1dc376f937d3e3ecb8ffd3a6b54f77a", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -60,6 +60,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(APPROX_CONSTANT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ApproxConstant\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "e14c79374ba4d112bc09401f6f5102ad542ef38d", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -52,6 +52,10 @@ impl LintPass for Arithmetic {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INTEGER_ARITHMETIC, FLOAT_ARITHMETIC)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Arithmetic\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {"}, {"sha": "d420de3a4dbe614eb656e987ccad633eb8481df0", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -34,6 +34,10 @@ impl LintPass for AssertionsOnConstants {\n     fn get_lints(&self) -> LintArray {\n         lint_array![ASSERTIONS_ON_CONSTANTS]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"AssertionsOnConstants\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {"}, {"sha": "cc44b514ea77e178a694bcfe05c3e7318fc5ee08", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -57,6 +57,10 @@ impl LintPass for AssignOps {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ASSIGN_OP_PATTERN, MISREFACTORED_ASSIGN_OP)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"AssignOps\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n@@ -79,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n                                         let long =\n                                             format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             &format!(\n                                                 \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n@@ -92,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n                                             Applicability::MachineApplicable,\n                                         );\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"or\",\n                                             long,\n@@ -179,7 +183,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                     if let (Some(snip_a), Some(snip_r)) =\n                                         (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n                                     {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"replace it with\",\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),"}, {"sha": "89dbba56130aa39f0e05cd67910a92cd9713e1f9", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -199,6 +199,10 @@ impl LintPass for AttrPass {\n             UNKNOWN_CLIPPY_LINTS,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Attributes\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n@@ -269,7 +273,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             \"useless lint attribute\",\n                                             |db| {\n                                                 sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion_with_applicability(\n+                                                db.span_suggestion(\n                                                     line_span,\n                                                     \"if you just forgot a `!`, use\",\n                                                     sugg,\n@@ -332,7 +336,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                                 // https://github.com/rust-lang/rust/pull/56992\n                                 CheckLintNameResult::NoLint(None) => (),\n                                 _ => {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         lint.span,\n                                         \"lowercase the lint name\",\n                                         name_lower,\n@@ -500,6 +504,10 @@ impl LintPass for CfgAttrPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEPRECATED_CFG_ATTR,)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DeprecatedCfgAttribute\"\n+    }\n }\n \n impl EarlyLintPass for CfgAttrPass {"}, {"sha": "d4e3037619903c9701b53c92aaa90c08b800b42d", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -108,6 +108,9 @@ impl LintPass for BitMask {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BAD_BIT_MASK, INEFFECTIVE_BIT_MASK, VERBOSE_BIT_MASK)\n     }\n+    fn name(&self) -> &'static str {\n+        \"BitMask\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n@@ -139,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                                    \"bit mask could be simplified with a call to `trailing_zeros`\",\n                                    |db| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),"}, {"sha": "9606b2eda327a32f8af338ac2ccf941704f1541d", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -37,6 +37,9 @@ impl LintPass for BlackListedName {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BLACKLISTED_NAME)\n     }\n+    fn name(&self) -> &'static str {\n+        \"BlacklistedName\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlackListedName {"}, {"sha": "8abcfb4cfd6fa3618abb64d238282d7777fc33c0", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -49,6 +49,10 @@ impl LintPass for BlockInIfCondition {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"BlockInIfCondition\"\n+    }\n }\n \n struct ExVisitor<'a, 'tcx: 'a> {"}, {"sha": "6433e0d640d5dfe4d65bc2d46cecaf74d4668892", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -58,6 +58,10 @@ impl LintPass for NonminimalBool {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NONMINIMAL_BOOL, LOGIC_BUG)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NonminimalBool\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n@@ -389,7 +393,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                     \"this expression can be optimized out by applying boolean operations to the \\\n                                      outer expression\",\n                                 );\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     e.span,\n                                     \"it would look like the following\",\n                                     suggest(self.cx, suggestion, &h2q.terminals).0,\n@@ -419,7 +423,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     e.span,\n                     \"this boolean expression can be simplified\",\n                     |db| {\n-                        db.span_suggestions_with_applicability(\n+                        db.span_suggestions(\n                             e.span,\n                             \"try\",\n                             suggestions.into_iter(),"}, {"sha": "b677ef71583b48fd639a89f11d9604536e3658a3", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -38,6 +38,10 @@ impl LintPass for ByteCount {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NAIVE_BYTECOUNT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ByteCount\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {"}, {"sha": "124b11cc78c695881c219c9ada5efe622153fbb1", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -62,6 +62,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CARGO_COMMON_METADATA)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CargoCommonMetadata\"\n+    }\n }\n \n impl EarlyLintPass for Pass {"}, {"sha": "9539b4d89f96434feb686b4236b308e8c913eccf", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -78,6 +78,10 @@ impl LintPass for CollapsibleIf {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(COLLAPSIBLE_IF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CollapsibleIf\"\n+    }\n }\n \n impl EarlyLintPass for CollapsibleIf {\n@@ -150,7 +154,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     expr.span,\n                     \"try\",\n                     format!("}, {"sha": "2684f45660e17920b8cfcaddfc31511ee0fa3065", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for StaticConst {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CONST_STATIC_LIFETIME)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"StaticConst\"\n+    }\n }\n \n impl StaticConst {\n@@ -62,7 +66,7 @@ impl StaticConst {\n                                     lifetime.ident.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             ty.span,\n                                             \"consider removing `'static`\",\n                                             sugg,"}, {"sha": "c704a635425dc5878773f65b293b4dfc27706f52", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -110,6 +110,10 @@ impl LintPass for CopyAndPaste {\n     fn get_lints(&self) -> LintArray {\n         lint_array![IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CopyAndPaste\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n@@ -203,7 +207,7 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 |db| {\n                     db.span_note(i.body.span, \"same as this\");\n \n-                    // Note: this does not use `span_suggestion_with_applicability` on purpose:\n+                    // Note: this does not use `span_suggestion` on purpose:\n                     // there is no clean way\n                     // to remove the other arm. Building a span and suggest to replace it to \"\"\n                     // makes an even more confusing error message. Also in order not to make up a"}, {"sha": "59eef9e39dcebfbea578bd1939704c79681bb825", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for CopyIterator {\n     fn get_lints(&self) -> LintArray {\n         lint_array![COPY_ITERATOR]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CopyIterator\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {"}, {"sha": "c6358aed4bdb97748dcd3fb92baad0bbe134a76e", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -42,6 +42,10 @@ impl LintPass for CyclomaticComplexity {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CYCLOMATIC_COMPLEXITY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CyclomaticComplexity\"\n+    }\n }\n \n impl CyclomaticComplexity {"}, {"sha": "7b3899b2f499c7db98bbb5efb78205552059ebbc", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for DefaultTraitAccess {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEFAULT_TRAIT_ACCESS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DefaultTraitAccess\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {"}, {"sha": "9580fbbe4c14a3146f9b294aca2e3aafc6d34998", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -68,6 +68,10 @@ impl LintPass for Derive {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Derive\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {"}, {"sha": "87135fb88b663bec9f51963090c840d7b78be8f3", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -48,6 +48,10 @@ impl LintPass for Doc {\n     fn get_lints(&self) -> LintArray {\n         lint_array![DOC_MARKDOWN]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DocMarkdown\"\n+    }\n }\n \n impl EarlyLintPass for Doc {"}, {"sha": "6c6b53b0b98d92fe5e7ace65e525622a788f5cbe", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -37,6 +37,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DOUBLE_COMPARISONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DoubleComparisons\"\n+    }\n }\n \n impl<'a, 'tcx> Pass {"}, {"sha": "71b2f5f51a7b5faf33b369005595e8bec641c058", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -29,6 +29,10 @@ impl LintPass for DoubleParens {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DOUBLE_PARENS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DoubleParens\"\n+    }\n }\n \n impl EarlyLintPass for DoubleParens {"}, {"sha": "b437d60300598489d053f446811aee5c7c4ef70b", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -112,6 +112,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DropForgetRef\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "3935099fdcea22f034d7f17d673640b131c7600a", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -36,6 +36,10 @@ impl LintPass for DurationSubsec {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DURATION_SUBSEC)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DurationSubsec\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {"}, {"sha": "c01ad486484c6645a0f02167d00f8b1d5e711f02", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -46,6 +46,10 @@ impl LintPass for ElseIfWithoutElse {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ELSE_IF_WITHOUT_ELSE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ElseIfWithoutElse\"\n+    }\n }\n \n impl EarlyLintPass for ElseIfWithoutElse {"}, {"sha": "ab80625f6852d46e1dc1b0bcbc91d21a169fbb25", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for EmptyEnum {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EMPTY_ENUM)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EmptyEnum\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {"}, {"sha": "3e0a6e11be6ecad35c2aaef944f7e1b12f004d85", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -44,6 +44,10 @@ impl LintPass for HashMapLint {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MAP_ENTRY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"HashMap\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n@@ -145,7 +149,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, params[1].span, \"..\"),\n                                            snippet(self.cx, params[2].span, \"..\"));\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             self.span,\n                             \"consider using\",\n                             help,\n@@ -157,7 +161,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             self.span,\n                             \"consider using\",\n                             help,"}, {"sha": "46501d554978e44c8d78ebb48df86b15cb40d24c", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -40,6 +40,10 @@ impl LintPass for UnportableVariant {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ENUM_CLIKE_UNPORTABLE_VARIANT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnportableVariant\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {"}, {"sha": "4806736682f13aa82fa5b0e75b1a578e6813d05e", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for EnumGlobUse {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ENUM_GLOB_USE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EnumGlobUse\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {"}, {"sha": "74d61c0f6a0d41161e99040de0b9e317b843f1ae", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -124,6 +124,10 @@ impl LintPass for EnumVariantNames {\n             MODULE_INCEPTION\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EnumVariantNames\"\n+    }\n }\n \n fn var2str(var: &Variant) -> LocalInternedString {"}, {"sha": "57291dd24eee7f33a090d746dec5ca03d809f24c", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -52,6 +52,10 @@ impl LintPass for EqOp {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EQ_OP, OP_REF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EqOp\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n@@ -122,7 +126,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -140,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 \"needlessly taken reference of right operand\",\n                                 |db| {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         right.span,\n                                         \"use the right value directly\",\n                                         rsnip,\n@@ -159,7 +163,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -177,7 +181,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     right.span,\n                                     \"use the right value directly\",\n                                     rsnip,"}, {"sha": "a1d851377eb2b780a268db52296da2b526f628c8", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for ErasingOp {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ERASING_OP)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ErasingOp\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {"}, {"sha": "a276579b1b5bca475ad61e905d6e234d08b6862c", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -52,6 +52,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOXED_LOCAL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"BoxedLocal\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "f0557154f903ac96581e94f04cc859c9a7a4ed6b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -36,6 +36,10 @@ impl LintPass for EtaPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REDUNDANT_CLOSURE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EtaReduction\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n@@ -97,7 +101,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             }\n             span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n                 if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         expr.span,\n                         \"remove closure as shown\",\n                         snippet,"}, {"sha": "8c933ef74d241a6e79d6871303bde1980769efa2", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -61,6 +61,10 @@ impl LintPass for EvalOrderDependence {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EVAL_ORDER_DEPENDENCE, DIVERGING_SUB_EXPRESSION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"EvalOrderDependence\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {"}, {"sha": "27e033f688dae7fdcb5c66e25c8d378140989c69", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -41,6 +41,10 @@ impl LintPass for ExcessivePrecision {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXCESSIVE_PRECISION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ExcessivePrecision\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {"}, {"sha": "2be2bb058bbceba0a8063b13e15e38aabd0482a4", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -31,6 +31,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXPLICIT_WRITE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ExplicitWrite\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "3669e8998a4c9a1cd6253886dac621b16efc4815", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -34,6 +34,10 @@ impl LintPass for FallibleImplFrom {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(FALLIBLE_IMPL_FROM)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"FallibleImpleFrom\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {"}, {"sha": "aaef5b39aeb8db3daee652f0059bf39b7f67b1ef", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -40,6 +40,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array![USELESS_FORMAT]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UselessFormat\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -79,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             };\n \n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     message,\n                                     sugg,\n@@ -95,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if tup.is_empty() {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     span,\n                                     \"consider using .to_string()\",\n                                     sugg,"}, {"sha": "ecc6f9565d0513d24750f70584c1fd738f068f5b", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -89,6 +89,10 @@ impl LintPass for Formatting {\n             POSSIBLE_MISSING_COMMA\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Formatting\"\n+    }\n }\n \n impl EarlyLintPass for Formatting {"}, {"sha": "cb69e96c8e48b8d85720102f23b45d7019afcf52", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -74,6 +74,10 @@ impl LintPass for Functions {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TOO_MANY_ARGUMENTS, NOT_UNSAFE_PTR_ARG_DEREF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Functions\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {"}, {"sha": "abe8a9d6856cdae0c1339b36fca5e922d2e11236", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -34,6 +34,10 @@ impl LintPass for IdentityConversion {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IDENTITY_CONVERSION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"IdentityConversion\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n@@ -67,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n \n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into()`\",\n                                 sugg,\n@@ -82,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into_iter()`\",\n                                 sugg,\n@@ -104,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         &sugg_msg,\n                                         sugg,"}, {"sha": "89d41c796298cc9012019cfbf12414c3149baa2a", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for IdentityOp {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IDENTITY_OP)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"IdentityOp\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {"}, {"sha": "38213141de3f358f27b79ce16871fccb2e3a4c6c", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -44,6 +44,10 @@ impl LintPass for IfNotElse {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IF_NOT_ELSE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"IfNotElse\"\n+    }\n }\n \n impl EarlyLintPass for IfNotElse {"}, {"sha": "72d95a0763ae4cd93b76027f3dc5ff6745a2f946", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -39,7 +39,7 @@ impl Pass {\n     fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n         span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     outer_span,\n                     msg,\n                     format!(\"return {}\", snippet),\n@@ -114,6 +114,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IMPLICIT_RETURN)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ImplicitReturn\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "19e2283dc076309de2858e1c735d5b8a49e39f2c", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -91,6 +91,10 @@ impl LintPass for IndexingSlicing {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"IndexSlicing\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {"}, {"sha": "704b583f813878b81519aa876a9899ae83505bf4", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -47,6 +47,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INFALLIBLE_DESTRUCTURING_MATCH)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"InfallibleDestructingMatch\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "9f2bcd48787746bd4edbc4490fc6022f902a4c19", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -45,6 +45,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INFINITE_ITER, MAYBE_INFINITE_ITER)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"InfiniteIter\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "5585ce4cbefe9483a6ba2af8a208200461fa38d5", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -56,6 +56,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MULTIPLE_INHERENT_IMPL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MultipleInherientImpl\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "bdc17ab462442f7f6cd09e5adb98e199daa33470", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INLINE_FN_WITHOUT_BODY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"InlineFnWithoutBody\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "9b5938baf5f2018ef5b45afb7f45e8f2bd847bf4", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -36,6 +36,10 @@ impl LintPass for IntPlusOne {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INT_PLUS_ONE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"IntPlusOne\"\n+    }\n }\n \n // cases:\n@@ -158,7 +162,7 @@ impl IntPlusOne {\n             block.span,\n             \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n             |db| {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     block.span,\n                     \"change `>= y + 1` to `> y` as shown\",\n                     recommendation,"}, {"sha": "90649535958c1adc8b28b061ef76ea1baa55e763", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for InvalidRef {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INVALID_REF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"InvalidRef\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {"}, {"sha": "dd283d897a5662db6bede1e8fbffd59d000ee4a7", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -40,6 +40,10 @@ impl LintPass for ItemsAfterStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ITEMS_AFTER_STATEMENTS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ItemsAfterStatements\"\n+    }\n }\n \n impl EarlyLintPass for ItemsAfterStatements {"}, {"sha": "59e036c715ef91e50e0461b2f2077b8d3cb0721d", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -46,6 +46,10 @@ impl LintPass for LargeEnumVariant {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LARGE_ENUM_VARIANT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LargeEnumVariant\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n@@ -96,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     VariantData::Unit(_) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         \"consider boxing the large fields to reduce the total size of the \\\n                                          enum\","}, {"sha": "2764cd6ffd9b34a3fdcb187d08bc1b5aae16304c", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -77,6 +77,10 @@ impl LintPass for LenZero {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LEN_ZERO, LEN_WITHOUT_IS_EMPTY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LenZero\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {"}, {"sha": "f1aed79847f7d502eab9025aa00b0f6cdd561846", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -60,6 +60,10 @@ impl LintPass for LetIfSeq {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(USELESS_LET_IF_SEQ)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LetIfSeq\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n@@ -120,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        span,\n                                        \"`if _ { .. } else { .. }` is an expression\",\n                                        |db| {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                 span,\n                                                 \"it is more idiomatic to write\",\n                                                 sug,"}, {"sha": "4683d353ccf87b497baf799f4c4e3a10eb754cde", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -212,15 +212,22 @@ pub fn register_pre_expansion_lints(\n     store: &mut rustc::lint::LintStore,\n     conf: &Conf,\n ) {\n-    store.register_pre_expansion_pass(Some(session), box write::Pass);\n-    store.register_pre_expansion_pass(Some(session), box redundant_field_names::RedundantFieldNames);\n+    store.register_pre_expansion_pass(Some(session), true, false, box write::Pass);\n     store.register_pre_expansion_pass(\n         Some(session),\n+        true,\n+        false,\n+        box redundant_field_names::RedundantFieldNames,\n+    );\n+    store.register_pre_expansion_pass(\n+        Some(session),\n+        true,\n+        false,\n         box non_expressive_names::NonExpressiveNames {\n             single_char_binding_names_threshold: conf.single_char_binding_names_threshold,\n         },\n     );\n-    store.register_pre_expansion_pass(Some(session), box attrs::CfgAttrPass);\n+    store.register_pre_expansion_pass(Some(session), true, false, box attrs::CfgAttrPass);\n }\n \n pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {"}, {"sha": "5562d750dace77648ac2228a5c0c846bff8e0126", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -61,6 +61,10 @@ impl LintPass for LifetimePass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LifeTimes\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {"}, {"sha": "801e54f055c4649e6ee3f103d195105211647667", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -346,6 +346,10 @@ impl LintPass for LiteralDigitGrouping {\n             MISTYPED_LITERAL_SUFFIXES,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LiteralDigitGrouping\"\n+    }\n }\n \n impl EarlyLintPass for LiteralDigitGrouping {\n@@ -493,6 +497,10 @@ impl LintPass for LiteralRepresentation {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DECIMAL_LITERAL_REPRESENTATION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DecimalLiteralRepresentation\"\n+    }\n }\n \n impl EarlyLintPass for LiteralRepresentation {"}, {"sha": "4d6cc75135ec346348d5f3552baf1af6ba11eae4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -465,6 +465,10 @@ impl LintPass for Pass {\n             WHILE_IMMUTABLE_CONDITION,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Loops\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -1300,7 +1304,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                         expr.span,\n                         \"this range is empty so this for loop will never run\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 arg.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n@@ -2404,7 +2408,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                 if method.ident.name == \"len\" {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".count()\".to_string(),\n@@ -2415,7 +2419,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                 if method.ident.name == \"is_empty\" {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".next().is_none()\".to_string(),\n@@ -2427,7 +2431,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             format!("}, {"sha": "49bd8f650e560b45ef8bacf60f82304844d06153", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -46,6 +46,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MAP_CLONE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MapClone\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "75e12cd9fd328ad1c3bf6234e0ee2643d640e6f7", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -81,6 +81,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MapUnit\"\n+    }\n }\n \n fn is_unit_type(ty: ty::Ty<'_>) -> bool {\n@@ -212,7 +216,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n         );\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            db.span_suggestion_with_applicability(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+            db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n@@ -226,7 +230,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                     snippet(cx, var_arg.span, \"_\"),\n                     snippet(cx, reduced_expr_span, \"_\")\n                 );\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     stmt.span,\n                     \"try this\",\n                     suggestion,\n@@ -239,7 +243,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                     snippet(cx, binding.pat.span, \"_\"),\n                     snippet(cx, var_arg.span, \"_\")\n                 );\n-                db.span_suggestion_with_applicability(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+                db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n             }\n         });\n     }"}, {"sha": "b290980fc36151f0432351b473a706891fedbfd4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -202,6 +202,10 @@ impl LintPass for MatchPass {\n             MATCH_AS_REF\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Matches\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n@@ -371,7 +375,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Ex\n                         };\n \n                         if let Some(sugg) = sugg {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 expr.span,\n                                 \"consider using an if/else expression\",\n                                 sugg,"}, {"sha": "65e473698198f812065df3216ffc634d39a7f854", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -31,6 +31,10 @@ impl LintPass for MemDiscriminant {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MEM_DISCRIMINANT_NON_ENUM]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MemDiscriminant\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n@@ -70,7 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                             }\n \n                             let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 param.span,\n                                 \"try dereferencing\",\n                                 format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),"}, {"sha": "0f25070318e042559948bb6eb9ca80110a5bd921", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -27,6 +27,10 @@ impl LintPass for MemForget {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MEM_FORGET]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MemForget\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {"}, {"sha": "1b43794bcb77603aadc995334dda059a288bd360", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -36,6 +36,10 @@ impl LintPass for MemReplace {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MEM_REPLACE_OPTION_WITH_NONE]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MemReplace\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {"}, {"sha": "20ffc1fd4068ea4b0c45855d92b420ebd5e8ada1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -814,6 +814,10 @@ impl LintPass for Pass {\n             INTO_ITER_ON_REF,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Methods\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -1309,13 +1313,13 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                         let refs: String = iter::repeat('&').take(n + 1).collect();\n                         let derefs: String = iter::repeat('*').take(n).collect();\n                         let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n                             format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"or try being explicit about what type to clone\",\n                             explicit,\n@@ -1375,7 +1379,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n             if let Some((text, snip)) = snip {\n-                db.span_suggestion_with_applicability(expr.span, text, snip, Applicability::Unspecified);\n+                db.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n             }\n         });\n     }\n@@ -1806,7 +1810,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n         let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n         span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 expr.span,\n                 \"try using flat_map instead\",\n                 hint,\n@@ -1893,7 +1897,7 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     expr.span,\n                     \"try using and_then instead\",\n                     hint,"}, {"sha": "19bede8a280657c307ebcdb2fe65d509f756d534", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -31,6 +31,10 @@ impl LintPass for MinMaxPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MIN_MAX)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MinMax\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {"}, {"sha": "c15fba76869ebd0a751e257e5e1e3f9feb48d865", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -242,6 +242,10 @@ impl LintPass for Pass {\n             FLOAT_CMP_CONST\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MiscLints\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -298,7 +302,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         l.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 s.span,\n                                 \"try\",\n                                 format!(\n@@ -326,7 +330,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             s.span,\n                             \"replace it with\",\n                             format!(\n@@ -383,7 +387,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"consider comparing them within some error\",\n                             format!(\"({}).abs() < error\", lhs - rhs),\n@@ -564,7 +568,7 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                 snip.to_string()\n             };\n \n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 lint_span,\n                 \"try\",\n                 try_hint,"}, {"sha": "88acdbb168ab34795335333c2ec8590e6033e128", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -187,6 +187,10 @@ impl LintPass for MiscEarly {\n             BUILTIN_TYPE_SHADOW\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MiscEarlyLints\"\n+    }\n }\n \n // Used to find `return` statements or equivalents e.g. `?`\n@@ -339,7 +343,7 @@ impl EarlyLintPass for MiscEarly {\n                                 |db| {\n                                     if decl.inputs.is_empty() {\n                                         let hint = snippet(cx, block.span, \"..\").into_owned();\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"Try doing something like: \",\n                                             hint,\n@@ -434,13 +438,13 @@ impl MiscEarly {\n                                         lit.span,\n                                         \"this is a decimal constant\",\n                                         |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             lit.span,\n                             \"if you mean to use a decimal constant, remove the `0` to remove confusion\",\n                             src.trim_start_matches(|c| c == '_' || c == '0').to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n                             format!(\"0o{}\", src.trim_start_matches(|c| c == '_' || c == '0')),"}, {"sha": "9fd67e2fcbfdecdceef023fc5bd7c2401ac4db14", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -90,6 +90,10 @@ impl LintPass for MissingDoc {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MISSING_DOCS_IN_PRIVATE_ITEMS]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MissingDoc\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {"}, {"sha": "754215799e58770cd96ea15adc4b278aa4065388", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -83,6 +83,10 @@ impl LintPass for MissingInline {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MISSING_INLINE_IN_PUBLIC_ITEMS]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MissingInline\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {"}, {"sha": "f772fa2b21c838918fb2f08235d428cdc64a77a9", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -37,6 +37,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MULTIPLE_CRATE_VERSIONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MultipleCrateVersions\"\n+    }\n }\n \n impl EarlyLintPass for Pass {"}, {"sha": "b244c7f30315fed5daad62744bba0e3ee1ad1528", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for MutMut {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MUT_MUT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"MutMut\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {"}, {"sha": "716abbe31fef564b18acdd85c2e805b01c4f66f3", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for UnnecessaryMutPassed {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNNECESSARY_MUT_PASSED)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnneccessaryMutPassed\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {"}, {"sha": "fa0e8288b307ba797bdfdd4becf3120ff9c89785", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -53,6 +53,10 @@ impl LintPass for MutexAtomic {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MUTEX_ATOMIC, MUTEX_INTEGER)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Mutex\"\n+    }\n }\n \n pub struct MutexAtomic;"}, {"sha": "49f607f525dc5fa323acc3124090e6807fb01ff0", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -61,6 +61,10 @@ impl LintPass for NeedlessBool {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_BOOL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedlessBool\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n@@ -141,6 +145,10 @@ impl LintPass for BoolComparison {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOOL_COMPARISON)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"BoolComparison\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {"}, {"sha": "206a1465a46f13c92d54f116d1a1829728618bd5", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -39,6 +39,10 @@ impl LintPass for NeedlessBorrow {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_BORROW)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedlessBorrow\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n@@ -66,7 +70,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                              by the compiler\",\n                             |db| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"change this to\",\n                                         snippet,\n@@ -99,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     \"this pattern creates a reference to a reference\",\n                     |db| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 pat.span,\n                                 \"change this to\",\n                                 snippet,"}, {"sha": "bf2857d92881451c710a57c109a2bc2da15e6a81", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -58,6 +58,10 @@ impl LintPass for NeedlessBorrowedRef {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_BORROWED_REFERENCE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedlessBorrowedRef\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n@@ -78,7 +82,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n                                        let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n-                                       db.span_suggestion_with_applicability(\n+                                       db.span_suggestion(\n                                            pat.span,\n                                            \"try removing the `&ref` part and just keep\",\n                                            hint,"}, {"sha": "19d7ab32fea14e0184351158bd83a8223627af76", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -107,6 +107,10 @@ impl LintPass for NeedlessContinue {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_CONTINUE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedlessContinue\"\n+    }\n }\n \n impl EarlyLintPass for NeedlessContinue {"}, {"sha": "73c0ed72d3b454fb7877651cac44d58623b96e38", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -56,6 +56,10 @@ impl LintPass for NeedlessPassByValue {\n     fn get_lints(&self) -> LintArray {\n         lint_array![NEEDLESS_PASS_BY_VALUE]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedlessPassByValue\"\n+    }\n }\n \n macro_rules! need {\n@@ -233,15 +237,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     slice_ty,\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n@@ -262,15 +266,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     \"&str\".to_string(),\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or("}, {"sha": "1d91feddcbeb1a2d5bb19945b24ede460250a230", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -33,6 +33,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_UPDATE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NeedUpdate\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "50031dd68cf15dd2e5496e3f1d9bb91c22c31458", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -48,6 +48,10 @@ impl LintPass for NoNegCompOpForPartialOrd {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEG_CMP_OP_ON_PARTIAL_ORD)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NoNegCompOpForPartialOrd\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {"}, {"sha": "b207433b5abb8565b1d0e74aaaf77f7e2407ce57", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for NegMultiply {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEG_MULTIPLY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NegMultiply\"\n+    }\n }\n \n #[allow(clippy::match_same_arms)]"}, {"sha": "f851ae4638e60813bfd0945da2948eb8bfcbd377", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -93,6 +93,10 @@ impl LintPass for NewWithoutDefault {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEW_WITHOUT_DEFAULT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NewWithoutDefault\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {"}, {"sha": "7799e8fecf2c71b742a21a2d138262a555295838", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -100,6 +100,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NO_EFFECT, UNNECESSARY_OPERATION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NoEffect\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "50d8b69ffae87ab34b07fc8d32ebab3c5aabec90", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -122,7 +122,7 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, sourc\n         match source {\n             Source::Item { .. } => {\n                 let const_kw_span = span.from_inner_byte_pos(0, 5);\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     const_kw_span,\n                     \"make this a static item\",\n                     \"static\".to_string(),\n@@ -147,6 +147,10 @@ impl LintPass for NonCopyConst {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DECLARE_INTERIOR_MUTABLE_CONST, BORROW_INTERIOR_MUTABLE_CONST)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NonCopyConst\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {"}, {"sha": "3bdf2c38d2372c91604baa3c5f985d78c464e701", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -71,6 +71,10 @@ impl LintPass for NonExpressiveNames {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"NoneExpressiveNames\"\n+    }\n }\n \n struct ExistingName {"}, {"sha": "0789df0d76b85c0213f78c03afa351f1bbae6312", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -41,6 +41,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IF_LET_SOME_RESULT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"OkIfLet\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "31a6caa50d6949c2e7388cfb248dd4287bf11be3", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for NonSensical {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NONSENSICAL_OPEN_OPTIONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"OpenOptions\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSensical {"}, {"sha": "d424e8bcaad71db5b2f19415507a3c1f2ab5126a", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -28,6 +28,10 @@ impl LintPass for OverflowCheckConditional {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OVERFLOW_CHECK_CONDITIONAL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"OverflowCheckConditional\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {"}, {"sha": "d0f7487c24a26c6c8438785a0a81b974a6b9c3b5", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -48,6 +48,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PANIC_PARAMS, UNIMPLEMENTED)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"PanicUnimplemented\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "b9d5102ccd6ae14f3b80eb7e07e689c26c38f89f", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PARTIALEQ_NE_IMPL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"PartialEqNeImpl\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "ed03a8c6aa76f093400e74bbcaf242ec2915819a", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for Precedence {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PRECEDENCE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Precedence\"\n+    }\n }\n \n impl EarlyLintPass for Precedence {"}, {"sha": "b990b7ab2bd3df161b7793c11557b023baac80c8", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -102,6 +102,10 @@ impl LintPass for PointerPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PTR_ARG, CMP_NULL, MUT_FROM_REF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Ptr\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n@@ -178,15 +182,15 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                          with non-Vec-based slices.\",\n                         |db| {\n                             if let Some(ref snippet) = ty_snippet {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     arg.span,\n                                     \"change this to\",\n                                     format!(\"&[{}]\", snippet),\n                                     Applicability::Unspecified,\n                                 );\n                             }\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -206,14 +210,9 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                         arg.span,\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n-                                arg.span,\n-                                \"change this to\",\n-                                \"&str\".into(),\n-                                Applicability::Unspecified,\n-                            );\n+                            db.span_suggestion(arg.span, \"change this to\", \"&str\".into(), Applicability::Unspecified);\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_short_with_applicability(\n+                                db.span_suggestion_short(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -246,7 +245,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n                                 |db| {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         arg.span,\n                                         \"change this to\",\n                                         \"&\".to_owned() + &r,"}, {"sha": "4ff3f7643ba486f05d2f5d30da0bc4e2131833b3", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -46,6 +46,10 @@ impl lint::LintPass for Pass {\n     fn get_lints(&self) -> lint::LintArray {\n         lint_array!(PTR_OFFSET_WITH_CAST)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"PtrOffsetWithCast\"\n+    }\n }\n \n impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "cab133943a34a1f3274a1ca5521d06ea380a4dc4", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -41,6 +41,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(QUESTION_MARK)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"QuestionMark\"\n+    }\n }\n \n impl Pass {\n@@ -88,7 +92,7 @@ impl Pass {\n                         expr.span,\n                         \"this block may be rewritten with the `?` operator\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 expr.span,\n                                 \"replace_it_with\",\n                                 replacement_str,"}, {"sha": "acd2a3ebc65e1012c08edb02650e5a7fd7c6e945", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -97,6 +97,10 @@ impl LintPass for Pass {\n             RANGE_MINUS_ONE\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Ranges\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -162,14 +166,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let end = Sugg::hir(cx, y, \"y\");\n                         if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     \"use\",\n                                     format!(\"({}..={})\", start, end),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             } else {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     \"use\",\n                                     format!(\"{}..={}\", start, end),\n@@ -195,7 +199,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"use\",\n                             format!(\"{}..{}\", start, end),"}, {"sha": "7ac147c8ac17235cb01eef0fbc878df75e182f89", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -73,6 +73,10 @@ impl LintPass for RedundantClone {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REDUNDANT_CLONE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"RedundantClone\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n@@ -198,7 +202,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                         );\n \n                         span_lint_node_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 sugg_span,\n                                 \"remove this\",\n                                 String::new(),"}, {"sha": "aeb7bb6493c6e528505203b836d78fbf3c58cfd2", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -38,6 +38,10 @@ impl LintPass for RedundantFieldNames {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REDUNDANT_FIELD_NAMES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"RedundantFieldNames\"\n+    }\n }\n \n impl EarlyLintPass for RedundantFieldNames {"}, {"sha": "8f833a893dfcaf23bd0d8ef3553f58087197fe36", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -49,6 +49,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REDUNDANT_PATTERN_MATCHING)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"RedundantPatternMatching\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n@@ -94,7 +98,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n             &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n             |db| {\n                 let span = expr.span.to(op.span);\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     span,\n                     \"try this\",\n                     format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n@@ -159,7 +163,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, o\n                 &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                 |db| {\n                     let span = expr.span.to(op.span);\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         span,\n                         \"try this\",\n                         format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),"}, {"sha": "3a5af498017de64f5416f5229ca10872cd498a8f", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,6 +30,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEREF_ADDROF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DerefAddrOf\"\n+    }\n }\n \n fn without_parens(mut e: &Expr) -> &Expr {\n@@ -84,6 +88,10 @@ impl LintPass for DerefPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REF_IN_DEREF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"RefInDeref\"\n+    }\n }\n \n impl EarlyLintPass for DerefPass {"}, {"sha": "0171c2a528315f4a4a6175234ebad2ed4cf1f402", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -76,6 +76,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Regex\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "16c8cc3bc47a9f657e24f3de3ce5f444a94b045c", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for ReplaceConsts {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(REPLACE_CONSTS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ReplaceConsts\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {"}, {"sha": "71ef3e4bfa035696b7faac541ae3888c054b94c1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -135,7 +135,7 @@ impl ReturnPass {\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     ret_span,\n                     \"remove `return` as shown\",\n                     snippet,\n@@ -180,6 +180,10 @@ impl LintPass for ReturnPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Return\"\n+    }\n }\n \n impl EarlyLintPass for ReturnPass {\n@@ -207,7 +211,7 @@ impl EarlyLintPass for ReturnPass {\n                     (ty.span, Applicability::MaybeIncorrect)\n                 };\n                 span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |db| {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         rspan,\n                         \"remove the `-> ()`\",\n                         String::new(),\n@@ -227,7 +231,7 @@ impl EarlyLintPass for ReturnPass {\n             then {\n                 let sp = expr.span;\n                 span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         sp,\n                         \"remove the final `()`\",\n                         String::new(),\n@@ -243,7 +247,7 @@ impl EarlyLintPass for ReturnPass {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n                 if is_unit_expr(expr) && !in_macro(expr.span) {\n                     span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"remove the `()`\",\n                             String::new(),"}, {"sha": "8090ed7fbcff4caabcb3efa82f2b1e15c7e8a42a", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -25,6 +25,10 @@ impl LintPass for Serde {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(SERDE_API_MISUSE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"SerdeAPI\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Serde {"}, {"sha": "1f341bd22ee85b14f6c478177134db1cc664f138", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -82,6 +82,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Shadow\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "4ce9ce3e2ff21096c31c2335e2fbd901246e7b37", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -37,6 +37,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(SLOW_VECTOR_INITIALIZATION,)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"SlowVectorInit\"\n+    }\n }\n \n /// `VecAllocation` contains data regarding a vector allocated with `with_capacity` and then\n@@ -175,7 +179,7 @@ impl Pass {\n         let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n         span_lint_and_then(cx, lint, slow_fill.span, msg, |db| {\n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 vec_alloc.allocation_expr.span,\n                 \"consider replace allocation with\",\n                 format!(\"vec![0; {}]\", len_expr),"}, {"sha": "71784397463b6859925a4d8781f46f6f7861dd8b", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -79,6 +79,10 @@ impl LintPass for StringAdd {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(STRING_ADD, STRING_ADD_ASSIGN)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"StringAdd\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n@@ -151,6 +155,10 @@ impl LintPass for StringLitAsBytes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(STRING_LIT_AS_BYTES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"StringLiteralAsBytes\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {"}, {"sha": "5f0e49dd7e6daccfd99288d10abfc1e0ea00c55e", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -57,6 +57,10 @@ impl LintPass for SuspiciousImpl {\n     fn get_lints(&self) -> LintArray {\n         lint_array![SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_ASSIGN_IMPL]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"SuspiciousImpl\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {"}, {"sha": "af7fd11c6e5805740a9002c7baa3bb0ff0373da5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -57,6 +57,10 @@ impl LintPass for Swap {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MANUAL_SWAP, ALMOST_SWAPPED]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Swap\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Swap {\n@@ -138,7 +142,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are swapping{} manually\", what),\n                                    |db| {\n                                        if !sugg.is_empty() {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                span,\n                                                \"try\",\n                                                sugg,\n@@ -187,7 +191,7 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are trying to swap{}\", what),\n                                    |db| {\n                                        if !what.is_empty() {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                span,\n                                                \"try\",\n                                                format!("}, {"sha": "0d8cfedf4144ecc1aeb8893211f36b2f90c67335", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -44,6 +44,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TEMPORARY_ASSIGNMENT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"TemporaryAssignment\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "90cfcd56c3b0469a80679d616f7b4f928dbee85d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -219,6 +219,10 @@ impl LintPass for Transmute {\n             TRANSMUTE_INT_TO_FLOAT,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Transmute\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n@@ -256,12 +260,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                         };\n \n-                                        db.span_suggestion_with_applicability(\n-                                            e.span,\n-                                            \"try\",\n-                                            sugg.to_string(),\n-                                            Applicability::Unspecified,\n-                                        );\n+                                        db.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                                     }\n                                 },\n                             ),\n@@ -272,7 +271,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 \"transmute from an integer to a pointer\",\n                                 |db| {\n                                     if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"try\",\n                                             arg.as_ty(&to_ty.to_string()).to_string(),\n@@ -331,7 +330,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                                     };\n \n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"try\",\n                                         sugg::make_unop(deref, arg).to_string(),\n@@ -352,7 +351,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         } else {\n                                             arg\n                                         };\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"consider using\",\n                                             format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n@@ -379,7 +378,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             e.span,\n                                             &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                                             |db| {\n-                                                db.span_suggestion_with_applicability(\n+                                                db.span_suggestion(\n                                                     e.span,\n                                                     \"consider using\",\n                                                     format!(\n@@ -412,7 +411,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                     } else {\n                                                         sugg_paren.addr_deref()\n                                                     };\n-                                                    db.span_suggestion_with_applicability(\n+                                                    db.span_suggestion(\n                                                         e.span,\n                                                         \"try\",\n                                                         sugg.to_string(),\n@@ -432,12 +431,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 |db| {\n                                     if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                         let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n-                                        db.span_suggestion_with_applicability(\n-                                            e.span,\n-                                            \"try\",\n-                                            sugg.to_string(),\n-                                            Applicability::Unspecified,\n-                                        );\n+                                        db.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                                     }\n                                 },\n                             ),\n@@ -450,7 +444,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     |db| {\n                                         let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                         let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"consider using\",\n                                             sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string(),\n@@ -474,7 +468,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"consider using\",\n                                         format!(\"{}::from_bits({})\", to_ty, arg.to_string()),"}, {"sha": "4e3bb7d329e16a5945e18ece64bbece6c54e71b8", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -142,6 +142,10 @@ impl LintPass for TriviallyCopyPassByRef {\n     fn get_lints(&self) -> LintArray {\n         lint_array![TRIVIALLY_COPY_PASS_BY_REF]\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"TrivallyCopyPassByRef\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {"}, {"sha": "4683ffb4c85b0f3bb94a971bf456080dedd1cf4c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -168,6 +168,10 @@ impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Types\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n@@ -467,6 +471,10 @@ impl LintPass for LetPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LET_UNIT_VALUE)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"LetUnitValue\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetPass {\n@@ -531,6 +539,10 @@ impl LintPass for UnitCmp {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNIT_CMP)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnicCmp\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n@@ -586,6 +598,10 @@ impl LintPass for UnitArg {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNIT_ARG)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnitArg\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n@@ -1073,6 +1089,10 @@ impl LintPass for CastPass {\n             FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Casts\"\n+    }\n }\n \n // Check if the given type is either `core::ffi::c_void` or\n@@ -1278,6 +1298,10 @@ impl LintPass for TypeComplexityPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TYPE_COMPLEXITY)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"TypeComplexityPass\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n@@ -1442,6 +1466,10 @@ impl LintPass for CharLitAsU8 {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CHAR_LIT_AS_U8)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CharLiteralAsU8\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n@@ -1500,6 +1528,10 @@ impl LintPass for AbsurdExtremeComparisons {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ABSURD_EXTREME_COMPARISONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"AbsurdExtremeComparisons\"\n+    }\n }\n \n enum ExtremeType {\n@@ -1675,6 +1707,10 @@ impl LintPass for InvalidUpcastComparisons {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INVALID_UPCAST_COMPARISONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"InvalidUpcastComparisons\"\n+    }\n }\n \n #[derive(Copy, Clone, Debug, Eq)]\n@@ -1918,6 +1954,10 @@ impl LintPass for ImplicitHasher {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IMPLICIT_HASHER)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ImplicitHasher\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n@@ -2265,6 +2305,10 @@ impl LintPass for RefToMut {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CAST_REF_TO_MUT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"RefToMut\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {"}, {"sha": "d1f39a5e2c23085f8a56eafb1a538b088645df6d", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -65,6 +65,10 @@ impl LintPass for Unicode {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Unicode\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unicode {"}, {"sha": "6cf1a582a654952ca3e4db02f4c73780014b9960", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for UnsafeNameRemoval {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNSAFE_REMOVED_FROM_NAME)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnsafeNameRemoval\"\n+    }\n }\n \n impl EarlyLintPass for UnsafeNameRemoval {"}, {"sha": "d54cd3bba03015a9fc6fd95f8b6371c0e3407902", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -36,6 +36,10 @@ impl LintPass for UnusedIoAmount {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_IO_AMOUNT)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnusedIoAmount\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {"}, {"sha": "29d76a051186017a70714f97043a089571af6b11", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -39,6 +39,10 @@ impl LintPass for UnusedLabel {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_LABEL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UnusedLable\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {"}, {"sha": "196715f77d77ba12beb17691f7fb4b7afecf2b2e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -184,6 +184,10 @@ impl<'a> LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PANICKING_UNWRAP, UNNECESSARY_UNWRAP)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Unwrap\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "1f1d9ddbfec40b61c573ee1d9303c198c9632bd7", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -51,6 +51,10 @@ impl LintPass for UseSelf {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(USE_SELF)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UseSelf\"\n+    }\n }\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";"}, {"sha": "19c3f3ad2302949ba985f55c7032cbc6b67f91ae", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -53,6 +53,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LINT_AUTHOR)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Author\"\n+    }\n }\n \n fn prelude() {"}, {"sha": "758d1d2d36518302b84e8c9d1ab84d132bad440b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -35,6 +35,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEEP_CODE_INSPECTION)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DeepCodeInspector\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "78950493699a4e9a2932858f40d95393fd61a256", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -98,6 +98,10 @@ impl LintPass for Clippy {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CLIPPY_LINTS_INTERNAL)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ClippyLintsInternal\"\n+    }\n }\n \n impl EarlyLintPass for Clippy {\n@@ -139,6 +143,9 @@ impl LintPass for LintWithoutLintPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LINT_WITHOUT_LINT_PASS)\n     }\n+    fn name(&self) -> &'static str {\n+        \"LintWithoutLintPass\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n@@ -248,6 +255,10 @@ impl LintPass for DefaultHashTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEFAULT_HASH_TYPES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DefaultHashType\"\n+    }\n }\n \n impl EarlyLintPass for DefaultHashTypes {\n@@ -293,6 +304,10 @@ impl LintPass for CompilerLintFunctions {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(COMPILER_LINT_FUNCTIONS)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"CompileLintFunctions\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {"}, {"sha": "af9b1599649dc21d49d906c3efb4fc3d48b86b9a", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -693,7 +693,7 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion_with_applicability(sp, help, sugg, applicability);\n+        db.span_suggestion(sp, help, sugg, applicability);\n     });\n }\n "}, {"sha": "166470876c988fd718f9fccd0bb2950820feeb92", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion_with_applicability(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n         }\n     }\n \n@@ -568,7 +568,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion_with_applicability(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n         }\n     }\n \n@@ -586,7 +586,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             }\n         }\n \n-        self.span_suggestion_with_applicability(remove_span, msg, String::new(), applicability);\n+        self.span_suggestion(remove_span, msg, String::new(), applicability);\n     }\n }\n "}, {"sha": "a99b6ca840c0dd0d0e9cdea9ad4ae685eea0cc9b", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -32,6 +32,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(USELESS_VEC)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"UselessVec\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "8ccf2c69cc7f9e4163a6639c81622196cb076708", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -33,6 +33,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(WILDCARD_DEPENDENCIES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"WildcardDependencies\"\n+    }\n }\n \n impl EarlyLintPass for Pass {"}, {"sha": "36f7fee969b9c2c56cf091e6e315e9af22d8a70f", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -175,6 +175,10 @@ impl LintPass for Pass {\n             WRITE_LITERAL\n         )\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"Write\"\n+    }\n }\n \n impl EarlyLintPass for Pass {"}, {"sha": "a806be954322d4f015d6361ec7e423f5564399af", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -28,6 +28,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ZERO_DIVIDED_BY_ZERO)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"ZeroDiv\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {"}, {"sha": "1ce6f6b7c4963368f8f5ce13b8a777390a90d570", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -123,7 +123,7 @@ pub fn main() {\n                     let sess = &state.session;\n                     let mut ls = sess.lint_store.borrow_mut();\n                     for pass in early_lint_passes {\n-                        ls.register_early_pass(Some(sess), true, pass);\n+                        ls.register_early_pass(Some(sess), true, false, pass);\n                     }\n                     for pass in late_lint_passes {\n                         ls.register_late_pass(Some(sess), true, pass);"}, {"sha": "ea809472cb286973a6e1004d35a21a513bcad19e", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -30,5 +30,11 @@ error: lint `misaligned_transmute` has been removed: `this lint has been split i\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n+  --> $DIR/deprecated.rs:1:8\n+   |\n+LL | #[warn(str_to_string)]\n+   |        ^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "a6f10a006dbd3a7ccecf0d33a940f8aa6e999cde", "filename": "tests/ui/lint_without_lint_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.rs?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -25,6 +25,10 @@ impl lint::LintPass for Pass {\n     fn get_lints(&self) -> lint::LintArray {\n         lint_array!(TEST_LINT_REGISTERED)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"TEST_LINT\"\n+    }\n }\n \n fn main() {}"}, {"sha": "7864e2a1fca2a9d0537a3c73514da0b19a7d526d", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13421e3945a28dad49226c4d08986eaacd1033d9/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=13421e3945a28dad49226c4d08986eaacd1033d9", "patch": "@@ -20,5 +20,17 @@ error: lint `clippy::new_without_default_derive` has been renamed to `clippy::ne\n LL | #[warn(clippy::new_without_default_derive)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n-error: aborting due to 3 previous errors\n+error: unknown lint: `stutter`\n+  --> $DIR/rename.rs:1:10\n+   |\n+LL | #![allow(stutter)]\n+   |          ^^^^^^^\n+\n+error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n+  --> $DIR/rename.rs:3:8\n+   |\n+LL | #[warn(clippy::stutter)]\n+   |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n+\n+error: aborting due to 5 previous errors\n "}]}