{"sha": "84d75dbd7ed128f8694b8a9807cffd5794a0c918", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZDc1ZGJkN2VkMTI4Zjg2OTRiOGE5ODA3Y2ZmZDU3OTRhMGM5MTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-05T20:49:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:11:12Z"}, "message": "fix node classification", "tree": {"sha": "af2cdb2e81f1f14d60cec7969b6908a0e3bdf587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2cdb2e81f1f14d60cec7969b6908a0e3bdf587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d75dbd7ed128f8694b8a9807cffd5794a0c918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d75dbd7ed128f8694b8a9807cffd5794a0c918", "html_url": "https://github.com/rust-lang/rust/commit/84d75dbd7ed128f8694b8a9807cffd5794a0c918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d75dbd7ed128f8694b8a9807cffd5794a0c918/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ce224a8f84d8ed2fdb01410d7b931fd29655c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ce224a8f84d8ed2fdb01410d7b931fd29655c1", "html_url": "https://github.com/rust-lang/rust/commit/27ce224a8f84d8ed2fdb01410d7b931fd29655c1"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "955f834e40398126186162c1931c7c41765bc39d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84d75dbd7ed128f8694b8a9807cffd5794a0c918/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d75dbd7ed128f8694b8a9807cffd5794a0c918/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=84d75dbd7ed128f8694b8a9807cffd5794a0c918", "patch": "@@ -371,14 +371,11 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id(variant.node.data.id());\n                 Some(Def::Variant(def_id))\n             }\n-            Node::AnonConst(item) => {\n-                let def_id = self.local_def_id(item.id);\n-                Some(Def::Const(def_id))\n-            }\n             Node::StructCtor(variant) => {\n                 let def_id = self.local_def_id(variant.id());\n-                Some(Def::Fn(def_id))\n+                Some(Def::StructCtor(def_id, def::CtorKind::from_hir(variant)))\n             }\n+            Node::AnonConst(_) |\n             Node::Field(_) |\n             Node::Expr(_) |\n             Node::Stmt(_) |"}, {"sha": "7bbce405a8425c4ba81c5c8ba3c5089a195617ab", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/84d75dbd7ed128f8694b8a9807cffd5794a0c918/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d75dbd7ed128f8694b8a9807cffd5794a0c918/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=84d75dbd7ed128f8694b8a9807cffd5794a0c918", "patch": "@@ -595,23 +595,28 @@ fn write_mir_sig(\n     use rustc::hir::def::Def;\n \n     trace!(\"write_mir_sig: {:?}\", src.instance);\n-    let descr = tcx.describe_def(src.def_id()).unwrap();\n+    let descr = tcx.describe_def(src.def_id());\n     match (descr, src.promoted) {\n-        (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n-        (Def::Fn(_), _) | (Def::Method(_), _) => write!(w, \"fn\")?,\n-        (Def::Const(_), _) => write!(w, \"const\")?,\n-        (Def::Static(_, /*is_mutbl*/false), _) => write!(w, \"static\")?,\n-        (Def::Static(_, /*is_mutbl*/true), _) => write!(w, \"static mut\")?,\n+        (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n+        (Some(Def::Fn(_)), _) | (Some(Def::Method(_)), _) => write!(w, \"fn \")?,\n+        (Some(Def::StructCtor(..)), _) => write!(w, \"struct \")?,\n+        (Some(Def::Const(_)), _) => write!(w, \"const \")?,\n+        (Some(Def::Static(_, /*is_mutbl*/false)), _) => write!(w, \"static \")?,\n+        (Some(Def::Static(_, /*is_mutbl*/true)), _) => write!(w, \"static mut \")?,\n+        (None, _) => {}, // things like anon const, not an item\n         _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n \n     item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 elsewhere\n-        write!(w, \" {}\", tcx.item_path_str(src.def_id()))\n+        write!(w, \"{}\", tcx.item_path_str(src.def_id()))\n     })?;\n \n     match (descr, src.promoted) {\n-        (Def::Fn(_), None) | (Def::Method(_), None) => {\n+        (Some(Def::Fn(_)), None) |\n+        (Some(Def::Method(_)), None) |\n+        (Some(Def::StructCtor(..)), None) =>\n+        {\n             write!(w, \"(\")?;\n \n             // fn argument types.\n@@ -624,18 +629,20 @@ fn write_mir_sig(\n \n             write!(w, \") -> {}\", mir.return_ty())?;\n         }\n-        (Def::Const(_), _) | (Def::Static(_, _), _) | (_, Some(_)) => {\n+        _ => {\n             assert_eq!(mir.arg_count, 0);\n             write!(w, \": {} =\", mir.return_ty())?;\n         }\n-        _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n \n     if let Some(yield_ty) = mir.yield_ty {\n         writeln!(w)?;\n         writeln!(w, \"yields {}\", yield_ty)?;\n     }\n \n+    write!(w, \" \")?;\n+    // Next thing that gets printed is the opening {\n+\n     Ok(())\n }\n "}]}