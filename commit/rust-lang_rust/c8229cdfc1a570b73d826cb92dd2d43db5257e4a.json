{"sha": "c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MjI5Y2RmYzFhNTcwYjczZDgyNmNiOTJkZDJkNDNkYjUyNTdlNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T13:49:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T15:12:31Z"}, "message": "on Windows, use miri_static_root for TLS dtors", "tree": {"sha": "99f54cb1dead1a7041b31eae2ba01b94a1364e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f54cb1dead1a7041b31eae2ba01b94a1364e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "html_url": "https://github.com/rust-lang/rust/commit/c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8229cdfc1a570b73d826cb92dd2d43db5257e4a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "html_url": "https://github.com/rust-lang/rust/commit/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "ae837f8e16533618989f6220893bda61e281db29", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8229cdfc1a570b73d826cb92dd2d43db5257e4a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8229cdfc1a570b73d826cb92dd2d43db5257e4a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "patch": "@@ -716,14 +716,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn leak_report(&self) -> usize {\n+    /// Print leaked memory. Allocations reachable from `static_roots` or a `Global` allocation\n+    /// are not considered leaked. Leaks whose kind `may_leak()` returns true are not reported.\n+    pub fn leak_report(&self, static_roots: &[AllocId]) -> usize {\n         // Collect the set of allocations that are *reachable* from `Global` allocations.\n         let reachable = {\n             let mut reachable = FxHashSet::default();\n             let global_kind = M::GLOBAL_KIND.map(MemoryKind::Machine);\n             let mut todo: Vec<_> = self.alloc_map.filter_map_collect(move |&id, &(kind, _)| {\n                 if Some(kind) == global_kind { Some(id) } else { None }\n             });\n+            todo.extend(static_roots);\n             while let Some(id) = todo.pop() {\n                 if reachable.insert(id) {\n                     // This is a new allocation, add its relocations to `todo`."}, {"sha": "0bd9600b6f2e1b0e8bb7fe374e3dcf3693d91276", "filename": "src/libstd/sys/windows/thread_local_key.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8229cdfc1a570b73d826cb92dd2d43db5257e4a/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8229cdfc1a570b73d826cb92dd2d43db5257e4a/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=c8229cdfc1a570b73d826cb92dd2d43db5257e4a", "patch": "@@ -110,14 +110,29 @@ struct Node {\n     next: *mut Node,\n }\n \n+#[cfg(miri)]\n+extern \"Rust\" {\n+    /// Miri-provided extern function to mark the block `ptr` points to as a \"root\"\n+    /// for some static memory. This memory and everything reachable by it is not\n+    /// considered leaking even if it still exists when the program terminates.\n+    ///\n+    /// `ptr` has to point to the beginning of an allocated block.\n+    fn miri_static_root(ptr: *const u8);\n+}\n+\n unsafe fn register_dtor(key: Key, dtor: Dtor) {\n     let mut node = Box::new(Node { key, dtor, next: ptr::null_mut() });\n \n     let mut head = DTORS.load(SeqCst);\n     loop {\n         node.next = head;\n         match DTORS.compare_exchange(head, &mut *node, SeqCst, SeqCst) {\n-            Ok(_) => return mem::forget(node),\n+            Ok(_) => {\n+                #[cfg(miri)]\n+                miri_static_root(&*node as *const _ as *const u8);\n+\n+                return mem::forget(node);\n+            }\n             Err(cur) => head = cur,\n         }\n     }"}]}