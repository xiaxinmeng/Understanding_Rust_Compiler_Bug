{"sha": "af26e7f4f411824a633807d88346e99e62ae3ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjZlN2Y0ZjQxMTgyNGE2MzM4MDdkODgzNDZlOTllNjJhZTNlZjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-11T00:16:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-11T09:08:29Z"}, "message": "pretty-print: Merge `print_tts` and `print_tts_ext`", "tree": {"sha": "e46123b4848ba66af32eef4415bb1faf49695ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46123b4848ba66af32eef4415bb1faf49695ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af26e7f4f411824a633807d88346e99e62ae3ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af26e7f4f411824a633807d88346e99e62ae3ef3", "html_url": "https://github.com/rust-lang/rust/commit/af26e7f4f411824a633807d88346e99e62ae3ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af26e7f4f411824a633807d88346e99e62ae3ef3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da50d598816c0ba367e330309707cb94637cce2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da50d598816c0ba367e330309707cb94637cce2e", "html_url": "https://github.com/rust-lang/rust/commit/da50d598816c0ba367e330309707cb94637cce2e"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "b7ff50a485e7528784cfdb0a795ef1a47f330502", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af26e7f4f411824a633807d88346e99e62ae3ef3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e7f4f411824a633807d88346e99e62ae3ef3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=af26e7f4f411824a633807d88346e99e62ae3ef3", "patch": "@@ -341,7 +341,7 @@ pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n }\n \n pub fn tokens_to_string(tokens: TokenStream) -> String {\n-    to_string(|s| s.print_tts_ext(tokens, false))\n+    to_string(|s| s.print_tts(tokens, false))\n }\n \n pub fn stmt_to_string(stmt: &ast::Stmt) -> String {\n@@ -629,7 +629,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             } else {\n                 self.print_attribute_path(&attr.path);\n                 self.space();\n-                self.print_tts(attr.tokens.clone());\n+                self.print_tts(attr.tokens.clone(), true);\n             }\n             self.word(\"]\");\n         }\n@@ -696,11 +696,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n         }\n     }\n \n-    fn print_tts(&mut self, tts: tokenstream::TokenStream) {\n-        self.print_tts_ext(tts, true)\n-    }\n-\n-    fn print_tts_ext(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n+    fn print_tts(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n         self.ibox(0);\n         for (i, tt) in tts.into_trees().enumerate() {\n             if i != 0 {\n@@ -1247,7 +1243,7 @@ impl<'a> State<'a> {\n                     self.print_ident(item.ident);\n                     self.cbox(INDENT_UNIT);\n                     self.popen();\n-                    self.print_tts(mac.node.stream());\n+                    self.print_tts(mac.node.stream(), true);\n                     self.pclose();\n                     self.s.word(\";\");\n                     self.end();\n@@ -1258,7 +1254,7 @@ impl<'a> State<'a> {\n                 self.print_ident(item.ident);\n                 self.cbox(INDENT_UNIT);\n                 self.popen();\n-                self.print_tts(tts.stream());\n+                self.print_tts(tts.stream(), true);\n                 self.pclose();\n                 self.s.word(\";\");\n                 self.end();\n@@ -1659,7 +1655,7 @@ impl<'a> State<'a> {\n                 self.bopen();\n             }\n         }\n-        self.print_tts(m.node.stream());\n+        self.print_tts(m.node.stream(), true);\n         match m.node.delim {\n             MacDelimiter::Parenthesis => self.pclose(),\n             MacDelimiter::Bracket => self.s.word(\"]\"),"}]}