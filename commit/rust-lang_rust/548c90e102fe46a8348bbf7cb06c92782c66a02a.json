{"sha": "548c90e102fe46a8348bbf7cb06c92782c66a02a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGM5MGUxMDJmZTQ2YTgzNDhiYmY3Y2IwNmM5Mjc4MmM2NmEwMmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T18:52:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T18:53:07Z"}, "message": "share some code between panic intrinsics, and fix the message", "tree": {"sha": "c3ba5c49645a7f7ae870be56810d55e8fec2ba9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ba5c49645a7f7ae870be56810d55e8fec2ba9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548c90e102fe46a8348bbf7cb06c92782c66a02a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548c90e102fe46a8348bbf7cb06c92782c66a02a", "html_url": "https://github.com/rust-lang/rust/commit/548c90e102fe46a8348bbf7cb06c92782c66a02a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548c90e102fe46a8348bbf7cb06c92782c66a02a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2802c3cf0b91e18de1f37e24929a406033df0cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2802c3cf0b91e18de1f37e24929a406033df0cc0", "html_url": "https://github.com/rust-lang/rust/commit/2802c3cf0b91e18de1f37e24929a406033df0cc0"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "fbb0a654294f21d1b9fc3b503fc80ae31bca67c7", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/548c90e102fe46a8348bbf7cb06c92782c66a02a/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c90e102fe46a8348bbf7cb06c92782c66a02a/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=548c90e102fe46a8348bbf7cb06c92782c66a02a", "patch": "@@ -444,35 +444,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(result_ptr, dest)?;\n             }\n \n-            \"panic_if_uninhabited\" => {\n+            \"panic_if_uninhabited\" |\n+            \"panic_if_zero_invalid\" |\n+            \"panic_if_any_invalid\" => {\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 if layout.abi.is_uninhabited() {\n                     // Return here because we paniced instead of returning normally from the intrinsic.\n-                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type {}\", ty), unwind);\n+                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type `{}`\", ty), unwind);\n                 }\n-            }\n-\n-            \"panic_if_zero_invalid\" => {\n-                let ty = substs.type_at(0);\n-                let layout = this.layout_of(ty)?;\n-                // Check if it permits zeroed raw initialization\n-                if !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n+                if intrinsic_name == \"panic_if_zero_invalid\" && !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n                     // Return here because we paniced instead of returning normally from the intrinsic.\n                     return this.start_panic(&format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty), unwind);\n                 }\n-            }\n-\n-            \"panic_if_any_invalid\" => {\n-                let ty = substs.type_at(0);\n-                let layout = this.layout_of(ty)?;\n-                // rustc handles all these in a single function, but we don't so we need to make sure `mem::uninitialized::<!>()` returns the right error.\n-                // So we check for `is_uninhabited` here too.\n-                if layout.abi.is_uninhabited() {\n-                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type {}\", ty), unwind);\n-                }\n-                // Check if it permits any raw initialization\n-                if !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n+                if intrinsic_name == \"panic_if_any_invalid\" && !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n                     // Return here because we paniced instead of returning normally from the intrinsic.\n                     return this.start_panic(&format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty), unwind);\n                 }"}, {"sha": "cc97ba5a85d290a9cdce3043ce29f575b5450eec", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/548c90e102fe46a8348bbf7cb06c92782c66a02a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c90e102fe46a8348bbf7cb06c92782c66a02a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=548c90e102fe46a8348bbf7cb06c92782c66a02a", "patch": "@@ -71,11 +71,11 @@ fn main() {\n     #[allow(deprecated, invalid_value)]\n     {\n         test(\n-            Some(\"attempted to instantiate uninhabited type !\"),\n+            Some(\"attempted to instantiate uninhabited type `!`\"),\n             |_old_val| unsafe { std::mem::uninitialized::<!>() },\n         );\n         test(\n-            Some(\"attempted to zero-initialize type `!`, which is invalid\"),\n+            Some(\"attempted to instantiate uninhabited type `!`\"),\n             |_old_val| unsafe { std::mem::zeroed::<!>() },\n         );\n         test("}, {"sha": "8d97fd6321f18cc6dfbf2960212554f9008974a7", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/548c90e102fe46a8348bbf7cb06c92782c66a02a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/548c90e102fe46a8348bbf7cb06c92782c66a02a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=548c90e102fe46a8348bbf7cb06c92782c66a02a", "patch": "@@ -16,10 +16,10 @@ thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:67:33\n Caught panic message (String): attempt to divide by zero\n-thread 'main' panicked at 'attempted to instantiate uninhabited type !', $LOC\n-Caught panic message (String): attempted to instantiate uninhabited type !\n-thread 'main' panicked at 'attempted to zero-initialize type `!`, which is invalid', $LOC\n-Caught panic message (String): attempted to zero-initialize type `!`, which is invalid\n+thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n+Caught panic message (String): attempted to instantiate uninhabited type `!`\n+thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n+Caught panic message (String): attempted to instantiate uninhabited type `!`\n thread 'main' panicked at 'attempted to leave type `fn()` uninitialized, which is invalid', $LOC\n Caught panic message (String): attempted to leave type `fn()` uninitialized, which is invalid\n thread 'main' panicked at 'attempted to zero-initialize type `fn()`, which is invalid', $LOC"}]}