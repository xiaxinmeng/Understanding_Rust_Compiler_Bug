{"sha": "a40fdeddd81965ee08344fbdd2dbdc04adf24561", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGZkZWRkZDgxOTY1ZWUwODM0NGZiZGQyZGJkYzA0YWRmMjQ1NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-07T17:37:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-07T17:37:44Z"}, "message": "Auto merge of #56460 - davidtwco:issue-55850, r=pnkfelix\n\nFix ICE with generators and NLL\n\nFix #55850.\n\nThis PR stops an ICE in #55850 by not panicking when a region cannot be named. However, this PR does not (yet) fix the underlying issue that the correct name for the test case provided for the issue (in this instance, `'a`) was not found.\n\nThis PR also lays a little bit of groundwork by categorizing yields separately from returns so that region naming can be specialized for this case.\n\nr? @pnkfelix", "tree": {"sha": "64f450ee94bee444e09ee90d6f7365a34b72b78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f450ee94bee444e09ee90d6f7365a34b72b78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40fdeddd81965ee08344fbdd2dbdc04adf24561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40fdeddd81965ee08344fbdd2dbdc04adf24561", "html_url": "https://github.com/rust-lang/rust/commit/a40fdeddd81965ee08344fbdd2dbdc04adf24561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40fdeddd81965ee08344fbdd2dbdc04adf24561/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3236afc3560b5781acf942a4746aeb11e5374e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3236afc3560b5781acf942a4746aeb11e5374e", "html_url": "https://github.com/rust-lang/rust/commit/1c3236afc3560b5781acf942a4746aeb11e5374e"}, {"sha": "4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a286d33f9833d001d1b6ee7272b2afc9b7ff425", "html_url": "https://github.com/rust-lang/rust/commit/4a286d33f9833d001d1b6ee7272b2afc9b7ff425"}], "stats": {"total": 126, "additions": 104, "deletions": 22}, "files": [{"sha": "a46e12be1aeace57d5b28a503e8f90111c98e075", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -471,6 +471,7 @@ impl_stable_hash_for!(struct mir::ClosureOutlivesRequirement<'tcx> {\n \n impl_stable_hash_for!(enum mir::ConstraintCategory {\n     Return,\n+    Yield,\n     UseAsConst,\n     UseAsStatic,\n     TypeAnnotation,"}, {"sha": "6ff60b39bd341298097050ca2a0cbe50d77808a9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -2905,6 +2905,7 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum ConstraintCategory {\n     Return,\n+    Yield,\n     UseAsConst,\n     UseAsStatic,\n     TypeAnnotation,"}, {"sha": "7fb3f02e0e3f3f07c3367bd61ab647d6a908d9ad", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -277,13 +277,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         borrow_region_vid,\n                         region,\n                     );\n-                let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n-                BorrowExplanation::MustBeValidFor {\n-                    category,\n-                    from_closure,\n-                    span,\n-                    region_name,\n-                    opt_place_desc,\n+                if let Some(region_name) = region_name {\n+                    let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n+                    BorrowExplanation::MustBeValidFor {\n+                        category,\n+                        from_closure,\n+                        span,\n+                        region_name,\n+                        opt_place_desc,\n+                    }\n+                } else {\n+                    BorrowExplanation::Unexplained\n                 }\n             } else {\n                 BorrowExplanation::Unexplained"}, {"sha": "32aaa0590d2f9efbe6d3df17e8d52086c9aed831", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -38,6 +38,7 @@ impl ConstraintDescription for ConstraintCategory {\n         match self {\n             ConstraintCategory::Assignment => \"assignment \",\n             ConstraintCategory::Return => \"returning this value \",\n+            ConstraintCategory::Yield => \"yielding this value \",\n             ConstraintCategory::UseAsConst => \"using this value as a constant \",\n             ConstraintCategory::UseAsStatic => \"using this value as a static \",\n             ConstraintCategory::Cast => \"cast \",\n@@ -133,11 +134,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n \n             match categorized_path[i].0 {\n-                ConstraintCategory::OpaqueType\n-                | ConstraintCategory::Boring\n-                | ConstraintCategory::BoringNoLocation\n-                | ConstraintCategory::Internal => false,\n-                ConstraintCategory::TypeAnnotation | ConstraintCategory::Return => true,\n+                ConstraintCategory::OpaqueType | ConstraintCategory::Boring |\n+                ConstraintCategory::BoringNoLocation | ConstraintCategory::Internal => false,\n+                ConstraintCategory::TypeAnnotation | ConstraintCategory::Return |\n+                ConstraintCategory::Yield => true,\n                 _ => constraint_sup_scc != target_scc,\n             }\n         });\n@@ -376,9 +376,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         diag.span_label(span, message);\n \n-        match self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, &mut 1)\n-            .source\n-        {\n+        match self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, &mut 1).unwrap().source {\n             RegionNameSource::NamedEarlyBoundRegion(fr_span)\n             | RegionNameSource::NamedFreeRegion(fr_span)\n             | RegionNameSource::SynthesizedFreeEnvRegion(fr_span, _)\n@@ -521,10 +519,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         let counter = &mut 1;\n-        let fr_name = self.give_region_a_name(infcx, mir, mir_def_id, fr, counter);\n+        let fr_name = self.give_region_a_name(infcx, mir, mir_def_id, fr, counter).unwrap();\n         fr_name.highlight_region_name(&mut diag);\n         let outlived_fr_name =\n-            self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, counter);\n+            self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, counter).unwrap();\n         outlived_fr_name.highlight_region_name(&mut diag);\n \n         let mir_def_name = if infcx.tcx.is_closure(mir_def_id) {\n@@ -661,7 +659,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory, bool, Span, RegionName) {\n+    ) -> (ConstraintCategory, bool, Span, Option<RegionName>) {\n         let (category, from_closure, span) =\n             self.best_blame_constraint(mir, borrow_region, |r| r == outlived_region);\n         let outlived_fr_name ="}, {"sha": "b01e257ae2effd5ac7f2b506d3e24a0f6fd8695a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n-    ) -> RegionName {\n+    ) -> Option<RegionName> {\n         debug!(\"give_region_a_name(fr={:?}, counter={})\", fr, counter);\n \n         assert!(self.universal_regions.is_universal_region(fr));\n@@ -177,8 +177,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.give_name_if_anonymous_region_appears_in_output(\n                     infcx, mir, mir_def_id, fr, counter,\n                 )\n-            })\n-            .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr));\n+            });\n \n         debug!(\"give_region_a_name: gave name {:?}\", value);\n         value"}, {"sha": "33346a584e5a47e6f659e93b370ccfa3b3644840", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -1467,7 +1467,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             value_ty,\n                             ty,\n                             term_location.to_locations(),\n-                            ConstraintCategory::Return,\n+                            ConstraintCategory::Yield,\n                         ) {\n                             span_mirbug!(\n                                 self,"}, {"sha": "08e5217670e84fca9553abc82f328aca1dc34251", "filename": "src/test/ui/nll/issue-55850.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |                ^ borrowed value does not live long enough\n+LL |     })\n+   |     - `s` dropped here while still borrowed\n+\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |         -------^---- possible yield occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0597, E0626.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "4140815c91bb6b72af6db356d45c19ba7b895b2b", "filename": "src/test/ui/nll/issue-55850.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_mut)]\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::ops::GeneratorState::Yielded;\n+\n+pub struct GenIter<G>(G);\n+\n+impl <G> Iterator for GenIter<G>\n+where\n+    G: Generator,\n+{\n+    type Item = G::Yield;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unsafe {\n+            match self.0.resume() {\n+                Yielded(y) => Some(y),\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+fn bug<'a>() -> impl Iterator<Item = &'a str> {\n+    GenIter(move || {\n+        let mut s = String::new();\n+        yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+    })\n+}\n+\n+fn main() {\n+    bug();\n+}"}, {"sha": "26b4c82076c23fe3c94f68d108663114c1a0c72e", "filename": "src/test/ui/nll/issue-55850.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40fdeddd81965ee08344fbdd2dbdc04adf24561/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr?ref=a40fdeddd81965ee08344fbdd2dbdc04adf24561", "patch": "@@ -0,0 +1,17 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/issue-55850.rs:38:16\n+   |\n+LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+   |                ^ borrowed value does not live long enough\n+LL |     })\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 35:8...\n+  --> $DIR/issue-55850.rs:35:8\n+   |\n+LL | fn bug<'a>() -> impl Iterator<Item = &'a str> {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}