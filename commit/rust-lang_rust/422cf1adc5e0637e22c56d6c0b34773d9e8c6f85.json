{"sha": "422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmNmMWFkYzVlMDYzN2UyMmM1NmQ2YzBiMzQ3NzNkOWU4YzZmODU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-10T19:01:44Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-10T21:12:54Z"}, "message": "change type of ExprLoop and ExprBreak elts from ident->name.\n\nLots of downstream changes in librustc, should be infinitesimally faster.", "tree": {"sha": "c05e6c4bffddd00595fc1bb9cc7665dc3ffc8621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05e6c4bffddd00595fc1bb9cc7665dc3ffc8621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "html_url": "https://github.com/rust-lang/rust/commit/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917d3c28b6aab7de454087236173122616a6f9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/917d3c28b6aab7de454087236173122616a6f9b6", "html_url": "https://github.com/rust-lang/rust/commit/917d3c28b6aab7de454087236173122616a6f9b6"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "2a224b9fd32c5659e021120e51d5e535e50c352b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -488,7 +488,7 @@ impl CFGBuilder {\n \n     fn find_scope(&self,\n                   expr: @ast::Expr,\n-                  label: Option<ast::Ident>) -> LoopScope {\n+                  label: Option<ast::Name>) -> LoopScope {\n         match label {\n             None => {\n                 return *self.loop_scopes.last();"}, {"sha": "992d4ea21193e6a42e1da34107b19d1405c930c1", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -867,7 +867,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n \n     fn find_scope<'a>(&self,\n                       expr: @ast::Expr,\n-                      label: Option<ast::Ident>,\n+                      label: Option<ast::Name>,\n                       loop_scopes: &'a mut ~[LoopScope]) -> &'a mut LoopScope {\n         let index = match label {\n             None => {"}, {"sha": "d8a7096982f09443380ba29bc2450f97a64fa61c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -756,7 +756,7 @@ impl Liveness {\n     }\n \n     pub fn find_loop_scope(&self,\n-                           opt_label: Option<Ident>,\n+                           opt_label: Option<Name>,\n                            id: NodeId,\n                            sp: Span)\n                            -> NodeId {"}, {"sha": "335ea06eda98f6a12880677ae6a1116a98a17b3e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -5157,15 +5157,13 @@ impl Resolver {\n             ExprForLoop(*) => fail!(\"non-desugared expr_for_loop\"),\n \n             ExprBreak(Some(label)) | ExprAgain(Some(label)) => {\n-                let name = label.name;\n-                match self.search_ribs(self.label_ribs, name, expr.span,\n+                match self.search_ribs(self.label_ribs, label, expr.span,\n                                        DontAllowCapturingSelf) {\n                     None =>\n                         self.resolve_error(expr.span,\n                                               fmt!(\"use of undeclared label \\\n                                                    `%s`\",\n-                                                   self.session.str_of(\n-                                                       label))),\n+                                                   interner_get(label))),\n                     Some(DlDef(def @ DefLabel(_))) => {\n                         self.record_def(expr.id, def)\n                     }"}, {"sha": "cb05b8bb7eb22b955865133bed3c0b9551f7f711", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -76,7 +76,7 @@ use std::vec;\n use std::local_data;\n use extra::time;\n use extra::sort;\n-use syntax::ast::Ident;\n+use syntax::ast::Name;\n use syntax::ast_map::{path, path_elt_to_str, path_name, path_pretty_name};\n use syntax::ast_util::{local_def};\n use syntax::attr;\n@@ -1189,7 +1189,7 @@ pub fn scope_block(bcx: @mut Block,\n \n pub fn loop_scope_block(bcx: @mut Block,\n                         loop_break: @mut Block,\n-                        loop_label: Option<Ident>,\n+                        loop_label: Option<Name>,\n                         n: &str,\n                         opt_node_info: Option<NodeInfo>) -> @mut Block {\n     return new_block(bcx.fcx, Some(bcx), Some(@mut ScopeInfo {"}, {"sha": "242b15fe5f0dc1b9c8cccc74eb87270204be31ab", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -38,7 +38,7 @@ use std::cast;\n use std::hashmap::{HashMap};\n use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::vec;\n-use syntax::ast::Ident;\n+use syntax::ast::{Name,Ident};\n use syntax::ast_map::{path, path_elt, path_pretty_name};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -463,7 +463,7 @@ pub fn block_cleanups(bcx: @mut Block) -> ~[cleanup] {\n pub struct ScopeInfo {\n     parent: Option<@mut ScopeInfo>,\n     loop_break: Option<@mut Block>,\n-    loop_label: Option<Ident>,\n+    loop_label: Option<Name>,\n     // A list of functions that must be run at when leaving this\n     // block, cleaning up any variables that were introduced in the\n     // block."}, {"sha": "2bf4e5c2bc6b0432dcf2b5fd68ee7e26b87d8cca", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -22,7 +22,7 @@ use util::ppaux;\n use middle::trans::type_::Type;\n \n use syntax::ast;\n-use syntax::ast::Ident;\n+use syntax::ast::Name;\n use syntax::ast_util;\n use syntax::codemap::Span;\n \n@@ -188,7 +188,7 @@ pub fn trans_while(bcx: @mut Block, cond: @ast::Expr, body: &ast::Block) -> @mut\n \n pub fn trans_loop(bcx:@mut Block,\n                   body: &ast::Block,\n-                  opt_label: Option<Ident>)\n+                  opt_label: Option<Name>)\n                -> @mut Block {\n     let _icx = push_ctxt(\"trans_loop\");\n     let next_bcx = sub_block(bcx, \"next\");\n@@ -201,7 +201,7 @@ pub fn trans_loop(bcx:@mut Block,\n }\n \n pub fn trans_break_cont(bcx: @mut Block,\n-                        opt_label: Option<Ident>,\n+                        opt_label: Option<Name>,\n                         to_end: bool)\n                      -> @mut Block {\n     let _icx = push_ctxt(\"trans_break_cont\");\n@@ -254,11 +254,11 @@ pub fn trans_break_cont(bcx: @mut Block,\n     return bcx;\n }\n \n-pub fn trans_break(bcx: @mut Block, label_opt: Option<Ident>) -> @mut Block {\n+pub fn trans_break(bcx: @mut Block, label_opt: Option<Name>) -> @mut Block {\n     return trans_break_cont(bcx, label_opt, true);\n }\n \n-pub fn trans_cont(bcx: @mut Block, label_opt: Option<Ident>) -> @mut Block {\n+pub fn trans_cont(bcx: @mut Block, label_opt: Option<Name>) -> @mut Block {\n     return trans_break_cont(bcx, label_opt, false);\n }\n "}, {"sha": "ea9e47416c1c58b9e3d9818d881d3e5d8c72a21e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -617,7 +617,8 @@ fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> @mut Block\n             return controlflow::trans_while(bcx, cond, body);\n         }\n         ast::ExprLoop(ref body, opt_label) => {\n-            return controlflow::trans_loop(bcx, body, opt_label);\n+            // FIXME #6993: map can go away when ast.rs is changed\n+            return controlflow::trans_loop(bcx, body, opt_label.map(|x| x.name));\n         }\n         ast::ExprAssign(dst, src) => {\n             let src_datum = unpack_datum!("}, {"sha": "8d557125d370010e6f06d02a75e5476715567ef5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -522,10 +522,12 @@ pub enum Expr_ {\n     ExprCast(@Expr, Ty),\n     ExprIf(@Expr, Block, Option<@Expr>),\n     ExprWhile(@Expr, Block),\n+    // FIXME #6993: change to Option<Name>\n     ExprForLoop(@Pat, @Expr, Block, Option<Ident>),\n     /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n+    // FIXME #6993: change to Option<Name>\n     ExprLoop(Block, Option<Ident>),\n     ExprMatch(@Expr, ~[Arm]),\n     ExprFnBlock(fn_decl, Block),\n@@ -541,8 +543,8 @@ pub enum Expr_ {\n     /// The special identifier `self`.\n     ExprSelf,\n     ExprAddrOf(Mutability, @Expr),\n-    ExprBreak(Option<Ident>),\n-    ExprAgain(Option<Ident>),\n+    ExprBreak(Option<Name>),\n+    ExprAgain(Option<Name>),\n     ExprRet(Option<@Expr>),\n \n     /// Gets the log level for the enclosing module"}, {"sha": "2cebae550fd56e66216c9148aa9b22a46c234fed", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -113,6 +113,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n \n         // Desugar expr_for_loop\n         // From: `['<ident>:] for <src_pat> in <src_expr> <src_loop_block>`\n+        // FIXME #6993 : change type of opt_ident to Option<Name>\n         ast::ExprForLoop(src_pat, src_expr, ref src_loop_block, opt_ident) => {\n             // Expand any interior macros etc.\n             // NB: we don't fold pats yet. Curious.\n@@ -144,7 +145,8 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n \n             // `None => break ['<ident>];`\n             let none_arm = {\n-                let break_expr = cx.expr(span, ast::ExprBreak(opt_ident));\n+                // FIXME #6993: this map goes away:\n+                let break_expr = cx.expr(span, ast::ExprBreak(opt_ident.map(|x| x.name)));\n                 let none_pat = cx.pat_ident(span, none_ident);\n                 cx.arm(span, ~[none_pat], break_expr)\n             };"}, {"sha": "c861c26b82eb3e057958434820cdceab28b41128", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -688,10 +688,13 @@ pub fn noop_fold_expr(e: &Expr_, fld: @ast_fold) -> Expr_ {\n         ExprPath(ref pth) => ExprPath(fld.fold_path(pth)),\n         ExprSelf => ExprSelf,\n         ExprBreak(ref opt_ident) => {\n-            ExprBreak(opt_ident.map_move(|x| fld.fold_ident(x)))\n+            // FIXME #6993: add fold_name to fold.... then cut out the\n+            // bogus Name->Ident->Name conversion.\n+            ExprBreak(opt_ident.map_move(|x| fld.fold_ident(Ident::new(x)).name))\n         }\n         ExprAgain(ref opt_ident) => {\n-            ExprAgain(opt_ident.map_move(|x| fld.fold_ident(x)))\n+            // FIXME #6993: add fold_name to fold....\n+            ExprAgain(opt_ident.map_move(|x| fld.fold_ident(Ident::new(x)).name))\n         }\n         ExprRet(ref e) => {\n             ExprRet(e.map_move(|x| fld.fold_expr(x)))"}, {"sha": "4adc34d75a73ed0aed22e99004c5a404570c15f3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -1849,7 +1849,7 @@ impl Parser {\n             if self.token_is_lifetime(&*self.token) {\n                 let lifetime = self.get_lifetime(&*self.token);\n                 self.bump();\n-                ex = ExprBreak(Some(lifetime));\n+                ex = ExprBreak(Some(lifetime.name));\n             } else {\n                 ex = ExprBreak(None);\n             }\n@@ -2585,7 +2585,7 @@ impl Parser {\n             let ex = if self.token_is_lifetime(&*self.token) {\n                 let lifetime = self.get_lifetime(&*self.token);\n                 self.bump();\n-                ExprAgain(Some(lifetime))\n+                ExprAgain(Some(lifetime.name))\n             } else {\n                 ExprAgain(None)\n             };"}, {"sha": "55f052d769dcedd371970936a47d9d85c330d7c0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422cf1adc5e0637e22c56d6c0b34773d9e8c6f85/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=422cf1adc5e0637e22c56d6c0b34773d9e8c6f85", "patch": "@@ -19,7 +19,7 @@ use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n use parse::classify::expr_is_simple_block;\n-use parse::token::{ident_interner, ident_to_str};\n+use parse::token::{ident_interner, ident_to_str, interner_get};\n use parse::{comments, token};\n use parse;\n use print::pp::{break_offset, word, space, zerobreak, hardbreak};\n@@ -1394,7 +1394,7 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n         space(s.s);\n         for ident in opt_ident.iter() {\n             word(s.s, \"'\");\n-            print_ident(s, *ident);\n+            print_name(s, *ident);\n             space(s.s);\n         }\n       }\n@@ -1403,7 +1403,7 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n         space(s.s);\n         for ident in opt_ident.iter() {\n             word(s.s, \"'\");\n-            print_ident(s, *ident);\n+            print_name(s, *ident);\n             space(s.s)\n         }\n       }\n@@ -1503,6 +1503,10 @@ pub fn print_ident(s: @ps, ident: ast::Ident) {\n     word(s.s, ident_to_str(&ident));\n }\n \n+pub fn print_name(s: @ps, name: ast::Name) {\n+    word(s.s, interner_get(name));\n+}\n+\n pub fn print_for_decl(s: @ps, loc: &ast::Local, coll: &ast::Expr) {\n     print_local_decl(s, loc);\n     space(s.s);"}]}