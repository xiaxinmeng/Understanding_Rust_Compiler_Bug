{"sha": "ca62493118947ca933e472e71314971624cf6ca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjI0OTMxMTg5NDdjYTkzM2U0NzJlNzEzMTQ5NzE2MjRjZjZjYTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-06T09:20:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-06T09:20:29Z"}, "message": "Merge #10162\n\n10162: feat: enable completions inside macros after `.` r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8158\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10039\r\n\r\nThis issue was not caused by us not being able to expand the macro (we can do that just fine). Instead, body lowering deliberately aborted lowering of a statement macro expansion when the expansion causes errors, citing some hygiene-related issue with recovery (`@edwin0cheng` if you remember what exactly the issue was I'd be happy to take a look).\r\n\r\nSimply removing that code path doesn't cause any tests to fail, and makes completions in macros work better (\"completion after `.`\" is not the only thing that now works better, we also get better highlighting in incomplete macro calls).\r\n\r\nJust to be sure, lets merge this after tomorrow's release.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "efd8918482c97b3df618d4a02637f06ac158dc83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd8918482c97b3df618d4a02637f06ac158dc83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca62493118947ca933e472e71314971624cf6ca2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhNd1dCRBK7hj4Ov3rIwAAd6kIAExLrgjWe9eAB95GFPzMvfpZ\nimYrnJphtUQV4t3YeVZCku/1q8dy+Y740iY/AIyjRpuG59RMiWrZvrFXFAebWDuk\nIoufxAZTQJDSmuDeAZc+bJPjHdxm6/ELdMjzhC2227CQihuhmxTTq6ZR/JtAi6UC\nXH3hW/3NOdbFuBO8uetBVsDwNPYzqNJECcxTmyKUd+3CtFjSqTI4pmtiKrqCNce+\nKy5rCSweeNSufl1p8TPr99UNTh271W0+Pi64W9rRrWA6ydpNg9uhseXQH5Fq8LlW\n6O+3u4rBCjuhCVygY/ScutavvNPhSSLXFW9oemz24Nee7fh3kHHiy6LCKu3gq1E=\n=0xRK\n-----END PGP SIGNATURE-----\n", "payload": "tree efd8918482c97b3df618d4a02637f06ac158dc83\nparent b73b321478d3b2a98d380eb79de717e01620c4e9\nparent 8e736da4563871186a9b0feebfa8e4398e37f684\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630920029 +0000\ncommitter GitHub <noreply@github.com> 1630920029 +0000\n\nMerge #10162\n\n10162: feat: enable completions inside macros after `.` r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8158\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10039\r\n\r\nThis issue was not caused by us not being able to expand the macro (we can do that just fine). Instead, body lowering deliberately aborted lowering of a statement macro expansion when the expansion causes errors, citing some hygiene-related issue with recovery (`@edwin0cheng` if you remember what exactly the issue was I'd be happy to take a look).\r\n\r\nSimply removing that code path doesn't cause any tests to fail, and makes completions in macros work better (\"completion after `.`\" is not the only thing that now works better, we also get better highlighting in incomplete macro calls).\r\n\r\nJust to be sure, lets merge this after tomorrow's release.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca62493118947ca933e472e71314971624cf6ca2", "html_url": "https://github.com/rust-lang/rust/commit/ca62493118947ca933e472e71314971624cf6ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca62493118947ca933e472e71314971624cf6ca2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73b321478d3b2a98d380eb79de717e01620c4e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73b321478d3b2a98d380eb79de717e01620c4e9", "html_url": "https://github.com/rust-lang/rust/commit/b73b321478d3b2a98d380eb79de717e01620c4e9"}, {"sha": "8e736da4563871186a9b0feebfa8e4398e37f684", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e736da4563871186a9b0feebfa8e4398e37f684", "html_url": "https://github.com/rust-lang/rust/commit/8e736da4563871186a9b0feebfa8e4398e37f684"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "759f2cc86572bb113be37cf5d4f875a3fd045adf", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ca62493118947ca933e472e71314971624cf6ca2/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca62493118947ca933e472e71314971624cf6ca2/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=ca62493118947ca933e472e71314971624cf6ca2", "patch": "@@ -558,7 +558,7 @@ impl ExprCollector<'_> {\n             ast::Expr::MacroCall(e) => {\n                 let macro_ptr = AstPtr::new(&e);\n                 let mut ids = vec![];\n-                self.collect_macro_call(e, macro_ptr, true, |this, expansion| {\n+                self.collect_macro_call(e, macro_ptr, |this, expansion| {\n                     ids.push(match expansion {\n                         Some(it) => this.collect_expr(it),\n                         None => this.alloc_expr(Expr::Missing, syntax_ptr.clone()),\n@@ -582,7 +582,6 @@ impl ExprCollector<'_> {\n         &mut self,\n         e: ast::MacroCall,\n         syntax_ptr: AstPtr<ast::MacroCall>,\n-        is_error_recoverable: bool,\n         mut collector: F,\n     ) {\n         // File containing the macro call. Expansion errors will be attached here.\n@@ -620,18 +619,11 @@ impl ExprCollector<'_> {\n \n         match res.value {\n             Some((mark, expansion)) => {\n-                // FIXME: Statements are too complicated to recover from error for now.\n-                // It is because we don't have any hygiene for local variable expansion right now.\n-                if !is_error_recoverable && res.err.is_some() {\n-                    self.expander.exit(self.db, mark);\n-                    collector(self, None);\n-                } else {\n-                    self.source_map.expansions.insert(macro_call, self.expander.current_file_id);\n+                self.source_map.expansions.insert(macro_call, self.expander.current_file_id);\n \n-                    let id = collector(self, Some(expansion));\n-                    self.expander.exit(self.db, mark);\n-                    id\n-                }\n+                let id = collector(self, Some(expansion));\n+                self.expander.exit(self.db, mark);\n+                id\n             }\n             None => collector(self, None),\n         }\n@@ -667,27 +659,21 @@ impl ExprCollector<'_> {\n                     let macro_ptr = AstPtr::new(&m);\n                     let syntax_ptr = AstPtr::new(&stmt.expr().unwrap());\n \n-                    self.collect_macro_call(\n-                        m,\n-                        macro_ptr,\n-                        false,\n-                        |this, expansion| match expansion {\n-                            Some(expansion) => {\n-                                let statements: ast::MacroStmts = expansion;\n-\n-                                statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n-                                if let Some(expr) = statements.expr() {\n-                                    let expr = this.collect_expr(expr);\n-                                    this.statements_in_scope\n-                                        .push(Statement::Expr { expr, has_semi });\n-                                }\n-                            }\n-                            None => {\n-                                let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n+                    self.collect_macro_call(m, macro_ptr, |this, expansion| match expansion {\n+                        Some(expansion) => {\n+                            let statements: ast::MacroStmts = expansion;\n+\n+                            statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n+                            if let Some(expr) = statements.expr() {\n+                                let expr = this.collect_expr(expr);\n                                 this.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                             }\n-                        },\n-                    );\n+                        }\n+                        None => {\n+                            let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n+                            this.statements_in_scope.push(Statement::Expr { expr, has_semi });\n+                        }\n+                    });\n                 } else {\n                     let expr = self.collect_expr_opt(stmt.expr());\n                     self.statements_in_scope.push(Statement::Expr { expr, has_semi });\n@@ -889,7 +875,7 @@ impl ExprCollector<'_> {\n                 Some(call) => {\n                     let macro_ptr = AstPtr::new(&call);\n                     let mut pat = None;\n-                    self.collect_macro_call(call, macro_ptr, true, |this, expanded_pat| {\n+                    self.collect_macro_call(call, macro_ptr, |this, expanded_pat| {\n                         pat = Some(this.collect_pat_opt(expanded_pat));\n                     });\n "}, {"sha": "94a5ebabf9b1ef49cae3ddfb464deeaf31d07731", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca62493118947ca933e472e71314971624cf6ca2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca62493118947ca933e472e71314971624cf6ca2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=ca62493118947ca933e472e71314971624cf6ca2", "patch": "@@ -672,4 +672,29 @@ impl Foo { fn foo(&mut self) { $0 } }\"#,\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn macro_completion_after_dot() {\n+        check(\n+            r#\"\n+macro_rules! m {\n+    ($e:expr) => { $e };\n+}\n+\n+struct Completable;\n+\n+impl Completable {\n+    fn method(&self) {}\n+}\n+\n+fn f() {\n+    let c = Completable;\n+    m!(c.$0);\n+}\n+    \"#,\n+            expect![[r#\"\n+                me method() fn(&self)\n+            \"#]],\n+        );\n+    }\n }"}]}