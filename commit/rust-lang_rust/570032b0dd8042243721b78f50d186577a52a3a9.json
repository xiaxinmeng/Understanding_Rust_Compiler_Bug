{"sha": "570032b0dd8042243721b78f50d186577a52a3a9", "node_id": "C_kwDOAAsO6NoAKDU3MDAzMmIwZGQ4MDQyMjQzNzIxYjc4ZjUwZDE4NjU3N2E1MmEzYTk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-06T09:09:53Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T15:55:37Z"}, "message": "Introduce a proper error handling framework", "tree": {"sha": "d70662ebe34379b8a33c34f091ba505bf820f8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70662ebe34379b8a33c34f091ba505bf820f8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/570032b0dd8042243721b78f50d186577a52a3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/570032b0dd8042243721b78f50d186577a52a3a9", "html_url": "https://github.com/rust-lang/rust/commit/570032b0dd8042243721b78f50d186577a52a3a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/570032b0dd8042243721b78f50d186577a52a3a9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e64c252a3834ba880daf478dd0630bb61365d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e64c252a3834ba880daf478dd0630bb61365d3", "html_url": "https://github.com/rust-lang/rust/commit/b3e64c252a3834ba880daf478dd0630bb61365d3"}], "stats": {"total": 521, "additions": 471, "deletions": 50}, "files": [{"sha": "cc707c630e54e4cd9f9b3477ef3fcd8f625838f6", "filename": "Cargo.lock", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -2,6 +2,21 @@\n # It is not intended for manual editing.\n version = 3\n \n+[[package]]\n+name = \"addr2line\"\n+version = \"0.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+dependencies = [\n+ \"gimli\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n+\n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.18\"\n@@ -37,18 +52,66 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.65\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61\"\n+dependencies = [\n+ \"addr2line\",\n+ \"cc\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n+ \"rustc-demangle\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"cc\"\n+version = \"1.0.73\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n+[[package]]\n+name = \"color-eyre\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ebf286c900a6d5867aeff75cfee3192857bb7f24b547d4f0df2ed6baa812c90\"\n+dependencies = [\n+ \"backtrace\",\n+ \"color-spantrace\",\n+ \"eyre\",\n+ \"indenter\",\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-error\",\n+]\n+\n+[[package]]\n+name = \"color-spantrace\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ba75b3d9449ecdccb27ecbc479fdc0b87fa2dd43d2f8298f9bf0e59aacc8dce\"\n+dependencies = [\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-core\",\n+ \"tracing-error\",\n+]\n+\n [[package]]\n name = \"colored\"\n version = \"2.0.0\"\n@@ -158,6 +221,16 @@ dependencies = [\n  \"termcolor\",\n ]\n \n+[[package]]\n+name = \"eyre\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c2b6b5a29c02cdc822728b7d7b8ae1bab3e3b05d44522770ddd49722eeac7eb\"\n+dependencies = [\n+ \"indenter\",\n+ \"once_cell\",\n+]\n+\n [[package]]\n name = \"getrandom\"\n version = \"0.2.3\"\n@@ -169,6 +242,12 @@ dependencies = [\n  \"wasi\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.26.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+\n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.19\"\n@@ -184,6 +263,12 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n \n+[[package]]\n+name = \"indenter\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n+\n [[package]]\n name = \"instant\"\n version = \"0.1.12\"\n@@ -267,6 +352,15 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc\"\n+dependencies = [\n+ \"adler\",\n+]\n+\n [[package]]\n name = \"miri\"\n version = \"0.1.0\"\n@@ -286,6 +380,21 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.28.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+\n [[package]]\n name = \"output_vt100\"\n version = \"0.1.3\"\n@@ -295,6 +404,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"owo-colors\"\n+version = \"3.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+\n [[package]]\n name = \"parking_lot\"\n version = \"0.11.2\"\n@@ -329,6 +444,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"pin-project-lite\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.15\"\n@@ -431,6 +552,12 @@ version = \"0.6.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+\n [[package]]\n name = \"rustc-hash\"\n version = \"1.1.0\"\n@@ -501,6 +628,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"sharded-slab\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"shell-escape\"\n version = \"0.1.5\"\n@@ -533,10 +669,62 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"thread_local\"\n+version = \"1.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\n+dependencies = [\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.35\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"pin-project-lite\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7\"\n+dependencies = [\n+ \"once_cell\",\n+ \"valuable\",\n+]\n+\n+[[package]]\n+name = \"tracing-error\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\n+dependencies = [\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n+[[package]]\n+name = \"tracing-subscriber\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3a713421342a5a666b7577783721d3117f1b69a393df803ee17bb73b1e122a59\"\n+dependencies = [\n+ \"sharded-slab\",\n+ \"thread_local\",\n+ \"tracing-core\",\n+]\n+\n [[package]]\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n  \"lazy_static\",\n@@ -553,6 +741,12 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n \n+[[package]]\n+name = \"valuable\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n+\n [[package]]\n name = \"wasi\"\n version = \"0.10.2+wasi-snapshot-preview1\""}, {"sha": "9537fb993c47f6e474aea9081afa14db69d75378", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -2,13 +2,13 @@ use colored::*;\n use regex::Regex;\n use std::env;\n use std::path::PathBuf;\n-use ui_test::{Config, Mode, OutputConflictHandling};\n+use ui_test::{Config, Mode, OutputConflictHandling, color_eyre::Result};\n \n fn miri_path() -> PathBuf {\n     PathBuf::from(option_env!(\"MIRI\").unwrap_or(env!(\"CARGO_BIN_EXE_miri\")))\n }\n \n-fn run_tests(mode: Mode, path: &str, target: Option<String>) {\n+fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n@@ -108,7 +108,7 @@ regexes! {\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n }\n \n-fn ui(mode: Mode, path: &str) {\n+fn ui(mode: Mode, path: &str) -> Result<()> {\n     let target = get_target();\n \n     let msg = format!(\n@@ -117,20 +117,24 @@ fn ui(mode: Mode, path: &str) {\n     );\n     eprintln!(\"{}\", msg.green().bold());\n \n-    run_tests(mode, path, target);\n+    run_tests(mode, path, target)\n }\n \n fn get_target() -> Option<String> {\n     env::var(\"MIRI_TEST_TARGET\").ok()\n }\n \n-fn main() {\n+fn main() -> Result<()> {\n+    ui_test::color_eyre::install()?;\n+\n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n     env::set_var(\"MIRI_TEMP\", env::temp_dir());\n \n-    ui(Mode::Pass, \"tests/pass\");\n-    ui(Mode::Panic, \"tests/panic\");\n-    ui(Mode::Fail, \"tests/fail\");\n+    ui(Mode::Pass, \"tests/pass\")?;\n+    ui(Mode::Panic, \"tests/panic\")?;\n+    ui(Mode::Fail, \"tests/fail\")?;\n+\n+    Ok(())\n }"}, {"sha": "2065cc34bef85ea7ab4daf6d9a146a687c3732ee", "filename": "ui_test/Cargo.lock", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.lock?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -2,6 +2,21 @@\n # It is not intended for manual editing.\n version = 3\n \n+[[package]]\n+name = \"addr2line\"\n+version = \"0.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+dependencies = [\n+ \"gimli\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n+\n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.18\"\n@@ -37,12 +52,60 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.65\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61\"\n+dependencies = [\n+ \"addr2line\",\n+ \"cc\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n+ \"rustc-demangle\",\n+]\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.73\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n+[[package]]\n+name = \"color-eyre\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ebf286c900a6d5867aeff75cfee3192857bb7f24b547d4f0df2ed6baa812c90\"\n+dependencies = [\n+ \"backtrace\",\n+ \"color-spantrace\",\n+ \"eyre\",\n+ \"indenter\",\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-error\",\n+]\n+\n+[[package]]\n+name = \"color-spantrace\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ba75b3d9449ecdccb27ecbc479fdc0b87fa2dd43d2f8298f9bf0e59aacc8dce\"\n+dependencies = [\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-core\",\n+ \"tracing-error\",\n+]\n+\n [[package]]\n name = \"colored\"\n version = \"2.0.0\"\n@@ -139,6 +202,22 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n \n+[[package]]\n+name = \"eyre\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c2b6b5a29c02cdc822728b7d7b8ae1bab3e3b05d44522770ddd49722eeac7eb\"\n+dependencies = [\n+ \"indenter\",\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"gimli\"\n+version = \"0.26.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+\n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.19\"\n@@ -148,6 +227,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"indenter\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n+\n [[package]]\n name = \"itoa\"\n version = \"1.0.2\"\n@@ -181,6 +266,30 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc\"\n+dependencies = [\n+ \"adler\",\n+]\n+\n+[[package]]\n+name = \"object\"\n+version = \"0.28.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+\n [[package]]\n name = \"output_vt100\"\n version = \"0.1.3\"\n@@ -190,6 +299,18 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"owo-colors\"\n+version = \"3.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+\n+[[package]]\n+name = \"pin-project-lite\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n+\n [[package]]\n name = \"pretty_assertions\"\n version = \"1.2.1\"\n@@ -237,6 +358,12 @@ version = \"0.6.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+\n [[package]]\n name = \"rustc_version\"\n version = \"0.4.0\"\n@@ -295,6 +422,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"sharded-slab\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"1.0.95\"\n@@ -306,10 +442,62 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n+[[package]]\n+name = \"thread_local\"\n+version = \"1.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\n+dependencies = [\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.35\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"pin-project-lite\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7\"\n+dependencies = [\n+ \"once_cell\",\n+ \"valuable\",\n+]\n+\n+[[package]]\n+name = \"tracing-error\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\n+dependencies = [\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n+[[package]]\n+name = \"tracing-subscriber\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3a713421342a5a666b7577783721d3117f1b69a393df803ee17bb73b1e122a59\"\n+dependencies = [\n+ \"sharded-slab\",\n+ \"thread_local\",\n+ \"tracing-core\",\n+]\n+\n [[package]]\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n  \"lazy_static\",\n@@ -326,6 +514,12 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n \n+[[package]]\n+name = \"valuable\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "94c5acb6b70b6e7ae91094926998c7cd2be3e509", "filename": "ui_test/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.toml?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -17,3 +17,5 @@ crossbeam = \"0.8.1\"\n lazy_static = \"1.4.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n+color-eyre = \"0.6.1\"\n+"}, {"sha": "fcbcae33f2d7c459f20404b78babd6c8c0fb25db", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -4,6 +4,8 @@ use regex::Regex;\n \n use crate::rustc_stderr::Level;\n \n+use color_eyre::eyre::Result;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -102,8 +104,8 @@ macro_rules! checked {\n }\n \n impl Comments {\n-    pub(crate) fn parse_file(path: &Path) -> Self {\n-        let content = std::fs::read_to_string(path).unwrap();\n+    pub(crate) fn parse_file(path: &Path) -> Result<Self> {\n+        let content = std::fs::read_to_string(path)?;\n         Self::parse(path, &content)\n     }\n \n@@ -112,7 +114,7 @@ impl Comments {\n     ///\n     /// This function will only parse `//@` and `//~` style comments\n     /// and ignore all others\n-    fn parse_checked(path: &Path, content: &str) -> Self {\n+    fn parse_checked(path: &Path, content: &str) -> Result<Self> {\n         let mut this = Self::default();\n \n         // The line that a `|` will refer to\n@@ -136,16 +138,16 @@ impl Comments {\n                 fallthrough_to = None;\n             }\n         }\n-        this\n+        Ok(this)\n     }\n \n     /// Parse comments in `content`.\n     /// `path` is only used to emit diagnostics if parsing fails.\n-    pub(crate) fn parse(path: &Path, content: &str) -> Self {\n-        let mut this = Self::parse_checked(path, content);\n+    pub(crate) fn parse(path: &Path, content: &str) -> Result<Self> {\n+        let mut this = Self::parse_checked(path, content)?;\n         if content.contains(\"//@\") {\n             // Migration mode: if new syntax is used, ignore all old syntax\n-            return this;\n+            return Ok(this);\n         }\n \n         for (l, line) in content.lines().enumerate() {\n@@ -209,7 +211,7 @@ impl Comments {\n                 this.error_pattern = Some((s.trim().to_string(), l));\n             }\n         }\n-        this\n+        Ok(this)\n     }\n \n     fn parse_command_with_args(&mut self, command: &str, args: &str, path: &Path, l: usize) {"}, {"sha": "0573ee8ba706c28d538c6242c1de19ba72ace9ce", "filename": "ui_test/src/comments/tests.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments%2Ftests.rs?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -1,47 +1,55 @@\n-use std::path::Path;\n+use std::{path::Path, panic::catch_unwind};\n \n use super::Comments;\n \n+use color_eyre::eyre::{Result, bail};\n+use crate::tests::init;\n+\n #[test]\n-fn parse_simple_comment() {\n+fn parse_simple_comment() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     println!(\"parsed comments: {:#?}\", comments);\n     assert_eq!(comments.error_matches[0].definition_line, 5);\n     assert_eq!(comments.error_matches[0].revision, None);\n     assert_eq!(\n         comments.error_matches[0].matched,\n         \"encountered a dangling reference (address $HEX is unallocated)\"\n     );\n+    Ok(())\n }\n \n #[test]\n-fn parse_slash_slash_at() {\n+fn parse_slash_slash_at() -> Result<()> {\n+    init();\n     let s = r\"\n //@  error-pattern:  foomp\n use std::mem;\n \n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     println!(\"parsed comments: {:#?}\", comments);\n     assert_eq!(comments.error_pattern, Some((\"foomp\".to_string(), 2)));\n+    Ok(())\n }\n \n #[test]\n-#[should_panic]\n-fn parse_slash_slash_at_fail() {\n+fn parse_slash_slash_at_fail() -> Result<()> {\n+    init();\n     let s = r\"\n //@  error-pattern  foomp\n use std::mem;\n \n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n-    println!(\"parsed comments: {:#?}\", comments);\n-    assert_eq!(comments.error_pattern, Some((\"foomp\".to_string(), 2)));\n+    match catch_unwind(|| Comments::parse(Path::new(\"<dummy>\"), s)) {\n+        Ok(_) => bail!(\"expected parsing to panic\"),\n+        Err(_) => Ok(()),\n+    }\n }"}, {"sha": "90e7669f62aa35d5ee28cc70c84f513ab31fa9b4", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -11,6 +11,8 @@ use colored::*;\n use comments::ErrorMatch;\n use regex::Regex;\n use rustc_stderr::{Level, Message};\n+use color_eyre::eyre::Result;\n+pub use color_eyre;\n \n use crate::comments::{Comments, Condition};\n \n@@ -51,7 +53,7 @@ pub enum OutputConflictHandling {\n \n pub type Filter = Vec<(Regex, &'static str)>;\n \n-pub fn run_tests(config: Config) {\n+pub fn run_tests(config: Config) -> Result<()> {\n     eprintln!(\"   Compiler flags: {:?}\", config.args);\n \n     // Get the triple with which to run the tests\n@@ -94,7 +96,7 @@ pub fn run_tests(config: Config) {\n \n         // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n-            s.spawn(|_| {\n+            s.spawn(|_| -> Result<()> {\n                 for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n@@ -103,7 +105,7 @@ pub fn run_tests(config: Config) {\n                             continue;\n                         }\n                     }\n-                    let comments = Comments::parse_file(&path);\n+                    let comments = Comments::parse_file(&path)?;\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n@@ -142,6 +144,7 @@ pub fn run_tests(config: Config) {\n                         }\n                     }\n                 }\n+                Ok(())\n             });\n         }\n     })\n@@ -246,6 +249,7 @@ pub fn run_tests(config: Config) {\n         filtered.to_string().yellow(),\n     );\n     eprintln!();\n+    Ok(())\n }\n \n #[derive(Debug)]"}, {"sha": "13a242f8d8a7353884ff0e6e180efa04088bc570", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570032b0dd8042243721b78f50d186577a52a3a9/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=570032b0dd8042243721b78f50d186577a52a3a9", "patch": "@@ -20,7 +20,8 @@ fn config() -> Config {\n }\n \n #[test]\n-fn issue_2156() {\n+fn issue_2156() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -29,7 +30,7 @@ fn main() {\n }\n     \";\n     let path = Path::new(\"$DIR/<dummy>\");\n-    let comments = Comments::parse(path, s);\n+    let comments = Comments::parse(path, s)?;\n     let mut errors = vec![];\n     let config = config();\n     let messages = vec![\n@@ -46,21 +47,22 @@ fn main() {\n         [\n             Error::PatternNotFound { definition_line: 5, .. },\n             Error::ErrorsWithoutPattern { path: Some((_, 5)), .. },\n-        ] => {}\n+        ] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn find_pattern() {\n+fn find_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     {\n         let messages = vec![vec![], vec![], vec![], vec![], vec![], vec![\n@@ -137,14 +139,15 @@ fn main() {\n         );\n         match &errors[..] {\n             // Note no `ErrorsWithoutPattern`, because there are no `//~NOTE` in the test file, so we ignore them\n-            [Error::PatternNotFound { definition_line: 5, .. }] => {}\n+            [Error::PatternNotFound { definition_line: 5, .. }] => Ok(()),\n             _ => panic!(\"not the expected error: {:#?}\", errors),\n         }\n     }\n }\n \n #[test]\n-fn duplicate_pattern() {\n+fn duplicate_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -153,7 +156,7 @@ fn main() {\n     //~^ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -167,21 +170,22 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::PatternNotFound { definition_line: 6, .. }] => {}\n+        [Error::PatternNotFound { definition_line: 6, .. }] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_pattern() {\n+fn missing_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -199,13 +203,14 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => {}\n+        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_warn_pattern() {\n+fn missing_warn_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -214,7 +219,7 @@ fn main() {\n     //~^ WARN cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages= vec![\n         vec![],\n@@ -242,15 +247,16 @@ fn main() {\n     match &errors[..] {\n         [Error::ErrorsWithoutPattern { path: Some((_, 5)), msgs, .. }] =>\n             match &msgs[..] {\n-                [Message { message, level: Level::Warn }] if message == \"kaboom\" => {}\n+                [Message { message, level: Level::Warn }] if message == \"kaboom\" => Ok(()),\n                 _ => panic!(\"{:#?}\", msgs),\n             },\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_implicit_warn_pattern() {\n+fn missing_implicit_warn_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -259,7 +265,7 @@ fn main() {\n     //~^ cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![],\n@@ -285,21 +291,22 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [] => {}\n+        [] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn implicit_err_pattern() {\n+fn implicit_err_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![],\n@@ -317,7 +324,13 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::ErrorPatternWithoutErrorAnnotation(_, 5)] => {}\n+        [Error::ErrorPatternWithoutErrorAnnotation(_, 5)] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n+\n+static INIT: std::sync::Once = std::sync::Once::new();\n+\n+pub fn init() {\n+    INIT.call_once(|| color_eyre::install().unwrap());\n+}"}]}