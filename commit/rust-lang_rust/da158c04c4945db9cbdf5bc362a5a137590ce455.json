{"sha": "da158c04c4945db9cbdf5bc362a5a137590ce455", "node_id": "C_kwDOAAsO6NoAKGRhMTU4YzA0YzQ5NDVkYjljYmRmNWJjMzYyYTVhMTM3NTkwY2U0NTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T10:08:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T10:08:55Z"}, "message": "Rollup merge of #83744 - bjorn3:deprecate_cfg_attr_crate_type_name, r=Mark-Simulacrum\n\nDeprecate crate_type and crate_name nested inside #![cfg_attr]\n\nThis implements the proposal in https://github.com/rust-lang/rust/pull/83676#issuecomment-811213956, with a future compatibility lint imposed on usage of crate_type/crate_name inside cfg's.\n\nThis is a compromise between removing `#![crate_type]` and `#![crate_name]` completely and keeping them as a whole, which requires somewhat of a hack in rustc and is impossible to support by gcc-rust. By only removing `#![crate_type]` and `#![crate_name]` nested inside `#![cfg_attr]` it becomes possible to parse them before a big chunk of the compiler has started.\n\nReplaces https://github.com/rust-lang/rust/pull/83676\n\n```rust\n#![crate_type = \"lib\"] // remains working\n#![cfg_attr(foo, crate_type = \"bin\")] // will stop working\n```\n\n# Rationale\n\nAs it currently is it is possible to try to access the stable crate id before it is actually set, which will panic. The fact that the Session contains mutable state beyond debugging things also doesn't completely sit well with me. Especially once parallel rustc becomes the default.\n\nI think there is currently also a cyclic dependency where you need to set the stable crate id to be able to load crates, but you need to load crates to expand proc macro attributes that may define #![crate_name] or #![crate_type]. Currently crate level proc macro attributes are unstable or completely unsupported (can't remember which), so this is not a problem, but it may become an issue in the future.\n\nFinally if we want to add incremental compilation to macro expansion or even parsing, we need the StableCrateId to be created together with the Session or even earlier as incremental compilation determines the incremental compilation session dir based on the StableCrateId.", "tree": {"sha": "c97c09abc80642450ea5912a0c0f9d41b5438d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c97c09abc80642450ea5912a0c0f9d41b5438d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da158c04c4945db9cbdf5bc362a5a137590ce455", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsIQ4CRBK7hj4Ov3rIwAA2lYIACiXsmdycnwrJJBx/ACTqJAf\nmEz89xYKdOJU0vrqmDRRR47bQwucm6W0f5NPxDMelDZVpIQcKgcLExpB4TuZQcS/\nKEcGCO4KdJQ5QreW91ylWLX4RqPfc8fAdOny5dccDHTlZr5InxEHsarmlP5LHv/y\nr9KZxCORfcne46mDVJi85NVN3nfoFxAaWC5U9RJ4UMXbodzL4Iq68ryGzpJYPdOR\ns5NlY6HFRci5+HFSBmRzO9S65MIR7Q3Ft4K0puOC4e86S58qs1cE/SXdQxAsYWNL\nSQkEg9tP64xk5MX2qh4Pc4fHAXgLaOdX8UOZnriUPLUgGIb/P86qn5KQMjgoPDU=\n=dSzV\n-----END PGP SIGNATURE-----\n", "payload": "tree c97c09abc80642450ea5912a0c0f9d41b5438d3d\nparent abba5edf480f8ba6be4aa8791bd343dd12efb969\nparent 9b6c5109058d0662c9340b0328bcad591458f35d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638958135 +0100\ncommitter GitHub <noreply@github.com> 1638958135 +0100\n\nRollup merge of #83744 - bjorn3:deprecate_cfg_attr_crate_type_name, r=Mark-Simulacrum\n\nDeprecate crate_type and crate_name nested inside #![cfg_attr]\n\nThis implements the proposal in https://github.com/rust-lang/rust/pull/83676#issuecomment-811213956, with a future compatibility lint imposed on usage of crate_type/crate_name inside cfg's.\n\nThis is a compromise between removing `#![crate_type]` and `#![crate_name]` completely and keeping them as a whole, which requires somewhat of a hack in rustc and is impossible to support by gcc-rust. By only removing `#![crate_type]` and `#![crate_name]` nested inside `#![cfg_attr]` it becomes possible to parse them before a big chunk of the compiler has started.\n\nReplaces https://github.com/rust-lang/rust/pull/83676\n\n```rust\n#![crate_type = \"lib\"] // remains working\n#![cfg_attr(foo, crate_type = \"bin\")] // will stop working\n```\n\n# Rationale\n\nAs it currently is it is possible to try to access the stable crate id before it is actually set, which will panic. The fact that the Session contains mutable state beyond debugging things also doesn't completely sit well with me. Especially once parallel rustc becomes the default.\n\nI think there is currently also a cyclic dependency where you need to set the stable crate id to be able to load crates, but you need to load crates to expand proc macro attributes that may define #![crate_name] or #![crate_type]. Currently crate level proc macro attributes are unstable or completely unsupported (can't remember which), so this is not a problem, but it may become an issue in the future.\n\nFinally if we want to add incremental compilation to macro expansion or even parsing, we need the StableCrateId to be created together with the Session or even earlier as incremental compilation determines the incremental compilation session dir based on the StableCrateId.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da158c04c4945db9cbdf5bc362a5a137590ce455", "html_url": "https://github.com/rust-lang/rust/commit/da158c04c4945db9cbdf5bc362a5a137590ce455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da158c04c4945db9cbdf5bc362a5a137590ce455/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abba5edf480f8ba6be4aa8791bd343dd12efb969", "url": "https://api.github.com/repos/rust-lang/rust/commits/abba5edf480f8ba6be4aa8791bd343dd12efb969", "html_url": "https://github.com/rust-lang/rust/commit/abba5edf480f8ba6be4aa8791bd343dd12efb969"}, {"sha": "9b6c5109058d0662c9340b0328bcad591458f35d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6c5109058d0662c9340b0328bcad591458f35d", "html_url": "https://github.com/rust-lang/rust/commit/9b6c5109058d0662c9340b0328bcad591458f35d"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "5221ab4b6133a67a228d26c3d6a9bcde24f22c60", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da158c04c4945db9cbdf5bc362a5a137590ce455/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da158c04c4945db9cbdf5bc362a5a137590ce455/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=da158c04c4945db9cbdf5bc362a5a137590ce455", "patch": "@@ -402,7 +402,24 @@ impl<'a> StripUnconfigured<'a> {\n                 );\n                 trees.push((bracket_group, Spacing::Alone));\n                 let tokens = Some(LazyTokenStream::new(AttrAnnotatedTokenStream::new(trees)));\n-                self.process_cfg_attr(attr::mk_attr_from_item(item, tokens, attr.style, span))\n+                let attr = attr::mk_attr_from_item(item, tokens, attr.style, span);\n+                if attr.has_name(sym::crate_type) {\n+                    self.sess.parse_sess.buffer_lint(\n+                        rustc_lint_defs::builtin::DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+                        attr.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"`crate_type` within an `#![cfg_attr] attribute is deprecated`\",\n+                    );\n+                }\n+                if attr.has_name(sym::crate_name) {\n+                    self.sess.parse_sess.buffer_lint(\n+                        rustc_lint_defs::builtin::DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+                        attr.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"`crate_name` within an `#![cfg_attr] attribute is deprecated`\",\n+                    );\n+                }\n+                self.process_cfg_attr(attr)\n             })\n             .collect()\n     }"}, {"sha": "c9294c68a7dc9b4999c73143d451f49edc92d3a5", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da158c04c4945db9cbdf5bc362a5a137590ce455/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da158c04c4945db9cbdf5bc362a5a137590ce455/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=da158c04c4945db9cbdf5bc362a5a137590ce455", "patch": "@@ -2960,6 +2960,41 @@ declare_lint! {\n     \"detects large moves or copies\",\n }\n \n+declare_lint! {\n+    /// The `deprecated_cfg_attr_crate_type_name` lint detects uses of the\n+    /// `#![cfg_attr(..., crate_type = \"...\")]` and\n+    /// `#![cfg_attr(..., crate_name = \"...\")]` attributes to conditionally\n+    /// specify the crate type and name in the source code.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![cfg_attr(debug_assertions, crate_type = \"lib\")]\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The `#![crate_type]` and `#![crate_name]` attributes require a hack in\n+    /// the compiler to be able to change the used crate type and crate name\n+    /// after macros have been expanded. Neither attribute works in combination\n+    /// with Cargo as it explicitly passes `--crate-type` and `--crate-name` on\n+    /// the commandline. These values must match the value used in the source\n+    /// code to prevent an error.\n+    ///\n+    /// To fix the warning use `--crate-type` on the commandline when running\n+    /// rustc instead of `#![cfg_attr(..., crate_type = \"...\")]` and\n+    /// `--crate-name` instead of `#![cfg_attr(..., crate_name = \"...\")]`.\n+    pub DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+    Warn,\n+    \"detects usage of `#![cfg_attr(..., crate_type/crate_name = \\\"...\\\")]`\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #91632 <https://github.com/rust-lang/rust/issues/91632>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3056,6 +3091,7 @@ declare_lint_pass! {\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n         DEREF_INTO_DYN_SUPERTRAIT,\n+        DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n     ]\n }\n "}, {"sha": "1e0f5d79c0b426cf461417a8077192b2b0461d1b", "filename": "src/test/ui/cfg/auxiliary/crate-attributes-using-cfg_attr.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abba5edf480f8ba6be4aa8791bd343dd12efb969/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abba5edf480f8ba6be4aa8791bd343dd12efb969/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs?ref=abba5edf480f8ba6be4aa8791bd343dd12efb969", "patch": "@@ -1,6 +0,0 @@\n-// no-prefer-dynamic\n-// compile-flags: --cfg foo\n-\n-#![cfg_attr(foo, crate_type=\"lib\")]\n-\n-pub fn foo() {}"}, {"sha": "43b266b778f0eeb4c689dfc51d03041339621dfb", "filename": "src/test/ui/cfg/crate-attributes-using-cfg_attr.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abba5edf480f8ba6be4aa8791bd343dd12efb969/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abba5edf480f8ba6be4aa8791bd343dd12efb969/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs?ref=abba5edf480f8ba6be4aa8791bd343dd12efb969", "patch": "@@ -1,6 +0,0 @@\n-// run-pass\n-// aux-build:crate-attributes-using-cfg_attr.rs\n-\n-extern crate crate_attributes_using_cfg_attr;\n-\n-pub fn main() {}"}, {"sha": "ef12b05fab23723c9fa2084f2c36d0e62be657b5", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da158c04c4945db9cbdf5bc362a5a137590ce455/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da158c04c4945db9cbdf5bc362a5a137590ce455/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs?ref=da158c04c4945db9cbdf5bc362a5a137590ce455", "patch": "@@ -0,0 +1,12 @@\n+// check-fail\n+// compile-flags:--cfg foo\n+\n+#![deny(warnings)]\n+#![cfg_attr(foo, crate_type=\"bin\")]\n+//~^ERROR `crate_type` within\n+//~| WARN this was previously accepted\n+#![cfg_attr(foo, crate_name=\"bar\")]\n+//~^ERROR `crate_name` within\n+//~| WARN this was previously accepted\n+\n+fn main() {}"}, {"sha": "5df2eacc96e1ee9461d588c8b67a801dccce69a7", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da158c04c4945db9cbdf5bc362a5a137590ce455/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da158c04c4945db9cbdf5bc362a5a137590ce455/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr?ref=da158c04c4945db9cbdf5bc362a5a137590ce455", "patch": "@@ -0,0 +1,26 @@\n+error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:5:18\n+   |\n+LL | #![cfg_attr(foo, crate_type=\"bin\")]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:4:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` implied by `#[deny(warnings)]`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+\n+error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:8:18\n+   |\n+LL | #![cfg_attr(foo, crate_name=\"bar\")]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+\n+error: aborting due to 2 previous errors\n+"}]}