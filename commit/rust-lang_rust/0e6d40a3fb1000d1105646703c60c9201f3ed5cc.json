{"sha": "0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmQ0MGEzZmIxMDAwZDExMDU2NDY3MDNjNjBjOTIwMWYzZWQ1Y2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T12:32:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T12:32:11Z"}, "message": "type_alias_bounds lint: If the type alias uses an associated type without \"as\", suggest to use the \"as\" form instead.\n\nThis is necessary to get rid of the type bound, and hence silence the warning.", "tree": {"sha": "7f6ad31c7be27de0c29c4b2f0678fc501701c88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6ad31c7be27de0c29c4b2f0678fc501701c88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "html_url": "https://github.com/rust-lang/rust/commit/0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562b44d8c3dbcf7c36209774e50fe833e65a98d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/562b44d8c3dbcf7c36209774e50fe833e65a98d6", "html_url": "https://github.com/rust-lang/rust/commit/562b44d8c3dbcf7c36209774e50fe833e65a98d6"}], "stats": {"total": 179, "additions": 150, "deletions": 29}, "files": [{"sha": "d4bfa7a1d308ced4d42976b8df03d2beaea4d0c1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "patch": "@@ -395,6 +395,15 @@ pub enum TyParamBound {\n     RegionTyParamBound(Lifetime),\n }\n \n+impl TyParamBound {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &TraitTyParamBound(ref t, ..) => t.span,\n+            &RegionTyParamBound(ref l) => l.span,\n+        }\n+    }\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -570,6 +579,16 @@ pub enum WherePredicate {\n     EqPredicate(WhereEqPredicate),\n }\n \n+impl WherePredicate {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &WherePredicate::BoundPredicate(ref p) => p.span,\n+            &WherePredicate::RegionPredicate(ref p) => p.span,\n+            &WherePredicate::EqPredicate(ref p) => p.span,\n+        }\n+    }\n+}\n+\n /// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {"}, {"sha": "2ea13b2cb6d68a375085ec5296a61397505b0053", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 75, "deletions": 8, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "patch": "@@ -46,6 +46,7 @@ use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n+use syntax::errors::DiagnosticBuilder;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1334,31 +1335,97 @@ impl LintPass for TypeAliasBounds {\n     }\n }\n \n-impl EarlyLintPass for TypeAliasBounds {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        let type_alias_generics = match item.node {\n-            ast::ItemKind::Ty(_, ref generics) => generics,\n+impl TypeAliasBounds {\n+    fn is_type_variable_assoc(qpath: &hir::QPath) -> bool {\n+        match *qpath {\n+            hir::QPath::TypeRelative(ref ty, _) => {\n+                // If this is a type variable, we found a `T::Assoc`.\n+                match ty.node {\n+                    hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n+                        match path.def {\n+                            Def::TyParam(_) => true,\n+                            _ => false\n+                        }\n+                    }\n+                    _ => false\n+                }\n+            }\n+            hir::QPath::Resolved(..) => false,\n+        }\n+    }\n+\n+    fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder) {\n+        // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n+        // bound.  Let's see of this type does that.\n+\n+        // We use an AST visitor to walk the type.\n+        use rustc::hir::intravisit::{self, Visitor};\n+        use syntax::ast::NodeId;\n+        struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n+            err: &'a mut DiagnosticBuilder<'db>\n+        }\n+        impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n+            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v>\n+            {\n+                intravisit::NestedVisitorMap::None\n+            }\n+\n+            fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n+                if TypeAliasBounds::is_type_variable_assoc(qpath) {\n+                    self.err.span_help(span,\n+                        \"use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated \\\n+                         types in type aliases\");\n+                }\n+                intravisit::walk_qpath(self, qpath, id, span)\n+            }\n+        }\n+\n+        // Let's go for a walk!\n+        let mut visitor = WalkAssocTypes { err };\n+        visitor.visit_ty(ty);\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n+    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        let (ty, type_alias_generics) = match item.node {\n+            hir::ItemTy(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n+        let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n         if !type_alias_generics.where_clause.predicates.is_empty() {\n             let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n                 .map(|pred| pred.span()).collect();\n-            cx.span_lint(TYPE_ALIAS_BOUNDS, spans,\n+            let mut err = cx.struct_span_lint(TYPE_ALIAS_BOUNDS, spans,\n                 \"where clauses are not enforced in type aliases\");\n+            err.help(\"the clause will not be checked when the type alias is used, \\\n+                      and should be removed\");\n+            if !suggested_changing_assoc_types {\n+                TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                suggested_changing_assoc_types = true;\n+            }\n+            err.emit();\n         }\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n             let spans : Vec<_> = match param {\n-                &ast::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n-                &ast::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n+                &hir::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n+                &hir::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n             };\n             if !spans.is_empty() {\n-                cx.span_lint(\n+                let mut err = cx.struct_span_lint(\n                     TYPE_ALIAS_BOUNDS,\n                     spans,\n                     \"bounds on generic parameters are not enforced in type aliases\",\n                 );\n+                err.help(\"the bound will not be checked when the type alias is used, \\\n+                          and should be removed\");\n+                if !suggested_changing_assoc_types {\n+                    TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                    suggested_changing_assoc_types = true;\n+                }\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "7237d2fd5d1c930ca4778c8bfb98baebd8ff1558", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "patch": "@@ -109,7 +109,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n-                       TypeAliasBounds,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -139,6 +138,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  MutableTransmutes,\n                  UnionsWithDropFields,\n                  UnreachablePub,\n+                 TypeAliasBounds,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "c1cdeef3a4638f688fdff378c89b5e74745af13a", "filename": "src/test/ui/type-alias-bounds.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.rs?ref=0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "patch": "@@ -10,6 +10,7 @@\n \n // Test ignored_generic_bounds lint warning about bounds in type aliases\n \n+// must-compile-successfully\n #![allow(dead_code)]\n \n use std::rc::Rc;\n@@ -53,12 +54,16 @@ type MySendable<T> = Sendable<T>; // no error here!\n \n // However, bounds *are* taken into account when accessing associated types\n trait Bound { type Assoc; }\n-type T1<U: Bound> = U::Assoc;\n-//~^ WARN bounds on generic parameters are not enforced in type aliases\n-type T2<U> where U: Bound = U::Assoc;\n-//~^ WARN where clauses are not enforced in type aliases\n-type T3<U> = U::Assoc;\n-//~^ ERROR associated type `Assoc` not found for `U`\n+type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n+type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n+\n+// This errors\n+// type T3<U> = U::Assoc;\n+// Do this instead\n type T4<U> = <U as Bound>::Assoc;\n \n+// Make sure the help about associatd types is not shown incorrectly\n+type T5<U: Bound> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases\n+type T6<U: Bound> = ::std::vec::Vec<U>;  //~ WARN not enforced in type aliases\n+\n fn main() {}"}, {"sha": "5288dca79be68d9f89fd1f26f1c88cd76d2a3b17", "filename": "src/test/ui/type-alias-bounds.stderr", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e6d40a3fb1000d1105646703c60c9201f3ed5cc/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr?ref=0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "patch": "@@ -1,53 +1,83 @@\n warning: bounds on generic parameters are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:17:14\n+  --> $DIR/type-alias-bounds.rs:18:14\n    |\n LL | type SVec<T: Send+Send> = Vec<T>;\n    |              ^^^^ ^^^^\n    |\n    = note: #[warn(type_alias_bounds)] on by default\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n \n warning: where clauses are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:19:21\n+  --> $DIR/type-alias-bounds.rs:20:21\n    |\n LL | type S2Vec<T> where T: Send = Vec<T>;\n    |                     ^^^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n \n warning: bounds on generic parameters are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:21:19\n+  --> $DIR/type-alias-bounds.rs:22:19\n    |\n LL | type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n    |                   ^^ ^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n \n warning: bounds on generic parameters are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:23:18\n+  --> $DIR/type-alias-bounds.rs:24:18\n    |\n LL | type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n    |                  ^^ ^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n \n warning: where clauses are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:25:25\n+  --> $DIR/type-alias-bounds.rs:26:25\n    |\n LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n    |                         ^^^^^  ^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n \n warning: bounds on generic parameters are not enforced in type aliases\n-  --> $DIR/type-alias-bounds.rs:56:12\n+  --> $DIR/type-alias-bounds.rs:57:12\n    |\n-LL | type T1<U: Bound> = U::Assoc;\n+LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n    |            ^^^^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated types in type aliases\n+  --> $DIR/type-alias-bounds.rs:57:21\n+   |\n+LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n+   |                     ^^^^^^^^\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:58:18\n    |\n-LL | type T2<U> where U: Bound = U::Assoc;\n+LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n    |                  ^^^^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated types in type aliases\n+  --> $DIR/type-alias-bounds.rs:58:29\n+   |\n+LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n+   |                             ^^^^^^^^\n \n-error[E0220]: associated type `Assoc` not found for `U`\n-  --> $DIR/type-alias-bounds.rs:60:14\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:66:12\n+   |\n+LL | type T5<U: Bound> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases\n+   |            ^^^^^\n    |\n-LL | type T3<U> = U::Assoc;\n-   |              ^^^^^^^^ associated type `Assoc` not found\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n \n-error: aborting due to previous error\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:67:12\n+   |\n+LL | type T6<U: Bound> = ::std::vec::Vec<U>;  //~ WARN not enforced in type aliases\n+   |            ^^^^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n \n-If you want more information on this error, try using \"rustc --explain E0220\""}]}