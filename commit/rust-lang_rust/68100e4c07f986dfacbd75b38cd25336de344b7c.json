{"sha": "68100e4c07f986dfacbd75b38cd25336de344b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTAwZTRjMDdmOTg2ZGZhY2JkNzViMzhjZDI1MzM2ZGUzNDRiN2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T10:23:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T10:23:48Z"}, "message": "Rollup merge of #24176 - kballard:bufreader-seek-impl, r=aturon", "tree": {"sha": "494186142883382084ea35072daa75063e61aaaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494186142883382084ea35072daa75063e61aaaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68100e4c07f986dfacbd75b38cd25336de344b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68100e4c07f986dfacbd75b38cd25336de344b7c", "html_url": "https://github.com/rust-lang/rust/commit/68100e4c07f986dfacbd75b38cd25336de344b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68100e4c07f986dfacbd75b38cd25336de344b7c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00ab58f3c549d2045835a26048ca41db2d8d9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00ab58f3c549d2045835a26048ca41db2d8d9bb", "html_url": "https://github.com/rust-lang/rust/commit/a00ab58f3c549d2045835a26048ca41db2d8d9bb"}, {"sha": "16052053ac2668b5540a55383924ce36e7018933", "url": "https://api.github.com/repos/rust-lang/rust/commits/16052053ac2668b5540a55383924ce36e7018933", "html_url": "https://github.com/rust-lang/rust/commit/16052053ac2668b5540a55383924ce36e7018933"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "bd44a9547b49677591d7b4c75f7eda101649f042", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 131, "deletions": 2, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/68100e4c07f986dfacbd75b38cd25336de344b7c/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68100e4c07f986dfacbd75b38cd25336de344b7c/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=68100e4c07f986dfacbd75b38cd25336de344b7c", "patch": "@@ -18,7 +18,7 @@ use io::prelude::*;\n use cmp;\n use error;\n use fmt;\n-use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind};\n+use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom};\n use ptr;\n use iter;\n \n@@ -120,6 +120,52 @@ impl<R> fmt::Debug for BufReader<R> where R: fmt::Debug {\n     }\n }\n \n+#[unstable(feature = \"buf_seek\", reason = \"recently added\")]\n+impl<R: Seek> Seek for BufReader<R> {\n+    /// Seek to an offset, in bytes, in the underlying reader.\n+    ///\n+    /// The position used for seeking with `SeekFrom::Current(_)` is the\n+    /// position the underlying reader would be at if the `BufReader` had no\n+    /// internal buffer.\n+    ///\n+    /// Seeking always discards the internal buffer, even if the seek position\n+    /// would otherwise fall within it. This guarantees that calling\n+    /// `.unwrap()` immediately after a seek yields the underlying reader at\n+    /// the same position.\n+    ///\n+    /// See `std::io::Seek` for more details.\n+    ///\n+    /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n+    /// where `n` minus the internal buffer length underflows an `i64`, two\n+    /// seeks will be performed instead of one. If the second seek returns\n+    /// `Err`, the underlying reader will be left at the same position it would\n+    /// have if you seeked to `SeekFrom::Current(0)`.\n+    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n+        let result: u64;\n+        if let SeekFrom::Current(n) = pos {\n+            let remainder = (self.cap - self.pos) as i64;\n+            // it should be safe to assume that remainder fits within an i64 as the alternative\n+            // means we managed to allocate 8 ebibytes and that's absurd.\n+            // But it's not out of the realm of possibility for some weird underlying reader to\n+            // support seeking by i64::min_value() so we need to handle underflow when subtracting\n+            // remainder.\n+            if let Some(offset) = n.checked_sub(remainder) {\n+                result = try!(self.inner.seek(SeekFrom::Current(offset)));\n+            } else {\n+                // seek backwards by our remainder, and then by the offset\n+                try!(self.inner.seek(SeekFrom::Current(-remainder)));\n+                self.pos = self.cap; // empty the buffer\n+                result = try!(self.inner.seek(SeekFrom::Current(n)));\n+            }\n+        } else {\n+            // Seeking with Start/End doesn't care about our buffer length.\n+            result = try!(self.inner.seek(pos));\n+        }\n+        self.pos = self.cap; // empty the buffer\n+        Ok(result)\n+    }\n+}\n+\n /// Wraps a Writer and buffers output to it\n ///\n /// It can be excessively inefficient to work directly with a `Write`. For\n@@ -238,6 +284,16 @@ impl<W: Write> fmt::Debug for BufWriter<W> where W: fmt::Debug {\n     }\n }\n \n+#[unstable(feature = \"buf_seek\", reason = \"recently added\")]\n+impl<W: Write+Seek> Seek for BufWriter<W> {\n+    /// Seek to the offset, in bytes, in the underlying writer.\n+    ///\n+    /// Seeking always writes out the internal buffer before seeking.\n+    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n+        self.flush_buf().and_then(|_| self.get_mut().seek(pos))\n+    }\n+}\n+\n #[unsafe_destructor]\n impl<W: Write> Drop for BufWriter<W> {\n     fn drop(&mut self) {\n@@ -478,7 +534,7 @@ impl<S: Write> fmt::Debug for BufStream<S> where S: fmt::Debug {\n mod tests {\n     use prelude::v1::*;\n     use io::prelude::*;\n-    use io::{self, BufReader, BufWriter, BufStream, Cursor, LineWriter};\n+    use io::{self, BufReader, BufWriter, BufStream, Cursor, LineWriter, SeekFrom};\n     use test;\n \n     /// A dummy reader intended at testing short-reads propagation.\n@@ -533,6 +589,67 @@ mod tests {\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_buffered_reader_seek() {\n+        let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+        let mut reader = BufReader::with_capacity(2, io::Cursor::new(inner));\n+\n+        assert_eq!(reader.seek(SeekFrom::Start(3)).ok(), Some(3));\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert_eq!(reader.seek(SeekFrom::Current(0)).ok(), Some(3));\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert_eq!(reader.seek(SeekFrom::Current(1)).ok(), Some(4));\n+        assert_eq!(reader.fill_buf().ok(), Some(&[1, 2][..]));\n+        reader.consume(1);\n+        assert_eq!(reader.seek(SeekFrom::Current(-2)).ok(), Some(3));\n+    }\n+\n+    #[test]\n+    fn test_buffered_reader_seek_underflow() {\n+        // gimmick reader that yields its position modulo 256 for each byte\n+        struct PositionReader {\n+            pos: u64\n+        }\n+        impl Read for PositionReader {\n+            fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+                let len = buf.len();\n+                for x in buf {\n+                    *x = self.pos as u8;\n+                    self.pos = self.pos.wrapping_add(1);\n+                }\n+                Ok(len)\n+            }\n+        }\n+        impl Seek for PositionReader {\n+            fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n+                match pos {\n+                    SeekFrom::Start(n) => {\n+                        self.pos = n;\n+                    }\n+                    SeekFrom::Current(n) => {\n+                        self.pos = self.pos.wrapping_add(n as u64);\n+                    }\n+                    SeekFrom::End(n) => {\n+                        self.pos = u64::max_value().wrapping_add(n as u64);\n+                    }\n+                }\n+                Ok(self.pos)\n+            }\n+        }\n+\n+        let mut reader = BufReader::with_capacity(5, PositionReader { pos: 0 });\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1, 2, 3, 4][..]));\n+        assert_eq!(reader.seek(SeekFrom::End(-5)).ok(), Some(u64::max_value()-5));\n+        assert_eq!(reader.fill_buf().ok().map(|s| s.len()), Some(5));\n+        // the following seek will require two underlying seeks\n+        let expected = 9223372036854775802;\n+        assert_eq!(reader.seek(SeekFrom::Current(i64::min_value())).ok(), Some(expected));\n+        assert_eq!(reader.fill_buf().ok().map(|s| s.len()), Some(5));\n+        // seeking to 0 should empty the buffer.\n+        assert_eq!(reader.seek(SeekFrom::Current(0)).ok(), Some(expected));\n+        assert_eq!(reader.get_ref().pos, expected);\n+    }\n+\n     #[test]\n     fn test_buffered_writer() {\n         let inner = Vec::new();\n@@ -576,6 +693,18 @@ mod tests {\n         assert_eq!(w, [0, 1]);\n     }\n \n+    #[test]\n+    fn test_buffered_writer_seek() {\n+        let mut w = BufWriter::with_capacity(3, io::Cursor::new(Vec::new()));\n+        w.write_all(&[0, 1, 2, 3, 4, 5]).unwrap();\n+        w.write_all(&[6, 7]).unwrap();\n+        assert_eq!(w.seek(SeekFrom::Current(0)).ok(), Some(8));\n+        assert_eq!(&w.get_ref().get_ref()[..], &[0, 1, 2, 3, 4, 5, 6, 7][..]);\n+        assert_eq!(w.seek(SeekFrom::Start(2)).ok(), Some(2));\n+        w.write_all(&[8, 9]).unwrap();\n+        assert_eq!(&w.into_inner().unwrap().into_inner()[..], &[0, 1, 8, 9, 4, 5, 6, 7]);\n+    }\n+\n     // This is just here to make sure that we don't infinite loop in the\n     // newtype struct autoderef weirdness\n     #[test]"}]}