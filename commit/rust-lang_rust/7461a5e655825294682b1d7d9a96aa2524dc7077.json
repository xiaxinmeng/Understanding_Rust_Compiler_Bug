{"sha": "7461a5e655825294682b1d7d9a96aa2524dc7077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjFhNWU2NTU4MjUyOTQ2ODJiMWQ3ZDlhOTZhYTI1MjRkYzcwNzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T18:00:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:17Z"}, "message": "Fix ast_validation printing of const generics", "tree": {"sha": "62c5320ea9cf00d21ebebdd973dae424ede42924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c5320ea9cf00d21ebebdd973dae424ede42924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7461a5e655825294682b1d7d9a96aa2524dc7077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7461a5e655825294682b1d7d9a96aa2524dc7077", "html_url": "https://github.com/rust-lang/rust/commit/7461a5e655825294682b1d7d9a96aa2524dc7077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7461a5e655825294682b1d7d9a96aa2524dc7077/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1805546084b2ad5e7a694b8b6974594ee2c4d849", "url": "https://api.github.com/repos/rust-lang/rust/commits/1805546084b2ad5e7a694b8b6974594ee2c4d849", "html_url": "https://github.com/rust-lang/rust/commit/1805546084b2ad5e7a694b8b6974594ee2c4d849"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "a1c9d3ece2c0dee9844279b75a41438d84893843", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7461a5e655825294682b1d7d9a96aa2524dc7077/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7461a5e655825294682b1d7d9a96aa2524dc7077/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7461a5e655825294682b1d7d9a96aa2524dc7077", "patch": "@@ -7,6 +7,7 @@\n // or type checking or some other kind of complex analysis.\n \n use std::mem;\n+use syntax::print::pprust;\n use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n@@ -281,7 +282,7 @@ enum GenericPosition {\n \n fn validate_generics_order<'a>(\n     handler: &errors::Handler,\n-    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<Ident>)>,\n+    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<String>)>,\n     pos: GenericPosition,\n     span: Span,\n ) {\n@@ -311,7 +312,7 @@ fn validate_generics_order<'a>(\n             if !first {\n                 ordered_params += \", \";\n             }\n-            ordered_params += &ident.as_str();\n+            ordered_params += &ident;\n             first = false;\n         }\n     }\n@@ -635,11 +636,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         validate_generics_order(self.err_handler(), generics.params.iter().map(|param| {\n-            (match param.kind {\n-                GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n-                GenericParamKind::Type { .. } => ParamKindOrd::Type,\n-                GenericParamKind::Const { .. } => ParamKindOrd::Const,\n-            }, param.ident.span, Some(param.ident))\n+            let span = param.ident.span;\n+            let ident = Some(param.ident.to_string());\n+            match &param.kind {\n+                GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, span, ident),\n+                GenericParamKind::Type { .. } => (ParamKindOrd::Type, span, ident),\n+                GenericParamKind::Const { ref ty } => {\n+                    let ty = pprust::ty_to_string(ty);\n+                    (ParamKindOrd::Const, span, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                }\n+            }\n         }), GenericPosition::Param, generics.span);\n \n         for predicate in &generics.where_clause.predicates {"}, {"sha": "aedcaf52e2688a34deb25296b008a8f6fefc801a", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7461a5e655825294682b1d7d9a96aa2524dc7077/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7461a5e655825294682b1d7d9a96aa2524dc7077/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=7461a5e655825294682b1d7d9a96aa2524dc7077", "patch": "@@ -8,13 +8,13 @@ error: type parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n LL | fn foo<const X: (), T>(_: T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, X>`\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:9:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, X>`\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: const generics in any position are currently unsupported\n   --> $DIR/const-param-before-other-params.rs:4:14"}]}