{"sha": "4c8ce48a15c88715955e56c9c35959d9dffad5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGNlNDhhMTVjODg3MTU5NTVlNTZjOWMzNTk1OWQ5ZGZmYWQ1ZWM=", "commit": {"author": {"name": "VillSnow", "email": "vill.snow@gmail.com", "date": "2020-06-21T04:52:26Z"}, "committer": {"name": "VillSnow", "email": "vill.snow@gmail.com", "date": "2020-06-21T04:52:26Z"}, "message": "Add partition_point", "tree": {"sha": "edc61b9179297ec92aea58c2c90268639a8ee42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc61b9179297ec92aea58c2c90268639a8ee42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8ce48a15c88715955e56c9c35959d9dffad5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8ce48a15c88715955e56c9c35959d9dffad5ec", "html_url": "https://github.com/rust-lang/rust/commit/4c8ce48a15c88715955e56c9c35959d9dffad5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8ce48a15c88715955e56c9c35959d9dffad5ec/comments", "author": {"login": "VillSnow", "id": 12480493, "node_id": "MDQ6VXNlcjEyNDgwNDkz", "avatar_url": "https://avatars.githubusercontent.com/u/12480493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VillSnow", "html_url": "https://github.com/VillSnow", "followers_url": "https://api.github.com/users/VillSnow/followers", "following_url": "https://api.github.com/users/VillSnow/following{/other_user}", "gists_url": "https://api.github.com/users/VillSnow/gists{/gist_id}", "starred_url": "https://api.github.com/users/VillSnow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VillSnow/subscriptions", "organizations_url": "https://api.github.com/users/VillSnow/orgs", "repos_url": "https://api.github.com/users/VillSnow/repos", "events_url": "https://api.github.com/users/VillSnow/events{/privacy}", "received_events_url": "https://api.github.com/users/VillSnow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VillSnow", "id": 12480493, "node_id": "MDQ6VXNlcjEyNDgwNDkz", "avatar_url": "https://avatars.githubusercontent.com/u/12480493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VillSnow", "html_url": "https://github.com/VillSnow", "followers_url": "https://api.github.com/users/VillSnow/followers", "following_url": "https://api.github.com/users/VillSnow/following{/other_user}", "gists_url": "https://api.github.com/users/VillSnow/gists{/gist_id}", "starred_url": "https://api.github.com/users/VillSnow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VillSnow/subscriptions", "organizations_url": "https://api.github.com/users/VillSnow/orgs", "repos_url": "https://api.github.com/users/VillSnow/repos", "events_url": "https://api.github.com/users/VillSnow/events{/privacy}", "received_events_url": "https://api.github.com/users/VillSnow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e", "html_url": "https://github.com/rust-lang/rust/commit/2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "fe472092b10ce29c68f73d40ba25f8a0f8dd9e68", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4c8ce48a15c88715955e56c9c35959d9dffad5ec/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8ce48a15c88715955e56c9c35959d9dffad5ec/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4c8ce48a15c88715955e56c9c35959d9dffad5ec", "patch": "@@ -2663,6 +2663,44 @@ impl<T> [T] {\n     {\n         self.iter().is_sorted_by_key(f)\n     }\n+\n+    /// Returns index of partition point according to the given predicate,\n+    /// such that all those that return true precede the index and\n+    /// such that all those that return false succeed the index.\n+    ///\n+    /// 'self' must be partitioned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(partition_point)]\n+    ///\n+    /// let v = [1, 2, 3, 3, 5, 6, 7];\n+    /// let i = xs.partition_point(|&x| x < 5);\n+    ///\n+    /// assert_eq!(i, 4);\n+    /// assert!(xs[..i].iter().all(|&x| x < 5));\n+    /// assert!(xs[i..].iter().all(|&x| !(x < 5)));\n+    /// ```\n+    #[unstable(feature = \"partition_point\", reason = \"new API\", issue = \"99999\")]\n+    pub fn partition_point<P>(&self, mut pred: P) -> usize\n+    where\n+        P: FnMut(&T) -> bool,\n+    {\n+        let mut left = 0;\n+        let mut right = self.len();\n+\n+        while left != right {\n+            let mid = left + (right - left) / 2;\n+            let value = unsafe { self.get_unchecked(mid) };\n+            if pred(value) {\n+                left = mid + 1;\n+            } else {\n+                right = mid;\n+            }\n+        }\n+        return left;\n+    }\n }\n \n #[lang = \"slice_u8\"]"}]}