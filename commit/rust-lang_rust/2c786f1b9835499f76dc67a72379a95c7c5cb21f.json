{"sha": "2c786f1b9835499f76dc67a72379a95c7c5cb21f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzg2ZjFiOTgzNTQ5OWY3NmRjNjdhNzIzNzlhOTVjN2M1Y2IyMWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-22T12:11:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-22T12:11:29Z"}, "message": "Remove index based fallback for goto def\n\nWe are so precise that the fallback creates more confusion, when you can\ngoto def on an unresolved reference.", "tree": {"sha": "548cf53d061a51a4628a732a9536b9972a638cf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548cf53d061a51a4628a732a9536b9972a638cf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c786f1b9835499f76dc67a72379a95c7c5cb21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c786f1b9835499f76dc67a72379a95c7c5cb21f", "html_url": "https://github.com/rust-lang/rust/commit/2c786f1b9835499f76dc67a72379a95c7c5cb21f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c786f1b9835499f76dc67a72379a95c7c5cb21f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6403b530bb75f708b44a22e166671917121e625f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6403b530bb75f708b44a22e166671917121e625f", "html_url": "https://github.com/rust-lang/rust/commit/6403b530bb75f708b44a22e166671917121e625f"}], "stats": {"total": 66, "additions": 18, "deletions": 48}, "files": [{"sha": "9c7b360bb20369ebd05fa2de36aa8da108746241", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 18, "deletions": 48, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2c786f1b9835499f76dc67a72379a95c7c5cb21f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c786f1b9835499f76dc67a72379a95c7c5cb21f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=2c786f1b9835499f76dc67a72379a95c7c5cb21f", "patch": "@@ -2,16 +2,14 @@ use either::Either;\n use hir::{HasAttrs, ModuleDef, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n-    symbol_index, RootDatabase,\n+    RootDatabase,\n };\n use syntax::{\n     ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextSize, TokenAtOffset, T,\n };\n \n use crate::{\n-    display::{ToNav, TryToNav},\n-    doc_links::extract_definitions_from_markdown,\n-    runnables::doc_owner_to_def,\n+    display::TryToNav, doc_links::extract_definitions_from_markdown, runnables::doc_owner_to_def,\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n@@ -38,28 +36,26 @@ pub(crate) fn goto_definition(\n         return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n     }\n \n-    let nav_targets = match_ast! {\n+    let nav = match_ast! {\n         match parent {\n             ast::NameRef(name_ref) => {\n-                reference_definition(&sema, Either::Right(&name_ref)).to_vec()\n+                reference_definition(&sema, Either::Right(&name_ref))\n             },\n             ast::Name(name) => {\n                 let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n-                let nav = def.try_to_nav(sema.db)?;\n-                vec![nav]\n+                def.try_to_nav(sema.db)\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n                 let def = name_class.referenced_or_defined(sema.db);\n-                let nav = def.try_to_nav(sema.db)?;\n-                vec![nav]\n+                def.try_to_nav(sema.db)\n             } else {\n-                reference_definition(&sema, Either::Left(&lt)).to_vec()\n+                reference_definition(&sema, Either::Left(&lt))\n             },\n             _ => return None,\n         }\n     };\n \n-    Some(RangeInfo::new(original_token.text_range(), nav_targets))\n+    Some(RangeInfo::new(original_token.text_range(), nav.into_iter().collect()))\n }\n \n fn def_for_doc_comment(\n@@ -120,42 +116,16 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     }\n }\n \n-#[derive(Debug)]\n-pub(crate) enum ReferenceResult {\n-    Exact(NavigationTarget),\n-    Approximate(Vec<NavigationTarget>),\n-}\n-\n-impl ReferenceResult {\n-    fn to_vec(self) -> Vec<NavigationTarget> {\n-        match self {\n-            ReferenceResult::Exact(target) => vec![target],\n-            ReferenceResult::Approximate(vec) => vec,\n-        }\n-    }\n-}\n-\n pub(crate) fn reference_definition(\n     sema: &Semantics<RootDatabase>,\n     name_ref: Either<&ast::Lifetime, &ast::NameRef>,\n-) -> ReferenceResult {\n+) -> Option<NavigationTarget> {\n     let name_kind = name_ref.either(\n         |lifetime| NameRefClass::classify_lifetime(sema, lifetime),\n         |name_ref| NameRefClass::classify(sema, name_ref),\n-    );\n-    if let Some(def) = name_kind {\n-        let def = def.referenced(sema.db);\n-        return match def.try_to_nav(sema.db) {\n-            Some(nav) => ReferenceResult::Exact(nav),\n-            None => ReferenceResult::Approximate(Vec::new()),\n-        };\n-    }\n-\n-    // Fallback index based approach:\n-    let name = name_ref.either(ast::Lifetime::text, ast::NameRef::text);\n-    let navs =\n-        symbol_index::index_resolve(sema.db, name).into_iter().map(|s| s.to_nav(sema.db)).collect();\n-    ReferenceResult::Approximate(navs)\n+    )?;\n+    let def = name_kind.referenced(sema.db);\n+    def.try_to_nav(sema.db)\n }\n \n #[cfg(test)]\n@@ -297,13 +267,13 @@ fn bar() {\n     fn goto_def_for_macros_from_other_crates() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo::foo;\n fn bar() {\n     $0foo!();\n }\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules! foo { () => { () } }\n            //^^^\n@@ -315,10 +285,10 @@ macro_rules! foo { () => { () } }\n     fn goto_def_for_macros_in_use_tree() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo::foo$0;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules! foo { () => { () } }\n            //^^^\n@@ -976,10 +946,10 @@ type Alias<T> = T$0;\n     fn goto_def_for_macro_container() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n foo::module$0::mac!();\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n pub mod module {\n       //^^^^^^\n     #[macro_export]"}]}