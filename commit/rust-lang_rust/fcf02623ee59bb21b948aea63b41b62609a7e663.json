{"sha": "fcf02623ee59bb21b948aea63b41b62609a7e663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjAyNjIzZWU1OWJiMjFiOTQ4YWVhNjNiNDFiNjI2MDlhN2U2NjM=", "commit": {"author": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2016-11-02T08:35:44Z"}, "committer": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2016-11-02T08:47:54Z"}, "message": "Added general iterators for graph nodes and edges\n\nAlso used those general iterators in other methods.", "tree": {"sha": "3aa310f177192f53cba05c574fbd8325e4052b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa310f177192f53cba05c574fbd8325e4052b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf02623ee59bb21b948aea63b41b62609a7e663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf02623ee59bb21b948aea63b41b62609a7e663", "html_url": "https://github.com/rust-lang/rust/commit/fcf02623ee59bb21b948aea63b41b62609a7e663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf02623ee59bb21b948aea63b41b62609a7e663/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1ecc50ed7e83bb63116bc53f97eee409c7922d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1ecc50ed7e83bb63116bc53f97eee409c7922d", "html_url": "https://github.com/rust-lang/rust/commit/3d1ecc50ed7e83bb63116bc53f97eee409c7922d"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "a47374feecda614eeeb8b9de427138298a91d963", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fcf02623ee59bb21b948aea63b41b62609a7e663/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf02623ee59bb21b948aea63b41b62609a7e663/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=fcf02623ee59bb21b948aea63b41b62609a7e663", "patch": "@@ -231,18 +231,30 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n     // # Iterating over nodes, edges\n \n+    pub fn all_nodes_enumerated(&self) -> Nodes<N> {\n+        Nodes {\n+            iter: self.nodes.iter().enumerate()\n+        }\n+    }\n+\n+    pub fn all_edges_enumerated(&self) -> Edges<E> {\n+        Edges {\n+            iter: self.edges.iter().enumerate()\n+        }\n+    }\n+\n     pub fn each_node<'a, F>(&'a self, mut f: F) -> bool\n         where F: FnMut(NodeIndex, &'a Node<N>) -> bool\n     {\n         //! Iterates over all edges defined in the graph.\n-        self.nodes.iter().enumerate().all(|(i, node)| f(NodeIndex(i), node))\n+        self.all_nodes_enumerated().all(|(node_idx, node)| f(node_idx, node))\n     }\n \n     pub fn each_edge<'a, F>(&'a self, mut f: F) -> bool\n         where F: FnMut(EdgeIndex, &'a Edge<E>) -> bool\n     {\n         //! Iterates over all edges defined in the graph\n-        self.edges.iter().enumerate().all(|(i, edge)| f(EdgeIndex(i), edge))\n+        self.all_edges_enumerated().all(|(edge_idx, edge)| f(edge_idx, edge))\n     }\n \n     pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n@@ -286,8 +298,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         while changed {\n             changed = false;\n             iteration += 1;\n-            for (i, edge) in self.edges.iter().enumerate() {\n-                changed |= op(iteration, EdgeIndex(i), edge);\n+            for (edge_index, edge) in self.all_edges_enumerated() {\n+                changed |= op(iteration, edge_index, edge);\n             }\n         }\n     }\n@@ -302,6 +314,34 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n // # Iterators\n \n+pub struct Nodes<'g, N>\n+    where N: 'g,\n+{\n+    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Node<N>>>\n+}\n+\n+impl<'g, N: Debug> Iterator for Nodes<'g, N> {\n+    type Item = (NodeIndex, &'g Node<N>);\n+\n+    fn next(&mut self) -> Option<(NodeIndex, &'g Node<N>)> {\n+        self.iter.next().map(|(idx, n)| (NodeIndex(idx), n))\n+    }\n+}\n+\n+pub struct Edges<'g, E>\n+    where E: 'g,\n+{\n+    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Edge<E>>>\n+}\n+\n+impl<'g, E: Debug> Iterator for Edges<'g, E> {\n+    type Item = (EdgeIndex, &'g Edge<E>);\n+\n+    fn next(&mut self) -> Option<(EdgeIndex, &'g Edge<E>)> {\n+        self.iter.next().map(|(idx, e)| (EdgeIndex(idx), e))\n+    }\n+}\n+\n pub struct AdjacentEdges<'g, N, E>\n     where N: 'g,\n           E: 'g"}]}