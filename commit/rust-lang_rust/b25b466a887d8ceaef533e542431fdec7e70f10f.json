{"sha": "b25b466a887d8ceaef533e542431fdec7e70f10f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWI0NjZhODg3ZDhjZWFlZjUzM2U1NDI0MzFmZGVjN2U3MGYxMGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-14T16:39:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-18T15:10:21Z"}, "message": "rustc: remove 'x: 'y bounds (except from comments/strings).", "tree": {"sha": "4f06853796a7961c3a29406d235495acff5973a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f06853796a7961c3a29406d235495acff5973a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25b466a887d8ceaef533e542431fdec7e70f10f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25b466a887d8ceaef533e542431fdec7e70f10f", "html_url": "https://github.com/rust-lang/rust/commit/b25b466a887d8ceaef533e542431fdec7e70f10f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25b466a887d8ceaef533e542431fdec7e70f10f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fb88d25282d9362774536965f2455f677734f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fb88d25282d9362774536965f2455f677734f3", "html_url": "https://github.com/rust-lang/rust/commit/44fb88d25282d9362774536965f2455f677734f3"}], "stats": {"total": 610, "additions": 305, "deletions": 305}, "files": [{"sha": "213e57a3b37c2a7d6caffca676d5de43a0521893", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -7,7 +7,7 @@ use crate::ty::{self, TyCtxt};\n use crate::hir::{self, PatKind};\n use crate::hir::def_id::DefId;\n \n-struct CFGBuilder<'a, 'tcx: 'a> {\n+struct CFGBuilder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     owner_def_id: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,"}, {"sha": "918120057d4d35a99b256e7ec61aba594780d1af", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -11,7 +11,7 @@ use crate::ty::TyCtxt;\n pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n pub type Edge<'a> = &'a cfg::CFGEdge;\n \n-pub struct LabelledCFG<'a, 'tcx: 'a> {\n+pub struct LabelledCFG<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub cfg: &'a cfg::CFG,\n     pub name: String,"}, {"sha": "e8f83093bda113796a159d739dd0d5a57be64c6f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -207,8 +207,8 @@ macro_rules! define_dep_nodes {\n             pub fn new<'a, 'tcx>(tcx: TyCtxt<'tcx>,\n                                        dep: DepConstructor<'tcx>)\n                                        -> DepNode\n-                where 'tcx: 'a,\n-                      'tcx: 'a\n+                where 'tcx,\n+                      'tcx\n             {\n                 match dep {\n                     $("}, {"sha": "e29a373ec3b76117679cd49a81c699f5bb593082", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -74,7 +74,7 @@ impl<'a> FnKind<'a> {\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n+pub enum NestedVisitorMap<'this, 'tcx> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid."}, {"sha": "153397f11b5a0e926ad4d70119761f2eaf687c3e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -415,7 +415,7 @@ impl<'a> LoweringContext<'a> {\n         /// needed from arbitrary locations in the crate,\n         /// e.g., the number of lifetime generic parameters\n         /// declared for every type and trait definition.\n-        struct MiscCollector<'tcx, 'interner: 'tcx> {\n+        struct MiscCollector<'tcx, 'interner> {\n             lctx: &'tcx mut LoweringContext<'interner>,\n             hir_id_owner: Option<NodeId>,\n         }\n@@ -561,7 +561,7 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n \n-        struct ItemLowerer<'tcx, 'interner: 'tcx> {\n+        struct ItemLowerer<'tcx, 'interner> {\n             lctx: &'tcx mut LoweringContext<'interner>,\n         }\n \n@@ -1788,7 +1788,7 @@ impl<'a> LoweringContext<'a> {\n         // This visitor walks over `impl Trait` bounds and creates defs for all lifetimes that\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n         // E.g., `'a`, `'b`, but not `'c` in `impl for<'c> SomeTrait<'a, 'b, 'c>`.\n-        struct ImplTraitLifetimeCollector<'r, 'a: 'r> {\n+        struct ImplTraitLifetimeCollector<'r, 'a> {\n             context: &'r mut LoweringContext<'a>,\n             parent: DefIndex,\n             exist_ty_id: NodeId,\n@@ -1799,7 +1799,7 @@ impl<'a> LoweringContext<'a> {\n             output_lifetime_params: Vec<hir::GenericParam>,\n         }\n \n-        impl<'r, 'a: 'r, 'v> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a> {\n+        impl<'r, 'a, 'v> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a> {\n             fn nested_visit_map<'this>(\n                 &'this mut self,\n             ) -> hir::intravisit::NestedVisitorMap<'this, 'v> {"}, {"sha": "60465c04ec62fec2edf925245384d55c08e0c7ab", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -26,19 +26,19 @@ pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n     }\n }\n \n-struct HirIdValidator<'a, 'hir: 'a> {\n+struct HirIdValidator<'a, 'hir> {\n     hir_map: &'a hir::map::Map<'hir>,\n     owner_def_index: Option<DefIndex>,\n     hir_ids_seen: FxHashSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n-struct OuterVisitor<'a, 'hir: 'a> {\n+struct OuterVisitor<'a, 'hir> {\n     hir_map: &'a hir::map::Map<'hir>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n-impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n+impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n     fn new_inner_visitor(&self,\n                          hir_map: &'a hir::map::Map<'hir>)\n                          -> HirIdValidator<'a, 'hir> {\n@@ -51,7 +51,7 @@ impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n     }\n }\n \n-impl<'a, 'hir: 'a> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n+impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n     fn visit_item(&mut self, i: &'hir hir::Item) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_item(this, i));\n@@ -68,7 +68,7 @@ impl<'a, 'hir: 'a> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n     }\n }\n \n-impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n+impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n     #[cold]\n     #[inline(never)]\n     fn error(&self, f: impl FnOnce() -> String) {\n@@ -133,7 +133,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n     }\n }\n \n-impl<'a, 'hir: 'a> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n+impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n \n     fn nested_visit_map<'this>(&'this mut self)\n                                -> intravisit::NestedVisitorMap<'this, 'hir> {"}, {"sha": "e4aec59c1f64f229462d5e2e03b14e112951c26b", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -30,13 +30,13 @@ use super::*;\n use crate::ty::Const;\n use crate::ty::relate::{Relate, TypeRelation};\n \n-pub struct At<'a, 'tcx: 'a> {\n+pub struct At<'a, 'tcx> {\n     pub infcx: &'a InferCtxt<'a, 'tcx>,\n     pub cause: &'a ObligationCause<'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n-pub struct Trace<'a, 'tcx: 'a> {\n+pub struct Trace<'a, 'tcx> {\n     at: At<'a, 'tcx>,\n     a_is_expected: bool,\n     trace: TypeTrace<'tcx>,"}, {"sha": "383048b5fe72a196a165b5234c30968f8b6aade1", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -275,7 +275,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n     }\n }\n \n-struct Canonicalizer<'cx, 'tcx: 'cx> {\n+struct Canonicalizer<'cx, 'tcx> {\n     infcx: Option<&'cx InferCtxt<'cx, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     variables: SmallVec<[CanonicalVarInfo; 8]>,"}, {"sha": "e20b53455f49cf2ab6587743d1d77ccc62dfe560", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -44,7 +44,7 @@ use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Clone)]\n-pub struct CombineFields<'infcx, 'tcx: 'infcx> {\n+pub struct CombineFields<'infcx, 'tcx> {\n     pub infcx: &'infcx InferCtxt<'infcx, 'tcx>,\n     pub trace: TypeTrace<'tcx>,\n     pub cause: Option<ty::relate::Cause>,\n@@ -355,7 +355,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n     }\n }\n \n-struct Generalizer<'cx, 'tcx: 'cx> {\n+struct Generalizer<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n     /// The span, used when creating new type variables and things."}, {"sha": "5eebe9e78d3534e0c587df72c26647509b12124f", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -11,7 +11,7 @@ use crate::mir::interpret::ConstValue;\n use crate::infer::unify_key::replace_if_possible;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n-pub struct Equate<'combine, 'infcx: 'combine, 'tcx: 'infcx> {\n+pub struct Equate<'combine, 'infcx, 'tcx> {\n     fields: &'combine mut CombineFields<'infcx, 'tcx>,\n     a_is_expected: bool,\n }"}, {"sha": "1edb1c601bf1aa2d485e463777a384b563c0b799", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -30,7 +30,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     }\n }\n \n-pub struct NiceRegionError<'cx, 'tcx: 'cx> {\n+pub struct NiceRegionError<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     error: Option<RegionResolutionError<'tcx>>,\n     regions: Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)>,"}, {"sha": "7f4a817faf182fcadf6e6522181b6f993ccd58cf", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -41,7 +41,7 @@ use std::collections::hash_map::Entry;\n use super::InferCtxt;\n use super::unify_key::ToType;\n \n-pub struct TypeFreshener<'a, 'tcx: 'a> {\n+pub struct TypeFreshener<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     ty_freshen_count: u32,\n     const_freshen_count: u32,"}, {"sha": "658a9c1d88805934e8e73c151691a96f52104d73", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n }\n \n-pub struct InferenceFudger<'a, 'tcx: 'a> {\n+pub struct InferenceFudger<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     type_vars: (Range<TyVid>, Vec<TypeVariableOrigin>),\n     int_vars: Range<IntVid>,"}, {"sha": "550213167470d537dd77ad9a4360c98a9acb852f", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n-pub struct Glb<'combine, 'infcx: 'combine, 'tcx: 'infcx> {\n+pub struct Glb<'combine, 'infcx, 'tcx> {\n     fields: &'combine mut CombineFields<'infcx, 'tcx>,\n     a_is_expected: bool,\n }"}, {"sha": "a3372f50379179185f2ee137c3d20fb783c5c345", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -27,7 +27,7 @@ use crate::ty::TyVar;\n use crate::ty::{self, Ty};\n use crate::ty::relate::{RelateResult, TypeRelation};\n \n-pub trait LatticeDir<'f, 'tcx: 'f>: TypeRelation<'tcx> {\n+pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;\n \n     fn cause(&self) -> &ObligationCause<'tcx>;\n@@ -48,7 +48,7 @@ pub fn super_lattice_tys<'a, 'tcx, L>(\n ) -> RelateResult<'tcx, Ty<'tcx>>\n where\n     L: LatticeDir<'a, 'tcx>,\n-    'tcx: 'a,\n+    'tcx,\n {\n     debug!(\"{}.lattice_tys({:?}, {:?})\",\n            this.tag(),"}, {"sha": "ad481417d5e5fedba094a54a3a8ca1b156c69bea", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -107,7 +107,7 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(\n     }\n }\n \n-struct ConstraintGraph<'a, 'tcx: 'a> {\n+struct ConstraintGraph<'a, 'tcx> {\n     graph_name: String,\n     region_rels: &'a RegionRelations<'a, 'tcx>,\n     map: &'a BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,"}, {"sha": "2613f4c7c2ae3bc2d8c855d470a4af5c9cdc09d6", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -93,7 +93,7 @@ struct RegionAndOrigin<'tcx> {\n \n type RegionGraph<'tcx> = Graph<(), Constraint<'tcx>>;\n \n-struct LexicalResolver<'cx, 'tcx: 'cx> {\n+struct LexicalResolver<'cx, 'tcx> {\n     region_rels: &'cx RegionRelations<'cx, 'tcx>,\n     var_infos: VarInfos,\n     data: RegionConstraintData<'tcx>,"}, {"sha": "156288b9e6afd899c386edef4311cfa3c84727ec", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n-pub struct Lub<'combine, 'infcx: 'combine, 'tcx: 'infcx> {\n+pub struct Lub<'combine, 'infcx, 'tcx> {\n     fields: &'combine mut CombineFields<'infcx, 'tcx>,\n     a_is_expected: bool,\n }"}, {"sha": "fc46fe383c972f2ab41f6cc61c965fdd2685d225", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -585,7 +585,7 @@ impl<'tcx> InferOk<'tcx, ()> {\n }\n \n #[must_use = \"once you start a snapshot, you should always consume it\"]\n-pub struct CombinedSnapshot<'a, 'tcx: 'a> {\n+pub struct CombinedSnapshot<'a, 'tcx> {\n     projection_cache_snapshot: traits::ProjectionCacheSnapshot,\n     type_snapshot: type_variable::Snapshot<'tcx>,\n     const_snapshot: ut::Snapshot<ut::InPlace<ty::ConstVid<'tcx>>>,"}, {"sha": "21489965b1bf66d6f427d36086c03dee84abb11e", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -38,7 +38,7 @@ pub enum NormalizationStrategy {\n     Eager,\n }\n \n-pub struct TypeRelating<'me, 'tcx: 'me, D>\n+pub struct TypeRelating<'me, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n@@ -741,7 +741,7 @@ where\n /// binder depth, and finds late-bound regions targeting the\n /// `for<..`>.  For each of those, it creates an entry in\n /// `bound_region_scope`.\n-struct ScopeInstantiator<'me, 'tcx: 'me> {\n+struct ScopeInstantiator<'me, 'tcx> {\n     next_region: &'me mut dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n     // The debruijn index of the scope we are instantiating.\n     target_index: ty::DebruijnIndex,\n@@ -798,7 +798,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n /// scopes.\n ///\n /// [blog post]: https://is.gd/0hKvIr\n-struct TypeGeneralizer<'me, 'tcx: 'me, D>\n+struct TypeGeneralizer<'me, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx> + 'me,\n {"}, {"sha": "c164f5446fd8cb6e0486227fab9c5b1e0a0cd160", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -723,7 +723,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n     }\n }\n \n-struct Instantiator<'a, 'tcx: 'a> {\n+struct Instantiator<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     parent_def_id: DefId,\n     body_id: hir::HirId,"}, {"sha": "d555886128598ebb602ade1f90e52d861439b8ba", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -67,7 +67,7 @@ pub struct OutlivesEnvironment<'tcx> {\n /// because of implied bounds.\n pub type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n \n-impl<'a, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n+impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n         let mut env = OutlivesEnvironment {\n             param_env,"}, {"sha": "0ae4446ee63faf5044938b5a9d2bf554cbc54cad", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -226,7 +226,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n /// via a \"delegate\" of type `D` -- this is usually the `infcx`, which\n /// accrues them into the `region_obligations` code, but for NLL we\n /// use something else.\n-pub struct TypeOutlives<'cx, 'tcx: 'cx, D>\n+pub struct TypeOutlives<'cx, 'tcx, D>\n where\n     D: TypeOutlivesDelegate<'tcx>,\n {"}, {"sha": "f23e52fcfe499abccff64e67d39f89662df193f8", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use crate::util::captures::Captures;\n /// via a \"delegate\" of type `D` -- this is usually the `infcx`, which\n /// accrues them into the `region_obligations` code, but for NLL we\n /// use something else.\n-pub struct VerifyBoundCx<'cx, 'tcx: 'cx> {\n+pub struct VerifyBoundCx<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,"}, {"sha": "7e553d7666b22c8d10e450202b540b50aa974d61", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use crate::ty::fold::{TypeFolder, TypeVisitor};\n /// been unified with (similar to `shallow_resolve`, but deep). This is\n /// useful for printing messages etc but also required at various\n /// points for correctness.\n-pub struct OpportunisticVarResolver<'a, 'tcx: 'a> {\n+pub struct OpportunisticVarResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n@@ -50,7 +50,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n /// The opportunistic type and region resolver is similar to the\n /// opportunistic type resolver, but also opportunistically resolves\n /// regions. It is useful for canonicalization.\n-pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx: 'a> {\n+pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n@@ -101,7 +101,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx>\n /// type variables that don't yet have a value. The first unresolved type is stored.\n /// It does not construct the fully resolved type (which might\n /// involve some hashing and so forth).\n-pub struct UnresolvedTypeFinder<'a, 'tcx: 'a> {\n+pub struct UnresolvedTypeFinder<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n \n     /// Used to find the type parameter name and location for error reporting.\n@@ -171,7 +171,7 @@ where\n \n // N.B. This type is not public because the protocol around checking the\n // `err` field is not enforcable otherwise.\n-struct FullTypeResolver<'a, 'tcx: 'a> {\n+struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     err: Option<FixupError<'tcx>>,\n }"}, {"sha": "1452a6dee5bc1a032b4274024d6f5f7252982967", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -11,7 +11,7 @@ use crate::mir::interpret::ConstValue;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n-pub struct Sub<'combine, 'infcx: 'combine, 'tcx: 'infcx> {\n+pub struct Sub<'combine, 'infcx, 'tcx> {\n     fields: &'combine mut CombineFields<'infcx, 'tcx>,\n     a_is_expected: bool,\n }"}, {"sha": "7f09120bbdd5eac48618102eb20bafe5bb6f2509", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -507,7 +507,7 @@ impl LintStore {\n }\n \n /// Context for lint checking after type checking.\n-pub struct LateContext<'a, 'tcx: 'a> {\n+pub struct LateContext<'a, 'tcx> {\n     /// Type context we're checking in.\n     pub tcx: TyCtxt<'tcx>,\n \n@@ -533,7 +533,7 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     only_module: bool,\n }\n \n-pub struct LateContextAndPass<'a, 'tcx: 'a, T: LateLintPass<'a, 'tcx>> {\n+pub struct LateContextAndPass<'a, 'tcx, T: LateLintPass<'a, 'tcx>> {\n     context: LateContext<'a, 'tcx>,\n     pass: T,\n }"}, {"sha": "9e2038fa89ed047efd2ec480d0393f55f9220154", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -38,7 +38,7 @@ fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n     }\n }\n \n-struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n+struct MarkSymbolVisitor<'a, 'tcx> {\n     worklist: Vec<hir::HirId>,\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n@@ -351,7 +351,7 @@ fn has_allow_dead_code_or_lang_attr(\n //   or\n //   2) We are not sure to be live or not\n //     * Implementation of a trait method\n-struct LifeSeeder<'k, 'tcx: 'k> {\n+struct LifeSeeder<'k, 'tcx> {\n     worklist: Vec<hir::HirId>,\n     krate: &'k hir::Crate,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "d1867e8fa36b25d6c252795b1c7faddadf329b3a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -11,7 +11,7 @@ use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n \n-struct EntryContext<'a, 'tcx: 'a> {\n+struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n \n     map: &'a hir_map::Map<'tcx>,"}, {"sha": "1c3eead90fa99fe845f60a56a65968c92d48c37a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -229,7 +229,7 @@ impl OverloadedCallType {\n // The ExprUseVisitor type\n //\n // This is the code that actually walks the tree.\n-pub struct ExprUseVisitor<'a, 'tcx: 'a> {\n+pub struct ExprUseVisitor<'a, 'tcx> {\n     mc: mc::MemCategorizationContext<'a, 'tcx>,\n     delegate: &'a mut dyn Delegate<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "60e41f7eb0f7bdcc3cccfd86ac28107ff291bfc7", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{self, TyCtxt, Region};\n ///\n /// This stuff is a bit convoluted and should be refactored, but as we\n /// transition to NLL, it'll all go away anyhow.\n-pub struct RegionRelations<'a, 'tcx: 'a> {\n+pub struct RegionRelations<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n \n     /// The context used to fetch the region maps."}, {"sha": "36411f81f1a29f452e567f214b5546649ea470b8", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -352,7 +352,7 @@ impl IrMaps<'tcx> {\n     }\n }\n \n-fn visit_fn<'a, 'tcx: 'a>(\n+fn visit_fn<'a, 'tcx>(\n     ir: &mut IrMaps<'tcx>,\n     fk: FnKind<'tcx>,\n     decl: &'tcx hir::FnDecl,\n@@ -682,7 +682,7 @@ const ACC_READ: u32 = 1;\n const ACC_WRITE: u32 = 2;\n const ACC_USE: u32 = 4;\n \n-struct Liveness<'a, 'tcx: 'a> {\n+struct Liveness<'a, 'tcx> {\n     ir: &'a mut IrMaps<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     s: Specials,"}, {"sha": "593c5e73421685c1248a0d967c592f530f0dc46a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -65,7 +65,7 @@ fn method_might_be_inlined<'tcx>(\n }\n \n // Information needed while computing reachability.\n-struct ReachableContext<'a, 'tcx: 'a> {\n+struct ReachableContext<'a, 'tcx> {\n     // The type context.\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n@@ -334,13 +334,13 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n // items of non-exported traits (or maybe all local traits?) unless their respective\n // trait items are used from inlinable code through method call syntax or UFCS, or their\n // trait is a lang item.\n-struct CollectPrivateImplItemsVisitor<'a, 'tcx: 'a> {\n+struct CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     access_levels: &'a privacy::AccessLevels,\n     worklist: &'a mut Vec<hir::HirId>,\n }\n \n-impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\""}, {"sha": "f68e18c2bb85b64f6c21fd2b210d0047fc8b3ec0", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -217,7 +217,7 @@ impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n     object_lifetime_defaults\n });\n \n-struct LifetimeContext<'a, 'tcx: 'a> {\n+struct LifetimeContext<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n@@ -1160,7 +1160,7 @@ fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: ast::Name, orig: Original, sh\n // Adds all labels in `b` to `ctxt.labels_in_fn`, signalling a warning\n // if one of the label shadows a lifetime or another label.\n fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n-    struct GatherLabels<'a, 'tcx: 'a> {\n+    struct GatherLabels<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         scope: ScopeRef<'a>,\n         labels_in_fn: &'a mut Vec<ast::Ident>,"}, {"sha": "5a1e5212f8657958a3442c818d5b668ce72150b3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -105,15 +105,15 @@ impl_stable_hash_for!(struct self::Index<'tcx> {\n });\n \n // A private tree-walker for producing an Index.\n-struct Annotator<'a, 'tcx: 'a> {\n+struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n     parent_depr: Option<DeprecationEntry>,\n     in_trait_impl: bool,\n }\n \n-impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n+impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n     fn annotate<F>(&mut self, hir_id: HirId, attrs: &[Attribute],\n@@ -316,12 +316,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n }\n \n-struct MissingStabilityAnnotations<'a, 'tcx: 'a> {\n+struct MissingStabilityAnnotations<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     access_levels: &'a AccessLevels,\n }\n \n-impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n+impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n     fn check_missing_stability(&self, hir_id: HirId, span: Span, name: &str) {\n         let stab = self.tcx.stability().local_stability(hir_id);\n         let is_error = !self.tcx.sess.opts.test &&"}, {"sha": "b6cd24c291ac77860e1005407c1eaf9def733fe6", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -17,7 +17,7 @@ use crate::ty::TyCtxt;\n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n-struct Context<'a, 'tcx: 'a> {\n+struct Context<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     items: &'a mut lang_items::LanguageItems,\n }"}, {"sha": "9dfd8d959a3c4d29f3a3e2564f161ac8caffd3e3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -2104,7 +2104,7 @@ impl<'tcx> Place<'tcx> {\n /// N.B., this particular impl strategy is not the most obvious. It was\n /// chosen because it makes a measurable difference to NLL\n /// performance, as this code (`borrow_conflicts_with_place`) is somewhat hot.\n-pub enum Projections<'p, 'tcx: 'p> {\n+pub enum Projections<'p, 'tcx> {\n     Empty,\n \n     List {\n@@ -2143,7 +2143,7 @@ impl<'p, 'tcx> IntoIterator for &'p Projections<'p, 'tcx> {\n /// N.B., this is not a *true* Rust iterator -- the code above just\n /// manually invokes `next`. This is because we (sometimes) want to\n /// keep executing even after `None` has been returned.\n-pub struct ProjectionsIter<'p, 'tcx: 'p> {\n+pub struct ProjectionsIter<'p, 'tcx> {\n     pub value: &'p Projections<'p, 'tcx>,\n }\n "}, {"sha": "1416a5f0a6e9ffc713d1f2e5b11b7aa01dd3cf45", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -20,7 +20,7 @@ use super::*;\n ///\n /// A preorder traversal of this graph is either `A B D C` or `A C D B`\n #[derive(Clone)]\n-pub struct Preorder<'a, 'tcx: 'a> {\n+pub struct Preorder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n /// ```\n ///\n /// A Postorder traversal of this graph is `D B C A` or `D C B A`\n-pub struct Postorder<'a, 'tcx: 'a> {\n+pub struct Postorder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n@@ -251,7 +251,7 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n /// constructed as few times as possible. Use the `reset` method to be able\n /// to re-use the traversal\n #[derive(Clone)]\n-pub struct ReversePostorder<'a, 'tcx: 'a> {\n+pub struct ReversePostorder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     blocks: Vec<BasicBlock>,\n     idx: usize"}, {"sha": "4b65d3b9d8e3ac301516b4493036faba4e257df5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -1449,7 +1449,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         pred: ty::PolyTraitRef<'tcx>,\n     ) -> bool {\n-        struct ParamToVarFolder<'a, 'tcx: 'a> {\n+        struct ParamToVarFolder<'a, 'tcx> {\n             infcx: &'a InferCtxt<'a, 'tcx>,\n             var_map: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n         }"}, {"sha": "f106458c7676a93068c890ae8268848408df767c", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -224,7 +224,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n }\n \n-struct FulfillProcessor<'a, 'b: 'a, 'tcx: 'b> {\n+struct FulfillProcessor<'a, 'b, 'tcx> {\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     register_region_obligations: bool,\n }"}, {"sha": "04364cd63119348b690654907608c97558708c0e", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -285,7 +285,7 @@ where\n     }\n }\n \n-struct AssocTypeNormalizer<'a, 'b: 'a, 'tcx: 'b> {\n+struct AssocTypeNormalizer<'a, 'b, 'tcx> {\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "a45213b06d3a0ff09e12f705802b4557b7efb92e", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -73,7 +73,7 @@ pub struct NormalizationResult<'tcx> {\n     pub normalized_ty: Ty<'tcx>,\n }\n \n-struct QueryNormalizer<'cx, 'tcx: 'cx> {\n+struct QueryNormalizer<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     cause: &'cx ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "c698b0c293314b4f7de85b03119347d6db3a1a44", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -50,7 +50,7 @@ use std::iter;\n use std::rc::Rc;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-pub struct SelectionContext<'cx, 'tcx: 'cx> {\n+pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n     /// Freshener used specifically for entries on the obligation\n@@ -144,7 +144,7 @@ impl IntercrateAmbiguityCause {\n }\n \n // A stack that walks back up the stack frame.\n-struct TraitObligationStack<'prev, 'tcx: 'prev> {\n+struct TraitObligationStack<'prev, 'tcx> {\n     obligation: &'prev TraitObligation<'tcx>,\n \n     /// Trait ref from `obligation` but \"freshened\" with the\n@@ -697,7 +697,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError>\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>>,\n-        'tcx: 'a,\n+        'tcx,\n     {\n         let mut result = EvaluatedToOk;\n         for obligation in predicates {\n@@ -3789,7 +3789,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         matcher.relate(previous, current).is_ok()\n     }\n \n-    fn push_stack<'o, 's: 'o>(\n+    fn push_stack<'o, 's>(\n         &mut self,\n         previous_stack: TraitObligationStackList<'s, 'tcx>,\n         obligation: &'o TraitObligation<'tcx>,\n@@ -4252,7 +4252,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n }\n \n #[derive(Copy, Clone)]\n-struct TraitObligationStackList<'o, 'tcx: 'o> {\n+struct TraitObligationStackList<'o, 'tcx> {\n     cache: &'o ProvisionalEvaluationCache<'tcx>,\n     head: Option<&'o TraitObligationStack<'o, 'tcx>>,\n }"}, {"sha": "5781f40b93ad313c163e8cf5dff305634a09fe95", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -511,7 +511,7 @@ fn decode_tagged<'a, 'tcx, D, T, V>(decoder: &mut D,\n     where T: Decodable + Eq + ::std::fmt::Debug,\n           V: Decodable,\n           D: DecoderWithPosition,\n-          'tcx: 'a,\n+          'tcx,\n {\n     let start_pos = decoder.position();\n "}, {"sha": "0f158d2982a20dc8d2d87772e6cd560fd3782ba3", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -89,7 +89,7 @@ macro_rules! profq_query_msg {\n \n /// A type representing the responsibility to execute the job in the `job` field.\n /// This will poison the relevant query if dropped.\n-pub(super) struct JobOwner<'a, 'tcx: 'a, Q: QueryDescription<'tcx> + 'a> {\n+pub(super) struct JobOwner<'a, 'tcx, Q: QueryDescription<'tcx> + 'a> {\n     cache: &'a Lock<QueryCache<'tcx, Q>>,\n     key: Q::Key,\n     job: Lrc<QueryJob<'tcx>>,\n@@ -230,7 +230,7 @@ pub struct CycleError<'tcx> {\n }\n \n /// The result of `try_get_lock`\n-pub(super) enum TryGetJob<'a, 'tcx: 'a, D: QueryDescription<'tcx> + 'a> {\n+pub(super) enum TryGetJob<'a, 'tcx, D: QueryDescription<'tcx> + 'a> {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n     NotYetStarted(JobOwner<'a, 'tcx, D>),\n "}, {"sha": "1979b4317a7ae9281f70303c8aa816a0d1c35ffc", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -101,7 +101,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     wf.normalize()\n }\n \n-struct WfPredicates<'a, 'tcx: 'a> {\n+struct WfPredicates<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,"}, {"sha": "ace44421d3757e980dd5e12e745468ad152b4fc0", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -78,7 +78,7 @@ fn owned_ptr_base_path_rc<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Rc<LoanPath<'\n     }\n }\n \n-struct CheckLoanCtxt<'a, 'tcx: 'a> {\n+struct CheckLoanCtxt<'a, 'tcx> {\n     bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     dfcx_loans: &'a LoanDataFlow<'tcx>,\n     move_data: &'a move_data::FlowedMoveData<'tcx>,"}, {"sha": "cc1f7232e04c13d4a8cc64768e5d350d984dfe06", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::*;\n use rustc::hir::Node;\n use log::debug;\n \n-struct GatherMoveInfo<'c, 'tcx: 'c> {\n+struct GatherMoveInfo<'c, 'tcx> {\n     id: hir::ItemLocalId,\n     kind: MoveKind,\n     cmt: &'c mc::cmt_<'tcx>,\n@@ -91,7 +91,7 @@ pub fn gather_move_from_expr<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n-pub fn gather_move_from_pat<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n+pub fn gather_move_from_pat<'a, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                               move_data: &MoveData<'tcx>,\n                                               move_error_collector: &mut MoveErrorCollector<'tcx>,\n                                               move_pat: &hir::Pat,\n@@ -121,7 +121,7 @@ pub fn gather_move_from_pat<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n-fn gather_move<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n+fn gather_move<'a, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                          move_data: &MoveData<'tcx>,\n                          move_error_collector: &mut MoveErrorCollector<'tcx>,\n                          move_info: GatherMoveInfo<'c, 'tcx>) {"}, {"sha": "3122a6060fbde52216b6fa69793fd17ced4cbf55", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -38,7 +38,7 @@ pub fn guarantee_lifetime<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n // Private\n \n-struct GuaranteeLifetimeContext<'a, 'tcx: 'a> {\n+struct GuaranteeLifetimeContext<'a, 'tcx> {\n     bccx: &'a BorrowckCtxt<'a, 'tcx>,\n \n     // the scope of the function body for the enclosing item"}, {"sha": "887011d3476d3a1bc0e13a156724bd7556a48b9d", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -56,7 +56,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     (all_loans, move_data)\n }\n \n-struct GatherLoanCtxt<'a, 'tcx: 'a> {\n+struct GatherLoanCtxt<'a, 'tcx> {\n     bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     move_data: move_data::MoveData<'tcx>,\n     move_error_collector: move_error::MoveErrorCollector<'tcx>,"}, {"sha": "371e6c55a7389afd6ab90457de8994d8fd32164f", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -37,7 +37,7 @@ pub fn compute_restrictions<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n // Private\n \n-struct RestrictionsContext<'a, 'tcx: 'a> {\n+struct RestrictionsContext<'a, 'tcx> {\n     bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     span: Span,\n     loan_region: ty::Region<'tcx>,"}, {"sha": "025d5adc2b3eaa74058d4ab6b4624dbc848e82ce", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -552,7 +552,7 @@ pub enum bckerr_code<'tcx> {\n // Combination of an error code and the categorization of the expression\n // that caused it\n #[derive(Debug, PartialEq)]\n-pub struct BckError<'c, 'tcx: 'c> {\n+pub struct BckError<'c, 'tcx> {\n     span: Span,\n     cause: AliasableViolationKind,\n     cmt: &'c mc::cmt_<'tcx>,"}, {"sha": "7a8a23ca76afc50834d4543faea434af4a4457d6", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -30,7 +30,7 @@ impl Variant {\n     }\n }\n \n-pub struct DataflowLabeller<'a, 'tcx: 'a> {\n+pub struct DataflowLabeller<'a, 'tcx> {\n     pub inner: cfg_dot::LabelledCFG<'a, 'tcx>,\n     pub variants: Vec<Variant>,\n     pub borrowck_ctxt: &'a BorrowckCtxt<'a, 'tcx>,"}, {"sha": "e06b4d8b3063e8cd7a3666853be08d171dd0421f", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -27,7 +27,7 @@ use std::iter::TrustedLen;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n-pub struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n+pub struct Builder<'a, 'll, 'tcx> {\n     pub llbuilder: &'ll mut llvm::Builder<'ll>,\n     pub cx: &'a CodegenCx<'ll, 'tcx>,\n }"}, {"sha": "6a61b180de430ff844063b2a9747218b153796bc", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -34,7 +34,7 @@ use crate::abi::Abi;\n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n /// All other LLVM data structures in the `CodegenCx` are tied to that `llvm::Context`.\n-pub struct CodegenCx<'ll, 'tcx: 'll> {\n+pub struct CodegenCx<'ll, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub check_overflow: bool,\n     pub use_dll_storage_attrs: bool,"}, {"sha": "a8a998a4d956459df66c0ee09cbe4b43785fbebc", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -125,7 +125,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit<'a, 'tcx: 'a>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+    fn compile_codegen_unit<'a, 'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n         base::compile_codegen_unit(tcx, cgu_name);\n     }\n     fn target_machine_factory("}, {"sha": "c8bb2e7ee9965ba5c1eb9475de66c1311c5af991", "filename": "src/librustc_codegen_ssa/README.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -29,11 +29,11 @@ While the LLVM-specific code will be left in `rustc_codegen_llvm`, all the new t\n The two most important structures for the LLVM codegen are `CodegenCx` and `Builder`. They are parametrized by multiple lifetime parameters and the type for `Value`.\n \n ```rust\n-struct CodegenCx<'ll, 'tcx: 'll> {\n+struct CodegenCx<'ll, 'tcx> {\n   /* ... */\n }\n \n-struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n+struct Builder<'a, 'll, 'tcx> {\n   cx: &'a CodegenCx<'ll, 'tcx>,\n   /* ... */\n }\n@@ -49,7 +49,7 @@ The code in `rustc_codegen_llvm` has to deal with multiple explicit lifetime par\n Although there are already many lifetime parameters in the code, making it generic uncovered situations where the borrow-checker was passing only due to the special nature of the LLVM objects manipulated (they are extern pointers). For instance, a additional lifetime parameter had to be added to `LocalAnalyser` in `analyse.rs`, leading to the definition:\n \n ```rust\n-struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a> {\n+struct LocalAnalyzer<'mir, 'a, 'tcx> {\n   /* ... */\n }\n ```\n@@ -61,7 +61,7 @@ However, the two most important structures `CodegenCx` and `Builder` are not def\n Because they have to be defined by the backend, `CodegenCx` and `Builder` will be the structures implementing all the traits defining the backend's interface. These traits are defined in the folder `rustc_codegen_ssa/traits` and all the backend-agnostic code is parametrized by them. For instance, let us explain how a function in `base.rs` is parametrized:\n \n ```rust\n-pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn codegen_instance<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     instance: Instance<'tcx>\n ) {\n@@ -74,7 +74,7 @@ In this signature, we have the two lifetime parameters explained earlier and the\n On the trait side, here is an example with part of the definition of `BuilderMethods` in `traits/builder.rs`:\n \n ```rust\n-pub trait BuilderMethods<'a, 'tcx: 'a>:\n+pub trait BuilderMethods<'a, 'tcx>:\n     HasCodegen<'tcx>\n     + DebugInfoBuilderMethods<'tcx>\n     + ArgTypeMethods<'tcx>"}, {"sha": "a06f324d3895dd46fd984709a62aee056391d9d7", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -88,7 +88,7 @@ pub fn bin_op_to_fcmp_predicate(op: hir::BinOpKind) -> RealPredicate {\n     }\n }\n \n-pub fn compare_simd_types<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn compare_simd_types<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     lhs: Bx::Value,\n     rhs: Bx::Value,\n@@ -152,7 +152,7 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n }\n \n /// Coerce `src` to `dst_ty`. `src_ty` must be a thin pointer.\n-pub fn unsize_thin_ptr<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn unsize_thin_ptr<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     src: Bx::Value,\n     src_ty: Ty<'tcx>,\n@@ -207,7 +207,7 @@ pub fn unsize_thin_ptr<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n /// Coerce `src`, which is a reference to a value of type `src_ty`,\n /// to a value of type `dst_ty` and store the result in `dst`\n-pub fn coerce_unsized_into<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn coerce_unsized_into<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     src: PlaceRef<'tcx, Bx::Value>,\n     dst: PlaceRef<'tcx, Bx::Value>\n@@ -266,7 +266,7 @@ pub fn coerce_unsized_into<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-pub fn cast_shift_expr_rhs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn cast_shift_expr_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     op: hir::BinOpKind,\n     lhs: Bx::Value,\n@@ -275,7 +275,7 @@ pub fn cast_shift_expr_rhs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cast_shift_rhs(bx, op, lhs, rhs)\n }\n \n-fn cast_shift_rhs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn cast_shift_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     op: hir::BinOpKind,\n     lhs: Bx::Value,\n@@ -316,7 +316,7 @@ pub fn wants_msvc_seh(sess: &Session) -> bool {\n     sess.target.target.options.is_like_msvc\n }\n \n-pub fn from_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn from_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value\n ) -> Bx::Value {\n@@ -327,7 +327,7 @@ pub fn from_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-pub fn to_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn to_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value,\n     layout: layout::TyLayout<'_>,\n@@ -338,7 +338,7 @@ pub fn to_immediate<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     val\n }\n \n-pub fn to_immediate_scalar<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn to_immediate_scalar<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value,\n     scalar: &layout::Scalar,\n@@ -349,7 +349,7 @@ pub fn to_immediate_scalar<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     val\n }\n \n-pub fn memcpy_ty<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn memcpy_ty<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     dst: Bx::Value,\n     dst_align: Align,\n@@ -366,7 +366,7 @@ pub fn memcpy_ty<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     bx.memcpy(dst, dst_align, src, src_align, bx.cx().const_usize(size), flags);\n }\n \n-pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn codegen_instance<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     instance: Instance<'tcx>,\n ) {\n@@ -387,7 +387,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n /// Creates the `main` function which will initialize the rust runtime and call\n /// users main function.\n-pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx\n ) {\n     let (main_def_id, span) = match cx.tcx().entry_fn(LOCAL_CRATE) {\n@@ -412,7 +412,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         None => {}    // Do nothing.\n     }\n \n-    fn create_entry_fn<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    fn create_entry_fn<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,\n         sp: Span,\n         rust_main: Bx::Value,"}, {"sha": "d17edf2ec0a2b0d9ab105b77fbc58caddb50bcd8", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -137,7 +137,7 @@ pub fn langcall(tcx: TyCtxt<'_>, span: Option<Span>, msg: &str, li: LangItem) ->\n // all shifts). For 32- and 64-bit types, this matches the semantics\n // of Java. (See related discussion on #1877 and #10183.)\n \n-pub fn build_unchecked_lshift<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn build_unchecked_lshift<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     lhs: Bx::Value,\n     rhs: Bx::Value\n@@ -148,7 +148,7 @@ pub fn build_unchecked_lshift<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     bx.shl(lhs, rhs)\n }\n \n-pub fn build_unchecked_rshift<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn build_unchecked_rshift<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     lhs_t: Ty<'tcx>,\n     lhs: Bx::Value,\n@@ -165,7 +165,7 @@ pub fn build_unchecked_rshift<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-fn shift_mask_rhs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn shift_mask_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     rhs: Bx::Value\n ) -> Bx::Value {\n@@ -174,7 +174,7 @@ fn shift_mask_rhs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     bx.and(rhs, shift_val)\n }\n \n-pub fn shift_mask_val<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn shift_mask_val<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     llty: Bx::Type,\n     mask_llty: Bx::Type,"}, {"sha": "294e2e021d2af6520f0d46a44289f2682e669ba0", "filename": "src/librustc_codegen_ssa/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fglue.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -7,7 +7,7 @@ use crate::common::IntPredicate;\n use crate::meth;\n use crate::traits::*;\n \n-pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     t: Ty<'tcx>,\n     info: Option<Bx::Value>"}, {"sha": "7fe9f5f25130a90d2b46270380326f6f37226c0b", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ pub const DESTRUCTOR: VirtualIndex = VirtualIndex(0);\n pub const SIZE: VirtualIndex = VirtualIndex(1);\n pub const ALIGN: VirtualIndex = VirtualIndex(2);\n \n-impl<'a, 'tcx: 'a> VirtualIndex {\n+impl<'a, 'tcx> VirtualIndex {\n     pub fn from_index(index: usize) -> Self {\n         VirtualIndex(index as u64 + 3)\n     }"}, {"sha": "3d41eddb8035ebd7fcd68163a8920fc32946d1a3", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use super::FunctionCx;\n use crate::traits::*;\n \n-pub fn non_ssa_locals<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &FunctionCx<'a, 'tcx, Bx>\n ) -> BitSet<mir::Local> {\n     let mir = fx.mir;\n@@ -43,7 +43,7 @@ pub fn non_ssa_locals<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     analyzer.non_ssa_locals\n }\n \n-struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n+struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     fx: &'mir FunctionCx<'a, 'tcx, Bx>,\n     dominators: Dominators<mir::BasicBlock>,\n     non_ssa_locals: BitSet<mir::Local>,\n@@ -94,7 +94,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     }\n }\n \n-impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n+impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n     for LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn visit_assign(&mut self,\n                     place: &mir::Place<'tcx>,"}, {"sha": "b4acc4005464ca80afeb3ab2c8fd9e3c48288305", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n }\n \n /// Codegen implementations for some terminator variants.\n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     /// Generates code for a `Resume` terminator.\n     fn codegen_resume_terminator<'b>(\n         &mut self,\n@@ -788,7 +788,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_block(\n         &mut self,\n         bb: mir::BasicBlock,"}, {"sha": "d6951b923bf7d3c4ef4090e36fd707958b42a7d1", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -8,7 +8,7 @@ use crate::traits::*;\n \n use super::FunctionCx;\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn eval_mir_constant(\n         &mut self,\n         constant: &mir::Constant<'tcx>,"}, {"sha": "78af71b5a4982a443d84dfbd6a0dd57d7983c61a", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -23,7 +23,7 @@ use rustc::mir::traversal;\n use self::operand::{OperandRef, OperandValue};\n \n /// Master context for codegenning from MIR.\n-pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n+pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n     mir: &'a mir::Body<'tcx>,\n@@ -87,7 +87,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n     va_list_ref: Option<PlaceRef<'tcx, Bx::Value>>,\n }\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {\n@@ -167,7 +167,7 @@ enum LocalRef<'tcx, V> {\n     Operand(Option<OperandRef<'tcx, V>>),\n }\n \n-impl<'a, 'tcx: 'a, V: CodegenObject> LocalRef<'tcx, V> {\n+impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n     fn new_operand<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n         layout: TyLayout<'tcx>,\n@@ -185,7 +185,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> LocalRef<'tcx, V> {\n \n ///////////////////////////////////////////////////////////////////////////\n \n-pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     llfn: Bx::Value,\n     mir: &'a Body<'tcx>,\n@@ -351,7 +351,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     mir: &'a Body<'tcx>,\n     bx: &mut Bx,\n     cleanup_kinds: &IndexVec<mir::BasicBlock, CleanupKind>,\n@@ -420,7 +420,7 @@ fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n /// Produces, for each argument, a `Value` pointing at the\n /// argument's value. As arguments are places, these are always\n /// indirect.\n-fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     fx: &FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,"}, {"sha": "3305dfe1ffbb876da072f98aefd6d1b4af4e44fa", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -53,7 +53,7 @@ impl<V: CodegenObject> fmt::Debug for OperandRef<'tcx, V> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n+impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n     pub fn new_zst<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n         layout: TyLayout<'tcx>\n@@ -266,7 +266,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, V: CodegenObject> OperandValue<V> {\n+impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n     pub fn store<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         self,\n         bx: &mut Bx,\n@@ -376,7 +376,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandValue<V> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn maybe_codegen_consume_direct(\n         &mut self,\n         bx: &mut Bx,"}, {"sha": "81b17d0bee804c8d55bb344164f286685a6fbba7", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -26,7 +26,7 @@ pub struct PlaceRef<'tcx, V> {\n     pub align: Align,\n }\n \n-impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n+impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(\n         llval: V,\n         layout: TyLayout<'tcx>,\n@@ -98,7 +98,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n \n }\n \n-impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n+impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     /// Access a field, at a point when the value's case is known.\n     pub fn project_field<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         self, bx: &mut Bx,\n@@ -386,7 +386,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_place(\n         &mut self,\n         bx: &mut Bx,"}, {"sha": "4a1971e3e2ee01c99816de888027585ce4269c12", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -18,7 +18,7 @@ use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_rvalue(\n         &mut self,\n         mut bx: Bx,\n@@ -687,7 +687,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>) -> bool {\n         match *rvalue {\n             mir::Rvalue::Ref(..) |\n@@ -712,7 +712,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-fn cast_int_to_float<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn cast_int_to_float<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     signed: bool,\n     x: Bx::Value,\n@@ -746,7 +746,7 @@ fn cast_int_to_float<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-fn cast_float_to_int<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     signed: bool,\n     x: Bx::Value,"}, {"sha": "750b2f5b1a50f13159d30c11512172ecee5b9cda", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -6,7 +6,7 @@ use super::LocalRef;\n use super::OperandValue;\n use crate::traits::*;\n \n-impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_statement(\n         &mut self,\n         mut bx: Bx,"}, {"sha": "57bd2f36dd7f5e8f1faf3a323f0ec97b3f1cd2d5", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -6,7 +6,7 @@ use crate::traits::*;\n \n use rustc::mir::mono::MonoItem;\n \n-pub trait MonoItemExt<'a, 'tcx: 'a> {\n+pub trait MonoItemExt<'a, 'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx);\n     fn predefine<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n@@ -17,7 +17,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a> {\n     fn to_raw_string(&self) -> String;\n }\n \n-impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n+impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n                self.to_string(cx.tcx(), true),"}, {"sha": "f2edff2faacee10c117ce7675f16dca8afd3fcdc", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -44,7 +44,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit<'a, 'tcx: 'a>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n+    fn compile_codegen_unit<'a, 'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "1c80e614db8d5b710f519bc2261dcc4c69e625bd", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -22,7 +22,7 @@ pub enum OverflowOp {\n     Mul,\n }\n \n-pub trait BuilderMethods<'a, 'tcx: 'a>:\n+pub trait BuilderMethods<'a, 'tcx>:\n     HasCodegen<'tcx>\n     + DebugInfoBuilderMethods<'tcx>\n     + ArgTypeMethods<'tcx>"}, {"sha": "eb89b5c1e63709e14483fb0753393ed407c05136", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -453,7 +453,7 @@ impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n     }\n }\n \n-struct TypedAnnotation<'a, 'tcx: 'a> {\n+struct TypedAnnotation<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: Cell<&'a ty::TypeckTables<'tcx>>,\n }"}, {"sha": "c6f361855c7d115da6596652e6f937fc45302cae", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -1088,7 +1088,7 @@ impl TypeAliasBounds {\n \n         // We use a HIR visitor to walk the type.\n         use rustc::hir::intravisit::{self, Visitor};\n-        struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n+        struct WalkAssocTypes<'a, 'db> where 'db {\n             err: &'a mut DiagnosticBuilder<'db>\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {"}, {"sha": "2b99e2d91445e33e79974c72645df00aedd3bd08", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -505,7 +505,7 @@ declare_lint! {\n \n declare_lint_pass!(ImproperCTypes => [IMPROPER_CTYPES]);\n \n-struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n+struct ImproperCTypesVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n "}, {"sha": "ff523c7b68a907364f4103ace896ce737a741eb4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -295,7 +295,7 @@ impl<'a> CrateLoader<'a> {\n         path_kind: PathKind,\n     ) -> Option<(LoadResult, Option<Library>)>\n     where\n-        'a: 'b\n+        'a\n     {\n         // Use a new locator Context so trying to load a proc macro doesn't affect the error\n         // message we emit"}, {"sha": "98cdeb699687358225abe62d7cf9a9ccf12cf08e", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -35,7 +35,7 @@ use syntax::ext::hygiene::Mark;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n use log::debug;\n \n-pub struct DecodeContext<'a, 'tcx: 'a> {\n+pub struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n     sess: Option<&'a Session>,\n@@ -128,15 +128,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx: 'a, T: Decodable> Lazy<T> {\n+impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> T {\n         let mut dcx = meta.decoder(self.position);\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n-impl<'a, 'tcx: 'a, T: Decodable> LazySeq<T> {\n+impl<'a, 'tcx, T: Decodable> LazySeq<T> {\n     pub fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         meta: M,"}, {"sha": "40d8173ce400a8bc8653365e25a7461b8aed07c8", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> BorrowSet<'tcx> {\n     }\n }\n \n-struct GatherBorrows<'a, 'tcx: 'a> {\n+struct GatherBorrows<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,"}, {"sha": "9a9310fbe05f514ee03f91388a71175584352f2f", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -22,7 +22,7 @@ use std::fmt;\n use std::rc::Rc;\n \n // (forced to be `pub` due to its use as an associated type below.)\n-crate struct Flows<'b, 'tcx: 'b> {\n+crate struct Flows<'b, 'tcx> {\n     borrows: FlowAtLocation<'tcx, Borrows<'b, 'tcx>>,\n     pub uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'tcx>>,\n     pub ever_inits: FlowAtLocation<'tcx, EverInitializedPlaces<'b, 'tcx>>,"}, {"sha": "a21d585a13ca30c5c4619a3836ce19a5844d6a50", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -423,7 +423,7 @@ fn downgrade_if_error(diag: &mut Diagnostic) {\n     }\n }\n \n-pub struct MirBorrowckCtxt<'cx, 'tcx: 'cx> {\n+pub struct MirBorrowckCtxt<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n     mir_def_id: DefId,\n@@ -891,7 +891,7 @@ enum InitializationRequiringAction {\n     PartialAssignment,\n }\n \n-struct RootPlace<'d, 'tcx: 'd> {\n+struct RootPlace<'d, 'tcx> {\n     place: &'d Place<'tcx>,\n     is_local_mutation_allowed: LocalMutationIsAllowed,\n }\n@@ -1693,7 +1693,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn move_path_closest_to<'a>(\n         &mut self,\n         place: &'a Place<'tcx>,\n-    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> where 'cx: 'a {\n+    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> where 'cx {\n         let mut last_prefix = place;\n         for prefix in self.prefixes(place, PrefixSet::All) {\n             if let Some(mpi) = self.move_path_for_place(prefix) {"}, {"sha": "058cdec5cea6950ee12170b4e4887e12be5a858f", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -35,7 +35,7 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n }\n \n /// 'cg = the duration of the constraint generation process itself.\n-struct ConstraintGeneration<'cg, 'cx: 'cg, 'tcx: 'cx> {\n+struct ConstraintGeneration<'cg, 'cx, 'tcx> {\n     infcx: &'cg InferCtxt<'cx, 'tcx>,\n     all_facts: &'cg mut Option<AllFacts>,\n     location_table: &'cg LocationTable,"}, {"sha": "7ab069260f9402cb27476f21185d2d443f17694e", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -27,7 +27,7 @@ crate fn find<'tcx>(\n     uf.find()\n }\n \n-struct UseFinder<'cx, 'tcx: 'cx> {\n+struct UseFinder<'cx, 'tcx> {\n     body: &'cx Body<'tcx>,\n     regioncx: &'cx Rc<RegionInferenceContext<'tcx>>,\n     tcx: TyCtxt<'tcx>,\n@@ -99,7 +99,7 @@ impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n     }\n }\n \n-struct DefUseVisitor<'cx, 'tcx: 'cx> {\n+struct DefUseVisitor<'cx, 'tcx> {\n     body: &'cx Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     region_vid: RegionVid,"}, {"sha": "c45c28c61465f541373c2f0a8581cf40d11d097d", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -43,7 +43,7 @@ pub(super) fn generate_invalidates<'tcx>(\n     }\n }\n \n-struct InvalidationGenerator<'cx, 'tcx: 'cx> {\n+struct InvalidationGenerator<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     all_facts: &'cx mut AllFacts,\n     location_table: &'cx LocationTable,"}, {"sha": "0cf8a0d16f622ba317dc68fea2c76e8b1b24cf46", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -29,7 +29,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n }\n \n-struct RawConstraints<'a, 'tcx: 'a> {\n+struct RawConstraints<'a, 'tcx> {\n     regioncx: &'a RegionInferenceContext<'tcx>,\n }\n \n@@ -78,7 +78,7 @@ impl<'a, 'this, 'tcx> dot::GraphWalk<'this> for RawConstraints<'a, 'tcx> {\n     }\n }\n \n-struct SccConstraints<'a, 'tcx: 'a> {\n+struct SccConstraints<'a, 'tcx> {\n     regioncx: &'a RegionInferenceContext<'tcx>,\n     nodes_per_scc: IndexVec<ConstraintSccIndex, Vec<RegionVid>>,\n }"}, {"sha": "77a4d2699fff72eff1cb1d2a16ca26c969605e1b", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, TyCtxt};\n use syntax_pos::DUMMY_SP;\n \n-crate struct ConstraintConversion<'a, 'tcx: 'a> {\n+crate struct ConstraintConversion<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,"}, {"sha": "1bb3acc28f0c8d97628fb2b6fa70529a43449062", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -219,7 +219,7 @@ impl UniversalRegionRelations<'tcx> {\n     }\n }\n \n-struct UniversalRegionRelationsBuilder<'this, 'tcx: 'this> {\n+struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     infcx: &'this InferCtxt<'this, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     universal_regions: Rc<UniversalRegions<'tcx>>,"}, {"sha": "2d65eb021d3883f84fe6576e8454b754fda801a0", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -60,9 +60,9 @@ pub(super) fn trace(\n /// Contextual state for the type-liveness generator.\n struct LivenessContext<'me, 'typeck, 'flow, 'tcx>\n where\n-    'typeck: 'me,\n-    'flow: 'me,\n-    'tcx: 'typeck + 'flow,\n+    'typeck,\n+    'flow,\n+    'tcx,\n {\n     /// Current type-checker, giving us our inference context etc.\n     typeck: &'me mut TypeChecker<'typeck, 'tcx>,\n@@ -98,9 +98,9 @@ struct DropData<'tcx> {\n \n struct LivenessResults<'me, 'typeck, 'flow, 'tcx>\n where\n-    'typeck: 'me,\n-    'flow: 'me,\n-    'tcx: 'typeck + 'flow,\n+    'typeck,\n+    'flow,\n+    'tcx,\n {\n     cx: LivenessContext<'me, 'typeck, 'flow, 'tcx>,\n "}, {"sha": "ac5efa4640661034cd15c1d0441b5f2a3b1aa1a8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -251,7 +251,7 @@ enum FieldAccessError {\n /// The sanitize_XYZ methods here take an MIR object and compute its\n /// type, calling `span_mirbug` and returning an error type if there\n /// is a problem.\n-struct TypeVerifier<'a, 'b: 'a, 'tcx: 'b> {\n+struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n     last_span: Span,\n@@ -830,7 +830,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n /// constraints needed for it to be valid and well-typed. Along the\n /// way, it accrues region constraints -- these can later be used by\n /// NLL region checking.\n-struct TypeChecker<'a, 'tcx: 'a> {\n+struct TypeChecker<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     last_span: Span,\n@@ -845,7 +845,7 @@ struct TypeChecker<'a, 'tcx: 'a> {\n     universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n }\n \n-struct BorrowCheckContext<'a, 'tcx: 'a> {\n+struct BorrowCheckContext<'a, 'tcx> {\n     universal_regions: &'a UniversalRegions<'tcx>,\n     location_table: &'a LocationTable,\n     all_facts: &'a mut Option<AllFacts>,"}, {"sha": "2549aa4fbff93ed1175eadfb1383e6b2f2a6255b", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -34,7 +34,7 @@ pub(super) fn relate_types<'tcx>(\n     Ok(())\n }\n \n-struct NllTypeRelatingDelegate<'me, 'bccx: 'me, 'tcx: 'bccx> {\n+struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n "}, {"sha": "fa3c7b9613e19906274cfc55df7f6f8ab2d875bc", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -363,7 +363,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     }\n }\n \n-struct UniversalRegionsBuilder<'cx, 'tcx: 'cx> {\n+struct UniversalRegionsBuilder<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     mir_def_id: DefId,\n     mir_hir_id: HirId,"}, {"sha": "0cc1dfd4def0f07e7886c095e9bd9d5bbd3cb62f", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> IsPrefixOf<'tcx> for Place<'tcx> {\n     }\n }\n \n-pub(super) struct Prefixes<'cx, 'tcx: 'cx> {\n+pub(super) struct Prefixes<'cx, 'tcx> {\n     body: &'cx Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,"}, {"sha": "9c5569011df4fcdd0ccfe4e2a829cbacfaf1cafb", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -46,7 +46,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n /// MIR visitor for collecting used mutable variables.\n /// The 'visit lifetime represents the duration of the MIR walk.\n-struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'tcx: 'cx> {\n+struct GatherUsedMutsVisitor<'visit, 'cx, 'tcx> {\n     temporary_used_locals: FxHashSet<Local>,\n     never_initialized_mut_locals: &'visit mut FxHashSet<Local>,\n     mbcx: &'visit mut MirBorrowckCtxt<'cx, 'tcx>,"}, {"sha": "54f935231827a9444192557a2c92a2aa7ae76a8e", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -661,7 +661,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n }\n \n #[derive(Debug)]\n-pub struct Candidate<'pat, 'tcx: 'pat> {\n+pub struct Candidate<'pat, 'tcx> {\n     // span of the original pattern that gave rise to this candidate\n     span: Span,\n \n@@ -705,7 +705,7 @@ struct Ascription<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-pub struct MatchPair<'pat, 'tcx: 'pat> {\n+pub struct MatchPair<'pat, 'tcx> {\n     // this place...\n     place: Place<'tcx>,\n \n@@ -1691,7 +1691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         bindings: impl IntoIterator<Item = &'b Binding<'tcx>>,\n-    ) where 'tcx: 'b {\n+    ) where 'tcx {\n         debug!(\"bind_matched_candidate_for_arm_body(block={:?})\", block);\n \n         let re_erased = self.hir.tcx().lifetimes.re_erased;"}, {"sha": "001f377c0ee31d666278187687d8ff95734b0382", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -241,7 +241,7 @@ impl BlockFrame {\n #[derive(Debug)]\n struct BlockContext(Vec<BlockFrame>);\n \n-struct Builder<'a, 'tcx: 'a> {\n+struct Builder<'a, 'tcx> {\n     hir: Cx<'a, 'tcx>,\n     cfg: CFG<'tcx>,\n "}, {"sha": "069ce3a78c5f9f0b4f451939beb5539e80047307", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -11,11 +11,11 @@ use crate::dataflow::BitDenotation;\n /// This is used to compute which locals are live during a yield expression for\n /// immovable generators.\n #[derive(Copy, Clone)]\n-pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n+pub struct HaveBeenBorrowedLocals<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n+impl<'a, 'tcx> HaveBeenBorrowedLocals<'a, 'tcx> {\n     pub fn new(body: &'a Body<'tcx>)\n                -> Self {\n         HaveBeenBorrowedLocals { body }\n@@ -97,7 +97,7 @@ impl<'a, 'tcx> InitialFlow for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n }\n \n-struct BorrowedLocalsVisitor<'b, 'c: 'b> {\n+struct BorrowedLocalsVisitor<'b, 'c> {\n     sets: &'b mut BlockSets<'c, Local>,\n }\n "}, {"sha": "899765a1d2daa3903faf7354667e0a54bd53ef35", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -29,7 +29,7 @@ newtype_index! {\n /// `BorrowIndex`, and maps each such index to a `BorrowData`\n /// describing the borrow. These indexes are used for representing the\n /// borrows in compact bitvectors.\n-pub struct Borrows<'a, 'tcx: 'a> {\n+pub struct Borrows<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n "}, {"sha": "0a572d2093622e4b6756cd47462dd7e4f3ee61e8", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -63,7 +63,7 @@ pub(super) mod borrows;\n /// Similarly, at a given `drop` statement, the set-intersection\n /// between this data and `MaybeUninitializedPlaces` yields the set of\n /// places that would require a dynamic drop-flag at that statement.\n-pub struct MaybeInitializedPlaces<'a, 'tcx: 'a> {\n+pub struct MaybeInitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> HasMoveData<'tcx> for MaybeInitializedPlaces<'a, 'tcx> {\n /// Similarly, at a given `drop` statement, the set-intersection\n /// between this data and `MaybeInitializedPlaces` yields the set of\n /// places that would require a dynamic drop-flag at that statement.\n-pub struct MaybeUninitializedPlaces<'a, 'tcx: 'a> {\n+pub struct MaybeUninitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n@@ -164,19 +164,19 @@ impl<'a, 'tcx> HasMoveData<'tcx> for MaybeUninitializedPlaces<'a, 'tcx> {\n /// Similarly, at a given `drop` statement, the set-difference between\n /// this data and `MaybeInitializedPlaces` yields the set of places\n /// that would require a dynamic drop-flag at that statement.\n-pub struct DefinitelyInitializedPlaces<'a, 'tcx: 'a> {\n+pub struct DefinitelyInitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> DefinitelyInitializedPlaces<'a, 'tcx> {\n+impl<'a, 'tcx> DefinitelyInitializedPlaces<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {\n         DefinitelyInitializedPlaces { tcx: tcx, body: body, mdpe: mdpe }\n     }\n }\n \n-impl<'a, 'tcx: 'a> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n+impl<'a, 'tcx> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n     fn move_data(&self) -> &MoveData<'tcx> { &self.mdpe.move_data }\n }\n \n@@ -209,13 +209,13 @@ impl<'a, 'tcx: 'a> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n ///     c = S;                                 // {a, b, c, d }\n /// }\n /// ```\n-pub struct EverInitializedPlaces<'a, 'tcx: 'a> {\n+pub struct EverInitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> EverInitializedPlaces<'a, 'tcx> {\n+impl<'a, 'tcx> EverInitializedPlaces<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {\n         EverInitializedPlaces { tcx: tcx, body: body, mdpe: mdpe }\n     }"}, {"sha": "d7575b0f441e6dd45785e35a2dbfeb5f82557447", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -4,11 +4,11 @@ use rustc::mir::*;\n use crate::dataflow::BitDenotation;\n \n #[derive(Copy, Clone)]\n-pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n+pub struct MaybeStorageLive<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> MaybeStorageLive<'a, 'tcx> {\n+impl<'a, 'tcx> MaybeStorageLive<'a, 'tcx> {\n     pub fn new(body: &'a Body<'tcx>)\n                -> Self {\n         MaybeStorageLive { body }"}, {"sha": "1130e7e3f5d00a01f2a4c0010cc503dd4c92c3f3", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -41,7 +41,7 @@ pub(crate) mod indexes {\n     };\n }\n \n-pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD>\n+pub(crate) struct DataflowBuilder<'a, 'tcx, BD>\n where\n     BD: BitDenotation<'tcx>\n {\n@@ -86,7 +86,7 @@ pub(crate) trait Dataflow<'tcx, BD: BitDenotation<'tcx>> {\n     fn propagate(&mut self);\n }\n \n-impl<'a, 'tcx: 'a, BD> Dataflow<'tcx, BD> for DataflowBuilder<'a, 'tcx, BD>\n+impl<'a, 'tcx, BD> Dataflow<'tcx, BD> for DataflowBuilder<'a, 'tcx, BD>\n where\n     BD: BitDenotation<'tcx>\n {\n@@ -138,7 +138,7 @@ where\n     flow_state.run(tcx, def_id, attributes, p)\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n+impl<'a, 'tcx, BD> DataflowAnalysis<'a, 'tcx, BD>\n where\n     BD: BitDenotation<'tcx>,\n {\n@@ -179,12 +179,12 @@ where\n     }\n }\n \n-struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O> where O: 'b + BitDenotation<'tcx>\n+struct PropagationContext<'b, 'a, 'tcx, O> where O: 'b + BitDenotation<'tcx>\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'a, 'tcx, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn propagate(&mut self) {\n         let mut temp = BitSet::new_empty(self.flow_state.sets.bits_per_block);\n@@ -234,7 +234,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'t\n     }\n }\n \n-impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'b, 'a, 'tcx, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n         let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n@@ -265,7 +265,7 @@ fn dataflow_path(context: &str, path: &str) -> PathBuf {\n     path\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'a, 'tcx, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n@@ -297,7 +297,7 @@ impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tc\n /// underlying flow analysis results, because it needs to handle cases\n /// where we are combining the results of *multiple* flow analyses\n /// (e.g., borrows + inits + uninits).\n-pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n+pub(crate) trait DataflowResultsConsumer<'a, 'tcx> {\n     type FlowState: FlowsAtLocation;\n \n     // Observation Hooks: override (at least one of) these to get analysis feedback.\n@@ -387,14 +387,14 @@ pub fn state_for_location<'tcx, T: BitDenotation<'tcx>>(loc: Location,\n     gen_set.to_dense()\n }\n \n-pub struct DataflowAnalysis<'a, 'tcx: 'a, O> where O: BitDenotation<'tcx>\n+pub struct DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n {\n     flow_state: DataflowState<'tcx, O>,\n     dead_unwinds: &'a BitSet<mir::BasicBlock>,\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n+impl<'a, 'tcx, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n {\n     pub fn results(self) -> DataflowResults<'tcx, O> {\n         DataflowResults(self.flow_state)\n@@ -734,7 +734,7 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx>\n     }\n }\n \n-impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx> {\n+impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx> {\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`.\n     ///"}, {"sha": "e8386e8fef11bfd1907ba0a0ffbb2f1a04531327", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use super::{LocationMap, MoveData, MovePath, MovePathLookup, MovePathIndex, Move\n use super::{MoveError, InitIndex, Init, InitLocation, LookupResult, InitKind};\n use super::IllegalMoveOriginKind::*;\n \n-struct MoveDataBuilder<'a, 'tcx: 'a> {\n+struct MoveDataBuilder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     data: MoveData<'tcx>,\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     }\n }\n \n-struct Gatherer<'b, 'a: 'b, 'tcx: 'a> {\n+struct Gatherer<'b, 'a, 'tcx> {\n     builder: &'b mut MoveDataBuilder<'a, 'tcx>,\n     loc: Location,\n }"}, {"sha": "fe54e2a0f183f199f8eb699f00751451f73a7cb8", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -21,7 +21,7 @@ use rustc::hir;\n use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n-pub struct Cx<'a, 'tcx: 'a> {\n+pub struct Cx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'a InferCtxt<'a, 'tcx>,\n "}, {"sha": "d044b1faedfa1f938716fa47023be77cd2061b20", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -8,31 +8,31 @@ pub trait ToRef {\n     fn to_ref(self) -> Self::Output;\n }\n \n-impl<'a, 'tcx: 'a> ToRef for &'tcx hir::Expr {\n+impl<'a, 'tcx> ToRef for &'tcx hir::Expr {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Hair(self)\n     }\n }\n \n-impl<'a, 'tcx: 'a> ToRef for &'tcx P<hir::Expr> {\n+impl<'a, 'tcx> ToRef for &'tcx P<hir::Expr> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Hair(&**self)\n     }\n }\n \n-impl<'a, 'tcx: 'a> ToRef for Expr<'tcx> {\n+impl<'a, 'tcx> ToRef for Expr<'tcx> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Mirror(Box::new(self))\n     }\n }\n \n-impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Option<T>\n+impl<'a, 'tcx, T, U> ToRef for &'tcx Option<T>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Option<U>;\n@@ -42,7 +42,7 @@ impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Option<T>\n     }\n }\n \n-impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Vec<T>\n+impl<'a, 'tcx, T, U> ToRef for &'tcx Vec<T>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Vec<U>;\n@@ -52,7 +52,7 @@ impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Vec<T>\n     }\n }\n \n-impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx P<[T]>\n+impl<'a, 'tcx, T, U> ToRef for &'tcx P<[T]>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Vec<U>;"}, {"sha": "22bd802c1fab7adf7ebc871b84f38fbaa5cf9662", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -285,7 +285,7 @@ impl<'tcx> Pattern<'tcx> {\n \n /// A 2D matrix. Nx1 matrices are very common, which is why `SmallVec[_; 2]`\n /// works well for each row.\n-pub struct Matrix<'p, 'tcx: 'p>(Vec<SmallVec<[&'p Pattern<'tcx>; 2]>>);\n+pub struct Matrix<'p, 'tcx>(Vec<SmallVec<[&'p Pattern<'tcx>; 2]>>);\n \n impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     pub fn empty() -> Self {\n@@ -349,7 +349,7 @@ impl<'p, 'tcx> FromIterator<SmallVec<[&'p Pattern<'tcx>; 2]>> for Matrix<'p, 'tc\n     }\n }\n \n-pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n+pub struct MatchCheckCtxt<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     /// The module in which the match occurs. This is necessary for\n     /// checking inhabited-ness of types because whether a type is (visibly)\n@@ -393,7 +393,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     }\n \n     fn is_non_exhaustive_variant<'p>(&self, pattern: &'p Pattern<'tcx>) -> bool\n-        where 'a: 'p\n+        where 'a\n     {\n         match *pattern.kind {\n             PatternKind::Variant { adt_def, variant_index, .. } => {\n@@ -634,7 +634,7 @@ impl<'tcx> Witness<'tcx> {\n ///\n /// We make sure to omit constructors that are statically impossible. E.g., for\n /// `Option<!>`, we do not include `Some(_)` in the returned list of constructors.\n-fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+fn all_constructors<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   pcx: PatternContext<'tcx>)\n                                   -> Vec<Constructor<'tcx>>\n {\n@@ -708,7 +708,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     ctors\n }\n \n-fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n+fn max_slice_length<'p, 'a, 'tcx, I>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     patterns: I) -> u64\n     where I: Iterator<Item=&'p Pattern<'tcx>>\n@@ -985,7 +985,7 @@ enum MissingCtors<'tcx> {\n // (The split logic gives a performance win, because we always need to know if\n // the set is empty, but we rarely need the full set, and it can be expensive\n // to compute the full set.)\n-fn compute_missing_ctors<'a, 'tcx: 'a>(\n+fn compute_missing_ctors<'a, 'tcx>(\n     info: MissingCtorsInfo,\n     tcx: TyCtxt<'tcx>,\n     all_ctors: &Vec<Constructor<'tcx>>,\n@@ -1057,7 +1057,7 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n /// relation to preceding patterns, it is not reachable) and exhaustiveness\n /// checking (if a wildcard pattern is useful in relation to a matrix, the\n /// matrix isn't exhaustive).\n-pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+pub fn is_useful<'p, 'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                        matrix: &Matrix<'p, 'tcx>,\n                                        v: &[&Pattern<'tcx>],\n                                        witness: WitnessPreference)\n@@ -1267,7 +1267,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n /// A shorthand for the `U(S(c, P), S(c, q))` operation from the paper. I.e., `is_useful` applied\n /// to the specialised version of both the pattern matrix `P` and the new pattern `q`.\n-fn is_useful_specialized<'p, 'a: 'p, 'tcx: 'a>(\n+fn is_useful_specialized<'p, 'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n     v: &[&Pattern<'tcx>],\n@@ -1373,7 +1373,7 @@ fn constructor_arity(cx: &MatchCheckCtxt<'a, 'tcx>, ctor: &Constructor<'tcx>, ty\n /// expanded to.\n ///\n /// For instance, a tuple pattern (43u32, 'a') has sub pattern types [u32, char].\n-fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n+fn constructor_sub_pattern_tys<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                                              ctor: &Constructor<'tcx>,\n                                              ty: Ty<'tcx>) -> Vec<Ty<'tcx>>\n {\n@@ -1520,7 +1520,7 @@ fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>)\n /// boundaries for each interval range, sort them, then create constructors for each new interval\n /// between every pair of boundary points. (This essentially sums up to performing the intuitive\n /// merging operation depicted above.)\n-fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n+fn split_grouped_constructors<'p, 'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ctors: Vec<Constructor<'tcx>>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n@@ -1598,7 +1598,7 @@ fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n }\n \n /// Checks whether there exists any shared value in either `ctor` or `pat` by intersecting them.\n-fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n+fn constructor_intersects_pattern<'p, 'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &'p Pattern<'tcx>,\n@@ -1688,7 +1688,7 @@ fn constructor_covered_by_range<'tcx>(\n     }\n }\n \n-fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(\n+fn patterns_for_variant<'p, 'a, 'tcx>(\n     subpatterns: &'p [FieldPattern<'tcx>],\n     wild_patterns: &[&'p Pattern<'tcx>])\n     -> SmallVec<[&'p Pattern<'tcx>; 2]>\n@@ -1711,7 +1711,7 @@ fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(\n /// different patterns.\n /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n /// fields filled with wild patterns.\n-fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n+fn specialize<'p, 'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     r: &[&'p Pattern<'tcx>],\n     constructor: &Constructor<'tcx>,"}, {"sha": "ed850379af60b49a9d9faed48181bb343788aedd", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -47,7 +47,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n \n-struct MatchVisitor<'a, 'tcx: 'a> {\n+struct MatchVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body_owner: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n@@ -439,7 +439,7 @@ fn check_arms<'a, 'tcx>(\n     }\n }\n \n-fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n+fn check_exhaustive<'p, 'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     scrut_ty: Ty<'tcx>,\n     sp: Span,\n@@ -642,7 +642,7 @@ fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n     };\n }\n \n-struct MutationChecker<'a, 'tcx: 'a> {\n+struct MutationChecker<'a, 'tcx> {\n     cx: &'a MatchVisitor<'a, 'tcx>,\n }\n \n@@ -691,7 +691,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     AtBindingPatternVisitor { cx: cx, bindings_allowed: true }.visit_pat(pat);\n }\n \n-struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n+struct AtBindingPatternVisitor<'a, 'b, 'tcx> {\n     cx: &'a MatchVisitor<'b, 'tcx>,\n     bindings_allowed: bool\n }"}, {"sha": "cf597ce0b6319b2aca2b75ef524adbd955135e04", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -326,7 +326,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n     }\n }\n \n-pub struct PatternContext<'a, 'tcx: 'a> {\n+pub struct PatternContext<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub tables: &'a ty::TypeckTables<'tcx>,"}, {"sha": "b01826c98db052ef369029a44e73c8b28025cb28", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -49,7 +49,7 @@ pub struct InterpretCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n \n /// A stack frame.\n #[derive(Clone)]\n-pub struct Frame<'mir, 'tcx: 'mir, Tag=(), Extra=()> {\n+pub struct Frame<'mir, 'tcx, Tag=(), Extra=()> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Function and callsite information\n     ////////////////////////////////////////////////////////////////////////////////\n@@ -195,7 +195,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpretCx<'mir, 'tcx, M>\n     }\n }\n \n-impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>, machine: M) -> Self {\n         InterpretCx {\n             machine,"}, {"sha": "ad631793a082751b6ffc13f23e2240a58b3e9a0d", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -304,7 +304,7 @@ impl_stable_hash_for!(enum crate::interpret::eval_context::StackPopCleanup {\n });\n \n #[derive(Eq, PartialEq)]\n-struct FrameSnapshot<'a, 'tcx: 'a> {\n+struct FrameSnapshot<'a, 'tcx> {\n     instance: &'a ty::Instance<'tcx>,\n     span: &'a Span,\n     return_to_block: &'a StackPopCleanup,"}, {"sha": "95a679b95ddc90965ef88034c07ce8580bd42c11", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -122,7 +122,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for MPlaceTy<'tcx,\n macro_rules! make_value_visitor {\n     ($visitor_trait_name:ident, $($mutability:ident)?) => {\n         // How to traverse a value and what to do when we are at the leaves.\n-        pub trait $visitor_trait_name<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n+        pub trait $visitor_trait_name<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Sized {\n             type V: Value<'mir, 'tcx, M>;\n \n             /// The visitor must have an `InterpretCx` in it."}, {"sha": "6dcb23da321a677ee51edaca6e33f2b70be70e76", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -345,7 +345,7 @@ fn collect_roots<'tcx>(tcx: TyCtxt<'tcx>, mode: MonoItemCollectionMode) -> Vec<M\n }\n \n // Collect all monomorphized items reachable from `starting_point`\n-fn collect_items_rec<'a, 'tcx: 'a>(\n+fn collect_items_rec<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     starting_point: MonoItem<'tcx>,\n     visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,\n@@ -515,7 +515,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     }\n }\n \n-struct MirNeighborCollector<'a, 'tcx: 'a> {\n+struct MirNeighborCollector<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a mir::Body<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,"}, {"sha": "59e95215df2a40ae150e1669e9b727494209f138", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -769,7 +769,7 @@ fn numbered_codegen_unit_name(\n fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n where\n     I: Iterator<Item = &'b CodegenUnit<'tcx>>,\n-    'tcx: 'a + 'b,\n+    'tcx,\n {\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n@@ -794,7 +794,7 @@ where\n }\n \n #[inline(never)] // give this a place in the profiler\n-fn assert_symbols_are_distinct<'a, 'tcx: 'a, I>(tcx: TyCtxt<'tcx>, mono_items: I)\n+fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, mono_items: I)\n where\n     I: Iterator<Item = &'a MonoItem<'tcx>>,\n {"}, {"sha": "c04672f8331e62badbd674df42a4d5a513b0d697", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -248,7 +248,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     body\n }\n \n-pub struct DropShimElaborator<'a, 'tcx: 'a> {\n+pub struct DropShimElaborator<'a, 'tcx> {\n     pub body: &'a Body<'tcx>,\n     pub patch: MirPatch<'tcx>,\n     pub tcx: TyCtxt<'tcx>,"}, {"sha": "9c78d761cb2ca83d226e9412d70ecbfa7cde8592", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -18,7 +18,7 @@ use std::ops::Bound;\n \n use crate::util;\n \n-pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n+pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     const_context: bool,\n     min_const_fn: bool,"}, {"sha": "d805c66e3c360201972840aa2e39a88725544d6a", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -164,7 +164,7 @@ impl InitializationData {\n     }\n }\n \n-struct Elaborator<'a, 'b: 'a, 'tcx: 'b> {\n+struct Elaborator<'a, 'b, 'tcx> {\n     init_data: &'a InitializationData,\n     ctxt: &'a mut ElaborateDropsCtxt<'b, 'tcx>,\n }\n@@ -285,7 +285,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n }\n \n-struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n+struct ElaborateDropsCtxt<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx>,"}, {"sha": "6be54aa629de72d50428cb2e9924239a870edae3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -616,15 +616,15 @@ fn compute_storage_conflicts(\n     storage_conflicts\n }\n \n-struct StorageConflictVisitor<'body, 'tcx: 'body, 's> {\n+struct StorageConflictVisitor<'body, 'tcx, 's> {\n     body: &'body Body<'tcx>,\n     stored_locals: &'s liveness::LiveVarSet,\n     // FIXME(tmandry): Consider using sparse bitsets here once we have good\n     // benchmarks for generators.\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl<'body, 'tcx: 'body, 's> DataflowResultsConsumer<'body, 'tcx>\n+impl<'body, 'tcx, 's> DataflowResultsConsumer<'body, 'tcx>\n for StorageConflictVisitor<'body, 'tcx, 's> {\n     type FlowState = FlowAtLocation<'tcx, MaybeStorageLive<'body, 'tcx>>;\n \n@@ -654,7 +654,7 @@ for StorageConflictVisitor<'body, 'tcx, 's> {\n     }\n }\n \n-impl<'body, 'tcx: 'body, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n+impl<'body, 'tcx, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n     fn apply_state(&mut self,\n                    flow_state: &FlowAtLocation<'tcx, MaybeStorageLive<'body, 'tcx>>,\n                    loc: Location) {"}, {"sha": "e2f98e46dba57a6d03c5965d1741fead6055127d", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -643,7 +643,7 @@ fn type_size_of<'tcx>(\n  * Updates block indices, references to locals and other control flow\n  * stuff.\n */\n-struct Integrator<'a, 'tcx: 'a> {\n+struct Integrator<'a, 'tcx> {\n     block_idx: usize,\n     args: &'a [Local],\n     local_map: IndexVec<Local, Local>,"}, {"sha": "81d91dcd0a95f58f66d6bd173832cae477f94b96", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -66,7 +66,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n-    struct GatherCtors<'a, 'tcx: 'a> {\n+    struct GatherCtors<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         set: &'a mut DefIdSet,\n     }"}, {"sha": "d78adfe433c47684efe720cc69b39a82ae3b259a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -147,7 +147,7 @@ pub fn collect_temps(body: &Body<'_>,\n     collector.temps\n }\n \n-struct Promoter<'a, 'tcx: 'a> {\n+struct Promoter<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     source: &'a mut Body<'tcx>,\n     promoted: Body<'tcx>,"}, {"sha": "f226f15c0096f2fcabaefab6ed4555298186b54e", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -63,12 +63,12 @@ impl MirPass for SimplifyCfg {\n     }\n }\n \n-pub struct CfgSimplifier<'a, 'tcx: 'a> {\n+pub struct CfgSimplifier<'a, 'tcx> {\n     basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n     pred_count: IndexVec<BasicBlock, u32>\n }\n \n-impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n+impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     pub fn new(body: &'a mut Body<'tcx>) -> Self {\n         let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());\n "}, {"sha": "812a024e1d91182155764469d44b861c5f636940", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -47,7 +47,7 @@ impl MirPass for UniformArrayMoveOut {\n     }\n }\n \n-struct UniformArrayMoveOutVisitor<'a, 'tcx: 'a> {\n+struct UniformArrayMoveOutVisitor<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     patch: &'a mut MirPatch<'tcx>,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "6da181ef66807006260b2cdb2aa924118d6657f2", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -70,7 +70,7 @@ impl Unwind {\n     }\n }\n \n-pub trait DropElaborator<'a, 'tcx: 'a>: fmt::Debug {\n+pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n     type Path : Copy + fmt::Debug;\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n@@ -90,7 +90,7 @@ pub trait DropElaborator<'a, 'tcx: 'a>: fmt::Debug {\n }\n \n #[derive(Debug)]\n-struct DropCtxt<'l, 'b: 'l, 'tcx: 'b, D>\n+struct DropCtxt<'l, 'b, 'tcx, D>\n     where D : DropElaborator<'b, 'tcx> + 'l\n {\n     elaborator: &'l mut D,"}, {"sha": "e1e4195d6d5168dd5e5cdee77180aff3caf1121e", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -39,7 +39,7 @@ enum Context {\n }\n \n #[derive(Copy, Clone)]\n-struct CheckLoopVisitor<'a, 'hir: 'a> {\n+struct CheckLoopVisitor<'a, 'hir> {\n     sess: &'a Session,\n     hir_map: &'a Map<'hir>,\n     cx: Context,"}, {"sha": "1493d02904806fb251518b3d589759454ae04385", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -74,7 +74,7 @@ fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ItemLo\n     tcx.arena.alloc(visitor.result)\n }\n \n-struct CheckCrateVisitor<'a, 'tcx: 'a> {\n+struct CheckCrateVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     in_fn: bool,\n     in_static: bool,"}, {"sha": "ba834bf09aa8437bf7aca6e80e642b3e3f633ac0", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -842,7 +842,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n /// This pass performs remaining checks for fields in struct expressions and patterns.\n //////////////////////////////////////////////////////////////////////////////////////\n \n-struct NamePrivacyVisitor<'a, 'tcx: 'a> {\n+struct NamePrivacyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     current_item: hir::HirId,\n@@ -969,7 +969,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n /// Checks are performed on \"semantic\" types regardless of names and their hygiene.\n ////////////////////////////////////////////////////////////////////////////////////////////\n \n-struct TypePrivacyVisitor<'a, 'tcx: 'a> {\n+struct TypePrivacyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     current_item: DefId,\n@@ -1202,15 +1202,15 @@ impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n /// warnings instead of hard errors when the erroneous node is not in this old set.\n ///////////////////////////////////////////////////////////////////////////////\n \n-struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx: 'a> {\n+struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     access_levels: &'a AccessLevels,\n     in_variant: bool,\n     // Set of errors produced by this obsolete visitor.\n     old_error_set: HirIdSet,\n }\n \n-struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b: 'a, 'tcx: 'b> {\n+struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     inner: &'a ObsoleteVisiblePrivateTypesVisitor<'b, 'tcx>,\n     /// Whether the type refers to private types.\n     contains_private: bool,\n@@ -1651,7 +1651,7 @@ impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     }\n }\n \n-struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n+struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a HirIdSet,"}, {"sha": "18ed91689ec18875865b985e89b4fbdfac56dd5f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -930,7 +930,7 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n+pub struct BuildReducedGraphVisitor<'a, 'b> {\n     pub resolver: &'a mut Resolver<'b>,\n     pub current_legacy_scope: LegacyScope<'b>,\n     pub expansion: Mark,"}, {"sha": "4fee15c59b33d66cc54b7645e559027fe8f38610", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -48,7 +48,7 @@ impl<'a> UnusedImport<'a> {\n     }\n }\n \n-struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n+struct UnusedImportCheckVisitor<'a, 'b> {\n     resolver: &'a mut Resolver<'b>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: NodeMap<UnusedImport<'a>>,"}, {"sha": "e93a2315ca321193ce433e4402081b7136a86399", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -441,7 +441,7 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n+impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// Adds suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,"}, {"sha": "a127c96068549007f97c694170076df38bf60393", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -1735,7 +1735,7 @@ impl<'a> ResolverArenas<'a> {\n     }\n }\n \n-impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n+impl<'a, 'b> ty::DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,"}, {"sha": "47ed3d684b2b6bd34db20191c43401faae50ec83", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -132,7 +132,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn resolve_dollar_crates(&mut self, fragment: &AstFragment) {\n-        struct ResolveDollarCrates<'a, 'b: 'a> {\n+        struct ResolveDollarCrates<'a, 'b> {\n             resolver: &'a mut Resolver<'b>\n         }\n         impl<'a> Visitor<'a> for ResolveDollarCrates<'a, '_> {"}, {"sha": "f69849bb4a9ee8d8bd843f755e0d302ee5ed18cc", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -644,30 +644,30 @@ struct UnresolvedImportError {\n     suggestion: Option<Suggestion>,\n }\n \n-pub struct ImportResolver<'a, 'b: 'a> {\n+pub struct ImportResolver<'a, 'b> {\n     pub resolver: &'a mut Resolver<'b>,\n }\n \n-impl<'a, 'b: 'a> std::ops::Deref for ImportResolver<'a, 'b> {\n+impl<'a, 'b> std::ops::Deref for ImportResolver<'a, 'b> {\n     type Target = Resolver<'b>;\n     fn deref(&self) -> &Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a> std::ops::DerefMut for ImportResolver<'a, 'b> {\n+impl<'a, 'b> std::ops::DerefMut for ImportResolver<'a, 'b> {\n     fn deref_mut(&mut self) -> &mut Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n+impl<'a, 'b> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.resolver.parent(id)\n     }\n }\n \n-impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n+impl<'a, 'b> ImportResolver<'a, 'b> {\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "a7f46e876830c47d29bd9fa872e8a12916bdb90f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -75,7 +75,7 @@ macro_rules! access_from_vis {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput> {\n+pub struct DumpVisitor<'l, 'tcx, 'll, O: DumpOutput> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     dumper: &'ll mut JsonDumper<O>,\n@@ -92,7 +92,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput> {\n     // macro_calls: FxHashSet<Span>,\n }\n \n-impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     pub fn new(\n         save_ctxt: SaveContext<'l, 'tcx>,\n         dumper: &'ll mut JsonDumper<O>,\n@@ -1311,7 +1311,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n }\n \n-impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate."}, {"sha": "4882a4240c831b047dd3ec7c9bead1386588d117", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -51,7 +51,7 @@ use rls_data::config::Config;\n use log::{debug, error, info};\n \n \n-pub struct SaveContext<'l, 'tcx: 'l> {\n+pub struct SaveContext<'l, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n@@ -67,7 +67,7 @@ pub enum Data {\n     RelationData(Relation, Impl),\n }\n \n-impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n+impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     fn span_from_span(&self, span: Span) -> SpanData {\n         use rls_span::{Column, Row};\n \n@@ -960,7 +960,7 @@ impl<'l> PathCollector<'l> {\n     }\n }\n \n-impl<'l, 'a: 'l> Visitor<'a> for PathCollector<'l> {\n+impl<'l, 'a> Visitor<'a> for PathCollector<'l> {\n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n         match p.node {\n             PatKind::Struct(ref path, ..) => {"}, {"sha": "bbb0825ee082afa4a706e35e557c3fe82fd93e7b", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -56,7 +56,7 @@ crate struct ChalkContext<'tcx> {\n }\n \n #[derive(Copy, Clone)]\n-crate struct ChalkInferenceContext<'cx, 'tcx: 'cx> {\n+crate struct ChalkInferenceContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n }\n "}, {"sha": "59c01b8b1b7b19576806ffefeef29638d85d0f01", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -139,7 +139,7 @@ impl context::ResolventOps<ChalkArenas<'tcx>, ChalkArenas<'tcx>>\n     }\n }\n \n-struct AnswerSubstitutor<'cx, 'tcx: 'cx> {\n+struct AnswerSubstitutor<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     environment: Environment<'tcx>,\n     answer_subst: CanonicalVarValues<'tcx>,"}, {"sha": "1f9090324414b34e65f82965bcc2645c8e66a561", "filename": "src/librustc_traits/chalk_context/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -42,7 +42,7 @@ crate fn unify<'me, 'tcx, T: Relate<'tcx>>(\n     })\n }\n \n-struct ChalkTypeRelatingDelegate<'me, 'tcx: 'me> {\n+struct ChalkTypeRelatingDelegate<'me, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     environment: Environment<'tcx>,\n     goals: Vec<InEnvironment<'tcx, Goal<'tcx>>>,"}, {"sha": "cb30eba5b05052a264fd37827537113aa1d3124e", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -56,7 +56,7 @@ fn type_op_ascribe_user_type<'tcx>(\n         })\n }\n \n-struct AscribeUserTypeCx<'me, 'tcx: 'me> {\n+struct AscribeUserTypeCx<'me, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     fulfill_cx: &'me mut dyn TraitEngine<'tcx>,"}, {"sha": "ecdf28e5d7f0b7160c264ed4a29356d4bc562982", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -20,7 +20,7 @@ enum AutoderefKind {\n     Overloaded,\n }\n \n-pub struct Autoderef<'a, 'tcx: 'a> {\n+pub struct Autoderef<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "ac2dcbadad824ccfe7ed1e9468f2469f2fc225e8", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use syntax_pos::Span;\n use super::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n \n-struct InteriorVisitor<'a, 'tcx: 'a> {\n+struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     types: FxHashMap<Ty<'tcx>, usize>,\n     region_scope_tree: &'tcx region::ScopeTree,"}, {"sha": "5943302c7088f3c5f007eb063e1e7a3fdea7780d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -787,7 +787,7 @@ fn compute_all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<DefId> {\n \n     // Crate-local:\n \n-    struct Visitor<'a, 'tcx: 'a> {\n+    struct Visitor<'a, 'tcx> {\n         map: &'a hir_map::Map<'tcx>,\n         traits: &'a mut Vec<DefId>,\n     }"}, {"sha": "864f19933a5f1b05b7a331d37fd7f2ab23157cf9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -160,7 +160,7 @@ pub struct LocalTy<'tcx> {\n \n /// A wrapper for `InferCtxt`'s `in_progress_tables` field.\n #[derive(Copy, Clone)]\n-struct MaybeInProgressTables<'a, 'tcx: 'a> {\n+struct MaybeInProgressTables<'a, 'tcx> {\n     maybe_tables: Option<&'a RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n@@ -193,7 +193,7 @@ impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n /// Here, the function `foo()` and the closure passed to\n /// `bar()` will each have their own `FnCtxt`, but they will\n /// share the inherited fields.\n-pub struct Inherited<'a, 'tcx: 'a> {\n+pub struct Inherited<'a, 'tcx> {\n     infcx: InferCtxt<'a, 'tcx>,\n \n     tables: MaybeInProgressTables<'a, 'tcx>,\n@@ -512,7 +512,7 @@ impl<'tcx> EnclosingBreakables<'tcx> {\n     }\n }\n \n-pub struct FnCtxt<'a, 'tcx: 'a> {\n+pub struct FnCtxt<'a, 'tcx> {\n     body_id: hir::HirId,\n \n     /// The parameter environment used for proving trait obligations\n@@ -919,7 +919,7 @@ fn check_abi<'tcx>(tcx: TyCtxt<'tcx>, span: Span, abi: Abi) {\n     }\n }\n \n-struct GatherLocalsVisitor<'a, 'tcx: 'a> {\n+struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     parent_id: hir::HirId,\n }"}, {"sha": "6a95dec1c81bc2a58bd542f32768cd41c9fc6efc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n // there, it applies a few ad-hoc checks that were not convenient to\n // do elsewhere.\n \n-struct WritebackCx<'cx, 'tcx: 'cx> {\n+struct WritebackCx<'cx, 'tcx> {\n     fcx: &'cx FnCtxt<'cx, 'tcx>,\n \n     tables: ty::TypeckTables<'tcx>,\n@@ -787,7 +787,7 @@ impl Locatable for hir::HirId {\n // The Resolver. This is the type folding engine that detects\n // unresolved types and so forth.\n \n-struct Resolver<'cx, 'tcx: 'cx> {\n+struct Resolver<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,"}, {"sha": "8f89a77bd1a3a3423a8c864ce74980d3a77b824a", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -194,7 +194,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n     }\n }\n \n-struct CollectExternCrateVisitor<'a, 'tcx: 'a> {\n+struct CollectExternCrateVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     crates_to_lint: &'a mut Vec<ExternCrateToLint>,\n }"}, {"sha": "70deca9623b452a67c04ad2cfd0463e904af72dd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -1786,7 +1786,7 @@ fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n /// the lifetimes that are declared. For fns or methods, we have to\n /// screen out those that do not appear in any where-clauses etc using\n /// `resolve_lifetime::early_bound_lifetimes`.\n-fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n+fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     generics: &'a hir::Generics,\n ) -> impl Iterator<Item = &'a hir::GenericParam> + Captures<'tcx> {"}, {"sha": "1c2bb8c2f0b28f5f90f01e32ccf69cf83f515db3", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -43,7 +43,7 @@ pub fn infer_predicates<'tcx>(\n     global_inferred_outlives\n }\n \n-pub struct InferVisitor<'cx, 'tcx: 'cx> {\n+pub struct InferVisitor<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     global_inferred_outlives: &'cx mut FxHashMap<DefId, RequiredPredicates<'tcx>>,\n     predicates_added: &'cx mut bool,"}, {"sha": "36f0dbcd2fcbddc01ba3e783ace2c3c4d7b93785", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -12,7 +12,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use super::terms::*;\n use super::terms::VarianceTerm::*;\n \n-pub struct ConstraintContext<'a, 'tcx: 'a> {\n+pub struct ConstraintContext<'a, 'tcx> {\n     pub terms_cx: TermsContext<'a, 'tcx>,\n \n     // These are pointers to common `ConstantTerm` instances"}, {"sha": "3851b918c4855a7ad0962cdae39d32621ba55c67", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -14,7 +14,7 @@ use super::terms::*;\n use super::terms::VarianceTerm::*;\n use super::xform::*;\n \n-struct SolveContext<'a, 'tcx: 'a> {\n+struct SolveContext<'a, 'tcx> {\n     terms_cx: TermsContext<'a, 'tcx>,\n     constraints: Vec<Constraint<'a>>,\n "}, {"sha": "3f6eadeac333479d551915e128b0e8de401f243b", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -47,7 +47,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n \n // The first pass over the crate simply builds up the set of inferreds.\n \n-pub struct TermsContext<'a, 'tcx: 'a> {\n+pub struct TermsContext<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub arena: &'a TypedArena<VarianceTerm<'a>>,\n "}, {"sha": "f6ab1290da37ce0bbaada4c5a2a0943afbf2b443", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -20,7 +20,7 @@ pub fn check_code_block_syntax(krate: clean::Crate, cx: &DocContext<'_>) -> clea\n     SyntaxChecker { cx }.fold_crate(krate)\n }\n \n-struct SyntaxChecker<'a, 'tcx: 'a> {\n+struct SyntaxChecker<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n }\n "}, {"sha": "ddce5cab1ebcbab259c744e8a33f1893ad12ccb6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -878,7 +878,7 @@ impl Tester for Collector {\n     }\n }\n \n-struct HirCollector<'a, 'hir: 'a> {\n+struct HirCollector<'a, 'hir> {\n     sess: &'a session::Session,\n     collector: &'a mut Collector,\n     map: &'a hir::map::Map<'hir>,"}, {"sha": "2c3bea80e349b4933529c2fb8ebab1e5e56e74c4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -2502,7 +2502,7 @@ impl<A:ToJson> ToJson for Option<A> {\n     }\n }\n \n-struct FormatShim<'a, 'b: 'a> {\n+struct FormatShim<'a, 'b> {\n     inner: &'a mut fmt::Formatter<'b>,\n }\n "}, {"sha": "d433e6c5a896f41d8c9dd6a1475b179f86e5bf7e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -242,7 +242,7 @@ impl Invocation {\n     }\n }\n \n-pub struct MacroExpander<'a, 'b:'a> {\n+pub struct MacroExpander<'a, 'b> {\n     pub cx: &'a mut ExtCtxt<'b>,\n     monotonic: bool, // cf. `cx.monotonic_expander()`\n }\n@@ -1031,7 +1031,7 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-struct InvocationCollector<'a, 'b: 'a> {\n+struct InvocationCollector<'a, 'b> {\n     cx: &'a mut ExtCtxt<'b>,\n     cfg: StripUnconfigured<'a>,\n     invocations: Vec<Invocation>,"}, {"sha": "b2b8bfb09b45e9206603929424642976a6390644", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -69,7 +69,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     }\n }\n \n-pub struct PlaceholderExpander<'a, 'b: 'a> {\n+pub struct PlaceholderExpander<'a, 'b> {\n     expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n     cx: &'a mut ExtCtxt<'b>,\n     monotonic: bool,"}, {"sha": "d5da4c920bc4f3a8626fc6e93524301268dc7a2d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -156,7 +156,7 @@ type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n /// all the elements in that `SmallVec` strictly outlive the root stack slot\n /// lifetime. By separating `'tt` from `'root`, we can show that.\n #[derive(Clone)]\n-struct MatcherPos<'root, 'tt: 'root> {\n+struct MatcherPos<'root, 'tt> {\n     /// The token or sequence of tokens that make up the matcher\n     top_elts: TokenTreeOrTokenTreeSlice<'tt>,\n \n@@ -233,7 +233,7 @@ impl<'root, 'tt> MatcherPos<'root, 'tt> {\n // Therefore, the initial MatcherPos is always allocated on the stack,\n // subsequent ones (of which there aren't that many) are allocated on the heap,\n // and this type is used to encapsulate both cases.\n-enum MatcherPosHandle<'root, 'tt: 'root> {\n+enum MatcherPosHandle<'root, 'tt> {\n     Ref(&'root mut MatcherPos<'root, 'tt>),\n     Box(Box<MatcherPos<'root, 'tt>>),\n }"}, {"sha": "3edf7726ec610b0854a3e4373293f737ecfa433d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -346,7 +346,7 @@ fn find_type_parameters(ty: &ast::Ty,\n                         -> Vec<P<ast::Ty>> {\n     use syntax::visit;\n \n-    struct Visitor<'a, 'b: 'a> {\n+    struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n         span: Span,\n         ty_param_names: &'a [ast::Name],"}, {"sha": "a5f96559ca8a24aa14a888e9c274ee451d36382b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b466a887d8ceaef533e542431fdec7e70f10f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b25b466a887d8ceaef533e542431fdec7e70f10f", "patch": "@@ -31,7 +31,7 @@ enum Position {\n     Named(Symbol),\n }\n \n-struct Context<'a, 'b: 'a> {\n+struct Context<'a, 'b> {\n     ecx: &'a mut ExtCtxt<'b>,\n     /// The macro's call site. References to unstable formatting internals must\n     /// use this span to pass the stability checker."}]}