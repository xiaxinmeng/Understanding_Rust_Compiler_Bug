{"sha": "47d1cdb0bcac8e417071ce1929d261efe2399ae2", "node_id": "C_kwDOAAsO6NoAKDQ3ZDFjZGIwYmNhYzhlNDE3MDcxY2UxOTI5ZDI2MWVmZTIzOTlhZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T12:02:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T12:02:14Z"}, "message": "Auto merge of #100574 - Urgau:check-cfg-warn-cfg, r=petrochenkov\n\nAdd warning against unexpected --cfg with --check-cfg\n\nThis PR adds a warning when an unexpected `--cfg` is specified but not in the specified list of `--check-cfg`.\n\nThis is the follow-up PR I mentioned in https://github.com/rust-lang/rust/pull/99519.\n\nr? `@petrochenkov`", "tree": {"sha": "bebed4614a87a09f41ec095ec60b2223c667b551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebed4614a87a09f41ec095ec60b2223c667b551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47d1cdb0bcac8e417071ce1929d261efe2399ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47d1cdb0bcac8e417071ce1929d261efe2399ae2", "html_url": "https://github.com/rust-lang/rust/commit/47d1cdb0bcac8e417071ce1929d261efe2399ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47d1cdb0bcac8e417071ce1929d261efe2399ae2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b72b06a2734a3997abe12dded7c19d49a18cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b72b06a2734a3997abe12dded7c19d49a18cc2", "html_url": "https://github.com/rust-lang/rust/commit/06b72b06a2734a3997abe12dded7c19d49a18cc2"}, {"sha": "eccdccf4ebd1b1389e409cccb3427b85bbe6166b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eccdccf4ebd1b1389e409cccb3427b85bbe6166b", "html_url": "https://github.com/rust-lang/rust/commit/eccdccf4ebd1b1389e409cccb3427b85bbe6166b"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "7f9918e4f128f393f5ff626fdc5f920054ff19e6", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -354,6 +354,12 @@ lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility\n     .help = or consider exporting it for use by other crates\n \n+lint_builtin_unexpected_cli_config_name = unexpected `{$name}` as condition name\n+    .help = was set with `--cfg` but isn't in the `--check-cfg` expected names\n+\n+lint_builtin_unexpected_cli_config_value = unexpected condition value `{$value}` for condition name `{$name}`\n+    .help = was set with `--cfg` but isn't in the `--check-cfg` expected values\n+\n lint_builtin_type_alias_bounds_help = use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n \n lint_builtin_type_alias_where_clause = where clauses are not enforced in type aliases"}, {"sha": "48942211eba2deba23af0a9898d6a4afd6fd2875", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -3250,3 +3250,39 @@ impl EarlyLintPass for SpecialModuleName {\n         }\n     }\n }\n+\n+pub use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n+\n+declare_lint_pass!(UnexpectedCfgs => [UNEXPECTED_CFGS]);\n+\n+impl EarlyLintPass for UnexpectedCfgs {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        let cfg = &cx.sess().parse_sess.config;\n+        let check_cfg = &cx.sess().parse_sess.check_config;\n+        for &(name, value) in cfg {\n+            if let Some(names_valid) = &check_cfg.names_valid {\n+                if !names_valid.contains(&name) {\n+                    cx.lookup(UNEXPECTED_CFGS, None::<MultiSpan>, |diag| {\n+                        diag.build(fluent::lint::builtin_unexpected_cli_config_name)\n+                            .help(fluent::lint::help)\n+                            .set_arg(\"name\", name)\n+                            .emit();\n+                    });\n+                }\n+            }\n+            if let Some(value) = value {\n+                if let Some(values) = &check_cfg.values_valid.get(&name) {\n+                    if !values.contains(&value) {\n+                        cx.lookup(UNEXPECTED_CFGS, None::<MultiSpan>, |diag| {\n+                            diag.build(fluent::lint::builtin_unexpected_cli_config_value)\n+                                .help(fluent::lint::help)\n+                                .set_arg(\"name\", name)\n+                                .set_arg(\"value\", value)\n+                                .emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "370a75cf700691d81485c3a13f15f54ccc40e93a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -146,6 +146,7 @@ macro_rules! early_lint_passes {\n                 IncompleteFeatures: IncompleteFeatures,\n                 RedundantSemicolons: RedundantSemicolons,\n                 UnusedDocComment: UnusedDocComment,\n+                UnexpectedCfgs: UnexpectedCfgs,\n             ]\n         );\n     };"}, {"sha": "ca01599acc8b85d912a49eb47b6a3317177f4943", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -3365,7 +3365,6 @@ declare_lint_pass! {\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n-        UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n         TEST_UNSTABLE_LINT,\n         FFI_UNWIND_CALLS,"}, {"sha": "04bd685f19001ed99d9bb01e4ba4cd55389ba3c7", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -901,7 +901,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n         sess.fatal(&err);\n     });\n \n-    let mut ret = FxHashSet::default();\n+    let mut ret = CrateConfig::default();\n     ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));"}, {"sha": "5b95d73bd4d3810f1486f949b29a76958d46810c", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -8,7 +8,7 @@ use crate::lint::{\n };\n use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n@@ -25,7 +25,7 @@ use std::str;\n \n /// The set of keys (and, optionally, values) that define the compilation\n /// environment of the crate, used to drive conditional compilation.\n-pub type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n+pub type CrateConfig = FxIndexSet<(Symbol, Option<Symbol>)>;\n pub type CrateCheckConfig = CheckCfg<Symbol>;\n \n /// Collected spans during parsing for places where a certain feature was\n@@ -241,7 +241,7 @@ impl ParseSess {\n         Self {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(None),\n-            config: FxHashSet::default(),\n+            config: FxIndexSet::default(),\n             check_config: CrateCheckConfig::default(),\n             edition: ExpnId::root().expn_data().edition,\n             raw_identifier_spans: Lock::new(Vec::new()),"}, {"sha": "ce3383a2961aa8735e56c1b63ebc1e740fec3fc4", "filename": "src/test/ui/check-cfg/allow-at-crate-level.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-at-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-at-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-at-crate-level.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -0,0 +1,8 @@\n+// This test check that #![allow(unexpected_cfgs)] works with --cfg\n+//\n+// check-pass\n+// compile-flags: --cfg=unexpected --check-cfg=names() -Z unstable-options\n+\n+#![allow(unexpected_cfgs)]\n+\n+fn main() {}"}, {"sha": "7db2aadec177b218c6b960bae1661a9e807bec57", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -15,5 +15,9 @@ LL | #[cfg(feature = \"rand\")]\n    |\n    = note: expected values for `feature` are: full, serde\n \n-warning: 2 warnings emitted\n+warning: unexpected condition value `rand` for condition name `feature`\n+   |\n+   = help: was set with `--cfg` but isn't in the `--check-cfg` expected values\n+\n+warning: 3 warnings emitted\n "}, {"sha": "4e488fc03ec4bb09abc8a367208ea08a6b2ed05e", "filename": "src/test/ui/check-cfg/mix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -3,7 +3,7 @@\n // we correctly lint on the `cfg!` macro and `cfg_attr` attribute.\n //\n // check-pass\n-// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --cfg feature=\"bar\" -Z unstable-options\n+// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --cfg feature=\"bar\" --cfg unknown_name -Z unstable-options\n \n #[cfg(windows)]\n fn do_windows_stuff() {}"}, {"sha": "9cf887ec7885cce93ac25c9dfc633ec497ee9678", "filename": "src/test/ui/check-cfg/mix.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47d1cdb0bcac8e417071ce1929d261efe2399ae2/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=47d1cdb0bcac8e417071ce1929d261efe2399ae2", "patch": "@@ -28,6 +28,14 @@ warning: unexpected `cfg` condition name\n LL | #[cfg_attr(uu, test)]\n    |            ^^\n \n+warning: unexpected condition value `bar` for condition name `feature`\n+   |\n+   = help: was set with `--cfg` but isn't in the `--check-cfg` expected values\n+\n+warning: unexpected `unknown_name` as condition name\n+   |\n+   = help: was set with `--cfg` but isn't in the `--check-cfg` expected names\n+\n warning: unexpected `cfg` condition name\n   --> $DIR/mix.rs:35:10\n    |\n@@ -170,5 +178,5 @@ LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |\n    = note: expected values for `feature` are: foo\n \n-warning: 25 warnings emitted\n+warning: 27 warnings emitted\n "}]}