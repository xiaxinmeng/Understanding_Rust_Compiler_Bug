{"sha": "9f2abadca2d065bf81772cb84981d0a22d8e98b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMmFiYWRjYTJkMDY1YmY4MTc3MmNiODQ5ODFkMGEyMmQ4ZTk4YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-18T18:20:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-18T18:20:04Z"}, "message": "Auto merge of #41373 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #40290, #41353, #41356, #41360, #41361, #41364\n- Failed merges:", "tree": {"sha": "e3bbeeea63cf1b40768b68e020e0148f712fc3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bbeeea63cf1b40768b68e020e0148f712fc3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f2abadca2d065bf81772cb84981d0a22d8e98b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2abadca2d065bf81772cb84981d0a22d8e98b3", "html_url": "https://github.com/rust-lang/rust/commit/9f2abadca2d065bf81772cb84981d0a22d8e98b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f2abadca2d065bf81772cb84981d0a22d8e98b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c398efc53f09f6e1a8cba4ec2259ffb9d89f0542", "url": "https://api.github.com/repos/rust-lang/rust/commits/c398efc53f09f6e1a8cba4ec2259ffb9d89f0542", "html_url": "https://github.com/rust-lang/rust/commit/c398efc53f09f6e1a8cba4ec2259ffb9d89f0542"}, {"sha": "20718c81deb7d7151d852c9e7d77ac0ef834e4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/20718c81deb7d7151d852c9e7d77ac0ef834e4b3", "html_url": "https://github.com/rust-lang/rust/commit/20718c81deb7d7151d852c9e7d77ac0ef834e4b3"}], "stats": {"total": 447, "additions": 151, "deletions": 296}, "files": [{"sha": "3233a73b007cc7c736de25cab619b58ffedb4132", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -404,14 +404,6 @@ def build_triple(self):\n                 raise Exception(err)\n             sys.exit(err)\n \n-        # Darwin's `uname -s` lies and always returns i386. We have to use\n-        # sysctl instead.\n-        if ostype == 'Darwin' and cputype == 'i686':\n-            args = ['sysctl', 'hw.optional.x86_64']\n-            sysctl = subprocess.check_output(args).decode(default_encoding)\n-            if ': 1' in sysctl:\n-                cputype = 'x86_64'\n-\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':"}, {"sha": "36999eb143ff40b66483f82d7808931d3c2a575d", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -79,6 +79,7 @@\n - [fmt_internals](fmt-internals.md)\n - [fn_traits](fn-traits.md)\n - [fnbox](fnbox.md)\n+- [from_utf8_error_as_bytes](from_utf8_error_as_bytes.md)\n - [fundamental](fundamental.md)\n - [fused](fused.md)\n - [future_atomic_orderings](future-atomic-orderings.md)"}, {"sha": "570f779417f0980056664c3569c33a8b57c134db", "filename": "src/doc/unstable-book/src/from_utf8_error_as_bytes.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -0,0 +1,7 @@\n+# `from_utf8_error_as_bytes`\n+\n+The tracking issue for this feature is: [#40895]\n+\n+[#40895]: https://github.com/rust-lang/rust/issues/40895\n+\n+------------------------"}, {"sha": "8d6cf30511260b64ad83b54fecf1487b2f8dfd75", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -1403,6 +1403,26 @@ impl String {\n }\n \n impl FromUtf8Error {\n+    /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(from_utf8_error_as_bytes)]\n+    /// // some invalid bytes, in a vector\n+    /// let bytes = vec![0, 159];\n+    ///\n+    /// let value = String::from_utf8(bytes);\n+    ///\n+    /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n+    /// ```\n+    #[unstable(feature = \"from_utf8_error_as_bytes\", reason = \"recently added\", issue = \"40895\")]\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes[..]\n+    }\n+\n     /// Returns the bytes that were attempted to convert to a `String`.\n     ///\n     /// This method is carefully constructed to avoid allocation. It will"}, {"sha": "fd9750dbfe3f56d9d90ac81b0023149ee7111176", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -56,30 +56,15 @@ pub enum DepNode<D: Clone + Debug> {\n     WorkProduct(Arc<WorkProductId>),\n \n     // Represents different phases in the compiler.\n-    CollectLanguageItems,\n-    ResolveLifetimes,\n     RegionResolveCrate,\n-    PluginRegistrar,\n-    StabilityIndex,\n-    CollectItem(D),\n-    CollectItemSig(D),\n     Coherence,\n     Resolve,\n-    EntryPoint,\n-    CheckEntryFn,\n     CoherenceCheckTrait(D),\n     CoherenceCheckImpl(D),\n     CoherenceOverlapCheck(D),\n     CoherenceOverlapCheckSpecial(D),\n-    CoherenceOrphanCheck(D),\n     Variance,\n-    WfCheck(D),\n-    TypeckItemType(D),\n-    UnusedTraitCheck,\n-    CheckConst(D),\n     PrivacyAccessLevels(CrateNum),\n-    IntrinsicCheck(D),\n-    MatchCheck(D),\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n@@ -91,14 +76,10 @@ pub enum DepNode<D: Clone + Debug> {\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n-    DeadCheck,\n-    StabilityCheck(D),\n     LateLintCheck,\n-    TransCrate,\n     TransCrateItem(D),\n     TransInlinedItem(D),\n     TransWriteMetadata,\n-    LinkBinary,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -184,12 +165,10 @@ impl<D: Clone + Debug> DepNode<D> {\n         }\n \n         check! {\n-            CollectItem,\n             BorrowCheck,\n             Hir,\n             HirBody,\n             TransCrateItem,\n-            TypeckItemType,\n             AssociatedItems,\n             ItemSignature,\n             AssociatedItemDefIds,\n@@ -211,24 +190,14 @@ impl<D: Clone + Debug> DepNode<D> {\n             BorrowCheckKrate => Some(BorrowCheckKrate),\n             MirKrate => Some(MirKrate),\n             TypeckBodiesKrate => Some(TypeckBodiesKrate),\n-            CollectLanguageItems => Some(CollectLanguageItems),\n-            ResolveLifetimes => Some(ResolveLifetimes),\n             RegionResolveCrate => Some(RegionResolveCrate),\n-            PluginRegistrar => Some(PluginRegistrar),\n-            StabilityIndex => Some(StabilityIndex),\n             Coherence => Some(Coherence),\n             Resolve => Some(Resolve),\n-            EntryPoint => Some(EntryPoint),\n-            CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n-            UnusedTraitCheck => Some(UnusedTraitCheck),\n             PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n-            DeadCheck => Some(DeadCheck),\n             LateLintCheck => Some(LateLintCheck),\n-            TransCrate => Some(TransCrate),\n             TransWriteMetadata => Some(TransWriteMetadata),\n-            LinkBinary => Some(LinkBinary),\n \n             // work product names do not need to be mapped, because\n             // they are always absolute.\n@@ -237,26 +206,17 @@ impl<D: Clone + Debug> DepNode<D> {\n             Hir(ref d) => op(d).map(Hir),\n             HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),\n-            CollectItem(ref d) => op(d).map(CollectItem),\n-            CollectItemSig(ref d) => op(d).map(CollectItemSig),\n             CoherenceCheckTrait(ref d) => op(d).map(CoherenceCheckTrait),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),\n             CoherenceOverlapCheckSpecial(ref d) => op(d).map(CoherenceOverlapCheckSpecial),\n-            CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n-            WfCheck(ref d) => op(d).map(WfCheck),\n-            TypeckItemType(ref d) => op(d).map(TypeckItemType),\n-            CheckConst(ref d) => op(d).map(CheckConst),\n-            IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),\n-            MatchCheck(ref d) => op(d).map(MatchCheck),\n             Mir(ref d) => op(d).map(Mir),\n             MirShim(ref def_ids) => {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(MirShim)\n             }\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n-            StabilityCheck(ref d) => op(d).map(StabilityCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),\n             TransInlinedItem(ref d) => op(d).map(TransInlinedItem),\n             AssociatedItems(ref d) => op(d).map(AssociatedItems),"}, {"sha": "63d90d93bb51b38c9c3702a3b47c222f256735a0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -12,7 +12,6 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::{self, PatKind};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -594,7 +593,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "8da7560387f879d3794ad17068c760e4bcac60bf", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n@@ -57,8 +56,6 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n }\n \n pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n-    let _task = hir_map.dep_graph.in_task(DepNode::EntryPoint);\n-\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n     });"}, {"sha": "ecc0bb9fe497f2b70d87d188776cb00f7e470dfd", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::InferCtxt;\n@@ -25,7 +24,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = ItemVisitor {\n         tcx: tcx\n     };\n-    tcx.visit_all_item_likes_in_krate(DepNode::IntrinsicCheck, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ItemVisitor<'a, 'tcx: 'a> {"}, {"sha": "5989fa9007c4446ee177acd71be6de9ed68de0db", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -21,7 +21,6 @@\n \n pub use self::LangItem::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use session::Session;\n use hir::def_id::DefId;\n@@ -236,7 +235,6 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n pub fn collect_language_items(session: &Session,\n                               map: &hir_map::Map)\n                               -> LanguageItems {\n-    let _task = map.dep_graph.in_task(DepNode::CollectLanguageItems);\n     let krate: &hir::Crate = map.krate();\n     let mut collector = LanguageItemCollector::new(session, map);\n     collector.collect(krate);"}, {"sha": "a1aabc775a31a69f4269767959832481e919fba9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -15,7 +15,6 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n-use dep_graph::DepNode;\n use hir::map::Map;\n use session::Session;\n use hir::def::Def;\n@@ -259,7 +258,6 @@ const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n pub fn krate(sess: &Session,\n              hir_map: &Map)\n              -> Result<NamedRegionMap, usize> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::ResolveLifetimes);\n     let krate = hir_map.krate();\n     let mut map = NamedRegionMap {\n         defs: NodeMap(),"}, {"sha": "1e856f6716ef7f248cb0913a9fa7cc81fd20a203", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -13,7 +13,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n@@ -383,7 +382,6 @@ impl<'a, 'tcx> Index<'tcx> {\n         // Put the active features into a map for quick lookup\n         self.active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n \n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut annotator = Annotator {\n             tcx: tcx,\n@@ -397,7 +395,6 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n \n     pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n-        let _task = hir_map.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = hir_map.krate();\n \n         let mut is_staged_api = false;\n@@ -424,7 +421,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut checker = Checker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck, &mut checker.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n struct Checker<'a, 'tcx: 'a> {\n@@ -662,7 +659,6 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n \n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n             tcx: tcx,"}, {"sha": "2e0afe789c62dbba3c9e6590f3be0666285372e7", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -14,8 +14,6 @@ use _match::WitnessPreference::*;\n \n use pattern::{Pattern, PatternContext, PatternError, PatternKind};\n \n-use rustc::dep_graph::DepNode;\n-\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n@@ -56,8 +54,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::MatchCheck,\n-                                      &mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "9983efce6af0bdd0b139def4c9f3dc9af5f73951", "filename": "src/librustc_driver/derive_registrar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_driver%2Fderive_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_driver%2Fderive_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fderive_registrar.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Map;\n use rustc::hir;\n use syntax::ast;\n use syntax::attr;\n \n pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = Finder { registrar: None };"}, {"sha": "a334923546fb2df76a8c4ccb73cd242bf11ae6ab", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -38,9 +38,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         debug!(\"expr_as_temp(block={:?}, expr={:?})\", block, expr);\n         let this = self;\n \n-        if let ExprKind::Scope { .. } = expr.kind {\n-            span_bug!(expr.span, \"unexpected scope expression in as_temp: {:?}\",\n-                      expr);\n+        if let ExprKind::Scope { extent, value } = expr.kind {\n+            return this.in_scope(extent, block, |this| {\n+                this.as_temp(block, temp_lifetime, value)\n+            });\n         }\n \n         let expr_ty = expr.ty.clone();"}, {"sha": "5982d3bdc81a49191e8e1771261ac7df5d9912c0", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -16,6 +16,8 @@ use hair::*;\n use rustc::ty;\n use rustc::mir::*;\n \n+use syntax::abi::Abi;\n+\n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n@@ -206,25 +208,49 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                     _ => false\n                 };\n+                let intrinsic = match ty.sty {\n+                    ty::TyFnDef(def_id, _, ref f) if\n+                        f.abi() == Abi::RustIntrinsic ||\n+                        f.abi() == Abi::PlatformIntrinsic =>\n+                    {\n+                        Some(this.hir.tcx().item_name(def_id).as_str())\n+                    }\n+                    _ => None\n+                };\n+                let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n                 let fun = unpack!(block = this.as_local_operand(block, fun));\n-                let args: Vec<_> =\n-                    args.into_iter()\n-                        .map(|arg| unpack!(block = this.as_local_operand(block, arg)))\n-                        .collect();\n+                if intrinsic == Some(\"move_val_init\") {\n+                    // `move_val_init` has \"magic\" semantics - the second argument is\n+                    // always evaluated \"directly\" into the first one.\n \n-                let success = this.cfg.start_new_block();\n-                let cleanup = this.diverge_cleanup();\n-                this.cfg.terminate(block, source_info, TerminatorKind::Call {\n-                    func: fun,\n-                    args: args,\n-                    cleanup: cleanup,\n-                    destination: if diverges {\n-                        None\n-                    } else {\n-                        Some ((destination.clone(), success))\n-                    }\n-                });\n-                success.unit()\n+                    let mut args = args.into_iter();\n+                    let ptr = args.next().expect(\"0 arguments to `move_val_init`\");\n+                    let val = args.next().expect(\"1 argument to `move_val_init`\");\n+                    assert!(args.next().is_none(), \">2 arguments to `move_val_init`\");\n+\n+                    let topmost_scope = this.topmost_scope();\n+                    let ptr = unpack!(block = this.as_temp(block, Some(topmost_scope), ptr));\n+                    this.into(&ptr.deref(), block, val)\n+                } else {\n+                    let args: Vec<_> =\n+                        args.into_iter()\n+                            .map(|arg| unpack!(block = this.as_local_operand(block, arg)))\n+                            .collect();\n+\n+                    let success = this.cfg.start_new_block();\n+                    let cleanup = this.diverge_cleanup();\n+                    this.cfg.terminate(block, source_info, TerminatorKind::Call {\n+                        func: fun,\n+                        args: args,\n+                        cleanup: cleanup,\n+                        destination: if diverges {\n+                            None\n+                        } else {\n+                            Some ((destination.clone(), success))\n+                        }\n+                    });\n+                    success.unit()\n+                }\n             }\n \n             // These cases don't actually need a destination"}, {"sha": "9dfe1a34c9ce03aa5a2ae0bf9eb74c7de4c6fb99", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -68,7 +68,7 @@ pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n                 NestedVisitorMap::None\n             }\n         }\n-        tcx.visit_all_item_likes_in_krate(DepNode::Mir, &mut GatherCtors {\n+        tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n             tcx: tcx\n         }.as_deep_visitor());\n     }"}, {"sha": "4d70540a7c688166b58f1bb265a49decd31cb5dc", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -205,12 +205,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                 patch: MirPatch::new(&mir),\n                 tcx, param_env\n             };\n-            let dropee = Lvalue::Projection(\n-                box Projection {\n-                    base: Lvalue::Local(Local::new(1+0)),\n-                    elem: ProjectionElem::Deref\n-                }\n-                );\n+            let dropee = Lvalue::Local(Local::new(1+0)).deref();\n             let resume_block = elaborator.patch.resume_block();\n             elaborate_drops::elaborate_drop(\n                 &mut elaborator,\n@@ -310,9 +305,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n \n     let rcvr = match rcvr_adjustment {\n         Adjustment::Identity => Operand::Consume(rcvr_l),\n-        Adjustment::Deref => Operand::Consume(Lvalue::Projection(\n-            box Projection { base: rcvr_l, elem: ProjectionElem::Deref }\n-        )),\n+        Adjustment::Deref => Operand::Consume(rcvr_l.deref()),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n             let re_erased = tcx.mk_region(ty::ReErased);\n@@ -352,10 +345,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     if let Some(untuple_args) = untuple_args {\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n             let arg_lv = Lvalue::Local(Local::new(1+1));\n-            Operand::Consume(Lvalue::Projection(box Projection {\n-                base: arg_lv,\n-                elem: ProjectionElem::Field(Field::new(i), *ity)\n-            }))\n+            Operand::Consume(arg_lv.field(Field::new(i), *ity))\n         }));\n     } else {\n         args.extend((1..sig.inputs().len()).map(|i| {"}, {"sha": "2c4439f80a23906e250356a4a0d86729d90adfe6", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -24,7 +24,6 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n-use rustc::dep_graph::DepNode;\n use rustc::ty::cast::CastKind;\n use rustc_const_eval::ConstContext;\n use rustc::middle::const_val::ConstEvalErr;\n@@ -459,15 +458,14 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::CheckConst,\n-                                      &mut CheckCrateVisitor {\n-                                          tcx: tcx,\n-                                          tables: &ty::TypeckTables::empty(),\n-                                          in_fn: false,\n-                                          promotable: false,\n-                                          mut_rvalue_borrows: NodeSet(),\n-                                          param_env: tcx.empty_parameter_environment(),\n-                                      }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut CheckCrateVisitor {\n+        tcx: tcx,\n+        tables: &ty::TypeckTables::empty(),\n+        in_fn: false,\n+        promotable: false,\n+        mut_rvalue_borrows: NodeSet(),\n+        param_env: tcx.empty_parameter_environment(),\n+    }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "88af8b49b9e7e72905c93a69322b4255d69cd8fa", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -14,7 +14,6 @@ use syntax::ast;\n use syntax::attr;\n use errors;\n use syntax_pos::Span;\n-use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n@@ -44,7 +43,6 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n                              hir_map: &Map)\n                              -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "7c0522a9c8cf81422c017437c79143e25d07ab43", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -192,8 +192,6 @@ pub fn link_binary(sess: &Session,\n                    trans: &CrateTranslation,\n                    outputs: &OutputFilenames,\n                    crate_name: &str) -> Vec<PathBuf> {\n-    let _task = sess.dep_graph.in_task(DepNode::LinkBinary);\n-\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error."}, {"sha": "cb8022efedb84146a166b0682771dc539f77f574", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -38,7 +38,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use middle::lang_items::StartFnLangItem;\n use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::dep_graph::{AssertDepGraphSafe, DepNode};\n+use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n@@ -1057,8 +1057,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n                              incremental_hashes_map: &IncrementalHashesMap)\n                              -> CrateTranslation {\n-    let _task = tcx.dep_graph.in_task(DepNode::TransCrate);\n-\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the"}, {"sha": "0f5a38ac7f6b886343372514dd9ce887baa29a08", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -418,16 +418,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 };\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n \n-                if intrinsic == Some(\"move_val_init\") {\n-                    let &(_, target) = destination.as_ref().unwrap();\n-                    // The first argument is a thin destination pointer.\n-                    let llptr = self.trans_operand(&bcx, &args[0]).immediate();\n-                    let val = self.trans_operand(&bcx, &args[1]);\n-                    self.store_operand(&bcx, llptr, None, val);\n-                    funclet_br(self, bcx, target);\n-                    return;\n-                }\n-\n                 if intrinsic == Some(\"transmute\") {\n                     let &(ref dest, target) = destination.as_ref().unwrap();\n                     self.trans_transmute(&bcx, &args[0], dest);"}, {"sha": "32aeeeb110556804c12f3287f0f8b35cb3d5941a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -82,7 +82,6 @@ pub use self::compare_method::{compare_impl_method, compare_const_impl};\n use self::TupleArgumentsFlag::*;\n \n use astconv::AstConv;\n-use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -577,14 +576,13 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut visit.as_deep_visitor());\n+        tcx.hir.krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n     })\n }\n \n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n-        tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemType,\n-                                          &mut CheckItemTypesVisitor { tcx });\n+        tcx.hir.krate().visit_all_item_likes(&mut CheckItemTypesVisitor { tcx });\n     })\n }\n "}, {"sha": "c9479c5cebc3ed469cc8dec39ebfd4083273bff6", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use lint;\n-use rustc::dep_graph::DepNode;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n@@ -62,8 +61,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n-\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_id = tcx.hir.body_owner(body_id);"}, {"sha": "b385ddc49c1ee094432220d0af1472ef610b837b", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -18,7 +18,6 @@\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n-use rustc::dep_graph::DepNode;\n \n use syntax::ast;\n use syntax_pos::DUMMY_SP;\n@@ -132,7 +131,6 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::Coherence);\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n         ty::queries::coherent_trait::get(tcx, DUMMY_SP, (LOCAL_CRATE, trait_def_id));\n     }"}, {"sha": "8ded3003c78eb312fa943f79f6f287d71156b5d8", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -13,13 +13,12 @@\n \n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n+    tcx.hir.krate().visit_all_item_likes(&mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx: 'cx> {"}, {"sha": "74edc7bff495c24dfcbcd4ee2fdca0ef7eeb801f", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -24,7 +24,7 @@ pub fn check_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     // this secondary walk specifically checks for some other cases,\n     // like defaulted traits, for which additional overlap rules exist\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOverlapCheckSpecial, &mut overlap);\n+    tcx.hir.krate().visit_all_item_likes(&mut overlap);\n }\n \n pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {"}, {"sha": "af0ef279e4f0dfdc894524d9ea31fede68b117aa", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -64,7 +64,6 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use rustc::dep_graph::DepNode;\n use util::nodemap::{NodeMap, FxHashMap};\n \n use rustc_const_math::ConstInt;\n@@ -87,7 +86,7 @@ use rustc::hir::def_id::DefId;\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CollectItemTypesVisitor { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CollectItem, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -126,57 +125,13 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>\n }\n \n-impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n-    /// Collect item types is structured into two tasks. The outer\n-    /// task, `CollectItem`, walks the entire content of an item-like\n-    /// thing, including its body. It also spawns an inner task,\n-    /// `CollectItemSig`, which walks only the signature. This inner\n-    /// task is the one that writes the item-type into the various\n-    /// maps.  This setup ensures that the item body is never\n-    /// accessible to the task that computes its signature, so that\n-    /// changes to the body don't affect the signature.\n-    ///\n-    /// Consider an example function `foo` that also has a closure in its body:\n-    ///\n-    /// ```\n-    /// fn foo(<sig>) {\n-    ///     ...\n-    ///     let bar = || ...; // we'll label this closure as \"bar\" below\n-    /// }\n-    /// ```\n-    ///\n-    /// This results in a dep-graph like so. I've labeled the edges to\n-    /// document where they arise.\n-    ///\n-    /// ```\n-    /// [HirBody(foo)] -2--> [CollectItem(foo)] -4-> [ItemSignature(bar)]\n-    ///                       ^           ^\n-    ///                       1           3\n-    /// [Hir(foo)] -----------+-6-> [CollectItemSig(foo)] -5-> [ItemSignature(foo)]\n-    /// ```\n-    ///\n-    /// 1. This is added by the `visit_all_item_likes_in_krate`.\n-    /// 2. This is added when we fetch the item body.\n-    /// 3. This is added because `CollectItem` launches `CollectItemSig`.\n-    ///    - it is arguably false; if we refactor the `with_task` system;\n-    ///      we could get probably rid of it, but it is also harmless enough.\n-    /// 4. This is added by the code in `visit_expr` when we write to `item_types`.\n-    /// 5. This is added by the code in `convert_item` when we write to `item_types`;\n-    ///    note that this write occurs inside the `CollectItemSig` task.\n-    /// 6. Added by reads from within `op`.\n-    fn with_collect_item_sig(&self, id: ast::NodeId, op: fn(TyCtxt<'a, 'tcx, 'tcx>, ast::NodeId)) {\n-        let def_id = self.tcx.hir.local_def_id(id);\n-        self.tcx.dep_graph.with_task(DepNode::CollectItemSig(def_id), self.tcx, id, op);\n-    }\n-}\n-\n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.with_collect_item_sig(item.id, convert_item);\n+        convert_item(self.tcx, item.id);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -209,12 +164,12 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        self.with_collect_item_sig(trait_item.id, convert_trait_item);\n+        convert_trait_item(self.tcx, trait_item.id);\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        self.with_collect_item_sig(impl_item.id, convert_impl_item);\n+        convert_impl_item(self.tcx, impl_item.id);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }"}, {"sha": "5751dc5ab8a0ab867a8500694ccb8bc09ead1f3f", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -19,7 +19,6 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use constrained_type_params as ctp;\n-use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -63,7 +62,7 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut ImplWfCheck { tcx: tcx });\n+    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx: tcx });\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "e9a606dc0ab1dfe10f9130f264869935d397c4dc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -104,7 +104,6 @@ pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n@@ -273,7 +272,6 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::CheckEntryFn);\n     if let Some((id, sp)) = *tcx.sess.entry_fn.borrow() {\n         match tcx.sess.entry_type.get() {\n             Some(config::EntryMain) => check_main_fn_ty(tcx, id, sp),"}, {"sha": "95e9438cd719121bc5eca9ece06e87ca87489855", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -270,19 +270,22 @@ impl Command {\n         }\n \n         if let Some(fd) = stdio.stderr.fd() {\n-            let _ = syscall::close(2);\n-            t!(cvt(syscall::dup(fd, &[])));\n-            let _ = syscall::close(fd);\n+            t!(cvt(syscall::dup2(fd, 2, &[])));\n+            let mut flags = t!(cvt(syscall::fcntl(2, syscall::F_GETFL, 0)));\n+            flags &= ! syscall::O_CLOEXEC;\n+            t!(cvt(syscall::fcntl(2, syscall::F_SETFL, flags)));\n         }\n         if let Some(fd) = stdio.stdout.fd() {\n-            let _ = syscall::close(1);\n-            t!(cvt(syscall::dup(fd, &[])));\n-            let _ = syscall::close(fd);\n+            t!(cvt(syscall::dup2(fd, 1, &[])));\n+            let mut flags = t!(cvt(syscall::fcntl(1, syscall::F_GETFL, 0)));\n+            flags &= ! syscall::O_CLOEXEC;\n+            t!(cvt(syscall::fcntl(1, syscall::F_SETFL, flags)));\n         }\n         if let Some(fd) = stdio.stdin.fd() {\n-            let _ = syscall::close(0);\n-            t!(cvt(syscall::dup(fd, &[])));\n-            let _ = syscall::close(fd);\n+            t!(cvt(syscall::dup2(fd, 0, &[])));\n+            let mut flags = t!(cvt(syscall::fcntl(0, syscall::F_GETFL, 0)));\n+            flags &= ! syscall::O_CLOEXEC;\n+            t!(cvt(syscall::fcntl(0, syscall::F_SETFL, flags)));\n         }\n \n         if let Some(g) = self.gid {"}, {"sha": "fadf7325d75757e92862db585af20acf5b782d63", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -71,6 +71,11 @@ pub fn dup(fd: usize, buf: &[u8]) -> Result<usize> {\n     unsafe { syscall3(SYS_DUP, fd, buf.as_ptr() as usize, buf.len()) }\n }\n \n+/// Copy and transform a file descriptor\n+pub fn dup2(fd: usize, newfd: usize, buf: &[u8]) -> Result<usize> {\n+    unsafe { syscall4(SYS_DUP2, fd, newfd, buf.as_ptr() as usize, buf.len()) }\n+}\n+\n /// Replace the current process with a new executable\n pub fn execve(path: &str, args: &[[usize; 2]]) -> Result<usize> {\n     unsafe { syscall4(SYS_EXECVE, path.as_ptr() as usize, path.len(),"}, {"sha": "98f8b73e4e1bb3845a91d3d52f51829285af465d", "filename": "src/libstd/sys/redox/syscall/number.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -28,6 +28,7 @@ pub const SYS_UNLINK: usize =   SYS_CLASS_PATH | 10;\n \n pub const SYS_CLOSE: usize =    SYS_CLASS_FILE | 6;\n pub const SYS_DUP: usize =      SYS_CLASS_FILE | SYS_RET_FILE | 41;\n+pub const SYS_DUP2: usize =     SYS_CLASS_FILE | SYS_RET_FILE | 63;\n pub const SYS_READ: usize =     SYS_CLASS_FILE | SYS_ARG_MSLICE | 3;\n pub const SYS_WRITE: usize =    SYS_CLASS_FILE | SYS_ARG_SLICE | 4;\n pub const SYS_LSEEK: usize =    SYS_CLASS_FILE | 19;"}, {"sha": "04fe5f78b03ce71bc99654739c2433e14d162d5c", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 4, "deletions": 80, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -93,87 +93,11 @@ fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     Ok(())\n }\n \n-fn filter_frames(frames: &[Frame],\n-                 format: PrintFormat,\n-                 context: &BacktraceContext) -> (usize, usize)\n+fn filter_frames(_frames: &[Frame],\n+                 _format: PrintFormat,\n+                 _context: &BacktraceContext) -> (usize, usize)\n {\n-    if format == PrintFormat::Full {\n-        return (0, 0);\n-    }\n-\n-    // We want to filter out frames with some prefixes\n-    // from both top and bottom of the call stack.\n-    static BAD_PREFIXES_TOP: &'static [&'static str] = &[\n-        \"_ZN3std3sys3imp9backtrace\",\n-        \"ZN3std3sys3imp9backtrace\",\n-        \"std::sys::imp::backtrace\",\n-        \"_ZN3std10sys_common9backtrace\",\n-        \"ZN3std10sys_common9backtrace\",\n-        \"std::sys_common::backtrace\",\n-        \"_ZN3std9panicking\",\n-        \"ZN3std9panicking\",\n-        \"std::panicking\",\n-        \"_ZN4core9panicking\",\n-        \"ZN4core9panicking\",\n-        \"core::panicking\",\n-        \"_ZN4core6result13unwrap_failed\",\n-        \"ZN4core6result13unwrap_failed\",\n-        \"core::result::unwrap_failed\",\n-        \"rust_begin_unwind\",\n-        \"_ZN4drop\",\n-        \"mingw_set_invalid_parameter_handler\",\n-    ];\n-    static BAD_PREFIXES_BOTTOM: &'static [&'static str] = &[\n-        \"_ZN3std9panicking\",\n-        \"ZN3std9panicking\",\n-        \"std::panicking\",\n-        \"_ZN3std5panic\",\n-        \"ZN3std5panic\",\n-        \"std::panic\",\n-        \"_ZN4core9panicking\",\n-        \"ZN4core9panicking\",\n-        \"core::panicking\",\n-        \"_ZN3std2rt10lang_start\",\n-        \"ZN3std2rt10lang_start\",\n-        \"std::rt::lang_start\",\n-        \"panic_unwind::__rust_maybe_catch_panic\",\n-        \"__rust_maybe_catch_panic\",\n-        \"_rust_maybe_catch_panic\",\n-        \"__libc_start_main\",\n-        \"__rust_try\",\n-        \"_start\",\n-        \"main\",\n-        \"BaseThreadInitThunk\",\n-        \"RtlInitializeExceptionChain\",\n-        \"__scrt_common_main_seh\",\n-        \"_ZN4drop\",\n-        \"mingw_set_invalid_parameter_handler\",\n-    ];\n-\n-    let is_good_frame = |frame: Frame, bad_prefixes: &[&str]| {\n-        resolve_symname(frame, |symname| {\n-            if let Some(mangled_symbol_name) = symname {\n-                if !bad_prefixes.iter().any(|s| mangled_symbol_name.starts_with(s)) {\n-                    return Ok(())\n-                }\n-            }\n-            Err(io::Error::from(io::ErrorKind::Other))\n-        }, context).is_ok()\n-    };\n-\n-    let skipped_before = frames.iter().position(|frame| {\n-        is_good_frame(*frame, BAD_PREFIXES_TOP)\n-    }).unwrap_or(frames.len());\n-    let skipped_after = frames[skipped_before..].iter().rev().position(|frame| {\n-        is_good_frame(*frame, BAD_PREFIXES_BOTTOM)\n-    }).unwrap_or(frames.len() - skipped_before);\n-\n-    if skipped_before + skipped_after == frames.len() {\n-        // Avoid showing completely empty backtraces\n-        return (0, 0);\n-    }\n-\n-    (skipped_before, skipped_after)\n+    (0, 0)\n }\n \n /// Controls how the backtrace should be formated."}, {"sha": "98b7db60b68fc8a6016519ee0fdaa0884c5fc285", "filename": "src/test/codegen/move-val-init.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Ftest%2Fcodegen%2Fmove-val-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Ftest%2Fcodegen%2Fmove-val-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmove-val-init.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+// test that `move_val_init` actually avoids big allocas\n+\n+use std::intrinsics::move_val_init;\n+\n+pub struct Big {\n+    pub data: [u8; 65536]\n+}\n+\n+// CHECK-LABEL: @test_mvi\n+#[no_mangle]\n+pub unsafe fn test_mvi(target: *mut Big, make_big: fn() -> Big) {\n+    // CHECK: call void %1(%Big*{{[^%]*}} %0)\n+    move_val_init(target, make_big());\n+}"}, {"sha": "7ed8b95f88b002b2a0f3748b9d6ca6db3284f6e8", "filename": "src/test/compile-fail/dep-graph-struct-signature.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2abadca2d065bf81772cb84981d0a22d8e98b3/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs?ref=9f2abadca2d065bf81772cb84981d0a22d8e98b3", "patch": "@@ -35,62 +35,51 @@ mod signatures {\n     use WillChange;\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     trait Bar {\n         #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-        #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n         fn do_something(x: WillChange);\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn some_fn(x: WillChange) { }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn new_foo(x: u32, y: u32) -> WillChange {\n         WillChange { x: x, y: y }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     impl WillChange {\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     impl WillChange {\n         fn method(&self, x: u32) { }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     struct WillChanges {\n         x: WillChange,\n         y: WillChange\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     trait A {\n         fn do_something_else_twice(x: WontChange);\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     fn b(x: WontChange) { }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path from `WillChange`\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path from `WillChange`\n     fn c(x: u32) { }\n }\n "}]}