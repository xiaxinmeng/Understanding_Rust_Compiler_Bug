{"sha": "c934ce9e0a267340920a8bef96d7c59a46910c55", "node_id": "C_kwDOAAsO6NoAKGM5MzRjZTllMGEyNjczNDA5MjBhOGJlZjk2ZDdjNTlhNDY5MTBjNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T00:11:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T00:11:26Z"}, "message": "Auto merge of #110024 - matthiaskrgr:rollup-mydkufd, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #109806 (Workaround #109797 on windows-gnu)\n - #109957 (diagnostics: account for self type when looking for source of unsolved type variable)\n - #109960 (Fix buffer overrun in bootstrap and (test-only) symlink_junction)\n - #110013 (Label `non_exhaustive` attribute on privacy errors from non-local items)\n - #110016 (Run collapsed GUI test in mobile mode as well)\n - #110022 (fix: fix regression in #109203)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5764d01b7371516bb3cb66975dcb160b1bed411b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5764d01b7371516bb3cb66975dcb160b1bed411b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c934ce9e0a267340920a8bef96d7c59a46910c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c934ce9e0a267340920a8bef96d7c59a46910c55", "html_url": "https://github.com/rust-lang/rust/commit/c934ce9e0a267340920a8bef96d7c59a46910c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c934ce9e0a267340920a8bef96d7c59a46910c55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a29282f6dde2e4aba6e1e4cfea5c9430a00217", "html_url": "https://github.com/rust-lang/rust/commit/28a29282f6dde2e4aba6e1e4cfea5c9430a00217"}, {"sha": "903b439cacafec6b6b424c23f94ec4f6066bb82d", "url": "https://api.github.com/repos/rust-lang/rust/commits/903b439cacafec6b6b424c23f94ec4f6066bb82d", "html_url": "https://github.com/rust-lang/rust/commit/903b439cacafec6b6b424c23f94ec4f6066bb82d"}], "stats": {"total": 316, "additions": 183, "deletions": 133}, "files": [{"sha": "d7b900ca02d3e0bca860b237f0bd7842d8441258", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -1191,11 +1191,14 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                 have_turbofish,\n             } = args;\n             let generics = tcx.generics_of(generics_def_id);\n-            if let Some(argument_index) = generics\n+            if let Some(mut argument_index) = generics\n                 .own_substs(substs)\n                 .iter()\n                 .position(|&arg| self.generic_arg_contains_target(arg))\n             {\n+                if generics.parent.is_none() && generics.has_self {\n+                    argument_index += 1;\n+                }\n                 let substs = self.infcx.resolve_vars_if_possible(substs);\n                 let generic_args = &generics.own_substs_no_defaults(tcx, substs)\n                     [generics.own_counts().lifetimes..];"}, {"sha": "e03ce5d712056cbedee23fadc5850eb59a21639e", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -423,11 +423,11 @@ impl<'a> Parser<'a> {\n         if let token::Literal(Lit {\n             kind: token::LitKind::Integer | token::LitKind::Float,\n             symbol,\n-            suffix,\n+            suffix: Some(suffix), // no suffix makes it a valid literal\n         }) = self.token.kind\n             && rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n         {\n-            Some((symbol.as_str().len(), suffix.unwrap()))\n+            Some((symbol.as_str().len(), suffix))\n         } else {\n             None\n         }"}, {"sha": "0c9d306081eb8c95673ac940737635d636e77a91", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -1607,7 +1607,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut err =\n             struct_span_err!(self.tcx.sess, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n         err.span_label(ident.span, &format!(\"private {}\", descr));\n-        if let Some(span) = ctor_fields_span {\n+\n+        let mut non_exhaustive = None;\n+        // If an ADT is foreign and marked as `non_exhaustive`, then that's\n+        // probably why we have the privacy error.\n+        // Otherwise, point out if the struct has any private fields.\n+        if let Some(def_id) = res.opt_def_id()\n+            && !def_id.is_local()\n+            && let Some(attr) = self.tcx.get_attr(def_id, sym::non_exhaustive)\n+        {\n+            non_exhaustive = Some(attr.span);\n+        } else if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n             if let Res::Def(_, d) = res && let Some(fields) = self.field_visibility_spans.get(&d) {\n                 err.multipart_suggestion_verbose(\n@@ -1656,6 +1666,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if !first && binding.vis.is_public() {\n                 note_span.push_span_label(def_span, \"consider importing it directly\");\n             }\n+            // Final step in the import chain, point out if the ADT is `non_exhaustive`\n+            // which is probably why this privacy violation occurred.\n+            if next_binding.is_none() && let Some(span) = non_exhaustive {\n+                note_span.push_span_label(\n+                    span,\n+                    format!(\"cannot be constructed because it is `#[non_exhaustive]`\"),\n+                );\n+            }\n             err.span_note(note_span, &msg);\n         }\n "}, {"sha": "1442a397e767e6a178f49f774329c04e6d8217de", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -49,7 +49,9 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            #[cfg_attr(not(bootstrap), inline)]\n+            // `#[inline] does not work on windows-gnu due to linking errors around dllimports.\n+            // See https://github.com/rust-lang/rust/issues/109797.\n+            #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "956db577d537182cd4fbd37e4329a2eb4528b7c8", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -1403,24 +1403,40 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n     opts.custom_flags(c::FILE_FLAG_OPEN_REPARSE_POINT | c::FILE_FLAG_BACKUP_SEMANTICS);\n     let f = File::open(junction, &opts)?;\n     let h = f.as_inner().as_raw_handle();\n-\n     unsafe {\n         let mut data = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n         let data_ptr = data.0.as_mut_ptr();\n+        let data_end = data_ptr.add(c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE);\n         let db = data_ptr.cast::<c::REPARSE_MOUNTPOINT_DATA_BUFFER>();\n         // Zero the header to ensure it's fully initialized, including reserved parameters.\n         *db = mem::zeroed();\n-        let buf = ptr::addr_of_mut!((*db).ReparseTarget).cast::<c::WCHAR>();\n-        let mut i = 0;\n+        let reparse_target_slice = {\n+            let buf_start = ptr::addr_of_mut!((*db).ReparseTarget).cast::<c::WCHAR>();\n+            // Compute offset in bytes and then divide so that we round down\n+            // rather than hit any UB (admittedly this arithmetic should work\n+            // out so that this isn't necessary)\n+            let buf_len_bytes = usize::try_from(data_end.byte_offset_from(buf_start)).unwrap();\n+            let buf_len_wchars = buf_len_bytes / core::mem::size_of::<c::WCHAR>();\n+            core::slice::from_raw_parts_mut(buf_start, buf_len_wchars)\n+        };\n+\n         // FIXME: this conversion is very hacky\n-        let v = br\"\\??\\\";\n-        let v = v.iter().map(|x| *x as u16);\n-        for c in v.chain(original.as_os_str().encode_wide()) {\n-            *buf.add(i) = c;\n+        let iter = br\"\\??\\\"\n+            .iter()\n+            .map(|x| *x as u16)\n+            .chain(original.as_os_str().encode_wide())\n+            .chain(core::iter::once(0));\n+        let mut i = 0;\n+        for c in iter {\n+            if i >= reparse_target_slice.len() {\n+                return Err(crate::io::const_io_error!(\n+                    crate::io::ErrorKind::InvalidFilename,\n+                    \"Input filename is too long\"\n+                ));\n+            }\n+            reparse_target_slice[i] = c;\n             i += 1;\n         }\n-        *buf.add(i) = 0;\n-        i += 1;\n         (*db).ReparseTag = c::IO_REPARSE_TAG_MOUNT_POINT;\n         (*db).ReparseTargetMaximumLength = (i * 2) as c::WORD;\n         (*db).ReparseTargetLength = ((i - 1) * 2) as c::WORD;"}, {"sha": "a158d1f718e2caa494ae889bdf4e0cb9d14d34d3", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -45,6 +45,7 @@ dependencies = [\n  \"hex\",\n  \"ignore\",\n  \"is-terminal\",\n+ \"junction\",\n  \"libc\",\n  \"object\",\n  \"once_cell\",\n@@ -349,6 +350,16 @@ version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"112c678d4050afce233f4f2852bb2eb519230b3cf12f33585275537d7e41578d\"\n \n+[[package]]\n+name = \"junction\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca39ef0d69b18e6a2fd14c2f0a1d593200f4a4ed949b240b5917ab51fac754cb\"\n+dependencies = [\n+ \"scopeguard\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\""}, {"sha": "eeda6d7c121f7c97c358bb5fa17a6c9871fd4372", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -61,6 +61,9 @@ sysinfo = { version = \"0.26.0\", optional = true }\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]\n fd-lock = \"3.0.8\"\n \n+[target.'cfg(windows)'.dependencies.junction]\n+version = \"1.0.0\"\n+\n [target.'cfg(windows)'.dependencies.windows]\n version = \"0.46.0\"\n features = ["}, {"sha": "2e1adbf63bb102bcf85dd103101a046e758ba074", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 98, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -146,106 +146,9 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n         fs::symlink(src, dest)\n     }\n \n-    // Creating a directory junction on windows involves dealing with reparse\n-    // points and the DeviceIoControl function, and this code is a skeleton of\n-    // what can be found here:\n-    //\n-    // http://www.flexhex.com/docs/articles/hard-links.phtml\n     #[cfg(windows)]\n     fn symlink_dir_inner(target: &Path, junction: &Path) -> io::Result<()> {\n-        use std::ffi::OsStr;\n-        use std::os::windows::ffi::OsStrExt;\n-\n-        use windows::{\n-            core::PCWSTR,\n-            Win32::Foundation::{CloseHandle, HANDLE},\n-            Win32::Storage::FileSystem::{\n-                CreateFileW, FILE_ACCESS_FLAGS, FILE_FLAG_BACKUP_SEMANTICS,\n-                FILE_FLAG_OPEN_REPARSE_POINT, FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE,\n-                MAXIMUM_REPARSE_DATA_BUFFER_SIZE, OPEN_EXISTING,\n-            },\n-            Win32::System::Ioctl::FSCTL_SET_REPARSE_POINT,\n-            Win32::System::SystemServices::{GENERIC_WRITE, IO_REPARSE_TAG_MOUNT_POINT},\n-            Win32::System::IO::DeviceIoControl,\n-        };\n-\n-        #[allow(non_snake_case)]\n-        #[repr(C)]\n-        struct REPARSE_MOUNTPOINT_DATA_BUFFER {\n-            ReparseTag: u32,\n-            ReparseDataLength: u32,\n-            Reserved: u16,\n-            ReparseTargetLength: u16,\n-            ReparseTargetMaximumLength: u16,\n-            Reserved1: u16,\n-            ReparseTarget: u16,\n-        }\n-\n-        fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n-            Ok(s.as_ref().encode_wide().chain(Some(0)).collect())\n-        }\n-\n-        // We're using low-level APIs to create the junction, and these are more\n-        // picky about paths. For example, forward slashes cannot be used as a\n-        // path separator, so we should try to canonicalize the path first.\n-        let target = fs::canonicalize(target)?;\n-\n-        fs::create_dir(junction)?;\n-\n-        let path = to_u16s(junction)?;\n-\n-        let h = unsafe {\n-            CreateFileW(\n-                PCWSTR(path.as_ptr()),\n-                FILE_ACCESS_FLAGS(GENERIC_WRITE),\n-                FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n-                None,\n-                OPEN_EXISTING,\n-                FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_BACKUP_SEMANTICS,\n-                HANDLE::default(),\n-            )\n-        }\n-        .map_err(|_| io::Error::last_os_error())?;\n-\n-        unsafe {\n-            #[repr(C, align(8))]\n-            struct Align8<T>(T);\n-            let mut data = Align8([0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize]);\n-            let db = data.0.as_mut_ptr() as *mut REPARSE_MOUNTPOINT_DATA_BUFFER;\n-            let buf = core::ptr::addr_of_mut!((*db).ReparseTarget) as *mut u16;\n-            let mut i = 0;\n-            // FIXME: this conversion is very hacky\n-            let v = br\"\\??\\\";\n-            let v = v.iter().map(|x| *x as u16);\n-            for c in v.chain(target.as_os_str().encode_wide().skip(4)) {\n-                *buf.offset(i) = c;\n-                i += 1;\n-            }\n-            *buf.offset(i) = 0;\n-            i += 1;\n-\n-            (*db).ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n-            (*db).ReparseTargetMaximumLength = (i * 2) as u16;\n-            (*db).ReparseTargetLength = ((i - 1) * 2) as u16;\n-            (*db).ReparseDataLength = ((*db).ReparseTargetLength + 12) as u32;\n-\n-            let mut ret = 0u32;\n-            DeviceIoControl(\n-                h,\n-                FSCTL_SET_REPARSE_POINT,\n-                Some(db.cast()),\n-                (*db).ReparseDataLength + 8,\n-                None,\n-                0,\n-                Some(&mut ret),\n-                None,\n-            )\n-            .ok()\n-            .map_err(|_| io::Error::last_os_error())?;\n-        }\n-\n-        unsafe { CloseHandle(h) };\n-        Ok(())\n+        junction::create(&target, &junction)\n     }\n }\n "}, {"sha": "ec42312523641c96011d2a4c408b04401aa32308", "filename": "tests/rustdoc-gui/go-to-collapsed-elem.goml", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -9,13 +9,32 @@ property: (\"#implementations-list .implementors-toggle\", {\"open\": \"false\"})\n click: \"//*[@class='sidebar']//a[@href='#method.must_use']\"\n assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n \n-// Now we do the same through search result.\n-// First we reload the page without the anchor in the URL.\n+define-function: (\"collapsed-from-search\", (), block {\n+    // Now we do the same through search result.\n+    // First we reload the page without the anchor in the URL.\n+    goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n+    // Then we collapse the section again...\n+    property: (\"#implementations-list .implementors-toggle\", {\"open\": \"false\"})\n+    // Then we run the search.\n+    write: (\".search-input\", \"foo::must_use\")\n+    wait-for: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n+    click: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n+    assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n+})\n+\n+call-function: (\"collapsed-from-search\", {})\n+\n+// Now running the same check but with mobile.\n+size: (600, 600)\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-// Then we collapse the section again...\n+// We check that the implementors block is expanded.\n+assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n+// We now collapse the implementors block.\n property: (\"#implementations-list .implementors-toggle\", {\"open\": \"false\"})\n-// Then we run the search.\n-write: (\".search-input\", \"foo::must_use\")\n-wait-for: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n-click: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n+// First we expand the mobile menu.\n+click: \".sidebar-menu-toggle\"\n+// Then we click on the link to the method to ensure it'll expand the implementors block.\n+click: \"//*[@class='sidebar shown']//a[@href='#method.must_use']\"\n assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n+\n+call-function: (\"collapsed-from-search\", {})"}, {"sha": "fc79e6201bdb85755cfc9ec26e25b61a9cfc8cd5", "filename": "tests/ui/inference/need_type_info/concrete-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -7,10 +7,13 @@ struct Two;\n struct Struct;\n \n impl Ambiguous<One> for Struct {}\n+//~^ NOTE multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n impl Ambiguous<Two> for Struct {}\n \n fn main() {\n     <Struct as Ambiguous<_>>::method();\n     //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `A`\n     //~| ERROR type annotations needed\n+    //~| NOTE infer type of the type parameter `A`\n }"}, {"sha": "74c3f6cd5cfad44164407db37a08cbd78eb4a181", "filename": "tests/ui/inference/need_type_info/concrete-impl.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -1,20 +1,21 @@\n error[E0282]: type annotations needed\n-  --> $DIR/concrete-impl.rs:13:5\n+  --> $DIR/concrete-impl.rs:14:5\n    |\n LL |     <Struct as Ambiguous<_>>::method();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `A` declared on the trait `Ambiguous`\n \n error[E0283]: type annotations needed\n-  --> $DIR/concrete-impl.rs:13:5\n+  --> $DIR/concrete-impl.rs:14:5\n    |\n LL |     <Struct as Ambiguous<_>>::method();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `A` declared on the trait `Ambiguous`\n    |\n note: multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n   --> $DIR/concrete-impl.rs:9:1\n    |\n LL | impl Ambiguous<One> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n LL | impl Ambiguous<Two> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "99d10a5eae047165fed183712301c32bfd81709d", "filename": "tests/ui/inference/need_type_info/issue-109905.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -0,0 +1,25 @@\n+// Test that we show the correct type parameter that couldn't be inferred and that we don't\n+// end up stating nonsense like \"type parameter `'a`\" which we used to do.\n+\n+trait Trait<'a, T> {\n+    fn m(self);\n+}\n+\n+impl<'a, A> Trait<'a, A> for () {\n+    fn m(self) {}\n+}\n+\n+fn qualified() {\n+    <() as Trait<'static, _>>::m(());\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `T`\n+\n+}\n+\n+fn unqualified() {\n+    Trait::<'static, _>::m(());\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `T`\n+}\n+\n+fn main() {}"}, {"sha": "fcdd50f1422661c169a435df3d8fdf25cdc1d77b", "filename": "tests/ui/inference/need_type_info/issue-109905.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-109905.rs:13:5\n+   |\n+LL |     <() as Trait<'static, _>>::m(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the trait `Trait`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-109905.rs:20:5\n+   |\n+LL |     Trait::<'static, _>::m(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the trait `Trait`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "69d8f402bb620760364487b74a02d34f0da4daa2", "filename": "tests/ui/parser/issues/issue-110014.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.rs?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -0,0 +1,3 @@\n+fn`2222222222222222222222222222222222222222() {}\n+//~^ ERROR unknown start of token: `\n+//~^^ ERROR expected identifier, found `2222222222222222222222222222222222222222`"}, {"sha": "7f1dd592e1238bdb4d38aed87f3879502ca5229a", "filename": "tests/ui/parser/issues/issue-110014.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-110014.stderr?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -0,0 +1,19 @@\n+error: unknown start of token: `\n+  --> $DIR/issue-110014.rs:1:3\n+   |\n+LL | fn`2222222222222222222222222222222222222222() {}\n+   |   ^\n+   |\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+   |\n+LL | fn'2222222222222222222222222222222222222222() {}\n+   |   ~\n+\n+error: expected identifier, found `2222222222222222222222222222222222222222`\n+  --> $DIR/issue-110014.rs:1:4\n+   |\n+LL | fn`2222222222222222222222222222222222222222() {}\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected identifier\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "39b1ef1e078c7e7af19feb8d05354b4ae61b7746", "filename": "tests/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -10,14 +10,11 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^ private tuple struct constructor\n    |\n-  ::: $DIR/auxiliary/structs.rs:12:24\n-   |\n-LL | pub struct TupleStruct(pub u16, pub u16);\n-   |                        ---------------- a constructor is private if any of the fields is private\n-   |\n note: the tuple struct constructor `TupleStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:12:1\n    |\n+LL | #[non_exhaustive]\n+   | ----------------- cannot be constructed because it is `#[non_exhaustive]`\n LL | pub struct TupleStruct(pub u16, pub u16);\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n@@ -30,6 +27,8 @@ LL |     let us_explicit = structs::UnitStruct;\n note: the unit struct `UnitStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:9:1\n    |\n+LL | #[non_exhaustive]\n+   | ----------------- cannot be constructed because it is `#[non_exhaustive]`\n LL | pub struct UnitStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "4083f57a9cdf9ca8c2ef5b81c146bd8c298f6013", "filename": "tests/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c934ce9e0a267340920a8bef96d7c59a46910c55/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=c934ce9e0a267340920a8bef96d7c59a46910c55", "patch": "@@ -8,7 +8,9 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n@@ -20,7 +22,9 @@ note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n    |\n LL |     #[non_exhaustive] Unit,\n-   |                       ^^^^\n+   |     ----------------- ^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:18:32\n@@ -32,7 +36,9 @@ note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n    |\n LL |     #[non_exhaustive] Unit,\n-   |                       ^^^^\n+   |     ----------------- ^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:20:32\n@@ -44,7 +50,9 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n@@ -56,7 +64,9 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0639]: cannot create non-exhaustive variant using struct expression\n   --> $DIR/variant.rs:8:26"}]}