{"sha": "f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NjFhMTViMmJkNWMyYTllYTk4NGM3MmMyOGNhZjk3MDMxN2Q4YTM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T15:20:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T15:20:47Z"}, "message": "std: remove vec::each2 and vec::each2_mut in favour of iterators", "tree": {"sha": "e7d02bba11ee7cb1016d1f4b047ab723d3ac443a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d02bba11ee7cb1016d1f4b047ab723d3ac443a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "html_url": "https://github.com/rust-lang/rust/commit/f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9f006c5b95ea98893b0398decd458fd642f38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9f006c5b95ea98893b0398decd458fd642f38f", "html_url": "https://github.com/rust-lang/rust/commit/5e9f006c5b95ea98893b0398decd458fd642f38f"}], "stats": {"total": 121, "additions": 24, "deletions": 97}, "files": [{"sha": "543264ba11ed05c699e537738c0a40d562985681", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -17,6 +17,7 @@ use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n use util::ppaux::UserString;\n \n+use core::iterator::IteratorUtil;\n use core::vec;\n use syntax::ast::*;\n use syntax::attr::attrs_contains_name;\n@@ -268,7 +269,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n                   ts.repr(cx.tcx),\n                   type_param_defs.repr(cx.tcx));\n         }\n-        for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n+        for ts.iter().zip(type_param_defs.iter()).advance |(&ty, type_param_def)| {\n             check_bounds(cx, type_parameter_id, e.span, ty, type_param_def)\n         }\n     }\n@@ -309,7 +310,7 @@ fn check_ty(aty: @Ty, cx: Context, v: visit::vt<Context>) {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&id));\n             let type_param_defs =\n                 ty::lookup_item_type(cx.tcx, did).generics.type_param_defs;\n-            for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n+            for ts.iter().zip(type_param_defs.iter()).advance |(&ty, type_param_def)| {\n                 check_bounds(cx, aty.id, aty.span, ty, type_param_def)\n             }\n         }"}, {"sha": "88f97cfa0b8f5660aa1f137187a1406c18e9b1cc", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -19,6 +19,7 @@ use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::iterator::IteratorUtil;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n@@ -75,7 +76,7 @@ pub fn maybe_instantiate_inline(ccx: @CrateContext, fn_id: ast::def_id,\n             ast::item_enum(_, _) => {\n               let vs_here = ty::enum_variants(ccx.tcx, local_def(item.id));\n               let vs_there = ty::enum_variants(ccx.tcx, parent_id);\n-              for vec::each2(*vs_here, *vs_there) |here, there| {\n+              for vs_here.iter().zip(vs_there.iter()).advance |(here, there)| {\n                   if there.id == fn_id { my_id = here.id.node; }\n                   ccx.external.insert(there.id, Some(here.id.node));\n               }"}, {"sha": "b1b1b5212af6701f5d1ae14946b7ae33111af2e7", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -33,6 +33,7 @@ use middle::trans::inline;\n use middle::ty;\n use middle::typeck;\n \n+use core::iterator::IteratorUtil;\n use core::option::{Some, None};\n use core::uint;\n use core::vec;\n@@ -264,7 +265,7 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n     for opt_static_did.each |&did| {\n         for cx.ccx.tcx.node_type_substs.find_copy(&callee_id).each |ts| {\n             let type_uses = type_uses_for(cx.ccx, did, ts.len());\n-            for vec::each2(*type_uses, *ts) |uses, subst| {\n+            for type_uses.iter().zip(ts.iter()).advance |(uses, subst)| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }\n@@ -302,7 +303,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         for opt_ts.each |ts| {\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get_copy(&e.id));\n             let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n-            for vec::each2(*uses_for_ts, *ts) |uses, subst| {\n+            for uses_for_ts.iter().zip(ts.iter()).advance |(uses, subst)| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }"}, {"sha": "13f41c06e183921d089ff48d959663dd6d1ab243", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -18,8 +18,8 @@ use middle::typeck::check::{instantiate_path, lookup_def};\n use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::{HashMap, HashSet};\n-use core::vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n@@ -232,7 +232,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n \n         if !error_happened {\n             for subpats.each |pats| {\n-                for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n+                for pats.iter().zip(arg_types.iter()).advance |(subpat, arg_ty)| {\n                     check_pat(pcx, *subpat, *arg_ty);\n                 }\n             }"}, {"sha": "1e5f8970448ab66324219efec2775bc4ade4b568", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -110,6 +110,8 @@ use util::common::{block_query, indenter, loop_query};\n use util::ppaux::{bound_region_to_str};\n use util::ppaux;\n \n+\n+use core::iterator::IteratorUtil;\n use core::cast::transmute;\n use core::hashmap::HashMap;\n use core::result;\n@@ -412,7 +414,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n     for opt_self_info.each |self_info| {\n         fcx.write_ty(self_info.self_id, self_info.self_ty);\n     }\n-    for vec::each2(decl.inputs, arg_tys) |input, arg| {\n+    for decl.inputs.iter().zip(arg_tys.iter()).advance |(input, arg)| {\n         fcx.write_ty(input.id, *arg);\n     }\n \n@@ -449,7 +451,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n \n         // Add formal parameters.\n-        for vec::each2(arg_tys, decl.inputs) |arg_ty, input| {\n+        for arg_tys.iter().zip(decl.inputs.iter()).advance |(arg_ty, input)| {\n             // Create type variables for each argument.\n             do pat_util::pat_bindings(tcx.def_map, input.pat)\n                     |_bm, pat_id, _sp, _path| {"}, {"sha": "dcf165b0496cfdb24cde67f28c35d5102c5ce789", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -54,6 +54,7 @@ use syntax::visit::{Visitor, SimpleVisitor};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::{HashMap, HashSet};\n use core::old_iter;\n use core::result::Ok;\n@@ -617,9 +618,9 @@ impl CoherenceChecker {\n                 // Check to ensure that each parameter binding respected its\n                 // kind bounds.\n                 for [ a, b ].each |result| {\n-                    for vec::each2(result.type_variables,\n-                                   *result.type_param_defs)\n-                        |ty_var, type_param_def|\n+                    for result.type_variables.iter()\n+                        .zip(result.type_param_defs.iter())\n+                        .advance |(ty_var, type_param_def)|\n                     {\n                         if type_param_def.bounds.builtin_bounds.contains_elem(\n                             ty::BoundCopy)"}, {"sha": "54efd35b91e3f892345c6a6d59f5c6a804e419e8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -1666,44 +1666,6 @@ pub fn eachi_reverse<'r,T>(v: &'r [T],\n     return true;\n }\n \n-/**\n- * Iterates over two vectors simultaneously\n- *\n- * # Failure\n- *\n- * Both vectors must have the same length\n- */\n-#[inline]\n-pub fn each2<U, T>(v1: &[U], v2: &[T], f: &fn(u: &U, t: &T) -> bool) -> bool {\n-    assert_eq!(v1.len(), v2.len());\n-    for uint::range(0u, v1.len()) |i| {\n-        if !f(&v1[i], &v2[i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-/**\n- *\n- * Iterates over two vector with mutable.\n- *\n- * # Failure\n- *\n- * Both vectors must have the same length\n- */\n-#[inline]\n-pub fn each2_mut<U, T>(v1: &mut [U], v2: &mut [T],\n-                       f: &fn(u: &mut U, t: &mut T) -> bool) -> bool {\n-    assert_eq!(v1.len(), v2.len());\n-    for uint::range(0u, v1.len()) |i| {\n-        if !f(&mut v1[i], &mut v2[i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *"}, {"sha": "b36d44964928f28e3a1af102d0c17aef50b54db3", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -174,6 +174,7 @@ use opt_vec;\n \n use core::uint;\n use core::vec;\n+use core::iterator::IteratorUtil;\n \n pub use self::ty::*;\n mod ty;\n@@ -616,7 +617,7 @@ impl<'self> MethodDef<'self> {\n         // make a series of nested matches, to destructure the\n         // structs. This is actually right-to-left, but it shoudn't\n         // matter.\n-        for vec::each2(self_args, patterns) |&arg_expr, &pat| {\n+        for self_args.iter().zip(patterns.iter()).advance |(&arg_expr, &pat)| {\n             body = cx.expr_match(span, arg_expr,\n                                  ~[ cx.arm(span, ~[pat], body) ])\n         }\n@@ -951,7 +952,7 @@ fn create_struct_pattern(cx: @ExtCtxt,\n     // must be nonempty to reach here\n     let pattern = if struct_type == Record {\n         let field_pats = do vec::build |push| {\n-            for vec::each2(subpats, ident_expr) |&pat, &(id, _)| {\n+            for subpats.iter().zip(ident_expr.iter()).advance |(&pat, &(id, _))| {\n                 // id is guaranteed to be Some\n                 push(ast::field_pat { ident: id.get(), pat: pat })\n             }"}, {"sha": "4dd4d2b5847223b13405bcf3478bbff980139e32", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f661a15b2bd5c2a9ea984c72c28caf970317d8a3/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::*;\n use std::from_str::FromStr;\n use std::i32::range;\n use std::os;\n@@ -29,9 +30,8 @@ fn fannkuch_redux(n: i32) -> i32 {\n                 r -= 1;\n             }\n \n-            // XXX: Need each2_mut.\n-            for vec::eachi_mut(perm) |i, perm_i| {\n-                *perm_i = perm1.unsafe_get(i);\n+            for perm.mut_iter().zip(perm1.iter()).advance |(perm_i, perm1_i)| {\n+                *perm_i = *perm1_i;\n             }\n \n             let mut flips_count: i32 = 0;"}, {"sha": "73e0418993c41cf6bedae39c9e99d6d745c739d0", "filename": "src/test/run-pass/vec-each2_mut.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5e9f006c5b95ea98893b0398decd458fd642f38f/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9f006c5b95ea98893b0398decd458fd642f38f/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs?ref=5e9f006c5b95ea98893b0398decd458fd642f38f", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// -*- rust -*-\n-\n-use std::io;\n-use std::vec;\n-\n-fn main(){\n-    let mut t1 = ~[];\n-    t1.push('a');\n-\n-    let mut t2 = ~[];\n-    t2.push('b');\n-\n-    for vec::each2_mut(t1, t2) | i1, i2 | {\n-        assert_eq!(*i1, 'a');\n-        assert_eq!(*i2, 'b');\n-    }\n-\n-    for vec::each2(t1, t2) | i1, i2 | {\n-        io::println(fmt!(\"after t1: %?, t2: %?\", i1, i2));\n-    }\n-\n-    for vec::each2_mut(t1, t2) | i1, i2 | {\n-        *i1 = 'b';\n-        *i2 = 'a';\n-        assert_eq!(*i1, 'b');\n-        assert_eq!(*i2, 'a');\n-    }\n-\n-    for vec::each2(t1, t2) | i1, i2 | {\n-        io::println(fmt!(\"before t1: %?, t2: %?\", i1, i2));\n-    }\n-}"}]}