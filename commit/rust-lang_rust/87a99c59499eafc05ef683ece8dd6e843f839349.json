{"sha": "87a99c59499eafc05ef683ece8dd6e843f839349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YTk5YzU5NDk5ZWFmYzA1ZWY2ODNlY2U4ZGQ2ZTg0M2Y4MzkzNDk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-02T14:36:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T14:36:54Z"}, "message": "Rollup merge of #87687 - camsteffen:inline-macros, r=oli-obk\n\nInline some macros\n\nI factored out some macros that are not really necessary.", "tree": {"sha": "e542e421c55064ce001aa874653473bb502872b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e542e421c55064ce001aa874653473bb502872b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a99c59499eafc05ef683ece8dd6e843f839349", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCAMGCRBK7hj4Ov3rIwAAItoIAG24Ic3iVhxtkuXeyFvfH5A6\nQ7fgNAHL2xMc91mxJKc5LbidpD/6sASek1bCEZ9MB14i5KpI5OtANHC8xSJi1+ao\nHvVBueBfBnTzc2YsgRevbV2iaT+arzemFtiQZFPWG+nDmFNUkX4dsxIoQFL0l9d2\n+HYLmF2JouFoQBzLWFBgOBjeWaj+zXosg96QjgD6f/KtpmkcsGE48m0omp7SLJOp\nepvtQCvuwVbGIxfctJ4Z7CMPw8cDnJDmYRopFjo8KSMOZf+mnFxoGJ638qQwBrj5\neoR4yGh8GArfMKO9s0IThMJ82kifbDcWrffCtHguw1gcsEXb2gpukrAvFxmymHc=\n=XdSU\n-----END PGP SIGNATURE-----\n", "payload": "tree e542e421c55064ce001aa874653473bb502872b6\nparent 1b48f4d1ea42799f8022bf27a15d9338f0ab05d7\nparent 02cd72e34b36d7bf2e27b9eaedf2af4e19cc2d85\nauthor Cameron Steffen <cam.steffen94@gmail.com> 1627915014 -0500\ncommitter GitHub <noreply@github.com> 1627915014 -0500\n\nRollup merge of #87687 - camsteffen:inline-macros, r=oli-obk\n\nInline some macros\n\nI factored out some macros that are not really necessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a99c59499eafc05ef683ece8dd6e843f839349", "html_url": "https://github.com/rust-lang/rust/commit/87a99c59499eafc05ef683ece8dd6e843f839349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a99c59499eafc05ef683ece8dd6e843f839349/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "html_url": "https://github.com/rust-lang/rust/commit/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7"}, {"sha": "02cd72e34b36d7bf2e27b9eaedf2af4e19cc2d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cd72e34b36d7bf2e27b9eaedf2af4e19cc2d85", "html_url": "https://github.com/rust-lang/rust/commit/02cd72e34b36d7bf2e27b9eaedf2af4e19cc2d85"}], "stats": {"total": 118, "additions": 54, "deletions": 64}, "files": [{"sha": "bacf5662bc0058d4e98afbf064553bfc630aec94", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=87a99c59499eafc05ef683ece8dd6e843f839349", "patch": "@@ -442,18 +442,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         then: &Block,\n         else_opt: Option<&Expr>,\n     ) -> hir::ExprKind<'hir> {\n-        macro_rules! make_if {\n-            ($opt:expr) => {{\n-                let cond = self.lower_expr(cond);\n-                let then_expr = self.lower_block_expr(then);\n-                hir::ExprKind::If(cond, self.arena.alloc(then_expr), $opt)\n-            }};\n-        }\n-        if let Some(rslt) = else_opt {\n-            make_if!(Some(self.lower_expr(rslt)))\n-        } else {\n-            make_if!(None)\n-        }\n+        let cond = self.lower_expr(cond);\n+        let then = self.arena.alloc(self.lower_block_expr(then));\n+        let els = else_opt.map(|els| self.lower_expr(els));\n+        hir::ExprKind::If(cond, then, els)\n     }\n \n     fn lower_expr_if_let("}, {"sha": "dee81510b795b8942f368ed91c77f91044e23650", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=87a99c59499eafc05ef683ece8dd6e843f839349", "patch": "@@ -13,41 +13,6 @@ use rustc_trait_selection::traits::{\n     StatementAsExpression,\n };\n \n-macro_rules! create_maybe_get_coercion_reason {\n-    ($fn_name:ident, $node:expr) => {\n-        pub(crate) fn $fn_name(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n-            let node = $node(self.tcx.hir(), hir_id);\n-            if let hir::Node::Block(block) = node {\n-                // check that the body's parent is an fn\n-                let parent = self.tcx.hir().get(\n-                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(block.hir_id)),\n-                );\n-                if let (\n-                    Some(expr),\n-                    hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. }),\n-                ) = (&block.expr, parent)\n-                {\n-                    // check that the `if` expr without `else` is the fn body's expr\n-                    if expr.span == sp {\n-                        return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n-                            let span = fn_decl.output.span();\n-                            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n-                            Some((\n-                                span,\n-                                format!(\"expected `{}` because of this return type\", snippet),\n-                            ))\n-                        });\n-                    }\n-                }\n-            }\n-            if let hir::Node::Local(hir::Local { ty: Some(_), pat, .. }) = node {\n-                return Some((pat.span, \"expected because of this assignment\".to_string()));\n-            }\n-            None\n-        }\n-    };\n-}\n-\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_match(\n         &self,\n@@ -154,7 +119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     expr.span,\n                     &arms[0].body,\n                     &mut coercion,\n-                    |hir_id, span| self.maybe_get_coercion_reason(hir_id, span),\n+                    |hir_id, span| self.coercion_reason_match(hir_id, span),\n                 ) {\n                 tcx.ty_error()\n             } else {\n@@ -373,23 +338,56 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error\n     }\n \n-    create_maybe_get_coercion_reason!(\n-        maybe_get_coercion_reason,\n-        |hir: rustc_middle::hir::map::Map<'a>, id| {\n-            let arm_id = hir.get_parent_node(id);\n-            let match_id = hir.get_parent_node(arm_id);\n-            let containing_id = hir.get_parent_node(match_id);\n-            hir.get(containing_id)\n-        }\n-    );\n+    pub(crate) fn coercion_reason_if(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+    ) -> Option<(Span, String)> {\n+        self.coercion_reason_inner(hir_id, span, 1)\n+    }\n \n-    create_maybe_get_coercion_reason!(\n-        maybe_get_coercion_reason_if,\n-        |hir: rustc_middle::hir::map::Map<'a>, id| {\n-            let rslt = hir.get_parent_node(hir.get_parent_node(id));\n-            hir.get(rslt)\n+    pub(crate) fn coercion_reason_match(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+    ) -> Option<(Span, String)> {\n+        self.coercion_reason_inner(hir_id, span, 2)\n+    }\n+\n+    fn coercion_reason_inner(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+        parent_index: usize,\n+    ) -> Option<(Span, String)> {\n+        let hir = self.tcx.hir();\n+        let mut parent_iter = hir.parent_iter(hir_id);\n+        let (_, node) = parent_iter.nth(parent_index)?;\n+        match node {\n+            hir::Node::Block(block) => {\n+                let expr = block.expr?;\n+                // check that the body's parent is an fn\n+                let (_, parent) = parent_iter.nth(1)?;\n+                if let hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. }) = parent {\n+                    // check that the `if` expr without `else` is the fn body's expr\n+                    if expr.span == span {\n+                        let (fn_decl, _) = self.get_fn_decl(hir_id)?;\n+                        let span = fn_decl.output.span();\n+                        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n+                        return Some((\n+                            span,\n+                            format!(\"expected `{}` because of this return type\", snippet),\n+                        ));\n+                    }\n+                }\n+                None\n+            }\n+            hir::Node::Local(hir::Local { ty: Some(_), pat, .. }) => {\n+                Some((pat.span, \"expected because of this assignment\".to_string()))\n+            }\n+            _ => None,\n         }\n-    );\n+    }\n \n     pub(crate) fn if_cause(\n         &self,"}, {"sha": "e95884ae23b9397343ffb21ba2b067c67cd448b3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a99c59499eafc05ef683ece8dd6e843f839349/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=87a99c59499eafc05ef683ece8dd6e843f839349", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n             self.if_fallback_coercion(sp, then_expr, &mut coerce, |hir_id, span| {\n-                self.maybe_get_coercion_reason_if(hir_id, span)\n+                self.coercion_reason_if(hir_id, span)\n             });\n \n             // If the condition is false we can't diverge."}]}