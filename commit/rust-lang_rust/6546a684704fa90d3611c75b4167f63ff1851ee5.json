{"sha": "6546a684704fa90d3611c75b4167f63ff1851ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDZhNjg0NzA0ZmE5MGQzNjExYzc1YjQxNjdmNjNmZjE4NTFlZTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-06T07:28:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-06T07:28:59Z"}, "message": "Merge #5231\n\n5231: Simplify file watcher r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ff475041812e944f1d1f240cff546f3b7725766d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff475041812e944f1d1f240cff546f3b7725766d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6546a684704fa90d3611c75b4167f63ff1851ee5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAtK7CRBK7hj4Ov3rIwAAdHIIADCLENyFMmLUW3EFuH+pYDKX\nCohAIebIDnMdelUgqOSfVbPMNRvvne7xMByIZJ7gZ2WySyB4+hgax1x/1jS/2MDh\nJHgcci/WLmKX3F06jbzcLmcoIUKB5NWkW9gGggto9nLIN8TyPDdJ0TFaSpbn9p8H\nNKqXSG2+A8OB7aTbBvIeCGi13hXghLdkORsbZm3Wn/RkvVGqVD7qWdiLlD9fGMUA\nsTTtEo3p/Ts/7sCAcgAVwTPrrsBLWS5ENdcC8n7GCYLnmCS56otQg5Cuduu6pITB\nmFIthvbtIw5MQXEcpjbXC7Div2uJk1I5gL+BXb6SQTiH27vH8oeoLVOhzHbVf38=\n=XqlC\n-----END PGP SIGNATURE-----\n", "payload": "tree ff475041812e944f1d1f240cff546f3b7725766d\nparent 8b0983e89ad9a28b142eccf3755a8c9aaeb37852\nparent 23258d8436ab8cfda74a3ac5dc1a30ec63bfb6e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594020539 +0000\ncommitter GitHub <noreply@github.com> 1594020539 +0000\n\nMerge #5231\n\n5231: Simplify file watcher r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6546a684704fa90d3611c75b4167f63ff1851ee5", "html_url": "https://github.com/rust-lang/rust/commit/6546a684704fa90d3611c75b4167f63ff1851ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6546a684704fa90d3611c75b4167f63ff1851ee5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0983e89ad9a28b142eccf3755a8c9aaeb37852", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0983e89ad9a28b142eccf3755a8c9aaeb37852", "html_url": "https://github.com/rust-lang/rust/commit/8b0983e89ad9a28b142eccf3755a8c9aaeb37852"}, {"sha": "23258d8436ab8cfda74a3ac5dc1a30ec63bfb6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/23258d8436ab8cfda74a3ac5dc1a30ec63bfb6e6", "html_url": "https://github.com/rust-lang/rust/commit/23258d8436ab8cfda74a3ac5dc1a30ec63bfb6e6"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "ee50355546ba56d832deb04328bbf9d2cad3da27", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6546a684704fa90d3611c75b4167f63ff1851ee5/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6546a684704fa90d3611c75b4167f63ff1851ee5/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=6546a684704fa90d3611c75b4167f63ff1851ee5", "patch": "@@ -10,10 +10,9 @@ mod include;\n \n use std::convert::{TryFrom, TryInto};\n \n-use crossbeam_channel::{select, unbounded, Receiver, Sender};\n+use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n use notify::{RecommendedWatcher, RecursiveMode, Watcher};\n use paths::{AbsPath, AbsPathBuf};\n-use rustc_hash::FxHashSet;\n use vfs::loader;\n use walkdir::WalkDir;\n \n@@ -55,10 +54,8 @@ type NotifyEvent = notify::Result<notify::Event>;\n struct NotifyActor {\n     sender: loader::Sender,\n     config: Vec<(AbsPathBuf, Include, bool)>,\n-    watched_paths: FxHashSet<AbsPathBuf>,\n-    // Drop order of fields bellow is significant,\n-    watcher: Option<RecommendedWatcher>,\n-    watcher_receiver: Receiver<NotifyEvent>,\n+    // Drop order is significant.\n+    watcher: Option<(RecommendedWatcher, Receiver<NotifyEvent>)>,\n }\n \n #[derive(Debug)]\n@@ -69,23 +66,13 @@ enum Event {\n \n impl NotifyActor {\n     fn new(sender: loader::Sender) -> NotifyActor {\n-        let (watcher_sender, watcher_receiver) = unbounded();\n-        let watcher = log_notify_error(Watcher::new_immediate(move |event| {\n-            watcher_sender.send(event).unwrap()\n-        }));\n-\n-        NotifyActor {\n-            sender,\n-            config: Vec::new(),\n-            watched_paths: FxHashSet::default(),\n-            watcher,\n-            watcher_receiver,\n-        }\n+        NotifyActor { sender, config: Vec::new(), watcher: None }\n     }\n     fn next_event(&self, receiver: &Receiver<Message>) -> Option<Event> {\n+        let watcher_receiver = self.watcher.as_ref().map(|(_, receiver)| receiver);\n         select! {\n             recv(receiver) -> it => it.ok().map(Event::Message),\n-            recv(&self.watcher_receiver) -> it => Some(Event::NotifyEvent(it.unwrap())),\n+            recv(watcher_receiver.unwrap_or(&never())) -> it => Some(Event::NotifyEvent(it.unwrap())),\n         }\n     }\n     fn run(mut self, inbox: Receiver<Message>) {\n@@ -94,10 +81,16 @@ impl NotifyActor {\n             match event {\n                 Event::Message(msg) => match msg {\n                     Message::Config(config) => {\n+                        self.watcher = None;\n+                        let (watcher_sender, watcher_receiver) = unbounded();\n+                        let watcher = log_notify_error(Watcher::new_immediate(move |event| {\n+                            watcher_sender.send(event).unwrap()\n+                        }));\n+                        self.watcher = watcher.map(|it| (it, watcher_receiver));\n+\n                         let n_total = config.load.len();\n                         self.send(loader::Message::Progress { n_total, n_done: 0 });\n \n-                        self.unwatch_all();\n                         self.config.clear();\n \n                         for (i, entry) in config.load.into_iter().enumerate() {\n@@ -217,16 +210,8 @@ impl NotifyActor {\n     }\n \n     fn watch(&mut self, path: AbsPathBuf) {\n-        if let Some(watcher) = &mut self.watcher {\n+        if let Some((watcher, _)) = &mut self.watcher {\n             log_notify_error(watcher.watch(&path, RecursiveMode::NonRecursive));\n-            self.watched_paths.insert(path);\n-        }\n-    }\n-    fn unwatch_all(&mut self) {\n-        if let Some(watcher) = &mut self.watcher {\n-            for path in self.watched_paths.drain() {\n-                log_notify_error(watcher.unwatch(path));\n-            }\n         }\n     }\n     fn send(&mut self, msg: loader::Message) {"}]}