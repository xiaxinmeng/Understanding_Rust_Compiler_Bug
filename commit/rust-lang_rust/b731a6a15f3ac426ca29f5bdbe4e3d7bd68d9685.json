{"sha": "b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzFhNmExNWYzYWM0MjZjYTI5ZjViZGJlNGUzZDdiZDY4ZDk2ODU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T22:40:07Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T22:40:07Z"}, "message": "Add support for env communication", "tree": {"sha": "944e247256529527ab09635c8fdb5fc7a032aa7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944e247256529527ab09635c8fdb5fc7a032aa7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "html_url": "https://github.com/rust-lang/rust/commit/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df7a728c684606a3ee275ca32d3d56c17902c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df7a728c684606a3ee275ca32d3d56c17902c76", "html_url": "https://github.com/rust-lang/rust/commit/0df7a728c684606a3ee275ca32d3d56c17902c76"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "b171b38a6cbd5a4ad2fdf7d6cf8ca22bf08f6f66", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     Scalar, Tag, Pointer, FnVal,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt, HelpersEvalContextExt,\n };\n+use crate::shims::env::alloc_env_value;\n \n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n@@ -163,6 +164,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n+    if config.communicate {\n+        for (name, value) in std::env::vars() {\n+            let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), &tcx);\n+            ecx.machine.env_vars.insert(name.into_bytes(), value);\n+        }\n+    }\n+\n     Ok(ecx)\n }\n "}, {"sha": "0cb8c9c370c3c3933bc4cf910c533d0b718b1e8d", "filename": "src/shims/env.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "patch": "@@ -0,0 +1,23 @@\n+use rustc::ty::{layout::{Size, Align}, TyCtxt};\n+use rustc_mir::interpret::Memory;\n+\n+use crate::*;\n+\n+pub(crate) fn alloc_env_value<'mir, 'tcx>(bytes: &[u8], memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>, tcx: &TyCtxt<'tcx>) -> Pointer<Tag> {\n+    let length = bytes.len() as u64;\n+    // `+1` for the null terminator.\n+    let ptr = memory.allocate(\n+        Size::from_bytes(length + 1),\n+        Align::from_bytes(1).unwrap(),\n+        MiriMemoryKind::Env.into(),\n+    );\n+    // We just allocated these, so the write cannot fail.\n+    let alloc = memory.get_mut(ptr.alloc_id).unwrap();\n+    alloc.write_bytes(tcx, ptr, &bytes).unwrap();\n+    let trailing_zero_ptr = ptr.offset(\n+        Size::from_bytes(length),\n+        tcx,\n+    ).unwrap();\n+    alloc.write_bytes(tcx, trailing_zero_ptr, &[0]).unwrap();\n+    ptr\n+}"}, {"sha": "b1554395b692b543b58f31d7f1f4a9da3bc556e7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "patch": "@@ -5,6 +5,7 @@ use syntax::attr;\n use syntax::symbol::sym;\n \n use crate::*;\n+use crate::shims::env::alloc_env_value;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -465,26 +466,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 }\n                 if let Some((name, value)) = new {\n-                    // `+1` for the null terminator.\n-                    let value_copy = this.memory_mut().allocate(\n-                        Size::from_bytes((value.len() + 1) as u64),\n-                        Align::from_bytes(1).unwrap(),\n-                        MiriMemoryKind::Env.into(),\n-                    );\n-                    // We just allocated these, so the write cannot fail.\n-                    let alloc = this.memory_mut().get_mut(value_copy.alloc_id).unwrap();\n-                    alloc.write_bytes(tcx, value_copy, &value).unwrap();\n-                    let trailing_zero_ptr = value_copy.offset(\n-                        Size::from_bytes(value.len() as u64),\n-                        tcx,\n-                    ).unwrap();\n-                    alloc.write_bytes(tcx, trailing_zero_ptr, &[0]).unwrap();\n-\n-                    if let Some(var) = this.machine.env_vars.insert(\n-                        name.to_owned(),\n-                        value_copy,\n-                    )\n-                    {\n+                    let value_copy = alloc_env_value(&value, this.memory_mut(), tcx);\n+                    if let Some(var) = this.machine.env_vars.insert(name.to_owned(), value_copy) {\n                         this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n                     }\n                     this.write_null(dest)?;"}, {"sha": "96a1f34152b329d0d51ace78e08146d1b23c73fc", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "patch": "@@ -2,6 +2,7 @@ pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n pub mod dlsym;\n+pub mod env;\n \n use rustc::{ty, mir};\n "}, {"sha": "08c6bd88fd6867273841cb744a6c7ca50b8d78ae", "filename": "tests/run-pass/communication.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/tests%2Frun-pass%2Fcommunication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685/tests%2Frun-pass%2Fcommunication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcommunication.rs?ref=b731a6a15f3ac426ca29f5bdbe4e3d7bd68d9685", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: TODO env var emulation stubbed out on Windows\n+// compile-flags: -Zmiri-enable-communication\n+\n+fn main() {\n+    assert!(std::env::var(\"PWD\").is_ok());\n+}"}]}