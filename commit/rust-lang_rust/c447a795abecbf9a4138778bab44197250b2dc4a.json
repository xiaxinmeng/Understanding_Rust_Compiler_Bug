{"sha": "c447a795abecbf9a4138778bab44197250b2dc4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDdhNzk1YWJlY2JmOWE0MTM4Nzc4YmFiNDQxOTcyNTBiMmRjNGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-16T15:31:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-18T10:44:00Z"}, "message": "Prevent being able to rename items that are not part of the workspace", "tree": {"sha": "c35a00f004f09c01f41714ca44e3a0a045a19ea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35a00f004f09c01f41714ca44e3a0a045a19ea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c447a795abecbf9a4138778bab44197250b2dc4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c447a795abecbf9a4138778bab44197250b2dc4a", "html_url": "https://github.com/rust-lang/rust/commit/c447a795abecbf9a4138778bab44197250b2dc4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c447a795abecbf9a4138778bab44197250b2dc4a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75371eb0fa015ba8834ae2b66cda68eba5d83874", "url": "https://api.github.com/repos/rust-lang/rust/commits/75371eb0fa015ba8834ae2b66cda68eba5d83874", "html_url": "https://github.com/rust-lang/rust/commit/75371eb0fa015ba8834ae2b66cda68eba5d83874"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "99e45633e4a42c85e41297f39128bbb860f93163", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -244,6 +244,12 @@ impl Analysis {\n         self.with_db(|db| db.parse(file_id).tree())\n     }\n \n+    /// Returns true if this file belongs to an immutable library.\n+    pub fn is_library_file(&self, file_id: FileId) -> Cancelable<bool> {\n+        use ide_db::base_db::SourceDatabaseExt;\n+        self.with_db(|db| db.source_root(db.file_source_root(file_id)).is_library)\n+    }\n+\n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n     /// offsets and line/column representation.\n     pub fn file_line_index(&self, file_id: FileId) -> Cancelable<Arc<LineIndex>> {"}, {"sha": "7ddea22c8a22a4503a253ba219f892a312e0af1e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -400,6 +400,17 @@ impl Config {\n     pub fn will_rename(&self) -> bool {\n         try_or!(self.caps.workspace.as_ref()?.file_operations.as_ref()?.will_rename?, false)\n     }\n+    pub fn change_annotation_support(&self) -> bool {\n+        try_!(self\n+            .caps\n+            .workspace\n+            .as_ref()?\n+            .workspace_edit\n+            .as_ref()?\n+            .change_annotation_support\n+            .as_ref()?)\n+        .is_some()\n+    }\n     pub fn code_action_resolve(&self) -> bool {\n         try_or!(\n             self.caps"}, {"sha": "227d96d513fccbc65a4e3103db42fa72bd5ec915", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -326,6 +326,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "f8adfad3b802f9a113abe68d2accfcd14fd58446", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "5a70d2ed7b0a02000b50a35f67da2bf786f5ff39", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "04ca0c9c2462aa6115a11220af27f4ba2095a8ad", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "57d2f1ae3b63ac9b5c8f3dbdaf0333e4463fc336", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -339,6 +339,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "ca18997e4d3a870e1ae4234777d99901c343014c", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -136,6 +136,7 @@ fn map_rust_child_diagnostic(\n                     // FIXME: there's no good reason to use edit_map here....\n                     changes: Some(edit_map),\n                     document_changes: None,\n+                    change_annotations: None,\n                 }),\n                 is_preferred: Some(true),\n                 data: None,"}, {"sha": "b8835a5349be8f49b91d524859b9a3afff315d18", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -312,6 +312,9 @@ pub struct SnippetWorkspaceEdit {\n     pub changes: Option<HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>>>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub document_changes: Option<Vec<SnippetDocumentChangeOperation>>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub change_annotations:\n+        Option<HashMap<lsp_types::ChangeAnnotationIdentifier, lsp_types::ChangeAnnotation>>,\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n@@ -335,6 +338,9 @@ pub struct SnippetTextEdit {\n     pub new_text: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub insert_text_format: Option<lsp_types::InsertTextFormat>,\n+    /// The annotation id if this is an annotated\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub annotation_id: Option<lsp_types::ChangeAnnotationIdentifier>,\n }\n \n pub enum HoverRequest {}"}, {"sha": "13de11df172f83211e88e3e0bed20e98e1b59f45", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 63, "deletions": 15, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447a795abecbf9a4138778bab44197250b2dc4a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c447a795abecbf9a4138778bab44197250b2dc4a", "patch": "@@ -1,5 +1,6 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n use std::{\n+    collections::HashMap,\n     path::{self, Path},\n     sync::atomic::{AtomicU32, Ordering},\n };\n@@ -174,6 +175,7 @@ pub(crate) fn snippet_text_edit(\n         range: text_edit.range,\n         new_text: text_edit.new_text,\n         insert_text_format,\n+        annotation_id: None,\n     }\n }\n \n@@ -688,6 +690,10 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n+fn outside_workspace_annotation(snap: &GlobalStateSnapshot) -> Option<String> {\n+    snap.config.change_annotation_support().then(|| String::from(\"OutsideWorkspace\"))\n+}\n+\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,\n@@ -696,7 +702,19 @@ pub(crate) fn snippet_text_document_edit(\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = optional_versioned_text_document_identifier(snap, file_id);\n     let line_index = snap.file_line_index(file_id)?;\n-    let edits = edit.into_iter().map(|it| snippet_text_edit(&line_index, is_snippet, it)).collect();\n+    let outside_workspace_annotation = snap\n+        .analysis\n+        .is_library_file(file_id)?\n+        .then(|| outside_workspace_annotation(snap))\n+        .flatten();\n+    let edits = edit\n+        .into_iter()\n+        .map(|it| {\n+            let mut edit = snippet_text_edit(&line_index, is_snippet, it);\n+            edit.annotation_id = outside_workspace_annotation.clone();\n+            edit\n+        })\n+        .collect();\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n@@ -721,6 +739,7 @@ pub(crate) fn snippet_text_document_ops(\n                     range: lsp_types::Range::default(),\n                     new_text: initial_contents,\n                     insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n+                    annotation_id: None,\n                 };\n                 let edit_file =\n                     lsp_ext::SnippetTextDocumentEdit { text_document, edits: vec![text_edit] };\n@@ -734,7 +753,12 @@ pub(crate) fn snippet_text_document_ops(\n                 old_uri,\n                 new_uri,\n                 options: None,\n-                annotation_id: None,\n+                annotation_id: snap\n+                    .analysis\n+                    .is_library_file(src)\n+                    .unwrap()\n+                    .then(|| outside_workspace_annotation(snap))\n+                    .flatten(),\n             });\n             ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(rename_file))\n         }\n@@ -747,6 +771,7 @@ pub(crate) fn snippet_workspace_edit(\n     source_change: SourceChange,\n ) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n+\n     for op in source_change.file_system_edits {\n         let ops = snippet_text_document_ops(snap, op);\n         document_changes.extend_from_slice(&ops);\n@@ -755,8 +780,24 @@ pub(crate) fn snippet_workspace_edit(\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }\n-    let workspace_edit =\n-        lsp_ext::SnippetWorkspaceEdit { changes: None, document_changes: Some(document_changes) };\n+    let change_annotations = outside_workspace_annotation(snap).map(|annotation| {\n+        use std::iter::FromIterator;\n+        HashMap::from_iter(Some((\n+            annotation,\n+            lsp_types::ChangeAnnotation {\n+                label: String::from(\"Edit outside of the workspace\"),\n+                needs_confirmation: Some(true),\n+                description: Some(String::from(\n+                    \"This edit lies outside of the workspace and may affect dependencies\",\n+                )),\n+            },\n+        )))\n+    });\n+    let workspace_edit = lsp_ext::SnippetWorkspaceEdit {\n+        changes: None,\n+        document_changes: Some(document_changes),\n+        change_annotations,\n+    };\n     Ok(workspace_edit)\n }\n \n@@ -784,24 +825,31 @@ impl From<lsp_ext::SnippetWorkspaceEdit> for lsp_types::WorkspaceEdit {\n                                 lsp_types::DocumentChangeOperation::Edit(\n                                     lsp_types::TextDocumentEdit {\n                                         text_document: edit.text_document,\n-                                        edits: edit\n-                                            .edits\n-                                            .into_iter()\n-                                            .map(|edit| {\n-                                                lsp_types::OneOf::Left(lsp_types::TextEdit {\n-                                                    range: edit.range,\n-                                                    new_text: edit.new_text,\n-                                                })\n-                                            })\n-                                            .collect(),\n+                                        edits: edit.edits.into_iter().map(From::from).collect(),\n                                     },\n                                 )\n                             }\n                         })\n                         .collect(),\n                 )\n             }),\n-            change_annotations: None,\n+            change_annotations: snippet_workspace_edit.change_annotations,\n+        }\n+    }\n+}\n+\n+impl From<lsp_ext::SnippetTextEdit>\n+    for lsp_types::OneOf<lsp_types::TextEdit, lsp_types::AnnotatedTextEdit>\n+{\n+    fn from(\n+        lsp_ext::SnippetTextEdit { annotation_id, insert_text_format:_, new_text, range }: lsp_ext::SnippetTextEdit,\n+    ) -> Self {\n+        match annotation_id {\n+            Some(annotation_id) => lsp_types::OneOf::Right(lsp_types::AnnotatedTextEdit {\n+                text_edit: lsp_types::TextEdit { range, new_text },\n+                annotation_id,\n+            }),\n+            None => lsp_types::OneOf::Left(lsp_types::TextEdit { range, new_text }),\n         }\n     }\n }"}]}