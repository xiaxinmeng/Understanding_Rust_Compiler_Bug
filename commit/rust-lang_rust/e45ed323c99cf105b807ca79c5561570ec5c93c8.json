{"sha": "e45ed323c99cf105b807ca79c5561570ec5c93c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NWVkMzIzYzk5Y2YxMDViODA3Y2E3OWM1NTYxNTcwZWM1YzkzYzg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-27T03:33:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-28T19:03:25Z"}, "message": "Add methods iter, iter_err, map, map_err to the result type.", "tree": {"sha": "9e4c6872b27926eb93074821ec39e4c889486e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4c6872b27926eb93074821ec39e4c889486e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45ed323c99cf105b807ca79c5561570ec5c93c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45ed323c99cf105b807ca79c5561570ec5c93c8", "html_url": "https://github.com/rust-lang/rust/commit/e45ed323c99cf105b807ca79c5561570ec5c93c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45ed323c99cf105b807ca79c5561570ec5c93c8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46173e98ef03690406d08ec9abad50d80e127e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/46173e98ef03690406d08ec9abad50d80e127e69", "html_url": "https://github.com/rust-lang/rust/commit/46173e98ef03690406d08ec9abad50d80e127e69"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "3c6622ba69dd961ce803e6a981f69db82e4c03e6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/e45ed323c99cf105b807ca79c5561570ec5c93c8/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45ed323c99cf105b807ca79c5561570ec5c93c8/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e45ed323c99cf105b807ca79c5561570ec5c93c8", "patch": "@@ -107,6 +107,79 @@ fn chain_err<T: copy, U: copy, V: copy>(\n     }\n }\n \n+#[doc = \"\n+Call a function based on a previous result\n+\n+If `res` is `ok` then the value is extracted and passed to `op` whereupon\n+`op`s result is returned. if `res` is `err` then it is immediately returned.\n+This function can be used to compose the results of two functions.\n+\n+Example:\n+\n+    iter(read_file(file)) { |buf|\n+        print_buf(buf)\n+    }\n+\"]\n+fn iter<T, E>(res: result<T, E>, f: fn(T)) {\n+    alt res {\n+      ok(t) { f(t) }\n+      err(_) { }\n+    }\n+}\n+\n+#[doc = \"\n+Call a function based on a previous result\n+\n+If `res` is `err` then the value is extracted and passed to `op` whereupon\n+`op`s result is returned. if `res` is `ok` then it is immediately returned.\n+This function can be used to pass through a successful result while handling\n+an error.\n+\"]\n+fn iter_err<T, E>(res: result<T, E>, f: fn(E)) {\n+    alt res {\n+      ok(_) { }\n+      err(e) { f(e) }\n+    }\n+}\n+\n+#[doc = \"\n+Call a function based on a previous result\n+\n+If `res` is `ok` then the value is extracted and passed to `op` whereupon\n+`op`s result is wrapped in `ok` and returned. if `res` is `err` then it is\n+immediately returned.  This function can be used to compose the results of two\n+functions.\n+\n+Example:\n+\n+    let res = map(read_file(file)) { |buf|\n+        parse_buf(buf)\n+    }\n+\"]\n+fn map<T, E: copy, U: copy>(res: result<T, E>, op: fn(T) -> U)\n+  -> result<U, E> {\n+    alt res {\n+      ok(t) { ok(op(t)) }\n+      err(e) { err(e) }\n+    }\n+}\n+\n+#[doc = \"\n+Call a function based on a previous result\n+\n+If `res` is `err` then the value is extracted and passed to `op` whereupon\n+`op`s result is wrapped in an `err` and returned. if `res` is `ok` then it is\n+immediately returned.  This function can be used to pass through a successful\n+result while handling an error.\n+\"]\n+fn map_err<T: copy, E, F: copy>(res: result<T, E>, op: fn(E) -> F)\n+  -> result<T, F> {\n+    alt res {\n+      ok(t) { ok(t) }\n+      err(e) { err(op(e)) }\n+    }\n+}\n+\n impl extensions<T:copy, E:copy> for result<T,E> {\n     fn get() -> T { get(self) }\n \n@@ -123,6 +196,34 @@ impl extensions<T:copy, E:copy> for result<T,E> {\n     fn chain_err<F:copy>(op: fn(E) -> result<T,F>) -> result<T,F> {\n         chain_err(self, op)\n     }\n+\n+    fn iter(f: fn(T)) {\n+        alt self {\n+          ok(t) { f(t) }\n+          err(_) { }\n+        }\n+    }\n+\n+    fn iter_err(f: fn(E)) {\n+        alt self {\n+          ok(_) { }\n+          err(e) { f(e) }\n+        }\n+    }\n+\n+    fn map<U:copy>(op: fn(T) -> U) -> result<U,E> {\n+        alt self {\n+          ok(t) { ok(op(t)) }\n+          err(e) { err(e) }\n+        }\n+    }\n+\n+    fn map_err<F:copy>(op: fn(E) -> F) -> result<T,F> {\n+        alt self {\n+          ok(t) { ok(t) }\n+          err(e) { err(op(e)) }\n+        }\n+    }\n }\n \n #[doc = \"\n@@ -248,4 +349,37 @@ mod tests {\n     fn chain_failure() {\n         assert get_err(chain(op3(), op2)) == \"sadface\";\n     }\n+\n+    #[test]\n+    fn test_impl_iter() {\n+        let mut valid = false;\n+        ok::<str, str>(\"a\").iter { |_x| valid = true; };\n+        assert valid;\n+\n+        err::<str, str>(\"b\").iter { |_x| valid = false; };\n+        assert valid;\n+    }\n+\n+    #[test]\n+    fn test_impl_iter_err() {\n+        let mut valid = true;\n+        ok::<str, str>(\"a\").iter_err { |_x| valid = false; };\n+        assert valid;\n+\n+        valid = false;\n+        err::<str, str>(\"b\").iter_err { |_x| valid = true; };\n+        assert valid;\n+    }\n+\n+    #[test]\n+    fn test_impl_map() {\n+        assert ok::<str, str>(\"a\").map { |_x| \"b\" } == ok(\"b\");\n+        assert err::<str, str>(\"a\").map { |_x| \"b\" } == err(\"a\");\n+    }\n+\n+    #[test]\n+    fn test_impl_map_err() {\n+        assert ok::<str, str>(\"a\").map_err { |_x| \"b\" } == ok(\"a\");\n+        assert err::<str, str>(\"a\").map_err { |_x| \"b\" } == err(\"b\");\n+    }\n }"}]}