{"sha": "85e8d94e05959e3ad57738351ce56f95f15a26a6", "node_id": "C_kwDOAAsO6NoAKDg1ZThkOTRlMDU5NTllM2FkNTc3MzgzNTFjZTU2Zjk1ZjE1YTI2YTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T00:22:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T05:19:49Z"}, "message": "Change `Ty::Tuple` to `Ty::Unit`.\n\nBecause that's all that is needed in practice.", "tree": {"sha": "318e8265030e7e50a8a64f32a29af3a9f11cbb5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318e8265030e7e50a8a64f32a29af3a9f11cbb5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e8d94e05959e3ad57738351ce56f95f15a26a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e8d94e05959e3ad57738351ce56f95f15a26a6", "html_url": "https://github.com/rust-lang/rust/commit/85e8d94e05959e3ad57738351ce56f95f15a26a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e8d94e05959e3ad57738351ce56f95f15a26a6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "html_url": "https://github.com/rust-lang/rust/commit/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "cb2ad283a1971208cc165a1dd77971f4d5e8e962", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=85e8d94e05959e3ad57738351ce56f95f15a26a6", "patch": "@@ -33,7 +33,7 @@ pub fn expand_deriving_eq(\n             generics: Bounds::empty(),\n             explicit_self: true,\n             args: vec![],\n-            ret_ty: nil_ty(),\n+            ret_ty: Unit,\n             attributes: attrs,\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {"}, {"sha": "7dc0584618d664401ca9f9271ebe54efff41a50d", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=85e8d94e05959e3ad57738351ce56f95f15a26a6", "patch": "@@ -125,7 +125,7 @@ pub fn expand_deriving_rustc_encodable(\n             ret_ty: Path(Path::new_(\n                 pathvec_std!(result::Result),\n                 vec![\n-                    Box::new(Tuple(Vec::new())),\n+                    Box::new(Unit),\n                     Box::new(Path(Path::new_(vec![typaram, sym::Error], vec![], PathKind::Local))),\n                 ],\n                 PathKind::Std,"}, {"sha": "4b20d87629d96fcccd47af72b56a1efa9f3607d2", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=85e8d94e05959e3ad57738351ce56f95f15a26a6", "patch": "@@ -78,18 +78,14 @@ pub enum Ty {\n     /// `mod::mod::Type<[lifetime], [Params...]>`, including a plain type\n     /// parameter, and things like `i32`\n     Path(Path),\n-    /// includes unit\n-    Tuple(Vec<Ty>),\n+    /// For () return types.\n+    Unit,\n }\n \n pub fn self_ref() -> Ty {\n     Ref(Box::new(Self_), ast::Mutability::Not)\n }\n \n-pub fn nil_ty() -> Ty {\n-    Tuple(Vec::new())\n-}\n-\n impl Ty {\n     pub fn to_ty(\n         &self,\n@@ -105,10 +101,8 @@ impl Ty {\n             }\n             Path(p) => p.to_ty(cx, span, self_ty, self_generics),\n             Self_ => cx.ty_path(self.to_path(cx, span, self_ty, self_generics)),\n-            Tuple(fields) => {\n-                let ty = ast::TyKind::Tup(\n-                    fields.iter().map(|f| f.to_ty(cx, span, self_ty, self_generics)).collect(),\n-                );\n+            Unit => {\n+                let ty = ast::TyKind::Tup(vec![]);\n                 cx.ty(span, ty)\n             }\n         }\n@@ -143,7 +137,7 @@ impl Ty {\n             }\n             Path(ref p) => p.to_path(cx, span, self_ty, generics),\n             Ref(..) => cx.span_bug(span, \"ref in a path in generic `derive`\"),\n-            Tuple(..) => cx.span_bug(span, \"tuple in a path in generic `derive`\"),\n+            Unit => cx.span_bug(span, \"unit in a path in generic `derive`\"),\n         }\n     }\n }"}, {"sha": "9790449c4b331735a902344bbcb5443ef18e3690", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e8d94e05959e3ad57738351ce56f95f15a26a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=85e8d94e05959e3ad57738351ce56f95f15a26a6", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_hash(\n             generics: Bounds { bounds: vec![(typaram, vec![path_std!(hash::Hasher)])] },\n             explicit_self: true,\n             args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n-            ret_ty: nil_ty(),\n+            ret_ty: Unit,\n             attributes: vec![],\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {"}]}