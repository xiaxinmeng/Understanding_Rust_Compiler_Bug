{"sha": "a14df19d825152aff823fae3344f9e4c2d31937b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNGRmMTlkODI1MTUyYWZmODIzZmFlMzM0NGY5ZTRjMmQzMTkzN2I=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T00:47:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T00:47:41Z"}, "message": "Add infer_function_return_type assist", "tree": {"sha": "2b033d0b972cecb18e90fd1c93b23a6bf37b4c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b033d0b972cecb18e90fd1c93b23a6bf37b4c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14df19d825152aff823fae3344f9e4c2d31937b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14df19d825152aff823fae3344f9e4c2d31937b", "html_url": "https://github.com/rust-lang/rust/commit/a14df19d825152aff823fae3344f9e4c2d31937b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14df19d825152aff823fae3344f9e4c2d31937b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "url": "https://api.github.com/repos/rust-lang/rust/commits/7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "html_url": "https://github.com/rust-lang/rust/commit/7709b6a2d4b74b5838fbe5b30b6188d6a549b580"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "da60ff9dedf9311088aab34618f689d5bd844aba", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=a14df19d825152aff823fae3344f9e4c2d31937b", "patch": "@@ -0,0 +1,113 @@\n+use hir::HirDisplay;\n+use syntax::{ast, AstNode, TextSize};\n+use test_utils::mark;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: infer_function_return_type\n+//\n+// Adds the return type to a function inferred from its tail expression if it doesn't have a return\n+// type specified.\n+//\n+// ```\n+// fn foo() { 4<|>2i32 }\n+// ```\n+// ->\n+// ```\n+// fn foo() -> i32 { 42i32 }\n+// ```\n+pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let expr = ctx.find_node_at_offset::<ast::Expr>()?;\n+    let func = expr.syntax().ancestors().find_map(ast::Fn::cast)?;\n+\n+    if func.ret_type().is_some() {\n+        mark::hit!(existing_ret_type);\n+        return None;\n+    }\n+    let body = func.body()?;\n+    let tail_expr = body.expr()?;\n+    // check whether the expr we were at is indeed the tail expression\n+    if !tail_expr.syntax().text_range().contains_range(expr.syntax().text_range()) {\n+        mark::hit!(not_tail_expr);\n+        return None;\n+    }\n+    let module = ctx.sema.scope(func.syntax()).module()?;\n+    let ty = ctx.sema.type_of_expr(&tail_expr)?;\n+    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let rparen = func.param_list()?.r_paren_token()?;\n+\n+    acc.add(\n+        AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n+        \"Wrap return type in Result\",\n+        tail_expr.syntax().text_range(),\n+        |builder| {\n+            let insert_pos = rparen.text_range().end() + TextSize::from(1);\n+\n+            builder.insert(insert_pos, &format!(\"-> {} \", ty));\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn infer_return_type() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                45<|>\n+            }\"#,\n+            r#\"fn foo() -> i32 {\n+                45\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_nested() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                if true {\n+                    3<|>\n+                } else {\n+                    5\n+                }\n+            }\"#,\n+            r#\"fn foo() -> i32 {\n+                if true {\n+                    3\n+                } else {\n+                    5\n+                }\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_ret_type_specified() {\n+        mark::check!(existing_ret_type);\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() -> i32 {\n+                ( 45<|> + 32 ) * 123\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_tail_expr() {\n+        mark::check!(not_tail_expr);\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                let x = <|>3;\n+                ( 45 + 32 ) * 123\n+            }\"#,\n+        );\n+    }\n+}"}, {"sha": "af88b34374791af06aad26b8e5d81bf2f69e1adf", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=a14df19d825152aff823fae3344f9e4c2d31937b", "patch": "@@ -143,6 +143,7 @@ mod handlers {\n     mod generate_function;\n     mod generate_impl;\n     mod generate_new;\n+    mod infer_function_return_type;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -190,6 +191,7 @@ mod handlers {\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n+            infer_function_return_type::infer_function_return_type,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "168e1626abfa7fb1639466ba4835db6ae134298a", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14df19d825152aff823fae3344f9e4c2d31937b/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a14df19d825152aff823fae3344f9e4c2d31937b", "patch": "@@ -505,6 +505,19 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_infer_function_return_type() {\n+    check_doc_test(\n+        \"infer_function_return_type\",\n+        r#####\"\n+fn foo() { 4<|>2i32 }\n+\"#####,\n+        r#####\"\n+fn foo() -> i32 { 42i32 }\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_local_variable() {\n     check_doc_test("}]}