{"sha": "159ad7a63bd4e82907c0f6698702e0055601ed91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OWFkN2E2M2JkNGU4MjkwN2MwZjY2OTg3MDJlMDA1NTYwMWVkOTE=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-01-09T03:24:24Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-01-09T03:24:24Z"}, "message": "Update fuzzer", "tree": {"sha": "1de99cda4e62e61efa0f7c00ccb881c00b209021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de99cda4e62e61efa0f7c00ccb881c00b209021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/159ad7a63bd4e82907c0f6698702e0055601ed91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/159ad7a63bd4e82907c0f6698702e0055601ed91", "html_url": "https://github.com/rust-lang/rust/commit/159ad7a63bd4e82907c0f6698702e0055601ed91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/159ad7a63bd4e82907c0f6698702e0055601ed91/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bb9ef3ba885fabdd69ca04184fe0bdd9752cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb9ef3ba885fabdd69ca04184fe0bdd9752cab", "html_url": "https://github.com/rust-lang/rust/commit/24bb9ef3ba885fabdd69ca04184fe0bdd9752cab"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "3ec59f932ed03e5a000a4c2d13fb3b6f1c30b40b", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/159ad7a63bd4e82907c0f6698702e0055601ed91/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159ad7a63bd4e82907c0f6698702e0055601ed91/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=159ad7a63bd4e82907c0f6698702e0055601ed91", "patch": "@@ -11,16 +11,15 @@ fn write_file(filename: str, content: str) {\n     result::get(\n         io::file_writer(filename, [io::create, io::truncate]))\n         .write_str(content);\n-    // Work around https://github.com/graydon/rust/issues/726\n-    std::run::run_program(\"chmod\", [\"644\", filename]);\n }\n \n fn contains(haystack: str, needle: str) -> bool {\n     str::find(haystack, needle) != -1\n }\n \n fn find_rust_files(&files: [str], path: str) {\n-    if str::ends_with(path, \".rs\") {\n+    if str::ends_with(path, \".rs\") && !contains(path, \"utf8\") {\n+        // ignoring \"utf8\" tests: https://github.com/graydon/rust/pull/1470 ?\n         files += [path];\n     } else if fs::path_is_dir(path)\n         && !contains(path, \"compile-fail\")\n@@ -95,6 +94,9 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           // https://github.com/graydon/rust/issues/928\n           //ast::expr_cast(_, _) { false }\n \n+          // https://github.com/graydon/rust/issues/1458\n+          ast::expr_call(_, _, _) { false }\n+\n           _ { true }\n         }\n       }\n@@ -139,11 +141,16 @@ fn steal(crate: ast::crate, tm: test_mode) -> stolen_stuff {\n     {exprs: *exprs, tys: *tys}\n }\n \n-// https://github.com/graydon/rust/issues/652\n+\n fn safe_to_replace_expr(e: ast::expr_, _tm: test_mode) -> bool {\n     alt e {\n+      // https://github.com/graydon/rust/issues/652\n       ast::expr_if(_, _, _) { false }\n       ast::expr_block(_) { false }\n+\n+      // expr_call is also missing a constraint\n+      ast::expr_fn_block(_, _) { false }\n+\n       _ { true }\n     }\n }\n@@ -168,10 +175,7 @@ fn replace_expr_in_crate(crate: ast::crate, i: uint, newexpr: ast::expr, tm: tes\n         if i_ + 1u == *j_ && safe_to_replace_expr(original, tm_) {\n             newexpr_\n         } else {\n-            alt(original) {\n-              ast::expr_fail(_) { original /* Don't replace inside fail: https://github.com/graydon/rust/issues/930 */ }\n-              _ { fold::noop_fold_expr(original, fld) }\n-            }\n+            fold::noop_fold_expr(original, fld)\n         }\n     }\n     let afp =\n@@ -322,9 +326,7 @@ fn check_running(exe_filename: str) -> happiness {\n         log(error, \"comb comb comb: \" + comb);\n     }\n \n-    if contains(comb, \"Assertion failed: (0), function alloc, file ../src/rt/rust_obstack.cpp\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/32 / https://github.com/graydon/rust/issues/445\")\n-    } else if contains(comb, \"Assertion failed:\") {\n+    if contains(comb, \"Assertion failed:\") {\n         failed(\"C++ assertion failure\")\n     } else if contains(comb, \"leaked memory in rust main loop\") {\n         // might also use exit code 134\n@@ -333,40 +335,31 @@ fn check_running(exe_filename: str) -> happiness {\n     } else if contains(comb, \"src/rt/\") {\n         failed(\"Mentioned src/rt/\")\n     } else if contains(comb, \"malloc\") {\n-        failed(\"Mentioned malloc\")\n-    } else if contains(comb, \"Out of stack space, sorry\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/32 / https://github.com/graydon/rust/issues/445\")\n+        //failed(\"Mentioned malloc\")\n+        known_bug(\"https://github.com/graydon/rust/issues/1461\")\n     } else {\n         alt p.status {\n             0         { passed }\n             100       { cleanly_rejected(\"running: explicit fail\") }\n             101 | 247 { cleanly_rejected(\"running: timed out\") }\n-            245 | 246 | 138 | 252 { known_bug(\"https://github.com/graydon/rust/issues/32 ??\") }\n+            245 | 246 | 138 | 252 { known_bug(\"https://github.com/graydon/rust/issues/1466\") }\n             136 | 248 { known_bug(\"SIGFPE - https://github.com/graydon/rust/issues/944\") }\n             rc        { failed(\"Rust program ran but exited with status \" + int::str(rc)) }\n         }\n     }\n }\n \n fn check_compiling(filename: str) -> happiness {\n-    /*\n     let p = std::run::program_output(\n-            \"/Users/jruderman/code/rust/build/stage1/rustc\",\n-            [\"-c\", filename]);\n-    */\n-\n-    let p = std::run::program_output(\"bash\", [\"-c\", \"DYLD_LIBRARY_PATH=/Users/jruderman/code/rust/build/stage0/lib:/Users/jruderman/code/rust/build/rustllvm/ /Users/jruderman/code/rust/build/stage1/rustc \" + filename]);\n+            \"/Users/jruderman/code/rust/build/x86_64-apple-darwin/stage1/bin/rustc\",\n+            [filename]);\n \n     //#error(\"Status: %d\", p.status);\n     if p.err != \"\" {\n         if contains(p.err, \"Ptr must be a pointer to Val type\") {\n             known_bug(\"https://github.com/graydon/rust/issues/897\")\n-        } else if contains(p.err, \"(castIsValid(op, S, Ty) && \\\"Invalid cast!\\\"), function Create\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/901\")\n-        } else if contains(p.err, \"cast() argument of incompatible type!\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/973\")\n-        } else if contains(p.err, \"cast<Ty>() argument of incompatible type!\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/973\")\n+        } else if contains(p.err, \"Assertion failed: ((i >= FTy->getNumParams() || FTy->getParamType(i) == Args[i]->getType()) && \\\"Calling a function with a bad signature!\\\"), function init\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/1459\")\n         } else {\n             log(error, \"Stderr: \" + p.err);\n             failed(\"Unfamiliar error message\")\n@@ -375,23 +368,24 @@ fn check_compiling(filename: str) -> happiness {\n         passed\n     } else if contains(p.out, \"Out of stack space, sorry\") {\n         known_bug(\"Recursive types - https://github.com/graydon/rust/issues/742\")\n-    } else if contains(p.out, \"Assertion !cx.terminated failed\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/893\")\n-//  } else if contains(p.out, \"upcall fail 'non-exhaustive match failure', ../src/comp/middle/trans.rs\") {\n-    } else if contains(p.out, \"trans_rec expected a rec but found _|_\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/924\")\n     } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n         log(error, \"Stdout: \" + p.out);\n         failed(\"Looks like an llvm assertion failure\")\n \n-    } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/942\")\n-    } else if contains(p.out, \"internal compiler error Translating unsupported cast\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/932\")\n-    } else if contains(p.out, \"internal compiler error sequence_element_type called on non-sequence value\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/931\")\n+    } else if contains(p.out, \"upcall fail 'option none'\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/1463\")\n+    } else if contains(p.out, \"upcall fail 'non-exhaustive match failure', ../src/comp/middle/typeck.rs:1554\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/1462\")\n+    } else if contains(p.out, \"upcall fail 'Assertion cx.fcx.llupvars.contains_key(did.node) failed'\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/1467\")\n+    } else if contains(p.out, \"Taking the value of a method does not work yet (issue #435)\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/435\")\n     } else if contains(p.out, \"internal compiler error bit_num: asked for pred constraint, found an init constraint\") {\n         known_bug(\"https://github.com/graydon/rust/issues/933\")\n+    } else if contains(p.out, \"internal compiler error\") && contains(p.out, \"called on non-fn type\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/1460\")\n+    } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/1465\")\n     } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(\"Something unimplemented\")\n     } else if contains(p.out, \"internal compiler error\") {\n@@ -453,7 +447,8 @@ fn content_is_dangerous_to_compile(code: str) -> bool {\n         [\"xfail-test\",\n          \"-> !\",    // https://github.com/graydon/rust/issues/897\n          \"tag\",     // typeck hang with ty variants:   https://github.com/graydon/rust/issues/742 (from dup #900)\n-         \"with\"     // tstate hang with expr variants: https://github.com/graydon/rust/issues/948\n+         \"with\",    // tstate hang with expr variants: https://github.com/graydon/rust/issues/948\n+         \"import comm\" // mysterious hang: https://github.com/graydon/rust/issues/1464\n          ];\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n@@ -468,7 +463,6 @@ fn content_might_not_converge(code: str) -> bool {\n          \"spawn\",      // precedence issues?\n          \"bind\",       // precedence issues?\n          \" be \",       // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n-         \"&!\",         // https://github.com/graydon/rust/issues/972\n          \"\\n\\n\\n\\n\\n\"  // https://github.com/graydon/rust/issues/850\n         ];\n \n@@ -477,7 +471,13 @@ fn content_might_not_converge(code: str) -> bool {\n }\n \n fn file_might_not_converge(filename: str) -> bool {\n-    let confusing_files = [\"expr-alt.rs\"]; // pretty-printing \"(a = b) = c\" vs \"a = b = c\" and wrapping\n+    let confusing_files = [\n+      \"expr-alt.rs\", // pretty-printing \"(a = b) = c\" vs \"a = b = c\" and wrapping\n+      \"block-arg-in-ternary.rs\", // wrapping\n+      \"move-3-unique.rs\", // 0 becomes (0), but both seem reasonable. wtf?\n+      \"move-3.rs\", // 0 becomes (0), but both seem reasonable. wtf?\n+    ];\n+\n \n     for f in confusing_files { if contains(filename, f) { ret true; } }\n \n@@ -528,6 +528,7 @@ fn check_convergence(files: [str]) {\n fn check_variants(files: [str], cx: context) {\n     for file in files {\n         if cx.mode == tm_converge && file_might_not_converge(file) {\n+            #error(\"Skipping convergence test based on file_might_not_converge\");\n             cont;\n         }\n \n@@ -566,8 +567,11 @@ fn main(args: [str]) {\n     let root = args[1];\n \n     find_rust_files(files, root);\n+    #error(\"== check_convergence ==\");\n     check_convergence(files);\n+    #error(\"== check_variants: converge ==\");\n     check_variants(files, { mode: tm_converge });\n+    #error(\"== check_variants: run ==\");\n     check_variants(files, { mode: tm_run });\n \n     #error(\"Fuzzer done\");"}]}