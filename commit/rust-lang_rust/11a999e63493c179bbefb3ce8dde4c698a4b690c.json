{"sha": "11a999e63493c179bbefb3ce8dde4c698a4b690c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTk5OWU2MzQ5M2MxNzliYmVmYjNjZThkZGU0YzY5OGE0YjY5MGM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-22T19:33:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-10T18:19:38Z"}, "message": "Duplicate tests for incremental spans mode.", "tree": {"sha": "d0511ef69b00756670f8766b1a3aae064ecd6c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0511ef69b00756670f8766b1a3aae064ecd6c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a999e63493c179bbefb3ce8dde4c698a4b690c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a999e63493c179bbefb3ce8dde4c698a4b690c", "html_url": "https://github.com/rust-lang/rust/commit/11a999e63493c179bbefb3ce8dde4c698a4b690c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a999e63493c179bbefb3ce8dde4c698a4b690c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e37ed87fc5ec827b2acebfe8b8e9c7b0dda9f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e37ed87fc5ec827b2acebfe8b8e9c7b0dda9f30", "html_url": "https://github.com/rust-lang/rust/commit/2e37ed87fc5ec827b2acebfe8b8e9c7b0dda9f30"}], "stats": {"total": 3628, "additions": 2532, "deletions": 1096}, "files": [{"sha": "dd3dce4e7209c746dfd49a479156ae8b6b23b060", "filename": "src/test/incremental/change_symbol_export_status.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -1,9 +1,15 @@\n-// revisions: rpass1 rpass2\n+// revisions: rpass1 rpass2 rpass3 rpass4\n // compile-flags: -Zquery-dep-graph\n+// [rpass1]compile-flags: -Zincremental-ignore-spans\n+// [rpass2]compile-flags: -Zincremental-ignore-spans\n+// [rpass3]compile-flags: -Zincremental-relative-spans\n+// [rpass4]compile-flags: -Zincremental-relative-spans\n \n #![feature(rustc_attrs)]\n-#![rustc_partition_codegened(module = \"change_symbol_export_status-mod1\", cfg = \"rpass2\")]\n+#![rustc_partition_reused(module = \"change_symbol_export_status-mod1\", cfg = \"rpass2\")]\n #![rustc_partition_reused(module = \"change_symbol_export_status-mod2\", cfg = \"rpass2\")]\n+#![rustc_partition_reused(module = \"change_symbol_export_status-mod1\", cfg = \"rpass4\")]\n+#![rustc_partition_reused(module = \"change_symbol_export_status-mod2\", cfg = \"rpass4\")]\n \n // This test case makes sure that a change in symbol visibility is detected by\n // our dependency tracking. We do this by changing a module's visibility to\n@@ -13,13 +19,13 @@\n // even from an executable. Plain Rust functions are only exported from Rust\n // libraries, which our test infrastructure does not support.\n \n-#[cfg(rpass1)]\n+#[cfg(any(rpass1,rpass3))]\n pub mod mod1 {\n     #[no_mangle]\n     pub fn foo() {}\n }\n \n-#[cfg(rpass2)]\n+#[cfg(any(rpass2,rpass4))]\n mod mod1 {\n     #[no_mangle]\n     pub fn foo() {}"}, {"sha": "648f71f9230c3b3b7abe384e2cdbf81169907786", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n \n #![allow(warnings)]\n@@ -19,29 +25,33 @@ fn callee2(_x: u32, _y: i64) {}\n \n \n // Change Callee (Function)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_callee_function() {\n     callee1(1, 2)\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n }\n \n \n \n // Change Argument (Function)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_argument_function() {\n     callee1(1, 2)\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n }\n@@ -50,13 +60,15 @@ pub fn change_argument_function() {\n \n // Change Callee Indirectly (Function)\n mod change_callee_indirectly_function {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::callee1 as callee;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::callee2 as callee;\n \n     #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn change_callee_indirectly_function() {\n         callee(1, 2)\n     }\n@@ -70,15 +82,17 @@ impl Struct {\n }\n \n // Change Callee (Method)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_callee_method() {\n     let s = Struct;\n     s.method1('x', true);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_callee_method() {\n     let s = Struct;\n     s.method2('x', true);\n@@ -87,15 +101,17 @@ pub fn change_callee_method() {\n \n \n // Change Argument (Method)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_argument_method() {\n     let s = Struct;\n     s.method1('x', true);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_argument_method() {\n     let s = Struct;\n     s.method1('y', true);\n@@ -104,15 +120,17 @@ pub fn change_argument_method() {\n \n \n // Change Callee (Method, UFCS)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n     Struct::method1(&s, 'x', true);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n     Struct::method2(&s, 'x', true);\n@@ -121,32 +139,36 @@ pub fn change_ufcs_callee_method() {\n \n \n // Change Argument (Method, UFCS)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n     Struct::method1(&s, 'x', true);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n-    Struct::method1(&s, 'x', false);\n+    Struct::method1(&s, 'x',false);\n }\n \n \n \n // Change To UFCS\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_to_ufcs() {\n     let s = Struct;\n-    s.method1('x', true);\n+    s.method1('x', true); // ------\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n // One might think this would be expanded in the hir_owner_nodes/Mir, but it actually\n // results in slightly different hir_owner/Mir.\n pub fn change_to_ufcs() {\n@@ -162,15 +184,15 @@ impl Struct2 {\n \n // Change UFCS Callee Indirectly\n pub mod change_ufcs_callee_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Struct as Struct;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Struct2 as Struct;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-\n-\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn change_ufcs_callee_indirectly() {\n         let s = Struct;\n         Struct::method1(&s, 'q', false)"}, {"sha": "2a4306fc17c2d9406a9df9c5acc0c9ff7adb70f6", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,39 +6,49 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans -Zmir-opt-level=0\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph -Zmir-opt-level=0\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change closure body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_closure_body() {\n     let _ = || 1u32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_closure_body() {\n     let _ = || 3u32;\n }\n \n \n \n // Add parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_parameter() {\n     let x = 0u32;\n-    let _ = || x + 1;\n+    let _ = |      | x + 1;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_parameter() {\n     let x = 0u32;\n     let _ = |x: u32| x + 1;\n@@ -47,45 +57,51 @@ pub fn add_parameter() {\n \n \n // Change parameter pattern\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_parameter_pattern() {\n-    let _ = |x: (u32,)| x;\n+    let _ = | x  : (u32,)| x;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;\n }\n \n \n \n // Add `move` to closure\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_move() {\n-    let _ = || 1;\n+    let _ =      || 1;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_move() {\n     let _ = move || 1;\n }\n \n \n \n // Add type ascription to parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_type_ascription_to_parameter() {\n-    let closure = |x| x + 1u32;\n+    let closure = |x     | x + 1u32;\n     let _: u32 = closure(1);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner_nodes, typeck\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner_nodes, typeck\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n     let _: u32 = closure(1);\n@@ -94,15 +110,17 @@ pub fn add_type_ascription_to_parameter() {\n \n \n // Change parameter type\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_parameter_type() {\n     let closure = |x: u32| (x as u64) + 1;\n     let _ = closure(1);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;\n     let _ = closure(1);"}, {"sha": "c85f0bbecdb3928bacb3afe2e5f33d66fe85bfeb", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// compile-flags: -Z query-dep-graph\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "7522fa5a0260c4ce30625781a5896f08a7b8d817", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 91, "deletions": 37, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans -Zmir-opt-level=0\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph -Zmir-opt-level=0\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -24,7 +30,7 @@ pub enum Enum {\n }\n \n // Change field value (struct-like) -----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n@@ -33,9 +39,11 @@ pub fn change_field_value_struct_like() -> Enum {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n@@ -47,7 +55,7 @@ pub fn change_field_value_struct_like() -> Enum {\n \n \n // Change field order (struct-like) -----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         x: 3,\n@@ -56,9 +64,11 @@ pub fn change_field_order_struct_like() -> Enum {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n pub fn change_field_order_struct_like() -> Enum {\n@@ -86,18 +96,20 @@ pub enum Enum2 {\n }\n \n // Change constructor path (struct-like) ------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_path_struct_like() {\n-    let _ = Enum::Struct {\n+    let _ = Enum ::Struct {\n         x: 0,\n         y: 1,\n         z: 2,\n     };\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n@@ -109,18 +121,20 @@ pub fn change_constructor_path_struct_like() {\n \n \n // Change variant (regular struct) ------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_variant_struct_like() {\n-    let _ = Enum2::Struct {\n+    let _ = Enum2::Struct  {\n         x: 0,\n         y: 1,\n         z: 2,\n     };\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n         x: 0,\n@@ -132,9 +146,9 @@ pub fn change_constructor_variant_struct_like() {\n \n // Change constructor path indirectly (struct-like) -------------------------\n pub mod change_constructor_path_indirectly_struct_like {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Enum as TheEnum;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Enum2 as TheEnum;\n \n     #[rustc_clean(\n@@ -143,6 +157,12 @@ pub mod change_constructor_path_indirectly_struct_like {\n                 typeck\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n+                typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> TheEnum {\n         TheEnum::Struct {\n             x: 0,\n@@ -156,13 +176,15 @@ pub mod change_constructor_path_indirectly_struct_like {\n // Change constructor variant indirectly (struct-like) ---------------------------\n pub mod change_constructor_variant_indirectly_struct_like {\n     use super::Enum2;\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Enum2::Struct as Variant;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Enum2::Struct2 as Variant;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> Enum2 {\n         Variant {\n             x: 0,\n@@ -174,60 +196,72 @@ pub mod change_constructor_variant_indirectly_struct_like {\n \n \n // Change field value (tuple-like) -------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 2)\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n }\n \n \n \n // Change constructor path (tuple-like) --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_path_tuple_like() {\n-    let _ = Enum::Tuple(0, 1, 2);\n+    let _ = Enum ::Tuple(0, 1, 2);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n     except=\"hir_owner_nodes,optimized_mir,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(\n+    cfg=\"cfail5\",\n+    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+)]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n \n \n \n // Change constructor variant (tuple-like) --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_variant_tuple_like() {\n-    let _ = Enum2::Tuple(0, 1, 2);\n+    let _ = Enum2::Tuple (0, 1, 2);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n     except=\"hir_owner_nodes,optimized_mir,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(\n+    cfg=\"cfail5\",\n+    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+)]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple2(0, 1, 2);\n }\n \n \n // Change constructor path indirectly (tuple-like) ---------------------------\n pub mod change_constructor_path_indirectly_tuple_like {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Enum as TheEnum;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Enum2 as TheEnum;\n \n     #[rustc_clean(\n@@ -236,6 +270,12 @@ pub mod change_constructor_path_indirectly_tuple_like {\n                 typeck\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n+                typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> TheEnum {\n         TheEnum::Tuple(0, 1, 2)\n     }\n@@ -246,13 +286,15 @@ pub mod change_constructor_path_indirectly_tuple_like {\n // Change constructor variant indirectly (tuple-like) ---------------------------\n pub mod change_constructor_variant_indirectly_tuple_like {\n     use super::Enum2;\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Enum2::Tuple as Variant;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Enum2::Tuple2 as Variant;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n     }\n@@ -272,39 +314,43 @@ pub enum Clike2 {\n }\n \n // Change constructor path (C-like) --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_path_c_like() {\n-    let _x = Clike::B;\n+    let _x = Clike ::B;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_c_like() {\n     let _x = Clike2::B;\n }\n \n \n \n // Change constructor variant (C-like) --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_variant_c_like() {\n     let _x = Clike::A;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_c_like() {\n     let _x = Clike::C;\n }\n \n \n // Change constructor path indirectly (C-like) ---------------------------\n pub mod change_constructor_path_indirectly_c_like {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Clike as TheEnum;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Clike2 as TheEnum;\n \n     #[rustc_clean(\n@@ -313,6 +359,12 @@ pub mod change_constructor_path_indirectly_c_like {\n                 typeck\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n+                typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> TheEnum {\n         TheEnum::B\n     }\n@@ -323,13 +375,15 @@ pub mod change_constructor_path_indirectly_c_like {\n // Change constructor variant indirectly (C-like) ---------------------------\n pub mod change_constructor_variant_indirectly_c_like {\n     use super::Clike;\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::Clike::A as Variant;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::Clike::B as Variant;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> Clike {\n         Variant\n     }"}, {"sha": "ab9c740844b8fd3967b28fd69d8a3461fda9f2d0", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 157, "deletions": 79, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -11,8 +11,14 @@\n // the same between rev2 and rev3.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -22,28 +28,32 @@\n \n \n // Change enum visibility -----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumVisibility { A }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub enum EnumVisibility {\n     A\n }\n \n \n \n // Change name of a c-style variant -------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n     Variant2,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n     Variant2Changed,\n@@ -52,15 +62,17 @@ enum EnumChangeNameCStyleVariant {\n \n \n // Change name of a tuple-style variant ---------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n     Variant2(u32, f32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n     Variant2Changed(u32, f32),\n@@ -69,15 +81,17 @@ enum EnumChangeNameTupleStyleVariant {\n \n \n // Change name of a struct-style variant --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n     Variant2 { a: u32, b: f32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n     Variant2Changed { a: u32, b: f32 },\n@@ -86,31 +100,33 @@ enum EnumChangeNameStructStyleVariant {\n \n \n // Change the value of a c-style variant --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeValueCStyleVariant0 {\n     Variant1,\n     Variant2 = 11,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeValueCStyleVariant0 {\n     Variant1,\n-\n-    Variant2 =\n-        22,\n+    Variant2 = 22,\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n     Variant2,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n     Variant2 = 11,\n@@ -119,14 +135,16 @@ enum EnumChangeValueCStyleVariant1 {\n \n \n // Add a c-style variant ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddCStyleVariant {\n     Variant1,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n     Variant2,\n@@ -135,30 +153,34 @@ enum EnumAddCStyleVariant {\n \n \n // Remove a c-style variant ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n     Variant2,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n }\n \n \n \n // Add a tuple-style variant --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n     Variant2(u32, f32),\n@@ -167,30 +189,34 @@ enum EnumAddTupleStyleVariant {\n \n \n // Remove a tuple-style variant -----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n     Variant2(u32, f32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n }\n \n \n \n // Add a struct-style variant -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddStructStyleVariant {\n     Variant1,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n     Variant2 { a: u32, b: f32 },\n@@ -199,30 +225,34 @@ enum EnumAddStructStyleVariant {\n \n \n // Remove a struct-style variant ----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n     Variant2 { a: u32, b: f32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n }\n \n \n \n // Change the type of a field in a tuple-style variant ------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeFieldTypeTupleStyleVariant {\n     Variant1(u32, u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n     Variant1(u32,\n         u64),\n@@ -231,15 +261,17 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n \n \n // Change the type of a field in a struct-style variant -----------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n     Variant2 { a: u32, b: u32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n     Variant2 {\n@@ -251,29 +283,33 @@ enum EnumChangeFieldTypeStructStyleVariant {\n \n \n // Change the name of a field in a struct-style variant -----------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, b: u32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n }\n \n \n \n // Change order of fields in a tuple-style variant ----------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeOrderTupleStyleVariant {\n     Variant1(u32, u64),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeOrderTupleStyleVariant {\n     Variant1(\n         u64,\n@@ -283,60 +319,68 @@ enum EnumChangeOrderTupleStyleVariant {\n \n \n // Change order of fields in a struct-style variant ---------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { a: u32, b: f32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n }\n \n \n \n // Add a field to a tuple-style variant ---------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n }\n \n \n \n // Add a field to a struct-style variant --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n }\n \n \n \n // Add #[must_use] to the enum ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddMustUse {\n     Variant1,\n     Variant2,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[must_use]\n enum EnumAddMustUse {\n     Variant1,\n@@ -346,15 +390,17 @@ enum EnumAddMustUse {\n \n \n // Add #[repr(C)] to the enum -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddReprC {\n     Variant1,\n     Variant2,\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[repr(C)]\n enum EnumAddReprC {\n     Variant1,\n@@ -364,30 +410,34 @@ enum EnumAddReprC {\n \n \n // Change the name of a type parameter ----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeNameOfTypeParameter<S> {\n     Variant1(S),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeNameOfTypeParameter<T> {\n     Variant1(T),\n }\n \n \n \n // Add a type parameter ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddTypeParameter<S> {\n     Variant1(S),\n     Variant2(S),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddTypeParameter<S, T> {\n     Variant1(S),\n     Variant2(T),\n@@ -396,30 +446,34 @@ enum EnumAddTypeParameter<S, T> {\n \n \n // Change the name of a lifetime parameter ------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumChangeNameOfLifetimeParameter<'a> {\n     Variant1(&'a u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n }\n \n \n \n // Add a lifetime parameter ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddLifetimeParameter<'a> {\n     Variant1(&'a u32),\n     Variant2(&'a u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -428,30 +482,34 @@ enum EnumAddLifetimeParameter<'a, 'b> {\n \n \n // Add a lifetime bound to a lifetime parameter -------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddLifetimeParameterBound<'a, 'b> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n }\n \n // Add a lifetime bound to a type parameter -----------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddLifetimeBoundToParameter<'a, T> {\n     Variant1(T),\n     Variant2(&'a u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -460,30 +518,34 @@ enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n \n \n // Add a trait bound to a type parameter --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddTraitBound<S> {\n     Variant1(S),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddTraitBound<T: Sync> {\n     Variant1(T),\n }\n \n \n \n // Add a lifetime bound to a lifetime parameter in where clause ---------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -492,15 +554,17 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n \n \n // Add a lifetime bound to a type parameter in where clause -------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n     Variant1(T),\n     Variant2(&'a u32),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -509,30 +573,34 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n \n \n // Add a trait bound to a type parameter in where clause ----------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumAddTraitBoundWhere<S> {\n     Variant1(S),\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumAddTraitBoundWhere<T> where T: Sync {\n     Variant1(T),\n }\n \n \n \n // In an enum with two variants, swap usage of type parameters ----------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumSwapUsageTypeParameters<A, B> {\n     Variant1 { a: A },\n     Variant2 { a: B },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n     Variant1 {\n         a: B\n@@ -545,15 +613,17 @@ enum EnumSwapUsageTypeParameters<A, B> {\n \n \n // In an enum with two variants, swap usage of lifetime parameters ------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n     Variant1 { a: &'a u32 },\n     Variant2 { b: &'b u32 },\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n     Variant1 {\n         a: &'b u32\n@@ -572,13 +642,15 @@ struct ReferencedType2;\n \n // Change field type in tuple-style variant indirectly by modifying a use statement\n mod change_field_type_indirectly_tuple_style {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as FieldType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     enum TupleStyle {\n         Variant1(\n             FieldType\n@@ -590,13 +662,15 @@ mod change_field_type_indirectly_tuple_style {\n \n // Change field type in record-style variant indirectly by modifying a use statement\n mod change_field_type_indirectly_struct_style {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as FieldType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     enum StructStyle {\n         Variant1 {\n             a: FieldType\n@@ -613,13 +687,15 @@ trait ReferencedTrait2 {}\n \n // Change trait bound of type parameter indirectly by modifying a use statement\n mod change_trait_bound_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n     }\n@@ -629,13 +705,15 @@ mod change_trait_bound_indirectly {\n \n // Change trait bound of type parameter in where clause indirectly by modifying a use statement\n mod change_trait_bound_indirectly_where {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)\n     }"}, {"sha": "d5fb8a2e53437a118e03c66aa14dbcaa77f8c74f", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -1,6 +1,12 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -10,14 +16,16 @@\n //         the hash of the hir_owner_nodes node should change, but not the hash of\n //         either the hir_owner or the Metadata node.\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn body_not_exported_to_metadata() -> u32 {\n     1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n }\n@@ -28,15 +36,17 @@ pub fn body_not_exported_to_metadata() -> u32 {\n //         marked as #[inline]. Only the hash of the hir_owner depnode should be\n //         unaffected by a change to the body.\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n     1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n     2\n@@ -48,15 +58,17 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n //         generic. Only the hash of the hir_owner depnode should be\n //         unaffected by a change to the body.\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n     1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n     2"}, {"sha": "783407a9e04f1cf8ef9e8adbc5a33bf3ebc520d6", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,155 +6,183 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n #![crate_type = \"rlib\"]\n \n // Change function name --------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn change_function_name1(c: i64) -> i32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn change_function_name2(c: i64) -> i32;\n }\n \n // Change parameter name -------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn change_parameter_name(c: i64) -> i32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn change_parameter_name(d: i64) -> i32;\n }\n \n // Change parameter type -------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn change_parameter_type(c: i64) -> i32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn change_parameter_type(c: i32) -> i32;\n }\n \n // Change return type ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn change_return_type(c: i32) -> i32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n-    pub fn change_return_type(c: i32) -> i8;\n+    pub fn change_return_type(c: i32) -> i8 ;\n }\n \n // Add parameter ---------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n-    pub fn add_parameter(c: i32) -> i32;\n+    pub fn add_parameter(c: i32        ) -> i32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n }\n \n // Add return type -------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n-    pub fn add_return_type(c: i32);\n+    pub fn add_return_type(c: i32)       ;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn add_return_type(c: i32) -> i32;\n }\n \n // Make function variadic ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n-    pub fn make_function_variadic(c: i32);\n+    pub fn make_function_variadic(c: i32     );\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn make_function_variadic(c: i32, ...);\n }\n \n // Change calling convention ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"rust-call\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n // Make function public --------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     fn make_function_public(c: i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn make_function_public(c: i32);\n }\n \n // Add function ----------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n     pub fn add_function1(c: i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n extern \"C\" {\n     pub fn add_function1(c: i32);\n     pub fn add_function2();\n }\n \n // Change link-name ------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[link(name = \"foo\")]\n extern \"C\" {\n     pub fn change_link_name(c: i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n #[link(name = \"bar\")]\n extern \"C\" {\n     pub fn change_link_name(c: i32);\n@@ -165,27 +193,31 @@ type c_i64 = i64;\n \n // Indirectly change parameter type --------------------------------------------\n mod indirectly_change_parameter_type {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::c_i32 as c_int;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::c_i64 as c_int;\n \n     #[rustc_clean(cfg = \"cfail2\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(cfg = \"cfail5\")]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     extern \"C\" {\n         pub fn indirectly_change_parameter_type(c: c_int);\n     }\n }\n \n // Indirectly change return type --------------------------------------------\n mod indirectly_change_return_type {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::c_i32 as c_int;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::c_i64 as c_int;\n \n     #[rustc_clean(cfg = \"cfail2\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(cfg = \"cfail5\")]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     extern \"C\" {\n         pub fn indirectly_change_return_type() -> c_int;\n     }"}, {"sha": "5a944d28a0b913facc8955e2f829a7d50dcbce42", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,16 +6,22 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change loop body ------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -24,9 +30,11 @@ pub fn change_loop_body() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -38,7 +46,7 @@ pub fn change_loop_body() {\n \n \n // Change iteration variable name ----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n     for _i in 0..1 {\n@@ -47,9 +55,11 @@ pub fn change_iteration_variable_name() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n     for _a in 0..1 {\n@@ -61,18 +71,20 @@ pub fn change_iteration_variable_name() {\n \n \n // Change iteration variable pattern -------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n-    for _i in &[0, 1, 2] {\n+    for  _i in &[0, 1, 2] {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n     for &_i in &[0, 1, 2] {\n@@ -84,7 +96,7 @@ pub fn change_iteration_variable_pattern() {\n \n \n // Change iterable -------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_iterable() {\n     let mut _x = 0;\n     for _ in &[0, 1, 2] {\n@@ -93,9 +105,11 @@ pub fn change_iterable() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n     for _ in &[0, 1, 3] {\n@@ -107,17 +121,20 @@ pub fn change_iterable() {\n \n \n // Add break -------------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_break() {\n     let mut _x = 0;\n     for _ in 0..1 {\n         _x = 1;\n+        // ---\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_break() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -129,18 +146,20 @@ pub fn add_break() {\n \n \n // Add loop label --------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label() {\n     let mut _x = 0;\n-    for _ in 0..1 {\n+            for _ in 0..1 {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -152,18 +171,20 @@ pub fn add_loop_label() {\n \n \n // Add loop label to break -----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n         _x = 1;\n-        break;\n+        break       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -175,7 +196,7 @@ pub fn add_loop_label_to_break() {\n \n \n // Change break label ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -186,9 +207,11 @@ pub fn change_break_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -202,18 +225,20 @@ pub fn change_break_label() {\n \n \n // Add loop label to continue --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n         _x = 1;\n-        continue;\n+        continue       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -225,7 +250,7 @@ pub fn add_loop_label_to_continue() {\n \n \n // Change continue label ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -236,9 +261,11 @@ pub fn change_continue_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -252,7 +279,7 @@ pub fn change_continue_label() {\n \n \n // Change continue to break ----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -261,13 +288,15 @@ pub fn change_continue_to_break() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     for _ in 0..1 {\n         _x = 1;\n-        break;\n+        break   ;\n     }\n }"}, {"sha": "4124eada188e862e990fc5e3d930c084ba8855c0", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 145, "deletions": 63, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(linkage)]\n@@ -16,248 +22,310 @@\n \n // Add Parameter ---------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_parameter() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn add_parameter(p: i32) {}\n \n // Add Return Type -------------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn add_return_type() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn add_return_type()       {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn add_return_type() -> () {}\n \n // Change Parameter Type -------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn type_of_parameter(p: i32) {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn type_of_parameter(p: i64) {}\n \n // Change Parameter Type Reference ---------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn type_of_parameter_ref(p: &i32) {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n \n // Change Parameter Order ------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn order_of_parameters(p1: i32, p2: i64) {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n \n // Unsafe ----------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn make_unsafe() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub unsafe fn make_unsafe() {}\n \n // Extern ----------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn make_extern() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub            fn make_extern() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, typeck, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, typeck, fn_sig\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub extern \"C\" fn make_extern() {}\n \n // Type Parameter --------------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn type_parameter() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn type_parameter   () {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn type_parameter<T>() {}\n \n // Lifetime Parameter ----------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn lifetime_parameter() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn lifetime_parameter    () {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, generics_of,fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, generics_of,fn_sig\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn lifetime_parameter<'a>() {}\n \n // Trait Bound -----------------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn trait_bound<T>() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn trait_bound<T    >() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn trait_bound<T: Eq>() {}\n \n // Builtin Bound ---------------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn builtin_bound<T>() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn builtin_bound<T      >() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn builtin_bound<T: Send>() {}\n \n // Lifetime Bound --------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn lifetime_bound<'a, T>() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of,fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of,fn_sig,optimized_mir\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n \n // Second Trait Bound ----------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn second_trait_bound<T: Eq>() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn second_trait_bound<T: Eq        >() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_trait_bound<T: Eq + Clone>() {}\n \n // Second Builtin Bound --------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn second_builtin_bound<T: Send>() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn second_builtin_bound<T: Send        >() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn second_builtin_bound<T: Send + Sized>() {}\n \n // Second Lifetime Bound -------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n+#[cfg(any(cfail1,cfail4))]\n+pub fn second_lifetime_bound<'a, 'b, T: 'a     >() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n     except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of,fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(\n+    cfg = \"cfail5\",\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of,fn_sig\"\n+)]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n // Inline ----------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn inline() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n #[inline]\n pub fn inline() {}\n \n // Inline Never ----------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[inline(always)]\n pub fn inline_never() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n #[inline(never)]\n pub fn inline_never() {}\n \n // No Mangle -------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn no_mangle() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n #[no_mangle]\n pub fn no_mangle() {}\n \n // Linkage ---------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn linkage() {}\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n #[linkage = \"weak_odr\"]\n pub fn linkage() {}\n \n // Return Impl Trait -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n-pub fn return_impl_trait() -> i32 {\n+#[cfg(any(cfail1,cfail4))]\n+pub fn return_impl_trait() -> i32        {\n     0\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, typeck, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n+#[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, typeck, fn_sig, optimized_mir\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n pub fn return_impl_trait() -> impl Clone {\n     0\n }\n \n // Change Return Impl Trait ----------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_return_impl_trait() -> impl Clone {\n     0u32\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n-pub fn change_return_impl_trait() -> impl Copy {\n+#[rustc_clean(cfg = \"cfail5\")]\n+#[rustc_clean(cfg = \"cfail6\")]\n+pub fn change_return_impl_trait() -> impl  Copy {\n     0u32\n }\n \n@@ -267,16 +335,21 @@ pub struct ReferencedType1;\n pub struct ReferencedType2;\n \n pub mod change_return_type_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as ReturnType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as ReturnType;\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n         except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(\n+        cfg = \"cfail5\",\n+        except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+    )]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     pub fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n     }\n@@ -285,16 +358,21 @@ pub mod change_return_type_indirectly {\n // Change Parameter Type Indirectly --------------------------------------------\n \n pub mod change_parameter_type_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as ParameterType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as ParameterType;\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n         except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(\n+        cfg = \"cfail5\",\n+        except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck, fn_sig\"\n+    )]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}\n }\n \n@@ -304,26 +382,30 @@ pub trait ReferencedTrait1 {}\n pub trait ReferencedTrait2 {}\n \n pub mod change_trait_bound_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n \n // Change Trait Bound Indirectly In Where Clause -------------------------------\n \n pub mod change_trait_bound_indirectly_in_where_clause {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n+    #[rustc_clean(cfg = \"cfail5\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail6\")]\n     pub fn indirect_trait_bound_where<T>(p: T)\n     where\n         T: Trait,"}, {"sha": "0a665a269dde5bc4d6ed3d39008d2960af17e8e5", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,27 +6,34 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n-\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n // Change condition (if)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_condition(x: bool) -> u32 {\n-    if x {\n+    if  x {\n         return 1\n     }\n \n     return 0\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n         return 1\n@@ -36,7 +43,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n // Change then branch (if)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n         return 1\n@@ -45,9 +52,11 @@ pub fn change_then_branch(x: bool) -> u32 {\n     return 0\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n         return 2\n@@ -59,7 +68,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n \n \n // Change else branch (if)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n         1\n@@ -68,9 +77,11 @@ pub fn change_else_branch(x: bool) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n         1\n@@ -82,20 +93,23 @@ pub fn change_else_branch(x: bool) -> u32 {\n \n \n // Add else branch (if)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n \n     if x {\n         ret = 2;\n+    /*----*/\n     }\n \n     ret\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n \n@@ -110,7 +124,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n \n \n // Change condition (if let)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_x) = x {\n         return 1\n@@ -119,11 +133,13 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     0\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n-    if let Some(_) = x {\n+    if let Some(_ ) = x {\n         return 1\n     }\n \n@@ -133,18 +149,20 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n \n \n // Change then branch (if let)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n-        return x\n+        return x //-\n     }\n \n     0\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n         return x + 1\n@@ -156,7 +174,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n \n \n // Change else branch (if let)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n         x\n@@ -165,9 +183,11 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n         x\n@@ -179,20 +199,23 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n \n \n // Add else branch (if let)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;\n \n     if let Some(x) = x {\n         ret = x;\n+    /*----*/\n     }\n \n     ret\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;\n "}, {"sha": "0532f4a0fd65db696327aae877383a683ccd6eb4", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,112 +6,132 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n // Change simple index\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[3]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[4]\n }\n \n \n \n // Change lower bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[2..5]\n }\n \n \n \n // Change upper bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n \n \n \n // Add lower bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n-    &slice[..4]\n+    &slice[ ..4]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..4]\n }\n \n \n \n // Add upper bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n-    &slice[3..]\n+    &slice[3.. ]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n \n \n \n // Change mutability\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&mut slice[3..5])[0]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n-    (&slice[3..5])[0]\n+    (&    slice[3..5])[0]\n }\n \n \n \n // Exclusive to inclusive range\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n-    &slice[3..7]\n+    &slice[3.. 7]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..=7]\n }"}, {"sha": "d711cc20dd70afd78bfac79fabfa79924a741880", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 378, "deletions": 122, "changes": 500, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n \n #![allow(warnings)]\n@@ -17,36 +23,46 @@\n pub struct Foo;\n \n // Change Method Name -----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n     pub fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn method_name2() { }\n }\n \n // Change Method Body -----------------------------------------------------------\n //\n // This should affect the method itself, but not the impl.\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub fn method_body() { }\n+    //--------------------------------------------------------------------------------------\n+    //--------------------------\n+    //--------------------------------------------------------------------------------------\n+    //--------------------------\n+    pub fn method_body() {\n+        // -----------------------\n+    }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n-    #[rustc_clean(\n-        cfg=\"cfail2\",\n-        except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck\"\n-    )]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n     }\n@@ -56,21 +72,40 @@ impl Foo {\n // Change Method Body (inlined) ------------------------------------------------\n //\n // This should affect the method itself, but not the impl.\n-#[cfg(cfail1)]\n-impl Foo {\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    //------------\n+    //---------------\n+    //------------------------------------------------------------\n+    //\n+    //--------------------------\n+    //------------\n+    //---------------\n+    //------------------------------------------------------------\n+    //\n+    //--------------------------\n     #[inline]\n-    pub fn method_body_inlined() { }\n+    pub fn method_body_inlined() {\n+        // -----------------------\n+    }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[inline]\n     pub fn method_body_inlined() {\n         println!(\"Hello, world!\");\n@@ -79,232 +114,335 @@ impl Foo {\n \n \n // Change Method Privacy -------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n     pub fn method_privacy() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"associated_item,hir_owner,hir_owner_nodes,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_privacy() { }\n }\n \n // Change Method Selfness -----------------------------------------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    //------------\n+    //---------------\n+    //---------------------------------------------------------------------------------------------\n+    //\n+    //--------------------------\n+    //------------\n+    //---------------\n+    //---------------------------------------------------------------------------------------------\n+    //\n+    //--------------------------\n     pub fn method_selfness() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"hir_owner,hir_owner_nodes,fn_sig,generics_of,typeck,associated_item,optimized_mir\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,generics_of,typeck,associated_item,optimized_mir\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn method_selfness(&self) { }\n }\n \n // Change Method Selfmutness ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub fn method_selfmutness(&self) { }\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    pub fn method_selfmutness(&    self) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n-    #[rustc_clean(\n-        cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\"\n-    )]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn method_selfmutness(&mut self) { }\n }\n \n \n \n // Add Method To Impl ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n     pub fn add_method_to_impl1(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_method_to_impl1(&self) { }\n \n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_method_to_impl2(&self) { }\n }\n \n \n \n // Add Method Parameter --------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub fn add_method_parameter(&self) { }\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    pub fn add_method_parameter(&self        ) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n-    #[rustc_clean(\n-        cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\"\n-    )]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n }\n \n \n \n // Change Method Parameter Name ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n+    //------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------\n+    //--------------------------\n     pub fn change_method_parameter_name(&self, a: i64) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n \n \n \n // Change Method Return Type ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n     pub fn change_method_return_type(&self) -> u16 { 0 }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n-    #[rustc_clean(\n-        cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    pub fn change_method_return_type(&self) -> u8 { 0 }\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n+    pub fn change_method_return_type(&self) -> u32 { 0 }\n }\n \n \n \n // Make Method #[inline] -------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n+    //-------\n     pub fn make_method_inline(&self) -> u8 { 0 }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[inline]\n     pub fn make_method_inline(&self) -> u8 { 0 }\n }\n \n \n \n //  Change order of parameters -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n+    //------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------\n+    //--------------------------\n     pub fn change_method_parameter_order(&self, a: i64, b: i64) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n \n \n \n // Make method unsafe ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub fn make_method_unsafe(&self) { }\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------------------------------\n+    //--------------------------\n+    pub        fn make_method_unsafe(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n-    #[rustc_clean(\n-        cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\"\n-    )]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n }\n \n \n \n // Make method extern ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub fn make_method_extern(&self) { }\n+    //----------------------------------------------------------------------------\n+    //--------------------------\n+    //----------------------------------------------------------------------------\n+    //--------------------------\n+    pub            fn make_method_extern(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub extern \"C\" fn make_method_extern(&self) { }\n }\n \n \n \n // Change method calling convention --------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n-    pub extern \"C\" fn change_method_calling_convention(&self) { }\n+    //----------------------------------------------------------------------------\n+    //--------------------------\n+    //----------------------------------------------------------------------------\n+    //--------------------------\n+    pub extern \"C\"      fn change_method_calling_convention(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub extern \"system\" fn change_method_calling_convention(&self) { }\n }\n \n \n \n // Add Lifetime Parameter to Method --------------------------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n-    pub fn add_lifetime_parameter_to_method(&self) { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    // -----------------------------------------------------\n+    // ---------------------------------------------------------\n+    // ----------------------------------------------------------\n+    // -------------------------------------------------------\n+    // -------------------------------------------------------\n+    // --------------------------------------------------------\n+    // ----------------------------------------------------------\n+    // -----------------------------------------------------------\n+    // ----------------------------------------------------------\n+    // --------------------------------------------------------------------\n+    // -------------------------\n+    // --------------------------------------------------------------------------------\n+    // -------------------------\n+    pub fn add_lifetime_parameter_to_method    (&self) { }\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     // Warning: Note that `typeck` are coming up clean here.\n     // The addition or removal of lifetime parameters that don't\n@@ -317,20 +455,43 @@ impl Foo {\n     // `typeck` appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,fn_sig,generics_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }\n \n \n \n // Add Type Parameter To Method ------------------------------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n-    pub fn add_type_parameter_to_method(&self) { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    // -----------------------------------------------------\n+    // ---------------------------------------------------------------\n+    // -------------------------------------------------------------\n+    // -----------------------------------------------------\n+    // -------------------------------------------------------------\n+    // ---------------------------------------------------\n+    // ------------------------------------------------------------\n+    // ------------------------------------------------------\n+    // -------------------------------------------------\n+    // -----------\n+    // --------------\n+    // ----------------------------------------------------------------------\n+    //\n+    // -------------------------\n+    // -----------\n+    // --------------\n+    // ----------------------------------------------------------------------\n+    //\n+    // -------------------------\n+    pub fn add_type_parameter_to_method   (&self) { }\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     // Warning: Note that `typeck` are coming up clean here.\n     // The addition or removal of type parameters that don't appear in\n@@ -346,40 +507,83 @@ impl Foo {\n         except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n }\n \n \n \n // Add Lifetime Bound to Lifetime Parameter of Method --------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n-    pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b>(&self) { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    //------------\n+    //---------------\n+    //-----------------------------------------------------------------------------\n+    //\n+    //--------------------------\n+    //------------\n+    //---------------\n+    //-----------------------------------------------------------------------------\n+    //\n+    //--------------------------\n+    pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b    >(&self) { }\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of,fn_sig\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of,fn_sig\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n }\n \n \n \n // Add Lifetime Bound to Type Parameter of Method ------------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n-    pub fn add_lifetime_bound_to_type_param_of_method<'a, T>(&self) { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    // -----------------------------------------------------\n+    // ----------------------------------------------------------\n+    // -------------------------------------------------------------\n+    // -------------------------------------------------\n+    // -------------------------------------------------------------\n+    // ---------------------------------------------------\n+    // ------------------------------------------------------------\n+    // ------------------------------------------------------\n+    // -------------------------------------------------\n+    // -----------\n+    // --------------\n+    // ----------------------------------------------------------------------------\n+    //\n+    // -------------------------\n+    // -----------\n+    // --------------\n+    // ----------------------------------------------------------------------------\n+    //\n+    // -------------------------\n+    pub fn add_lifetime_bound_to_type_param_of_method<'a, T    >(&self) { }\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     // Warning: Note that `typeck` are coming up clean here.\n     // The addition or removal of bounds that don't appear in the\n@@ -390,23 +594,45 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `typeck`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,\\\n-                                        type_of,fn_sig\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of,fn_sig\"\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of,fn_sig\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n }\n \n \n \n // Add Trait Bound to Type Parameter of Method ------------------------------\n-#[cfg(cfail1)]\n-impl Foo {\n-    pub fn add_trait_bound_to_type_param_of_method<T>(&self) { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(any(cfail1,cfail4))]\n+impl Foo {\n+    // -----------------------------------------------------\n+    // ----------------------------------------------------------\n+    // -------------------------------------------------------------\n+    // -------------------------------------------------\n+    // -------------------------------------------------------------\n+    // ---------------------------------------------------\n+    // ------------------------------------------------------------\n+    // ------------------------------------------------------\n+    // -------------------------------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    pub fn add_trait_bound_to_type_param_of_method<T       >(&self) { }\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     // Warning: Note that `typeck` are coming up clean here.\n     // The addition or removal of bounds that don't appear in the\n@@ -419,23 +645,34 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n \n \n \n // Add #[no_mangle] to Method --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Foo {\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n+    //----------\n     pub fn add_no_mangle_to_method(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[no_mangle]\n     pub fn add_no_mangle_to_method(&self) { }\n }\n@@ -445,71 +682,90 @@ impl Foo {\n struct Bar<T>(T);\n \n // Add Type Parameter To Impl --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Bar<u32> {\n     pub fn add_type_parameter_to_impl(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,generics_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"generics_of,fn_sig,typeck,type_of,optimized_mir\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"generics_of,fn_sig,typeck,type_of,optimized_mir\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n }\n \n \n \n // Change Self Type of Impl ----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl Bar<u32> {\n     pub fn change_impl_self_type(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"fn_sig,optimized_mir,typeck\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn change_impl_self_type(&self) { }\n }\n \n \n \n // Add Lifetime Bound to Impl --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl<T> Bar<T> {\n     pub fn add_lifetime_bound_to_impl_parameter(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl<T: 'static> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_lifetime_bound_to_impl_parameter(&self) { }\n }\n \n \n \n // Add Trait Bound to Impl Parameter -------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl<T> Bar<T> {\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl<T: Clone> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }\n \n@@ -518,12 +774,12 @@ impl<T: Clone> Bar<T> {\n pub fn instantiation_root() {\n     Foo::method_privacy();\n \n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     {\n         Bar(0u32).change_impl_self_type();\n     }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     {\n         Bar(0u64).change_impl_self_type();\n     }"}, {"sha": "a5d53258a7bd007fba5a131e4cc106cb31124395", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -17,7 +23,7 @@\n \n \n // Change template\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n@@ -32,9 +38,11 @@ pub fn change_template(a: i32) -> i32 {\n     c\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n@@ -52,7 +60,7 @@ pub fn change_template(a: i32) -> i32 {\n \n \n // Change output\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n@@ -68,9 +76,11 @@ pub fn change_output(a: i32) -> i32 {\n     _out1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n@@ -89,7 +99,7 @@ pub fn change_output(a: i32) -> i32 {\n \n \n // Change input\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -104,9 +114,11 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n     _out\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -124,7 +136,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n \n \n // Change input constraint\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -139,9 +151,11 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     _out\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -159,24 +173,26 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n \n \n // Change clobber\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n         llvm_asm!(\"add 1, $0\"\n                   : \"=r\"(_out)\n                   : \"0\"(_a)\n-                  :\n+                  :/*--*/\n                   :\n                   );\n     }\n     _out\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n@@ -194,7 +210,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n \n \n // Change options\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n@@ -203,15 +219,17 @@ pub fn change_options(_a: i32) -> i32 {\n                   : \"=r\"(_out)\n                   : \"0\"(_a)\n                   :\n-                  :\n+                  :/*-------*/\n                   );\n     }\n     _out\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {\n     let _out;"}, {"sha": "a9f90ca9fed81ba359acddb381884fc9a473bfec", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 77, "deletions": 60, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,200 +6,217 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n-\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n // Change Name -----------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_name() {\n     let _x = 2u64;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_name() {\n     let _y = 2u64;\n }\n \n \n \n // Add Type --------------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_type() {\n-    let _x = 2u32;\n+    let _x      = 2u32;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n }\n \n \n \n // Change Type -----------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_type() {\n     let _x: u64 = 2;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_type() {\n-    let _x: u8 = 2;\n+    let _x: u8  = 2;\n }\n \n \n \n // Change Mutability of Reference Type -----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_mutability_of_reference_type() {\n-    let _x: &u64;\n+    let _x: &    u64;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n }\n \n \n \n // Change Mutability of Slot ---------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_mutability_of_slot() {\n     let mut _x: u64 = 0;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_mutability_of_slot() {\n-    let _x: u64 = 0;\n+    let     _x: u64 = 0;\n }\n \n \n \n // Change Simple Binding to Pattern --------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_simple_binding_to_pattern() {\n-    let _x = (0u8, 'x');\n+    let  _x      = (0u8, 'x');\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n }\n \n \n \n // Change Name in Pattern ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_name_in_pattern() {\n     let (_a, _b) = (1u8, 'y');\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n }\n \n \n \n // Add `ref` in Pattern --------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_ref_in_pattern() {\n-    let (_a, _b) = (1u8, 'y');\n+    let (    _a, _b) = (1u8, 'y');\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n }\n \n \n \n // Add `&` in Pattern ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_amp_in_pattern() {\n-    let (_a, _b) = (&1u8, 'y');\n+    let ( _a, _b) = (&1u8, 'y');\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n }\n \n \n \n // Change Mutability of Binding in Pattern -------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_mutability_of_binding_in_pattern() {\n-    let (_a, _b) = (99u8, 'q');\n+    let (    _a, _b) = (99u8, 'q');\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n }\n \n \n \n // Add Initializer -------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_initializer() {\n-    let _x: i16;\n+    let _x: i16       ;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n }\n \n \n \n // Change Initializer ----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_initializer() {\n     let _x = 4u16;\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_initializer() {\n     let _x = 5u16;\n }"}, {"sha": "6fef31f5b32104ed758b7193ca62c759ec18c9c4", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,16 +6,22 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change loop body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     loop {\n@@ -24,9 +30,11 @@ pub fn change_loop_body() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     loop {\n@@ -38,17 +46,20 @@ pub fn change_loop_body() {\n \n \n // Add break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_break() {\n     let mut _x = 0;\n     loop {\n         _x = 1;\n+        //----\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_break() {\n     let mut _x = 0;\n     loop {\n@@ -60,18 +71,20 @@ pub fn add_break() {\n \n \n // Add loop label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label() {\n     let mut _x = 0;\n-    loop {\n+    /*---*/ loop {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n     'label: loop {\n@@ -83,18 +96,20 @@ pub fn add_loop_label() {\n \n \n // Add loop label to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: loop {\n         _x = 1;\n-        break;\n+        break       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: loop {\n@@ -106,7 +121,7 @@ pub fn add_loop_label_to_break() {\n \n \n // Change break label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -117,9 +132,11 @@ pub fn change_break_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -133,18 +150,20 @@ pub fn change_break_label() {\n \n \n // Add loop label to continue\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: loop {\n         _x = 1;\n-        continue;\n+        continue       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: loop {\n@@ -156,7 +175,7 @@ pub fn add_loop_label_to_continue() {\n \n \n // Change continue label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -167,9 +186,11 @@ pub fn change_continue_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -183,7 +204,7 @@ pub fn change_continue_label() {\n \n \n // Change continue to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     loop {\n@@ -192,13 +213,15 @@ pub fn change_continue_to_break() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     loop {\n         _x = 1;\n-        break;\n+        break   ;\n     }\n }"}, {"sha": "314461b5909f7e36292c313b7ed9c001b671d0db", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 82, "deletions": 63, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,28 +6,35 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n-\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n // Add Arm ---------------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n         1 => 1,\n+        /*---*/\n         _ => 100,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -40,7 +47,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n \n // Change Order Of Arms --------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -49,10 +56,11 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n         1 => 1,\n@@ -64,19 +72,20 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n \n // Add Guard Clause ------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n-        1 => 1,\n+        1      => 1,\n         _ => 100,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n@@ -88,19 +97,20 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n \n // Change Guard Clause ------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n-        1 if y => 1,\n+        1 if  y => 1,\n         _ => 100,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n@@ -112,19 +122,20 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n \n // Add @-Binding ---------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n         1 => 1,\n-        _ => x,\n+            _ => x,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -136,7 +147,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n \n // Change Name of @-Binding ----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -145,10 +156,11 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -160,18 +172,19 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n \n // Change Simple Binding To Pattern --------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (0, 0) => 0,\n-        a => 1,\n+         a     => 1,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (0, 0) => 0,\n@@ -182,7 +195,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n \n // Change Name In Pattern ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (a, 0) => 0,\n@@ -191,10 +204,11 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (b, 0) => 0,\n@@ -206,18 +220,19 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n \n // Change Mutability Of Binding In Pattern -------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n-        (a, 0) => 0,\n+        (    a, 0) => 0,\n         _ => 1,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (mut a, 0) => 0,\n@@ -228,18 +243,19 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n \n // Add `ref` To Binding In Pattern -------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n-        (a, 0) => 0,\n+        (    a, 0) => 0,\n         _ => 1,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (ref a, 0) => 0,\n@@ -250,18 +266,19 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n \n // Add `&` To Binding In Pattern -------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n-        (a, 0) => 0,\n+        ( a, 0) => 0,\n         _ => 1,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n         (&a, 0) => 0,\n@@ -272,7 +289,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n \n // Change RHS Of Arm -----------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -281,10 +298,11 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -296,19 +314,20 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n \n // Add Alternative To Arm ------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {\n-        0 => 0,\n+        0     => 0,\n         1 => 1,\n         _ => 2,\n     }\n }\n \n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[cfg(not(any(cfail1,cfail4)))]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {\n         0 | 7 => 0,"}, {"sha": "2b2658b2f5f07b8f2107deb8535ab5c40fb24541", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -17,118 +23,140 @@\n \n \n // Change static visibility\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_VISIBILITY: u8 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub static STATIC_VISIBILITY: u8 = 0;\n \n \n // Change static mutability\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_MUTABILITY: u8 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static mut STATIC_MUTABILITY: u8 = 0;\n \n \n // Add linkage attribute\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_LINKAGE: u8 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[linkage=\"weak_odr\"]\n static STATIC_LINKAGE: u8 = 0;\n \n \n // Add no_mangle attribute\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_NO_MANGLE: u8 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[no_mangle]\n static STATIC_NO_MANGLE: u8 = 0;\n \n \n // Add thread_local attribute\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[thread_local]\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n \n // Change type from i16 to u64\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n \n // Change type from Option<i8> to Option<u16>\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n // Change value between simple literals\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     { 1 }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     { 2 }\n };\n \n \n // Change value between expressions\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     { 1 + 1 }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     { 1 + 2 }\n };\n \n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_VALUE_3: i16 = {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     { 2 + 3 }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     { 2 * 3 }\n };\n \n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n static STATIC_CHANGE_VALUE_4: i16 = {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     { 1 + 2 * 3 }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     { 1 + 2 * 4 }\n };\n \n@@ -138,17 +166,21 @@ struct ReferencedType1;\n struct ReferencedType2;\n \n mod static_change_type_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as Type;\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as Type;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "6a62620463040da7c3de1cda89fe6776afa423a8", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,8 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -21,7 +27,7 @@ pub struct RegularStruct {\n }\n \n // Change field value (regular struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n@@ -30,9 +36,11 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n@@ -44,7 +52,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n \n \n // Change field order (regular struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 3,\n@@ -53,9 +61,11 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         y: 4,\n@@ -67,7 +77,7 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n \n \n // Add field (regular struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -77,13 +87,16 @@ pub fn add_field_regular_struct() -> RegularStruct {\n \n     RegularStruct {\n         x: 7,\n+        // --\n         .. struct1\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -101,7 +114,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n \n \n // Change field label (regular struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -116,9 +129,11 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -142,18 +157,20 @@ pub struct RegularStruct2 {\n }\n \n // Change constructor path (regular struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_path_regular_struct() {\n-    let _ = RegularStruct {\n+    let _ = RegularStruct  {\n         x: 0,\n         y: 1,\n         z: 2,\n     };\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n         x: 0,\n@@ -166,16 +183,21 @@ pub fn change_constructor_path_regular_struct() {\n \n // Change constructor path indirectly (regular struct)\n pub mod change_constructor_path_indirectly_regular_struct {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::RegularStruct as Struct;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::RegularStruct2 as Struct;\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     pub fn function() -> Struct {\n         Struct {\n             x: 0,\n@@ -190,14 +212,16 @@ pub mod change_constructor_path_indirectly_regular_struct {\n pub struct TupleStruct(i32, i64, i16);\n \n // Change field value (tuple struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 2)\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n }\n@@ -207,14 +231,16 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n pub struct TupleStruct2(u16, u16, u16);\n \n // Change constructor path (tuple struct)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_constructor_path_tuple_struct() {\n-    let _ = TupleStruct(0, 1, 2);\n+    let _ = TupleStruct (0, 1, 2);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n }\n@@ -223,11 +249,16 @@ pub fn change_constructor_path_tuple_struct() {\n \n // Change constructor path indirectly (tuple struct)\n pub mod change_constructor_path_indirectly_tuple_struct {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::TupleStruct as Struct;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::TupleStruct2 as Struct;\n \n+    #[rustc_clean(\n+        cfg=\"cfail5\",\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck\""}, {"sha": "b5d8a3ab34103d0d6380ae91cb46e2136a70ef65", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 90, "deletions": 43, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -11,42 +11,53 @@\n // the same between rev2 and rev3.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n-\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n // Layout ----------------------------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub struct LayoutPacked;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[repr(packed)]\n pub struct LayoutPacked;\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct LayoutC;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n #[repr(C)]\n struct LayoutC;\n \n \n // Tuple Struct Change Field Type ----------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct TupleStructFieldType(i32);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct TupleStructFieldType(\n@@ -56,12 +67,14 @@ struct TupleStructFieldType(\n \n // Tuple Struct Add Field ------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct TupleStructAddField(i32);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct TupleStructAddField(\n     i32,\n     u32\n@@ -70,23 +83,27 @@ struct TupleStructAddField(\n \n // Tuple Struct Field Visibility -----------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct TupleStructFieldVisibility(char);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct TupleStructFieldVisibility(pub char);\n \n \n // Record Struct Field Type ----------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct RecordStructFieldType { x: f32 }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct RecordStructFieldType {\n@@ -96,71 +113,83 @@ struct RecordStructFieldType {\n \n // Record Struct Field Name ----------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct RecordStructFieldName { x: f32 }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct RecordStructFieldName { y: f32 }\n \n \n // Record Struct Add Field -----------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct RecordStructAddField { x: f32 }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct RecordStructAddField {\n     x: f32,\n     y: () }\n \n \n // Record Struct Field Visibility ----------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct RecordStructFieldVisibility { x: f32 }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct RecordStructFieldVisibility {\n     pub x: f32\n }\n \n \n // Add Lifetime Parameter ------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n \n \n // Add Lifetime Parameter Bound ------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n     &'a f32,\n     &'b f64\n );\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n     &'a f32,\n     &'b f64)\n@@ -169,12 +198,14 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n \n // Add Type Parameter ----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddTypeParameter<T1>(T1, T1);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddTypeParameter<T1, T2>(\n      // The field contains the parent's Generics, so it's dirty even though its\n      // type hasn't changed.\n@@ -185,23 +216,27 @@ struct AddTypeParameter<T1, T2>(\n \n // Add Type Parameter Bound ----------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddTypeParameterBound<T>(T);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddTypeParameterBound<T: Send>(\n     T\n );\n \n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct AddTypeParameterBoundWhereClause<T>(T);\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n struct AddTypeParameterBoundWhereClause<T>(\n     T\n ) where T: Sync;\n@@ -214,31 +249,37 @@ struct AddTypeParameterBoundWhereClause<T>(\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub struct EmptyStruct;\n \n \n // Visibility ------------------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n struct Visibility;\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub struct Visibility;\n \n struct ReferencedType1;\n struct ReferencedType2;\n \n // Tuple Struct Change Field Type Indirectly -----------------------------------\n mod tuple_struct_change_field_type_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as FieldType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     struct TupleStruct(\n         FieldType\n     );\n@@ -247,13 +288,15 @@ mod tuple_struct_change_field_type_indirectly {\n \n // Record Struct Change Field Type Indirectly -----------------------------------\n mod record_struct_change_field_type_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedType1 as FieldType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     struct RecordStruct {\n         _x: FieldType\n     }\n@@ -267,24 +310,28 @@ trait ReferencedTrait2 {}\n \n // Change Trait Bound Indirectly -----------------------------------------------\n mod change_trait_bound_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     struct Struct<T: Trait>(T);\n }\n \n // Change Trait Bound Indirectly In Where Clause -------------------------------\n mod change_trait_bound_indirectly_in_where_clause {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait1 as Trait;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     struct Struct<T>(T) where T : Trait;\n }"}, {"sha": "9cbd110d68aab76aafc5a413534330f5c15f2475", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 503, "deletions": 166, "changes": 669, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -11,8 +11,14 @@\n // the same between rev2 and rev3.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -21,208 +27,286 @@\n \n \n // Change trait visibility\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitVisibility { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub trait TraitVisibility { }\n \n \n \n // Change trait unsafety\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitUnsafety { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n unsafe trait TraitUnsafety { }\n \n \n \n // Add method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddMethod {\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub trait TraitAddMethod {\n     fn method();\n }\n \n \n \n // Change name of method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeMethodName {\n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeMethodName {\n     fn methodChanged();\n }\n \n \n \n // Add return type to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddReturnType {\n-    fn method();\n+    //-----------------------------------------------------\n+    //--------------------------\n+    //-----------------------------------------------------\n+    //--------------------------\n+    fn method()       ;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddReturnType {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method() -> u32;\n }\n \n \n \n // Change return type of method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeReturnType {\n+    // --------------------------------------------------------------------\n+    // -------------------------\n+    // --------------------------------------------------------------------\n+    // -------------------------\n     fn method() -> u32;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeReturnType {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method() -> u64;\n }\n \n \n \n // Add parameter to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddParameterToMethod {\n-    fn method();\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn method(      );\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddParameterToMethod {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(a: u32);\n }\n \n \n \n // Change name of method parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeMethodParameterName {\n+    //------------------------------------------------------\n+    //----------------------------------------------\n+    //--------------------------\n+    //----------------------------------------------\n+    //--------------------------\n     fn method(a: u32);\n+\n+    //------------------------------------------------------------------\n+    //--------------------------\n+    //------------------------------------------------------------------\n+    //--------------------------\n     fn with_default(x: i32) {}\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeMethodParameterName {\n     // FIXME(#38501) This should preferably always be clean.\n     #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(b: u32);\n \n     #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn with_default(y: i32) {}\n }\n \n \n \n // Change type of method parameter (i32 => i64)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeMethodParameterType {\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n     fn method(a: i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeMethodParameterType {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(a: i64);\n }\n \n \n \n // Change type of method parameter (&i32 => &mut i32)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeMethodParameterTypeRef {\n-    fn method(a: &i32);\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn method(a: &    i32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeMethodParameterTypeRef {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(a: &mut i32);\n }\n \n \n \n // Change order of method parameters\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeMethodParametersOrder {\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n     fn method(a: i32, b: i64);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeMethodParametersOrder {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(b: i64, a: i32);\n }\n \n \n \n // Add default implementation to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddMethodAutoImplementation {\n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddMethodAutoImplementation {\n     #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method() { }\n }\n \n \n \n // Change order of methods\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeOrderOfMethods {\n     fn method0();\n     fn method1();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeOrderOfMethods {\n     fn method1();\n     fn method0();\n@@ -231,134 +315,198 @@ trait TraitChangeOrderOfMethods {\n \n \n // Change mode of self parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeModeSelfRefToMut {\n-    fn method(&self);\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn method(&    self);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeModeSelfRefToMut {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(&mut self);\n }\n \n \n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeModeSelfOwnToMut: Sized {\n-    fn method(self) {}\n+    // ----------------------------------------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------------------------------------\n+    // -------------------------\n+    fn method(    self) {}\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(mut self) {}\n }\n \n \n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeModeSelfOwnToRef {\n-    fn method(self);\n+    // ----------------------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------------------\n+    // -------------------------\n+    fn method( self);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeModeSelfOwnToRef {\n     #[rustc_clean(except=\"hir_owner,fn_sig,generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig,generics_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method(&self);\n }\n \n \n \n // Add unsafe modifier to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddUnsafeModifier {\n-    fn method();\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn method()       ;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddUnsafeModifier {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     unsafe fn method();\n }\n \n \n \n // Add extern modifier to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddExternModifier {\n-    fn method();\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    fn method()           ;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddExternModifier {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     extern \"C\" fn method();\n }\n \n \n \n // Change extern \"C\" to extern \"stdcall\"\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeExternCToRustIntrinsic {\n-    extern \"C\" fn method();\n+    // ----------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------\n+    // -------------------------\n+    extern \"C\"       fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeExternCToRustIntrinsic {\n     #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     extern \"stdcall\" fn method();\n }\n \n \n \n // Add type parameter to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTypeParameterToMethod {\n-    fn method();\n+    // -------------------------------------------------------------------------------\n+    // -------------------------\n+    // -------------------------------------------------------------------------------\n+    // -------------------------\n+    fn method   ();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTypeParameterToMethod {\n     #[rustc_clean(except=\"hir_owner,generics_of,predicates_of,type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,generics_of,predicates_of,type_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<T>();\n }\n \n \n \n // Add lifetime parameter to method\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeParameterToMethod {\n-    fn method();\n+    // ----------------------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------------------\n+    // -------------------------\n+    fn method    ();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeParameterToMethod {\n     #[rustc_clean(except=\"hir_owner,fn_sig,generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,fn_sig,generics_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<'a>();\n }\n \n@@ -369,150 +517,237 @@ trait ReferencedTrait0 { }\n trait ReferencedTrait1 { }\n \n // Add trait bound to method type parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitBoundToMethodTypeParameter {\n-    fn method<T>();\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    fn method<T                  >();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<T: ReferencedTrait0>();\n }\n \n \n \n // Add builtin bound to method type parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n-    fn method<T>();\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    fn method<T       >();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<T: Sized>();\n }\n \n \n \n // Add lifetime bound to method lifetime parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n-    fn method<'a, 'b>(a: &'a u32, b: &'b u32);\n-}\n-\n-#[cfg(not(cfail1))]\n+    // -----------\n+    // -----------------------------------------------------------------------------\n+    // --------------\n+    //\n+    // -------------------------\n+    // -----------\n+    // -----------------------------------------------------------------------------\n+    // --------------\n+    //\n+    // -------------------------\n+    fn method<'a, 'b    >(a: &'a u32, b: &'b u32);\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_clean(\n         except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,fn_sig,type_of\",\n         cfg=\"cfail2\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,fn_sig,type_of\",\n+        cfg=\"cfail5\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n }\n \n \n \n // Add second trait bound to method type parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n-    fn method<T: ReferencedTrait0>();\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    fn method<T: ReferencedTrait0                   >();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<T: ReferencedTrait0 + ReferencedTrait1>();\n }\n \n \n \n // Add second builtin bound to method type parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n-    fn method<T: Sized>();\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------------------------------------\n+    // -------------------------\n+    fn method<T: Sized       >();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<T: Sized + Sync>();\n }\n \n \n \n // Add second lifetime bound to method lifetime parameter\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n-    fn method<'a, 'b, 'c: 'a>(a: &'a u32, b: &'b u32, c: &'c u32);\n-}\n-\n-#[cfg(not(cfail1))]\n+    // -----------\n+    // -----------------------------------------------------------------------------\n+    // --------------\n+    //\n+    // -------------------------\n+    // -----------\n+    // -----------------------------------------------------------------------------\n+    // --------------\n+    //\n+    // -------------------------\n+    fn method<'a, 'b, 'c: 'a     >(a: &'a u32, b: &'b u32, c: &'c u32);\n+}\n+\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_clean(\n         except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,fn_sig,type_of\",\n         cfg=\"cfail2\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,fn_sig,type_of\",\n+        cfg=\"cfail5\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n }\n \n \n \n // Add associated type\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddAssociatedType {\n-\n-    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(cfg=\"cfail3\")]\n+    //--------------------------\n+    //--------------------------\n+    // -------------\n+\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n+    //--------------------------\n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddAssociatedType {\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     type Associated;\n \n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method();\n }\n \n \n \n // Add trait bound to associated type\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitBoundToAssociatedType {\n-    type Associated;\n+    // ---------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------\n+    // -------------------------\n+    type Associated                  ;\n \n     fn method();\n }\n \n \n // Apparently the type bound contributes to the predicates of the trait, but\n // does not change the associated item itself.\n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitBoundToAssociatedType {\n     #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     type Associated: ReferencedTrait0;\n \n     fn method();\n@@ -521,19 +756,27 @@ trait TraitAddTraitBoundToAssociatedType {\n \n \n // Add lifetime bound to associated type\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n-    type Associated;\n+    // ---------------------------------------------\n+    // -------------------------\n+    // ---------------------------------------------\n+    // -------------------------\n+    type Associated    ;\n \n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     type Associated: 'a;\n \n     fn method();\n@@ -542,19 +785,23 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n \n \n // Add default to associated type\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddDefaultToAssociatedType {\n     type Associated;\n \n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddDefaultToAssociatedType {\n     #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     type Associated = ReferenceType0;\n \n     fn method();\n@@ -563,14 +810,16 @@ trait TraitAddDefaultToAssociatedType {\n \n \n // Add associated constant\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddAssociatedConstant {\n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddAssociatedConstant {\n     const Value: u32;\n \n@@ -580,269 +829,331 @@ trait TraitAddAssociatedConstant {\n \n \n // Add initializer to associated constant\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddInitializerToAssociatedConstant {\n     const Value: u32;\n \n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddInitializerToAssociatedConstant {\n     #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     const Value: u32 = 1;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method();\n }\n \n \n \n // Change type of associated constant\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitChangeTypeOfAssociatedConstant {\n+    // -----------------------------------------------------\n+    // -------------------------\n+    // -----------------------------------------------------\n+    // -------------------------\n     const Value: u32;\n \n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n     fn method();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitChangeTypeOfAssociatedConstant {\n     #[rustc_clean(except=\"hir_owner,type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,type_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     const Value: f64;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method();\n }\n \n \n \n // Add super trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSuperTrait { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n \n // Add builtin bound (Send or Copy)\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltiBound { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltiBound : Send { }\n \n \n \n // Add 'static lifetime bound to trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddStaticLifetimeBound { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddStaticLifetimeBound : 'static { }\n \n \n \n // Add super trait as second bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 + ReferencedTrait1 { }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n \n // Add builtin bound as second bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 + Send { }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin : Send { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n \n // Add 'static bounds as second bound\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 + 'static { }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n \n // Add type parameter to trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTypeParameterToTrait { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTypeParameterToTrait<T> { }\n \n \n \n // Add lifetime parameter to trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeParameterToTrait { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n \n // Add trait bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n \n // Add lifetime bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n \n // Add lifetime bound to lifetime parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n \n // Add builtin bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n \n // Add second type parameter to trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondTypeParameterToTrait<T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n \n // Add second lifetime parameter to trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n \n // Add second trait bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + ReferencedTrait1> { }\n \n \n \n // Add second lifetime bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n \n // Add second lifetime bound to lifetime parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c> { }\n \n \n \n // Add second builtin bound to type parameter of trait\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n@@ -853,105 +1164,125 @@ struct ReferenceType1 {}\n \n \n // Add trait bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n \n \n // Add lifetime bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n \n // Add lifetime bound to lifetime parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b { }\n \n \n \n // Add builtin bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n \n // Add second trait bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n     where T: ReferencedTrait0 + ReferencedTrait1 { }\n \n \n \n // Add second lifetime bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a + 'b { }\n \n \n \n // Add second lifetime bound to lifetime parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b + 'c { }\n \n \n \n // Add second builtin bound to type parameter of trait in where clause\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n // Change return type of method indirectly by modifying a use statement\n mod change_return_type_of_method_indirectly_use {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferenceType0 as ReturnType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferenceType1 as ReturnType;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     trait TraitChangeReturnType {\n         #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig\", cfg=\"cfail2\")]\n         #[rustc_clean(cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig\", cfg=\"cfail5\")]\n+        #[rustc_clean(cfg=\"cfail6\")]\n         fn method() -> ReturnType;\n     }\n }\n@@ -960,9 +1291,9 @@ mod change_return_type_of_method_indirectly_use {\n \n // Change type of method parameter indirectly by modifying a use statement\n mod change_method_parameter_type_indirectly_by_use {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferenceType0 as ArgType;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferenceType1 as ArgType;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -978,9 +1309,9 @@ mod change_method_parameter_type_indirectly_by_use {\n \n // Change trait bound of method type parameter indirectly by modifying a use statement\n mod change_method_parameter_type_bound_indirectly_by_use {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait0 as Bound;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait1 as Bound;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -997,16 +1328,20 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n // Change trait bound of method type parameter in where clause indirectly\n // by modifying a use statement\n mod change_method_parameter_type_bound_indirectly_by_use_where {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait0 as Bound;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait1 as Bound;\n \n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n         #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n         #[rustc_clean(cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+        #[rustc_clean(cfg=\"cfail6\")]\n         fn method<T>(a: T) where T: Bound;\n     }\n }\n@@ -1015,9 +1350,9 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n \n // Change trait bound of trait type parameter indirectly by modifying a use statement\n mod change_method_type_parameter_bound_indirectly {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait0 as Bound;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait1 as Bound;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n@@ -1032,13 +1367,15 @@ mod change_method_type_parameter_bound_indirectly {\n // Change trait bound of trait type parameter in where clause indirectly\n // by modifying a use statement\n mod change_method_type_parameter_bound_indirectly_where {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1,cfail4))]\n     use super::ReferencedTrait0 as Bound;\n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1,cfail4)))]\n     use super::ReferencedTrait1 as Bound;\n \n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     trait TraitChangeTraitBoundWhere<T> where T: Bound {\n         fn method(a: T);\n     }"}, {"sha": "d623810115ee8c4aec7d303362fe67bad9da94cc", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 193, "deletions": 69, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,9 +6,14 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n-\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -19,29 +24,35 @@ struct Foo;\n \n // Change Method Name -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeMethodNameTrait {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeMethodNameTrait for Foo {\n     fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub trait ChangeMethodNameTrait {\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name2();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeMethodNameTrait for Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name2() { }\n }\n \n@@ -53,17 +64,27 @@ pub trait ChangeMethodBodyTrait {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeMethodBodyTrait for Foo {\n-    fn method_name() { }\n+    // ----------------------------------------------------------\n+    // -------------------------\n+    // ----------------------------------------------------------\n+    // -------------------------\n+    fn method_name() {\n+        //\n+    }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeMethodBodyTrait for Foo {\n     #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name() {\n         ()\n     }\n@@ -77,18 +98,28 @@ pub trait ChangeMethodBodyTraitInlined {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeMethodBodyTraitInlined for Foo {\n+    // ------------------------------------------------------------------------\n+    // -------------------------\n+    // ------------------------------------------------------------------------\n+    // -------------------------\n     #[inline]\n-    fn method_name() { }\n+    fn method_name() {\n+        // -----\n+    }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeMethodBodyTraitInlined for Foo {\n     #[rustc_clean(except=\"hir_owner_nodes,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[inline]\n     fn method_name() {\n         panic!()\n@@ -97,190 +128,224 @@ impl ChangeMethodBodyTraitInlined for Foo {\n \n // Change Method Selfness ------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeMethodSelfnessTrait {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeMethodSelfnessTrait for Foo {\n     fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait ChangeMethodSelfnessTrait {\n     fn method_name(&self);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeMethodSelfnessTrait for Foo {\n     #[rustc_clean(\n         except=\"hir_owner,hir_owner_nodes,associated_item,generics_of,fn_sig,typeck,optimized_mir\",\n         cfg=\"cfail2\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,associated_item,generics_of,fn_sig,typeck,optimized_mir\",\n+        cfg=\"cfail5\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name(&self) {\n         ()\n     }\n }\n \n // Change Method Selfness -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait RemoveMethodSelfnessTrait {\n     fn method_name(&self);\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl RemoveMethodSelfnessTrait for Foo {\n     fn method_name(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait RemoveMethodSelfnessTrait {\n     fn method_name();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl RemoveMethodSelfnessTrait for Foo {\n     #[rustc_clean(\n         except=\"hir_owner,hir_owner_nodes,associated_item,generics_of,fn_sig,typeck,optimized_mir\",\n         cfg=\"cfail2\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,associated_item,generics_of,fn_sig,typeck,optimized_mir\",\n+        cfg=\"cfail5\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name() {}\n }\n \n // Change Method Selfmutness -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeMethodSelfmutnessTrait {\n     fn method_name(&self);\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeMethodSelfmutnessTrait for Foo {\n-    fn method_name(&self) { }\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    fn method_name(&    self) {}\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait ChangeMethodSelfmutnessTrait {\n     fn method_name(&mut self);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeMethodSelfmutnessTrait for Foo {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name(&mut self) {}\n }\n \n // Change item kind -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeItemKindTrait {\n     fn name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeItemKindTrait for Foo {\n     fn name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait ChangeItemKindTrait {\n     type name;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeItemKindTrait for Foo {\n     type name = ();\n }\n \n // Remove item -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait RemoveItemTrait {\n     type TypeName;\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl RemoveItemTrait for Foo {\n     type TypeName = ();\n     fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait RemoveItemTrait {\n     type TypeName;\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl RemoveItemTrait for Foo {\n     type TypeName = ();\n }\n \n // Add item -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait AddItemTrait {\n     type TypeName;\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl AddItemTrait for Foo {\n     type TypeName = ();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait AddItemTrait {\n     type TypeName;\n     fn method_name();\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl AddItemTrait for Foo {\n     type TypeName = ();\n     fn method_name() { }\n }\n \n // Change has-value -----------------------------------------------------------\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeHasValueTrait {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub trait ChangeHasValueTrait {\n     #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,associated_item\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n }\n@@ -291,69 +356,91 @@ pub trait AddDefaultTrait {\n     fn method_name();\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl AddDefaultTrait for Foo {\n-    fn method_name() { }\n+    // -------------------------------------------------------------------------------------------\n+    // -------------------------\n+            fn method_name() { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl AddDefaultTrait for Foo {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,associated_item\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,associated_item,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     default fn method_name() { }\n }\n \n // Add arguments\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait AddArgumentTrait {\n     fn method_name(&self);\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl AddArgumentTrait for Foo {\n-    fn method_name(&self) { }\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    fn method_name(&self         ) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait AddArgumentTrait {\n     fn method_name(&self, x: u32);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl AddArgumentTrait for Foo {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name(&self, _x: u32) { }\n }\n \n // Change argument type\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub trait ChangeArgumentTypeTrait {\n     fn method_name(&self, x: u32);\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeArgumentTypeTrait for Foo {\n-    fn method_name(&self, _x: u32) { }\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    // -----------------------------------------------------------------------------------------\n+    // -------------------------\n+    fn method_name(&self, _x: u32 ) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n pub trait ChangeArgumentTypeTrait {\n     fn method_name(&self, x: char);\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeArgumentTypeTrait for Foo {\n     #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,fn_sig,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn method_name(&self, _x: char) { }\n }\n \n@@ -366,21 +453,28 @@ trait AddTypeParameterToImpl<T> {\n     fn id(t: T) -> T;\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl AddTypeParameterToImpl<u32> for Bar<u32> {\n     fn id(t: u32) -> u32 { t }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,generics_of,impl_trait_ref\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-impl<T> AddTypeParameterToImpl<T> for Bar<T> {\n+#[rustc_clean(except=\"hir_owner,generics_of,impl_trait_ref\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n+impl<TTT> AddTypeParameterToImpl<TTT> for Bar<TTT> {\n     #[rustc_clean(\n         except=\"hir_owner,hir_owner_nodes,generics_of,fn_sig,type_of,typeck,optimized_mir\",\n         cfg=\"cfail2\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    fn id(t: T) -> T { t }\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,generics_of,fn_sig,type_of,typeck,optimized_mir\",\n+        cfg=\"cfail5\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail6\")]\n+    fn id(t: TTT) -> TTT { t }\n }\n \n \n@@ -390,17 +484,21 @@ trait ChangeSelfTypeOfImpl {\n     fn id(self) -> Self;\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl ChangeSelfTypeOfImpl for u32 {\n     fn id(self) -> Self { self }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,impl_trait_ref\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,impl_trait_ref\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl ChangeSelfTypeOfImpl for u64 {\n     #[rustc_clean(except=\"fn_sig,typeck,optimized_mir\", cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"fn_sig,typeck,optimized_mir\", cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -411,17 +509,21 @@ trait AddLifetimeBoundToImplParameter {\n     fn id(self) -> Self;\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl<T> AddLifetimeBoundToImplParameter for T {\n     fn id(self) -> Self { self }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -432,17 +534,21 @@ trait AddTraitBoundToImplParameter {\n     fn id(self) -> Self;\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl<T> AddTraitBoundToImplParameter for T {\n     fn id(self) -> Self { self }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl<T: Clone> AddTraitBoundToImplParameter for T {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -453,17 +559,26 @@ trait AddNoMangleToMethod {\n     fn add_no_mangle_to_method(&self) { }\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl AddNoMangleToMethod for Foo {\n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n+    // ---------\n     fn add_no_mangle_to_method(&self) { }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl AddNoMangleToMethod for Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[no_mangle]\n     fn add_no_mangle_to_method(&self) { }\n }\n@@ -474,17 +589,26 @@ trait MakeMethodInline {\n     fn make_method_inline(&self) -> u8 { 0 }\n }\n \n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n impl MakeMethodInline for Foo {\n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n+    // -------------------------\n+    // ------\n     fn make_method_inline(&self) -> u8 { 0 }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n impl MakeMethodInline for Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail5\")]\n+    #[rustc_clean(cfg=\"cfail6\")]\n     #[inline]\n     fn make_method_inline(&self) -> u8 { 0 }\n }"}, {"sha": "70c199bc3be7de8f992a88ef5c6bfbf902f8a1f3", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -12,7 +12,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// compile-flags: -Z query-dep-graph\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "8d8345e10f5553f4b0efb5f0b9435f48e780c2b2", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 126, "deletions": 64, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,370 +6,424 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change constant operand of negation -----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn const_negation() -> i32 {\n     -10\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn const_negation() -> i32 {\n-    -1\n+     -1\n }\n \n \n \n // Change constant operand of bitwise not --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn const_bitwise_not() -> i32 {\n     !100\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn const_bitwise_not() -> i32 {\n-    !99\n+     !99\n }\n \n \n \n // Change variable operand of negation -----------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -x\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n }\n \n \n \n // Change variable operand of bitwise not --------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !x\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n }\n \n \n \n // Change variable operand of deref --------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *x\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n }\n \n \n \n // Change first constant operand of addition -----------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn first_const_add() -> i32 {\n     1 + 3\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n }\n \n \n \n // Change second constant operand of addition -----------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn second_const_add() -> i32 {\n     1 + 2\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n }\n \n \n \n // Change first variable operand of addition -----------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     a + 2\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n }\n \n \n \n // Change second variable operand of addition ----------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n }\n \n \n \n // Change operator from + to - -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 + a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n }\n \n \n \n // Change operator from + to * -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 + a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n }\n \n \n \n // Change operator from + to / -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 + a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n }\n \n \n \n // Change operator from + to % -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 + a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n }\n \n \n \n // Change operator from && to || -----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a && b\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n \n \n // Change operator from & to | -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 & a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n }\n \n \n \n // Change operator from & to ^ -------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 & a\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n }\n \n \n \n // Change operator from & to << ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n-    a & 1\n+    a  & 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n }\n \n \n \n // Change operator from & to >> ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n-    a & 1\n+    a  & 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n }\n \n \n \n // Change operator from == to != -----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a == 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n }\n \n \n \n // Change operator from == to < ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn eq_to_lt(a: i32) -> bool {\n     a == 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn eq_to_lt(a: i32) -> bool {\n-    a < 1\n+    a  < 1\n }\n \n \n \n // Change operator from == to > ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn eq_to_gt(a: i32) -> bool {\n     a == 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn eq_to_gt(a: i32) -> bool {\n-    a > 1\n+    a  > 1\n }\n \n \n \n // Change operator from == to <= -----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn eq_to_le(a: i32) -> bool {\n     a == 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n }\n \n \n \n // Change operator from == to >= -----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn eq_to_ge(a: i32) -> bool {\n     a == 1\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n }\n \n \n \n // Change type in cast expression ----------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as i32;\n     let c = b as u64;\n     c\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir,typeck\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,typeck\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n     let c = b as u64;\n@@ -379,32 +433,36 @@ pub fn type_cast(a: u8) -> u64 {\n \n \n // Change value in cast expression ---------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn value_cast(a: u32) -> i32 {\n     1 as i32\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n }\n \n \n \n // Change place in assignment --------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn place() -> i32 {\n     let mut x = 10;\n     let mut y = 11;\n     x = 9;\n     x\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n     let mut y = 11;\n@@ -415,16 +473,18 @@ pub fn place() -> i32 {\n \n \n // Change r-value in assignment ------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n     x = 9;\n     x\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n     x = 8;\n@@ -434,14 +494,16 @@ pub fn rvalue() -> i32 {\n \n \n // Change index into slice -----------------------------------------------------\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[i]\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail5\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]\n }"}, {"sha": "64a6517836cd80f708247c23aa893f76ac0b6eba", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,16 +6,22 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change loop body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -24,9 +30,11 @@ pub fn change_loop_body() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -38,7 +46,7 @@ pub fn change_loop_body() {\n \n \n // Change loop body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -47,9 +55,11 @@ pub fn change_loop_condition() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n     while let Some(1u32) = None {\n@@ -61,17 +71,20 @@ pub fn change_loop_condition() {\n \n \n // Add break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n         _x = 1;\n+        // ---\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -83,18 +96,20 @@ pub fn add_break() {\n \n \n // Add loop label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label() {\n     let mut _x = 0;\n-    while let Some(0u32) = None {\n+            while let Some(0u32) = None {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -106,18 +121,20 @@ pub fn add_loop_label() {\n \n \n // Add loop label to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n         _x = 1;\n-        break;\n+        break       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -129,7 +146,7 @@ pub fn add_loop_label_to_break() {\n \n \n // Change break label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -140,9 +157,11 @@ pub fn change_break_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -154,18 +173,20 @@ pub fn change_break_label() {\n }\n \n // Add loop label to continue\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n         _x = 1;\n-        continue;\n+        continue       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -177,7 +198,7 @@ pub fn add_loop_label_to_continue() {\n \n \n // Change continue label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -188,9 +209,11 @@ pub fn change_continue_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -204,7 +227,7 @@ pub fn change_continue_label() {\n \n \n // Change continue to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -213,13 +236,15 @@ pub fn change_continue_to_break() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n         _x = 1;\n-        break;\n+        break   ;\n     }\n }"}, {"sha": "583aa47668d9747cbe3e80bc9b9c9ce461ee81d1", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -6,16 +6,22 @@\n // rev3 and make sure that the hash has not changed.\n \n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// compile-flags: -Z query-dep-graph\n+// [cfail1]compile-flags: -Zincremental-ignore-spans\n+// [cfail2]compile-flags: -Zincremental-ignore-spans\n+// [cfail3]compile-flags: -Zincremental-ignore-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n \n // Change loop body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     while true {\n@@ -24,9 +30,11 @@ pub fn change_loop_body() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n     while true {\n@@ -38,18 +46,20 @@ pub fn change_loop_body() {\n \n \n // Change loop body\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n-    while true {\n+    while true  {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n     while false {\n@@ -61,17 +71,20 @@ pub fn change_loop_condition() {\n \n \n // Add break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_break() {\n     let mut _x = 0;\n     while true {\n         _x = 1;\n+        // ---\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_break() {\n     let mut _x = 0;\n     while true {\n@@ -83,18 +96,20 @@ pub fn add_break() {\n \n \n // Add loop label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label() {\n     let mut _x = 0;\n-    while true {\n+            while true {\n         _x = 1;\n         break;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n     'label: while true {\n@@ -106,18 +121,20 @@ pub fn add_loop_label() {\n \n \n // Add loop label to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while true {\n         _x = 1;\n-        break;\n+        break       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while true {\n@@ -129,7 +146,7 @@ pub fn add_loop_label_to_break() {\n \n \n // Change break label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -140,9 +157,11 @@ pub fn change_break_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -156,18 +175,20 @@ pub fn change_break_label() {\n \n \n // Add loop label to continue\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while true {\n         _x = 1;\n-        continue;\n+        continue       ;\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while true {\n@@ -179,7 +200,7 @@ pub fn add_loop_label_to_continue() {\n \n \n // Change continue label\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -190,9 +211,11 @@ pub fn change_continue_label() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -206,7 +229,7 @@ pub fn change_continue_label() {\n \n \n // Change continue to break\n-#[cfg(cfail1)]\n+#[cfg(any(cfail1,cfail4))]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     while true {\n@@ -215,13 +238,15 @@ pub fn change_continue_to_break() {\n     }\n }\n \n-#[cfg(not(cfail1))]\n+#[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;\n     while true {\n         _x = 1;\n-        break;\n+        break   ;\n     }\n }"}, {"sha": "639454cc975300dad6299d4a6cf761ad4450e5c7", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -1,16 +1,21 @@\n // This test makes sure that just changing a definition's location in the\n // source file also changes its incr. comp. hash, if debuginfo is enabled.\n \n-// revisions:rpass1 rpass2\n+// revisions:rpass1 rpass2 rpass3 rpass4\n \n // ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n+// [rpass3]compile-flags: -Zincremental-relative-spans\n+// [rpass4]compile-flags: -Zincremental-relative-spans\n \n #![feature(rustc_attrs)]\n+#![rustc_partition_codegened(module = \"spans_significant_w_debuginfo\", cfg = \"rpass2\")]\n+#![rustc_partition_codegened(module = \"spans_significant_w_debuginfo\", cfg = \"rpass4\")]\n \n-#[cfg(rpass1)]\n+#[cfg(any(rpass1, rpass3))]\n pub fn main() {}\n \n-#[cfg(rpass2)]\n-#[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n+#[cfg(any(rpass2, rpass4))]\n+#[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir\", cfg = \"rpass2\")]\n+#[rustc_clean(cfg = \"rpass4\")]\n pub fn main() {}"}, {"sha": "e9e35791aa15800988b44f2cd21249ee7b7fce63", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -1,19 +1,29 @@\n // This test makes sure that just changing a definition's location in the\n // source file also changes its incr. comp. hash, if debuginfo is enabled.\n \n-// revisions:rpass1 rpass2\n+// revisions:rpass1 rpass2 rpass3 rpass4\n+// [rpass3]compile-flags: -Zincremental-relative-spans\n+// [rpass4]compile-flags: -Zincremental-relative-spans\n \n // compile-flags: -C overflow-checks=on -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n+#![feature(bench_black_box)]\n+#![rustc_partition_codegened(module = \"spans_significant_w_panic\", cfg = \"rpass2\")]\n+#![rustc_partition_codegened(module = \"spans_significant_w_panic\", cfg = \"rpass4\")]\n \n-#[cfg(rpass1)]\n+#[cfg(any(rpass1, rpass3))]\n pub fn main() {\n-    let _ = 0u8 + 1;\n+    if std::hint::black_box(false) {\n+        panic!()\n+    }\n }\n \n-#[cfg(rpass2)]\n-#[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n+#[cfg(any(rpass2, rpass4))]\n+#[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir\", cfg = \"rpass2\")]\n+#[rustc_clean(cfg = \"rpass4\")]\n pub fn main() {\n-    let _ = 0u8 + 1;\n+    if std::hint::black_box(false) {\n+        panic!()\n+    }\n }"}, {"sha": "cae7b4aab7565ed60455eec442a1a4de705760e2", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -1,5 +1,7 @@\n-// revisions: cfail1 cfail2\n+// revisions: cfail1 cfail2 cfail3 cfail4\n // compile-flags: -Z query-dep-graph\n+// [cfail3]compile-flags: -Zincremental-relative-spans\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n@@ -10,15 +12,15 @@\n // Therefore, the compiler deduces (correctly) that typeck is not\n // needed even for callers of `x`.\n \n-\n pub mod x {\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1, cfail3))]\n     pub fn x() {\n         println!(\"{}\", \"1\");\n     }\n \n-    #[cfg(cfail2)]\n-    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir,promoted_mir\", cfg=\"cfail2\")]\n+    #[cfg(any(cfail2, cfail4))]\n+    #[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir,promoted_mir\", cfg = \"cfail2\")]\n+    #[rustc_clean(except = \"hir_owner_nodes,promoted_mir\", cfg = \"cfail4\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -27,7 +29,8 @@ pub mod x {\n pub mod y {\n     use x;\n \n-    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg = \"cfail2\")]\n+    #[rustc_clean(cfg = \"cfail4\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -36,7 +39,8 @@ pub mod y {\n pub mod z {\n     use y;\n \n-    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg = \"cfail2\")]\n+    #[rustc_clean(cfg = \"cfail4\")]\n     pub fn z() {\n         y::y();\n     }"}, {"sha": "31f329a7f726b2083d9b80837fc98a57158038dd", "filename": "src/test/incremental/thinlto/cgu_keeps_identical_fn.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a999e63493c179bbefb3ce8dde4c698a4b690c/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs?ref=11a999e63493c179bbefb3ce8dde4c698a4b690c", "patch": "@@ -3,36 +3,61 @@\n // ends up with any spans in its LLVM bitecode, so LLVM is able to skip\n // re-building any modules which import 'inlined_fn'\n \n-// revisions: cfail1 cfail2 cfail3\n+// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n+// [cfail4]compile-flags: -Zincremental-relative-spans\n+// [cfail5]compile-flags: -Zincremental-relative-spans\n+// [cfail6]compile-flags: -Zincremental-relative-spans\n // compile-flags: -Z query-dep-graph -O\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n-#![crate_type=\"rlib\"]\n-\n-#![rustc_expected_cgu_reuse(module=\"cgu_keeps_identical_fn-foo\",\n-                            cfg=\"cfail2\",\n-                            kind=\"no\")]\n-#![rustc_expected_cgu_reuse(module=\"cgu_keeps_identical_fn-foo\",\n-                            cfg=\"cfail3\",\n-                            kind=\"post-lto\")]\n-\n-#![rustc_expected_cgu_reuse(module=\"cgu_keeps_identical_fn-bar\",\n-                            cfg=\"cfail2\",\n-                            kind=\"post-lto\")]\n-#![rustc_expected_cgu_reuse(module=\"cgu_keeps_identical_fn-bar\",\n-                            cfg=\"cfail3\",\n-                            kind=\"post-lto\")]\n+#![crate_type = \"rlib\"]\n+#![rustc_expected_cgu_reuse(module = \"cgu_keeps_identical_fn-foo\", cfg = \"cfail2\", kind = \"no\")]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-foo\",\n+    cfg = \"cfail3\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-foo\",\n+    cfg = \"cfail5\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-foo\",\n+    cfg = \"cfail6\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-bar\",\n+    cfg = \"cfail2\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-bar\",\n+    cfg = \"cfail3\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-bar\",\n+    cfg = \"cfail5\",\n+    kind = \"post-lto\"\n+)]\n+#![rustc_expected_cgu_reuse(\n+    module = \"cgu_keeps_identical_fn-bar\",\n+    cfg = \"cfail6\",\n+    kind = \"post-lto\"\n+)]\n \n mod foo {\n \n     // Trivial functions like this one are imported very reliably by ThinLTO.\n-    #[cfg(cfail1)]\n+    #[cfg(any(cfail1, cfail4))]\n     pub fn inlined_fn() -> u32 {\n         1234\n     }\n \n-    #[cfg(not(cfail1))]\n+    #[cfg(not(any(cfail1, cfail4)))]\n     pub fn inlined_fn() -> u32 {\n         1234\n     }"}]}