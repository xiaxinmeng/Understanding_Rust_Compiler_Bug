{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjExNzY1ZGM5ODUzNmM2ZWVkZjMzZjJkZjdmNzJmNmUxNjEyNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-02T23:29:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-02T23:29:58Z"}, "message": "Auto merge of #54767 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #54269 (#53840: Consolidate pattern check errors)\n - #54458 (Allow both explicit and elided lifetimes in the same impl header)\n - #54603 (Add `crate::` to trait suggestions in Rust 2018.)\n - #54648 (Update Cargo's submodule)\n - #54680 (make run-pass tests with empty main just compile-pass tests)\n - #54687 (Use impl_header_lifetime_elision in libcore)\n - #54699 (Re-export `getopts` so custom drivers can reference it.)\n - #54702 (do not promote comparing function pointers)\n - #54728 (Renumber `proc_macro` tracking issues)\n - #54745 (make `CStr::from_bytes_with_nul_unchecked()` a const fn)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3b16725548b5703f39b05a0deb2bde6b36223246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b16725548b5703f39b05a0deb2bde6b36223246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd5993ca25e09b894e4fd6539a2fba64599eee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd5993ca25e09b894e4fd6539a2fba64599eee2", "html_url": "https://github.com/rust-lang/rust/commit/2bd5993ca25e09b894e4fd6539a2fba64599eee2"}, {"sha": "00e4b27796dc9e533777c2cbf323df94c3427592", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e4b27796dc9e533777c2cbf323df94c3427592", "html_url": "https://github.com/rust-lang/rust/commit/00e4b27796dc9e533777c2cbf323df94c3427592"}], "stats": {"total": 1475, "additions": 937, "deletions": 538}, "files": [{"sha": "926016e5f02628208b47c88ed395757d3efeb8a3", "filename": "src/Cargo.lock", "status": "modified", "additions": 81, "deletions": 26, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -82,7 +82,7 @@ dependencies = [\n  \"environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -116,6 +116,19 @@ dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bit-set\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"bit-vec\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bitflags\"\n version = \"0.9.1\"\n@@ -142,7 +155,7 @@ dependencies = [\n  \"pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -202,22 +215,23 @@ dependencies = [\n  \"ignore 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazycell 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazycell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.7.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"opener 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl 0.10.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n  \"rustfix 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"same-file 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -237,7 +251,7 @@ dependencies = [\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -414,7 +428,7 @@ dependencies = [\n  \"rustfix 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -431,7 +445,7 @@ dependencies = [\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -465,7 +479,7 @@ dependencies = [\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -633,7 +647,7 @@ dependencies = [\n  \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strum 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strum_macros 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -879,7 +893,7 @@ dependencies = [\n  \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -989,7 +1003,7 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"0.4.2\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1016,7 +1030,7 @@ dependencies = [\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1038,7 +1052,7 @@ dependencies = [\n  \"num-traits 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1058,7 +1072,7 @@ dependencies = [\n \n [[package]]\n name = \"lazycell\"\n-version = \"1.0.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1192,7 +1206,7 @@ dependencies = [\n  \"phf_codegen 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_codegen 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1224,7 +1238,7 @@ dependencies = [\n  \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1586,6 +1600,23 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"proptest\"\n+version = \"0.8.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.1.2\"\n@@ -1792,7 +1823,7 @@ dependencies = [\n  \"rustfmt-nightly 0.99.5\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2476,7 +2507,7 @@ dependencies = [\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2500,12 +2531,23 @@ dependencies = [\n  \"rustc-ap-syntax_pos 263.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rusty-fork\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wait-timeout 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ryu\"\n version = \"0.2.6\"\n@@ -2577,10 +2619,10 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.26\"\n+version = \"1.0.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"itoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2890,7 +2932,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3032,7 +3074,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"chrono 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getset 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3046,6 +3088,14 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"wait-timeout\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"walkdir\"\n version = \"2.2.5\"\n@@ -3132,6 +3182,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c66d56ac8dabd07f6aacdaf633f4b8262f5b3601a810a0dcddffd5c22c69daa0\"\n+\"checksum bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f1efcc46c18245a69c38fcc5cc650f16d3a59d034f3106e9ed63748f695730a\"\n+\"checksum bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4440d5cb623bb7390ae27fec0bb6c61111969860f8e3ae198bfa0663645e67cf\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n@@ -3206,15 +3258,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n \"checksum isatty 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c324313540cd4d7ba008d43dc6606a32a5579f13cc17b2804c13096f0a5c522\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n-\"checksum itoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5adb58558dcd1d786b5f0bd15f3226ee23486e24b7b58304b60f64dc68e62606\"\n+\"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"60af5f849e1981434e4a31d3d782c4774ae9b434ce55b101a96ecfd09147e8be\"\n \"checksum json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad0485404155f45cce53a40d4b2d6ac356418300daed05273d9e26f91c390be\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum languageserver-types 0.45.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d91d91d1c23db74187096d191967cb49f49bb175ad6d855fa9229d16ef2c982\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca488b89a5657b0a2ecd45b95609b3e848cf1755da332a0da46e2b2b1cb371a7\"\n-\"checksum lazycell 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d33a48d0365c96081958cc663eef834975cb1e8d8bea3378513fc72bdbf11e50\"\n+\"checksum lazycell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddba4c30a78328befecec92fc94970e53b3ae385827d28620f0f5bb2493081e0\"\n \"checksum libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76e3a3ef172f1a0b9a9ff0dd1491ae5e6c948b94479a3021819ba7d860c8645d\"\n \"checksum libgit2-sys 0.7.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93f2b22fce91fb820363cf88a849a8f8fdfd8be37774b6a9dd6cbda05cf940e6\"\n \"checksum libnghttp2-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ffbfb81475cc9f625e44f3a8f8b9cf7173815ae1c7cc2fa91853ec009e38198\"\n@@ -3269,6 +3321,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n \"checksum proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b06e2f335f48d24442b35a19df506a835fb3547bc3c06ef27340da9acf5cae7\"\n \"checksum proc-macro2 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee5697238f0d893c7f0ecc59c0999f18d2af85e424de441178bcacc9f9e6cf67\"\n+\"checksum proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926d0604475349f463fe44130aae73f2294b5309ab2ca0310b998bd334ef191f\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n@@ -3309,6 +3362,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum rustc_version 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a54aa04a10c68c1c4eacb4337fd883b435997ede17a9385784b990777686b09a\"\n \"checksum rustfix 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"756567f00f7d89c9f89a5c401b8b1caaa122e27240b9eaadd0bb52ee0b680b1b\"\n+\"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum same-file 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10f7794e2fda7f594866840e95f5c5962e886e228e68b6505885811a94dd728c\"\n \"checksum schannel 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc1fabf2a7b6483a141426e1afd09ad543520a77ac49bd03c286e7696ccfd77f\"\n@@ -3319,7 +3373,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22d340507cea0b7e6632900a176101fea959c7065d93ba555072da90aaaafc87\"\n \"checksum serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\" = \"234fc8b737737b148ccd625175fc6390f5e4dacfdaa543cb93a3430d984a9119\"\n \"checksum serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190e9765dcedb56be63b6e0993a006c7e3b071a016a304736e4a315dc01fb142\"\n-\"checksum serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44dd2cfde475037451fa99b7e5df77aa3cfd1536575fa8e7a538ab36dcde49ae\"\n+\"checksum serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb47a3d5c84320222f66d7db21157c4a7407755de41798f9b4c1c40593397b1a\"\n \"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n@@ -3365,6 +3419,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum vergen 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a16834fc61e1492c07dae49b6c14b55f8b1d43a5f5f9e9a2ecc063f47b9f93c\"\n \"checksum version_check 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7716c242968ee87e5542f8021178248f267f295a5c4803beae8b8b7fd9bc6051\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum wait-timeout 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9f3bf741a801531993db6478b95682117471f76916f5e690dd8d45395b09349\"\n \"checksum walkdir 2.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af464bc7be7b785c7ac72e266a6b67c4c9070155606f51655a650a6686204e35\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"773ef9dcc5f24b7d850d0ff101e542ff24c3b090a9768e03ff889fdef41f00fd\""}, {"sha": "84d4b217841805341aba1274a250655cf824a3c8", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -226,16 +226,16 @@ impl<T: ?Sized> BorrowMut<T> for T {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a T {\n+impl<T: ?Sized> Borrow<T> for &T {\n     fn borrow(&self) -> &T { &**self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a mut T {\n+impl<T: ?Sized> Borrow<T> for &mut T {\n     fn borrow(&self) -> &T { &**self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n+impl<T: ?Sized> BorrowMut<T> for &mut T {\n     fn borrow_mut(&mut self) -> &mut T { &mut **self }\n }"}, {"sha": "ec7d366c3f5ce90fbd24cb2d3be6af7a2d352feb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1092,7 +1092,7 @@ impl<'b> BorrowRef<'b> {\n     }\n }\n \n-impl<'b> Drop for BorrowRef<'b> {\n+impl Drop for BorrowRef<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n@@ -1101,9 +1101,9 @@ impl<'b> Drop for BorrowRef<'b> {\n     }\n }\n \n-impl<'b> Clone for BorrowRef<'b> {\n+impl Clone for BorrowRef<'_> {\n     #[inline]\n-    fn clone(&self) -> BorrowRef<'b> {\n+    fn clone(&self) -> Self {\n         // Since this Ref exists, we know the borrow flag\n         // is a reading borrow.\n         let borrow = self.borrow.get();\n@@ -1127,7 +1127,7 @@ pub struct Ref<'b, T: ?Sized + 'b> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> Deref for Ref<'b, T> {\n+impl<T: ?Sized> Deref for Ref<'_, T> {\n     type Target = T;\n \n     #[inline]\n@@ -1219,7 +1219,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for Ref<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for Ref<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)\n     }\n@@ -1305,7 +1305,7 @@ struct BorrowRefMut<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }\n \n-impl<'b> Drop for BorrowRefMut<'b> {\n+impl Drop for BorrowRefMut<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n@@ -1356,7 +1356,7 @@ pub struct RefMut<'b, T: ?Sized + 'b> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> Deref for RefMut<'b, T> {\n+impl<T: ?Sized> Deref for RefMut<'_, T> {\n     type Target = T;\n \n     #[inline]\n@@ -1366,7 +1366,7 @@ impl<'b, T: ?Sized> Deref for RefMut<'b, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n+impl<T: ?Sized> DerefMut for RefMut<'_, T> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut T {\n         self.value\n@@ -1377,7 +1377,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)\n     }"}, {"sha": "46bb580dcddb1af2d8e80152be0a5ccca040b0ac", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -204,7 +204,7 @@ mod impls {\n \n     // Shared references can be cloned, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized> Clone for &'a T {\n+    impl<T: ?Sized> Clone for &T {\n         #[inline]\n         fn clone(&self) -> Self {\n             *self"}, {"sha": "33881de30527ed5123e4b7c2c521b1754a3ddef4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1033,12 +1033,12 @@ mod impls {\n         fn gt(&self, other: & &'b B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Ord for &'a A where A: Ord {\n+    impl<A: ?Sized> Ord for &A where A: Ord {\n         #[inline]\n-        fn cmp(&self, other: & &'a A) -> Ordering { Ord::cmp(*self, *other) }\n+        fn cmp(&self, other: &Self) -> Ordering { Ord::cmp(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Eq for &'a A where A: Eq {}\n+    impl<A: ?Sized> Eq for &A where A: Eq {}\n \n     // &mut pointers\n \n@@ -1065,12 +1065,12 @@ mod impls {\n         fn gt(&self, other: &&'b mut B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Ord for &'a mut A where A: Ord {\n+    impl<A: ?Sized> Ord for &mut A where A: Ord {\n         #[inline]\n-        fn cmp(&self, other: &&'a mut A) -> Ordering { Ord::cmp(*self, *other) }\n+        fn cmp(&self, other: &Self) -> Ordering { Ord::cmp(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Eq for &'a mut A where A: Eq {}\n+    impl<A: ?Sized> Eq for &mut A where A: Eq {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a A where A: PartialEq<B> {"}, {"sha": "b900990d0a7266a90a1abb983cb697ea7148c0c7", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -407,7 +407,7 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n+impl<T: ?Sized, U: ?Sized> AsRef<U> for &T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -416,7 +416,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n+impl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -433,7 +433,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U>\n+impl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T where T: AsMut<U>\n {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()"}, {"sha": "4bc5b36d82ba22f5d7a3500bfa889858d6b4fdce", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -28,7 +28,7 @@ impl<'a> PadAdapter<'a> {\n     }\n }\n \n-impl<'a> fmt::Write for PadAdapter<'a> {\n+impl fmt::Write for PadAdapter<'_> {\n     fn write_str(&mut self, mut s: &str) -> fmt::Result {\n         while !s.is_empty() {\n             if self.on_newline {"}, {"sha": "bd253e69db319af0323603f9ad4200b76c21567a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -208,7 +208,7 @@ pub trait Write {\n         // requiring a `Sized` bound.\n         struct Adapter<'a,T: ?Sized +'a>(&'a mut T);\n \n-        impl<'a, T: ?Sized> Write for Adapter<'a, T>\n+        impl<T: ?Sized> Write for Adapter<'_, T>\n             where T: Write\n         {\n             fn write_str(&mut self, s: &str) -> Result {\n@@ -229,7 +229,7 @@ pub trait Write {\n }\n \n #[stable(feature = \"fmt_write_blanket_impl\", since = \"1.4.0\")]\n-impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+impl<W: Write + ?Sized> Write for &mut W {\n     fn write_str(&mut self, s: &str) -> Result {\n         (**self).write_str(s)\n     }\n@@ -291,8 +291,8 @@ pub struct ArgumentV1<'a> {\n \n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n            issue = \"0\")]\n-impl<'a> Clone for ArgumentV1<'a> {\n-    fn clone(&self) -> ArgumentV1<'a> {\n+impl Clone for ArgumentV1<'_> {\n+    fn clone(&self) -> Self {\n         *self\n     }\n }\n@@ -436,14 +436,14 @@ pub struct Arguments<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Debug for Arguments<'a> {\n+impl Debug for Arguments<'_> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         Display::fmt(self, fmt)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Display for Arguments<'a> {\n+impl Display for Arguments<'_> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         write(fmt.buf, *self)\n     }\n@@ -1884,7 +1884,7 @@ impl<'a> Formatter<'a> {\n }\n \n #[stable(since = \"1.2.0\", feature = \"formatter_write\")]\n-impl<'a> Write for Formatter<'a> {\n+impl Write for Formatter<'_> {\n     fn write_str(&mut self, s: &str) -> Result {\n         self.buf.write_str(s)\n     }\n@@ -1911,11 +1911,11 @@ macro_rules! fmt_refs {\n     ($($tr:ident),*) => {\n         $(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T: ?Sized + $tr> $tr for &'a T {\n+        impl<T: ?Sized + $tr> $tr for &T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T: ?Sized + $tr> $tr for &'a mut T {\n+        impl<T: ?Sized + $tr> $tr for &mut T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n@@ -2039,14 +2039,14 @@ impl<T: ?Sized> Pointer for *mut T {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Pointer for &'a T {\n+impl<T: ?Sized> Pointer for &T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Pointer for &'a mut T {\n+impl<T: ?Sized> Pointer for &mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n@@ -2153,14 +2153,14 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized + Debug> Debug for Ref<'b, T> {\n+impl<T: ?Sized + Debug> Debug for Ref<'_, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized + Debug> Debug for RefMut<'b, T> {\n+impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Debug::fmt(&*(self.deref()), f)\n     }"}, {"sha": "bbebadd452a269a8474c297fb9756afde65a5ba7", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -361,7 +361,7 @@ pub trait Hasher {\n }\n \n #[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]\n-impl<'a, H: Hasher + ?Sized> Hasher for &'a mut H {\n+impl<H: Hasher + ?Sized> Hasher for &mut H {\n     fn finish(&self) -> u64 {\n         (**self).finish()\n     }\n@@ -669,14 +669,14 @@ mod impls {\n \n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized + Hash> Hash for &'a T {\n+    impl<T: ?Sized + Hash> Hash for &T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized + Hash> Hash for &'a mut T {\n+    impl<T: ?Sized + Hash> Hash for &mut T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }"}, {"sha": "4ed4ddb5b656f92b83e26fd304828a723576cf1a", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -2557,7 +2557,7 @@ fn select_fold1<I, B, FProj, FCmp>(mut it: I,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n+impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;\n     fn next(&mut self) -> Option<I::Item> { (**self).next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }"}, {"sha": "f95f8e7dbcbb64343cd313b8cc31072368a190b0", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -724,7 +724,7 @@ pub trait ExactSizeIterator: Iterator {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {\n+impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for &mut I {\n     fn len(&self) -> usize {\n         (**self).len()\n     }\n@@ -974,7 +974,7 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n pub trait FusedIterator: Iterator {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n+impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n \n /// An iterator that reports an accurate length using size_hint.\n ///\n@@ -999,4 +999,4 @@ impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n pub unsafe trait TrustedLen : Iterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, I: TrustedLen + ?Sized> TrustedLen for &'a mut I {}\n+unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}"}, {"sha": "184ed19da952477062ec3f1ca514139518e1b71c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -87,6 +87,7 @@\n #![feature(doc_spotlight)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n+#![feature(impl_header_lifetime_elision)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "266c6913747f123544e31909c81a06e106b428b4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -584,9 +584,9 @@ impls! { PhantomData }\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n+    unsafe impl<T: Sync + ?Sized> Send for &T {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n+    unsafe impl<T: Send + ?Sized> Send for &mut T {}\n }\n \n /// Compiler-internal trait used to determine whether a type contains\n@@ -600,8 +600,8 @@ impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n unsafe impl<T: ?Sized> Freeze for *const T {}\n unsafe impl<T: ?Sized> Freeze for *mut T {}\n-unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n-unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n+unsafe impl<T: ?Sized> Freeze for &T {}\n+unsafe impl<T: ?Sized> Freeze for &mut T {}\n \n /// Types which can be safely moved after being pinned.\n ///\n@@ -689,6 +689,6 @@ mod copy_impls {\n \n     // Shared references can be copied, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized> Copy for &'a T {}\n+    impl<T: ?Sized> Copy for &T {}\n \n }"}, {"sha": "91a3d77e8b2efa9363fee3ca4419a78871537a3e", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -83,14 +83,14 @@ pub trait Deref {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a T {\n+impl<T: ?Sized> Deref for &T {\n     type Target = T;\n \n     fn deref(&self) -> &T { *self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a mut T {\n+impl<T: ?Sized> Deref for &mut T {\n     type Target = T;\n \n     fn deref(&self) -> &T { *self }\n@@ -174,6 +174,6 @@ pub trait DerefMut: Deref {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> DerefMut for &'a mut T {\n+impl<T: ?Sized> DerefMut for &mut T {\n     fn deref_mut(&mut self) -> &mut T { *self }\n }"}, {"sha": "c9591c3f57bb0fd74b3f34f274b8fe0e85e502e1", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -240,7 +240,7 @@ pub trait FnOnce<Args> {\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> Fn<A> for &'a F\n+    impl<A,F:?Sized> Fn<A> for &F\n         where F : Fn<A>\n     {\n         extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n@@ -249,7 +249,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a F\n+    impl<A,F:?Sized> FnMut<A> for &F\n         where F : Fn<A>\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n@@ -258,7 +258,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a F\n+    impl<A,F:?Sized> FnOnce<A> for &F\n         where F : Fn<A>\n     {\n         type Output = F::Output;\n@@ -269,7 +269,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a mut F\n+    impl<A,F:?Sized> FnMut<A> for &mut F\n         where F : FnMut<A>\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n@@ -278,7 +278,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a mut F\n+    impl<A,F:?Sized> FnOnce<A> for &mut F\n         where F : FnMut<A>\n     {\n         type Output = F::Output;"}, {"sha": "297089926b536ce5e93bb92c544b440c61bc64c8", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -124,7 +124,7 @@ pub trait Generator {\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<'a, T> Generator for &'a mut T\n+impl<T> Generator for &mut T\n     where T: Generator + ?Sized\n {\n     type Yield = T::Yield;"}, {"sha": "f7e5a89a7aae1108ca70e97e0856adda3568cad4", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -851,7 +851,7 @@ impl<'a, T: ?Sized + 'a> RangeBounds<T> for (Bound<&'a T>, Bound<&'a T>) {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeFrom<&'a T> {\n+impl<T> RangeBounds<T> for RangeFrom<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -861,7 +861,7 @@ impl<'a, T> RangeBounds<T> for RangeFrom<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeTo<&'a T> {\n+impl<T> RangeBounds<T> for RangeTo<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -871,7 +871,7 @@ impl<'a, T> RangeBounds<T> for RangeTo<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for Range<&'a T> {\n+impl<T> RangeBounds<T> for Range<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -881,7 +881,7 @@ impl<'a, T> RangeBounds<T> for Range<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeInclusive<&'a T> {\n+impl<T> RangeBounds<T> for RangeInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -891,7 +891,7 @@ impl<'a, T> RangeBounds<T> for RangeInclusive<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeToInclusive<&'a T> {\n+impl<T> RangeBounds<T> for RangeToInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }"}, {"sha": "0255f7a0885ead6d69c17ee72a4d8b12d8f26990", "filename": "src/libcore/option.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1153,18 +1153,18 @@ impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n+impl<A> ExactSizeIterator for Iter<'_, A> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, A> FusedIterator for Iter<'a, A> {}\n+impl<A> FusedIterator for Iter<'_, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+unsafe impl<A> TrustedLen for Iter<'_, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> Clone for Iter<'a, A> {\n+impl<A> Clone for Iter<'_, A> {\n     #[inline]\n-    fn clone(&self) -> Iter<'a, A> {\n+    fn clone(&self) -> Self {\n         Iter { inner: self.inner.clone() }\n     }\n }\n@@ -1199,12 +1199,12 @@ impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n+impl<A> ExactSizeIterator for IterMut<'_, A> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, A> FusedIterator for IterMut<'a, A> {}\n+impl<A> FusedIterator for IterMut<'_, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n+unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n \n /// An iterator over the value in [`Some`] variant of an [`Option`].\n ///"}, {"sha": "f0efeb59e8d6e12225366c7ac19b1e6a6e6f28ab", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -133,7 +133,7 @@ impl<'a> PanicInfo<'a> {\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n-impl<'a> fmt::Display for PanicInfo<'a> {\n+impl fmt::Display for PanicInfo<'_> {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         formatter.write_str(\"panicked at \")?;\n         if let Some(message) = self.message {\n@@ -258,7 +258,7 @@ impl<'a> Location<'a> {\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n-impl<'a> fmt::Display for Location<'a> {\n+impl fmt::Display for Location<'_> {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(formatter, \"{}:{}:{}\", self.file, self.line, self.col)\n     }"}, {"sha": "3484664c24205c3968e967801bf187fc54158cdf", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1098,18 +1098,18 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n+impl<T> ExactSizeIterator for Iter<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+unsafe impl<A> TrustedLen for Iter<'_, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n     #[inline]\n-    fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n+    fn clone(&self) -> Self { Iter { inner: self.inner } }\n }\n \n /// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n@@ -1143,13 +1143,13 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n+impl<T> ExactSizeIterator for IterMut<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+impl<T> FusedIterator for IterMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n+unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n \n /// An iterator over the value in a [`Ok`] variant of a [`Result`].\n ///"}, {"sha": "a50426ba886bb0e71b9d940f3c3cf28b39e8c01d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -2529,15 +2529,15 @@ impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n ////////////////////////////////////////////////////////////////////////////////\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Default for &'a [T] {\n+impl<T> Default for &[T] {\n     /// Creates an empty slice.\n-    fn default() -> &'a [T] { &[] }\n+    fn default() -> Self { &[] }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n-impl<'a, T> Default for &'a mut [T] {\n+impl<T> Default for &mut [T] {\n     /// Creates a mutable empty slice.\n-    fn default() -> &'a mut [T] { &mut [] }\n+    fn default() -> Self { &mut [] }\n }\n \n //\n@@ -2864,7 +2864,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n             .field(&self.as_slice())\n@@ -2873,9 +2873,9 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n+unsafe impl<T: Sync> Sync for Iter<'_, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n+unsafe impl<T: Sync> Send for Iter<'_, T> {}\n \n impl<'a, T> Iter<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -2911,12 +2911,12 @@ impl<'a, T> Iter<'a, T> {\n iterator!{struct Iter -> *const T, &'a T, const, /* no mut */}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n }\n \n #[stable(feature = \"slice_iter_as_ref\", since = \"1.13.0\")]\n-impl<'a, T> AsRef<[T]> for Iter<'a, T> {\n+impl<T> AsRef<[T]> for Iter<'_, T> {\n     fn as_ref(&self) -> &[T] {\n         self.as_slice()\n     }\n@@ -2956,7 +2956,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n             .field(&self.make_slice())\n@@ -2965,9 +2965,9 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n+unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n+unsafe impl<T: Send> Send for IterMut<'_, T> {}\n \n impl<'a, T> IterMut<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -3035,7 +3035,7 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for Split<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"Split\")\n             .field(\"v\", &self.v)\n@@ -3046,8 +3046,8 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n-    fn clone(&self) -> Split<'a, T, P> {\n+impl<T, P> Clone for Split<'_, T, P> where P: Clone + FnMut(&T) -> bool {\n+    fn clone(&self) -> Self {\n         Split {\n             v: self.v,\n             pred: self.pred.clone(),\n@@ -3109,7 +3109,7 @@ impl<'a, T, P> SplitIter for Split<'a, T, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n@@ -3126,7 +3126,7 @@ pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitMut\")\n             .field(\"v\", &self.v)\n@@ -3207,7 +3207,7 @@ impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, starting from the end of the slice.\n@@ -3223,7 +3223,7 @@ pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplit<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n             .field(\"v\", &self.inner.v)\n@@ -3264,7 +3264,7 @@ impl<'a, T, P> SplitIter for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`, starting from the end of the slice.\n@@ -3279,7 +3279,7 @@ pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n             .field(\"v\", &self.inner.v)\n@@ -3322,7 +3322,7 @@ impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T, P> FusedIterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An private iterator over subslices separated by elements that\n /// match a predicate function, splitting at most a fixed number of\n@@ -3365,7 +3365,7 @@ pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitN<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitN\")\n             .field(\"inner\", &self.inner)\n@@ -3387,7 +3387,7 @@ pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitN<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitN\")\n             .field(\"inner\", &self.inner)\n@@ -3408,7 +3408,7 @@ pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitNMut\")\n             .field(\"inner\", &self.inner)\n@@ -3430,7 +3430,7 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitNMut\")\n             .field(\"inner\", &self.inner)\n@@ -3483,8 +3483,8 @@ pub struct Windows<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Windows<'a, T> {\n-    fn clone(&self) -> Windows<'a, T> {\n+impl<T> Clone for Windows<'_, T> {\n+    fn clone(&self) -> Self {\n         Windows {\n             v: self.v,\n             size: self.size,\n@@ -3561,13 +3561,13 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n+impl<T> ExactSizeIterator for Windows<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for Windows<'a, T> {}\n+unsafe impl<T> TrustedLen for Windows<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Windows<'a, T> {}\n+impl<T> FusedIterator for Windows<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n@@ -3596,8 +3596,8 @@ pub struct Chunks<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Chunks<'a, T> {\n-    fn clone(&self) -> Chunks<'a, T> {\n+impl<T> Clone for Chunks<'_, T> {\n+    fn clone(&self) -> Self {\n         Chunks {\n             v: self.v,\n             chunk_size: self.chunk_size,\n@@ -3683,13 +3683,13 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n+impl<T> ExactSizeIterator for Chunks<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for Chunks<'a, T> {}\n+unsafe impl<T> TrustedLen for Chunks<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Chunks<'a, T> {}\n+impl<T> FusedIterator for Chunks<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n@@ -3802,13 +3802,13 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n+impl<T> ExactSizeIterator for ChunksMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksMut<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksMut<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n+impl<T> FusedIterator for ChunksMut<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n@@ -3855,8 +3855,8 @@ impl<'a, T> ChunksExact<'a, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> Clone for ChunksExact<'a, T> {\n-    fn clone(&self) -> ChunksExact<'a, T> {\n+impl<T> Clone for ChunksExact<'_, T> {\n+    fn clone(&self) -> Self {\n         ChunksExact {\n             v: self.v,\n             rem: self.rem,\n@@ -3925,17 +3925,17 @@ impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ChunksExact<'a, T> {\n+impl<T> ExactSizeIterator for ChunksExact<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksExact<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksExact<'_, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ChunksExact<'a, T> {}\n+impl<T> FusedIterator for ChunksExact<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n@@ -4040,17 +4040,17 @@ impl<'a, T> DoubleEndedIterator for ChunksExactMut<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ChunksExactMut<'a, T> {\n+impl<T> ExactSizeIterator for ChunksExactMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksExactMut<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksExactMut<'_, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ChunksExactMut<'a, T> {}\n+impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {"}, {"sha": "a2782dd8e2e430f7905c0049d335101bdcadf9b6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -617,7 +617,7 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Chars<'a> {}\n+impl FusedIterator for Chars<'_> {}\n \n impl<'a> Chars<'a> {\n     /// View the underlying data as a subslice of the original data.\n@@ -707,7 +707,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for CharIndices<'a> {}\n+impl FusedIterator for CharIndices<'_> {}\n \n impl<'a> CharIndices<'a> {\n     /// View the underlying data as a subslice of the original data.\n@@ -733,7 +733,7 @@ impl<'a> CharIndices<'a> {\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for Bytes<'a> {\n+impl Iterator for Bytes<'_> {\n     type Item = u8;\n \n     #[inline]\n@@ -794,7 +794,7 @@ impl<'a> Iterator for Bytes<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> DoubleEndedIterator for Bytes<'a> {\n+impl DoubleEndedIterator for Bytes<'_> {\n     #[inline]\n     fn next_back(&mut self) -> Option<u8> {\n         self.0.next_back()\n@@ -809,7 +809,7 @@ impl<'a> DoubleEndedIterator for Bytes<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> ExactSizeIterator for Bytes<'a> {\n+impl ExactSizeIterator for Bytes<'_> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.0.len()\n@@ -822,10 +822,10 @@ impl<'a> ExactSizeIterator for Bytes<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Bytes<'a> {}\n+impl FusedIterator for Bytes<'_> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a> TrustedLen for Bytes<'a> {}\n+unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n unsafe impl<'a> TrustedRandomAccess for Bytes<'a> {\n@@ -1342,7 +1342,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Lines<'a> {}\n+impl FusedIterator for Lines<'_> {}\n \n /// Created with the method [`lines_any`].\n ///\n@@ -1409,7 +1409,7 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n #[allow(deprecated)]\n-impl<'a> FusedIterator for LinesAny<'a> {}\n+impl FusedIterator for LinesAny<'_> {}\n \n /*\n Section: UTF-8 validation\n@@ -4033,15 +4033,15 @@ impl AsRef<[u8]> for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Default for &'a str {\n+impl Default for &str {\n     /// Creates an empty str\n-    fn default() -> &'a str { \"\" }\n+    fn default() -> Self { \"\" }\n }\n \n #[stable(feature = \"default_mut_str\", since = \"1.28.0\")]\n-impl<'a> Default for &'a mut str {\n+impl Default for &mut str {\n     /// Creates an empty mutable str\n-    fn default() -> &'a mut str { unsafe { from_utf8_unchecked_mut(&mut []) } }\n+    fn default() -> Self { unsafe { from_utf8_unchecked_mut(&mut []) } }\n }\n \n /// An iterator over the non-whitespace substrings of a string,\n@@ -4189,7 +4189,7 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for SplitWhitespace<'a> {}\n+impl FusedIterator for SplitWhitespace<'_> {}\n \n #[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n@@ -4215,7 +4215,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n }\n \n #[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n-impl<'a> FusedIterator for SplitAsciiWhitespace<'a> {}\n+impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n@@ -4234,7 +4234,7 @@ pub struct EncodeUtf16<'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a> fmt::Debug for EncodeUtf16<'a> {\n+impl fmt::Debug for EncodeUtf16<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"EncodeUtf16 { .. }\")\n     }\n@@ -4273,4 +4273,4 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for EncodeUtf16<'a> {}\n+impl FusedIterator for EncodeUtf16<'_> {}"}, {"sha": "1c974533e10c826a60eef8e6c3ef852d7d85b2f0", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -491,7 +491,7 @@ impl<F> MultiCharEq for F where F: FnMut(char) -> bool {\n     fn matches(&mut self, c: char) -> bool { (*self)(c) }\n }\n \n-impl<'a> MultiCharEq for &'a [char] {\n+impl MultiCharEq for &[char] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n         self.iter().any(|&m| { m == c })\n@@ -666,7 +666,7 @@ impl<'a, 'b> Pattern<'a> for &'b [char] {\n pub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::Searcher)\n     where F: FnMut(char) -> bool;\n \n-impl<'a, F> fmt::Debug for CharPredicateSearcher<'a, F>\n+impl<F> fmt::Debug for CharPredicateSearcher<'_, F>\n     where F: FnMut(char) -> bool\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "2476c07cbd9ca307baa5b8eaa676c4601492684c", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -229,7 +229,7 @@ fn test_iterator_step_by_nth_overflow() {\n \n     #[derive(Clone)]\n     struct Test(Bigger);\n-    impl<'a> Iterator for &'a mut Test {\n+    impl Iterator for &mut Test {\n         type Item = i32;\n         fn next(&mut self) -> Option<Self::Item> { Some(21) }\n         fn nth(&mut self, n: usize) -> Option<Self::Item> {"}, {"sha": "ada61d8dfd8739129a5d9cb83313dd738b393a33", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -19,6 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(impl_header_lifetime_elision)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "1a2b16a4fed063654eb6b59e0c0e4f9e51470783", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -142,7 +142,7 @@ impl fmt::Debug for TokenStream {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub use quote::{quote, quote_span};\n \n /// Creates a token stream containing a single token tree.\n@@ -252,7 +252,7 @@ pub mod token_stream {\n /// To quote `$` itself, use `$$`.\n ///\n /// This is a dummy macro, the actual implementation is in `quote::quote`.`\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n #[macro_export]\n macro_rules! quote { () => {} }\n \n@@ -283,7 +283,7 @@ macro_rules! diagnostic_method {\n \n impl Span {\n     /// A span that resolves at the macro definition site.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_def_site\", issue = \"54724\")]\n     pub fn def_site() -> Span {\n         ::__internal::with_sess(|_, data| data.def_site)\n     }\n@@ -298,7 +298,7 @@ impl Span {\n     }\n \n     /// The original source file into which this span points.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {\n         SourceFile {\n             source_file: __internal::lookup_char_pos(self.0.lo()).file,\n@@ -307,21 +307,21 @@ impl Span {\n \n     /// The `Span` for the tokens in the previous macro expansion from which\n     /// `self` was generated from, if any.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn parent(&self) -> Option<Span> {\n         self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If\n     /// this `Span` wasn't generated from other macro expansions then the return\n     /// value is the same as `*self`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source(&self) -> Span {\n         Span(self.0.source_callsite())\n     }\n \n     /// Get the starting line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.lo());\n         LineColumn {\n@@ -331,7 +331,7 @@ impl Span {\n     }\n \n     /// Get the ending line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn end(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.hi());\n         LineColumn {\n@@ -343,7 +343,7 @@ impl Span {\n     /// Create a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n         let self_loc = __internal::lookup_char_pos(self.0.lo());\n         let other_loc = __internal::lookup_char_pos(other.0.lo());\n@@ -355,20 +355,20 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.with_ctxt(other.0.ctxt()))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }\n \n     /// Compares to spans to see if they're equal.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn eq(&self, other: &Span) -> bool {\n         self.0 == other.0\n     }\n@@ -391,33 +391,33 @@ impl fmt::Debug for Span {\n }\n \n /// A line-column pair representing the start or end of a `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub line: usize,\n     /// The 0-indexed column (in UTF-8 characters) in the source file on which\n     /// the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub column: usize\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for LineColumn {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for LineColumn {}\n \n /// The source file of a given `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Clone)]\n pub struct SourceFile {\n     source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for SourceFile {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for SourceFile {}\n \n impl SourceFile {\n@@ -431,7 +431,7 @@ impl SourceFile {\n     /// the command line, the path as given may not actually be valid.\n     ///\n     /// [`is_real`]: #method.is_real\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn path(&self) -> PathBuf {\n         match self.source_file.name {\n             FileName::Real(ref path) => path.clone(),\n@@ -441,7 +441,7 @@ impl SourceFile {\n \n     /// Returns `true` if this source file is a real source file, and not generated by an external\n     /// macro's expansion.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn is_real(&self) -> bool {\n         // This is a hack until intercrate spans are implemented and we can have real source files\n         // for spans generated in external macros.\n@@ -451,7 +451,7 @@ impl SourceFile {\n }\n \n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl fmt::Debug for SourceFile {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n@@ -461,14 +461,14 @@ impl fmt::Debug for SourceFile {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl PartialEq for SourceFile {\n     fn eq(&self, other: &Self) -> bool {\n         Lrc::ptr_eq(&self.source_file, &other.source_file)\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl Eq for SourceFile {}\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n@@ -679,7 +679,7 @@ impl Group {\n     /// pub fn span_open(&self) -> Span {\n     ///                 ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_open(&self) -> Span {\n         Span(self.span.open)\n     }\n@@ -690,7 +690,7 @@ impl Group {\n     /// pub fn span_close(&self) -> Span {\n     ///                        ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_close(&self) -> Span {\n         Span(self.span.close)\n     }\n@@ -881,7 +881,7 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"54723\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         if !Ident::is_valid(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)"}, {"sha": "0f454a79055a050038d8cc8aea9289743c21154b", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -70,7 +70,7 @@ macro_rules! quote {\n /// This is the actual `quote!()` proc macro.\n ///\n /// It is manually loaded in `CStore::load_macro_untracked`.\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote(stream: TokenStream) -> TokenStream {\n     if stream.is_empty() {\n         return quote!(::TokenStream::new());\n@@ -144,7 +144,7 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n \n /// Quote a `Span` into a `TokenStream`.\n /// This is needed to implement a custom quoter.\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote_span(_: Span) -> TokenStream {\n     quote!(::Span::def_site())\n }"}, {"sha": "5be743688649e224320c2f3baa8b7df838182d0a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -727,9 +727,15 @@ impl<'a> LoweringContext<'a> {\n                 // Get the name we'll use to make the def-path. Note\n                 // that collisions are ok here and this shouldn't\n                 // really show up for end-user.\n-                let str_name = match hir_name {\n-                    ParamName::Plain(ident) => ident.as_interned_str(),\n-                    ParamName::Fresh(_) => keywords::UnderscoreLifetime.name().as_interned_str(),\n+                let (str_name, kind) = match hir_name {\n+                    ParamName::Plain(ident) => (\n+                        ident.as_interned_str(),\n+                        hir::LifetimeParamKind::InBand,\n+                    ),\n+                    ParamName::Fresh(_) => (\n+                        keywords::UnderscoreLifetime.name().as_interned_str(),\n+                        hir::LifetimeParamKind::Elided,\n+                    ),\n                 };\n \n                 // Add a definition for the in-band lifetime def\n@@ -749,7 +755,7 @@ impl<'a> LoweringContext<'a> {\n                     bounds: hir_vec![],\n                     span,\n                     pure_wrt_drop: false,\n-                    kind: hir::GenericParamKind::Lifetime { in_band: true }\n+                    kind: hir::GenericParamKind::Lifetime { kind }\n                 }\n             })\n             .chain(in_band_ty_params.into_iter())\n@@ -1509,11 +1515,15 @@ impl<'a> LoweringContext<'a> {\n                         lifetime.span,\n                     );\n \n-                    let name = match name {\n-                        hir::LifetimeName::Underscore => {\n-                            hir::ParamName::Plain(keywords::UnderscoreLifetime.ident())\n-                        }\n-                        hir::LifetimeName::Param(param_name) => param_name,\n+                    let (name, kind) = match name {\n+                        hir::LifetimeName::Underscore => (\n+                            hir::ParamName::Plain(keywords::UnderscoreLifetime.ident()),\n+                            hir::LifetimeParamKind::Elided,\n+                        ),\n+                        hir::LifetimeName::Param(param_name) => (\n+                            param_name,\n+                            hir::LifetimeParamKind::Explicit,\n+                        ),\n                         _ => bug!(\"expected LifetimeName::Param or ParamName::Plain\"),\n                     };\n \n@@ -1524,9 +1534,7 @@ impl<'a> LoweringContext<'a> {\n                         pure_wrt_drop: false,\n                         attrs: hir_vec![],\n                         bounds: hir_vec![],\n-                        kind: hir::GenericParamKind::Lifetime {\n-                            in_band: false,\n-                        }\n+                        kind: hir::GenericParamKind::Lifetime { kind }\n                     });\n                 }\n             }\n@@ -2360,7 +2368,9 @@ impl<'a> LoweringContext<'a> {\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     attrs: self.lower_attrs(&param.attrs),\n                     bounds,\n-                    kind: hir::GenericParamKind::Lifetime { in_band: false }\n+                    kind: hir::GenericParamKind::Lifetime {\n+                        kind: hir::LifetimeParamKind::Explicit,\n+                    }\n                 };\n \n                 self.is_collecting_in_band_lifetimes = was_collecting_in_band;"}, {"sha": "a9ca5d9d30d18be4b89b01c9c93658c7935f7716", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -499,14 +499,27 @@ impl GenericBound {\n \n pub type GenericBounds = HirVec<GenericBound>;\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+pub enum LifetimeParamKind {\n+    // Indicates that the lifetime definition was explicitly declared, like:\n+    // `fn foo<'a>(x: &'a u8) -> &'a u8 { x }`\n+    Explicit,\n+\n+    // Indicates that the lifetime definition was synthetically added\n+    // as a result of an in-band lifetime usage like:\n+    // `fn foo(x: &'a u8) -> &'a u8 { x }`\n+    InBand,\n+\n+    // Indication that the lifetime was elided like both cases here:\n+    // `fn foo(x: &u8) -> &'_ u8 { x }`\n+    Elided,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n-        // Indicates that the lifetime definition was synthetically added\n-        // as a result of an in-band lifetime usage like:\n-        // `fn foo(x: &'a u8) -> &'a u8 { x }`\n-        in_band: bool,\n+        kind: LifetimeParamKind,\n     },\n     Type {\n         default: Option<P<Ty>>,"}, {"sha": "676c24a8d3dff8574cc7face28fa537ba3668de6", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -207,14 +207,20 @@ impl_stable_hash_for!(struct hir::GenericParam {\n     kind\n });\n \n+impl_stable_hash_for!(enum hir::LifetimeParamKind {\n+    Explicit,\n+    InBand,\n+    Elided\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            hir::GenericParamKind::Lifetime { in_band } => {\n-                in_band.hash_stable(hcx, hasher);\n+            hir::GenericParamKind::Lifetime { kind } => {\n+                kind.hash_stable(hcx, hasher);\n             }\n             hir::GenericParamKind::Type { ref default, synthetic } => {\n                 default.hash_stable(hcx, hasher);"}, {"sha": "acdeeca1ce4df04c4305805c943ed219e67525dc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -35,7 +35,7 @@ use syntax_pos::Span;\n use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use hir::{self, GenericParamKind};\n+use hir::{self, GenericParamKind, LifetimeParamKind};\n \n /// The origin of a named lifetime definition.\n ///\n@@ -51,8 +51,8 @@ pub enum LifetimeDefOrigin {\n impl LifetimeDefOrigin {\n     fn from_param(param: &GenericParam) -> Self {\n         match param.kind {\n-            GenericParamKind::Lifetime { in_band } => {\n-                if in_band {\n+            GenericParamKind::Lifetime { kind } => {\n+                if kind == LifetimeParamKind::InBand {\n                     LifetimeDefOrigin::InBand\n                 } else {\n                     LifetimeDefOrigin::Explicit\n@@ -1087,15 +1087,15 @@ fn check_mixed_explicit_and_in_band_defs(\n     tcx: TyCtxt<'_, '_, '_>,\n     params: &P<[hir::GenericParam]>,\n ) {\n-    let in_bands: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-        GenericParamKind::Lifetime { in_band, .. } => Some((in_band, param.span)),\n+    let lifetime_params: Vec<_> = params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Lifetime { kind, .. } => Some((kind, param.span)),\n         _ => None,\n     }).collect();\n-    let out_of_band = in_bands.iter().find(|(in_band, _)| !in_band);\n-    let in_band = in_bands.iter().find(|(in_band, _)| *in_band);\n+    let explicit = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::Explicit);\n+    let in_band = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::InBand);\n \n-    if let (Some((_, out_of_band_span)), Some((_, in_band_span)))\n-        = (out_of_band, in_band) {\n+    if let (Some((_, explicit_span)), Some((_, in_band_span)))\n+        = (explicit, in_band) {\n         struct_span_err!(\n             tcx.sess,\n             *in_band_span,\n@@ -1104,7 +1104,7 @@ fn check_mixed_explicit_and_in_band_defs(\n         ).span_label(\n             *in_band_span,\n             \"in-band lifetime definition here\",\n-        ).span_label(*out_of_band_span, \"explicit lifetime definition here\")\n+        ).span_label(*explicit_span, \"explicit lifetime definition here\")\n         .emit();\n     }\n }"}, {"sha": "3c209a4324675a5b0681375b7f9b75869f0d2ae0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -28,17 +28,16 @@ use util::common::ProfileQueriesMsg;\n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{self, Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n-use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n+use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n+use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n-use syntax::feature_gate;\n-use syntax::parse;\n-use syntax::parse::ParseSess;\n-use syntax::{ast, source_map};\n-use syntax::feature_gate::AttributeType;\n-use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n+use syntax::source_map;\n+use syntax::symbol::Symbol;\n+use syntax::parse::{self, ParseSess};\n+use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n \n use rustc_target::spec::PanicStrategy;"}, {"sha": "c8d104e6c321f4c6e3d88a2a412e617660ed96c7", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 113, "deletions": 34, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -13,14 +13,16 @@ use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n-use syntax::symbol::Symbol;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::{keywords, LocalInternedString, Symbol};\n+use syntax_pos::edition::Edition;\n \n use std::cell::Cell;\n+use std::fmt::Debug;\n \n thread_local! {\n     static FORCE_ABSOLUTE: Cell<bool> = Cell::new(false);\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = Cell::new(false);\n+    static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = Cell::new(false);\n }\n \n /// Enforces that item_path_str always returns an absolute path and\n@@ -51,6 +53,17 @@ pub fn with_forced_impl_filename_line<F: FnOnce() -> R, R>(f: F) -> R {\n     })\n }\n \n+/// Add the `crate::` prefix to paths where appropriate.\n+pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n+    SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n+        let old = flag.get();\n+        flag.set(true);\n+        let result = f();\n+        flag.set(old);\n+        result\n+    })\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It is relative to the current crate\n@@ -64,7 +77,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n         let mut buffer = LocalPathBuffer::new(mode);\n-        self.push_item_path(&mut buffer, def_id);\n+        debug!(\"item_path_str: buffer={:?} def_id={:?}\", buffer, def_id);\n+        self.push_item_path(&mut buffer, def_id, false);\n         buffer.into_string()\n     }\n \n@@ -77,16 +91,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(self, def_id: DefId) -> String {\n         let mut buffer = LocalPathBuffer::new(RootMode::Absolute);\n-        self.push_item_path(&mut buffer, def_id);\n+        debug!(\"absolute_item_path_str: buffer={:?} def_id={:?}\", buffer, def_id);\n+        self.push_item_path(&mut buffer, def_id, false);\n         buffer.into_string()\n     }\n \n     /// Returns the \"path\" to a particular crate. This can proceed in\n     /// various ways, depending on the `root_mode` of the `buffer`.\n     /// (See `RootMode` enum for more details.)\n-    pub fn push_krate_path<T>(self, buffer: &mut T, cnum: CrateNum)\n-        where T: ItemPathBuffer\n+    ///\n+    /// `pushed_prelude_crate` argument should be `true` when the buffer\n+    /// has had a prelude crate pushed to it. If this is the case, then\n+    /// we do not want to prepend `crate::` (as that would not be a valid\n+    /// path).\n+    pub fn push_krate_path<T>(self, buffer: &mut T, cnum: CrateNum, pushed_prelude_crate: bool)\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\n+            \"push_krate_path: buffer={:?} cnum={:?} LOCAL_CRATE={:?}\",\n+            buffer, cnum, LOCAL_CRATE\n+        );\n         match *buffer.root_mode() {\n             RootMode::Local => {\n                 // In local mode, when we encounter a crate other than\n@@ -109,30 +133,56 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         ..\n                     }) = *opt_extern_crate\n                     {\n-                        self.push_item_path(buffer, def_id);\n+                        debug!(\"push_krate_path: def_id={:?}\", def_id);\n+                        self.push_item_path(buffer, def_id, pushed_prelude_crate);\n                     } else {\n-                        buffer.push(&self.crate_name(cnum).as_str());\n+                        let name = self.crate_name(cnum).as_str();\n+                        debug!(\"push_krate_path: name={:?}\", name);\n+                        buffer.push(&name);\n                     }\n+                } else if self.sess.edition() == Edition::Edition2018 && !pushed_prelude_crate {\n+                    SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n+                        // We only add the `crate::` keyword where appropriate. In particular,\n+                        // when we've not previously pushed a prelude crate to this path.\n+                        if flag.get() {\n+                            buffer.push(&keywords::Crate.name().as_str())\n+                        }\n+                    })\n                 }\n             }\n             RootMode::Absolute => {\n                 // In absolute mode, just write the crate name\n                 // unconditionally.\n-                buffer.push(&self.original_crate_name(cnum).as_str());\n+                let name = self.original_crate_name(cnum).as_str();\n+                debug!(\"push_krate_path: original_name={:?}\", name);\n+                buffer.push(&name);\n             }\n         }\n     }\n \n     /// If possible, this pushes a global path resolving to `external_def_id` that is visible\n     /// from at least one local module and returns true. If the crate defining `external_def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n-    pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool\n-        where T: ItemPathBuffer\n+    pub fn try_push_visible_item_path<T>(\n+        self,\n+        buffer: &mut T,\n+        external_def_id: DefId,\n+        pushed_prelude_crate: bool,\n+    ) -> bool\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\n+            \"try_push_visible_item_path: buffer={:?} external_def_id={:?}\",\n+            buffer, external_def_id\n+        );\n         let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n         let (mut cur_def, mut cur_path) = (external_def_id, Vec::<LocalInternedString>::new());\n         loop {\n+            debug!(\n+                \"try_push_visible_item_path: cur_def={:?} cur_path={:?} CRATE_DEF_INDEX={:?}\",\n+                cur_def, cur_path, CRATE_DEF_INDEX,\n+            );\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n@@ -142,7 +192,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         direct: true,\n                         ..\n                     }) => {\n-                        self.push_item_path(buffer, def_id);\n+                        debug!(\"try_push_visible_item_path: def_id={:?}\", def_id);\n+                        self.push_item_path(buffer, def_id, pushed_prelude_crate);\n                         cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n                     }\n@@ -156,6 +207,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             let mut cur_def_key = self.def_key(cur_def);\n+            debug!(\"try_push_visible_item_path: cur_def_key={:?}\", cur_def_key);\n \n             // For a UnitStruct or TupleStruct we want the name of its parent rather than <unnamed>.\n             if let DefPathData::StructCtor = cur_def_key.disambiguated_data.data {\n@@ -175,6 +227,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Symbol::intern(\"<unnamed>\").as_str()\n                 }\n             });\n+            debug!(\"try_push_visible_item_path: symbol={:?}\", symbol);\n             cur_path.push(symbol);\n \n             match visible_parent_map.get(&cur_def) {\n@@ -184,24 +237,29 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn push_item_path<T>(self, buffer: &mut T, def_id: DefId)\n-        where T: ItemPathBuffer\n+    pub fn push_item_path<T>(self, buffer: &mut T, def_id: DefId, pushed_prelude_crate: bool)\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\n+            \"push_item_path: buffer={:?} def_id={:?} pushed_prelude_crate={:?}\",\n+            buffer, def_id, pushed_prelude_crate\n+        );\n         match *buffer.root_mode() {\n             RootMode::Local if !def_id.is_local() =>\n-                if self.try_push_visible_item_path(buffer, def_id) { return },\n+                if self.try_push_visible_item_path(buffer, def_id, pushed_prelude_crate) { return },\n             _ => {}\n         }\n \n         let key = self.def_key(def_id);\n+        debug!(\"push_item_path: key={:?}\", key);\n         match key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n                 assert!(key.parent.is_none());\n-                self.push_krate_path(buffer, def_id.krate);\n+                self.push_krate_path(buffer, def_id.krate, pushed_prelude_crate);\n             }\n \n             DefPathData::Impl => {\n-                self.push_impl_path(buffer, def_id);\n+                self.push_impl_path(buffer, def_id, pushed_prelude_crate);\n             }\n \n             // Unclear if there is any value in distinguishing these.\n@@ -224,22 +282,40 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::ClosureExpr |\n             data @ DefPathData::ImplTrait |\n             data @ DefPathData::GlobalMetaData(..) => {\n-                let parent_def_id = self.parent_def_id(def_id).unwrap();\n-                self.push_item_path(buffer, parent_def_id);\n+                let parent_did = self.parent_def_id(def_id).unwrap();\n+\n+                // Keep track of whether we are one recursion away from the `CrateRoot` and\n+                // pushing the name of a prelude crate. If we are, we'll want to know this when\n+                // printing the `CrateRoot` so we don't prepend a `crate::` to paths.\n+                let mut is_prelude_crate = false;\n+                if let DefPathData::CrateRoot = self.def_key(parent_did).disambiguated_data.data {\n+                    if self.sess.extern_prelude.contains(&data.as_interned_str().as_symbol()) {\n+                        is_prelude_crate = true;\n+                    }\n+                }\n+\n+                self.push_item_path(\n+                    buffer, parent_did, pushed_prelude_crate || is_prelude_crate\n+                );\n                 buffer.push(&data.as_interned_str().as_symbol().as_str());\n-            }\n+            },\n+\n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n-                self.push_item_path(buffer, parent_def_id);\n+                self.push_item_path(buffer, parent_def_id, pushed_prelude_crate);\n             }\n         }\n     }\n \n-    fn push_impl_path<T>(self,\n-                         buffer: &mut T,\n-                         impl_def_id: DefId)\n-        where T: ItemPathBuffer\n+    fn push_impl_path<T>(\n+        self,\n+         buffer: &mut T,\n+         impl_def_id: DefId,\n+         pushed_prelude_crate: bool,\n+    )\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\"push_impl_path: buffer={:?} impl_def_id={:?}\", buffer, impl_def_id);\n         let parent_def_id = self.parent_def_id(impl_def_id).unwrap();\n \n         // Always use types for non-local impls, where types are always\n@@ -251,7 +327,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if !use_types {\n-            return self.push_impl_path_fallback(buffer, impl_def_id);\n+            return self.push_impl_path_fallback(buffer, impl_def_id, pushed_prelude_crate);\n         }\n \n         // Decide whether to print the parent path for the impl.\n@@ -275,7 +351,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // If the impl is not co-located with either self-type or\n             // trait-type, then fallback to a format that identifies\n             // the module more clearly.\n-            self.push_item_path(buffer, parent_def_id);\n+            self.push_item_path(buffer, parent_def_id, pushed_prelude_crate);\n             if let Some(trait_ref) = impl_trait_ref {\n                 buffer.push(&format!(\"<impl {} for {}>\", trait_ref, self_ty));\n             } else {\n@@ -301,13 +377,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         match self_ty.sty {\n             ty::Adt(adt_def, substs) => {\n                 if substs.types().next().is_none() { // ignore regions\n-                    self.push_item_path(buffer, adt_def.did);\n+                    self.push_item_path(buffer, adt_def.did, pushed_prelude_crate);\n                 } else {\n                     buffer.push(&format!(\"<{}>\", self_ty));\n                 }\n             }\n \n-            ty::Foreign(did) => self.push_item_path(buffer, did),\n+            ty::Foreign(did) => self.push_item_path(buffer, did, pushed_prelude_crate),\n \n             ty::Bool |\n             ty::Char |\n@@ -324,16 +400,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn push_impl_path_fallback<T>(self,\n-                                  buffer: &mut T,\n-                                  impl_def_id: DefId)\n-        where T: ItemPathBuffer\n+    fn push_impl_path_fallback<T>(\n+        self,\n+        buffer: &mut T,\n+        impl_def_id: DefId,\n+        pushed_prelude_crate: bool,\n+    )\n+        where T: ItemPathBuffer + Debug\n     {\n         // If no type info is available, fall back to\n         // pretty printing some span information. This should\n         // only occur very early in the compiler pipeline.\n         let parent_def_id = self.parent_def_id(impl_def_id).unwrap();\n-        self.push_item_path(buffer, parent_def_id);\n+        self.push_item_path(buffer, parent_def_id, pushed_prelude_crate);\n         let node_id = self.hir.as_local_node_id(impl_def_id).unwrap();\n         let item = self.hir.expect_item(node_id);\n         let span_str = self.sess.source_map().span_to_string(item.span);"}, {"sha": "c1e80234a775010067889c7dbb855e541a811e25", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -228,7 +228,7 @@ fn get_symbol_hash<'a, 'tcx>(\n fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n     let mut buffer = SymbolPathBuffer::new();\n     item_path::with_forced_absolute_paths(|| {\n-        tcx.push_item_path(&mut buffer, def_id);\n+        tcx.push_item_path(&mut buffer, def_id, false);\n     });\n     buffer.into_interned()\n }\n@@ -338,6 +338,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n //\n // To be able to work on all platforms and get *some* reasonable output, we\n // use C++ name-mangling.\n+#[derive(Debug)]\n struct SymbolPathBuffer {\n     result: String,\n     temp_buf: String,"}, {"sha": "4405c0aef9023367201af0bc00a608e1af718e3b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -32,7 +32,7 @@\n #![recursion_limit=\"256\"]\n \n extern crate arena;\n-extern crate getopts;\n+pub extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n #[cfg(unix)]"}, {"sha": "f2ae5774da875f8eb014635cbcef5e05ba42f894", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -35,7 +35,7 @@ use std::slice;\n \n use syntax::ast;\n use syntax::ptr::P;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n@@ -527,8 +527,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             }\n         })\n     }\n-\n-    let check_move = |p: &Pat, sub: Option<&Pat>| {\n+    let span_vec = &mut Vec::new();\n+    let check_move = |p: &Pat, sub: Option<&Pat>, span_vec: &mut Vec<Span>| {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n@@ -546,16 +546,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                           crate attributes to enable\");\n             }\n             err.emit();\n-        } else if let Some(by_ref_span) = by_ref_span {\n-            struct_span_err!(\n-                cx.tcx.sess,\n-                p.span,\n-                E0009,\n-                \"cannot bind by-move and by-ref in the same pattern\",\n-            )\n-            .span_label(p.span, \"by-move pattern here\")\n-            .span_label(by_ref_span, \"both by-ref and by-move used\")\n-            .emit();\n+        } else if let Some(_by_ref_span) = by_ref_span {\n+            span_vec.push(p.span);\n         }\n     };\n \n@@ -567,7 +559,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                         ty::BindByValue(..) => {\n                             let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n                             if pat_ty.moves_by_default(cx.tcx, cx.param_env, pat.span) {\n-                                check_move(p, sub.as_ref().map(|p| &**p));\n+                                check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }\n                         }\n                         _ => {}\n@@ -579,6 +571,20 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             true\n         });\n     }\n+    if !span_vec.is_empty(){\n+        let span = MultiSpan::from_spans(span_vec.clone());\n+        let mut err = struct_span_err!(\n+            cx.tcx.sess,\n+            span,\n+            E0009,\n+            \"cannot bind by-move and by-ref in the same pattern\",\n+        );\n+        err.span_label(by_ref_span.unwrap(), \"both by-ref and by-move used\");\n+        for span in span_vec.iter(){\n+            err.span_label(*span, \"by-move pattern here\");\n+        }\n+        err.emit();\n+    }\n }\n \n /// Ensures that a pattern guard doesn't borrow by mutable reference or"}, {"sha": "2811848424b4eb992e5f511df3a2a7d0d7e1bc51", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -750,7 +750,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             Rvalue::BinaryOp(op, ref lhs, _) => {\n-                if let ty::RawPtr(_) = lhs.ty(self.mir, self.tcx).sty {\n+                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.mir, self.tcx).sty {\n                     assert!(op == BinOp::Eq || op == BinOp::Ne ||\n                             op == BinOp::Le || op == BinOp::Lt ||\n                             op == BinOp::Ge || op == BinOp::Gt ||"}, {"sha": "efe59e4face5eb14ef0a25755bdab8f3ca35d45e", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -348,7 +348,7 @@ fn check_expr_kind<'a, 'tcx>(\n                 return NotPromotable;\n             }\n             match v.tables.node_id_to_type(lhs.hir_id).sty {\n-                ty::RawPtr(_) => {\n+                ty::RawPtr(_) | ty::FnPtr(..) => {\n                     assert!(op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne ||\n                             op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||\n                             op.node == hir::BinOpKind::Ge || op.node == hir::BinOpKind::Gt);"}, {"sha": "28b9dcb9bfdd1abf571baba484a740e87f5484df", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::map as hir_map;\n use hir::Node;\n use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n+use rustc::ty::item_path::with_crate_prefix;\n use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::lang_items::FnOnceTraitLangItem;\n@@ -515,7 +516,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     \"\\n\"\n                 };\n-                format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n+                format!(\n+                    \"use {};\\n{}\",\n+                    with_crate_prefix(|| self.tcx.item_path_str(*did)),\n+                    additional_newline\n+                )\n             }).collect();\n \n             err.span_suggestions_with_applicability(\n@@ -528,12 +533,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n                 if candidates.len() > 1 {\n-                    msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                            i + 1,\n-                                            self.tcx.item_path_str(*trait_did)));\n+                    msg.push_str(\n+                        &format!(\n+                            \"\\ncandidate #{}: `use {};`\",\n+                            i + 1,\n+                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                        )\n+                    );\n                 } else {\n-                    msg.push_str(&format!(\"\\n`use {};`\",\n-                                            self.tcx.item_path_str(*trait_did)));\n+                    msg.push_str(\n+                        &format!(\n+                            \"\\n`use {};`\",\n+                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                        )\n+                    );\n                 }\n             }\n             if candidates.len() > limit {"}, {"sha": "371b631723a39bb35beea29188331c330892e215", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -3990,6 +3990,7 @@ pub fn path_to_def(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n \n pub fn get_path_for_type<F>(tcx: TyCtxt, def_id: DefId, def_ctor: F) -> hir::Path\n where F: Fn(DefId) -> Def {\n+    #[derive(Debug)]\n     struct AbsolutePathBuffer {\n         names: Vec<String>,\n     }\n@@ -4007,7 +4008,7 @@ where F: Fn(DefId) -> Def {\n \n     let mut apb = AbsolutePathBuffer { names: vec![] };\n \n-    tcx.push_item_path(&mut apb, def_id);\n+    tcx.push_item_path(&mut apb, def_id, false);\n \n     hir::Path {\n         span: DUMMY_SP,"}, {"sha": "dfec13cd2ec007e74d4d0a1f9447b602890b1d34", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1040,7 +1040,8 @@ impl CStr {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n+    #[rustc_const_unstable(feature = \"const_cstr_unchecked\")]\n+    pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         &*(bytes as *const [u8] as *const CStr)\n     }\n \n@@ -1471,4 +1472,13 @@ mod tests {\n         assert_eq!(&*rc2, cstr);\n         assert_eq!(&*arc2, cstr);\n     }\n+\n+    #[test]\n+    fn cstr_const_constructor() {\n+        const CSTR: &'static CStr = unsafe {\n+            CStr::from_bytes_with_nul_unchecked(b\"Hello, world!\\0\")\n+        };\n+\n+        assert_eq!(CSTR.to_str().unwrap(), \"Hello, world!\");\n+    }\n }"}, {"sha": "afe0b67e33020aeb3a743bb32997549def92c7dd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -253,6 +253,8 @@\n #![feature(min_const_fn)]\n #![feature(const_int_ops)]\n #![feature(const_ip)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_cstr_unchecked)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]"}, {"sha": "adbe2f9d4393f52f1f6ef426b56a778b6f8d0fbd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -441,10 +441,10 @@ declare_features! (\n \n     // Allows macro invocations on modules expressions and statements and\n     // procedural macros to expand to non-items.\n-    (active, proc_macro_mod, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_expr, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_non_items, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_gen, \"1.27.0\", Some(38356), None),\n+    (active, proc_macro_mod, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_expr, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_non_items, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_gen, \"1.27.0\", Some(54727), None),\n \n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n@@ -502,7 +502,7 @@ declare_features! (\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n     // Non-builtin attributes in inner attribute position\n-    (active, custom_inner_attributes, \"1.30.0\", Some(38356), None),\n+    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n     // Self struct constructor  (RFC 2302)\n     (active, self_struct_ctor, \"1.30.0\", Some(51994), None),"}, {"sha": "d8408ed85491f38d83a4e0b3a31b24d6f1bd5796", "filename": "src/test/run-pass/issues/issue-54696.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+fn main() {\n+    // We shouldn't promote this\n+    &(main as fn() == main as fn());\n+    // Also check nested case\n+    &(&(main as fn()) == &(main as fn()));\n+}"}, {"sha": "383016f990eb6a009531ca229f1f7ddbdee44284", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/multispan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_diagnostic, proc_macro_span)]\n+#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]\n \n extern crate proc_macro;\n "}, {"sha": "569a458f55a44cf4fb06012a4a051836ddb1ae1c", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_diagnostic, proc_macro_span)]\n+#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]\n \n extern crate proc_macro;\n "}, {"sha": "613ee0a269e70cd62a285e3a469da5cde0bad64c", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -14,7 +14,7 @@ LL | impl Copy for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<'a, T> std::marker::Copy for &'a T\n+           - impl<'_, T> std::marker::Copy for &T\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n@@ -24,7 +24,7 @@ LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<'a, T> std::marker::Copy for &'a T\n+           - impl<'_, T> std::marker::Copy for &T\n              where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type"}, {"sha": "f31d962852e4a92cf13290e7e4f78de240fd09db", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -14,7 +14,7 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n    |\n@@ -25,11 +25,22 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:18:29\n+   |\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n LL | }\n    | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "c915886ca259290f5be02fa41968bc261ae1c2b8", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -15,4 +15,5 @@ fn main() {\n     //~^ ERROR does not live long enough\n     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+    let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n }"}, {"sha": "baf12c5ac591d53ecca84854656e2ff30f39b645", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -14,7 +14,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+...\n LL | }\n    | - temporary value only lives until here\n    |\n@@ -25,11 +25,22 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:18:29\n+   |\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n LL | }\n    | - temporary value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "4886ad7717574e6eae004a6529139beccaac83d3", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -5,7 +5,7 @@ LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<'a, T> std::ops::Deref for &'a T\n+           - impl<'_, T> std::ops::Deref for &T\n              where T: ?Sized;\n \n error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<Foo>`)"}, {"sha": "56dd6691abbe52a246a062cc73b757fe1165204f", "filename": "src/test/ui/impl-header-lifetime-elision/explicit-and-elided-same-header.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(impl_header_lifetime_elision)]\n+\n+// This works for functions...\n+fn foo<'a>(x: &str, y: &'a str) {}\n+\n+// ...so this should work for impls\n+impl<'a> Foo<&str> for &'a str {}\n+trait Foo<T> {}\n+\n+fn main() {\n+}"}, {"sha": "ece3caf78e21845dbd89f16139d60d3abc07407c", "filename": "src/test/ui/issue-53840.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+enum E {\n+    Foo(String, String, String),\n+}\n+\n+struct Bar {\n+    a: String,\n+    b: String,\n+}\n+\n+fn main() {\n+    let bar = Bar { a: \"1\".to_string(), b: \"2\".to_string() };\n+    match E::Foo(\"\".into(), \"\".into(), \"\".into()) {\n+        E::Foo(a, b, ref c) => {}\n+    }\n+    match bar {\n+        Bar {a, ref b} => {}\n+    }\n+}"}, {"sha": "961e4c0ff6286ab907d0b02d901b7e76105ff757", "filename": "src/test/ui/issue-53840.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,20 @@\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:22:16\n+   |\n+LL |         E::Foo(a, b, ref c) => {}\n+   |                ^  ^  ----- both by-ref and by-move used\n+   |                |  |\n+   |                |  by-move pattern here\n+   |                by-move pattern here\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:25:14\n+   |\n+LL |         Bar {a, ref b} => {}\n+   |              ^  ----- both by-ref and by-move used\n+   |              |\n+   |              by-move pattern here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0009`."}, {"sha": "4b4571f99db87ab2478858a602438b6f4b906dae", "filename": "src/test/ui/issues/issue-10396.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n enum Foo<'s> {", "previous_filename": "src/test/run-pass/issues/issue-10396.rs"}, {"sha": "ed8c5e965706719fbe743de36f50c905aeedf339", "filename": "src/test/ui/issues/issue-10456.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n pub struct Foo;", "previous_filename": "src/test/run-pass/issues/issue-10456.rs"}, {"sha": "08653b1c69698ff37f3677717a6671cfbc2c57e3", "filename": "src/test/ui/issues/issue-10763.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-10763.rs"}, {"sha": "6e2aea4d1ab4233982336955b5ce459577a8125c", "filename": "src/test/ui/issues/issue-10853.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![deny(missing_docs)]", "previous_filename": "src/test/run-pass/issues/issue-10853.rs"}, {"sha": "24bf90b2d9d9c668806e732c93d0b9e3077fceca", "filename": "src/test/ui/issues/issue-10902.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-10902.rs"}, {"sha": "af4e7fc389ed38a77c815f25e1d2bddd7d1b1057", "filename": "src/test/ui/issues/issue-11384.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Common { fn dummy(&self) { } }", "previous_filename": "src/test/run-pass/issues/issue-11384.rs"}, {"sha": "11c6fecd78d41dbd4373c45d399d46a583133fa1", "filename": "src/test/ui/issues/issue-11592.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n //! Ensure the private trait Bar isn't complained about.\n \n #![deny(missing_docs)]", "previous_filename": "src/test/run-pass/issues/issue-11592.rs"}, {"sha": "293dd6dfaaa591aebbe2e2586505c043529088c3", "filename": "src/test/ui/issues/issue-11612.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // #11612\n // We weren't updating the auto adjustments with all the resolved", "previous_filename": "src/test/run-pass/issues/issue-11612.rs"}, {"sha": "102b79ac2038239b9199b3455076b252ee67ccdc", "filename": "src/test/ui/issues/issue-11869.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-11869.rs"}, {"sha": "b42404ce7739b7d2f129ed24c31abc1abab81de6", "filename": "src/test/ui/issues/issue-1251.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_attributes)]\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-1251.rs"}, {"sha": "2447bceeea6f16d551bdd171ee2bbaae2732ef7f", "filename": "src/test/ui/issues/issue-12729.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-12729.rs"}, {"sha": "78e0caca0baf22a5ef6171babc5d2995246d3821", "filename": "src/test/ui/issues/issue-13105.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Foo {", "previous_filename": "src/test/run-pass/issues/issue-13105.rs"}, {"sha": "e44ac88566c41cf285eea5715c5da7617c50c13b", "filename": "src/test/ui/issues/issue-13167.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n use std::slice;", "previous_filename": "src/test/run-pass/issues/issue-13167.rs"}, {"sha": "b22942652c459d9bca73e732c64d47877c44a499", "filename": "src/test/ui/issues/issue-13214.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // defining static with struct that contains enum\n // with &'static str variant used to cause ICE", "previous_filename": "src/test/run-pass/issues/issue-13214.rs"}, {"sha": "ed35d3edccfc26c3a37f5d9e57383c767d2062f2", "filename": "src/test/ui/issues/issue-13405.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-13405.rs"}, {"sha": "e954f94b664ac9bc7caee162ba64feba69c8b56b", "filename": "src/test/ui/issues/issue-13703.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n pub struct Foo<'a, 'b: 'a> { foo: &'a &'b isize }", "previous_filename": "src/test/run-pass/issues/issue-13703.rs"}, {"sha": "27fcbf7894188c59115d0115c3c61a0315eb7e2b", "filename": "src/test/ui/issues/issue-13775.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Foo {", "previous_filename": "src/test/run-pass/issues/issue-13775.rs"}, {"sha": "1e67964093bd345c6a3e6b73ead811933025801b", "filename": "src/test/ui/issues/issue-13837.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-13837.rs"}, {"sha": "5a1452fe35746a9383f9ea46348b99982cb733dd", "filename": "src/test/ui/issues/issue-14082.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![allow(unused_imports, dead_code)]", "previous_filename": "src/test/run-pass/issues/issue-14082.rs"}, {"sha": "033b7341db1ed652ee56584e2495a4206a36434d", "filename": "src/test/ui/issues/issue-14254.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Foo: Sized {", "previous_filename": "src/test/run-pass/issues/issue-14254.rs"}, {"sha": "edba1a3bd8fbe2b3fffdb2bd55d47d9953caf170", "filename": "src/test/ui/issues/issue-14330.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-14330.rs"}, {"sha": "0c6617e0ab7b283b2ad20a681dccf4c7bcea57c3", "filename": "src/test/ui/issues/issue-14837.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #[deny(dead_code)]", "previous_filename": "src/test/run-pass/issues/issue-14837.rs"}, {"sha": "18a6cfde3bdf1b4cf3bfce5ba6352c09cb56aee5", "filename": "src/test/ui/issues/issue-14901.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Reader {}\n \n enum Wrapper<'a> {", "previous_filename": "src/test/run-pass/issues/issue-14901.rs"}, {"sha": "54a2ca8c9edaf599b7142a14ded06158312d3cbe", "filename": "src/test/ui/issues/issue-14933.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n pub type BigRat<T = isize> = T;", "previous_filename": "src/test/run-pass/issues/issue-14933.rs"}, {"sha": "d90814daf5f28c466ccd6e7cdaf048b698367df2", "filename": "src/test/ui/issues/issue-14936.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_macros)]\n #![allow(dead_code)]\n #![feature(asm)]", "previous_filename": "src/test/run-pass/issues/issue-14936.rs"}, {"sha": "8b56b42401941cf96a9db7794d73a6aa7ad78deb", "filename": "src/test/ui/issues/issue-14959.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![feature(fn_traits, unboxed_closures)]", "previous_filename": "src/test/run-pass/issues/issue-14959.rs"}, {"sha": "e650db05a6b21d6aa4dfe6aad27c30e5e6d36b37", "filename": "src/test/ui/issues/issue-15108.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n fn main() {}", "previous_filename": "src/test/run-pass/issues/issue-15108.rs"}, {"sha": "f5f9978ed9b146a3bd0b791d1bed669869fd0f31", "filename": "src/test/ui/issues/issue-15261.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-15261.rs"}, {"sha": "30bde2aa858168a3ecb79088eace668955ce9335", "filename": "src/test/ui/issues/issue-15689-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-15689-2.rs"}, {"sha": "fbe39b27efc316ee37db962962821dad2c80d47f", "filename": "src/test/ui/issues/issue-15735.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct A<'a> {\n     a: &'a i32,", "previous_filename": "src/test/run-pass/issues/issue-15735.rs"}, {"sha": "01383c07806c21bc6eef0fd9626e6acfe7234412", "filename": "src/test/ui/issues/issue-16596.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n trait MatrixRow { fn dummy(&self) { }}", "previous_filename": "src/test/run-pass/issues/issue-16596.rs"}, {"sha": "d8af376217807ae284973f0a5efe2e9d7456b51c", "filename": "src/test/ui/issues/issue-16668.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>", "previous_filename": "src/test/run-pass/issues/issue-16668.rs"}, {"sha": "f280d60e1ce3e0afcb82fdbf63e6b256cb5d487e", "filename": "src/test/ui/issues/issue-17121.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n // ignore-cloudabi no std::fs", "previous_filename": "src/test/run-pass/issues/issue-17121.rs"}, {"sha": "b1cbdb87bcd7de0c535711bc8fff4df0b1da50b4", "filename": "src/test/ui/issues/issue-17336.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_must_use)]\n #[allow(dead_code)]\n fn check(a: &str) {", "previous_filename": "src/test/run-pass/issues/issue-17336.rs"}, {"sha": "f5af630cd184a8ee6344eea187c6f8163c525e88", "filename": "src/test/ui/issues/issue-17450.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code, warnings)]\n \n static mut x: isize = 3;", "previous_filename": "src/test/run-pass/issues/issue-17450.rs"}, {"sha": "da7a9f13ef2fbc9da20e29e508c5397187a08af7", "filename": "src/test/ui/issues/issue-17718-const-destructors.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct A;\n impl Drop for A {", "previous_filename": "src/test/run-pass/issues/issue-17718-const-destructors.rs"}, {"sha": "e5b4a2e3edd3b8acd6817619996ebc660d30cbf2", "filename": "src/test/ui/issues/issue-17732.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-17732.rs"}, {"sha": "18299c6acb39d63ab5ef8d5241124def54269ba6", "filename": "src/test/ui/issues/issue-17746.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #17746\n ", "previous_filename": "src/test/run-pass/issues/issue-17746.rs"}, {"sha": "8de0f6d2922c8d9def5e90c2dce435f4da8a3210", "filename": "src/test/ui/issues/issue-17904.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Test that we can parse where clauses on various forms of tuple\n // structs.", "previous_filename": "src/test/run-pass/issues/issue-17904.rs"}, {"sha": "c370b3605f81b2c8e0609a4afe251e5014fcb33a", "filename": "src/test/ui/issues/issue-18083.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_imports)]\n // These crossed imports should resolve fine, and not block on", "previous_filename": "src/test/run-pass/issues/issue-18083.rs"}, {"sha": "74014fde36bab4528976de37a9ed47c0e8ceb6c4", "filename": "src/test/ui/issues/issue-18088.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n \n pub trait Indexable<T>: std::ops::Index<usize, Output = T> {\n     fn index2(&self, i: usize) -> &T {", "previous_filename": "src/test/run-pass/issues/issue-18088.rs"}, {"sha": "b047ee4a4d6d2ec6697ca8d84b3c167b03e8cae4", "filename": "src/test/ui/issues/issue-18188.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n pub trait Promisable: Send + Sync {}", "previous_filename": "src/test/run-pass/issues/issue-18188.rs"}, {"sha": "8518547ac25599a3e288e1f44b495c6f52cfa60d", "filename": "src/test/ui/issues/issue-1821.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-1821.rs"}, {"sha": "90cc9b4bc4335b33d58286425ddeaf217196effa", "filename": "src/test/ui/issues/issue-18446-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Test that methods in trait impls should override default methods.\n ", "previous_filename": "src/test/run-pass/issues/issue-18446.rs"}, {"sha": "eb670b4a5828af301f67da8927a04771039a432e", "filename": "src/test/ui/issues/issue-1866.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-1866.rs"}, {"sha": "defd8f97cbcbd4fb53642a8b28e5de0451a45f61", "filename": "src/test/ui/issues/issue-18738.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[derive(Eq, PartialEq, PartialOrd, Ord)]\n enum Test<'a> {", "previous_filename": "src/test/run-pass/issues/issue-18738.rs"}, {"sha": "f4ce51b677adc572338394bbddd7922356615807", "filename": "src/test/ui/issues/issue-18809.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n trait Tup {\n     type T0;\n     type T1;", "previous_filename": "src/test/run-pass/issues/issue-18809.rs"}, {"sha": "15701a2a45ab27a16c167807a1cef116386b8637", "filename": "src/test/ui/issues/issue-18906.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-18906.rs"}, {"sha": "6aadef691387f9327f158b97470508964ef8e8c8", "filename": "src/test/ui/issues/issue-18988.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n pub trait Foo : Send { }\n ", "previous_filename": "src/test/run-pass/issues/issue-18988.rs"}, {"sha": "59b7d40ae0d84f878ee3082f3cb7b13ff93f1ec6", "filename": "src/test/ui/issues/issue-19037.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-19037.rs"}, {"sha": "4188670f8f67a6a7016c4ba02b139402f43be156", "filename": "src/test/ui/issues/issue-19081.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Hasher {\n     type State;\n ", "previous_filename": "src/test/run-pass/issues/issue-19081.rs"}, {"sha": "8198a40b0c1d96618073d783389f73d8c5c2b283", "filename": "src/test/ui/issues/issue-19097.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // regression test for #19097\n ", "previous_filename": "src/test/run-pass/issues/issue-19097.rs"}, {"sha": "c985f7aad14330df5424bed135aed3296e9e9ba8", "filename": "src/test/ui/issues/issue-19098.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Handler {\n     fn handle(&self, _: &mut String);\n }", "previous_filename": "src/test/run-pass/issues/issue-19098.rs"}, {"sha": "48b5fece1dfc8e23e08b81e222e3ab8f62420aeb", "filename": "src/test/ui/issues/issue-19102.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_imports)]\n #![deny(unused_qualifications)]\n ", "previous_filename": "src/test/run-pass/issues/issue-19102.rs"}, {"sha": "97bd20be7d712c94d345a334b804a651af6ccb2d", "filename": "src/test/ui/issues/issue-19129-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Trait<Input> {", "previous_filename": "src/test/run-pass/issues/issue-19129-1.rs"}, {"sha": "9b1bc2b8ec45b912a1f2023964b02356dcb78c43", "filename": "src/test/ui/issues/issue-19129-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-19129-2.rs"}, {"sha": "c8a7292b2430054bc30cfb1a71d621b699891774", "filename": "src/test/ui/issues/issue-19398.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait T {", "previous_filename": "src/test/run-pass/issues/issue-19398.rs"}, {"sha": "f74b2eb1065b91a347bbc1bb443784b8e77b6ff5", "filename": "src/test/ui/issues/issue-19404.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n use std::any::TypeId;", "previous_filename": "src/test/run-pass/issues/issue-19404.rs"}, {"sha": "fae040a092f63b6c7b6564f7c73f1e0c10b2fcd0", "filename": "src/test/ui/issues/issue-19479.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Base {", "previous_filename": "src/test/run-pass/issues/issue-19479.rs"}, {"sha": "c46cb2c87df989ad90ac1944ea9a32d8738037fd", "filename": "src/test/ui/issues/issue-19631.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-19631.rs"}, {"sha": "c641aee29409d1a39bcc12e678fc0c2ef9610944", "filename": "src/test/ui/issues/issue-19632.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-19632.rs"}, {"sha": "179135baf25770d93a9992f42825715158df5ad9", "filename": "src/test/ui/issues/issue-19850.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_variables)]\n // Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n // bindings", "previous_filename": "src/test/run-pass/issues/issue-19850.rs"}, {"sha": "8c3462dcf45d215372f57ba19ced2023edce0bfa", "filename": "src/test/ui/issues/issue-19982-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19982-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![feature(fn_traits, unboxed_closures)]", "previous_filename": "src/test/run-pass/issues/issue-19982.rs"}, {"sha": "a08bd49f599dd83e48b447735112a805cccc916e", "filename": "src/test/ui/issues/issue-20009.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Check that associated types are `Sized`\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-20009.rs"}, {"sha": "cd90e828889d52cd0839d4b28ff9e5af97bcfdf2", "filename": "src/test/ui/issues/issue-20091.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(stable_features)]\n \n // ignore-cloudabi no processes", "previous_filename": "src/test/run-pass/issues/issue-20091.rs"}, {"sha": "fddb1391017d37a644b1a5b92d27aab70d694b39", "filename": "src/test/ui/issues/issue-20186.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n struct Foo;", "previous_filename": "src/test/run-pass/issues/issue-20186.rs"}, {"sha": "13e0347cb08078a82dc48aaee02c32fb9e977b58", "filename": "src/test/ui/issues/issue-20396.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![allow(dead_code)]", "previous_filename": "src/test/run-pass/issues/issue-20396.rs"}, {"sha": "72be151a3bc9b4ece3c715cbacf01df934324302", "filename": "src/test/ui/issues/issue-20414.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-20414.rs"}, {"sha": "ba15236324e329397b830b64d6750226bb30f86d", "filename": "src/test/ui/issues/issue-20454.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_must_use)]\n use std::thread;\n ", "previous_filename": "src/test/run-pass/issues/issue-20454.rs"}, {"sha": "bfe2d7acde6773b8f188ae3502b21cc7da211c48", "filename": "src/test/ui/issues/issue-2063-resource.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances", "previous_filename": "src/test/run-pass/issues/issue-2063-resource.rs"}, {"sha": "8e50c0becb3948d73d00be09976ec98aab058bcb", "filename": "src/test/ui/issues/issue-20644.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_imports)]\n #![allow(stable_features)]", "previous_filename": "src/test/run-pass/issues/issue-20644.rs"}, {"sha": "bebbc914a459c44acdb094adb35a1560f4d141b7", "filename": "src/test/ui/issues/issue-20763-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-20763-1.rs"}, {"sha": "87f4e54a6adae8d4b2658c3956ba36990a44d91d", "filename": "src/test/ui/issues/issue-20763-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-20763-2.rs"}, {"sha": "70be78ee7b2d4d3f883f5296232a9e95be406fe8", "filename": "src/test/ui/issues/issue-20797.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // ignore-cloudabi no std::fs\n \n // Regression test for #20797.", "previous_filename": "src/test/run-pass/issues/issue-20797.rs"}, {"sha": "fe2756e281409ce039818b8b7a1668fede13777d", "filename": "src/test/ui/issues/issue-20825-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Subscriber {\n     type Input;\n }", "previous_filename": "src/test/run-pass/issues/issue-20825.rs"}, {"sha": "fd04b7fcee8ee26e6387d93244f55dfd9be2cbdb", "filename": "src/test/ui/issues/issue-21140.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Trait where Self::Out: std::fmt::Display {\n     type Out;\n }", "previous_filename": "src/test/run-pass/issues/issue-21140.rs"}, {"sha": "e7524a942b2249137df5ce02462641d5c3577c84", "filename": "src/test/ui/issues/issue-21174-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n trait Trait<'a> {", "previous_filename": "src/test/run-pass/issues/issue-21174.rs"}, {"sha": "64b322f472bbda91a00ec641eb4938c5c4e2d676", "filename": "src/test/ui/issues/issue-21245.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for issue #21245. Check that we are able to infer\n // the types in these examples correctly. It used to be that", "previous_filename": "src/test/run-pass/issues/issue-21245.rs"}, {"sha": "06c5ccbb6ccdbe38cf20177f2663dc626c86d7f2", "filename": "src/test/ui/issues/issue-21363.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #![no_implicit_prelude]", "previous_filename": "src/test/run-pass/issues/issue-21363.rs"}, {"sha": "32633469ea46fb72bb3c4164de1401ceb5b8ee80", "filename": "src/test/ui/issues/issue-21402.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-21402.rs"}, {"sha": "aac41196215d248b75fc9edb93317c86a9a5eac5", "filename": "src/test/ui/issues/issue-21520.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Test that the requirement (in `Bar`) that `T::Bar : 'static` does\n // not wind up propagating to `T`.", "previous_filename": "src/test/run-pass/issues/issue-21520.rs"}, {"sha": "2cf97cec31c33e461ee2f07ad2e0707465baf477", "filename": "src/test/ui/issues/issue-21562.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-21562.rs"}, {"sha": "880b3524e1074c6a95331f859bd0bbb0f4ec0d57", "filename": "src/test/ui/issues/issue-21622.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n ", "previous_filename": "src/test/run-pass/issues/issue-21622.rs"}, {"sha": "d21f5623953132b89380d0f4f8d4c5a69b112c3d", "filename": "src/test/ui/issues/issue-21634.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(stable_features)]\n \n #![feature(cfg_target_feature)]", "previous_filename": "src/test/run-pass/issues/issue-21634.rs"}, {"sha": "b25fe1bc9540cf6a7010cf1aef37f64de5ff48e8", "filename": "src/test/ui/issues/issue-21726.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #21726: an issue arose around the rules for\n // subtyping of projection types that resulted in an unconstrained", "previous_filename": "src/test/run-pass/issues/issue-21726.rs"}, {"sha": "d83cf08d1733da72955082ac6cc2e76b88ee221d", "filename": "src/test/ui/issues/issue-21891.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-21891.rs"}, {"sha": "76dae2a2602e0ab19d7efc5317eb9ffe3d95799a", "filename": "src/test/ui/issues/issue-22066.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait LineFormatter<'a> {\n     type Iter: Iterator<Item=&'a str> + 'a;\n     fn iter(&'a self, line: &'a str) -> Self::Iter;", "previous_filename": "src/test/run-pass/issues/issue-22066.rs"}, {"sha": "87ea53a3f204b9d7bc7baae57af5732bcd1920c6", "filename": "src/test/ui/issues/issue-22356.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(type_alias_bounds)]\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-22356.rs"}, {"sha": "a30f5f76387505e893ae0fad7f5736fe9107306f", "filename": "src/test/ui/issues/issue-22375.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n trait A<T: A<T>> {}\n \n fn main() {}", "previous_filename": "src/test/run-pass/issues/issue-22375.rs"}, {"sha": "c13b9dd9248a51d8035ef77535ec654104ed3b53", "filename": "src/test/ui/issues/issue-22471.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(type_alias_bounds)]\n ", "previous_filename": "src/test/run-pass/issues/issue-22471.rs"}, {"sha": "c97c10073e397993c0b735ef5ec80da5b18e0502", "filename": "src/test/ui/issues/issue-22777.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // This test is reduced from libsyntax.  It is just checking that we\n // can successfully deal with a \"deep\" structure, which the drop-check\n // was hitting a recursion limit on at one point.", "previous_filename": "src/test/run-pass/issues/issue-22777.rs"}, {"sha": "21e6138e4965ddcfc82df83699914788bb25b277", "filename": "src/test/ui/issues/issue-22781.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_variables)]\n use std::collections::HashMap;\n use std::collections::hash_map::Entry::Vacant;", "previous_filename": "src/test/run-pass/issues/issue-22781.rs"}, {"sha": "0d11484d96879e0ae74aed9bc93dccbf55e269ce", "filename": "src/test/ui/issues/issue-22814.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n trait Test {}\n \n macro_rules! test {", "previous_filename": "src/test/run-pass/issues/issue-22814.rs"}, {"sha": "f5ecd17d788161f5f5725c476e5d9eabd712ae55", "filename": "src/test/ui/issues/issue-22894.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #[allow(dead_code)]\n static X: &'static str = &*\"\";\n fn main() {}", "previous_filename": "src/test/run-pass/issues/issue-22894.rs"}, {"sha": "cc6376eb668952edf2724275a7da5b640e95bf9d", "filename": "src/test/ui/issues/issue-2311-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-2311-2.rs"}, {"sha": "77e014e2785987fa903b0ce33dbc4a7115665b19", "filename": "src/test/ui/issues/issue-2311.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-2311.rs"}, {"sha": "0de460a30ab40da0097f03f85074feb26159ba8c", "filename": "src/test/ui/issues/issue-2312.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-2312.rs"}, {"sha": "eef35fe6f248482d3a98a6d27fdb2bb8c69b8890", "filename": "src/test/ui/issues/issue-23406.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait Inner {\n     type T;", "previous_filename": "src/test/run-pass/issues/issue-23406.rs"}, {"sha": "9907cf6b687eb711324b22132065d16eda7a961d", "filename": "src/test/ui/issues/issue-23442.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n use std::marker::PhantomData;\n ", "previous_filename": "src/test/run-pass/issues/issue-23442.rs"}, {"sha": "6d4fdcd08b64c61d60f599d3cdcbb25cb4e0bdb2", "filename": "src/test/ui/issues/issue-23477.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // compiler-flags: -g\n \n pub struct Dst {", "previous_filename": "src/test/run-pass/issues/issue-23477.rs"}, {"sha": "e5b672bc3e7c0938a76e666f87542bc937d9a876", "filename": "src/test/ui/issues/issue-23550.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![feature(core_intrinsics)]\n #![allow(warnings)]\n ", "previous_filename": "src/test/run-pass/issues/issue-23550.rs"}, {"sha": "b2c9183c16c9314937a3670c707315b57b1aaf2b", "filename": "src/test/ui/issues/issue-23649-3.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #[derive(PartialEq)]\n struct Slice { slice: [u8] }\n ", "previous_filename": "src/test/run-pass/issues/issue-23649-3.rs"}, {"sha": "e74f993df67db901aeb8ff90375b302b93ed3742", "filename": "src/test/ui/issues/issue-24085.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #24085. Errors were occurring in region\n // inference due to the requirement that `'a:b'`, which was getting", "previous_filename": "src/test/run-pass/issues/issue-24085.rs"}, {"sha": "fb50f4dc8db0f79554259ccc27f5c5c18df5b8b3", "filename": "src/test/ui/issues/issue-24161.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[derive(Copy,Clone)]\n struct Functions {", "previous_filename": "src/test/run-pass/issues/issue-24161.rs"}, {"sha": "f2c67e19eef7cd0d1934b3979ad1860bffe94fc0", "filename": "src/test/ui/issues/issue-24227.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // This resulted in an ICE. Test for future-proofing\n // Issue #24227\n ", "previous_filename": "src/test/run-pass/issues/issue-24227.rs"}, {"sha": "704a71dbb1edc88e8af16e317b1ca2029527db5b", "filename": "src/test/ui/issues/issue-24389.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n struct Foo;", "previous_filename": "src/test/run-pass/issues/issue-24389.rs"}, {"sha": "490d6dfadec530ce566e20a435a0b75404aebca5", "filename": "src/test/ui/issues/issue-24434.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_attributes)]\n // compile-flags:--cfg set1\n ", "previous_filename": "src/test/run-pass/issues/issue-24434.rs"}, {"sha": "bff4eb92806d06b82e4abf9e45ffd8aa14dd3c42", "filename": "src/test/ui/issues/issue-2487-a.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-2487-a.rs"}, {"sha": "24ba19c4b7f2ad658e2af339dfddc1c98284204c", "filename": "src/test/ui/issues/issue-2502.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n ", "previous_filename": "src/test/run-pass/issues/issue-2502.rs"}, {"sha": "5f15393dacc1204ef80a91e088191ccdbb1ffbc0", "filename": "src/test/ui/issues/issue-25180.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-25180.rs"}, {"sha": "eaa44623f40e60578ac557a4479e6580baaa74cb", "filename": "src/test/ui/issues/issue-25394.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n struct Row<T>([T]);", "previous_filename": "src/test/run-pass/issues/issue-25394.rs"}, {"sha": "cf33cf3cb6e17e34d9d6042c52a7c7271166b3ef", "filename": "src/test/ui/issues/issue-26095.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-26095.rs"}, {"sha": "29a8200104ac05929d07161e8832d65d354e614f", "filename": "src/test/ui/issues/issue-2611-3.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Tests that impls are allowed to have looser, more permissive bounds\n // than the traits require.", "previous_filename": "src/test/run-pass/issues/issue-2611-3.rs"}, {"sha": "ccadee457506e3d59cfa5311612e97a852bfea54", "filename": "src/test/ui/issues/issue-26205.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n use std::ops::{Deref, DerefMut};\n ", "previous_filename": "src/test/run-pass/issues/issue-26205.rs"}, {"sha": "a587db00dcf2dc5d568dcd5798f500605e1c582a", "filename": "src/test/ui/issues/issue-26646.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![deny(unused_attributes)]\n \n #[repr(C)]", "previous_filename": "src/test/run-pass/issues/issue-26646.rs"}, {"sha": "1a4850d2459197c82a71752b6a16daaed8734f2b", "filename": "src/test/ui/issues/issue-26997.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n pub struct Foo {\n     x: isize,", "previous_filename": "src/test/run-pass/issues/issue-26997.rs"}, {"sha": "c2a0baaba2844237a1087313885072bf8ffddc32", "filename": "src/test/ui/issues/issue-27105.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n use std::cell::RefCell;\n use std::rc::Rc;\n ", "previous_filename": "src/test/run-pass/issues/issue-27105.rs"}, {"sha": "1dfbe21921ec417a6ef1d2fab37c0ee550257216", "filename": "src/test/ui/issues/issue-27281.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Trait<'a> {\n     type T;\n     type U;", "previous_filename": "src/test/run-pass/issues/issue-27281.rs"}, {"sha": "8c8d3c557fc7d6aa0b69ae582fbd01064537dcd6", "filename": "src/test/ui/issues/issue-2748-a.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n ", "previous_filename": "src/test/run-pass/issues/issue-2748-a.rs"}, {"sha": "c0a981f60ee001b9d8d5fe9de09634d1956182dc", "filename": "src/test/ui/issues/issue-27583.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Regression test for issue #27583. Unclear how useful this will be\n // going forward, since the issue in question was EXTREMELY sensitive\n // to compiler internals (like the precise numbering of nodes), but", "previous_filename": "src/test/run-pass/issues/issue-27583.rs"}, {"sha": "4e4ef64c5b683c4fdf2e429ed111731c738f601f", "filename": "src/test/ui/issues/issue-27889.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n // Test that a field can have the same name in different variants", "previous_filename": "src/test/run-pass/issues/issue-27889.rs"}, {"sha": "1894d50ed99213ed3ff8b0811cc9d2837b072508", "filename": "src/test/ui/issues/issue-2804-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr", "previous_filename": "src/test/run-pass/issues/issue-2804-2.rs"}, {"sha": "c3f2c73e845f56b1de839b84e59fa057627b4b18", "filename": "src/test/ui/issues/issue-28279.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n use std::rc::Rc;\n ", "previous_filename": "src/test/run-pass/issues/issue-28279.rs"}, {"sha": "28fac2cba0fab19a80a2707ae6927c970a887656", "filename": "src/test/ui/issues/issue-28561.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],", "previous_filename": "src/test/run-pass/issues/issue-28561.rs"}, {"sha": "88842ad9ca59e929bcb9cfa334a6bf6d937f30b4", "filename": "src/test/ui/issues/issue-28600.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // #28600 ICE: pub extern fn with parameter type &str inside struct impl\n \n struct Test;", "previous_filename": "src/test/run-pass/issues/issue-28600.rs"}, {"sha": "af8531feff23a3b927282bdd1eeb1e164f4e4a04", "filename": "src/test/ui/issues/issue-28822.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(min_const_fn)]\n ", "previous_filename": "src/test/run-pass/issues/issue-28822.rs"}, {"sha": "0602b9b2297ee74cd1132751cfc17586bfc1eeda", "filename": "src/test/ui/issues/issue-28871.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Regression test for #28871. The problem is that rustc encountered\n // two ways to project, one from a where clause and one from the where\n // clauses on the trait definition. (In fact, in this case, the where", "previous_filename": "src/test/run-pass/issues/issue-28871.rs"}, {"sha": "fd053838795770b90a334320090d0e7b801b6285", "filename": "src/test/ui/issues/issue-28936.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub type Session = i32;\n pub struct StreamParser<'a, T> {\n     _tokens: T,", "previous_filename": "src/test/run-pass/issues/issue-28936.rs"}, {"sha": "7f4ccc971b77a2165a66d7a3228d7584647a4715", "filename": "src/test/ui/issues/issue-28999.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub struct Xyz<'a, V> {\n     pub v: (V, &'a u32),\n }", "previous_filename": "src/test/run-pass/issues/issue-28999.rs"}, {"sha": "08460e18c13360762815aeb470301e172a91f143", "filename": "src/test/ui/issues/issue-29030.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n struct Message<'a, P: 'a = &'a [u8]> {", "previous_filename": "src/test/run-pass/issues/issue-29030.rs"}, {"sha": "cb15e4048b9590de56c3a78bc8d04c6cb6a86b37", "filename": "src/test/ui/issues/issue-29037.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // This test ensures that each pointer type `P<X>` is covariant in `X`.\n ", "previous_filename": "src/test/run-pass/issues/issue-29037.rs"}, {"sha": "2e91979a517d0d8b484ba9b7a40a27545cb4821e", "filename": "src/test/ui/issues/issue-2904.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_mut)]", "previous_filename": "src/test/run-pass/issues/issue-2904.rs"}, {"sha": "cbd0eab8b1c51fd8193f5f5a9c5e02a6580458a7", "filename": "src/test/ui/issues/issue-29048.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub struct Chan;\n pub struct ChanSelect<'c, T> {\n     chans: Vec<(&'c Chan, T)>,", "previous_filename": "src/test/run-pass/issues/issue-29048.rs"}, {"sha": "874978826cadd814445b66d3b81d4a191acb73fc", "filename": "src/test/ui/issues/issue-29071.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-29071.rs"}, {"sha": "4ea720bfb7ca05b180808944cdd31d969c520a42", "filename": "src/test/ui/issues/issue-29276.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct S([u8; { struct Z; 0 }]);\n ", "previous_filename": "src/test/run-pass/issues/issue-29276.rs"}, {"sha": "8315585e15ed9d368b51f3705dcb25d4d0559ff2", "filename": "src/test/ui/issues/issue-29516.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![feature(optin_builtin_traits)]\n \n auto trait NotSame {}", "previous_filename": "src/test/run-pass/issues/issue-29516.rs"}, {"sha": "0dbd830c135014db35c955dc64b72aaa9f863422", "filename": "src/test/ui/issues/issue-29540.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #[derive(Debug)]\n pub struct Config {\n     pub name: String,", "previous_filename": "src/test/run-pass/issues/issue-29540.rs"}, {"sha": "971aac8f694ddfb95630b967bc610142b13f3825", "filename": "src/test/ui/issues/issue-29710.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![deny(unused_results)]\n #![allow(dead_code)]\n ", "previous_filename": "src/test/run-pass/issues/issue-29710.rs"}, {"sha": "e383b712f24a3a0a5983e28379849e53a3ccb07a", "filename": "src/test/ui/issues/issue-29740.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #29740. Inefficient MIR matching algorithms\n // generated way too much code for this sort of case, leading to OOM.", "previous_filename": "src/test/run-pass/issues/issue-29740.rs"}, {"sha": "085a6e19eb158807b2a71e80445dc1eb89b4174b", "filename": "src/test/ui/issues/issue-31260.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n pub struct Struct<K: 'static> {\n     pub field: K,", "previous_filename": "src/test/run-pass/issues/issue-31260.rs"}, {"sha": "507af2f6c2a46a236f647c76f5c35de242ed54f1", "filename": "src/test/ui/issues/issue-3149.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-3149.rs"}, {"sha": "163b7385c8bcbdfa781b2531bcd1c2e5b37d253f", "filename": "src/test/ui/issues/issue-31597.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait Make {\n     type Out;", "previous_filename": "src/test/run-pass/issues/issue-31597.rs"}, {"sha": "92d88d543a58fbbd0976ebce1a80192fb856e6c3", "filename": "src/test/ui/issues/issue-32324.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n trait Resources {", "previous_filename": "src/test/run-pass/issues/issue-32324.rs"}, {"sha": "9b17dae0eef940a2d2c9fc837fcdc70f7144d72f", "filename": "src/test/ui/issues/issue-33264.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // only-x86_64\n \n #![allow(dead_code, non_upper_case_globals)]", "previous_filename": "src/test/run-pass/issues/issue-33264.rs"}, {"sha": "1816d7d4f88782b10428043a0104abd5abee1261", "filename": "src/test/ui/issues/issue-33287.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n const A: [u32; 1] = [0];", "previous_filename": "src/test/run-pass/issues/issue-33287.rs"}, {"sha": "bcbb73ce65b96c2432648a3f4ee836e9b495b7f3", "filename": "src/test/ui/issues/issue-33903.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Issue 33903:\n // Built-in indexing should be used even when the index is not", "previous_filename": "src/test/run-pass/issues/issue-33903.rs"}, {"sha": "986048a03ee11c47e767fb8e7d63a4e56fac302e", "filename": "src/test/ui/issues/issue-34194.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n struct A {", "previous_filename": "src/test/run-pass/issues/issue-34194.rs"}, {"sha": "7bf0c4393c3024193c99d5ee6718a9f6ff7a63b1", "filename": "src/test/ui/issues/issue-3424.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n // rustc --test ignores2.rs && ./ignores2", "previous_filename": "src/test/run-pass/issues/issue-3424.rs"}, {"sha": "e39e3c3b309b8364cb8a93e0d20093b42fa03474", "filename": "src/test/ui/issues/issue-34751.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // #34751 ICE: 'rustc' panicked at 'assertion failed: !substs.has_regions_escaping_depth(0)'\n ", "previous_filename": "src/test/run-pass/issues/issue-34751.rs"}, {"sha": "90b462a7432f3110956ac31474a91bbd594fe517", "filename": "src/test/ui/issues/issue-34780.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(stable_features)]\n #![feature(associated_consts)]\n ", "previous_filename": "src/test/run-pass/issues/issue-34780.rs"}, {"sha": "0265a5845f988e79a594f0c5997623d7316310f0", "filename": "src/test/ui/issues/issue-35376.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![feature(specialization)]\n \n fn main() {}", "previous_filename": "src/test/run-pass/issues/issue-35376.rs"}, {"sha": "79680565ee1781663411f1351cddacad930b2a7e", "filename": "src/test/ui/issues/issue-35546.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #35546. Check that we are able to codegen\n // this. Before we had problems because of the drop glue signature", "previous_filename": "src/test/run-pass/issues/issue-35546.rs"}, {"sha": "916adc83223ac4c24c2863a1b4c01542659a9723", "filename": "src/test/ui/issues/issue-3563-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait Canvas {", "previous_filename": "src/test/run-pass/issues/issue-3563-2.rs"}, {"sha": "fdc10ae936b9a7d08d010efe652fcc67384f2f19", "filename": "src/test/ui/issues/issue-36075.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait DeclarationParser {\n     type Declaration;", "previous_filename": "src/test/run-pass/issues/issue-36075.rs"}, {"sha": "070b2e538d7bacc68a8232dd0a4c65b17a14d792", "filename": "src/test/ui/issues/issue-3609.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_mut)]", "previous_filename": "src/test/run-pass/issues/issue-3609.rs"}, {"sha": "8a47ebbd0a899267b16b68dcb5f6f39915b38c16", "filename": "src/test/ui/issues/issue-36744-without-calls.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Tests for an LLVM abort when storing a lifetime-parametric fn into\n // context that is expecting one that is not lifetime-parametric\n // (i.e. has no `for <'_>`).", "previous_filename": "src/test/run-pass/issues/issue-36744-without-calls.rs"}, {"sha": "9956301dcc9b3aa4e5d6af64bd72a26e61cc2cd6", "filename": "src/test/ui/issues/issue-37598.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(slice_patterns)]\n ", "previous_filename": "src/test/run-pass/issues/issue-37598.rs"}, {"sha": "472b3383727ae814648f15f0662f5ead475542c5", "filename": "src/test/ui/issues/issue-37655.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Regression test for #37655. The problem was a false edge created by\n // coercion that wound up requiring that `'a` (in `split()`) outlive\n // `'b`, which shouldn't be necessary.", "previous_filename": "src/test/run-pass/issues/issue-37655.rs"}, {"sha": "fa5bb362c9f6df0a11f263b868778012793ff101", "filename": "src/test/ui/issues/issue-37725.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait Foo {\n     fn foo(&self);", "previous_filename": "src/test/run-pass/issues/issue-37725.rs"}, {"sha": "04a4c19785b507f67167f3d69fffe0b173a17dad", "filename": "src/test/ui/issues/issue-37733.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n type A = for<> fn();\n ", "previous_filename": "src/test/run-pass/issues/issue-37733.rs"}, {"sha": "5774d08473add4c03967cf43aa3c2631a8e36ce0", "filename": "src/test/ui/issues/issue-38727.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-38727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-38727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38727.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #[repr(u64)]\n enum A {", "previous_filename": "src/test/run-pass/issues/issue-38727.rs"}, {"sha": "791a4bb8af0af8e7126bcc76ef4ffe087dd2b851", "filename": "src/test/ui/issues/issue-3874.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3874.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-3874.rs"}, {"sha": "79b206799ad24c98a79f74a8fbbb359c294030d1", "filename": "src/test/ui/issues/issue-3888-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3888-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3888-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3888-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-3888-2.rs"}, {"sha": "f6acc4b814df1385fd7f4bdd5e5490c43776e122", "filename": "src/test/ui/issues/issue-39089.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39089.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n fn f<T: ?for<'a> Sized>() {}\n ", "previous_filename": "src/test/run-pass/issues/issue-39089.rs"}, {"sha": "417b3160a4d9bb35413c489a95977b14e6d68d3f", "filename": "src/test/ui/issues/issue-39467.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39467.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n macro_rules! expr { () => { () } }\n ", "previous_filename": "src/test/run-pass/issues/issue-39467.rs"}, {"sha": "adfd5873ea77b8931ffe03455219f786538c2547", "filename": "src/test/ui/issues/issue-3979-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3979-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3979-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3979-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n trait A {", "previous_filename": "src/test/run-pass/issues/issue-3979-2.rs"}, {"sha": "90fa1f8c3e09eb94b0763d0c695a6a9a57e09668", "filename": "src/test/ui/issues/issue-3991.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3991.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-3991.rs"}, {"sha": "cd4b32688d35db1df58b4b05b7b6c23ae97594c9", "filename": "src/test/ui/issues/issue-39984.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39984.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-39984.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39984.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n // Regression test for issue #39984.", "previous_filename": "src/test/run-pass/issues/issue-39984.rs"}, {"sha": "77f4466ae54e7ff13b7a1ceb6ea783094225dc7b", "filename": "src/test/ui/issues/issue-40136.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-40136.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-40136.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40136.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n macro_rules! m { () => { 0 } }", "previous_filename": "src/test/run-pass/issues/issue-40136.rs"}, {"sha": "470dd1e430f9cd6046298d60feb0de5965eeb4a2", "filename": "src/test/ui/issues/issue-4025.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4025.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_mut)]\n /*", "previous_filename": "src/test/run-pass/issues/issue-4025.rs"}, {"sha": "8b2a53f4032e389d19d79d6ff2d449f3a7cd9e15", "filename": "src/test/ui/issues/issue-40962.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-40962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-40962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40962.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n macro_rules! m {\n     ($i:meta) => {\n         #[derive($i)]", "previous_filename": "src/test/run-pass/issues/issue-40962.rs"}, {"sha": "ff8c234ae5ede41757d14bd5152f70c88e933ad2", "filename": "src/test/ui/issues/issue-41272.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41272.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct Foo;\n ", "previous_filename": "src/test/run-pass/issues/issue-41272.rs"}, {"sha": "808e6a7f05fa1a0946bf90b035474807387bc42c", "filename": "src/test/ui/issues/issue-41298.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41298.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct Function<T, F> { t: T, f: F }\n ", "previous_filename": "src/test/run-pass/issues/issue-41298.rs"}, {"sha": "ac626f0ba387e95db20d80e218083015a446469c", "filename": "src/test/ui/issues/issue-41628.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41628.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41628.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41628.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![deny(dead_code)]\n \n #[used]", "previous_filename": "src/test/run-pass/issues/issue-41628.rs"}, {"sha": "96c9a565233f25c4dc909ebf48e17a4260b38c99", "filename": "src/test/ui/issues/issue-41936-variance-coerce-unsized-cycle.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41936-variance-coerce-unsized-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-41936-variance-coerce-unsized-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41936-variance-coerce-unsized-cycle.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for #41936. The coerce-unsized trait check in\n // coherence was using subtyping, which triggered variance", "previous_filename": "src/test/run-pass/issues/issue-41936-variance-coerce-unsized-cycle.rs"}, {"sha": "2acefd718c93c7ba3698bfdd63a4af2516690413", "filename": "src/test/ui/issues/issue-42467.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-42467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-42467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42467.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n struct Foo<T>(T);\n ", "previous_filename": "src/test/run-pass/issues/issue-42467.rs"}, {"sha": "9dff9f662820650a87749ea12e5e0d9accf0de42", "filename": "src/test/ui/issues/issue-42956.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-42956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-42956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42956.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(stable_features)]\n #![feature(associated_consts)]", "previous_filename": "src/test/run-pass/issues/issue-42956.rs"}, {"sha": "ba363e9e29e291a6916d9a567e7871802cf9c399", "filename": "src/test/ui/issues/issue-43057.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43057.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused)]\n \n macro_rules! column {", "previous_filename": "src/test/run-pass/issues/issue-43057.rs"}, {"sha": "d42f0de4849d1c0e778494555c2d8948ec91e031", "filename": "src/test/ui/issues/issue-43357.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43357.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait Trait {\n     type Output;", "previous_filename": "src/test/run-pass/issues/issue-43357.rs"}, {"sha": "9622265ce2e0149b8bae4e18c13ffc36911f4c38", "filename": "src/test/ui/issues/issue-43483.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-43483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43483.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n trait VecN {", "previous_filename": "src/test/run-pass/issues/issue-43483.rs"}, {"sha": "c3599294e37e4174ebedcdf9a27ae0447b2bb37d", "filename": "src/test/ui/issues/issue-44005.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n pub trait Foo<'a> {\n     type Bar;\n     fn foo(&'a self) -> Self::Bar;", "previous_filename": "src/test/run-pass/issues/issue-44005.rs"}, {"sha": "b2f0e917749d5ca1a47ff80d1b3577a954e4ffa2", "filename": "src/test/ui/issues/issue-44056.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44056.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44056.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44056.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // only-x86_64\n // no-prefer-dynamic\n // compile-flags: -Ctarget-feature=+avx -Clto", "previous_filename": "src/test/run-pass/issues/issue-44056.rs"}, {"sha": "29c4b977d65d9cdf304bef44c67801b01e5fb452", "filename": "src/test/ui/issues/issue-44247.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44247.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44247.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44247.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n trait T {\n     type X;", "previous_filename": "src/test/run-pass/issues/issue-44247.rs"}, {"sha": "ccc99f0ecc48e06e62f9bbdb4178d746266b4126", "filename": "src/test/ui/issues/issue-44373-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // compile-flags: -Z borrowck=compare\n ", "previous_filename": "src/test/run-pass/issues/issue-44373.rs"}, {"sha": "f44f261041a37d7221a33780b8b9f760c2505e0f", "filename": "src/test/ui/issues/issue-44402.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44402.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]", "previous_filename": "src/test/run-pass/issues/issue-44402.rs"}, {"sha": "a1b2040450ad97eefc120c441205e40ca4c4f28e", "filename": "src/test/ui/issues/issue-4464.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4464.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4464.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4464.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-4464.rs"}, {"sha": "61b266e2b7e25f182b810e06a06319285283b7d3", "filename": "src/test/ui/issues/issue-44730.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44730.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n //! dox\n \n #![deny(missing_docs)]", "previous_filename": "src/test/run-pass/issues/issue-44730.rs"}, {"sha": "4a302be05e70a089daa12c98b1442f158cdcb5fe", "filename": "src/test/ui/issues/issue-44851.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44851.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-44851.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44851.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n macro_rules! a {\n     () => { \"a\" }\n }", "previous_filename": "src/test/run-pass/issues/issue-44851.rs"}, {"sha": "2b5b7ff18155ce956b9a09623b9f5824e8f0de4c", "filename": "src/test/ui/issues/issue-45425.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-45425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-45425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45425.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n use std::ops::Add;\n ", "previous_filename": "src/test/run-pass/issues/issue-45425.rs"}, {"sha": "0e585378fa7f4cdb41063628b8d80fe9e8b820fd", "filename": "src/test/ui/issues/issue-46959.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-46959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-46959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46959.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![deny(non_camel_case_types)]\n \n #[allow(dead_code)]", "previous_filename": "src/test/run-pass/issues/issue-46959.rs"}, {"sha": "61c5a1a56cedfb0c7640dec33d1dee3698f959d8", "filename": "src/test/ui/issues/issue-46964.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-46964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-46964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46964.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n mod my_mod {\n     #[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord, Hash)]\n     pub struct Name<'a> {", "previous_filename": "src/test/run-pass/issues/issue-46964.rs"}, {"sha": "7cef527acd7959381f93f354f82f8717c5f98688", "filename": "src/test/ui/issues/issue-47673.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47673.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(unused_imports)]\n \n use {{}, {}};", "previous_filename": "src/test/run-pass/issues/issue-47673.rs"}, {"sha": "446ca27a53e7c0b2654ed3eb2465778257dbb1a9", "filename": "src/test/ui/issues/issue-47703-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(nll)]\n ", "previous_filename": "src/test/run-pass/issues/issue-47703-1.rs"}, {"sha": "c2b4673a09fb52cd2e549fc02185dbf348c3bf7a", "filename": "src/test/ui/issues/issue-47703-tuple.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(nll)]\n ", "previous_filename": "src/test/run-pass/issues/issue-47703-tuple.rs"}, {"sha": "084eab05d68e241d6534df4741441565f34c509d", "filename": "src/test/ui/issues/issue-47703.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![feature(nll)]\n ", "previous_filename": "src/test/run-pass/issues/issue-47703.rs"}, {"sha": "39fbe33d823f442174e3bab58f51512e5f96bf50", "filename": "src/test/ui/issues/issue-47722.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n // Tests that automatic coercions from &mut T to *mut T", "previous_filename": "src/test/run-pass/issues/issue-47722.rs"}, {"sha": "57957aed3db7e8259cc7db271ac4c35bd2a9c006", "filename": "src/test/ui/issues/issue-47789.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-47789.rs"}, {"sha": "274305dfa78edc657e50d8e5c4a109af640ad20e", "filename": "src/test/ui/issues/issue-4830.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-4830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4830.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/issues/issue-4830.rs"}, {"sha": "2da1059d74a1de2bf2854093c9619c9f77dd4b43", "filename": "src/test/ui/issues/issue-48551.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-48551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-48551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48551.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // Regression test for #48551. Covers a case where duplicate candidates\n // arose during associated type projection.\n ", "previous_filename": "src/test/run-pass/issues/issue-48551.rs"}, {"sha": "d8c69fd3d55b7c25b77cdc6989077ba18f53ebfe", "filename": "src/test/ui/issues/issue-51655.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-51655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-51655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51655.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n \n const PATH_DOT: &[u8] = &[b'.'];", "previous_filename": "src/test/run-pass/issues/issue-51655.rs"}, {"sha": "0c5de871f098c39d9538874501a41563bdd3f1a5", "filename": "src/test/ui/issues/issue-5353.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5353.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-5353.rs"}, {"sha": "90465668d8100b37af8d424a8b23837875ca81e0", "filename": "src/test/ui/issues/issue-5572.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5572.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-5572.rs"}, {"sha": "d60edcad0db66210bdd40c39a463e1affc578b74", "filename": "src/test/ui/issues/issue-5754.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5754.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5754.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5754.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(improper_ctypes)]\n ", "previous_filename": "src/test/run-pass/issues/issue-5754.rs"}, {"sha": "d0c898e3f36b8d8190d71b5cb66b55a15d5cc499", "filename": "src/test/ui/issues/issue-5884.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5884.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-5884.rs"}, {"sha": "4dc5a6123883227fa27a1655f1db0c8bad927cf4", "filename": "src/test/ui/issues/issue-5900.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5900.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-5900.rs"}, {"sha": "6cdd36efaa719f61d43fb91e4f0a2bc213e86543", "filename": "src/test/ui/issues/issue-5950.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-5950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5950.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n \n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-5950.rs"}, {"sha": "758e33536bd3e246a4640787aa8e0941a686985c", "filename": "src/test/ui/issues/issue-6341.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6341.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n #[derive(PartialEq)]", "previous_filename": "src/test/run-pass/issues/issue-6341.rs"}, {"sha": "00eb3b6348d358377cecd1d2dde2b1095bf20846", "filename": "src/test/ui/issues/issue-6470.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(improper_ctypes)]\n ", "previous_filename": "src/test/run-pass/issues/issue-6470.rs"}, {"sha": "ddec8b3f93456f2ed86226f1704bfcdc98ab98e7", "filename": "src/test/ui/issues/issue-6557.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6557.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-6557.rs"}, {"sha": "20174f241a409cdd4215f950b97c201fed84d87c", "filename": "src/test/ui/issues/issue-6898.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6898.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n // pretty-expanded FIXME #23616\n \n use std::mem;", "previous_filename": "src/test/run-pass/issues/issue-6898.rs"}, {"sha": "1de1f8b1a865e01a5b44b59fe1b32d078fe72bcf", "filename": "src/test/ui/issues/issue-6991.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-6991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6991.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n ", "previous_filename": "src/test/run-pass/issues/issue-6991.rs"}, {"sha": "b4d0255fa10bfee70bbd35fb9770820fcbc86733", "filename": "src/test/ui/issues/issue-7268.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7268.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-7268.rs"}, {"sha": "9c05717c1d712aa383c1cee42c2f0c08c7e9916c", "filename": "src/test/ui/issues/issue-7607-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7607-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7607-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-2.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-7607-2.rs"}, {"sha": "d3af62e8836c6e6fe378b4fcf30fb865c6842852", "filename": "src/test/ui/issues/issue-7673-cast-generically-implemented-trait.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-7673-cast-generically-implemented-trait.rs"}, {"sha": "27859e1a2aefdac12c8ce6dc329bedda3043bc67", "filename": "src/test/ui/issues/issue-8171-default-method-self-inherit-builtin-trait.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-8171-default-method-self-inherit-builtin-trait.rs"}, {"sha": "36c24be5fce311bb11b97b5263f7ee0b41084bbc", "filename": "src/test/ui/issues/issue-8398.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-8398.rs"}, {"sha": "724ac962f3b334ac829d1e3446c5afd021b95995", "filename": "src/test/ui/issues/issue-8521.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8521.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n trait Foo1 {}\n \n trait A {}", "previous_filename": "src/test/run-pass/issues/issue-8521.rs"}, {"sha": "0c5cbf24700afbc02156ea8dee16bdf8ddd99816", "filename": "src/test/ui/issues/issue-8578.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-8578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8578.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]", "previous_filename": "src/test/run-pass/issues/issue-8578.rs"}, {"sha": "86314659fcbe9fc298b699a66952d32d1b370ab7", "filename": "src/test/ui/issues/issue-9110.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9110.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n #![allow(non_snake_case)]", "previous_filename": "src/test/run-pass/issues/issue-9110.rs"}, {"sha": "3f5721a3df7a00c2c6346e9948d388a00ed10b3f", "filename": "src/test/ui/issues/issue-9243.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9243.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // Regression test for issue 9243\n #![allow(non_upper_case_globals)]", "previous_filename": "src/test/run-pass/issues/issue-9243.rs"}, {"sha": "3013fde84dcc001e8d0cbae1bcb98237de3a3c88", "filename": "src/test/ui/issues/issue-9249.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9249.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-9249.rs"}, {"sha": "c3845dd61066c6cd9b6f847d2e9a6a8889e4ef46", "filename": "src/test/ui/issues/issue-9719.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n+// compile-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/issues/issue-9719.rs"}, {"sha": "611fa83854b9be2cd06d245a498652f382212b42", "filename": "src/test/ui/rust-2018/auxiliary/trait-import-suggestions.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Baz {\n+    fn baz(&self) { }\n+}\n+\n+impl Baz for u32 { }"}, {"sha": "d603d8212ed377343c64c67a8468473e015678d8", "filename": "src/test/ui/rust-2018/trait-import-suggestions.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+// aux-build:trait-import-suggestions.rs\n+// compile-flags:--extern trait-import-suggestions\n+\n+mod foo {\n+    mod foobar {\n+        pub(crate) trait Foobar {\n+            fn foobar(&self) { }\n+        }\n+\n+        impl Foobar for u32 { }\n+    }\n+\n+    pub(crate) trait Bar {\n+        fn bar(&self) { }\n+    }\n+\n+    impl Bar for u32 { }\n+\n+    fn in_foo() {\n+        let x: u32 = 22;\n+        x.foobar();\n+    }\n+}\n+\n+fn main() {\n+    let x: u32 = 22;\n+    x.bar();\n+    x.baz();\n+    let y = u32::from_str(\"33\");\n+}"}, {"sha": "59fe7b958e3458e428930faefb8757bb1315295c", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -0,0 +1,43 @@\n+error[E0599]: no method named `foobar` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:32:11\n+   |\n+LL |         x.foobar();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use crate::foo::foobar::Foobar;`\n+\n+error[E0599]: no method named `bar` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:38:7\n+   |\n+LL |     x.bar();\n+   |       ^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+LL | use crate::foo::Bar;\n+   |\n+\n+error[E0599]: no method named `baz` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:39:7\n+   |\n+LL |     x.baz();\n+   |       ^^^\n+\n+error[E0599]: no function or associated item named `from_str` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:40:13\n+   |\n+LL |     let y = u32::from_str(\"33\");\n+   |             ^^^^^^^^^^^^^ function or associated item not found in `u32`\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+LL | use std::str::FromStr;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "98361c879ff6866e7a52d446da2bd9bca5106aca", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf11765dc98536c6eedf33f2df7f72f6e161263/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -6,7 +6,7 @@ LL | #[foo] //~ ERROR is currently unknown to the compiler\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: non-builtin inner attributes are unstable (see issue #38356)\n+error[E0658]: non-builtin inner attributes are unstable (see issue #54726)\n   --> $DIR/issue-36530.rs:15:5\n    |\n LL |     #![foo] //~ ERROR is currently unknown to the compiler"}, {"sha": "ad6e5c0037d88602a1c95051e42b392ed5ffcbe8", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=4cf11765dc98536c6eedf33f2df7f72f6e161263", "patch": "@@ -1 +1 @@\n-Subproject commit de314a8b2d45bce4958fc23939c5e4286e31621c\n+Subproject commit ad6e5c0037d88602a1c95051e42b392ed5ffcbe8"}]}