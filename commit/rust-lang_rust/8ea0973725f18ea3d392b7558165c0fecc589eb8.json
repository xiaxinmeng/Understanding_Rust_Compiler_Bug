{"sha": "8ea0973725f18ea3d392b7558165c0fecc589eb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTA5NzM3MjVmMThlYTNkMzkyYjc1NTgxNjVjMGZlY2M1ODllYjg=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-12T13:04:09Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-12T13:04:09Z"}, "message": "Short circuit full corherence check when dealing with types with different reference mutability", "tree": {"sha": "0c66430749921ae0328b3ab57a53025d88cffb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c66430749921ae0328b3ab57a53025d88cffb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea0973725f18ea3d392b7558165c0fecc589eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea0973725f18ea3d392b7558165c0fecc589eb8", "html_url": "https://github.com/rust-lang/rust/commit/8ea0973725f18ea3d392b7558165c0fecc589eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea0973725f18ea3d392b7558165c0fecc589eb8/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfc52fbd638ee3b7b1debad0aef84e730543e8a", "html_url": "https://github.com/rust-lang/rust/commit/cdfc52fbd638ee3b7b1debad0aef84e730543e8a"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "6b67d509da00d2a888d91f6d9ae00b693fd74fab", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ea0973725f18ea3d392b7558165c0fecc589eb8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea0973725f18ea3d392b7558165c0fecc589eb8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=8ea0973725f18ea3d392b7558165c0fecc589eb8", "patch": "@@ -1837,6 +1837,15 @@ impl<'tcx> TyS<'tcx> {\n         )\n     }\n \n+    /// Get the mutability of the reference or `None` when not a reference\n+    #[inline]\n+    pub fn ref_mutability(&self) -> Option<hir::Mutability> {\n+        match self.kind() {\n+            Ref(_, _, mutability) => Some(*mutability),\n+            _ => None,\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_unsafe_ptr(&self) -> bool {\n         matches!(self.kind(), RawPtr(_))"}, {"sha": "afe86b2a23180c2833d3d69b32b0a325a6dfa707", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ea0973725f18ea3d392b7558165c0fecc589eb8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea0973725f18ea3d392b7558165c0fecc589eb8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=8ea0973725f18ea3d392b7558165c0fecc589eb8", "patch": "@@ -75,18 +75,19 @@ where\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n \n-    // Check if any of the input types definitely mismatch.\n+    // Check if any of the input types definitely do not unify.\n     if impl1_ref\n         .iter()\n         .flat_map(|tref| tref.substs.types())\n         .zip(impl2_ref.iter().flat_map(|tref| tref.substs.types()))\n         .chain(iter::once((impl1_self, impl2_self)))\n         .any(|(ty1, ty2)| {\n-            let ty1 = fast_reject::simplify_type(tcx, ty1, false);\n-            let ty2 = fast_reject::simplify_type(tcx, ty2, false);\n-            if let (Some(ty1), Some(ty2)) = (ty1, ty2) {\n+            let t1 = fast_reject::simplify_type(tcx, ty1, false);\n+            let t2 = fast_reject::simplify_type(tcx, ty2, false);\n+            if let (Some(t1), Some(t2)) = (t1, t2) {\n                 // Simplified successfully\n-                ty1 != ty2\n+                // Types cannot unify if they differ in their reference mutability or simplify to different types\n+                ty1.ref_mutability() != ty2.ref_mutability() || t1 != t2\n             } else {\n                 // Types might unify\n                 false"}]}