{"sha": "d1a57e479c13804e1cda5658f482e840c3a1cd79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTU3ZTQ3OWMxMzgwNGUxY2RhNTY1OGY0ODJlODQwYzNhMWNkNzk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-30T21:59:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-10-02T13:36:01Z"}, "message": "syntax: ast: remove TyBox and UnBox.", "tree": {"sha": "e23dd7e5885a6b5dc2426228bddb5511c6d31f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23dd7e5885a6b5dc2426228bddb5511c6d31f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a57e479c13804e1cda5658f482e840c3a1cd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a57e479c13804e1cda5658f482e840c3a1cd79", "html_url": "https://github.com/rust-lang/rust/commit/d1a57e479c13804e1cda5658f482e840c3a1cd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a57e479c13804e1cda5658f482e840c3a1cd79/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99e626d07b62cfea5711f018b1497f8bdc04e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99e626d07b62cfea5711f018b1497f8bdc04e90", "html_url": "https://github.com/rust-lang/rust/commit/a99e626d07b62cfea5711f018b1497f8bdc04e90"}], "stats": {"total": 73, "additions": 10, "deletions": 63}, "files": [{"sha": "5774a0485cb4497815421cb6edc671a71dcd62ad", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -1289,7 +1289,7 @@ impl LintPass for UnnecessaryAllocation {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprUnary(ast::UnUniq, _) | ast::ExprUnary(ast::UnBox, _) => (),\n+            ast::ExprUnary(ast::UnUniq, _) => (),\n             _ => return\n         }\n "}, {"sha": "ba721acb23198d15bc4dad78e2bf39de7ddafbb8", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -100,7 +100,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr) {\n     if v.in_const {\n         match e.node {\n           ExprUnary(UnDeref, _) => { }\n-          ExprUnary(UnBox, _) | ExprUnary(UnUniq, _) => {\n+          ExprUnary(UnUniq, _) => {\n             span_err!(v.tcx.sess, e.span, E0010, \"cannot do allocations in constant expressions\");\n             return;\n           }"}, {"sha": "64e4d7ff28425120113ca3e6db41b9be63187ac3", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -115,10 +115,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckStaticVisitor<'a, 'tcx> {\n                 span_err!(self.tcx.sess, e.span, E0020,\n                     \"static items are not allowed to have mutable slices\");\n             },\n-            ast::ExprUnary(ast::UnBox, _) => {\n-                span_err!(self.tcx.sess, e.span, E0021,\n-                    \"static items are not allowed to have managed pointers\");\n-            }\n             ast::ExprBox(..) |\n             ast::ExprUnary(ast::UnUniq, _) => {\n                 span_err!(self.tcx.sess, e.span, E0022,"}, {"sha": "196efd7d2cce8c9c9ad81588471c588d176db66b", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -421,7 +421,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n             let ty = ty::expr_ty(cx.tcx(), &**e);\n             let is_float = ty::type_is_fp(ty);\n             return (match u {\n-              ast::UnBox | ast::UnUniq | ast::UnDeref => {\n+              ast::UnUniq | ast::UnDeref => {\n                 let (dv, _dt) = const_deref(cx, te, ty, true);\n                 dv\n               }"}, {"sha": "0b47544c5622ccf6a161bf1f3ad482c54b7217bb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -1533,9 +1533,6 @@ fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             };\n             immediate_rvalue_bcx(bcx, llneg, un_ty).to_expr_datumblock()\n         }\n-        ast::UnBox => {\n-            trans_managed_expr(bcx, un_ty, sub_expr, expr_ty(bcx, sub_expr))\n-        }\n         ast::UnUniq => {\n             trans_uniq_expr(bcx, un_ty, sub_expr, expr_ty(bcx, sub_expr))\n         }"}, {"sha": "72c3c1715e0d77dc45939c6457698c4fdde4c691", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -856,10 +856,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n         match ast_ty.node {\n             ast::TyNil => ty::mk_nil(),\n             ast::TyBot => ty::mk_bot(),\n-            ast::TyBox(ref ty) => {\n-                mk_pointer(this, rscope, ast::MutImmutable, &**ty, Box,\n-                           |ty| ty::mk_box(tcx, ty))\n-            }\n             ast::TyUniq(ref ty) => {\n                 mk_pointer(this, rscope, ast::MutImmutable, &**ty, Uniq,\n                            |ty| ty::mk_uniq(tcx, ty))"}, {"sha": "d8b5185a47a2c617b4a129e5cc530d2d4b4279b3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -3881,8 +3881,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       ast::ExprUnary(unop, ref oprnd) => {\n         let expected_inner = expected.map(fcx, |sty| {\n             match unop {\n-                ast::UnBox | ast::UnUniq => match *sty {\n-                    ty::ty_box(ty) | ty::ty_uniq(ty) => {\n+                ast::UnUniq => match *sty {\n+                    ty::ty_uniq(ty) => {\n                         ExpectHasType(ty)\n                     }\n                     _ => {\n@@ -3907,11 +3907,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         if !ty::type_is_error(oprnd_t) {\n             match unop {\n-                ast::UnBox => {\n-                    if !ty::type_is_bot(oprnd_t) {\n-                        oprnd_t = ty::mk_box(tcx, oprnd_t)\n-                    }\n-                }\n                 ast::UnUniq => {\n                     if !ty::type_is_bot(oprnd_t) {\n                         oprnd_t = ty::mk_uniq(tcx, oprnd_t);"}, {"sha": "53edcb303f74ecb820430d09ddd1da550e1df8ec", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -663,14 +663,6 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprUnary(ast::UnBox, ref base) => {\n-            // Managed data must not have borrowed pointers within it:\n-            let base_ty = rcx.resolve_node_type(base.id);\n-            type_must_outlive(rcx, infer::Managed(expr.span),\n-                              base_ty, ty::ReStatic);\n-            visit::walk_expr(rcx, expr);\n-        }\n-\n         ast::ExprUnary(ast::UnDeref, ref base) => {\n             // For *a, the lifetime of a must enclose the deref\n             let method_call = MethodCall::expr(expr.id);"}, {"sha": "0149220fde4e377fada5f87fd9c50465a8b4f75b", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -1285,7 +1285,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 ast::TyPtr(ref mut_ty) => {\n                     ty_queue.push(&*mut_ty.ty);\n                 }\n-                ast::TyBox(ref ty) |\n                 ast::TyVec(ref ty) |\n                 ast::TyUniq(ref ty) |\n                 ast::TyFixedLengthVec(ref ty, _) => {\n@@ -1323,7 +1322,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             ty: build_to(mut_ty.ty, to),\n                         })\n                     }\n-                    ast::TyBox(ty) => ast::TyBox(build_to(ty, to)),\n                     ast::TyVec(ty) => ast::TyVec(build_to(ty, to)),\n                     ast::TyUniq(ty) => ast::TyUniq(build_to(ty, to)),\n                     ast::TyFixedLengthVec(ty, e) => {"}, {"sha": "cb5c633bd25f2d7036a834ec7661f92e89b03e55", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -1215,7 +1215,6 @@ impl Clean<Type> for ast::Ty {\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)},\n-            TyBox(ref ty) => Managed(box ty.clean(cx)),\n             TyUniq(ref ty) => Unique(box ty.clean(cx)),\n             TyVec(ref ty) => Vector(box ty.clean(cx)),\n             TyFixedLengthVec(ref ty, ref e) => FixedVector(box ty.clean(cx),"}, {"sha": "0a87c0a344e5269ca9910eee33e8a5984bdc77fc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -416,7 +416,6 @@ pub enum BinOp {\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnOp {\n-    UnBox,\n     UnUniq,\n     UnDeref,\n     UnNot,\n@@ -953,7 +952,6 @@ pub struct UnboxedFnTy {\n pub enum Ty_ {\n     TyNil,\n     TyBot, /* bottom type */\n-    TyBox(P<Ty>),\n     TyUniq(P<Ty>),\n     TyVec(P<Ty>),\n     TyFixedLengthVec(P<Ty>, P<Expr>),"}, {"sha": "3186006258041dd58fbe77372eb0999a62b8e400", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -90,7 +90,6 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n \n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n-      UnBox => \"box(GC) \",\n       UnUniq => \"box() \",\n       UnDeref => \"*\",\n       UnNot => \"!\","}, {"sha": "1fdb6dd505f4537daf1f6225827371197111520e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -112,7 +112,6 @@ pub trait AstBuilder {\n     fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr>;\n \n-    fn expr_managed(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_field_access(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;\n@@ -565,10 +564,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprUnary(op, e))\n     }\n \n-    fn expr_managed(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr_unary(sp, ast::UnBox, e)\n-    }\n-\n     fn expr_field_access(&self, sp: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n         let field_name = token::get_ident(ident);\n         let field_span = Span {"}, {"sha": "8565bebe269edba1eb26e3946272071af9fff479", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -136,14 +136,6 @@ impl<'a> Context<'a> {\n         }\n     }\n \n-    fn gate_box(&self, span: Span) {\n-        self.gate_feature(\"managed_boxes\", span,\n-                          \"The managed box syntax is being replaced by the \\\n-                           `std::gc::Gc` and `std::rc::Rc` types. Equivalent \\\n-                           functionality to managed trait objects will be \\\n-                           implemented but is currently missing.\");\n-    }\n-\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|n| n.as_slice() == feature)\n     }\n@@ -331,7 +323,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                                    experimental and likely to be removed\");\n \n             },\n-            ast::TyBox(_) => { self.gate_box(t.span); }\n             ast::TyUnboxedFn(..) => {\n                 self.gate_feature(\"unboxed_closure_sugar\",\n                                   t.span,\n@@ -345,9 +336,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprUnary(ast::UnBox, _) => {\n-                self.gate_box(e.span);\n-            }\n             ast::ExprUnboxedFn(..) => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   e.span,"}, {"sha": "84de6c3b91339c7930aae7814b78fb90301a0dae", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -372,7 +372,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n         id: fld.new_id(id),\n         node: match node {\n             TyNil | TyBot | TyInfer => node,\n-            TyBox(ty) => TyBox(fld.fold_ty(ty)),\n             TyUniq(ty) => TyUniq(fld.fold_ty(ty)),\n             TyVec(ty) => TyVec(fld.fold_ty(ty)),\n             TyPtr(mt) => TyPtr(fld.fold_mt(mt)),"}, {"sha": "8082fd65f1aff926ad57bfd24831f7631dcfecde", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -16,8 +16,7 @@ use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{ProvidedMethod, Public, FnStyle};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n-use ast::{BlockCheckMode, UnBox};\n-use ast::{CaptureByRef, CaptureByValue, CaptureClause};\n+use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Crate, CrateConfig, Decl, DeclItem};\n use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n@@ -50,7 +49,7 @@ use ast::{StructVariantKind, BiSub};\n use ast::StrStyle;\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{TokenTree, TraitItem, TraitRef, TTDelim, TTSeq, TTTok};\n-use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot, TyBox};\n+use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot};\n use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyParen, TyPath, TyPtr, TyQPath};\n@@ -1455,7 +1454,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let span = self.last_span;\n             self.obsolete(span, ObsoleteManagedType);\n-            TyBox(self.parse_ty(plus_allowed))\n+            TyUniq(self.parse_ty(plus_allowed))\n         } else if self.token == token::TILDE {\n             // OWNED POINTER\n             self.bump();\n@@ -2729,7 +2728,7 @@ impl<'a> Parser<'a> {\n             self.obsolete(span, ObsoleteManagedExpr);\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n-            ex = self.mk_unary(UnBox, e);\n+            ex = self.mk_unary(UnUniq, e);\n           }\n           token::TILDE => {\n             self.bump();"}, {"sha": "8400d9aea3b5958654537f6760c038f70e1f6e73", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -546,10 +546,6 @@ impl<'a> State<'a> {\n         match ty.node {\n             ast::TyNil => try!(word(&mut self.s, \"()\")),\n             ast::TyBot => try!(word(&mut self.s, \"!\")),\n-            ast::TyBox(ref ty) => {\n-                try!(word(&mut self.s, \"@\"));\n-                try!(self.print_type(&**ty));\n-            }\n             ast::TyUniq(ref ty) => {\n                 try!(word(&mut self.s, \"~\"));\n                 try!(self.print_type(&**ty));"}, {"sha": "249f87d3102dd545f20402fc9740c0ea09765d71", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a57e479c13804e1cda5658f482e840c3a1cd79/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d1a57e479c13804e1cda5658f482e840c3a1cd79", "patch": "@@ -326,7 +326,7 @@ pub fn skip_ty<'v, V: Visitor<'v>>(_: &mut V, _: &'v Ty) {\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n-        TyUniq(ref ty) | TyVec(ref ty) | TyBox(ref ty) | TyParen(ref ty) => {\n+        TyUniq(ref ty) | TyVec(ref ty) | TyParen(ref ty) => {\n             visitor.visit_ty(&**ty)\n         }\n         TyPtr(ref mutable_type) => {"}]}