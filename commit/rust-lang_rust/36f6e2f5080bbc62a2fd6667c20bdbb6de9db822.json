{"sha": "36f6e2f5080bbc62a2fd6667c20bdbb6de9db822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjZlMmY1MDgwYmJjNjJhMmZkNjY2N2MyMGJkYmI2ZGU5ZGI4MjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T11:28:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T11:28:54Z"}, "message": "Use FileIndex for DW_AT_decl_file and omit .debug_ranges and .debug_rnglists when empty", "tree": {"sha": "9205a8aee9d1685025e3d083835f810dda0c90fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9205a8aee9d1685025e3d083835f810dda0c90fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822", "html_url": "https://github.com/rust-lang/rust/commit/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "html_url": "https://github.com/rust-lang/rust/commit/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc"}], "stats": {"total": 130, "additions": 74, "deletions": 56}, "files": [{"sha": "005a39a3884749eae888c36c953cb2c7495383d2", "filename": "src/debuginfo.rs", "status": "modified", "additions": 74, "deletions": 56, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f6e2f5080bbc62a2fd6667c20bdbb6de9db822/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=36f6e2f5080bbc62a2fd6667c20bdbb6de9db822", "patch": "@@ -2,13 +2,14 @@ extern crate gimli;\n \n use crate::prelude::*;\n \n+use std::path::Path;\n use std::marker::PhantomData;\n \n use gimli::write::{\n     Address, AttributeValue, CompilationUnit, DebugAbbrev, DebugInfo, DebugLine, DebugRanges,\n     DebugRngLists, DebugStr, EndianVec, LineProgram, LineProgramId, LineProgramTable, Range,\n     RangeList, RangeListTable, Result, SectionId, StringTable, UnitEntryId, UnitId, UnitTable,\n-    Writer,\n+    Writer, FileId,\n };\n use gimli::{Endianity, Format, RunTimeEndian};\n \n@@ -23,6 +24,17 @@ fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     }\n }\n \n+fn line_program_add_file<P: AsRef<Path>>(line_program: &mut LineProgram, file: P) -> FileId {\n+    let file = file.as_ref();\n+    let dir_id =\n+        line_program.add_directory(file.parent().unwrap().to_str().unwrap().as_bytes());\n+    line_program.add_file(\n+        file.file_name().unwrap().to_str().unwrap().as_bytes(),\n+        dir_id,\n+        None,\n+    )\n+}\n+\n struct DebugReloc {\n     offset: u32,\n     size: u8,\n@@ -53,7 +65,7 @@ pub struct DebugContext<'tcx> {\n impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n     pub fn new(tcx: TyCtxt, address_size: u8) -> Self {\n         // TODO: this should be configurable\n-        let version = 4;\n+        let version = 3; // macOS doesn't seem to support DWARF > 3\n         let format = Format::Dwarf32;\n \n         // FIXME: how to get version when building out of tree?\n@@ -71,7 +83,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         let range_lists = RangeListTable::default();\n \n         let global_line_program = line_programs.add(LineProgram::new(\n-            3, // FIXME https://github.com/gimli-rs/gimli/issues/363\n+            version,\n             address_size,\n             format,\n             1,\n@@ -135,11 +147,13 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n     fn emit_location(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, entry_id: UnitEntryId, span: Span) {\n         let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n+        let line_program = self.line_programs.get_mut(self.global_line_program);\n+        let file_id = line_program_add_file(line_program, loc.file.name.to_string());\n+\n         let unit = self.units.get_mut(self.unit_id);\n         let entry = unit.get_mut(entry_id);\n \n-        let file_id = self.strings.add(loc.file.name.to_string());\n-        entry.set(gimli::DW_AT_decl_file, AttributeValue::StringRef(file_id));\n+        entry.set(gimli::DW_AT_decl_file, AttributeValue::FileIndex(file_id));\n         entry.set(\n             gimli::DW_AT_decl_line,\n             AttributeValue::Udata(loc.line as u64),\n@@ -218,20 +232,28 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n                 debug_line.0.writer.into_vec(),\n             )\n             .unwrap();\n-        artifact\n-            .declare_with(\n-                SectionId::DebugRanges.name(),\n-                Decl::DebugSection,\n-                debug_ranges.0.writer.into_vec(),\n-            )\n-            .unwrap();\n-        artifact\n-            .declare_with(\n-                SectionId::DebugRngLists.name(),\n-                Decl::DebugSection,\n-                debug_rnglists.0.writer.into_vec(),\n-            )\n-            .unwrap();\n+\n+        let debug_ranges_not_empty = !debug_ranges.0.writer.slice().is_empty();\n+        if debug_ranges_not_empty {\n+            artifact\n+                .declare_with(\n+                    SectionId::DebugRanges.name(),\n+                    Decl::DebugSection,\n+                    debug_ranges.0.writer.into_vec(),\n+                )\n+                .unwrap();\n+        }\n+\n+        let debug_rnglists_not_empty = !debug_rnglists.0.writer.slice().is_empty();\n+        if debug_rnglists_not_empty {\n+            artifact\n+                .declare_with(\n+                    SectionId::DebugRngLists.name(),\n+                    Decl::DebugSection,\n+                    debug_rnglists.0.writer.into_vec(),\n+                )\n+                .unwrap();\n+        }\n \n         for reloc in debug_abbrev.0.relocs {\n             artifact\n@@ -297,36 +319,40 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n                 .expect(\"faerie relocation error\");\n         }\n \n-        for reloc in debug_ranges.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugRanges.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n+        if debug_ranges_not_empty {\n+            for reloc in debug_ranges.0.relocs {\n+                artifact\n+                    .link_with(\n+                        faerie::Link {\n+                            from: SectionId::DebugRanges.name(),\n+                            to: &reloc.name,\n+                            at: u64::from(reloc.offset),\n+                        },\n+                        faerie::Reloc::Debug {\n+                            size: reloc.size,\n+                            addend: reloc.addend as i32,\n+                        },\n+                    )\n+                    .expect(\"faerie relocation error\");\n+            }\n         }\n \n-        for reloc in debug_rnglists.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugRngLists.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n+        if debug_rnglists_not_empty {\n+            for reloc in debug_rnglists.0.relocs {\n+                artifact\n+                    .link_with(\n+                        faerie::Link {\n+                            from: SectionId::DebugRngLists.name(),\n+                            to: &reloc.name,\n+                            at: u64::from(reloc.offset),\n+                        },\n+                        faerie::Reloc::Debug {\n+                            size: reloc.size,\n+                            addend: reloc.addend as i32,\n+                        },\n+                    )\n+                    .expect(\"faerie relocation error\");\n+            }\n         }\n     }\n \n@@ -423,15 +449,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n \n         let create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n             let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n-            let file = loc.file.name.to_string();\n-            let file = ::std::path::Path::new(&file);\n-            let dir_id =\n-                line_program.add_directory(file.parent().unwrap().to_str().unwrap().as_bytes());\n-            let file_id = line_program.add_file(\n-                file.file_name().unwrap().to_str().unwrap().as_bytes(),\n-                dir_id,\n-                None,\n-            );\n+            let file_id = line_program_add_file(line_program, loc.file.name.to_string());\n \n             /*println!(\n                 \"srcloc {:>04X} {}:{}:{}\","}]}