{"sha": "a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MjhlNzk0ODA2OWYzMTBkYzViMzNiZThlZGI2NWU1ZThlMGNmOWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T19:47:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T21:46:35Z"}, "message": "std: Tweak the std::env OsString/String interface\n\nThis commit tweaks the interface of the `std::env` module to make it more\nergonomic for common usage:\n\n* `env::var` was renamed to `env::var_os`\n* `env::var_string` was renamed to `env::var`\n* `env::args` was renamed to `env::args_os`\n* `env::args` was re-added as a panicking iterator over string values\n* `env::vars` was renamed to `env::vars_os`\n* `env::vars` was re-added as a panicking iterator over string values.\n\nThis should make common usage (e.g. unicode values everywhere) more ergonomic\nas well as \"the default\". This is also a breaking change due to the differences\nof what's yielded from each of these functions, but migration should be fairly\neasy as the defaults operate over `String` which is a common type to use.\n\n[breaking-change]", "tree": {"sha": "9806752d95d3ddeb06276eae62fe7b97fe0b1e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9806752d95d3ddeb06276eae62fe7b97fe0b1e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "html_url": "https://github.com/rust-lang/rust/commit/a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446bc899b28e988f4252beca0d1858e7f7d866b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/446bc899b28e988f4252beca0d1858e7f7d866b1", "html_url": "https://github.com/rust-lang/rust/commit/446bc899b28e988f4252beca0d1858e7f7d866b1"}], "stats": {"total": 242, "additions": 162, "deletions": 80}, "files": [{"sha": "385f1b9e791545944c14914c5675c38bdf0de3da", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -14,7 +14,6 @@\n #![feature(collections)]\n #![feature(int_uint)]\n #![feature(io)]\n-#![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n #![feature(slicing_syntax, unboxed_closures)]\n@@ -48,8 +47,7 @@ pub mod common;\n pub mod errors;\n \n pub fn main() {\n-    let args = env::args().map(|s| s.into_string().unwrap()).collect();;\n-    let config = parse_config(args);\n+    let config = parse_config(env::args().collect());\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");"}, {"sha": "c046a89cba55ff52c6681c1861c59f4f36fc9f44", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -40,7 +40,7 @@ pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n     // maintain the current value while adding our own\n-    match env::var_string(lib_path_env_var()) {\n+    match env::var(lib_path_env_var()) {\n       Ok(curr) => {\n         format!(\"{}{}{}\", path, path_div(), curr)\n       }"}, {"sha": "1fedf49738cdf1df2f066a3d316d3ca81b4176e7", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -397,7 +397,7 @@ fn enabled(level: u32,\n /// This is not threadsafe at all, so initialization is performed through a\n /// `Once` primitive (and this function is called from that primitive).\n fn init() {\n-    let (mut directives, filter) = match env::var_string(\"RUST_LOG\") {\n+    let (mut directives, filter) = match env::var(\"RUST_LOG\") {\n         Ok(spec) => directive::parse_logging_spec(&spec[]),\n         Err(..) => (Vec::new(), None),\n     };"}, {"sha": "3caa0f5b4db4c97a13722cabc0a5ba1b6d280c3a", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -207,7 +207,7 @@ static PATH_ENTRY_SEPARATOR: &'static str = \":\";\n \n /// Returns RUST_PATH as a string, without default paths added\n pub fn get_rust_path() -> Option<String> {\n-    env::var_string(\"RUST_PATH\").ok()\n+    env::var(\"RUST_PATH\").ok()\n }\n \n /// Returns the value of RUST_PATH, as a list"}, {"sha": "67875ae225224e030918f037980a9a72cac7e56a", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -61,13 +61,13 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n     }\n \n     let requested_node : Option<ast::NodeId> =\n-        env::var_string(\"RUST_REGION_GRAPH_NODE\").ok().and_then(|s| s.parse().ok());\n+        env::var(\"RUST_REGION_GRAPH_NODE\").ok().and_then(|s| s.parse().ok());\n \n     if requested_node.is_some() && requested_node != Some(subject_node) {\n         return;\n     }\n \n-    let requested_output = env::var_string(\"RUST_REGION_GRAPH\").ok();\n+    let requested_output = env::var(\"RUST_REGION_GRAPH\").ok();\n     debug!(\"requested_output: {:?} requested_node: {:?}\",\n            requested_output, requested_node);\n "}, {"sha": "8340a49b92ae35ef419f4619c27cc5001d9e9b27", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -1052,7 +1052,7 @@ pub fn get_unstable_features_setting() -> UnstableFeatures {\n     // subverting the unstable features lints\n     let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n     // The matching key to the above, only known by the build system\n-    let bootstrap_provided_key = env::var_string(\"RUSTC_BOOTSTRAP_KEY\").ok();\n+    let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n     match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n         (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n         (true, _, _) => UnstableFeatures::Disallow,"}, {"sha": "4d90c492fa2406f24bffcabb5d89f57909a5a48f", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -384,7 +384,7 @@ impl Target {\n             Path::new(target)\n         };\n \n-        let target_path = env::var(\"RUST_TARGET_PATH\")\n+        let target_path = env::var_os(\"RUST_TARGET_PATH\")\n                               .unwrap_or(OsString::from_str(\"\"));\n \n         // FIXME 16351: add a sane default search path?"}, {"sha": "12f5041cad14f996bbc2a0c65e0971dc6b09ebc4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -464,7 +464,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             // compiler, not for the target.\n             let mut _old_path = OsString::from_str(\"\");\n             if cfg!(windows) {\n-                _old_path = env::var(\"PATH\").unwrap_or(_old_path);\n+                _old_path = env::var_os(\"PATH\").unwrap_or(_old_path);\n                 let mut new_path = sess.host_filesearch(PathKind::All).get_dylib_search_paths();\n                 new_path.extend(env::split_paths(&_old_path));\n                 env::set_var(\"PATH\", &env::join_paths(new_path.iter()).unwrap());\n@@ -737,7 +737,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n-    let old_path = env::var(\"PATH\").unwrap_or(OsString::from_str(\"\"));\n+    let old_path = env::var_os(\"PATH\").unwrap_or(OsString::from_str(\"\"));\n     let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths();\n     new_path.extend(env::split_paths(&old_path));\n     env::set_var(\"PATH\", &env::join_paths(new_path.iter()).unwrap());"}, {"sha": "b087c0c2aa1c92e77e1db8ce3688b4debc985802", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -771,7 +771,7 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n \n     // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly.\n-    if env::var(\"RUST_MIN_STACK\").is_none() {\n+    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n         cfg = cfg.stack_size(STACK_SIZE);\n     }\n \n@@ -835,8 +835,7 @@ pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n }\n \n pub fn main() {\n-    let args = env::args().map(|s| s.into_string().unwrap());\n-    let result = run(args.collect());\n+    let result = run(env::args().collect());\n     std::env::set_exit_status(result as i32);\n }\n "}, {"sha": "cdcd917ee5eb408db88228e3e14ad9bc86428728", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -1551,7 +1551,7 @@ pub fn process_crate(sess: &Session,\n     info!(\"Dumping crate {}\", cratename);\n \n     // find a path to dump our data to\n-    let mut root_path = match env::var_string(\"DXR_RUST_TEMP_FOLDER\") {\n+    let mut root_path = match env::var(\"DXR_RUST_TEMP_FOLDER\") {\n         Ok(val) => Path::new(val),\n         Err(..) => match odir {\n             Some(val) => val.join(\"dxr\"),"}, {"sha": "9d45caf76696a8b5e773fad863f798e02b337538", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -122,10 +122,10 @@ struct Output {\n }\n \n pub fn main() {\n-    static STACK_SIZE: uint = 32000000; // 32MB\n+    const STACK_SIZE: usize = 32000000; // 32MB\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).scoped(move || {\n-        let s = env::args().map(|s| s.into_string().unwrap());\n-        main_args(&s.collect::<Vec<_>>())\n+        let s = env::args().collect::<Vec<_>>();\n+        main_args(&s)\n     }).join();\n     env::set_exit_status(res.ok().unwrap() as i32);\n }"}, {"sha": "c5dd66630b4201d908aacf9159743dddd9f23a17", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -101,7 +101,7 @@ impl DynamicLibrary {\n     /// Returns the current search path for dynamic libraries being used by this\n     /// process\n     pub fn search_path() -> Vec<Path> {\n-        match env::var(DynamicLibrary::envvar()) {\n+        match env::var_os(DynamicLibrary::envvar()) {\n             Some(var) => env::split_paths(&var).collect(),\n             None => Vec::new(),\n         }"}, {"sha": "ea18838211f26b37b84f87ab94bc1695e57feda8", "filename": "src/libstd/env.rs", "status": "modified", "additions": 127, "deletions": 42, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -71,17 +71,29 @@ static ENV_LOCK: StaticMutex = MUTEX_INIT;\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This iterator is created through `std::env::vars()` and yields `(OsString,\n-/// OsString)` pairs.\n-pub struct Vars { inner: os_imp::Env }\n+/// This iterator is created through `std::env::vars()` and yields `(String,\n+/// String)` pairs.\n+pub struct Vars { inner: VarsOs }\n \n-/// Returns an iterator of (variable, value) pairs, for all the environment\n-/// variables of the current process.\n+/// An iterator over a snapshot of the environment variables of this process.\n+///\n+/// This iterator is created through `std::env::vars_os()` and yields\n+/// `(OsString, OsString)` pairs.\n+pub struct VarsOs { inner: os_imp::Env }\n+\n+/// Returns an iterator of (variable, value) pairs of strings, for all the\n+/// environment variables of the current process.\n ///\n /// The returned iterator contains a snapshot of the process's environment\n /// variables at the time of this invocation, modifications to environment\n /// variables afterwards will not be reflected in the returned iterator.\n ///\n+/// # Panics\n+///\n+/// While iterating, the returned iterator will panic if any key or value in the\n+/// environment is not valid unicode. If this is not desired, consider using the\n+/// `env::vars_os` function.\n+///\n /// # Example\n ///\n /// ```rust\n@@ -90,37 +102,50 @@ pub struct Vars { inner: os_imp::Env }\n /// // We will iterate through the references to the element returned by\n /// // env::vars();\n /// for (key, value) in env::vars() {\n-///     println!(\"{:?}: {:?}\", key, value);\n+///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n pub fn vars() -> Vars {\n-    let _g = ENV_LOCK.lock();\n-    Vars { inner: os_imp::env() }\n-}\n-\n-impl Iterator for Vars {\n-    type Item = (OsString, OsString);\n-    fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }\n-    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+    Vars { inner: vars_os() }\n }\n \n-/// Fetches the environment variable `key` from the current process, returning\n-/// None if the variable isn't set.\n+/// Returns an iterator of (variable, value) pairs of OS strings, for all the\n+/// environment variables of the current process.\n+///\n+/// The returned iterator contains a snapshot of the process's environment\n+/// variables at the time of this invocation, modifications to environment\n+/// variables afterwards will not be reflected in the returned iterator.\n ///\n /// # Example\n ///\n /// ```rust\n /// use std::env;\n ///\n-/// let key = \"HOME\";\n-/// match env::var(key) {\n-///     Some(val) => println!(\"{}: {:?}\", key, val),\n-///     None => println!(\"{} is not defined in the environment.\", key)\n+/// // We will iterate through the references to the element returned by\n+/// // env::vars_os();\n+/// for (key, value) in env::vars_os() {\n+///     println!(\"{:?}: {:?}\", key, value);\n /// }\n /// ```\n-pub fn var<K: ?Sized>(key: &K) -> Option<OsString> where K: AsOsStr {\n+pub fn vars_os() -> VarsOs {\n     let _g = ENV_LOCK.lock();\n-    os_imp::getenv(key.as_os_str())\n+    VarsOs { inner: os_imp::env() }\n+}\n+\n+impl Iterator for Vars {\n+    type Item = (String, String);\n+    fn next(&mut self) -> Option<(String, String)> {\n+        self.inner.next().map(|(a, b)| {\n+            (a.into_string().unwrap(), b.into_string().unwrap())\n+        })\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+\n+impl Iterator for VarsOs {\n+    type Item = (OsString, OsString);\n+    fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n /// Fetches the environment variable `key` from the current process.\n@@ -135,18 +160,37 @@ pub fn var<K: ?Sized>(key: &K) -> Option<OsString> where K: AsOsStr {\n /// use std::env;\n ///\n /// let key = \"HOME\";\n-/// match env::var_string(key) {\n+/// match env::var(key) {\n ///     Ok(val) => println!(\"{}: {:?}\", key, val),\n ///     Err(e) => println!(\"couldn't interpret {}: {}\", key, e),\n /// }\n /// ```\n-pub fn var_string<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n-    match var(key) {\n+pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n+    match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n         None => Err(VarError::NotPresent)\n     }\n }\n \n+/// Fetches the environment variable `key` from the current process, returning\n+/// None if the variable isn't set.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::env;\n+///\n+/// let key = \"HOME\";\n+/// match env::var_os(key) {\n+///     Some(val) => println!(\"{}: {:?}\", key, val),\n+///     None => println!(\"{} is not defined in the environment.\", key)\n+/// }\n+/// ```\n+pub fn var_os<K: ?Sized>(key: &K) -> Option<OsString> where K: AsOsStr {\n+    let _g = ENV_LOCK.lock();\n+    os_imp::getenv(key.as_os_str())\n+}\n+\n /// Possible errors from the `env::var` method.\n #[derive(Debug, PartialEq, Eq, Clone)]\n pub enum VarError {\n@@ -190,7 +234,7 @@ impl Error for VarError {\n ///\n /// let key = \"KEY\";\n /// env::set_var(key, \"VALUE\");\n-/// assert_eq!(env::var_string(key), Ok(\"VALUE\".to_string()));\n+/// assert_eq!(env::var(key), Ok(\"VALUE\".to_string()));\n /// ```\n pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n     where K: AsOsStr, V: AsOsStr\n@@ -222,7 +266,7 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n /// use std::env;\n ///\n /// let key = \"PATH\";\n-/// match env::var(key) {\n+/// match env::var_os(key) {\n ///     Some(paths) => {\n ///         for path in env::split_paths(&paths) {\n ///             println!(\"'{}'\", path.display());\n@@ -262,7 +306,7 @@ pub struct JoinPathsError {\n /// ```rust\n /// use std::env;\n ///\n-/// if let Some(path) = env::var(\"PATH\") {\n+/// if let Some(path) = env::var_os(\"PATH\") {\n ///     let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n ///     paths.push(Path::new(\"/home/xyz/bin\"));\n ///     let new_path = env::join_paths(paths.iter()).unwrap();\n@@ -376,11 +420,17 @@ pub fn get_exit_status() -> i32 {\n     EXIT_STATUS.load(Ordering::SeqCst) as i32\n }\n \n-/// An iterator over the arguments of a process, yielding an `OsString` value\n+/// An iterator over the arguments of a process, yielding an `String` value\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args` method.\n-pub struct Args { inner: os_imp::Args }\n+pub struct Args { inner: ArgsOs }\n+\n+/// An iterator over the arguments of a process, yielding an `OsString` value\n+/// for each argument.\n+///\n+/// This structure is created through the `std::env::args_os` method.\n+pub struct ArgsOs { inner: os_imp::Args }\n \n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n@@ -389,21 +439,56 @@ pub struct Args { inner: os_imp::Args }\n /// set to arbitrary text, and it may not even exist, so this property should\n /// not be relied upon for security purposes.\n ///\n+/// # Panics\n+///\n+/// The returned iterator will panic during iteration if any argument to the\n+/// process is not valid unicode. If this is not desired it is recommended to\n+/// use the `args_os` function instead.\n+///\n /// # Example\n ///\n /// ```rust\n /// use std::env;\n ///\n /// // Prints each argument on a separate line\n /// for argument in env::args() {\n-///     println!(\"{:?}\", argument);\n+///     println!(\"{}\", argument);\n /// }\n /// ```\n pub fn args() -> Args {\n-    Args { inner: os_imp::args() }\n+    Args { inner: args_os() }\n+}\n+\n+/// Returns the arguments which this program was started with (normally passed\n+/// via the command line).\n+///\n+/// The first element is traditionally the path to the executable, but it can be\n+/// set to arbitrary text, and it may not even exist, so this property should\n+/// not be relied upon for security purposes.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::env;\n+///\n+/// // Prints each argument on a separate line\n+/// for argument in env::args_os() {\n+///     println!(\"{:?}\", argument);\n+/// }\n+/// ```\n+pub fn args_os() -> ArgsOs {\n+    ArgsOs { inner: os_imp::args() }\n }\n \n impl Iterator for Args {\n+    type Item = String;\n+    fn next(&mut self) -> Option<String> {\n+        self.inner.next().map(|s| s.into_string().unwrap())\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+\n+impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n@@ -706,7 +791,7 @@ mod tests {\n         let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n                                      .collect::<String>());\n         let n = OsString::from_string(n);\n-        assert!(var(&n).is_none());\n+        assert!(var_os(&n).is_none());\n         n\n     }\n \n@@ -718,25 +803,25 @@ mod tests {\n     fn test_set_var() {\n         let n = make_rand_name();\n         set_var(&n, \"VALUE\");\n-        eq(var(&n), Some(\"VALUE\"));\n+        eq(var_os(&n), Some(\"VALUE\"));\n     }\n \n     #[test]\n     fn test_remove_var() {\n         let n = make_rand_name();\n         set_var(&n, \"VALUE\");\n         remove_var(&n);\n-        eq(var(&n), None);\n+        eq(var_os(&n), None);\n     }\n \n     #[test]\n     fn test_set_var_overwrite() {\n         let n = make_rand_name();\n         set_var(&n, \"1\");\n         set_var(&n, \"2\");\n-        eq(var(&n), Some(\"2\"));\n+        eq(var_os(&n), Some(\"2\"));\n         set_var(&n, \"\");\n-        eq(var(&n), Some(\"\"));\n+        eq(var_os(&n), Some(\"\"));\n     }\n \n     #[test]\n@@ -749,7 +834,7 @@ mod tests {\n         }\n         let n = make_rand_name();\n         set_var(&n, s.as_slice());\n-        eq(var(&n), Some(s.as_slice()));\n+        eq(var_os(&n), Some(s.as_slice()));\n     }\n \n     #[test]\n@@ -767,22 +852,22 @@ mod tests {\n         let n = make_rand_name();\n         let s = repeat(\"x\").take(10000).collect::<String>();\n         set_var(&n, &s);\n-        eq(var(&n), Some(s.as_slice()));\n+        eq(var_os(&n), Some(s.as_slice()));\n         remove_var(&n);\n-        eq(var(&n), None);\n+        eq(var_os(&n), None);\n     }\n \n     #[test]\n     fn test_env_set_var() {\n         let n = make_rand_name();\n \n-        let mut e = vars();\n+        let mut e = vars_os();\n         set_var(&n, \"VALUE\");\n         assert!(!e.any(|(k, v)| {\n             &*k == &*n && &*v == \"VALUE\"\n         }));\n \n-        assert!(vars().any(|(k, v)| {\n+        assert!(vars_os().any(|(k, v)| {\n             &*k == &*n && &*v == \"VALUE\"\n         }));\n     }"}, {"sha": "ca7183a97d4337e67de05923143a3c544eae9f4c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -125,7 +125,7 @@ pub fn getcwd() -> IoResult<Path> {\n #[deprecated(since = \"1.0.0\", reason = \"use env::vars instead\")]\n #[unstable(feature = \"os\")]\n pub fn env() -> Vec<(String,String)> {\n-    env::vars().map(|(k, v)| {\n+    env::vars_os().map(|(k, v)| {\n         (k.to_string_lossy().into_owned(), v.to_string_lossy().into_owned())\n     }).collect()\n }\n@@ -135,7 +135,7 @@ pub fn env() -> Vec<(String,String)> {\n #[deprecated(since = \"1.0.0\", reason = \"use env::vars instead\")]\n #[unstable(feature = \"os\")]\n pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n-    env::vars().map(|(k, v)| (byteify(k), byteify(v))).collect()\n+    env::vars_os().map(|(k, v)| (byteify(k), byteify(v))).collect()\n }\n \n /// Fetches the environment variable `n` from the current process, returning\n@@ -159,10 +159,10 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n-#[deprecated(since = \"1.0.0\", reason = \"use env::var or env::var_string instead\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use env::var or env::var_os instead\")]\n #[unstable(feature = \"os\")]\n pub fn getenv(n: &str) -> Option<String> {\n-    env::var_string(n).ok()\n+    env::var(n).ok()\n }\n \n /// Fetches the environment variable `n` byte vector from the current process,\n@@ -174,7 +174,7 @@ pub fn getenv(n: &str) -> Option<String> {\n #[deprecated(since = \"1.0.0\", reason = \"use env::var instead\")]\n #[unstable(feature = \"os\")]\n pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n-    env::var(n).map(byteify)\n+    env::var_os(n).map(byteify)\n }\n \n #[cfg(unix)]"}, {"sha": "ced84d7551eef349989e897afd1598264288d366", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -29,7 +29,7 @@ pub fn log_enabled() -> bool {\n         _ => {}\n     }\n \n-    let val = match env::var(\"RUST_BACKTRACE\") {\n+    let val = match env::var_os(\"RUST_BACKTRACE\") {\n         Some(..) => 2,\n         None => 1,\n     };"}, {"sha": "bb57d19ed2666ae45d172b64edfd0fea9488e96b", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -52,7 +52,7 @@ pub fn min_stack() -> uint {\n         0 => {}\n         n => return n - 1,\n     }\n-    let amt = env::var_string(\"RUST_MIN_STACK\").ok().and_then(|s| s.parse().ok());\n+    let amt = env::var(\"RUST_MIN_STACK\").ok().and_then(|s| s.parse().ok());\n     let amt = amt.unwrap_or(2 * 1024 * 1024);\n     // 0 is our sentinel value, so ensure that we'll never see 0 after\n     // initialization has run\n@@ -63,7 +63,7 @@ pub fn min_stack() -> uint {\n /// Get's the number of scheduler threads requested by the environment\n /// either `RUST_THREADS` or `num_cpus`.\n pub fn default_sched_threads() -> uint {\n-    match env::var_string(\"RUST_THREADS\") {\n+    match env::var(\"RUST_THREADS\") {\n         Ok(nstr) => {\n             let opt_n: Option<uint> = nstr.parse().ok();\n             match opt_n {"}, {"sha": "5d56707c87a47b6c7b2bc9d55b3cb2ece4b5c6f6", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -30,7 +30,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n         Some(v) => v\n     };\n \n-    let e = match env::var_string(&var[]) {\n+    let e = match env::var(&var[]) {\n       Err(..) => {\n           cx.expr_path(cx.path_all(sp,\n                                    true,\n@@ -101,7 +101,7 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n     }\n \n-    let e = match env::var_string(&var[]) {\n+    let e = match env::var(&var[]) {\n         Err(_) => {\n             cx.span_err(sp, &msg);\n             cx.expr_usize(sp, 0)"}, {"sha": "758191a6e1107e8566dfe16d205bfe7f32491504", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -172,7 +172,7 @@ impl<T: Writer+Send> TerminfoTerminal<T> {\n     /// Returns `None` whenever the terminal cannot be created for some\n     /// reason.\n     pub fn new(out: T) -> Option<Box<Terminal<T>+Send+'static>> {\n-        let term = match env::var_string(\"TERM\") {\n+        let term = match env::var(\"TERM\") {\n             Ok(t) => t,\n             Err(..) => {\n                 debug!(\"TERM environment variable not defined\");\n@@ -182,7 +182,7 @@ impl<T: Writer+Send> TerminfoTerminal<T> {\n \n         let entry = open(&term[]);\n         if entry.is_err() {\n-            if env::var_string(\"MSYSCON\").ok().map_or(false, |s| {\n+            if env::var(\"MSYSCON\").ok().map_or(false, |s| {\n                     \"mintty.exe\" == s\n                 }) {\n                 // msys terminal"}, {"sha": "fd6e6a843e1f3581586160c02ce402f8706ce781", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -28,14 +28,14 @@ pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n     let first_char = term.char_at(0);\n \n     // Find search directory\n-    match env::var_string(\"TERMINFO\") {\n+    match env::var(\"TERMINFO\") {\n         Ok(dir) => dirs_to_search.push(Path::new(dir)),\n         Err(..) => {\n             if homedir.is_some() {\n                 // ncurses compatibility;\n                 dirs_to_search.push(homedir.unwrap().join(\".terminfo\"))\n             }\n-            match env::var_string(\"TERMINFO_DIRS\") {\n+            match env::var(\"TERMINFO_DIRS\") {\n                 Ok(dirs) => for i in dirs.split(':') {\n                     if i == \"\" {\n                         dirs_to_search.push(Path::new(\"/usr/share/terminfo\"));"}, {"sha": "e7a70ed0d69603f88072a18437c8c51b49e5e541", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -385,7 +385,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let mut nocapture = matches.opt_present(\"nocapture\");\n     if !nocapture {\n-        nocapture = env::var(\"RUST_TEST_NOCAPTURE\").is_some();\n+        nocapture = env::var(\"RUST_TEST_NOCAPTURE\").is_ok();\n     }\n \n     let color = match matches.opt_str(\"color\").as_ref().map(|s| &**s) {\n@@ -811,7 +811,7 @@ fn run_tests<F>(opts: &TestOpts,\n \n fn get_concurrency() -> uint {\n     use std::rt;\n-    match env::var_string(\"RUST_TEST_TASKS\") {\n+    match env::var(\"RUST_TEST_TASKS\") {\n         Ok(s) => {\n             let opt_n: Option<uint> = s.parse().ok();\n             match opt_n {"}, {"sha": "659e5b3a8c2f8a93a5e4c23c655d2a89bf67b893", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a828e7948069f310dc5b33be8edb65e5e8e0cf9a/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=a828e7948069f310dc5b33be8edb65e5e8e0cf9a", "patch": "@@ -11,8 +11,8 @@\n use std::env::*;\n \n fn main() {\n-    for (k, v) in vars() {\n-        let v2 = var(&k);\n+    for (k, v) in vars_os() {\n+        let v2 = var_os(&k);\n         // MingW seems to set some funky environment variables like\n         // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n         // from vars() but not visible from var()."}]}