{"sha": "3f521b3542458d177aa1723cafdb70fc8179682b", "node_id": "C_kwDOAAsO6NoAKDNmNTIxYjM1NDI0NThkMTc3YWExNzIzY2FmZGI3MGZjODE3OTY4MmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-06T20:13:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-16T03:39:59Z"}, "message": "Be better about bound vars", "tree": {"sha": "f48895e4a6a49c07fc1b455f19304d533b01c880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48895e4a6a49c07fc1b455f19304d533b01c880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f521b3542458d177aa1723cafdb70fc8179682b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f521b3542458d177aa1723cafdb70fc8179682b", "html_url": "https://github.com/rust-lang/rust/commit/3f521b3542458d177aa1723cafdb70fc8179682b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f521b3542458d177aa1723cafdb70fc8179682b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f82354dc1dee723b0b1324dda7ddeabc332830", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f82354dc1dee723b0b1324dda7ddeabc332830", "html_url": "https://github.com/rust-lang/rust/commit/52f82354dc1dee723b0b1324dda7ddeabc332830"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "106ce9990e1ed1c79f973ccafb43b5e507f6b268", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=3f521b3542458d177aa1723cafdb70fc8179682b", "patch": "@@ -290,7 +290,7 @@ impl DeepRejectCtxt {\n             // Impls cannot contain these types as these cannot be named directly.\n             ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) => false,\n \n-            ty::Placeholder(..) => false,\n+            ty::Placeholder(..) | ty::Bound(..) => false,\n \n             // Depending on the value of `treat_obligation_params`, we either\n             // treat generic parameters like placeholders or like inference variables.\n@@ -310,7 +310,7 @@ impl DeepRejectCtxt {\n \n             ty::Error(_) => true,\n \n-            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) | ty::Bound(..) => {\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => {\n                 bug!(\"unexpected obligation type: {:?}\", obligation_ty)\n             }\n         }"}, {"sha": "a8d9e79434c99f28263de22067a4f2a519999285", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=3f521b3542458d177aa1723cafdb70fc8179682b", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     ) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let tcx = self.tcx;\n         let param_env = obligation.param_env;\n-        let trait_ref = tcx.erase_late_bound_regions(trait_ref);\n+        let trait_ref = self.instantiate_binder_with_placeholders(trait_ref);\n         let trait_self_ty = trait_ref.self_ty();\n \n         let mut self_match_impls = vec![];"}, {"sha": "ecfd45afc2d01e3d5f2bdd77465b619fcf0b05e6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3f521b3542458d177aa1723cafdb70fc8179682b", "patch": "@@ -1060,7 +1060,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n-        let ty = self.tcx.erase_late_bound_regions(self_ty);\n+        let ty = self.instantiate_binder_with_placeholders(self_ty);\n         let Some(generics) = self.tcx.hir().get_generics(obligation.cause.body_id) else { return false };\n         let ty::Ref(_, inner_ty, hir::Mutability::Not) = ty.kind() else { return false };\n         let ty::Param(param) = inner_ty.kind() else { return false };"}, {"sha": "dae602908a31f6edf7da836778e8e8055e1b81c6", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f521b3542458d177aa1723cafdb70fc8179682b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3f521b3542458d177aa1723cafdb70fc8179682b", "patch": "@@ -396,7 +396,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // still be provided by a manual implementation for\n                     // this trait and type.\n                 }\n-                ty::Param(..) | ty::Alias(ty::Projection, ..) => {\n+                ty::Param(..)\n+                | ty::Alias(ty::Projection, ..)\n+                | ty::Placeholder(..)\n+                | ty::Bound(..) => {\n                     // In these cases, we don't know what the actual\n                     // type is. Therefore, we cannot break it down\n                     // into its constituent types. So we don't\n@@ -448,6 +451,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         );\n \n         self.infcx.probe(|_snapshot| {\n+            if obligation.has_non_region_late_bound() {\n+                return;\n+            }\n+\n             // The code below doesn't care about regions, and the\n             // self-ty here doesn't escape this probe, so just erase\n             // any LBR."}]}