{"sha": "04d972906d05e6c27452e1ae35970c30e7cf6e6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZDk3MjkwNmQwNWU2YzI3NDUyZTFhZTM1OTcwYzMwZTdjZjZlNmI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-23T21:54:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-30T01:54:36Z"}, "message": "Rebasing and review comments", "tree": {"sha": "0261ceb0e0bd8f61282f57e1c142438c99c43f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0261ceb0e0bd8f61282f57e1c142438c99c43f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04d972906d05e6c27452e1ae35970c30e7cf6e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04d972906d05e6c27452e1ae35970c30e7cf6e6b", "html_url": "https://github.com/rust-lang/rust/commit/04d972906d05e6c27452e1ae35970c30e7cf6e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04d972906d05e6c27452e1ae35970c30e7cf6e6b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa02b3ff9401eeece5cd47f51a6b4c27ad63d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa02b3ff9401eeece5cd47f51a6b4c27ad63d93", "html_url": "https://github.com/rust-lang/rust/commit/aaa02b3ff9401eeece5cd47f51a6b4c27ad63d93"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "40665beaa5ac2698b08c92e6107ad139cef5ff17", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -676,10 +676,11 @@ impl<'a> Context<'a> {\n                         return true\n                     }\n                 }\n-                sess.err(&format!(\"extern location for {} is of an unknown type: {}\",\n-                                 self.crate_name, loc.display()));\n-                sess.help(&format!(\"file name should be lib*.rlib or {}*.{}\",\n-                                   dylibname.0, dylibname.1));\n+                sess.struct_err(&format!(\"extern location for {} is of an unknown type: {}\",\n+                                         self.crate_name, loc.display()))\n+                    .help(&format!(\"file name should be lib*.rlib or {}*.{}\",\n+                                   dylibname.0, dylibname.1))\n+                    .emit();\n                 false\n             });\n "}, {"sha": "5a17f2528c85b1aec723b921324e8c195a8ba41d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -425,12 +425,12 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              argument is missing?\")\n         }\n         ResolutionError::UnresolvedName(path, msg, context) => {\n-            let err = struct_span_err!(resolver.session,\n-                                       span,\n-                                       E0425,\n-                                       \"unresolved name `{}`{}\",\n-                                       path,\n-                                       msg);\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0425,\n+                                           \"unresolved name `{}`{}\",\n+                                           path,\n+                                           msg);\n \n             match context {\n                 UnresolvedNameContext::Other => {} // no help available"}, {"sha": "ca2db8c3deffb50727b9df1a52addf920c71f5b1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -3011,7 +3011,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         // only find fits with at least one matching letter\n         if let Some(name) = find_best_match_for_name(names, &name, Some(name.len())) {\n             err.span_help(field.span,\n-                          &format!(\"did you mean `{}`?\", n));\n+                          &format!(\"did you mean `{}`?\", name));\n         }\n     }\n "}, {"sha": "a7bfdedf71813d0fd70ef99033069f1927598008", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -28,7 +28,7 @@ pub trait Emitter {\n     fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, lvl: Level);\n     fn custom_emit(&mut self, sp: RenderSpan, msg: &str, lvl: Level);\n \n-    // Emit a structured diagnostic.\n+    /// Emit a structured diagnostic.\n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n         self.emit(db.span, &db.message, db.code.as_ref().map(|s| &**s), db.level);\n         for child in &db.children {\n@@ -60,8 +60,8 @@ impl ColorConfig {\n     }\n }\n \n-// A basic emitter for when we don't have access to a codemap or registry. Used\n-// for reporting very early errors, etc.\n+/// A basic emitter for when we don't have access to a codemap or registry. Used\n+/// for reporting very early errors, etc.\n pub struct BasicEmitter {\n     dst: Destination,\n }"}, {"sha": "a2fae975148f953e913d96b878babf75fcd01ae8", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -98,7 +98,7 @@ impl error::Error for ExplicitBug {\n     }\n }\n \n-// Used for emitting structured error messages and other diagnostic information.\n+/// Used for emitting structured error messages and other diagnostic information.\n #[must_use]\n pub struct DiagnosticBuilder<'a> {\n     emitter: &'a RefCell<Box<Emitter>>,\n@@ -109,7 +109,7 @@ pub struct DiagnosticBuilder<'a> {\n     children: Vec<SubDiagnostic>,\n }\n \n-// For example a note attached to an error.\n+/// For example a note attached to an error.\n struct SubDiagnostic {\n     level: Level,\n     message: String,\n@@ -118,7 +118,7 @@ struct SubDiagnostic {\n }\n \n impl<'a> DiagnosticBuilder<'a> {\n-    // Emit the diagnostic.\n+    /// Emit the diagnostic.\n     pub fn emit(&mut self) {\n         if self.cancelled() {\n             return;\n@@ -132,11 +132,11 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n-    // Cancel the diagnostic (a structured diagnostic must either be emitted or\n-    // cancelled or it will panic when dropped).\n-    // BEWARE: if this DiagnosticBuilder is an error, then creating it will\n-    // bump the error count on the Handler and cancelling it won't undo that.\n-    // If you want to decrement the error count you should use `Handler::cancel`.\n+    /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n+    /// cancelled or it will panic when dropped).\n+    /// BEWARE: if this DiagnosticBuilder is an error, then creating it will\n+    /// bump the error count on the Handler and cancelling it won't undo that.\n+    /// If you want to decrement the error count you should use `Handler::cancel`.\n     pub fn cancel(&mut self) {\n         self.level = Level::Cancelled;\n     }\n@@ -160,12 +160,6 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), None);\n         self\n     }\n-    pub fn note_rfc_1214(&mut self , span: Span) -> &mut DiagnosticBuilder<'a>  {\n-        self.span_note(span,\n-                       \"this warning results from recent bug fixes and clarifications; \\\n-                        it will become a HARD ERROR in the next release. \\\n-                        See RFC 1214 for details.\")\n-    }\n     pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n         self.sub(Level::Help, msg, None, None);\n         self\n@@ -220,8 +214,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n-    // Convenience function for internal use, clients should use one of the\n-    // struct_* methods on Handler.\n+    /// Convenience function for internal use, clients should use one of the\n+    /// struct_* methods on Handler.\n     fn new(emitter: &'a RefCell<Box<Emitter>>,\n            level: Level,\n            message: &str) -> DiagnosticBuilder<'a>  {\n@@ -235,8 +229,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         }\n     }\n \n-    // Convenience function for internal use, clients should use one of the\n-    // public methods above.\n+    /// Convenience function for internal use, clients should use one of the\n+    /// public methods above.\n     fn sub(&mut self,\n            level: Level,\n            message: &str,\n@@ -258,8 +252,8 @@ impl<'a> fmt::Debug for DiagnosticBuilder<'a> {\n     }\n }\n \n-// Destructor bomb - a DiagnosticBuilder must be either emitted or cancelled or\n-// we emit a bug.\n+/// Destructor bomb - a DiagnosticBuilder must be either emitted or cancelled or\n+/// we emit a bug.\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !self.cancelled() {"}, {"sha": "efd351a632da14f73447502bca5882ee621e681f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d972906d05e6c27452e1ae35970c30e7cf6e6b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=04d972906d05e6c27452e1ae35970c30e7cf6e6b", "patch": "@@ -749,7 +749,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_before_gt_or_return<T, F>(&mut self,\n                                                   sep: Option<token::Token>,\n                                                   mut f: F)\n-                                                  -> PResult<'a, (P<[T]>, bool)> where\n+                                                  -> PResult<'a, (P<[T]>, bool)>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, Option<T>>,\n     {\n         let mut v = Vec::new();"}]}