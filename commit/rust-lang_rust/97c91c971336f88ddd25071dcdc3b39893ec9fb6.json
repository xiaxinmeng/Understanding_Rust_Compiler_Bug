{"sha": "97c91c971336f88ddd25071dcdc3b39893ec9fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YzkxYzk3MTMzNmY4OGRkZDI1MDcxZGNkYzNiMzk4OTNlYzlmYjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-19T18:23:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-19T19:35:56Z"}, "message": "green: Fix missing Send bounds on procedures\n\nThese were mistakenly not updated as part of the removal of the Send bound by\ndefault on procedures.\n\ncc #13629", "tree": {"sha": "54bb562d9975353c207a4f4102a9bb32438ff715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54bb562d9975353c207a4f4102a9bb32438ff715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c91c971336f88ddd25071dcdc3b39893ec9fb6", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c91c971336f88ddd25071dcdc3b39893ec9fb6", "html_url": "https://github.com/rust-lang/rust/commit/97c91c971336f88ddd25071dcdc3b39893ec9fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c91c971336f88ddd25071dcdc3b39893ec9fb6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba25fecfeffdbc96d31172f483bd20cffa635b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba25fecfeffdbc96d31172f483bd20cffa635b3e", "html_url": "https://github.com/rust-lang/rust/commit/ba25fecfeffdbc96d31172f483bd20cffa635b3e"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "3aa3d6742eb00e1f7683a64e7d54722b97107630", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -243,7 +243,7 @@ mod test {\n         })\n     }\n \n-    fn run(f: proc()) {\n+    fn run(f: proc():Send) {\n         let mut pool = pool();\n         pool.spawn(TaskOpts::new(), f);\n         pool.shutdown();"}, {"sha": "0a3d6a78034643f22f3186fefc37059ba92c621f", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -46,7 +46,7 @@ impl Context {\n     /// FIXME: this is basically an awful the interface. The main reason for\n     ///        this is to reduce the number of allocations made when a green\n     ///        task is spawned as much as possible\n-    pub fn new(init: InitFn, arg: uint, start: proc(),\n+    pub fn new(init: InitFn, arg: uint, start: proc():Send,\n                stack: &mut Stack) -> Context {\n \n         let sp: *uint = stack.end();"}, {"sha": "77715b1f5fb38001ba29008dbc19a4bf85f5000d", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -289,7 +289,7 @@ macro_rules! green_start( ($f:ident) => (\n /// error.\n pub fn start(argc: int, argv: **u8,\n              event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n-             main: proc()) -> int {\n+             main: proc():Send) -> int {\n     rt::init(argc, argv);\n     let mut main = Some(main);\n     let mut ret = None;\n@@ -310,7 +310,7 @@ pub fn start(argc: int, argv: **u8,\n /// This function will not return until all schedulers in the associated pool\n /// have returned.\n pub fn run(event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n-           main: proc()) -> int {\n+           main: proc():Send) -> int {\n     // Create a scheduler pool and spawn the main task into this pool. We will\n     // get notified over a channel when the main task exits.\n     let mut cfg = PoolConfig::new();\n@@ -445,7 +445,7 @@ impl SchedPool {\n     /// This is useful to create a task which can then be sent to a specific\n     /// scheduler created by `spawn_sched` (and possibly pin it to that\n     /// scheduler).\n-    pub fn task(&mut self, opts: TaskOpts, f: proc()) -> ~GreenTask {\n+    pub fn task(&mut self, opts: TaskOpts, f: proc():Send) -> ~GreenTask {\n         GreenTask::configure(&mut self.stack_pool, opts, f)\n     }\n \n@@ -455,7 +455,7 @@ impl SchedPool {\n     /// New tasks are spawned in a round-robin fashion to the schedulers in this\n     /// pool, but tasks can certainly migrate among schedulers once they're in\n     /// the pool.\n-    pub fn spawn(&mut self, opts: TaskOpts, f: proc()) {\n+    pub fn spawn(&mut self, opts: TaskOpts, f: proc():Send) {\n         let task = self.task(opts, f);\n \n         // Figure out someone to send this task to"}, {"sha": "74872086b35c6e54bcb1572047120f3bd3338c2c", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -1027,7 +1027,7 @@ mod test {\n         })\n     }\n \n-    fn run(f: proc()) {\n+    fn run(f: proc():Send) {\n         let mut pool = pool();\n         pool.spawn(TaskOpts::new(), f);\n         pool.shutdown();"}, {"sha": "4f2f0c1addb3671cdec005cfc51b22c7d364174d", "filename": "src/libgreen/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsimple.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -72,7 +72,7 @@ impl Runtime for SimpleTask {\n     // feet and running.\n     fn yield_now(~self, _cur_task: ~Task) { fail!() }\n     fn maybe_yield(~self, _cur_task: ~Task) { fail!() }\n-    fn spawn_sibling(~self, _cur_task: ~Task, _opts: TaskOpts, _f: proc()) {\n+    fn spawn_sibling(~self, _cur_task: ~Task, _opts: TaskOpts, _f: proc():Send) {\n         fail!()\n     }\n     fn local_io<'a>(&'a mut self) -> Option<rtio::LocalIo<'a>> { None }"}, {"sha": "150e2704c5977c7397e526d07851fd91cee8e867", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c91c971336f88ddd25071dcdc3b39893ec9fb6/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=97c91c971336f88ddd25071dcdc3b39893ec9fb6", "patch": "@@ -129,15 +129,15 @@ impl GreenTask {\n     /// and will not have any contained Task structure.\n     pub fn new(stack_pool: &mut StackPool,\n                stack_size: Option<uint>,\n-               start: proc()) -> ~GreenTask {\n+               start: proc():Send) -> ~GreenTask {\n         GreenTask::new_homed(stack_pool, stack_size, AnySched, start)\n     }\n \n     /// Creates a new task (like `new`), but specifies the home for new task.\n     pub fn new_homed(stack_pool: &mut StackPool,\n                      stack_size: Option<uint>,\n                      home: Home,\n-                     start: proc()) -> ~GreenTask {\n+                     start: proc():Send) -> ~GreenTask {\n         // Allocate ourselves a GreenTask structure\n         let mut ops = GreenTask::new_typed(None, TypeGreen(Some(home)));\n \n@@ -175,7 +175,7 @@ impl GreenTask {\n     /// new stack for this task.\n     pub fn configure(pool: &mut StackPool,\n                      opts: TaskOpts,\n-                     f: proc()) -> ~GreenTask {\n+                     f: proc():Send) -> ~GreenTask {\n         let TaskOpts {\n             notify_chan, name, stack_size,\n             stderr, stdout,\n@@ -443,7 +443,7 @@ impl Runtime for GreenTask {\n         }\n     }\n \n-    fn spawn_sibling(mut ~self, cur_task: ~Task, opts: TaskOpts, f: proc()) {\n+    fn spawn_sibling(mut ~self, cur_task: ~Task, opts: TaskOpts, f: proc():Send) {\n         self.put_task(cur_task);\n \n         // Spawns a task into the current scheduler. We allocate the new task's\n@@ -490,7 +490,7 @@ mod tests {\n     use super::super::{PoolConfig, SchedPool};\n     use super::GreenTask;\n \n-    fn spawn_opts(opts: TaskOpts, f: proc()) {\n+    fn spawn_opts(opts: TaskOpts, f: proc():Send) {\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 1,\n             event_loop_factory: ::rustuv::event_loop,"}]}