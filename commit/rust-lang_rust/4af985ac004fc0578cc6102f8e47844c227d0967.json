{"sha": "4af985ac004fc0578cc6102f8e47844c227d0967", "node_id": "C_kwDOAAsO6NoAKDRhZjk4NWFjMDA0ZmMwNTc4Y2M2MTAyZjhlNDc4NDRjMjI3ZDA5Njc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T23:37:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T23:37:59Z"}, "message": "Rollup merge of #91215 - GuillaumeGomez:vec-deque-retain-mut, r=m-ou-se\n\nImplement VecDeque::retain_mut\n\nPart of https://github.com/rust-lang/rust/issues/90829.\n\nIn https://github.com/rust-lang/rust/pull/90772, someone suggested that `retain_mut` should also be implemented on `VecDeque`. I think that it follows the same logic (coherency). So first: is it ok? Second: should I create a new feature for it or can we put it into the same one?\n\nr? `@joshtriplett`", "tree": {"sha": "0d48eba0ee466d1423f469a9820a878b8c558d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d48eba0ee466d1423f469a9820a878b8c558d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af985ac004fc0578cc6102f8e47844c227d0967", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhq/vXCRBK7hj4Ov3rIwAAK5wIABMkYI5GUq4p+MkdHibBXu++\ndaCPDbn86sLEub4AEYK4Sp3YRfM3jJf62sEknQklVUxh9iER3RH36rzPe1k6So65\nYeyBGVv8Wxo//oJEhWYkNZ8wF23SW+SHbm9KW8SQlM/rv2Spbx5xOD3c98L8CZNX\nsdkUjv2QNWk5d1BkzwyEuqqD9x+CjigALUupXTOtPr/T3BHB+1E087nWxEtCMZVB\nn/zwQ2F2NFU8ksMoyuZSVS98JtQwijFmAh43Xy2Cl8v0AZpsvZysR0b+B+dFq1G6\ndxoSJ8sCqe1d4CMYKI1W/eNKJnYmAq9QygXLB1XHE6FAoP8oFJFghdSqaPIir5M=\n=5Z4r\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d48eba0ee466d1423f469a9820a878b8c558d00\nparent 1f2a26e999a4c8e3a053e95f62b1ee403b15faed\nparent 0466a1256f46fac36cbdfcabe08153c8d0763cbd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638661079 +0100\ncommitter GitHub <noreply@github.com> 1638661079 +0100\n\nRollup merge of #91215 - GuillaumeGomez:vec-deque-retain-mut, r=m-ou-se\n\nImplement VecDeque::retain_mut\n\nPart of https://github.com/rust-lang/rust/issues/90829.\n\nIn https://github.com/rust-lang/rust/pull/90772, someone suggested that `retain_mut` should also be implemented on `VecDeque`. I think that it follows the same logic (coherency). So first: is it ok? Second: should I create a new feature for it or can we put it into the same one?\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af985ac004fc0578cc6102f8e47844c227d0967", "html_url": "https://github.com/rust-lang/rust/commit/4af985ac004fc0578cc6102f8e47844c227d0967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af985ac004fc0578cc6102f8e47844c227d0967/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "html_url": "https://github.com/rust-lang/rust/commit/1f2a26e999a4c8e3a053e95f62b1ee403b15faed"}, {"sha": "0466a1256f46fac36cbdfcabe08153c8d0763cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0466a1256f46fac36cbdfcabe08153c8d0763cbd", "html_url": "https://github.com/rust-lang/rust/commit/0466a1256f46fac36cbdfcabe08153c8d0763cbd"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "42eae6a54b5311c1e6d9a3c22c6982a70bf9e207", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4af985ac004fc0578cc6102f8e47844c227d0967/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af985ac004fc0578cc6102f8e47844c227d0967/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=4af985ac004fc0578cc6102f8e47844c227d0967", "patch": "@@ -2148,14 +2148,45 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n+    {\n+        self.retain_mut(|elem| f(elem));\n+    }\n+\n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_retain_mut)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// buf.extend(1..5);\n+    /// buf.retain_mut(|x| if *x % 2 == 0 {\n+    ///     *x += 1;\n+    ///     true\n+    /// } else {\n+    ///     false\n+    /// });\n+    /// assert_eq!(buf, [3, 5]);\n+    /// ```\n+    #[unstable(feature = \"vec_retain_mut\", issue = \"90829\")]\n+    pub fn retain_mut<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&mut T) -> bool,\n     {\n         let len = self.len();\n         let mut idx = 0;\n         let mut cur = 0;\n \n         // Stage 1: All values are retained.\n         while cur < len {\n-            if !f(&self[cur]) {\n+            if !f(&mut self[cur]) {\n                 cur += 1;\n                 break;\n             }\n@@ -2164,7 +2195,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n         // Stage 2: Swap retained value into current idx.\n         while cur < len {\n-            if !f(&self[cur]) {\n+            if !f(&mut self[cur]) {\n                 cur += 1;\n                 continue;\n             }\n@@ -2173,7 +2204,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n             cur += 1;\n             idx += 1;\n         }\n-        // Stage 3: Trancate all values after idx.\n+        // Stage 3: Truncate all values after idx.\n         if cur != idx {\n             self.truncate(idx);\n         }"}]}