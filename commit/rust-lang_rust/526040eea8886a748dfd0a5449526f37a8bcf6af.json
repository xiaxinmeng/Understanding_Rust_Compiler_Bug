{"sha": "526040eea8886a748dfd0a5449526f37a8bcf6af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjA0MGVlYTg4ODZhNzQ4ZGZkMGE1NDQ5NTI2ZjM3YThiY2Y2YWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-08T11:47:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-08T11:47:40Z"}, "message": "Merge #8765\n\n8765: internal: remove one more syntax rewriter r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8c8a73cee1b7333920f2b13fe7899f35b9bb1b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8a73cee1b7333920f2b13fe7899f35b9bb1b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526040eea8886a748dfd0a5449526f37a8bcf6af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglnpcCRBK7hj4Ov3rIwAAZ0AIABFNAKVAMgwlFeE6M/ZmG1AX\nkaa/3F8QKff/u6SwNTjmifusZgkEeI/ScJKybHkM81mlEsDqKN1TuQ3VwB0GH8v1\nj8/uajFtG/6pBQMTp+RagaIW5GuyfiKcT7P4pRVcV6oUWtELW9UR/eRPAbT5f/JD\nIH3ygc+QOiy4rFGS+q0T5ynz5+7sPXqyZUaA2nJ817CLtJokM1BBUcwlg1k3VQHe\nVdpPYDlWHHebfldKSigcZwtS/6mtYW5nfmwUnlx0NHcg3KLoYg8H5EhjQFa6VbZZ\nW6OjIjL82JOWuwPN2TXCx2PnwsoT9cSAB/PfgfyczM30KE+ji3dje+wbsV3DzqU=\n=fBEb\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c8a73cee1b7333920f2b13fe7899f35b9bb1b91\nparent 4e3f0186d87e1be85bdc1e0bc3074147715e46c3\nparent 1fdc9d8e9ee6afa62fe312e18aadaff316265bb8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620474460 +0000\ncommitter GitHub <noreply@github.com> 1620474460 +0000\n\nMerge #8765\n\n8765: internal: remove one more syntax rewriter r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526040eea8886a748dfd0a5449526f37a8bcf6af", "html_url": "https://github.com/rust-lang/rust/commit/526040eea8886a748dfd0a5449526f37a8bcf6af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526040eea8886a748dfd0a5449526f37a8bcf6af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3f0186d87e1be85bdc1e0bc3074147715e46c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3f0186d87e1be85bdc1e0bc3074147715e46c3", "html_url": "https://github.com/rust-lang/rust/commit/4e3f0186d87e1be85bdc1e0bc3074147715e46c3"}, {"sha": "1fdc9d8e9ee6afa62fe312e18aadaff316265bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdc9d8e9ee6afa62fe312e18aadaff316265bb8", "html_url": "https://github.com/rust-lang/rust/commit/1fdc9d8e9ee6afa62fe312e18aadaff316265bb8"}], "stats": {"total": 103, "additions": 38, "deletions": 65}, "files": [{"sha": "682f0ff5e1b2f99d5109d23cb03394e522666b4f", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=526040eea8886a748dfd0a5449526f37a8bcf6af", "patch": "@@ -13,7 +13,7 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    algo::{self, find_node_at_offset, find_node_at_range, SyntaxRewriter},\n+    algo::{self, find_node_at_offset, find_node_at_range},\n     AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n     SyntaxToken, TextRange, TextSize, TokenAtOffset,\n };\n@@ -290,12 +290,6 @@ impl AssistBuilder {\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n         algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n     }\n-    pub(crate) fn rewrite(&mut self, rewriter: SyntaxRewriter) {\n-        if let Some(node) = rewriter.rewrite_root() {\n-            let new = rewriter.rewrite(&node);\n-            algo::diff(&node, &new).into_text_edit(&mut self.edit);\n-        }\n-    }\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n         let file_system_edit =\n             FileSystemEdit::CreateFile { dst: dst, initial_contents: content.into() };"}, {"sha": "e3095f26b5c652f1d52266490984d7a9503c56a5", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 33, "deletions": 57, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=526040eea8886a748dfd0a5449526f37a8bcf6af", "patch": "@@ -4,10 +4,10 @@ use ide_db::{\n     defs::{Definition, NameRefClass},\n     search::SearchScope,\n };\n+use stdx::never;\n use syntax::{\n-    algo::SyntaxRewriter,\n     ast::{self, make},\n-    AstNode, Direction, SyntaxNode, SyntaxToken, T,\n+    ted, AstNode, Direction, SyntaxNode, SyntaxToken, T,\n };\n \n use crate::{\n@@ -42,6 +42,7 @@ use crate::{\n // ```\n pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let star = ctx.find_token_syntax_at_offset(T![*])?;\n+    let use_tree = star.parent().and_then(ast::UseTree::cast)?;\n     let (parent, mod_path) = find_parent_and_path(&star)?;\n     let target_module = match ctx.sema.resolve_path(&mod_path)? {\n         PathResolution::Def(ModuleDef::Module(it)) => it,\n@@ -53,17 +54,39 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n \n     let refs_in_target = find_refs_in_mod(ctx, target_module, Some(current_module))?;\n     let imported_defs = find_imported_defs(ctx, star)?;\n-    let names_to_import = find_names_to_import(ctx, refs_in_target, imported_defs);\n \n     let target = parent.clone().either(|n| n.syntax().clone(), |n| n.syntax().clone());\n     acc.add(\n         AssistId(\"expand_glob_import\", AssistKind::RefactorRewrite),\n         \"Expand glob import\",\n         target.text_range(),\n         |builder| {\n-            let mut rewriter = SyntaxRewriter::default();\n-            replace_ast(&mut rewriter, parent, mod_path, names_to_import);\n-            builder.rewrite(rewriter);\n+            let use_tree = builder.make_ast_mut(use_tree);\n+\n+            let names_to_import = find_names_to_import(ctx, refs_in_target, imported_defs);\n+            let expanded = make::use_tree_list(names_to_import.iter().map(|n| {\n+                let path =\n+                    make::path_unqualified(make::path_segment(make::name_ref(&n.to_string())));\n+                make::use_tree(path, None, None, false)\n+            }))\n+            .clone_for_update();\n+\n+            match use_tree.star_token() {\n+                Some(star) => {\n+                    let needs_braces = use_tree.path().is_some() && names_to_import.len() > 1;\n+                    if needs_braces {\n+                        ted::replace(star, expanded.syntax())\n+                    } else {\n+                        let without_braces = expanded\n+                            .syntax()\n+                            .children_with_tokens()\n+                            .filter(|child| !matches!(child.kind(), T!['{'] | T!['}']))\n+                            .collect();\n+                        ted::replace_with_many(star, without_braces)\n+                    }\n+                }\n+                None => never!(),\n+            }\n         },\n     )\n }\n@@ -232,53 +255,6 @@ fn find_names_to_import(\n     used_refs.0.iter().map(|r| r.visible_name.clone()).collect()\n }\n \n-fn replace_ast(\n-    rewriter: &mut SyntaxRewriter,\n-    parent: Either<ast::UseTree, ast::UseTreeList>,\n-    path: ast::Path,\n-    names_to_import: Vec<Name>,\n-) {\n-    let existing_use_trees = match parent.clone() {\n-        Either::Left(_) => vec![],\n-        Either::Right(u) => u\n-            .use_trees()\n-            .filter(|n|\n-            // filter out star\n-            n.star_token().is_none())\n-            .collect(),\n-    };\n-\n-    let new_use_trees: Vec<ast::UseTree> = names_to_import\n-        .iter()\n-        .map(|n| {\n-            let path = make::path_unqualified(make::path_segment(make::name_ref(&n.to_string())));\n-            make::use_tree(path, None, None, false)\n-        })\n-        .collect();\n-\n-    let use_trees = [&existing_use_trees[..], &new_use_trees[..]].concat();\n-\n-    match use_trees.as_slice() {\n-        [name] => {\n-            if let Some(end_path) = name.path() {\n-                rewriter.replace_ast(\n-                    &parent.left_or_else(|tl| tl.parent_use_tree()),\n-                    &make::use_tree(make::path_concat(path, end_path), None, None, false),\n-                );\n-            }\n-        }\n-        names => match &parent {\n-            Either::Left(parent) => rewriter.replace_ast(\n-                parent,\n-                &make::use_tree(path, Some(make::use_tree_list(names.to_owned())), None, false),\n-            ),\n-            Either::Right(parent) => {\n-                rewriter.replace_ast(parent, &make::use_tree_list(names.to_owned()))\n-            }\n-        },\n-    };\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -350,7 +326,7 @@ mod foo {\n     pub fn f() {}\n }\n \n-use foo::{f, Baz, Bar};\n+use foo::{Baz, Bar, f};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -389,7 +365,7 @@ mod foo {\n }\n \n use foo::Bar;\n-use foo::{f, Baz};\n+use foo::{Baz, f};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -439,7 +415,7 @@ mod foo {\n     }\n }\n \n-use foo::{bar::{f, Baz, Bar}, baz::*};\n+use foo::{bar::{Baz, Bar, f}, baz::*};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -891,7 +867,7 @@ mod foo {\n     pub struct Bar;\n }\n \n-use foo::Bar;\n+use foo::{Bar};\n \n struct Baz {\n     bar: Bar"}, {"sha": "a50c0dbca6aa53f0a9f001eb20dc5366222b428e", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526040eea8886a748dfd0a5449526f37a8bcf6af/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=526040eea8886a748dfd0a5449526f37a8bcf6af", "patch": "@@ -125,8 +125,11 @@ pub fn remove_all_iter(range: impl IntoIterator<Item = SyntaxElement>) {\n }\n \n pub fn replace(old: impl Element, new: impl Element) {\n+    replace_with_many(old, vec![new.syntax_element()])\n+}\n+pub fn replace_with_many(old: impl Element, new: Vec<SyntaxElement>) {\n     let old = old.syntax_element();\n-    replace_all(old.clone()..=old, vec![new.syntax_element()])\n+    replace_all(old.clone()..=old, new)\n }\n pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>) {\n     let start = range.start().index();"}]}