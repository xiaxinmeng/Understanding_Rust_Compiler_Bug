{"sha": "2a23af63418a3b7c069ab414e3477184893eabcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjNhZjYzNDE4YTNiN2MwNjlhYjQxNGUzNDc3MTg0ODkzZWFiY2I=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-08T04:26:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-08T04:26:29Z"}, "message": "Rollup merge of #85985 - Lionelf329:master, r=joshtriplett\n\nClarify documentation of slice sorting methods\n\nAfter reading about [this](https://polkadot.network/a-polkadot-postmortem-24-05-2021/), I realized that although the documentation of these methods is not ambiguous in its current state, it is very easy to read it and erroneously assume that their exact behaviour can be relied upon to be deterministic. Although the docs make no guarantees about which index is returned when there are multiple matches, being more explicit about when and how their determinism can be relied upon should help prevent people from making this mistake in the future.\n\nr? ``@steveklabnik``", "tree": {"sha": "7fadb2213b5a0bbde51dbc2d70b20e76215efc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fadb2213b5a0bbde51dbc2d70b20e76215efc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a23af63418a3b7c069ab414e3477184893eabcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvvF1CRBK7hj4Ov3rIwAAUhMIAC9V7O9cKIb+vijyXBS7d8Lx\nSwm0fMhpRvz3OTDDOMWSGpNhxQcYCnBlCfxbWrkUugfBpKwL62IGvM3y8urjtl4A\nviKxpVX1jXi3+7XgrlLdZSva3XMmoqG6Tc+S9xCGC4ljZB4Djr//8rAb7wurDrVa\nwYbaAG7sPMNvSpQPt7yvE9cMnwSST+3qGaS7wuxF5yP4PWb3AmGwlxNXzWsGQBn6\nBf+X4BxeM0pH8Xg1SnVbzMWZXGg1Kxs+/gu6BfWOXuL1fzwynYbemw4cktFNwX/F\nYWFcSKadU5RG0bTdtXOksQcdyppHQgie8SW4Zx3kmUZB7omNSdc4qNUnYfoHqf4=\n=bWmP\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fadb2213b5a0bbde51dbc2d70b20e76215efc29\nparent 3502bff9002cc36b7cb3eeb58260e593c5d8af7c\nparent fddf012177671110caa96c4d9036199a0b91b8e7\nauthor Yuki Okushi <jtitor@2k36.org> 1623126389 +0900\ncommitter GitHub <noreply@github.com> 1623126389 +0900\n\nRollup merge of #85985 - Lionelf329:master, r=joshtriplett\n\nClarify documentation of slice sorting methods\n\nAfter reading about [this](https://polkadot.network/a-polkadot-postmortem-24-05-2021/), I realized that although the documentation of these methods is not ambiguous in its current state, it is very easy to read it and erroneously assume that their exact behaviour can be relied upon to be deterministic. Although the docs make no guarantees about which index is returned when there are multiple matches, being more explicit about when and how their determinism can be relied upon should help prevent people from making this mistake in the future.\n\nr? ``@steveklabnik``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a23af63418a3b7c069ab414e3477184893eabcb", "html_url": "https://github.com/rust-lang/rust/commit/2a23af63418a3b7c069ab414e3477184893eabcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a23af63418a3b7c069ab414e3477184893eabcb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3502bff9002cc36b7cb3eeb58260e593c5d8af7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3502bff9002cc36b7cb3eeb58260e593c5d8af7c", "html_url": "https://github.com/rust-lang/rust/commit/3502bff9002cc36b7cb3eeb58260e593c5d8af7c"}, {"sha": "fddf012177671110caa96c4d9036199a0b91b8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fddf012177671110caa96c4d9036199a0b91b8e7", "html_url": "https://github.com/rust-lang/rust/commit/fddf012177671110caa96c4d9036199a0b91b8e7"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "0e5c5ee726e54f4ca07d734a330cd95653287a6d", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a23af63418a3b7c069ab414e3477184893eabcb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a23af63418a3b7c069ab414e3477184893eabcb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=2a23af63418a3b7c069ab414e3477184893eabcb", "patch": "@@ -2100,9 +2100,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2153,9 +2155,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2224,9 +2228,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///"}]}