{"sha": "c6f6101180f8f18008b819b4e438824048b90925", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjYxMDExODBmOGYxODAwOGI4MTliNGU0Mzg4MjQwNDhiOTA5MjU=", "commit": {"author": {"name": "Niklas Fiekas", "email": "niklas.fiekas@backscattering.de", "date": "2019-01-30T13:14:16Z"}, "committer": {"name": "Niklas Fiekas", "email": "niklas.fiekas@backscattering.de", "date": "2019-01-30T13:15:38Z"}, "message": "Allow #[repr(align(x))] on enums (#57996)", "tree": {"sha": "8f2cff5556adb5305211e3e2e438020bcdea64f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2cff5556adb5305211e3e2e438020bcdea64f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f6101180f8f18008b819b4e438824048b90925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f6101180f8f18008b819b4e438824048b90925", "html_url": "https://github.com/rust-lang/rust/commit/c6f6101180f8f18008b819b4e438824048b90925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f6101180f8f18008b819b4e438824048b90925/comments", "author": {"login": "niklasf", "id": 402777, "node_id": "MDQ6VXNlcjQwMjc3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/402777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niklasf", "html_url": "https://github.com/niklasf", "followers_url": "https://api.github.com/users/niklasf/followers", "following_url": "https://api.github.com/users/niklasf/following{/other_user}", "gists_url": "https://api.github.com/users/niklasf/gists{/gist_id}", "starred_url": "https://api.github.com/users/niklasf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niklasf/subscriptions", "organizations_url": "https://api.github.com/users/niklasf/orgs", "repos_url": "https://api.github.com/users/niklasf/repos", "events_url": "https://api.github.com/users/niklasf/events{/privacy}", "received_events_url": "https://api.github.com/users/niklasf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "niklasf", "id": 402777, "node_id": "MDQ6VXNlcjQwMjc3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/402777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niklasf", "html_url": "https://github.com/niklasf", "followers_url": "https://api.github.com/users/niklasf/followers", "following_url": "https://api.github.com/users/niklasf/following{/other_user}", "gists_url": "https://api.github.com/users/niklasf/gists{/gist_id}", "starred_url": "https://api.github.com/users/niklasf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niklasf/subscriptions", "organizations_url": "https://api.github.com/users/niklasf/orgs", "repos_url": "https://api.github.com/users/niklasf/repos", "events_url": "https://api.github.com/users/niklasf/events{/privacy}", "received_events_url": "https://api.github.com/users/niklasf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74256630117fedf479edbd1145cac47c88036aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/74256630117fedf479edbd1145cac47c88036aec", "html_url": "https://github.com/rust-lang/rust/commit/74256630117fedf479edbd1145cac47c88036aec"}], "stats": {"total": 111, "additions": 87, "deletions": 24}, "files": [{"sha": "1fd9bd20f3f0d928f3ac3776b56bcabd0e9cebe4", "filename": "src/doc/unstable-book/src/language-features/repr-align-enum.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -0,0 +1,26 @@\n+# `repr_align_enum`\n+\n+The tracking issue for this feature is: [#57996]\n+\n+[#57996]: https://github.com/rust-lang/rust/issues/57996\n+\n+------------------------\n+\n+The `repr_align_enum` feature allows using the `#[repr(align(x))]` attribute\n+on enums, similarly to structs.\n+\n+# Examples\n+\n+```rust\n+#![feature(repr_align_enum)]\n+\n+#[repr(align(8))]\n+enum Aligned {\n+    Foo,\n+    Bar { value: u32 },\n+}\n+\n+fn main() {\n+    assert_eq!(std::mem::align_of::<Aligned>(), 8);\n+}\n+```"}, {"sha": "9fac88fbbe9ab8c3b07f11f803ed90105e0e5695", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -187,8 +187,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n             };\n \n             let (article, allowed_targets) = match &*name.as_str() {\n-                \"C\" => {\n-                    is_c = true;\n+                \"C\" | \"align\" => {\n+                    is_c |= name == \"C\";\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n@@ -213,14 +213,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                         continue\n                     }\n                 }\n-                \"align\" => {\n-                    if target != Target::Struct &&\n-                            target != Target::Union {\n-                        (\"a\", \"struct or union\")\n-                    } else {\n-                        continue\n-                    }\n-                }\n                 \"transparent\" => {\n                     is_transparent = true;\n                     if target != Target::Struct {"}, {"sha": "218a3f52ee0b23e9ca157bf679c21ea8c250c11d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -461,6 +461,9 @@ declare_features! (\n \n     // #[optimize(X)]\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n+\n+    // #[repr(align(X))] on enums\n+    (active, repr_align_enum, \"1.34.0\", Some(57996), None),\n );\n \n declare_features! (\n@@ -1697,6 +1700,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Enum(..) => {\n+                for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n+                    for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n+                        if item.check_name(\"align\") {\n+                            gate_feature_post!(&self, repr_align_enum, attr.span,\n+                                               \"`#[repr(align(x))]` on enums is experimental\");\n+                        }\n+                    }\n+                }\n+            }\n+\n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,"}, {"sha": "265bae89b80c95136538945cb530006089d4c158", "filename": "src/test/run-pass/structs-enums/align-enum.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(repr_align_enum)]\n+\n+use std::mem;\n+\n+// Raising alignment\n+#[repr(align(8))]\n+enum Align8 {\n+    Foo { foo: u32 },\n+    Bar { bar: u32 },\n+}\n+\n+fn main() {\n+    assert_eq!(mem::align_of::<Align8>(), 8);\n+    assert_eq!(mem::size_of::<Align8>(), 8);\n+}"}, {"sha": "1df2947cbe2ddd565ec4fd9c814fd241b65e1314", "filename": "src/test/ui/attr-usage-repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -1,4 +1,5 @@\n #![feature(repr_simd)]\n+#![feature(repr_align_enum)]\n \n #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n fn f() {}\n@@ -18,7 +19,7 @@ struct SInt(f64, f64);\n #[repr(C)]\n enum EExtern { A, B }\n \n-#[repr(align(8))] //~ ERROR: attribute should be applied to struct\n+#[repr(align(8))]\n enum EAlign { A, B }\n \n #[repr(packed)] //~ ERROR: attribute should be applied to struct"}, {"sha": "abb8685e4cef0791a03abd1847eb552e8427dbe4", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -1,43 +1,35 @@\n error[E0517]: attribute should be applied to struct, enum or union\n-  --> $DIR/attr-usage-repr.rs:3:8\n+  --> $DIR/attr-usage-repr.rs:4:8\n    |\n LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n-  --> $DIR/attr-usage-repr.rs:15:8\n+  --> $DIR/attr-usage-repr.rs:16:8\n    |\n LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:21:8\n-   |\n-LL | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n-   |        ^^^^^^^^\n-LL | enum EAlign { A, B }\n-   | -------------------- not a struct or union\n-\n-error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:24:8\n+  --> $DIR/attr-usage-repr.rs:25:8\n    |\n LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n-  --> $DIR/attr-usage-repr.rs:27:8\n+  --> $DIR/attr-usage-repr.rs:28:8\n    |\n LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^\n LL | enum ESimd { A, B }\n    | ------------------- not a struct\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0517`."}, {"sha": "f8e68a9de015be5604a7e1055870bb036ea20d78", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -0,0 +1,10 @@\n+#[repr(align(16))]\n+struct Foo(u64);\n+\n+#[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+enum Bar {\n+    Foo { foo: Foo },\n+    Baz,\n+}\n+\n+fn main() { }"}, {"sha": "6def25f9651184f67d5e17a36f6ed5d2f08d75ea", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6101180f8f18008b819b4e438824048b90925/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr?ref=c6f6101180f8f18008b819b4e438824048b90925", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+  --> $DIR/feature-gate-repr_align_enum.rs:4:1\n+   |\n+LL | #[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_align_enum)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}