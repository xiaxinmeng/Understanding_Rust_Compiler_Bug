{"sha": "99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Yzk2YzViZmU2N2NjYmY3ZmMzNzk0NThiOGJjZjk1MTNiZjliN2Q=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-01T20:49:36Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-01T21:06:47Z"}, "message": "driver: replace `lazy_static` by `SyncLazy` from std", "tree": {"sha": "46a4b3ead2a2c852662b9df0c4444d896c3eba3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a4b3ead2a2c852662b9df0c4444d896c3eba3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "html_url": "https://github.com/rust-lang/rust/commit/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a7204983a28177b296a3dcd8632540a6fcee1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7204983a28177b296a3dcd8632540a6fcee1a", "html_url": "https://github.com/rust-lang/rust/commit/73a7204983a28177b296a3dcd8632540a6fcee1a"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "f94d95d2dc8381bf87a5c107f80a653c49976cab", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "patch": "@@ -3439,7 +3439,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"lazy_static\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "0d9dcb262b26986b41de0f8af2a2a6c0cdc07795", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "patch": "@@ -8,7 +8,6 @@ edition = \"2018\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-lazy_static = \"1.0\"\n libc = \"0.2\"\n tracing = { version = \"0.1.18\", features = [\"release_max_level_info\"]  }\n tracing-subscriber = { version = \"0.2.10\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }"}, {"sha": "c277e314d0ec0c3d9f21e2001c8d3afe6effaf01", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "patch": "@@ -11,8 +11,6 @@\n \n #[macro_use]\n extern crate tracing;\n-#[macro_use]\n-extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n@@ -49,6 +47,7 @@ use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io::{self, Read, Write};\n+use std::lazy::SyncLazy;\n use std::mem;\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n@@ -1142,13 +1141,12 @@ pub fn catch_with_exit_code(f: impl FnOnce() -> interface::Result<()>) -> i32 {\n     }\n }\n \n-lazy_static! {\n-    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n+static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    SyncLazy::new(|| {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(|info| report_ice(info, BUG_REPORT_URL)));\n         hook\n-    };\n-}\n+    });\n \n /// Prints the ICE message, including backtrace and query stack.\n ///\n@@ -1223,7 +1221,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n ///\n /// A custom rustc driver can skip calling this to set up a custom ICE hook.\n pub fn install_ice_hook() {\n-    lazy_static::initialize(&DEFAULT_HOOK);\n+    SyncLazy::force(&DEFAULT_HOOK);\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's"}, {"sha": "fc122db8ac1b1f2502c2079bdf10e6c3fe53ea17", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=99c96c5bfe67ccbf7fc379458b8bcf9513bf9b7d", "patch": "@@ -590,12 +590,13 @@ pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n-pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &'static BuiltinAttribute>> = SyncLazy::new(|| {\n-    let mut map = FxHashMap::default();\n-    for attr in BUILTIN_ATTRIBUTES.iter() {\n-        if map.insert(attr.0, attr).is_some() {\n-            panic!(\"duplicate builtin attribute `{}`\", attr.0);\n+pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &'static BuiltinAttribute>> =\n+    SyncLazy::new(|| {\n+        let mut map = FxHashMap::default();\n+        for attr in BUILTIN_ATTRIBUTES.iter() {\n+            if map.insert(attr.0, attr).is_some() {\n+                panic!(\"duplicate builtin attribute `{}`\", attr.0);\n+            }\n         }\n-    }\n-    map\n-});\n+        map\n+    });"}]}