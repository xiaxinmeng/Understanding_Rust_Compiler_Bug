{"sha": "dbcb74e247b892a5174524bbbafbe93c51c53f65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiY2I3NGUyNDdiODkyYTUxNzQ1MjRiYmJhZmJlOTNjNTFjNTNmNjU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-31T19:07:44Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-01T14:54:22Z"}, "message": "extra: Replace `for` with `do { .. }` expr where internal iterators are used", "tree": {"sha": "df2939f4665d120716e47f586bd0692eaf68f6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2939f4665d120716e47f586bd0692eaf68f6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbcb74e247b892a5174524bbbafbe93c51c53f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcb74e247b892a5174524bbbafbe93c51c53f65", "html_url": "https://github.com/rust-lang/rust/commit/dbcb74e247b892a5174524bbbafbe93c51c53f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbcb74e247b892a5174524bbbafbe93c51c53f65/comments", "author": null, "committer": null, "parents": [{"sha": "b18bd785ec489c5c0ae9f84e8144a37e414cdee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18bd785ec489c5c0ae9f84e8144a37e414cdee5", "html_url": "https://github.com/rust-lang/rust/commit/b18bd785ec489c5c0ae9f84e8144a37e414cdee5"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "31acb5bd498739cb48889d6c243fec36e9bd83ba", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=dbcb74e247b892a5174524bbbafbe93c51c53f65", "patch": "@@ -72,11 +72,12 @@ impl Drop for Arena {\n     fn drop(&self) {\n         unsafe {\n             destroy_chunk(&self.head);\n-            for self.chunks.each |chunk| {\n+            do self.chunks.each |chunk| {\n                 if !chunk.is_pod {\n                     destroy_chunk(chunk);\n                 }\n-            }\n+                true\n+            };\n         }\n     }\n }"}, {"sha": "c2ea2dee82cfc5b833a75e7e240878588566b655", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=dbcb74e247b892a5174524bbbafbe93c51c53f65", "patch": "@@ -646,9 +646,10 @@ impl BitvSet {\n     /// Creates a new bit vector set from the given bit vector\n     pub fn from_bitv(bitv: Bitv) -> BitvSet {\n         let mut size = 0;\n-        for bitv.ones |_| {\n+        do bitv.ones |_| {\n             size += 1;\n-        }\n+            true\n+        };\n         let Bitv{rep, _} = bitv;\n         match rep {\n             Big(b) => BitvSet{ size: size, bitv: b },\n@@ -1354,18 +1355,18 @@ mod tests {\n     fn test_small_clear() {\n         let mut b = Bitv::new(14, true);\n         b.clear();\n-        for b.ones |i| {\n-            fail!(\"found 1 at %?\", i);\n-        }\n+        do b.ones |i| {\n+            fail!(\"found 1 at %?\", i)\n+        };\n     }\n \n     #[test]\n     fn test_big_clear() {\n         let mut b = Bitv::new(140, true);\n         b.clear();\n-        for b.ones |i| {\n-            fail!(\"found 1 at %?\", i);\n-        }\n+        do b.ones |i| {\n+            fail!(\"found 1 at %?\", i)\n+        };\n     }\n \n     #[test]\n@@ -1400,10 +1401,11 @@ mod tests {\n \n         let mut i = 0;\n         let expected = [3, 5, 11, 77];\n-        for a.intersection(&b) |x| {\n+        do a.intersection(&b) |x| {\n             assert_eq!(*x, expected[i]);\n-            i += 1\n-        }\n+            i += 1;\n+            true\n+        };\n         assert_eq!(i, expected.len());\n     }\n \n@@ -1423,10 +1425,11 @@ mod tests {\n \n         let mut i = 0;\n         let expected = [1, 5, 500];\n-        for a.difference(&b) |x| {\n+        do a.difference(&b) |x| {\n             assert_eq!(*x, expected[i]);\n-            i += 1\n-        }\n+            i += 1;\n+            true\n+        };\n         assert_eq!(i, expected.len());\n     }\n \n@@ -1448,10 +1451,11 @@ mod tests {\n \n         let mut i = 0;\n         let expected = [1, 5, 11, 14, 220];\n-        for a.symmetric_difference(&b) |x| {\n+        do a.symmetric_difference(&b) |x| {\n             assert_eq!(*x, expected[i]);\n-            i += 1\n-        }\n+            i += 1;\n+            true\n+        };\n         assert_eq!(i, expected.len());\n     }\n \n@@ -1476,10 +1480,11 @@ mod tests {\n \n         let mut i = 0;\n         let expected = [1, 3, 5, 9, 11, 13, 19, 24, 160];\n-        for a.union(&b) |x| {\n+        do a.union(&b) |x| {\n             assert_eq!(*x, expected[i]);\n-            i += 1\n-        }\n+            i += 1;\n+            true\n+        };\n         assert_eq!(i, expected.len());\n     }\n "}, {"sha": "e50693236fd98ed1a6ca4fc6b241953115b96241", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=dbcb74e247b892a5174524bbbafbe93c51c53f65", "patch": "@@ -678,9 +678,10 @@ pub mod groups {\n \n             // FIXME: #5516\n             let mut desc_rows = ~[];\n-            for each_split_within(desc_normalized_whitespace, 54) |substr| {\n+            do each_split_within(desc_normalized_whitespace, 54) |substr| {\n                 desc_rows.push(substr.to_owned());\n-            }\n+                true\n+            };\n \n             // FIXME: #5516\n             // wrapped description\n@@ -780,7 +781,7 @@ pub mod groups {\n     priv fn test_split_within() {\n         fn t(s: &str, i: uint, u: &[~str]) {\n             let mut v = ~[];\n-            for each_split_within(s, i) |s| { v.push(s.to_owned()) }\n+            do each_split_within(s, i) |s| { v.push(s.to_owned()); true };\n             assert!(v.iter().zip(u.iter()).all(|(a,b)| a == b));\n         }\n         t(\"\", 0, []);"}, {"sha": "0e8c50ac873027a8df3c0ca648fb8aa54b001a5d", "filename": "src/libextra/list.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=dbcb74e247b892a5174524bbbafbe93c51c53f65", "patch": "@@ -70,10 +70,11 @@ pub fn find<T:Clone>(ls: @List<T>, f: &fn(&T) -> bool) -> Option<T> {\n \n /// Returns true if a list contains an element with the given value\n pub fn has<T:Eq>(ls: @List<T>, elt: T) -> bool {\n-    for each(ls) |e| {\n-        if *e == elt { return true; }\n-    }\n-    return false;\n+    let mut found = false;\n+    do each(ls) |e| {\n+        if *e == elt { found = true; false } else { true }\n+    };\n+    return found;\n }\n \n /// Returns true if the list is empty"}, {"sha": "4e66870a9473f979828bf190b5b1f0fd639fb286", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcb74e247b892a5174524bbbafbe93c51c53f65/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=dbcb74e247b892a5174524bbbafbe93c51c53f65", "patch": "@@ -1001,11 +1001,12 @@ mod test_treemap {\n         assert!(m.insert(1, 2));\n \n         let mut n = 4;\n-        for m.each_reverse |k, v| {\n+        do m.each_reverse |k, v| {\n             assert_eq!(*k, n);\n             assert_eq!(*v, n * 2);\n             n -= 1;\n-        }\n+            true\n+        };\n     }\n \n     #[test]\n@@ -1277,10 +1278,11 @@ mod test_set {\n         assert!(m.insert(1));\n \n         let mut n = 4;\n-        for m.each_reverse |x| {\n+        do m.each_reverse |x| {\n             assert_eq!(*x, n);\n-            n -= 1\n-        }\n+            n -= 1;\n+            true\n+        };\n     }\n \n     fn check(a: &[int], b: &[int], expected: &[int],\n@@ -1292,10 +1294,11 @@ mod test_set {\n         foreach y in b.iter() { assert!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        for f(&set_a, &set_b) |x| {\n+        do f(&set_a, &set_b) |x| {\n             assert_eq!(*x, expected[i]);\n             i += 1;\n-        }\n+            true\n+        };\n         assert_eq!(i, expected.len());\n     }\n "}]}