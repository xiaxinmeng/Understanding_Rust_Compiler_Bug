{"sha": "77cec811b44ff5931251b5fcaf5594b63dae0afa", "node_id": "C_kwDOAAsO6NoAKDc3Y2VjODExYjQ0ZmY1OTMxMjUxYjVmY2FmNTU5NGI2M2RhZTBhZmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-01-01T18:01:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-01-01T18:01:46Z"}, "message": "exclude mutable references to !Unpin types from uniqueness guarantees", "tree": {"sha": "9b183ee2698b35e4cec2feda1f83cb0cf3062595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b183ee2698b35e4cec2feda1f83cb0cf3062595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77cec811b44ff5931251b5fcaf5594b63dae0afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77cec811b44ff5931251b5fcaf5594b63dae0afa", "html_url": "https://github.com/rust-lang/rust/commit/77cec811b44ff5931251b5fcaf5594b63dae0afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77cec811b44ff5931251b5fcaf5594b63dae0afa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d307e6c1970d1edb63d6a08d332e0acdb72c5cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d307e6c1970d1edb63d6a08d332e0acdb72c5cc5", "html_url": "https://github.com/rust-lang/rust/commit/d307e6c1970d1edb63d6a08d332e0acdb72c5cc5"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "37ecb749a4877a0b9f61ceb92cbf01e1ef8e7a9c", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77cec811b44ff5931251b5fcaf5594b63dae0afa/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cec811b44ff5931251b5fcaf5594b63dae0afa/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=77cec811b44ff5931251b5fcaf5594b63dae0afa", "patch": "@@ -9,7 +9,11 @@ use std::num::NonZeroU64;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::Mutability;\n use rustc_middle::mir::RetagKind;\n-use rustc_middle::ty::{self, layout::LayoutOf};\n+use rustc_middle::ty::{\n+    self,\n+    layout::{HasParamEnv, LayoutOf},\n+};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::Size;\n \n use crate::*;\n@@ -657,8 +661,16 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Make sure that raw pointers and mutable shared references are reborrowed \"weak\":\n         // There could be existing unique pointers reborrowed from them that should remain valid!\n         let perm = match kind {\n-            RefKind::Unique { two_phase: false } => Permission::Unique,\n-            RefKind::Unique { two_phase: true } => Permission::SharedReadWrite,\n+            RefKind::Unique { two_phase: false }\n+                if place.layout.ty.is_unpin(this.tcx.at(DUMMY_SP), this.param_env()) =>\n+            {\n+                // Only if the type is unpin do we actually enforce uniqueness\n+                Permission::Unique\n+            }\n+            RefKind::Unique { .. } => {\n+                // Two-phase references and !Unpin references are treated as SharedReadWrite\n+                Permission::SharedReadWrite\n+            }\n             RefKind::Raw { mutable: true } => Permission::SharedReadWrite,\n             RefKind::Shared | RefKind::Raw { mutable: false } => {\n                 // Shared references and *const are a whole different kind of game, the"}, {"sha": "01ce8a61418cfc91c0dd2fafb21812ed51405726", "filename": "tests/run-pass/stacked-borrows/generators-self-referential.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/77cec811b44ff5931251b5fcaf5594b63dae0afa/tests%2Frun-pass%2Fstacked-borrows%2Fgenerators-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cec811b44ff5931251b5fcaf5594b63dae0afa/tests%2Frun-pass%2Fstacked-borrows%2Fgenerators-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fgenerators-self-referential.rs?ref=77cec811b44ff5931251b5fcaf5594b63dae0afa", "patch": "@@ -0,0 +1,34 @@\n+// See https://github.com/rust-lang/unsafe-code-guidelines/issues/148:\n+// this fails when Stacked Borrows is strictly applied even to `!Unpin` types.\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    ops::{Generator, GeneratorState},\n+    pin::Pin,\n+};\n+\n+fn firstn() -> impl Generator<Yield = u64, Return = ()> {\n+    static move || {\n+        let mut num = 0;\n+        let num = &mut num;\n+\n+        yield *num;\n+        *num += 1; //~ ERROR: borrow stack\n+\n+        yield *num;\n+        *num += 1;\n+\n+        yield *num;\n+        *num += 1;\n+    }\n+}\n+\n+fn main() {\n+    let mut generator_iterator = firstn();\n+    let mut pin = unsafe { Pin::new_unchecked(&mut generator_iterator) };\n+    let mut sum = 0;\n+    while let GeneratorState::Yielded(x) = pin.as_mut().resume(()) {\n+        sum += x;\n+    }\n+    assert_eq!(sum, 3);\n+}"}]}