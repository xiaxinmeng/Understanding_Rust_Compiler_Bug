{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMzAxM2NhYjNhODYxMjI0ZmQ1NWY0OTRjOGJlMWNiMDM0OWViNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T02:45:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T02:45:08Z"}, "message": "Auto merge of #73528 - Manishearth:rollup-7djz8nd, r=Manishearth\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #71420 (Specialization is unsound)\n - #71899 (Refactor `try_find` a little)\n - #72689 (add str to common types)\n - #72791 (update coerce docs and unify relevant tests)\n - #72934 (forbid mutable references in all constant contexts except for const-fns)\n - #73027 (Make `need_type_info_err` more conservative)\n - #73347 (Diagnose use of incompatible sanitizers)\n - #73359 (shim.rs: avoid creating `Call` terminators calling `Self`)\n - #73399 (Clean up E0668 explanation)\n - #73436 (Clean up E0670 explanation)\n - #73440 (Add src/librustdoc as an alias for src/tools/rustdoc)\n - #73442 (pretty/mir: const value enums with no variants)\n - #73452 (Unify region variables when projecting associated types)\n - #73458 (Use alloc::Layout in DroplessArena API)\n - #73484 (Update the doc for std::prelude to the correct behavior)\n - #73506 (Bump Rustfmt and RLS)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1252179bcb152e2712bda63c7a51bedbf772c783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1252179bcb152e2712bda63c7a51bedbf772c783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c5cd9a64d8537236626c4ccbed39a924cd38e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c5cd9a64d8537236626c4ccbed39a924cd38e2", "html_url": "https://github.com/rust-lang/rust/commit/34c5cd9a64d8537236626c4ccbed39a924cd38e2"}, {"sha": "3e40cca65ab5b0f862a5c538a3aec5c55683688b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e40cca65ab5b0f862a5c538a3aec5c55683688b", "html_url": "https://github.com/rust-lang/rust/commit/3e40cca65ab5b0f862a5c538a3aec5c55683688b"}], "stats": {"total": 3395, "additions": 2547, "deletions": 848}, "files": [{"sha": "5bb6cda64cba87a7387f6a9a4ac3984ca95da7a8", "filename": "Cargo.lock", "status": "modified", "additions": 72, "deletions": 68, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2780,9 +2780,9 @@ dependencies = [\n \n [[package]]\n name = \"racer\"\n-version = \"2.1.34\"\n+version = \"2.1.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cc9caecf1286a3ed28d3ae35207a178ba12e58de95540781e5c6cba05e0f0833\"\n+checksum = \"421174f19211ba9e5fda34aa0cbc292188aae8e0cfbff4aebbae23f1a416bfb3\"\n dependencies = [\n  \"bitflags\",\n  \"clap\",\n@@ -3207,43 +3207,38 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rustc-ap-arena\"\n-version = \"659.0.0\"\n+name = \"rustc-ap-rustc_arena\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fdaf0295fc40b10ec1091aad1a1760b4bb3b4e7c4f77d543d1a2e9d50a01e6b1\"\n+checksum = \"0c6683b49209f8b132bec33dc6b6c8f9958c8c94eb3586d4cb495e092b61c1da\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n  \"smallvec 1.4.0\",\n ]\n \n-[[package]]\n-name = \"rustc-ap-graphviz\"\n-version = \"659.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8028e8cdb4eb71810d0c22a5a5e1e3106c81123be63ce7f044b6d4ac100d8941\"\n-\n [[package]]\n name = \"rustc-ap-rustc_ast\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"16e9e502bb3a5568433db1cf2fb1f1e1074934636069cf744ad7c77b58e1428e\"\n+checksum = \"5b21784d92fb2d584800f528866f00fe814f73abda794f406bfd1fbb2f1ca7f7\"\n dependencies = [\n+ \"bitflags\",\n  \"log\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_index\",\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-ap-rustc_macros\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_span\",\n- \"rustc-ap-serialize\",\n  \"scoped-tls\",\n  \"smallvec 1.4.0\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_ast_passes\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"faf35ffecab28f97f7ac01cf6a13afaca6408529d15eb95f317a43b2ffb88933\"\n+checksum = \"820c46fde7ef1df0432073090d775f097b7279ca75ea34ba954081ce4b884d4c\"\n dependencies = [\n  \"itertools 0.8.0\",\n  \"log\",\n@@ -3260,38 +3255,39 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3684ed43dc552f1e030e3f7a5a300a7a834bdda4e9e00ab80284be4220d8c603\"\n+checksum = \"013db7dd198fe95962d2cefa5bd0b350cf2028af77c169b17b4baa9c3bbf77d1\"\n dependencies = [\n  \"log\",\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_span\",\n+ \"rustc-ap-rustc_target\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"31b413927daa666983b3b49227f9ac218aa29254546abdb585f20cd71c391870\"\n+checksum = \"35b5a85c90eb341eec543600ffdd9e262da5ea72a73a23ae4ca2f4ab8cd1a188\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_pretty\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_errors\",\n  \"rustc-ap-rustc_feature\",\n  \"rustc-ap-rustc_macros\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n- \"rustc-ap-serialize\",\n  \"version_check\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4b1c6069e5c522657f1c6f5ab33074e097092f48e804cc896d337e319aacbd60\"\n+checksum = \"b92e4c6cb6c43ee9031a71709dc12853b358253c2b41d12a26379994fab625e0\"\n dependencies = [\n  \"bitflags\",\n  \"cfg-if\",\n@@ -3303,10 +3299,11 @@ dependencies = [\n  \"libc\",\n  \"log\",\n  \"measureme\",\n+ \"once_cell\",\n  \"parking_lot 0.10.2\",\n- \"rustc-ap-graphviz\",\n+ \"rustc-ap-rustc_graphviz\",\n  \"rustc-ap-rustc_index\",\n- \"rustc-ap-serialize\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-hash\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n@@ -3318,16 +3315,16 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c374e89b3c9714869ef86076942155383804ba6778c26be2169d324563c31f9\"\n+checksum = \"6b0aa79423260c1b9e2f856e144e040f606b0f5d43644408375becf9d7bcdf86\"\n dependencies = [\n- \"annotate-snippets 0.6.1\",\n+ \"annotate-snippets 0.8.0\",\n  \"atty\",\n  \"log\",\n  \"rustc-ap-rustc_data_structures\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_span\",\n- \"rustc-ap-serialize\",\n  \"termcolor\",\n  \"termize\",\n  \"unicode-width\",\n@@ -3336,9 +3333,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_expand\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"259d2a7aa7a12f3c99a4ce4123643ec065f1a26f8e89be1f9bedd9757ea53fdc\"\n+checksum = \"c07d76ba2a1b7d4325a2ed21d6345ccebd89ddc6666a1535a6edd489fb4cbc11\"\n dependencies = [\n  \"log\",\n  \"rustc-ap-rustc_ast\",\n@@ -3350,17 +3347,17 @@ dependencies = [\n  \"rustc-ap-rustc_feature\",\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-ap-rustc_parse\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n- \"rustc-ap-serialize\",\n  \"smallvec 1.4.0\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0296fbc29b629d5ae2ebee1bbf0407bb22de04d26d87216c20899b79579ccb3\"\n+checksum = \"1bbd625705c1db42a0c7503736292813d7b76ada5da20578fb55c63228c80ab5\"\n dependencies = [\n  \"lazy_static\",\n  \"rustc-ap-rustc_data_structures\",\n@@ -3369,34 +3366,40 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"34734f6cc681399630acd836a14207c6b5b9671a290cc7cad0354b0a4d71b3c9\"\n+checksum = \"34cca6e2942fa0b059c582437ead666d5bcf20fa7c242599e2bbea9b609f29ae\"\n+\n+[[package]]\n+name = \"rustc-ap-rustc_graphviz\"\n+version = \"664.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"13d6a029b81f5e02da85763f82c135507f278a4a0c776432c728520563059529\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d1e4508753d71d3523209c2ca5086db15a1413e71ebf17ad5412bb7ced5e44c2\"\n+checksum = \"bae50852d303e230b2781c994513788136dc6c2fe4ebe032959f0b990a425767\"\n dependencies = [\n- \"rustc-ap-serialize\",\n+ \"rustc-ap-rustc_serialize\",\n  \"smallvec 1.4.0\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"42b9fcd8407e322908a721262fbc0b35b5f3c35bb173a26dd1e0070bde336e33\"\n+checksum = \"b7186e74aa2d31bf0e2454325fefcdf0a3da77d9344134592144b9e40d45b15d\"\n dependencies = [\n  \"unicode-xid 0.2.0\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d104115a689367d2e0bcd99f37e0ebd6b9c8c78bab0d9cbea5bae86323601b5\"\n+checksum = \"4fc1add04e9d2301164118660ee0bc3266e9a7b1973fc2303fdbe002a12e5401\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -3406,9 +3409,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"afaaab91853fc5a3916785ccae727a4433359d9787c260d42b96a2265fe5b287\"\n+checksum = \"9cd7fc4968bd60084f2fa4f280fa450b0cf98660a7983d6b93a7ae41b6d1d322\"\n dependencies = [\n  \"bitflags\",\n  \"log\",\n@@ -3423,11 +3426,21 @@ dependencies = [\n  \"unicode-normalization\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_serialize\"\n+version = \"664.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"00bf4c110271d9a2b7dfd2c6eb82e56fd80606a8bad6c102e158c54e44044046\"\n+dependencies = [\n+ \"indexmap\",\n+ \"smallvec 1.4.0\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86e756a57ce6ce1b868e35e64a7e10ab28d49ece80d7c661b07aff5afc6e5d2d\"\n+checksum = \"431cf962de71d4c03fb877d54f331ec36eca77350b0539017abc40a4410d6501\"\n dependencies = [\n  \"getopts\",\n  \"log\",\n@@ -3437,54 +3450,43 @@ dependencies = [\n  \"rustc-ap-rustc_errors\",\n  \"rustc-ap-rustc_feature\",\n  \"rustc-ap-rustc_fs_util\",\n- \"rustc-ap-rustc_index\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-rustc_target\",\n- \"rustc-ap-serialize\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21031c3396ee452f4c6e994b67513a633055c57c86d00336afd9d63149518f34\"\n+checksum = \"b912039640597624f4bcb75f1e1fcfa5710267d715a7f73a6336baef341b23d1\"\n dependencies = [\n  \"cfg-if\",\n  \"log\",\n  \"md-5\",\n- \"rustc-ap-arena\",\n+ \"rustc-ap-rustc_arena\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_index\",\n  \"rustc-ap-rustc_macros\",\n- \"rustc-ap-serialize\",\n+ \"rustc-ap-rustc_serialize\",\n  \"scoped-tls\",\n  \"sha-1\",\n  \"unicode-width\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ff21badfbead5b0050391eaad8840f2e4fcb03b6b0fc6006f447443529e9ae6e\"\n+checksum = \"51347a9dadc5ad0b5916cc12d42624b31955285ad13745dbe72f0140038b84e9\"\n dependencies = [\n  \"bitflags\",\n  \"log\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_index\",\n  \"rustc-ap-rustc_macros\",\n+ \"rustc-ap-rustc_serialize\",\n  \"rustc-ap-rustc_span\",\n- \"rustc-ap-serialize\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-serialize\"\n-version = \"659.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"768b5a305669d934522712bc13502962edfde5128ea63b9e7db4000410be1dc6\"\n-dependencies = [\n- \"indexmap\",\n- \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4278,6 +4280,7 @@ dependencies = [\n name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"getopts\",\n  \"log\",\n  \"num_cpus\",\n@@ -4481,16 +4484,16 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.15\"\n+version = \"1.4.18\"\n dependencies = [\n  \"annotate-snippets 0.6.1\",\n+ \"anyhow\",\n  \"bytecount\",\n  \"cargo_metadata 0.8.0\",\n  \"derive-new\",\n  \"diff\",\n  \"dirs\",\n  \"env_logger 0.6.2\",\n- \"failure\",\n  \"getopts\",\n  \"ignore\",\n  \"itertools 0.8.0\",\n@@ -4512,6 +4515,7 @@ dependencies = [\n  \"serde_json\",\n  \"structopt\",\n  \"term 0.6.0\",\n+ \"thiserror\",\n  \"toml\",\n  \"unicode-segmentation\",\n  \"unicode-width\","}, {"sha": "c92082a9423163e4ebf8ad4ea06df4cb131e198d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -481,7 +481,7 @@ impl Step for Rustdoc {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/rustdoc\")\n+        run.path(\"src/tools/rustdoc\").path(\"src/librustdoc\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "5e2e04c063bc483abff4700462958c6791e9573a", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -12,8 +12,7 @@ This feature allows for use of one of following sanitizers:\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=leak`,\n-`-Zsanitizer=memory` or `-Zsanitizer=thread`. Only a single sanitizer can be\n-enabled at a time.\n+`-Zsanitizer=memory` or `-Zsanitizer=thread`.\n \n # AddressSanitizer\n "}, {"sha": "530cf881f29da54dc8bede98ea50bcfdc3b696a5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2265,7 +2265,7 @@ pub trait Iterator {\n     }\n \n     /// Applies function to the elements of iterator and returns\n-    /// the first non-none result or the first error.\n+    /// the first true result or the first error.\n     ///\n     /// # Examples\n     ///\n@@ -2286,19 +2286,26 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n-    fn try_find<F, E, R>(&mut self, mut f: F) -> Result<Option<Self::Item>, E>\n+    fn try_find<F, R>(&mut self, f: F) -> Result<Option<Self::Item>, R::Error>\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> R,\n-        R: Try<Ok = bool, Error = E>,\n-    {\n-        self.try_fold((), move |(), x| match f(&x).into_result() {\n-            Ok(false) => LoopState::Continue(()),\n-            Ok(true) => LoopState::Break(Ok(x)),\n-            Err(x) => LoopState::Break(Err(x)),\n-        })\n-        .break_value()\n-        .transpose()\n+        R: Try<Ok = bool>,\n+    {\n+        #[inline]\n+        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> LoopState<(), Result<T, R::Error>>\n+        where\n+            F: FnMut(&T) -> R,\n+            R: Try<Ok = bool>,\n+        {\n+            move |(), x| match f(&x).into_result() {\n+                Ok(false) => LoopState::Continue(()),\n+                Ok(true) => LoopState::Break(Ok(x)),\n+                Err(x) => LoopState::Break(Err(x)),\n+            }\n+        }\n+\n+        self.try_fold((), check(f)).break_value().transpose()\n     }\n \n     /// Searches for an element in an iterator, returning its index."}, {"sha": "4e55452a4c31b647c93082b3d38a09793f047088", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -19,7 +19,7 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n #![feature(step_trait)]\n #![feature(step_trait_ext)]\n #![feature(str_internals)]"}, {"sha": "6cf2db3e2da49df40aaf317466053901d8099b38", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -22,6 +22,7 @@ extern crate alloc;\n use rustc_data_structures::cold_path;\n use smallvec::SmallVec;\n \n+use std::alloc::Layout;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::intrinsics;\n@@ -363,13 +364,15 @@ impl DroplessArena {\n         }\n     }\n \n-    /// Allocates a byte slice with specified size and alignment from the\n-    /// current memory chunk. Returns `None` if there is no free space left to\n-    /// satisfy the request.\n+    /// Allocates a byte slice with specified layout from the current memory\n+    /// chunk. Returns `None` if there is no free space left to satisfy the\n+    /// request.\n     #[inline]\n-    fn alloc_raw_without_grow(&self, bytes: usize, align: usize) -> Option<*mut u8> {\n+    fn alloc_raw_without_grow(&self, layout: Layout) -> Option<*mut u8> {\n         let ptr = self.ptr.get() as usize;\n         let end = self.end.get() as usize;\n+        let align = layout.align();\n+        let bytes = layout.size();\n         // The allocation request fits into the current chunk iff:\n         //\n         // let aligned = align_to(ptr, align);\n@@ -390,23 +393,23 @@ impl DroplessArena {\n     }\n \n     #[inline]\n-    pub fn alloc_raw(&self, bytes: usize, align: usize) -> *mut u8 {\n-        assert!(bytes != 0);\n+    pub fn alloc_raw(&self, layout: Layout) -> *mut u8 {\n+        assert!(layout.size() != 0);\n         loop {\n-            if let Some(a) = self.alloc_raw_without_grow(bytes, align) {\n+            if let Some(a) = self.alloc_raw_without_grow(layout) {\n                 break a;\n             }\n             // No free space left. Allocate a new chunk to satisfy the request.\n             // On failure the grow will panic or abort.\n-            self.grow(bytes);\n+            self.grow(layout.size());\n         }\n     }\n \n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         assert!(!mem::needs_drop::<T>());\n \n-        let mem = self.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n+        let mem = self.alloc_raw(Layout::for_value::<T>(&object)) as *mut T;\n \n         unsafe {\n             // Write into uninitialized memory.\n@@ -431,7 +434,7 @@ impl DroplessArena {\n         assert!(mem::size_of::<T>() != 0);\n         assert!(!slice.is_empty());\n \n-        let mem = self.alloc_raw(slice.len() * mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n+        let mem = self.alloc_raw(Layout::for_value::<[T]>(slice)) as *mut T;\n \n         unsafe {\n             mem.copy_from_nonoverlapping(slice.as_ptr(), slice.len());\n@@ -477,8 +480,8 @@ impl DroplessArena {\n                 if len == 0 {\n                     return &mut [];\n                 }\n-                let size = len.checked_mul(mem::size_of::<T>()).unwrap();\n-                let mem = self.alloc_raw(size, mem::align_of::<T>()) as *mut T;\n+\n+                let mem = self.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n                 unsafe { self.write_from_iter(iter, len, mem) }\n             }\n             (_, _) => {\n@@ -491,9 +494,8 @@ impl DroplessArena {\n                     // the content of the SmallVec\n                     unsafe {\n                         let len = vec.len();\n-                        let start_ptr = self\n-                            .alloc_raw(len * mem::size_of::<T>(), mem::align_of::<T>())\n-                            as *mut T;\n+                        let start_ptr =\n+                            self.alloc_raw(Layout::for_value::<[T]>(vec.as_slice())) as *mut T;\n                         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n                         vec.set_len(0);\n                         slice::from_raw_parts_mut(start_ptr, len)\n@@ -537,7 +539,7 @@ pub struct DropArena {\n impl DropArena {\n     #[inline]\n     pub unsafe fn alloc<T>(&self, object: T) -> &mut T {\n-        let mem = self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n+        let mem = self.arena.alloc_raw(Layout::new::<T>()) as *mut T;\n         // Write into uninitialized memory.\n         ptr::write(mem, object);\n         let result = &mut *mem;\n@@ -557,10 +559,7 @@ impl DropArena {\n         }\n         let len = vec.len();\n \n-        let start_ptr = self\n-            .arena\n-            .alloc_raw(len.checked_mul(mem::size_of::<T>()).unwrap(), mem::align_of::<T>())\n-            as *mut T;\n+        let start_ptr = self.arena.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n         // Reserve space for the destructors so we can't panic while adding them"}, {"sha": "6234ade8a161205165309340872ea6d00ad5e3c6", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{OptLevel, Sanitizer};\n+use rustc_session::config::{OptLevel, SanitizerSet};\n use rustc_session::Session;\n \n use crate::attributes;\n@@ -45,26 +45,16 @@ fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n \n /// Apply LLVM sanitize attributes.\n #[inline]\n-pub fn sanitize(cx: &CodegenCx<'ll, '_>, codegen_fn_flags: CodegenFnAttrFlags, llfn: &'ll Value) {\n-    if let Some(ref sanitizer) = cx.tcx.sess.opts.debugging_opts.sanitizer {\n-        match *sanitizer {\n-            Sanitizer::Address => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n-                    llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Memory => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n-                    llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Thread => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n-                    llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Leak => {}\n-        }\n+pub fn sanitize(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &'ll Value) {\n+    let enabled = cx.tcx.sess.opts.debugging_opts.sanitizer - no_sanitize;\n+    if enabled.contains(SanitizerSet::ADDRESS) {\n+        llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+    }\n+    if enabled.contains(SanitizerSet::MEMORY) {\n+        llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+    }\n+    if enabled.contains(SanitizerSet::THREAD) {\n+        llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n     }\n }\n \n@@ -123,9 +113,14 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Currently stack probes seem somewhat incompatible with the address\n     // sanitizer and thread sanitizer. With asan we're already protected from\n     // stack overflow anyway so we don't really need stack probes regardless.\n-    match cx.sess().opts.debugging_opts.sanitizer {\n-        Some(Sanitizer::Address | Sanitizer::Thread) => return,\n-        _ => {}\n+    if cx\n+        .sess()\n+        .opts\n+        .debugging_opts\n+        .sanitizer\n+        .intersects(SanitizerSet::ADDRESS | SanitizerSet::THREAD)\n+    {\n+        return;\n     }\n \n     // probestack doesn't play nice either with `-C profile-generate`.\n@@ -296,7 +291,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n-    sanitize(cx, codegen_fn_attrs.flags, llfn);\n+    sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated"}, {"sha": "868ce876a8192e76a0bbdf315cf821279794dce8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -21,7 +21,7 @@ use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::config::{self, Lto, OutputType, Passes, SanitizerSet, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel};\n@@ -394,12 +394,13 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let is_lto = opt_stage == llvm::OptStage::ThinLTO || opt_stage == llvm::OptStage::FatLTO;\n     // Sanitizer instrumentation is only inserted during the pre-link optimization stage.\n     let sanitizer_options = if !is_lto {\n-        config.sanitizer.as_ref().map(|s| llvm::SanitizerOptions {\n-            sanitize_memory: *s == Sanitizer::Memory,\n-            sanitize_thread: *s == Sanitizer::Thread,\n-            sanitize_address: *s == Sanitizer::Address,\n-            sanitize_recover: config.sanitizer_recover.contains(s),\n+        Some(llvm::SanitizerOptions {\n+            sanitize_address: config.sanitizer.contains(SanitizerSet::ADDRESS),\n+            sanitize_address_recover: config.sanitizer_recover.contains(SanitizerSet::ADDRESS),\n+            sanitize_memory: config.sanitizer.contains(SanitizerSet::MEMORY),\n+            sanitize_memory_recover: config.sanitizer_recover.contains(SanitizerSet::MEMORY),\n             sanitize_memory_track_origins: config.sanitizer_memory_track_origins as c_int,\n+            sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n         })\n     } else {\n         None\n@@ -600,25 +601,18 @@ pub(crate) unsafe fn optimize(\n }\n \n unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static mut llvm::Pass>) {\n-    let sanitizer = match &config.sanitizer {\n-        None => return,\n-        Some(s) => s,\n-    };\n-\n-    let recover = config.sanitizer_recover.contains(sanitizer);\n-    match sanitizer {\n-        Sanitizer::Address => {\n-            passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n-            passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n-        }\n-        Sanitizer::Memory => {\n-            let track_origins = config.sanitizer_memory_track_origins as c_int;\n-            passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n-        }\n-        Sanitizer::Thread => {\n-            passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n-        }\n-        Sanitizer::Leak => {}\n+    if config.sanitizer.contains(SanitizerSet::ADDRESS) {\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::ADDRESS);\n+        passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n+        passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n+    }\n+    if config.sanitizer.contains(SanitizerSet::MEMORY) {\n+        let track_origins = config.sanitizer_memory_track_origins as c_int;\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::MEMORY);\n+        passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n+    }\n+    if config.sanitizer.contains(SanitizerSet::THREAD) {\n+        passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n     }\n }\n "}, {"sha": "e99fb8dcae1e512d41048d144e3db5c788b8a882", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -29,12 +29,12 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::dep_graph;\n-use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::DebugInfo;\n+use rustc_session::config::{DebugInfo, SanitizerSet};\n use rustc_span::symbol::Symbol;\n \n use std::ffi::CString;\n@@ -132,7 +132,7 @@ pub fn compile_codegen_unit(\n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n             if let Some(entry) = maybe_create_entry_wrapper::<Builder<'_, '_, '_>>(&cx) {\n-                attributes::sanitize(&cx, CodegenFnAttrFlags::empty(), entry);\n+                attributes::sanitize(&cx, SanitizerSet::empty(), entry);\n             }\n \n             // Run replace-all-uses-with for statics that need it"}, {"sha": "64140747871fec68ca8b27a2ebdb516ad2f004e7", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -206,7 +206,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let len = s.as_str().len();\n         let cs = consts::ptrcast(\n             self.const_cstr(s, false),\n-            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)),\n+            self.type_ptr_to(self.layout_of(self.tcx.types.str_).llvm_type(self)),\n         );\n         (cs, self.const_usize(len as u64))\n     }"}, {"sha": "8063d97aa73a9706d36c92c86827b5130e874559", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -439,11 +439,12 @@ pub enum OptStage {\n /// LLVMRustSanitizerOptions\n #[repr(C)]\n pub struct SanitizerOptions {\n-    pub sanitize_memory: bool,\n-    pub sanitize_thread: bool,\n     pub sanitize_address: bool,\n-    pub sanitize_recover: bool,\n+    pub sanitize_address_recover: bool,\n+    pub sanitize_memory: bool,\n+    pub sanitize_memory_recover: bool,\n     pub sanitize_memory_track_origins: c_int,\n+    pub sanitize_thread: bool,\n }\n \n /// LLVMRelocMode"}, {"sha": "c7a58d9f2a2f6de03afc3cee6d02c7e46d6cac83", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n-use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, Sanitizer};\n+use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SanitizerSet};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n@@ -766,23 +766,26 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n-fn link_sanitizer_runtime(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n-    let sanitizer = match &sess.opts.debugging_opts.sanitizer {\n-        Some(s) => s,\n-        None => return,\n-    };\n-\n+fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     if crate_type != CrateType::Executable {\n         return;\n     }\n+    let sanitizer = sess.opts.debugging_opts.sanitizer;\n+    if sanitizer.contains(SanitizerSet::ADDRESS) {\n+        link_sanitizer_runtime(sess, linker, \"asan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::LEAK) {\n+        link_sanitizer_runtime(sess, linker, \"lsan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::MEMORY) {\n+        link_sanitizer_runtime(sess, linker, \"msan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::THREAD) {\n+        link_sanitizer_runtime(sess, linker, \"tsan\");\n+    }\n+}\n \n-    let name = match sanitizer {\n-        Sanitizer::Address => \"asan\",\n-        Sanitizer::Leak => \"lsan\",\n-        Sanitizer::Memory => \"msan\",\n-        Sanitizer::Thread => \"tsan\",\n-    };\n-\n+fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n     let default_sysroot = filesearch::get_or_default_sysroot();\n     let default_tlib =\n         filesearch::make_target_lib_path(&default_sysroot, sess.opts.target_triple.triple());\n@@ -1555,9 +1558,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia && crate_type == CrateType::Executable {\n-        let prefix = match sess.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => \"asan/\",\n-            _ => \"\",\n+        let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n+            \"asan/\"\n+        } else {\n+            \"\"\n         };\n         cmd.arg(format!(\"--dynamic-linker={}ld.so.1\", prefix));\n     }\n@@ -1581,7 +1585,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // OBJECT-FILES-YES, AUDIT-ORDER\n-    link_sanitizer_runtime(sess, crate_type, cmd);\n+    link_sanitizers(sess, crate_type, cmd);\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // Linker plugins should be specified early in the list of arguments"}, {"sha": "217ad57ddc9c399eb70607cbbeb51ec2ef65c5bd", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n-use rustc_session::config::{CrateType, Sanitizer};\n+use rustc_session::config::{CrateType, SanitizerSet};\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types())\n@@ -204,7 +204,7 @@ fn exported_symbols_provider_local(\n         }));\n     }\n \n-    if let Some(Sanitizer::Memory) = tcx.sess.opts.debugging_opts.sanitizer {\n+    if tcx.sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n         // Similar to profiling, preserve weak msan symbol during LTO.\n         const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n "}, {"sha": "23e0b9344ec91c2f0e3e8af4c8606a9694832714", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -29,7 +29,7 @@ use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n-use rustc_session::config::{Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::config::{Passes, SanitizerSet, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n@@ -86,8 +86,8 @@ pub struct ModuleConfig {\n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n \n-    pub sanitizer: Option<Sanitizer>,\n-    pub sanitizer_recover: Vec<Sanitizer>,\n+    pub sanitizer: SanitizerSet,\n+    pub sanitizer_recover: SanitizerSet,\n     pub sanitizer_memory_track_origins: usize,\n \n     // Flags indicating which outputs to produce.\n@@ -195,10 +195,10 @@ impl ModuleConfig {\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n \n-            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer.clone(), None),\n+            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer, SanitizerSet::empty()),\n             sanitizer_recover: if_regular!(\n-                sess.opts.debugging_opts.sanitizer_recover.clone(),\n-                vec![]\n+                sess.opts.debugging_opts.sanitizer_recover,\n+                SanitizerSet::empty()\n             ),\n             sanitizer_memory_track_origins: if_regular!(\n                 sess.opts.debugging_opts.sanitizer_memory_track_origins,"}, {"sha": "738b3bc7539a6f4aad28fdfa1e3dd9671d797136", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -444,6 +444,7 @@ E0760: include_str!(\"./error_codes/E0760.md\"),\n E0761: include_str!(\"./error_codes/E0761.md\"),\n E0762: include_str!(\"./error_codes/E0762.md\"),\n E0763: include_str!(\"./error_codes/E0763.md\"),\n+E0764: include_str!(\"./error_codes/E0764.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "b6fedfe53fce8ad44656ea4027f0168ae7eca780", "filename": "src/librustc_error_codes/error_codes/E0668.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,7 @@\n Malformed inline assembly rejected by LLVM.\n \n-LLVM checks the validity of the constraints and the assembly string passed to\n-it. This error implies that LLVM seems something wrong with the inline\n-assembly call.\n+Erroneous code example:\n \n-In particular, it can happen if you forgot the closing bracket of a register\n-constraint (see issue #51430):\n ```compile_fail,E0668\n #![feature(llvm_asm)]\n \n@@ -17,3 +13,10 @@ fn main() {\n     }\n }\n ```\n+\n+LLVM checks the validity of the constraints and the assembly string passed to\n+it. This error implies that LLVM seems something wrong with the inline\n+assembly call.\n+\n+In particular, it can happen if you forgot the closing bracket of a register\n+constraint (see issue #51430), like in the previous code example."}, {"sha": "74c1af06cf4ec6e48369905b79d671d1dbc2114a", "filename": "src/librustc_error_codes/error_codes/E0670.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0670.md", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0670.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0670.md?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n Rust 2015 does not permit the use of `async fn`.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0670\n async fn foo() {}"}, {"sha": "e9061f988ac5906203c29abc5f0b0f77c8721a3a", "filename": "src/librustc_error_codes/error_codes/E0764.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0764.md", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_error_codes%2Ferror_codes%2FE0764.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0764.md?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,39 @@\n+Mutable references (`&mut`) can only be used in constant functions, not statics\n+or constants. This limitation exists to prevent the creation of constants that\n+have a mutable reference in their final value. If you had a constant of `&mut\n+i32` type, you could modify the value through that reference, making the\n+constant essentially mutable. While there could be a more fine-grained scheme\n+in the future that allows mutable references if they are not \"leaked\" to the\n+final value, a more conservative approach was chosen for now. `const fn` do not\n+have this problem, as the borrow checker will prevent the `const fn` from\n+returning new mutable references.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0764\n+#![feature(const_fn)]\n+#![feature(const_mut_refs)]\n+\n+fn main() {\n+    const OH_NO: &'static mut usize = &mut 1; // error!\n+}\n+```\n+\n+Remember: you cannot use a function call inside a constant or static. However,\n+you can totally use it in constant functions:\n+\n+```\n+#![feature(const_fn)]\n+#![feature(const_mut_refs)]\n+\n+const fn foo(x: usize) -> usize {\n+    let mut y = 1;\n+    let z = &mut y;\n+    *z += x;\n+    y\n+}\n+\n+fn main() {\n+    const FOO: usize = foo(10); // ok!\n+}\n+```"}, {"sha": "7aadf58243f31574d9f4ae0c78a6e90590df79cb", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -596,4 +596,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::raw_dylib,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n+    sym::specialization,\n ];"}, {"sha": "2dc803b959533da68c74b26f9d0cfe64c5bb9140", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -314,18 +314,19 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             }\n \n             ty::ReVar(vid) => {\n-                let r = self\n+                let resolved_vid = self\n                     .infcx\n                     .unwrap()\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(self.tcx, vid);\n+                    .opportunistic_resolve_var(vid);\n                 debug!(\n                     \"canonical: region var found with vid {:?}, \\\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n+                let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n                 self.canonicalize_region_mode.canonicalize_free_region(self, r)\n             }\n "}, {"sha": "1687bcc1556367900976f3ce64074720feceabba", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -88,6 +88,17 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n         if let (None, Some(ty)) =\n             (self.found_local_pattern, self.node_ty_contains_target(local.hir_id))\n         {\n+            // FIXME: There's a trade-off here - we can either check that our target span\n+            // is contained in `local.span` or not. If we choose to check containment\n+            // we can avoid some spurious suggestions (see #72690), but we lose\n+            // the ability to report on things like:\n+            //\n+            // ```\n+            // let x = vec![];\n+            // ```\n+            //\n+            // because the target span will be in the macro expansion of `vec![]`.\n+            // At present we choose not to check containment.\n             self.found_local_pattern = Some(&*local.pat);\n             self.found_node_ty = Some(ty);\n         }\n@@ -99,8 +110,10 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n             if let (None, Some(ty)) =\n                 (self.found_arg_pattern, self.node_ty_contains_target(param.hir_id))\n             {\n-                self.found_arg_pattern = Some(&*param.pat);\n-                self.found_node_ty = Some(ty);\n+                if self.target_span.contains(param.pat.span) {\n+                    self.found_arg_pattern = Some(&*param.pat);\n+                    self.found_node_ty = Some(ty);\n+                }\n             }\n         }\n         intravisit::walk_body(self, body);"}, {"sha": "90d61a78f9b9996e5124a18d5c6a645b236371ac", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -50,10 +50,10 @@ pub struct RegionConstraintStorage<'tcx> {\n     /// R1 <= R2 and R2 <= R1 and (b) we unify the two regions in this\n     /// table. You can then call `opportunistic_resolve_var` early\n     /// which will map R1 and R2 to some common region (i.e., either\n-    /// R1 or R2). This is important when dropck and other such code\n-    /// is iterating to a fixed point, because otherwise we sometimes\n-    /// would wind up with a fresh stream of region variables that\n-    /// have been equated but appear distinct.\n+    /// R1 or R2). This is important when fulfillment, dropck and other such\n+    /// code is iterating to a fixed point, because otherwise we sometimes\n+    /// would wind up with a fresh stream of region variables that have been\n+    /// equated but appear distinct.\n     pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n \n     /// a flag set to true when we perform any unifications; this is used\n@@ -714,13 +714,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        rid: RegionVid,\n-    ) -> ty::Region<'tcx> {\n-        let vid = self.unification_table().probe_value(rid).min_vid;\n-        tcx.mk_region(ty::ReVar(vid))\n+    pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n+        self.unification_table().probe_value(rid).min_vid\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "74f365ced2373e8fdaca01cc099fc34905bf112e", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -46,51 +46,56 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-/// The opportunistic type and region resolver is similar to the\n-/// opportunistic type resolver, but also opportunistically resolves\n-/// regions. It is useful for canonicalization.\n-pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+/// The opportunistic region resolver opportunistically resolves regions\n+/// variables to the variable with the least variable id. It is used when\n+/// normlizing projections to avoid hitting the recursion limit by creating\n+/// many versions of a predicate for types that in the end have to unify.\n+///\n+/// If you want to resolve type and const variables as well, call\n+/// [InferCtxt::resolve_vars_if_possible] first.\n+pub struct OpportunisticRegionResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n-        OpportunisticTypeAndRegionResolver { infcx }\n+        OpportunisticRegionResolver { infcx }\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer() {\n+        if !t.has_infer_regions() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n-            let t0 = self.infcx.shallow_resolve(t);\n-            t0.super_fold_with(self)\n+            t.super_fold_with(self)\n         }\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(rid) => self\n-                .infcx\n-                .inner\n-                .borrow_mut()\n-                .unwrap_region_constraints()\n-                .opportunistic_resolve_var(self.tcx(), rid),\n+            ty::ReVar(rid) => {\n+                let resolved = self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .unwrap_region_constraints()\n+                    .opportunistic_resolve_var(rid);\n+                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+            }\n             _ => r,\n         }\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if !ct.needs_infer() {\n+        if !ct.has_infer_regions() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n-            let c0 = self.infcx.shallow_resolve(ct);\n-            c0.super_fold_with(self)\n+            ct.super_fold_with(self)\n         }\n     }\n }"}, {"sha": "a832c2decaaf6b0c3ebce274561f176297c0fa0e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -6,7 +6,9 @@ use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n-use rustc_session::config::{Externs, OutputType, OutputTypes, Sanitizer, SymbolManglingVersion};\n+use rustc_session::config::{\n+    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion,\n+};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::NativeLibKind;\n@@ -569,9 +571,9 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(report_delayed_bugs, true);\n     tracked!(run_dsymutil, false);\n-    tracked!(sanitizer, Some(Sanitizer::Address));\n+    tracked!(sanitizer, SanitizerSet::ADDRESS);\n     tracked!(sanitizer_memory_track_origins, 2);\n-    tracked!(sanitizer_recover, vec![Sanitizer::Address]);\n+    tracked!(sanitizer_recover, SanitizerSet::ADDRESS);\n     tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));"}, {"sha": "d2749f8529bed5b34baf7aa92ef5cff4b93d17ab", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,6 @@\n use crate::mir::mono::Linkage;\n use rustc_attr::{InlineAttr, OptimizeAttr};\n+use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n@@ -30,6 +31,9 @@ pub struct CodegenFnAttrs {\n     /// The `#[link_section = \"...\"]` attribute, or what executable section this\n     /// should be placed in.\n     pub link_section: Option<Symbol>,\n+    /// The `#[no_sanitize(...)]` attribute. Indicates sanitizers for which\n+    /// instrumentation should be disabled inside the annotated function.\n+    pub no_sanitize: SanitizerSet,\n }\n \n bitflags! {\n@@ -69,20 +73,12 @@ bitflags! {\n         const FFI_RETURNS_TWICE         = 1 << 10;\n         /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n-        /// `#[no_sanitize(address)]`: disables address sanitizer instrumentation\n-        const NO_SANITIZE_ADDRESS = 1 << 12;\n-        /// `#[no_sanitize(memory)]`: disables memory sanitizer instrumentation\n-        const NO_SANITIZE_MEMORY  = 1 << 13;\n-        /// `#[no_sanitize(thread)]`: disables thread sanitizer instrumentation\n-        const NO_SANITIZE_THREAD  = 1 << 14;\n-        /// All `#[no_sanitize(...)]` attributes.\n-        const NO_SANITIZE_ANY = Self::NO_SANITIZE_ADDRESS.bits | Self::NO_SANITIZE_MEMORY.bits | Self::NO_SANITIZE_THREAD.bits;\n         /// #[ffi_pure]: applies clang's `pure` attribute to a foreign function\n         /// declaration.\n-        const FFI_PURE = 1 << 15;\n+        const FFI_PURE                  = 1 << 12;\n         /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n         /// declaration.\n-        const FFI_CONST = 1 << 16;\n+        const FFI_CONST                 = 1 << 13;\n     }\n }\n \n@@ -98,6 +94,7 @@ impl CodegenFnAttrs {\n             target_features: vec![],\n             linkage: None,\n             link_section: None,\n+            no_sanitize: SanitizerSet::empty(),\n         }\n     }\n "}, {"sha": "1aae97cc2a894e6c6185aa354f67b5b70a6de3c3", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -244,6 +244,6 @@ pub enum ClosureOutlivesSubject<'tcx> {\n /// The constituent parts of an ADT or array.\n #[derive(Copy, Clone, Debug, HashStable)]\n pub struct DestructuredConst<'tcx> {\n-    pub variant: VariantIdx,\n+    pub variant: Option<VariantIdx>,\n     pub fields: &'tcx [&'tcx ty::Const<'tcx>],\n }"}, {"sha": "6380f8be98d138598f12de75fe59521af48d9ac7", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -143,6 +143,7 @@ pub struct CommonTypes<'tcx> {\n     pub u128: Ty<'tcx>,\n     pub f32: Ty<'tcx>,\n     pub f64: Ty<'tcx>,\n+    pub str_: Ty<'tcx>,\n     pub never: Ty<'tcx>,\n     pub self_param: Ty<'tcx>,\n \n@@ -816,6 +817,7 @@ impl<'tcx> CommonTypes<'tcx> {\n             u128: mk(Uint(ast::UintTy::U128)),\n             f32: mk(Float(ast::FloatTy::F32)),\n             f64: mk(Float(ast::FloatTy::F64)),\n+            str_: mk(Str),\n             self_param: mk(ty::Param(ty::ParamTy { index: 0, name: kw::SelfUpper })),\n \n             trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n@@ -2108,6 +2110,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Same a `self.mk_region(kind)`, but avoids accessing the interners if\n+    /// `*r == kind`.\n+    #[inline]\n+    pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {\n+        if *r == kind { r } else { self.mk_region(kind) }\n+    }\n+\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n@@ -2149,14 +2158,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    pub fn mk_str(self) -> Ty<'tcx> {\n-        self.mk_ty(Str)\n-    }\n-\n     #[inline]\n     pub fn mk_static_str(self) -> Ty<'tcx> {\n-        self.mk_imm_ref(self.lifetimes.re_static, self.mk_str())\n+        self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)\n     }\n \n     #[inline]"}, {"sha": "24dbf7b8c46719694ac08d863d293d91fb2c0723", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -87,6 +87,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n+    fn has_infer_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_INFER)\n+    }\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }"}, {"sha": "d628d6783d5b0d71f12ed4c9aaf900660dec040f", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -9,6 +9,11 @@ use rustc_macros::HashStable;\n \n use std::fmt;\n \n+/// A monomorphized `InstanceDef`.\n+///\n+/// Monomorphization happens on-the-fly and no monomorphized MIR is ever created. Instead, this type\n+/// simply couples a potentially generic `InstanceDef` with some substs, and codegen and const eval\n+/// will do all required substitution as they run.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n #[derive(HashStable, Lift)]\n pub struct Instance<'tcx> {\n@@ -18,10 +23,26 @@ pub struct Instance<'tcx> {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InstanceDef<'tcx> {\n+    /// A user-defined callable item.\n+    ///\n+    /// This includes:\n+    /// - `fn` items\n+    /// - closures\n+    /// - generators\n     Item(DefId),\n+\n+    /// An intrinsic `fn` item (with `\"rust-intrinsic\"` or `\"platform-intrinsic\"` ABI).\n+    ///\n+    /// Alongside `Virtual`, this is the only `InstanceDef` that does not have its own callable MIR.\n+    /// Instead, codegen and const eval \"magically\" evaluate calls to intrinsics purely in the\n+    /// caller.\n     Intrinsic(DefId),\n \n-    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n+    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self` (part of the\n+    /// `unsized_locals` feature).\n+    ///\n+    /// The generated shim will take `Self` via `*mut Self` - conceptually this is `&owned Self` -\n+    /// and dereference the argument to call the original function.\n     VtableShim(DefId),\n \n     /// `fn()` pointer where the function itself cannot be turned into a pointer.\n@@ -37,27 +58,31 @@ pub enum InstanceDef<'tcx> {\n     /// (the definition of the function itself).\n     ReifyShim(DefId),\n \n-    /// `<fn() as FnTrait>::call_*`\n+    /// `<fn() as FnTrait>::call_*` (generated `FnTrait` implementation for `fn()` pointers).\n+    ///\n     /// `DefId` is `FnTrait::call_*`.\n     ///\n     /// NB: the (`fn` pointer) type must currently be monomorphic to avoid double substitution\n     /// problems with the MIR shim bodies. `Instance::resolve` enforces this.\n     // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     FnPtrShim(DefId, Ty<'tcx>),\n \n-    /// `<dyn Trait as Trait>::fn`, \"direct calls\" of which are implicitly\n-    /// codegen'd as virtual calls.\n+    /// Dynamic dispatch to `<dyn Trait as Trait>::fn`.\n     ///\n-    /// NB: if this is reified to a `fn` pointer, a `ReifyShim` is used\n-    /// (see `ReifyShim` above for more details on that).\n+    /// This `InstanceDef` does not have callable MIR. Calls to `Virtual` instances must be\n+    /// codegen'd as virtual calls through the vtable.\n+    ///\n+    /// If this is reified to a `fn` pointer, a `ReifyShim` is used (see `ReifyShim` above for more\n+    /// details on that).\n     Virtual(DefId, usize),\n \n-    /// `<[mut closure] as FnOnce>::call_once`\n-    ClosureOnceShim {\n-        call_once: DefId,\n-    },\n+    /// `<[FnMut closure] as FnOnce>::call_once`.\n+    ///\n+    /// The `DefId` is the ID of the `call_once` method in `FnOnce`.\n+    ClosureOnceShim { call_once: DefId },\n \n     /// `core::ptr::drop_in_place::<T>`.\n+    ///\n     /// The `DefId` is for `core::ptr::drop_in_place`.\n     /// The `Option<Ty<'tcx>>` is either `Some(T)`, or `None` for empty drop\n     /// glue.\n@@ -67,7 +92,12 @@ pub enum InstanceDef<'tcx> {\n     // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n-    ///`<T as Clone>::clone` shim.\n+    /// Compiler-generated `<T as Clone>::clone` implementation.\n+    ///\n+    /// For all types that automatically implement `Copy`, a trivial `Clone` impl is provided too.\n+    /// Additionally, arrays, tuples, and closures get a `Clone` shim even if they aren't `Copy`.\n+    ///\n+    /// The `DefId` is for `Clone::clone`, the `Ty` is the type `T` with the builtin `Clone` impl.\n     ///\n     /// NB: the type must currently be monomorphic to avoid double substitution\n     /// problems with the MIR shim bodies. `Instance::resolve` enforces this."}, {"sha": "68af22569e35326256533736f0c09f1f08898c5e", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2001,6 +2001,8 @@ where\n                 }\n \n                 let fields = match this.ty.kind {\n+                    ty::Adt(def, _) if def.variants.is_empty() =>\n+                        bug!(\"for_variant called on zero-variant enum\"),\n                     ty::Adt(def, _) => def.variants[variant_index].fields.len(),\n                     _ => bug!(),\n                 };"}, {"sha": "92d6dbb5f90f557fb59ab4d2959a193a0112572c", "filename": "src/librustc_middle/ty/list.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,8 @@ use crate::arena::Arena;\n \n use rustc_serialize::{Encodable, Encoder};\n \n-use std::cmp::{self, Ordering};\n+use std::alloc::Layout;\n+use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter;\n@@ -43,17 +44,9 @@ impl<T: Copy> List<T> {\n         assert!(mem::size_of::<T>() != 0);\n         assert!(!slice.is_empty());\n \n-        // Align up the size of the len (usize) field\n-        let align = mem::align_of::<T>();\n-        let align_mask = align - 1;\n-        let offset = mem::size_of::<usize>();\n-        let offset = (offset + align_mask) & !align_mask;\n-\n-        let size = offset + slice.len() * mem::size_of::<T>();\n-\n-        let mem = arena\n-            .dropless\n-            .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n+        let (layout, _offset) =\n+            Layout::new::<usize>().extend(Layout::for_value::<[T]>(slice)).unwrap();\n+        let mem = arena.dropless.alloc_raw(layout);\n         unsafe {\n             let result = &mut *(mem as *mut List<T>);\n             // Write the length"}, {"sha": "ca0a1ac71c6442b1df281e36db638d1d0d94f9a0", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2352,6 +2352,7 @@ impl<'tcx> AdtDef {\n     /// Alternatively, if there is no explicit discriminant, returns the\n     /// inferred discriminant directly.\n     pub fn discriminant_def_for_variant(&self, variant_index: VariantIdx) -> (Option<DefId>, u32) {\n+        assert!(!self.variants.is_empty());\n         let mut explicit_index = variant_index.as_u32();\n         let expr_did;\n         loop {"}, {"sha": "1a08639a533d5303b142e806985fa7b44fabb58f", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1177,8 +1177,13 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                         p!(write(\")\"));\n                     }\n+                    ty::Adt(def, substs) if def.variants.is_empty() => {\n+                        p!(print_value_path(def.did, substs));\n+                    }\n                     ty::Adt(def, substs) => {\n-                        let variant_def = &def.variants[contents.variant];\n+                        let variant_id =\n+                            contents.variant.expect(\"destructed const of adt without variant id\");\n+                        let variant_def = &def.variants[variant_id];\n                         p!(print_value_path(variant_def.def_id, substs));\n \n                         match variant_def.ctor_kind {"}, {"sha": "b0addcb2bb68354ed688e4d3f9e25ec4475592b9", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2099,6 +2099,9 @@ impl<'tcx> TyS<'tcx> {\n         variant_index: VariantIdx,\n     ) -> Option<Discr<'tcx>> {\n         match self.kind {\n+            TyKind::Adt(adt, _) if adt.variants.is_empty() => {\n+                bug!(\"discriminant_for_variant called on zero variant enum\");\n+            }\n             TyKind::Adt(adt, _) if adt.is_enum() => {\n                 Some(adt.discriminant_for_variant(tcx, variant_index))\n             }"}, {"sha": "ed992a59839547b802664c8bd9161c213e0234ca", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -30,8 +30,10 @@ pub(crate) fn const_caller_location(\n     ConstValue::Scalar(loc_place.ptr)\n }\n \n-// this function uses `unwrap` copiously, because an already validated constant\n-// must have valid fields and can thus never fail outside of compiler bugs\n+/// This function uses `unwrap` copiously, because an already validated constant\n+/// must have valid fields and can thus never fail outside of compiler bugs. However, it is\n+/// invoked from the pretty printer, where it can receive enums with no variants and e.g.\n+/// `read_discriminant` needs to be able to handle that.\n pub(crate) fn destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -41,17 +43,21 @@ pub(crate) fn destructure_const<'tcx>(\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.eval_const_to_op(val, None).unwrap();\n \n-    let variant = ecx.read_discriminant(op).unwrap().1;\n-\n     // We go to `usize` as we cannot allocate anything bigger anyway.\n-    let field_count = match val.ty.kind {\n-        ty::Array(_, len) => usize::try_from(len.eval_usize(tcx, param_env)).unwrap(),\n-        ty::Adt(def, _) => def.variants[variant].fields.len(),\n-        ty::Tuple(substs) => substs.len(),\n+    let (field_count, variant, down) = match val.ty.kind {\n+        ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n+        ty::Adt(def, _) if def.variants.is_empty() => {\n+            return mir::DestructuredConst { variant: None, fields: tcx.arena.alloc_slice(&[]) };\n+        }\n+        ty::Adt(def, _) => {\n+            let variant = ecx.read_discriminant(op).unwrap().1;\n+            let down = ecx.operand_downcast(op, variant).unwrap();\n+            (def.variants[variant].fields.len(), Some(variant), down)\n+        }\n+        ty::Tuple(substs) => (substs.len(), None, op),\n         _ => bug!(\"cannot destructure constant {:?}\", val),\n     };\n \n-    let down = ecx.operand_downcast(op, variant).unwrap();\n     let fields_iter = (0..field_count).map(|i| {\n         let field_op = ecx.operand_field(down, i).unwrap();\n         let val = op_to_const(&ecx, field_op);"}, {"sha": "15a2e9130a37e91a240c2bbefa4657adac890288", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -32,13 +32,9 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n     let mut result = match instance {\n         ty::InstanceDef::Item(..) => bug!(\"item {:?} passed to make_shim\", instance),\n-        ty::InstanceDef::VtableShim(def_id) => build_call_shim(\n-            tcx,\n-            instance,\n-            Some(Adjustment::DerefMove),\n-            CallKind::Direct(def_id),\n-            None,\n-        ),\n+        ty::InstanceDef::VtableShim(def_id) => {\n+            build_call_shim(tcx, instance, Some(Adjustment::Deref), CallKind::Direct(def_id), None)\n+        }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             // FIXME(eddyb) support generating shims for a \"shallow type\",\n             // e.g. `Foo<_>` or `[_]` instead of requiring a fully monomorphic\n@@ -60,7 +56,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             let sig = tcx.erase_late_bound_regions(&ty.fn_sig(tcx));\n             let arg_tys = sig.inputs();\n \n-            build_call_shim(tcx, instance, Some(adjustment), CallKind::Indirect, Some(arg_tys))\n+            build_call_shim(tcx, instance, Some(adjustment), CallKind::Indirect(ty), Some(arg_tys))\n         }\n         // We are generating a call back to our def-id, which the\n         // codegen backend knows to turn to an actual call, be it\n@@ -134,15 +130,28 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n enum Adjustment {\n+    /// Pass the receiver as-is.\n     Identity,\n+\n+    /// We get passed `&[mut] self` and call the target with `*self`.\n+    ///\n+    /// This either copies `self` (if `Self: Copy`, eg. for function items), or moves out of it\n+    /// (for `VtableShim`, which effectively is passed `&own Self`).\n     Deref,\n-    DerefMove,\n+\n+    /// We get passed `self: Self` and call the target with `&mut self`.\n+    ///\n+    /// In this case we need to ensure that the `Self` is dropped after the call, as the callee\n+    /// won't do it for us.\n     RefMut,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-enum CallKind {\n-    Indirect,\n+enum CallKind<'tcx> {\n+    /// Call the `FnPtr` that was passed as the receiver.\n+    Indirect(Ty<'tcx>),\n+\n+    /// Call a known `FnDef`.\n     Direct(DefId),\n }\n \n@@ -662,7 +671,7 @@ fn build_call_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n     rcvr_adjustment: Option<Adjustment>,\n-    call_kind: CallKind,\n+    call_kind: CallKind<'tcx>,\n     untuple_args: Option<&[Ty<'tcx>]>,\n ) -> Body<'tcx> {\n     debug!(\n@@ -675,6 +684,29 @@ fn build_call_shim<'tcx>(\n     let sig = tcx.fn_sig(def_id);\n     let mut sig = tcx.erase_late_bound_regions(&sig);\n \n+    if let CallKind::Indirect(fnty) = call_kind {\n+        // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This\n+        // can only be an `FnDef` or `FnPtr`, but currently will be `Self` since the types come from\n+        // the implemented `FnX` trait.\n+\n+        // Apply the opposite adjustment to the MIR input.\n+        let mut inputs_and_output = sig.inputs_and_output.to_vec();\n+\n+        // Initial signature is `fn(&? Self, Args) -> Self::Output` where `Args` is a tuple of the\n+        // fn arguments. `Self` may be passed via (im)mutable reference or by-value.\n+        assert_eq!(inputs_and_output.len(), 3);\n+\n+        // `Self` is always the original fn type `ty`. The MIR call terminator is only defined for\n+        // `FnDef` and `FnPtr` callees, not the `Self` type param.\n+        let self_arg = &mut inputs_and_output[0];\n+        *self_arg = match rcvr_adjustment.unwrap() {\n+            Adjustment::Identity => fnty,\n+            Adjustment::Deref => tcx.mk_imm_ptr(fnty),\n+            Adjustment::RefMut => tcx.mk_mut_ptr(fnty),\n+        };\n+        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+    }\n+\n     // FIXME(eddyb) avoid having this snippet both here and in\n     // `Instance::fn_sig` (introduce `InstanceDef::fn_sig`?).\n     if let ty::InstanceDef::VtableShim(..) = instance {\n@@ -701,8 +733,7 @@ fn build_call_shim<'tcx>(\n \n     let rcvr = rcvr_adjustment.map(|rcvr_adjustment| match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_place()),\n-        Adjustment::Deref => Operand::Move(tcx.mk_place_deref(rcvr_place())), // Can't copy `&mut`\n-        Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n+        Adjustment::Deref => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n             let ref_rcvr = local_decls.push(\n@@ -728,7 +759,10 @@ fn build_call_shim<'tcx>(\n     });\n \n     let (callee, mut args) = match call_kind {\n-        CallKind::Indirect => (rcvr.unwrap(), vec![]),\n+        // `FnPtr` call has no receiver. Args are untupled below.\n+        CallKind::Indirect(_) => (rcvr.unwrap(), vec![]),\n+\n+        // `FnDef` call with optional receiver.\n         CallKind::Direct(def_id) => {\n             let ty = tcx.type_of(def_id);\n             ("}, {"sha": "733ae9084511cc139564abb1c05900ef554b2373", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -205,22 +205,34 @@ impl NonConstOp for CellBorrow {\n #[derive(Debug)]\n pub struct MutBorrow;\n impl NonConstOp for MutBorrow {\n+    fn is_allowed_in_item(&self, ccx: &ConstCx<'_, '_>) -> bool {\n+        // Forbid everywhere except in const fn\n+        ccx.const_kind() == hir::ConstContext::ConstFn\n+            && ccx.tcx.features().enabled(Self::feature_gate().unwrap())\n+    }\n+\n     fn feature_gate() -> Option<Symbol> {\n         Some(sym::const_mut_refs)\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err = feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\n-                \"references in {}s may only refer \\\n-                      to immutable values\",\n-                ccx.const_kind()\n-            ),\n-        );\n-        err.span_label(span, format!(\"{}s require immutable values\", ccx.const_kind()));\n+        let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_mut_refs,\n+                span,\n+                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+            )\n+        } else {\n+            struct_span_err!(\n+                ccx.tcx.sess,\n+                span,\n+                E0764,\n+                \"mutable references are not allowed in {}s\",\n+                ccx.const_kind(),\n+            )\n+        };\n+        err.span_label(span, \"`&mut` is only allowed in `const fn`\".to_string());\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"References in statics and constants may only refer \\"}, {"sha": "068d055fa78f83311e3d5fdaf329824afb7048bf", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n-use rustc_session::config::Sanitizer;\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -232,24 +231,8 @@ impl Inliner<'tcx> {\n \n         // Avoid inlining functions marked as no_sanitize if sanitizer is enabled,\n         // since instrumentation might be enabled and performed on the caller.\n-        match self.tcx.sess.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Memory) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Thread) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Leak) => {}\n-            None => {}\n+        if self.tcx.sess.opts.debugging_opts.sanitizer.intersects(codegen_fn_attrs.no_sanitize) {\n+            return false;\n         }\n \n         let hinted = match codegen_fn_attrs.inline {"}, {"sha": "625f40cd79206313d3f696abb9f494542abc5c79", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::{\n     },\n     ty::{self, ParamEnv, TyCtxt},\n };\n-use rustc_span::def_id::DefId;\n \n #[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n@@ -24,15 +23,14 @@ pub struct Validator {\n \n impl<'tcx> MirPass<'tcx> for Validator {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let def_id = source.def_id();\n-        let param_env = tcx.param_env(def_id);\n-        TypeChecker { when: &self.when, def_id, body, tcx, param_env }.visit_body(body);\n+        let param_env = tcx.param_env(source.def_id());\n+        TypeChecker { when: &self.when, source, body, tcx, param_env }.visit_body(body);\n     }\n }\n \n struct TypeChecker<'a, 'tcx> {\n     when: &'a str,\n-    def_id: DefId,\n+    source: MirSource<'tcx>,\n     body: &'a Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n@@ -47,7 +45,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             span,\n             &format!(\n                 \"broken MIR in {:?} ({}) at {:?}:\\n{}\",\n-                self.def_id,\n+                self.source.instance,\n                 self.when,\n                 location,\n                 msg.as_ref()"}, {"sha": "6ac5d41ec6135ee371554cf130f902a9389fe525", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -800,7 +800,11 @@ impl<'tcx> Constructor<'tcx> {\n                 assert!(!adt.is_enum());\n                 VariantIdx::new(0)\n             }\n-            ConstantValue(c) => cx.tcx.destructure_const(cx.param_env.and(c)).variant,\n+            ConstantValue(c) => cx\n+                .tcx\n+                .destructure_const(cx.param_env.and(c))\n+                .variant\n+                .expect(\"destructed const of adt without variant id\"),\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt),\n         }\n     }"}, {"sha": "6dd7e0871b45ef8bb9b319dd805fa873d3fdb951", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -275,7 +275,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 PatKind::Variant {\n                     adt_def,\n                     substs,\n-                    variant_index: destructured.variant,\n+                    variant_index: destructured\n+                        .variant\n+                        .expect(\"destructed const of adt without variant id\"),\n                     subpatterns: field_pats(destructured.fields),\n                 }\n             }"}, {"sha": "abce7359c0ed73be6b932470bf29ac83513483bd", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -9,6 +9,7 @@ name = \"rustc_session\"\n path = \"lib.rs\"\n \n [dependencies]\n+bitflags = \"1.2.1\"\n getopts = \"0.2\"\n log = \"0.4\"\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "53cec04083696ebc96ace52678ade1aa10827cb4", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -10,6 +10,7 @@ use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use rustc_target::spec::{Target, TargetTriple};\n \n@@ -37,35 +38,55 @@ pub struct Config {\n     pub ptr_width: u32,\n }\n \n-#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n-pub enum Sanitizer {\n-    Address,\n-    Leak,\n-    Memory,\n-    Thread,\n+bitflags! {\n+    #[derive(Default, RustcEncodable, RustcDecodable)]\n+    pub struct SanitizerSet: u8 {\n+        const ADDRESS = 1 << 0;\n+        const LEAK    = 1 << 1;\n+        const MEMORY  = 1 << 2;\n+        const THREAD  = 1 << 3;\n+    }\n }\n \n-impl fmt::Display for Sanitizer {\n+/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n+impl fmt::Display for SanitizerSet {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {\n-            Sanitizer::Address => \"address\".fmt(f),\n-            Sanitizer::Leak => \"leak\".fmt(f),\n-            Sanitizer::Memory => \"memory\".fmt(f),\n-            Sanitizer::Thread => \"thread\".fmt(f),\n+        let mut first = true;\n+        for s in *self {\n+            let name = match s {\n+                SanitizerSet::ADDRESS => \"address\",\n+                SanitizerSet::LEAK => \"leak\",\n+                SanitizerSet::MEMORY => \"memory\",\n+                SanitizerSet::THREAD => \"thread\",\n+                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n+            };\n+            if !first {\n+                f.write_str(\",\")?;\n+            }\n+            f.write_str(name)?;\n+            first = false;\n         }\n+        Ok(())\n     }\n }\n \n-impl FromStr for Sanitizer {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Sanitizer, ()> {\n-        match s {\n-            \"address\" => Ok(Sanitizer::Address),\n-            \"leak\" => Ok(Sanitizer::Leak),\n-            \"memory\" => Ok(Sanitizer::Memory),\n-            \"thread\" => Ok(Sanitizer::Thread),\n-            _ => Err(()),\n-        }\n+impl IntoIterator for SanitizerSet {\n+    type Item = SanitizerSet;\n+    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD]\n+            .iter()\n+            .copied()\n+            .filter(|&s| self.contains(s))\n+            .collect::<Vec<_>>()\n+            .into_iter()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SanitizerSet {\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.bits().hash_stable(ctx, hasher);\n     }\n }\n \n@@ -726,10 +747,12 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n             }\n         }\n     }\n-    if let Some(s) = &sess.opts.debugging_opts.sanitizer {\n+\n+    for s in sess.opts.debugging_opts.sanitizer {\n         let symbol = Symbol::intern(&s.to_string());\n         ret.insert((sym::sanitize, Some(symbol)));\n     }\n+\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }\n@@ -1995,7 +2018,7 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel,\n-        OutputTypes, Passes, Sanitizer, SourceFileHashAlgorithm, SwitchWithOptPath,\n+        OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm, SwitchWithOptPath,\n         SymbolManglingVersion,\n     };\n     use crate::lint;\n@@ -2069,8 +2092,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n     impl_dep_tracking_hash_via_hash!(NativeLibKind);\n-    impl_dep_tracking_hash_via_hash!(Sanitizer);\n-    impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(SanitizerSet);\n     impl_dep_tracking_hash_via_hash!(CFGuard);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n@@ -2085,7 +2107,6 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, NativeLibKind));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n-    impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where"}, {"sha": "be9d2e7be27774ce5da48fb5ccf093ac74a58c18", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,9 @@\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n \n+#[macro_use]\n+extern crate bitflags;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]"}, {"sha": "8032909bbcd7a8af27b3d080876fd45084aa60a1", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -248,8 +248,7 @@ macro_rules! options {\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-        pub const parse_sanitizer: &str = \"one of: `address`, `leak`, `memory` or `thread`\";\n-        pub const parse_sanitizer_list: &str = \"comma separated list of sanitizers\";\n+        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n         pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n@@ -459,24 +458,15 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_sanitizer(slot: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n-            if let Some(Ok(s)) =  v.map(str::parse) {\n-                *slot = Some(s);\n-                true\n-            } else {\n-                false\n-            }\n-        }\n-\n-        fn parse_sanitizer_list(slot: &mut Vec<Sanitizer>, v: Option<&str>) -> bool {\n+        fn parse_sanitizers(slot: &mut SanitizerSet, v: Option<&str>) -> bool {\n             if let Some(v) = v {\n-                for s in v.split(',').map(str::parse) {\n-                    if let Ok(s) = s {\n-                        if !slot.contains(&s) {\n-                            slot.push(s);\n-                        }\n-                    } else {\n-                        return false;\n+                for s in v.split(',') {\n+                    *slot |= match s {\n+                        \"address\" => SanitizerSet::ADDRESS,\n+                        \"leak\" => SanitizerSet::LEAK,\n+                        \"memory\" => SanitizerSet::MEMORY,\n+                        \"thread\" => SanitizerSet::THREAD,\n+                        _ => return false,\n                     }\n                 }\n                 true\n@@ -974,11 +964,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     // soon.\n     run_dsymutil: bool = (true, parse_bool, [TRACKED],\n         \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n-    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n+    sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"use a sanitizer\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n         \"enable origins tracking in MemorySanitizer\"),\n-    sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n+    sanitizer_recover: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"enable recovery for selected sanitizers\"),\n     saturating_float_casts: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\"}, {"sha": "90cd6ae5bf99ffdc5c025460cd6e67570684eddf", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, PrintRequest, SanitizerSet, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint;\n use crate::parse::ParseSess;\n@@ -650,14 +650,9 @@ impl Session {\n     }\n     pub fn fewer_names(&self) -> bool {\n         let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n-            || self.opts.output_types.contains_key(&OutputType::Bitcode);\n-\n-        // Address sanitizer and memory sanitizer use alloca name when reporting an issue.\n-        let more_names = match self.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => true,\n-            Some(Sanitizer::Memory) => true,\n-            _ => more_names,\n-        };\n+            || self.opts.output_types.contains_key(&OutputType::Bitcode)\n+            // AddressSanitizer and MemorySanitizer use alloca name when reporting an issue.\n+            || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY);\n \n         self.opts.debugging_opts.fewer_names || !more_names\n     }\n@@ -1020,12 +1015,10 @@ impl Session {\n \n     /// Checks if LLVM lifetime markers should be emitted.\n     pub fn emit_lifetime_markers(&self) -> bool {\n-        match self.opts.debugging_opts.sanitizer {\n-            // AddressSanitizer uses lifetimes to detect use after scope bugs.\n-            // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n-            Some(Sanitizer::Address | Sanitizer::Memory) => true,\n-            _ => self.opts.optimize != config::OptLevel::No,\n-        }\n+        self.opts.optimize != config::OptLevel::No\n+        // AddressSanitizer uses lifetimes to detect use after scope bugs.\n+        // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n+        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n     }\n }\n \n@@ -1356,33 +1349,36 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n+    const ASAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n+    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+\n     // Sanitizers can only be used on some tested platforms.\n-    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n-        const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n-            \"x86_64-unknown-linux-gnu\",\n-            \"x86_64-apple-darwin\",\n-            \"x86_64-fuchsia\",\n-            \"aarch64-fuchsia\",\n-        ];\n-        const TSAN_SUPPORTED_TARGETS: &[&str] =\n-            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-        const LSAN_SUPPORTED_TARGETS: &[&str] =\n-            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-        const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-\n-        let supported_targets = match *sanitizer {\n-            Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n-            Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n-            Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n-            Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n+    for s in sess.opts.debugging_opts.sanitizer {\n+        let supported_targets = match s {\n+            SanitizerSet::ADDRESS => ASAN_SUPPORTED_TARGETS,\n+            SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n+            _ => panic!(\"unrecognized sanitizer {}\", s),\n         };\n-\n         if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n             sess.err(&format!(\n-                \"{:?}Sanitizer only works with the `{}` target\",\n-                sanitizer,\n-                supported_targets.join(\"` or `\")\n+                \"`-Zsanitizer={}` only works with targets: {}\",\n+                s,\n+                supported_targets.join(\", \")\n+            ));\n+        }\n+        let conflicting = sess.opts.debugging_opts.sanitizer - s;\n+        if !conflicting.is_empty() {\n+            sess.err(&format!(\n+                \"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\",\n+                s, conflicting,\n             ));\n+            // Don't report additional errors.\n+            break;\n         }\n     }\n }"}, {"sha": "706e68698eb5575fb6ae28b52723fb47844e835b", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -24,6 +24,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::IntTypeExt;\n@@ -1146,7 +1147,7 @@ fn confirm_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     debug!(\"confirm_candidate(candidate={:?}, obligation={:?})\", candidate, obligation);\n \n-    match candidate {\n+    let mut progress = match candidate {\n         ProjectionTyCandidate::ParamEnv(poly_projection)\n         | ProjectionTyCandidate::TraitDef(poly_projection) => {\n             confirm_param_env_candidate(selcx, obligation, poly_projection)\n@@ -1155,7 +1156,16 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionTyCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, obligation_trait_ref, impl_source)\n         }\n+    };\n+    // When checking for cycle during evaluation, we compare predicates with\n+    // \"syntactic\" equality. Since normalization generally introduces a type\n+    // with new region variables, we need to resolve them to existing variables\n+    // when possible for this to work. See `auto-trait-projection-recursion.rs`\n+    // for a case where this matters.\n+    if progress.ty.has_infer_regions() {\n+        progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);\n     }\n+    progress\n }\n \n fn confirm_select_candidate<'cx, 'tcx>("}, {"sha": "d3484b8af89fd54f9eb67e2f51350cc8e8dd0592", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -302,7 +302,7 @@ pub fn get_vtable_index_of_object_method<N>(\n ) -> usize {\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    // Skip over associated types and constants.\n+    // Skip over associated types and constants, as those aren't stored in the vtable.\n     let mut entries = object.vtable_base;\n     for trait_item in tcx.associated_items(object.upcast_trait_ref.def_id()).in_definition_order() {\n         if trait_item.def_id == method_def_id {"}, {"sha": "b592d30c37d3cc0c422c1aa9320359b494c908ef", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2787,7 +2787,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     hir::PrimTy::Int(it) => tcx.mk_mach_int(it),\n                     hir::PrimTy::Uint(uit) => tcx.mk_mach_uint(uit),\n                     hir::PrimTy::Float(ft) => tcx.mk_mach_float(ft),\n-                    hir::PrimTy::Str => tcx.mk_str(),\n+                    hir::PrimTy::Str => tcx.types.str_,\n                 }\n             }\n             Res::Err => {"}, {"sha": "15d210b89b64d5d742765b1275fc3b744384762c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -10,45 +10,30 @@\n //!\n //! Note that if we are expecting a reference, we will *reborrow*\n //! even if the argument provided was already a reference. This is\n-//! useful for freezing mut/const things (that is, when the expected is &T\n-//! but you have &const T or &mut T) and also for avoiding the linearity\n+//! useful for freezing mut things (that is, when the expected type is &T\n+//! but you have &mut T) and also for avoiding the linearity\n //! of mut things (when the expected is &mut T and you have &mut T). See\n-//! the various `src/test/ui/coerce-reborrow-*.rs` tests for\n+//! the various `src/test/ui/coerce/*.rs` tests for\n //! examples of where this is useful.\n //!\n //! ## Subtle note\n //!\n-//! When deciding what type coercions to consider, we do not attempt to\n-//! resolve any type variables we may encounter. This is because `b`\n-//! represents the expected type \"as the user wrote it\", meaning that if\n-//! the user defined a generic function like\n+//! When infering the generic arguments of functions, the argument\n+//! order is relevant, which can lead to the following edge case:\n //!\n-//!    fn foo<A>(a: A, b: A) { ... }\n+//! ```rust\n+//! fn foo<T>(a: T, b: T) {\n+//!     // ...\n+//! }\n //!\n-//! and then we wrote `foo(&1, @2)`, we will not auto-borrow\n-//! either argument. In older code we went to some lengths to\n-//! resolve the `b` variable, which could mean that we'd\n-//! auto-borrow later arguments but not earlier ones, which\n-//! seems very confusing.\n+//! foo(&7i32, &mut 7i32);\n+//! // This compiles, as we first infer `T` to be `&i32`,\n+//! // and then coerce `&mut 7i32` to `&7i32`.\n //!\n-//! ## Subtler note\n-//!\n-//! However, right now, if the user manually specifies the\n-//! values for the type variables, as so:\n-//!\n-//!    foo::<&int>(@1, @2)\n-//!\n-//! then we *will* auto-borrow, because we can't distinguish this from a\n-//! function that declared `&int`. This is inconsistent but it's easiest\n-//! at the moment. The right thing to do, I think, is to consider the\n-//! *unsubstituted* type when deciding whether to auto-borrow, but the\n-//! *substituted* type when considering the bounds and so forth. But most\n-//! of our methods don't give access to the unsubstituted type, and\n-//! rightly so because they'd be error-prone. So maybe the thing to do is\n-//! to actually determine the kind of coercions that should occur\n-//! separately and pass them in. Or maybe it's ok as is. Anyway, it's\n-//! sort of a minor point so I've opted to leave it for later -- after all,\n-//! we may want to adjust precisely when coercions occur.\n+//! foo(&mut 7i32, &7i32);\n+//! // This does not compile, as we first infer `T` to be `&mut i32`\n+//! // and are then unable to coerce `&7i32` to `&mut i32`.\n+//! ```\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n@@ -96,6 +81,8 @@ impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {\n \n type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;\n \n+/// Coercing a mutable reference to an immutable works, while\n+/// coercing `&T` to `&mut T` should be forbidden.\n fn coerce_mutbls<'tcx>(\n     from_mutbl: hir::Mutability,\n     to_mutbl: hir::Mutability,"}, {"sha": "91266eeb9bab0402aa6d171e575e1b1474a28ccb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2450,11 +2451,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             if let Some(list) = attr.meta_item_list() {\n                 for item in list.iter() {\n                     if item.check_name(sym::address) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_ADDRESS;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::ADDRESS;\n                     } else if item.check_name(sym::memory) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_MEMORY;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.check_name(sym::thread) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_THREAD;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n@@ -2554,7 +2555,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n-    if codegen_fn_attrs.flags.intersects(CodegenFnAttrFlags::NO_SANITIZE_ANY) {\n+    if !codegen_fn_attrs.no_sanitize.is_empty() {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let (Some(no_sanitize_span), Some(inline_span)) = (no_sanitize_span, inline_span) {\n                 let hir_id = tcx.hir().as_local_hir_id(id.expect_local());"}, {"sha": "48f7cf169885f7489d6c63e503fa7428671f29fb", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -10,22 +10,6 @@\n //! things, particularly traits, which are used in almost every single Rust\n //! program.\n //!\n-//! On a technical level, Rust inserts\n-//!\n-//! ```\n-//! # #[allow(unused_extern_crates)]\n-//! extern crate std;\n-//! ```\n-//!\n-//! into the crate root of every crate, and\n-//!\n-//! ```\n-//! # #[allow(unused_imports)]\n-//! use std::prelude::v1::*;\n-//! ```\n-//!\n-//! into every module.\n-//!\n //! # Other preludes\n //!\n //! Preludes can be seen as a pattern to make using multiple types more"}, {"sha": "9bc111c26ba6b1eabd47c0b0f89bf4ec93c5cf3e", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -717,11 +717,12 @@ enum class LLVMRustOptStage {\n };\n \n struct LLVMRustSanitizerOptions {\n+  bool SanitizeAddress;\n+  bool SanitizeAddressRecover;\n   bool SanitizeMemory;\n+  bool SanitizeMemoryRecover;\n+  int  SanitizeMemoryTrackOrigins;\n   bool SanitizeThread;\n-  bool SanitizeAddress;\n-  bool SanitizeRecover;\n-  int SanitizeMemoryTrackOrigins;\n };\n \n extern \"C\" void\n@@ -808,7 +809,7 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeMemory) {\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n-          SanitizerOptions->SanitizeRecover,\n+          SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false);\n #if LLVM_VERSION_GE(10, 0)\n       PipelineStartEPCallbacks.push_back([Options](ModulePassManager &MPM) {\n@@ -842,14 +843,14 @@ LLVMRustOptimizeWithNewPassManager(\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(AddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeRecover,\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n               /*UseAfterScope=*/true));\n         }\n       );\n       PipelineStartEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM) {\n           MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeRecover));\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n       );\n     }"}, {"sha": "00aca1d14baa7ec4e3e3454f549c2ba90dc7dec8", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n     //~| ERROR calls in constants are limited to constant functions\n-    //~| ERROR references in constants may only refer to immutable values\n+    //~| ERROR mutable references are not allowed in constants\n     //~| ERROR calls in constants are limited to constant functions\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "958f0eb26680194b45bf0c235a10b4a8a6c108c0", "filename": "src/test/compile-fail/specialization/issue-50452.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // compile-fail\n-\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn foo();"}, {"sha": "08413c9f6fceb6b43dcdb99dafea544b3520f769", "filename": "src/test/mir-opt/fn-ptr-shim.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zmir-opt-level=0 -Zvalidate-mir\n+\n+// Tests that the `<fn() as Fn>` shim does not create a `Call` terminator with a `Self` callee\n+// (as only `FnDef` and `FnPtr` callees are allowed in MIR).\n+\n+// EMIT_MIR rustc.ops-function-Fn-call.AddMovesForPackedDrops.before.mir\n+fn main() {\n+    call(noop as fn());\n+}\n+\n+fn noop() {}\n+\n+fn call<F: Fn()>(f: F) {\n+    f();\n+}"}, {"sha": "4ecc331afaeb975d4ed6fe5be34ecf79f95b0ae5", "filename": "src/test/mir-opt/fn-ptr-shim/rustc.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim%2Frustc.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim%2Frustc.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffn-ptr-shim%2Frustc.ops-function-Fn-call.AddMovesForPackedDrops.before.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `std::ops::Fn::call` before AddMovesForPackedDrops\n+\n+fn std::ops::Fn::call(_1: *const fn(), _2: Args) -> <Self as std::ops::FnOnce<Args>>::Output {\n+    let mut _0: <Self as std::ops::FnOnce<Args>>::Output; // return place in scope 0 at $SRC_DIR/libcore/ops/function.rs:LL:COL\n+\n+    bb0: {\n+        _0 = move (*_1)() -> bb1;        // scope 0 at $SRC_DIR/libcore/ops/function.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $SRC_DIR/libcore/ops/function.rs:LL:COL\n+    }\n+}"}, {"sha": "6d65f847a2c63fd13b7742f9566abf64f6e0782a", "filename": "src/test/mir-opt/issue-72181-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -Z mir-opt-level=1\n+// Regression test for #72181, this ICE requires `-Z mir-opt-level=1` flags.\n+\n+#![feature(never_type)]\n+#![allow(unused, invalid_value)]\n+\n+enum Void {}\n+\n+// EMIT_MIR rustc.f.mir_map.0.mir\n+fn f(v: Void) -> ! {\n+    match v {}\n+}\n+\n+// EMIT_MIR rustc.main.mir_map.0.mir\n+fn main() {\n+    let v: Void = unsafe {\n+        std::mem::transmute::<(), Void>(())\n+    };\n+\n+    f(v);\n+}"}, {"sha": "1821365898e538e6d8f4561820441400f1729130", "filename": "src/test/mir-opt/issue-72181-1/rustc.f.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `f` 0 mir_map\n+\n+fn f(_1: Void) -> ! {\n+    debug v => _1;                       // in scope 0 at $DIR/issue-72181-1.rs:10:6: 10:7\n+    let mut _0: !;                       // return place in scope 0 at $DIR/issue-72181-1.rs:10:18: 10:19\n+    let mut _2: !;                       // in scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+    let mut _3: !;                       // in scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:10:1: 12:2\n+    }\n+\n+    bb2: {\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:14: 11:15\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:12:1: 12:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n+    }\n+\n+    bb5: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n+    }\n+}"}, {"sha": "b87d0294fb87b44196c0a3c279eff2d2e0733c23", "filename": "src/test/mir-opt/issue-72181-1/rustc.main.mir_map.0.mir", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,67 @@\n+// MIR for `main` 0 mir_map\n+\n+| User Type Annotations\n+| 0: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n+| 1: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181-1.rs:15:11: 15:11\n+    let mut _1: !;                       // in scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n+    let _2: Void as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+    let mut _3: ();                      // in scope 0 at $DIR/issue-72181-1.rs:17:41: 17:43\n+    let _4: !;                           // in scope 0 at $DIR/issue-72181-1.rs:20:5: 20:9\n+    let mut _5: Void;                    // in scope 0 at $DIR/issue-72181-1.rs:20:7: 20:8\n+    scope 1 {\n+        debug v => _2;                   // in scope 1 at $DIR/issue-72181-1.rs:16:9: 16:10\n+    }\n+    scope 2 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n+        _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n+        _2 = const std::intrinsics::transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+                                         // ty::Const\n+                                         // + ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n+        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n+        _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n+        const f(move _5) -> bb1;         // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+                                         // ty::Const\n+                                         // + ty: fn(Void) -> ! {f}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n+                                         // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:8: 20:9\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:9: 20:10\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:21:1: 21:2\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n+    }\n+\n+    bb4: {\n+        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    }\n+\n+    bb5: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    }\n+}"}, {"sha": "9373ce12032b95e05ed1b64e8bb2025fd72cb879", "filename": "src/test/mir-opt/issue-72181.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -Z mir-opt-level=1\n+// Regression test for #72181, this ICE requires `-Z mir-opt-level=1` flags.\n+\n+use std::mem;\n+\n+#[derive(Copy, Clone)]\n+enum Never {}\n+\n+union Foo {\n+    a: u64,\n+    b: Never\n+}\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.foo.mir_map.0.mir\n+fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n+\n+// EMIT_MIR rustc.bar.mir_map.0.mir\n+fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.main.mir_map.0.mir\n+fn main() {\n+    let _ = mem::size_of::<Foo>();\n+\n+    let f = [Foo { a: 42 }, Foo { a: 10 }];\n+    let _ = unsafe { f[0].a };\n+}"}, {"sha": "29654c2b1f83b93c15a847f9b47c3ffd33cfe44c", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:19:40: 19:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:19:13: 19:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+}"}, {"sha": "776eb61a5264f324ba2a4884eb33b445ebbec963", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:16:8: 16:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:16:34: 16:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+}"}, {"sha": "aa44dcd8eaee3ab86ce7ba490712bfd8c4e7a04a", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:23:11: 23:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:14: 26:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:29: 26:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:27:13: 27:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:27:24: 27:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:26:9: 26:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+}"}, {"sha": "29654c2b1f83b93c15a847f9b47c3ffd33cfe44c", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:19:40: 19:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:19:13: 19:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+}"}, {"sha": "639019eaf9ccc1b6fab203edcbc63cb7c60817ff", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:16:8: 16:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:16:34: 16:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+}"}, {"sha": "4098e0e295c5d520f35d41279949ed98c9931613", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:23:11: 23:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:14: 26:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:29: 26:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:27:13: 27:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:27:24: 27:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:26:9: 26:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+}"}, {"sha": "3b6dc46d055cda72b741528a06f95a85cf121e4e", "filename": "src/test/mir-opt/issue-72181/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:18:40: 18:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:18:13: 18:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:18:46: 18:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:18:48: 18:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:18:49: 18:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:18:1: 18:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:18:49: 18:49\n+    }\n+}"}, {"sha": "2941e282cf42b4fdd4cba34869540d21ed006637", "filename": "src/test/mir-opt/issue-72181/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:15:8: 15:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:15:34: 15:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:15:43: 15:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:15:1: 15:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:15:40: 15:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:15:48: 15:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:15:49: 15:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:15:49: 15:49\n+    }\n+}"}, {"sha": "65f4de0e23545b00ed1ae47a7dca0a23162e194d", "filename": "src/test/mir-opt/issue-72181/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:21:11: 21:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:24:14: 24:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:24:29: 24:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:25:13: 25:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:25:24: 25:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:25:22: 25:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:25:22: 25:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:24:9: 24:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:22:13: 22:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:21:1: 26:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:22:34: 22:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:24:14: 24:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:24:14: 24:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:23: 24:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:24:29: 24:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:24:29: 24:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:38: 24:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:24:13: 24:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:24:42: 24:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:24:42: 24:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:25:13: 25:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:25:24: 25:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:25:24: 25:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:25:24: 25:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:25:22: 25:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:25:30: 25:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:25:30: 25:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:21:11: 26:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:21:11: 26:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:26:1: 26:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:26:2: 26:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:26:2: 26:2\n+    }\n+}"}, {"sha": "546b3e07793e15982bdbf9282ecf66b49c4b3eea", "filename": "src/test/rustdoc/synthetic_auto/overflow.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,35 @@\n+// Tests that we don't fail with an overflow error for certain\n+// strange types\n+// See https://github.com/rust-lang/rust/pull/72936#issuecomment-643676915\n+\n+pub trait Interner {\n+    type InternedType;\n+}\n+\n+struct RustInterner<'tcx> {\n+    foo: &'tcx ()\n+}\n+\n+impl<'tcx> Interner for RustInterner<'tcx> {\n+    type InternedType = Box<TyData<Self>>;\n+}\n+\n+enum TyData<I: Interner> {\n+    FnDef(I::InternedType)\n+}\n+\n+struct VariableKind<I: Interner>(I::InternedType);\n+\n+// @has overflow/struct.BoundVarsCollector.html\n+// @has - '//code' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n+pub struct BoundVarsCollector<'tcx> {\n+    val: VariableKind<RustInterner<'tcx>>\n+}\n+\n+fn is_send<T: Send>() {}\n+\n+struct MyInterner<'tcx> {\n+    val: &'tcx ()\n+}\n+\n+fn main() {}"}, {"sha": "0a05fc6bb82863f5bdaf43c410f92cc3d054ee34", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/project-fn-ret-invariant.rs:48:8\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n    |\n LL |    bar(foo, x)\n-   |        ^^^\n+   |    ^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 44:8...\n   --> $DIR/project-fn-ret-invariant.rs:44:8"}, {"sha": "553705b2a4fab39c944dbae4802093ac3439ff66", "filename": "src/test/ui/associated-types/defaults-specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,7 @@\n //! Tests the interaction of associated type defaults and specialization.\n \n #![feature(associated_type_defaults, specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Tr {\n     type Ty = u8;"}, {"sha": "09a8c8f8a88a205e2828f43dad1a86ee527740ec", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/defaults-specialization.rs:3:38\n+   |\n+LL | #![feature(associated_type_defaults, specialization)]\n+   |                                      ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:18:18\n+  --> $DIR/defaults-specialization.rs:19:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -11,7 +20,7 @@ LL |     fn make() -> u8 { 0 }\n               found fn pointer `fn() -> u8`\n \n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:34:18\n+  --> $DIR/defaults-specialization.rs:35:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -26,7 +35,7 @@ LL |     fn make() -> bool { true }\n               found fn pointer `fn() -> bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:9:9\n+  --> $DIR/defaults-specialization.rs:10:9\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them\n@@ -40,7 +49,7 @@ LL |         0u8\n                          found type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:25:29\n+  --> $DIR/defaults-specialization.rs:26:29\n    |\n LL |     fn make() -> Self::Ty { 0u8 }\n    |                  --------   ^^^ expected associated type, found `u8`\n@@ -53,7 +62,7 @@ LL |     fn make() -> Self::Ty { 0u8 }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:43:29\n+  --> $DIR/defaults-specialization.rs:44:29\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n@@ -67,7 +76,7 @@ LL |     fn make() -> Self::Ty { true }\n                          found type `bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:86:32\n+  --> $DIR/defaults-specialization.rs:87:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    |            -----------------   ^^^ expected associated type, found `u8`\n@@ -77,13 +86,13 @@ LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `u8`\n help: a method is available that returns `<B<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:87:32\n+  --> $DIR/defaults-specialization.rs:88:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = true;\n    |            -----------------   ^^^^ expected associated type, found `bool`\n@@ -93,13 +102,13 @@ LL |     let _: <B<()> as Tr>::Ty = true;\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `bool`\n help: a method is available that returns `<B<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:88:33\n+  --> $DIR/defaults-specialization.rs:89:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    |            ------------------   ^^^ expected associated type, found `u8`\n@@ -109,13 +118,13 @@ LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `u8`\n help: a method is available that returns `<B2<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:89:33\n+  --> $DIR/defaults-specialization.rs:90:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = true;\n    |            ------------------   ^^^^ expected associated type, found `bool`\n@@ -125,12 +134,12 @@ LL |     let _: <B2<()> as Tr>::Ty = true;\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `bool`\n help: a method is available that returns `<B2<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 9 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0053, E0308.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "a2ddd5374c08bdb01c08b72ee28b6c23a7252211", "filename": "src/test/ui/auto-traits/auto-is-contextual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/auto-is-contextual.rs"}, {"sha": "a36f26f02e9f46ed8df2b46784a69d7823211ee3", "filename": "src/test/ui/auto-traits/auto-trait-projection-recursion.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,34 @@\n+// Checking the `Send` bound in `main` requires:\n+//\n+// checking             <C<'static> as Y>::P: Send\n+// which normalizes to  Box<X<C<'?1>>>: Send\n+// which needs          X<C<'?1>>: Send\n+// which needs          <C<'?1> as Y>::P: Send\n+//\n+// At this point we used to normalize the predicate to `Box<X<C<'?2>>>: Send`\n+// and continue in a loop where we created new region variables to the\n+// recursion limit. To avoid this we now \"canonicalize\" region variables to\n+// lowest unified region vid. This means we instead have to prove\n+// `Box<X<C<'?1>>>: Send`, which we can because auto traits are coinductive.\n+\n+// check-pass\n+\n+// Avoid a really long error message if this regresses.\n+#![recursion_limit=\"20\"]\n+\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+fn is_send<S: Send>() {}\n+\n+fn main() {\n+    is_send::<X<C<'static>>>();\n+}"}, {"sha": "34d6c3da00ee3308486f6aebcfa127ea1837b591", "filename": "src/test/ui/auto-traits/auto-trait-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/auto-trait-validation.rs"}, {"sha": "4040e66c6af776f65aa5f99e5a0f5fafd9504761", "filename": "src/test/ui/auto-traits/auto-trait-validation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/auto-trait-validation.stderr"}, {"sha": "15fdddc5f3f5c3b779de91a6e2df28ade5d9bee8", "filename": "src/test/ui/auto-traits/auto-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/traits/auto-traits.rs"}, {"sha": "7f6b9e3fba79fc1703d571295d205bb1aa4d86af", "filename": "src/test/ui/auto-traits/issue-23080-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/issues/issue-23080-2.rs"}, {"sha": "48ce09aaa34dab455295b3a818e6c39a5c8199f0", "filename": "src/test/ui/auto-traits/issue-23080-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/issues/issue-23080-2.stderr"}, {"sha": "035db82ba5de0df26ec58513fda41d04993525f8", "filename": "src/test/ui/auto-traits/issue-23080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/issues/issue-23080.rs"}, {"sha": "73ecb1c362e1767941666d9f25c736271f4b915b", "filename": "src/test/ui/auto-traits/issue-23080.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/issues/issue-23080.stderr"}, {"sha": "8824a6d2767f74cc76ade01e05d7e42276651799", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.rs"}, {"sha": "63b3300f6dbf4d1ed641bd9dbbbba9fcdfdd8e94", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr"}, {"sha": "edbca9151248672a02a63bfb50170fb44ee57c6a", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.rs"}, {"sha": "796638fc54dce7651c5f8583988d2223a4b223c4", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr"}, {"sha": "71ac2b466c10a191ee0dfff89bdc9970a25ae475", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.rs"}, {"sha": "53ba9b8a3f6b4d6bb6f4fc68df651692c9fa4709", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr"}, {"sha": "6483b9213dc5303f4dfb68caf1339a7a3b2aa39d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.rs"}, {"sha": "bc5000049846362e2e770323ca2034d44b57a761", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr"}, {"sha": "47cab60625dce59c6b2593b99cef0c2343f26763", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.rs"}, {"sha": "76a6994cb009a42dec9e01aad42d280d253aeb00", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr"}, {"sha": "614a5ff55b1ed0e95d03d85849c955d87e01bc7d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.rs"}, {"sha": "5962d191292889c3a34fd4509c617ca877dc8d99", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr"}, {"sha": "3be02f6a0f674cedc3fcca37b8a18647ec439230", "filename": "src/test/ui/check-static-immutable-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // Checks that immutable static items can't have mutable slices\n \n static TEST: &'static mut [isize] = &mut [];\n-//~^ ERROR references in statics may only refer to immutable values\n+//~^ ERROR mutable references are not allowed in statics\n \n pub fn main() { }"}, {"sha": "9ffbb483d139d2e9bd7845e576b76bc105f013ae", "filename": "src/test/ui/check-static-immutable-mut-slices.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/check-static-immutable-mut-slices.rs:3:37\n    |\n LL | static TEST: &'static mut [isize] = &mut [];\n-   |                                     ^^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                     ^^^^^^^ `&mut` is only allowed in `const fn`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "0c6d11cd3211d836dc09577f9cafd085225cefb1", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n+  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:5\n    |\n LL |     with_closure(|x: u32, y| {});\n-   |                           ^ consider giving this closure parameter a type\n+   |     ^^^^^^^^^^^^ cannot infer type for type parameter `B` declared on the function `with_closure`\n \n error: aborting due to previous error\n "}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coerce/coerce-overloaded-autoderef.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/34c5cd9a64d8537236626c4ccbed39a924cd38e2/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c5cd9a64d8537236626c4ccbed39a924cd38e2/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=34c5cd9a64d8537236626c4ccbed39a924cd38e2", "patch": "@@ -1,68 +0,0 @@\n-// run-pass\n-#![allow(unused_braces)]\n-#![allow(dead_code)]\n-// pretty-expanded FIXME #23616\n-\n-use std::rc::Rc;\n-\n-// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n-\n-fn use_ref<T>(_: &T) {}\n-fn use_mut<T>(_: &mut T) {}\n-\n-fn use_rc<T>(t: Rc<T>) {\n-    use_ref(&*t);  // what you have to write today\n-    use_ref(&t);   // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_mut_box<T>(mut t: &mut Box<T>) {\n-    use_mut(&mut *t); // what you have to write today\n-    use_mut(t);       // what you'd be able to write\n-    use_mut(&mut &mut &mut t);\n-\n-    use_ref(&*t);      // what you have to write today\n-    use_ref(t);        // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_nested<T>(t: &Box<T>) {\n-    use_ref(&**t);  // what you have to write today\n-    use_ref(t);     // what you'd be able to write (note: recursive deref)\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_slice(_: &[u8]) {}\n-fn use_slice_mut(_: &mut [u8]) {}\n-\n-fn use_vec(mut v: Vec<u8>) {\n-    use_slice_mut(&mut v[..]); // what you have to write today\n-    use_slice_mut(&mut v);     // what you'd be able to write\n-    use_slice_mut(&mut &mut &mut v);\n-\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(&v);      // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_vec_ref(v: &Vec<u8>) {\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(v);       // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_op_rhs(s: &mut String) {\n-    *s += {&String::from(\" \")};\n-}\n-\n-pub fn main() {}"}, {"sha": "d486fdf73aba8d795a1dde8c4ff37ad921efed26", "filename": "src/test/ui/coercion/coerce-expect-unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-expect-unsized.rs"}, {"sha": "01d9c1e486a4225e3358bb51f4fd1a4b1362561d", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,32 @@\n+fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n+fn borrow<T>(x: &T) -> &T { x }\n+\n+fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n+fn borrow2<T>(_: &mut T, _: &T) {}\n+\n+fn double_mut_borrow<T>(x: &mut Box<T>) {\n+    let y = borrow_mut(x);\n+    let z = borrow_mut(x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    drop((y, z));\n+}\n+\n+fn double_imm_borrow(x: &mut Box<i32>) {\n+    let y = borrow(x);\n+    let z = borrow(x);\n+    **x += 1;\n+    //~^ ERROR cannot assign to `**x` because it is borrowed\n+    drop((y, z));\n+}\n+\n+fn double_mut_borrow2<T>(x: &mut Box<T>) {\n+    borrow_mut2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+}\n+\n+fn double_borrow2<T>(x: &mut Box<T>) {\n+    borrow2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+}\n+\n+pub fn main() {}"}, {"sha": "d067c3b3a18056c1f3e5bb5c79b02da297ae17c5", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:9:24\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:9:24\n    |\n LL |     let y = borrow_mut(x);\n    |                        - first mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     drop((y, z));\n    |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n-  --> $DIR/coerce-overloaded-autoderef.rs:17:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:17:5\n    |\n LL |     let y = borrow(x);\n    |                    - borrow of `**x` occurs here\n@@ -22,7 +22,7 @@ LL |     drop((y, z));\n    |           - borrow later used here\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:23:20\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:23:20\n    |\n LL |     borrow_mut2(x, x);\n    |     ----------- -  ^ second mutable borrow occurs here\n@@ -31,7 +31,7 @@ LL |     borrow_mut2(x, x);\n    |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/coerce-overloaded-autoderef.rs:28:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:28:5\n    |\n LL |     borrow2(x, x);\n    |     -------^^^^-^", "previous_filename": "src/test/ui/coercion/coerce-overloaded-autoderef.stderr"}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,32 +1,68 @@\n-fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n-fn borrow<T>(x: &T) -> &T { x }\n+// run-pass\n+#![allow(unused_braces)]\n+#![allow(dead_code)]\n+// pretty-expanded FIXME #23616\n \n-fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n-fn borrow2<T>(_: &mut T, _: &T) {}\n+use std::rc::Rc;\n \n-fn double_mut_borrow<T>(x: &mut Box<T>) {\n-    let y = borrow_mut(x);\n-    let z = borrow_mut(x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n-    drop((y, z));\n+// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n+\n+fn use_ref<T>(_: &T) {}\n+fn use_mut<T>(_: &mut T) {}\n+\n+fn use_rc<T>(t: Rc<T>) {\n+    use_ref(&*t);  // what you have to write today\n+    use_ref(&t);   // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_mut_box<T>(mut t: &mut Box<T>) {\n+    use_mut(&mut *t); // what you have to write today\n+    use_mut(t);       // what you'd be able to write\n+    use_mut(&mut &mut &mut t);\n+\n+    use_ref(&*t);      // what you have to write today\n+    use_ref(t);        // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n }\n \n-fn double_imm_borrow(x: &mut Box<i32>) {\n-    let y = borrow(x);\n-    let z = borrow(x);\n-    **x += 1;\n-    //~^ ERROR cannot assign to `**x` because it is borrowed\n-    drop((y, z));\n+fn use_nested<T>(t: &Box<T>) {\n+    use_ref(&**t);  // what you have to write today\n+    use_ref(t);     // what you'd be able to write (note: recursive deref)\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_slice(_: &[u8]) {}\n+fn use_slice_mut(_: &mut [u8]) {}\n+\n+fn use_vec(mut v: Vec<u8>) {\n+    use_slice_mut(&mut v[..]); // what you have to write today\n+    use_slice_mut(&mut v);     // what you'd be able to write\n+    use_slice_mut(&mut &mut &mut v);\n+\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(&v);      // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_mut_borrow2<T>(x: &mut Box<T>) {\n-    borrow_mut2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+fn use_vec_ref(v: &Vec<u8>) {\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(v);       // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_borrow2<T>(x: &mut Box<T>) {\n-    borrow2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+fn use_op_rhs(s: &mut String) {\n+    *s += {&String::from(\" \")};\n }\n \n pub fn main() {}"}, {"sha": "f033e1b5d2b01a2458b6e275f062962b3abd0c21", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-arg.rs"}, {"sha": "64a365229cbb77e3438e5e922d7f6d2e86ef9cde", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-rcvr.rs"}, {"sha": "c2aaae1c73ec8473ed5e892b323cf1488dd91ec4", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-arg.rs"}, {"sha": "9a5652acf87874c6ae50ff49254bc8ff287e8ac9", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-rcvr.rs"}, {"sha": "48be2d3146b811f0777829e94035ae170051004a", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,6 @@\n+fn test<T>(_a: T, _b: T) {}\n+\n+fn main() {\n+    test(&mut 7, &7);\n+    //~^ mismatched types\n+}"}, {"sha": "59b0ec496f16f5a2e4c721ee7d1f08883a964fb7", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-reborrow-multi-arg-fail.rs:4:18\n+   |\n+LL |     test(&mut 7, &7);\n+   |                  ^^ types differ in mutability\n+   |\n+   = note: expected mutable reference `&mut {integer}`\n+                      found reference `&{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93cd0bb3e27f6df5cf066ee41e23e866cdbc4d1b", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+fn test<T>(_a: T, _b: T) {}\n+\n+fn main() {\n+    test(&7, &7);\n+    test(&7, &mut 7);\n+    test::<&i32>(&mut 7, &7);\n+    test::<&i32>(&mut 7, &mut 7);\n+}"}, {"sha": "76cd6793b3c231d6e71dba3bae6b611832c58cf2", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-arg.rs"}, {"sha": "e6e7c3a51aa09fcb9cec1d321de2eac1b42cb350", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-rcvr.rs"}, {"sha": "2635754f14dacddea066a94009fcca92a1f434ae", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-arg.rs"}, {"sha": "c03336ea37af8a36a1d4886539ce00f171a47152", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-rcvr.rs"}, {"sha": "85598a42eccd9bdc26534ab1752ca3987afb1227", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,5 @@\n #![feature(never_type)]\n \n-fn foo(x: usize, y: !, z: usize) { }\n-\n fn cast_a() {\n     let y = {return; 22} as !;\n     //~^ ERROR non-primitive cast"}, {"sha": "50e009aa25bb1085ced0b993f0d548032459714a", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,11 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:6:13\n+  --> $DIR/coerce-to-bang-cast.rs:4:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:11:13\n+  --> $DIR/coerce-to-bang-cast.rs:9:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "95a7ee8fe0f2be1ebcee6028ce37beb90c2d2a88", "filename": "src/test/ui/coercion/coerce-unify-return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-unify-return.rs"}, {"sha": "f1818f9bb5a6df7fa791c747f106e0c7a957d3c5", "filename": "src/test/ui/coercion/coerce-unify.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-unify.rs"}, {"sha": "45b53300c5b4bd4652c28500fd578c9dadd5ac4f", "filename": "src/test/ui/coercion/coerce-unsize-subtype.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "previous_filename": "src/test/ui/coerce/coerce-unsize-subtype.rs"}, {"sha": "d74d3a2a52351c844e2489224ed9035b1bc2ea1a", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,6 +4,7 @@\n //\n // No we expect to run into a more user-friendly cycle error instead.\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Trait<T> { type Assoc; }\n //~^ ERROR E0391"}, {"sha": "7e140480b77d4d0eebe0fc27dbf35e80b3eabd2e", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,16 +1,25 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0391]: cycle detected when building specialization graph of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires building specialization graph of trait `Trait`, completing the cycle\n note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "2518e4ed40b30bf161644840f9e77736f8a6d857", "filename": "src/test/ui/consts/const-eval/issue-65394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -5,7 +5,7 @@\n \n const _: Vec<i32> = {\n     let mut x = Vec::<i32>::new(); //~ ERROR destructors cannot be evaluated at compile-time\n-    let r = &mut x; //~ ERROR references in constants may only refer to immutable values\n+    let r = &mut x; //~ ERROR mutable references are not allowed in constants\n     let y = x;\n     y\n };"}, {"sha": "f843a94fabd8de157e63b6fa57943b90d823f5e6", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/issue-65394.rs:8:13\n    |\n LL |     let r = &mut x;\n-   |             ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/issue-65394.rs:7:9\n@@ -15,5 +12,5 @@ LL |     let mut x = Vec::<i32>::new();\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0493, E0658.\n+Some errors have detailed explanations: E0493, E0764.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "18645efc8871505c7292ec1b4ad8ecab8dd1ac9a", "filename": "src/test/ui/consts/const-multi-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -3,7 +3,7 @@\n \n const _: i32 = {\n     let mut a = 5;\n-    let p = &mut a; //~ ERROR references in constants may only refer to immutable values\n+    let p = &mut a; //~ ERROR mutable references are not allowed in constants\n \n     let reborrow = {p};\n     let pp = &reborrow;"}, {"sha": "9a7914b458874a748167ebb0528fe2e14525539a", "filename": "src/test/ui/consts/const-multi-ref.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/const-multi-ref.rs:6:13\n    |\n LL |     let p = &mut a;\n-   |             ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n   --> $DIR/const-multi-ref.rs:16:13\n@@ -15,5 +12,5 @@ LL |     let p = &a;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0492, E0658.\n+Some errors have detailed explanations: E0492, E0764.\n For more information about an error, try `rustc --explain E0492`."}, {"sha": "5819daa817af04cce4c45d3f3991fb868072031d", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(const_mut_refs)]\n #![feature(const_fn)]\n #![feature(raw_ref_op)]\n@@ -24,7 +22,9 @@ const fn baz(foo: &mut Foo)-> *mut usize {\n \n const _: () = {\n     foo().bar();\n+    //~^ ERROR mutable references are not allowed in constants\n     baz(&mut foo());\n+    //~^ ERROR mutable references are not allowed in constants\n };\n \n fn main() {}"}, {"sha": "2214ce6ee1c8768fafd979f9f2f1bbe6fb483a35", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,15 @@\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/const_mut_address_of.rs:24:5\n+   |\n+LL |     foo().bar();\n+   |     ^^^^^ `&mut` is only allowed in `const fn`\n+\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/const_mut_address_of.rs:26:9\n+   |\n+LL |     baz(&mut foo());\n+   |         ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "9099d5a1b8ea642367d3f713984c5013268ed8ab", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![feature(const_mut_refs)]\n \n struct Foo {\n@@ -31,6 +29,9 @@ const fn bazz(foo: &mut Foo) -> usize {\n \n fn main() {\n     let _: [(); foo().bar()] = [(); 1];\n+    //~^ ERROR mutable references are not allowed in constants\n     let _: [(); baz(&mut foo())] = [(); 2];\n+    //~^ ERROR mutable references are not allowed in constants\n     let _: [(); bazz(&mut foo())] = [(); 3];\n+    //~^ ERROR mutable references are not allowed in constants\n }"}, {"sha": "4ca7b128b7c4b8253ad5e8fa7a650229c0a6c2a6", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,21 @@\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/const_mut_refs.rs:31:17\n+   |\n+LL |     let _: [(); foo().bar()] = [(); 1];\n+   |                 ^^^^^ `&mut` is only allowed in `const fn`\n+\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/const_mut_refs.rs:33:21\n+   |\n+LL |     let _: [(); baz(&mut foo())] = [(); 2];\n+   |                     ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/const_mut_refs.rs:35:22\n+   |\n+LL |     let _: [(); bazz(&mut foo())] = [(); 3];\n+   |                      ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "f993a427b4899dbf591ac718ace8bd7553f3ae79", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -13,14 +13,14 @@ impl S {\n \n const FOO: S = {\n     let mut s = S { state: 42 };\n-    s.foo(3); //~ ERROR references in constants may only refer to immutable values\n+    s.foo(3); //~ ERROR mutable references are not allowed in constants\n     s\n };\n \n type Array = [u32; {\n     let mut x = 2;\n     let y = &mut x;\n-//~^ ERROR references in constants may only refer to immutable values\n+//~^ ERROR mutable references are not allowed in constants\n     *y = 42;\n //~^ ERROR constant contains unimplemented expression type\n     *y"}, {"sha": "dd05a4c0bb069c9ff3184829fb0aea8990fb3954", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -6,23 +6,17 @@ LL |         self.state = x;\n    |\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3);\n-   |     ^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |     ^ `&mut` is only allowed in `const fn`\n \n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:22:13\n    |\n LL |     let y = &mut x;\n-   |             ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/const_let_assign3.rs:24:5\n@@ -34,5 +28,5 @@ LL |     *y = 42;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0019, E0658.\n+Some errors have detailed explanations: E0019, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "fad8f011f75f55ba17f3926d9408a4641f05f4fb", "filename": "src/test/ui/consts/projection_qualif.mut_refs.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,9 @@\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/projection_qualif.rs:10:27\n+   |\n+LL |         let b: *mut u32 = &mut a;\n+   |                           ^^^^^^ `&mut` is only allowed in `const fn`\n+\n error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/projection_qualif.rs:11:18\n    |\n@@ -7,6 +13,7 @@ LL |         unsafe { *b = 5; }\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "7db970cf1379f4aebc0e9ea9e6cd43fc27feb05d", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -7,7 +7,7 @@ use std::cell::Cell;\n const FOO: &u32 = {\n     let mut a = 42;\n     {\n-        let b: *mut u32 = &mut a; //[stock]~ ERROR may only refer to immutable values\n+        let b: *mut u32 = &mut a; //~ ERROR mutable references are not allowed in constants\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n         //[stock]~^ contains unimplemented expression\n     }"}, {"sha": "212f12286455f44a53a48f23df2aa48e419a9a99", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/projection_qualif.rs:10:27\n    |\n LL |         let b: *mut u32 = &mut a;\n-   |                           ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                           ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/projection_qualif.rs:11:18\n@@ -26,5 +23,5 @@ LL |         unsafe { *b = 5; }\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0658.\n+Some errors have detailed explanations: E0019, E0658, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "5faa983ab09f71cc0e9ebabcea6f6d0df7daf80f", "filename": "src/test/ui/consts/read_from_static_mut_ref.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,10 +1,9 @@\n-// run-pass\n+// We are keeping this test in case we decide to allow mutable references in statics again\n #![feature(const_mut_refs)]\n #![allow(const_err)]\n \n-static OH_YES: &mut i32 = &mut 42;\n-\n+static OH_NO: &mut i32 = &mut 42;\n+//~^ ERROR mutable references are not allowed in statics\n fn main() {\n-    // Make sure `OH_YES` can be read.\n-    assert_eq!(*OH_YES, 42);\n+    assert_eq!(*OH_NO, 42);\n }"}, {"sha": "c936ac0b7d585208c1bfa044535ffe4732e0bc91", "filename": "src/test/ui/consts/read_from_static_mut_ref.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,9 @@\n+error[E0764]: mutable references are not allowed in statics\n+  --> $DIR/read_from_static_mut_ref.rs:5:26\n+   |\n+LL | static OH_NO: &mut i32 = &mut 42;\n+   |                          ^^^^^^^ `&mut` is only allowed in `const fn`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "36c280ca5c607bc33c5f1dbb9f00c67b9900ec10", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.mut_refs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,9 +1,9 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n+error[E0764]: mutable references are not allowed in statics\n+  --> $DIR/static_mut_containing_mut_ref2.rs:7:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "a6bbe8d6ec24c1b15c1312f30a51f433aedd2b6d", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -5,8 +5,7 @@\n static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-//[mut_refs]~^ ERROR could not evaluate static initializer\n-//[stock]~^^ ERROR references in statics may only refer to immutable values\n+//~^ ERROR  mutable references are not allowed in statics\n //[stock]~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "57fb27e642e6f00aa30cd95a338f1825814deed7", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/static_mut_containing_mut_ref2.rs:7:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n@@ -17,5 +14,5 @@ LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 4\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0019, E0658.\n+Some errors have detailed explanations: E0019, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "3adbbb53046340abf7193be415f7eda66ffcad23", "filename": "src/test/ui/consts/trait_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -5,7 +5,7 @@\n // Tests that specialization does not cause optimizations running on polymorphic MIR to resolve\n // to a `default` implementation.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Marker {}\n "}, {"sha": "03da7d512e592a5a15cb075db93d0e8b58f201e5", "filename": "src/test/ui/consts/trait_specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait_specialization.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "818dec1207b961c621d459b2c72104e001f2d1ef", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,10 +2,10 @@ static X: i32 = 1;\n const C: i32 = 2;\n static mut M: i32 = 3;\n \n-const CR: &'static mut i32 = &mut C; //~ ERROR E0658\n-static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0658\n+const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0764\n                                               //~| ERROR E0019\n                                               //~| ERROR cannot borrow\n-static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0658\n-static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0658\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n+static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0764\n fn main() {}"}, {"sha": "c1d96de1dca7c94346e98e3d4f85804fc3fe6c18", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/E0017.rs:5:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n-   |                              ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/E0017.rs:6:39\n@@ -15,40 +12,31 @@ LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0017.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0017.rs:9:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n-   |                                      ^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0017.rs:10:52\n    |\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n-   |                                                    ^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                                    ^^^^^^ `&mut` is only allowed in `const fn`\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0019, E0596, E0658.\n+Some errors have detailed explanations: E0019, E0596, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "13131017c2e07df2e87dd9da1cebd72dea8fd39b", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,10 +1,10 @@\n static X: i32 = 1;\n const C: i32 = 2;\n \n-const CR: &'static mut i32 = &mut C; //~ ERROR E0658\n-static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0658\n+const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0019\n                                               //~| ERROR cannot borrow\n-                                              //~| ERROR E0019\n-static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0658\n+                                              //~| ERROR E0764\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n \n fn main() {}"}, {"sha": "f09100bac43ce2c9c29a795dbb5d07f15161daa2", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/E0388.rs:4:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n-   |                              ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/E0388.rs:5:39\n@@ -15,31 +12,25 @@ LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0388.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0388.rs:8:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n-   |                                      ^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0019, E0596, E0658.\n+Some errors have detailed explanations: E0019, E0596, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "ead78b7ffa2c40005838c27da367f1b4bea92c20", "filename": "src/test/ui/error-codes/E0520.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,5 @@\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait SpaceLlama {\n     fn fly(&self);"}, {"sha": "1041ccee937042726a1296b22fdbdb2b49ddbf52", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/E0520.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/E0520.rs:16:5\n+  --> $DIR/E0520.rs:17:5\n    |\n LL | / impl<T: Clone> SpaceLlama for T {\n LL | |     fn fly(&self) {}\n@@ -11,6 +20,6 @@ LL |       default fn fly(&self) {}\n    |\n    = note: to specialize, `fly` in the parent `impl` must be marked `default`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "607b4a49661cc6cb8014cbb565f3dd748d860b2e", "filename": "src/test/ui/impl-trait/equality-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: std::fmt::Debug + Eq {}\n "}, {"sha": "1abf05dca8270b37fc869fb243139c6079bf5792", "filename": "src/test/ui/impl-trait/equality-rpass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality-rpass.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "828b5aac896beff3d71fb276d3dc3b0785502dfd", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: Copy + ToString {}\n "}, {"sha": "628dfb13d4ca8834bc6c32f2ffbbf282a00dce3e", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n@@ -24,7 +33,7 @@ LL |         n + sum_to(n - 1)\n    |\n    = help: the trait `std::ops::Add<impl Foo>` is not implemented for `u32`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "2e325867da86ee999dcfd87719630c995a3a2857", "filename": "src/test/ui/impl-trait/equality2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: Copy + ToString {}\n "}, {"sha": "1780931efc5415790de6efab2b5c47be4694e680", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality2.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n@@ -58,6 +67,6 @@ LL |          x.0);\n    = note: expected opaque type `impl Foo` (`i32`)\n               found opaque type `impl Foo` (`u32`)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "49023f18ddbfbfb35c1f75e90228604001b2c219", "filename": "src/test/ui/issues/issue-17718-const-bad-values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,10 +1,10 @@\n const C1: &'static mut [usize] = &mut [];\n-//~^ ERROR: references in constants may only refer to immutable values\n+//~^ ERROR: mutable references are not allowed in constants\n \n static mut S: usize = 3;\n const C2: &'static mut usize = unsafe { &mut S };\n //~^ ERROR: constants cannot refer to statics\n //~| ERROR: constants cannot refer to statics\n-//~| ERROR: references in constants may only refer to immutable values\n+//~| ERROR: mutable references are not allowed in constants\n \n fn main() {}"}, {"sha": "7c50978d4ebb83932e167818a6cf94cd9194b5cf", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/issue-17718-const-bad-values.rs:1:34\n    |\n LL | const C1: &'static mut [usize] = &mut [];\n-   |                                  ^^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                  ^^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-const-bad-values.rs:5:46\n@@ -23,16 +20,13 @@ LL | const C2: &'static mut usize = unsafe { &mut S };\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0658]: references in constants may only refer to immutable values\n+error[E0764]: mutable references are not allowed in constants\n   --> $DIR/issue-17718-const-bad-values.rs:5:41\n    |\n LL | const C2: &'static mut usize = unsafe { &mut S };\n-   |                                         ^^^^^^ constants require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                         ^^^^^^ `&mut` is only allowed in `const fn`\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0013, E0658.\n+Some errors have detailed explanations: E0013, E0764.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "75be4a11efd22dab804500b0d60b17bdf48468df", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -14,7 +14,7 @@ pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| { //~ ERROR type annotations needed\n-        let_(add(x,x), |y| {\n+    let ex = |x| {\n+        let_(add(x,x), |y| { //~ ERROR type annotations needed\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "77555fce7c460bbff07b074bb9884dca84521ce2", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,8 +1,13 @@\n-error[E0282]: type annotations needed for `Expr<'_, VAR>`\n-  --> $DIR/issue-23046.rs:17:15\n+error[E0282]: type annotations needed for the closure `fn(Expr<'_, _>) -> Expr<'_, _>`\n+  --> $DIR/issue-23046.rs:18:9\n    |\n-LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n+LL |         let_(add(x,x), |y| {\n+   |         ^^^^ cannot infer type for type parameter `VAR` declared on the function `let_`\n+   |\n+help: give this closure an explicit return type without `_` placeholders\n+   |\n+LL |             let_(add(x, x), |x|-> Expr<'_, _> { x })})};\n+   |                                ^^^^^^^^^^^^^^^^   ^\n \n error: aborting due to previous error\n "}, {"sha": "cc35213b93d686aec69d958fe88c640ac3c5972e", "filename": "src/test/ui/issues/issue-35376.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "06c31f3bae0620235969d416908d1b7c2d6b5628", "filename": "src/test/ui/issues/issue-35376.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-35376.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c1262430502448f383596102de60f0f4735fc5ad", "filename": "src/test/ui/issues/issue-38091.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Iterate<'a> {\n     type Ty: Valid;"}, {"sha": "a9855445f66680e4cfdbfc665ec9acf80636dbbc", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-38091.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "273187a5a13beb44b38cdfd24b3c891614288d08", "filename": "src/test/ui/issues/issue-46604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR E0658\n+static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR E0764\n fn write<T: AsRef<[u8]>>(buffer: T) { }\n \n fn main() {"}, {"sha": "5421721dec2e315c72272de197f4628b70c92f23", "filename": "src/test/ui/issues/issue-46604.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: references in statics may only refer to immutable values\n+error[E0764]: mutable references are not allowed in statics\n   --> $DIR/issue-46604.rs:1:25\n    |\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n-   |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                         ^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:6:5\n@@ -15,5 +12,5 @@ LL |     buf[0]=2;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0594, E0658.\n+Some errors have detailed explanations: E0594, E0764.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "f7cb296d3b8bb738bb0b5a4b3f72a4cb66eb2d4a", "filename": "src/test/ui/issues/issue-55380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn abc() -> u32;"}, {"sha": "451beebd1061ee1faf53c49b999187bcdbca6234", "filename": "src/test/ui/issues/issue-55380.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55380.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4edbd9ca15de7d5bac3031f745d3e39fe2a07893", "filename": "src/test/ui/issues/issue-72690.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,62 @@\n+fn no_err() {\n+    |x: String| x;\n+    let _ = String::from(\"x\");\n+}\n+\n+fn err() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn arg_pat_closure_err() {\n+    |x| String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn local_pat_closure_err() {\n+    let _ = \"x\".as_ref(); //~ ERROR type annotations needed\n+}\n+\n+fn err_first_arg_pat() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    |x: String| x;\n+}\n+\n+fn err_second_arg_pat() {\n+    |x: String| x;\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn err_mid_arg_pat() {\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+}\n+\n+fn err_first_local_pat() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    let _ = String::from(\"x\");\n+}\n+\n+fn err_second_local_pat() {\n+    let _ = String::from(\"x\");\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn err_mid_local_pat() {\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+}\n+\n+fn main() {}"}, {"sha": "64e78ddf60474b5f844723e4593dc6d2c5b2aa9b", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,88 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:7:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-72690.rs:11:6\n+   |\n+LL |     |x| String::from(\"x\".as_ref());\n+   |      ^ consider giving this closure parameter a type\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:15:17\n+   |\n+LL |     let _ = \"x\".as_ref();\n+   |                 ^^^^^^ cannot infer type for type `str`\n+   |\n+   = note: cannot satisfy `str: std::convert::AsRef<_>`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:19:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:25:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:33:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:41:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:47:5\n+   |\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:55:5\n+   |\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+...\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "1e413120a371730bb854e0823c77a9c50e8ac612", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(marker_trait_attr)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n #[marker]\n trait MyMarker {}"}, {"sha": "16df31ba2a88b5e5a7873a0c43f39fbc3eff8cb3", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/overlap-doesnt-conflict-with-specialization.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a8759d2090d0fd72cadba4ca5ee34df6e8be0585", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,7 @@\n // Semantically, we do not allow e.g., `static X: u8 = 0;` as an associated item.\n \n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "bc3054c3e30622a37f899c8c8db63315845d6c90", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,167 +1,176 @@\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:9:5\n+  --> $DIR/assoc-static-semantic-fail.rs:10:5\n    |\n LL |     static IA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+  --> $DIR/assoc-static-semantic-fail.rs:12:5\n    |\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+  --> $DIR/assoc-static-semantic-fail.rs:15:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+  --> $DIR/assoc-static-semantic-fail.rs:15:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:17:16\n+  --> $DIR/assoc-static-semantic-fail.rs:18:16\n    |\n LL |     pub(crate) default static ID: u8;\n    |                ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:17:5\n+  --> $DIR/assoc-static-semantic-fail.rs:18:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:25:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:26:5\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:31:16\n+  --> $DIR/assoc-static-semantic-fail.rs:32:16\n    |\n LL |     pub(crate) default static TD: u8;\n    |                ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:31:5\n+  --> $DIR/assoc-static-semantic-fail.rs:32:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:39:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:41:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:44:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:44:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:46:9\n+  --> $DIR/assoc-static-semantic-fail.rs:47:9\n    |\n LL |     pub default static TD: u8;\n    |         ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+  --> $DIR/assoc-static-semantic-fail.rs:12:5\n    |\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^-\n    |                  |\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:17:5\n+  --> $DIR/assoc-static-semantic-fail.rs:18:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                     |\n    |                                     help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:31:5\n+  --> $DIR/assoc-static-semantic-fail.rs:32:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:41:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^-\n    |                  |\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                              |\n    |                              help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^ `pub` not permitted here because it's implied\n \n-error: aborting due to 24 previous errors\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-static-semantic-fail.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error: aborting due to 24 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0449`."}, {"sha": "52338c1f13aadde7c3ac78af8ef1284bbe6f4ead", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,7 @@\n // Test successful and unsuccessful parsing of the `default` contextual keyword\n \n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo<T: Default>() -> T;"}, {"sha": "dea35666f37b56c80f12150bc9e2aa2ba4a9284f", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,13 +1,13 @@\n error: `default` is not followed by an item\n-  --> $DIR/default.rs:22:5\n+  --> $DIR/default.rs:23:5\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n    |     ^^^^^^^ the `default` qualifier\n    |\n    = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n \n error: non-item in item list\n-  --> $DIR/default.rs:22:13\n+  --> $DIR/default.rs:23:13\n    |\n LL | impl Foo for u32 {\n    |                  - item list starts here\n@@ -18,21 +18,30 @@ LL | }\n    | - item list ends here\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/default.rs:16:5\n+  --> $DIR/default.rs:17:5\n    |\n LL |     pub default fn foo<T: Default>() -> T {\n    |     ^^^ `pub` not permitted here because it's implied\n \n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/default.rs:21:1\n+  --> $DIR/default.rs:22:1\n    |\n LL |     fn foo<T: Default>() -> T;\n    |     -------------------------- `foo` from trait\n ...\n LL | impl Foo for u32 {\n    | ^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0046, E0449.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "34aee7f69359ee2c0d63ddd6f77c5c99c1d39c3d", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "e8ff93f63237da3e779aecefef2816d9563d0936", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -46,5 +46,14 @@ LL |     default fn f2() {}\n    |     |\n    |     `default` because of this\n \n-error: aborting due to 6 previous errors\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n "}, {"sha": "4947f3b3d8b13b883ebab44eb5248518518960ca", "filename": "src/test/ui/sanitize/incompatible.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z sanitizer=address -Z sanitizer=memory --target x86_64-unknown-linux-gnu\n+// error-pattern: error: `-Zsanitizer=address` is incompatible with `-Zsanitizer=memory`\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "f86db41bac7175ada7f62b20a5094dc74a0e7393", "filename": "src/test/ui/sanitize/incompatible.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer=address` is incompatible with `-Zsanitizer=memory`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ccc9988cdeccdd3fe74973f00b5a176be059770", "filename": "src/test/ui/sanitize/unsupported-target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,5 @@\n-// ignore-tidy-linelength\n // compile-flags: -Z sanitizer=leak --target i686-unknown-linux-gnu\n-// error-pattern: error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+// error-pattern: error: `-Zsanitizer=leak` only works with targets:\n \n #![feature(no_core)]\n #![no_core]"}, {"sha": "f9434bc9512d01d4d7f5f14273fca74bb0ca76c1", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+error: `-Zsanitizer=leak` only works with targets: x86_64-apple-darwin, x86_64-unknown-linux-gnu\n \n error: aborting due to previous error\n "}, {"sha": "fc39b553a61ac31cef08b8161cd2a66d01c2d859", "filename": "src/test/ui/specialization/assoc-ty-graph-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // Make sure we don't crash with a cycle error during coherence.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Trait<T> {\n     type Assoc;"}, {"sha": "250f48f8e5932f88f710d9b7b75820eb3efbd5cb", "filename": "src/test/ui/specialization/assoc-ty-graph-cycle.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-ty-graph-cycle.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fc28d0c815eb3366dbc62e206e5d0a18aa90b4ef", "filename": "src/test/ui/specialization/cross-crate-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // aux-build:cross_crates_defaults.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate cross_crates_defaults;\n "}, {"sha": "f18bc99d73916d21a642535c92844374240ed38b", "filename": "src/test/ui/specialization/cross-crate-defaults.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/cross-crate-defaults.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5d67160eb96ad8f2114c424ee0f778fa535818f8", "filename": "src/test/ui/specialization/defaultimpl/allowed-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -5,7 +5,7 @@\n \n // aux-build:go_trait.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate go_trait;\n "}, {"sha": "1b50329719d011672834e329c5d5b27a0d375367", "filename": "src/test/ui/specialization/defaultimpl/allowed-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/allowed-cross-crate.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "13258ac8c9fe670ba2f39aa6e7e20efe2bcedab4", "filename": "src/test/ui/specialization/defaultimpl/out-of-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // Test that you can list the more specific impl before the more general one.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     type Out;"}, {"sha": "deae021a8914d00e1f9a46570e2c2f1558b2a513", "filename": "src/test/ui/specialization/defaultimpl/out-of-order.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/out-of-order.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "0add4d5516c7b3433980eb8b0676daeb8213bb3a", "filename": "src/test/ui/specialization/defaultimpl/overlap-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@\n // projections involve specialization, so long as the associated type is\n // provided by the most specialized impl.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Assoc {\n     type Output;"}, {"sha": "46899ca99549044c0331883e0914cafcbfbaf155", "filename": "src/test/ui/specialization/defaultimpl/overlap-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/overlap-projection.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4a9140969324dd46b94ae8cc22ef55313e8b844e", "filename": "src/test/ui/specialization/defaultimpl/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n // cf compile-fail/specialization-default-projection.rs"}, {"sha": "8629c6c52d4a7a4326011a3d3eff6a3238965721", "filename": "src/test/ui/specialization/defaultimpl/projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "661724eef8a4386a7edc2de3c191074e9d54a74a", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`."}, {"sha": "7958eddbeba251aefe0bcde14803c2c6698e83ff", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-no-default.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5\n    |\n@@ -65,6 +74,6 @@ LL |       fn redundant(&self) {}\n    |\n    = note: to specialize, `redundant` in the parent `impl` must be marked `default`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "89fef5b5ef9692838a27c0756ace6c2a623543ba", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -3,7 +3,7 @@\n // Tests that we can combine a default impl that supplies one method with a\n // full impl that supplies the other, and they can invoke one another.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "dc377dd10c868d18359ae354ddcf2949ace8f649", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-item-not-implemented-rpass.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3c5414469fac2ef6a5c2146d6c0c3d4cc98faea4", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // Tests that default impls do not have to supply all items but regular impls do.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "9d1eca1d6af76d4403bdee7ad868b3f2cb34384a", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-item-not-implemented.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0046]: not all trait items implemented, missing: `foo_two`\n   --> $DIR/specialization-trait-item-not-implemented.rs:18:1\n    |\n@@ -7,6 +16,6 @@ LL |     fn foo_two(&self) -> &'static str;\n LL | impl Foo for MyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^ missing `foo_two` in implementation\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "35e3b8725a82a522ff3ac19e1a812e211a4319f0", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n // - default impls do not have to supply all items and\n // - a default impl does not count as an impl (in this case, an incomplete default impl).\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "6b8e559bc36343ed23eb191681bcc8c2fd2a019e", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-not-implemented.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0599]: no method named `foo_one` found for struct `MyStruct` in the current scope\n   --> $DIR/specialization-trait-not-implemented.rs:22:29\n    |\n@@ -19,6 +28,6 @@ note: `Foo` defines an item `foo_one`, perhaps you need to implement it\n LL | trait Foo {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "afd634725e365adfcfe9eeee34096d7fa0cf3d15", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // Tests that a default impl still has to have a WF trait ref.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo<'a, T: Eq + 'a> { }\n "}, {"sha": "d45825651a8e27d1e9efd010a04c743d0983b836", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-wfcheck.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n@@ -12,6 +21,6 @@ help: consider restricting type parameter `U`\n LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}\n    |               ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8558a1efb82f3694167495e620a56af2cffafe90", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,5 @@\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n struct S;\n struct Z;"}, {"sha": "2449849725f383c71b2c0483ee61de7f78b110fc", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -8,6 +8,15 @@ LL | default impl S {}\n    |\n    = note: only trait implementations may be annotated with `default`\n \n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/validation.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error: impls of auto traits cannot be default\n   --> $DIR/validation.rs:9:21\n    |\n@@ -36,6 +45,6 @@ error[E0750]: negative impls cannot be default impls\n LL | default impl !Tr for S {}\n    | ^^^^^^^      ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0750`."}, {"sha": "89350602f3652bc58710e4c2d8387bb01c3c77ad", "filename": "src/test/ui/specialization/issue-36804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n pub struct Cloned<I>(I);\n "}, {"sha": "744d88204247b4335e2d646dcb0889a605ecef4b", "filename": "src/test/ui/specialization/issue-36804.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-36804.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9dd47a4a17e434b054255396fa66209ba3e329ce", "filename": "src/test/ui/specialization/issue-39448.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for a specialization-related ICE (#39448).\n "}, {"sha": "f3bb69b8f712a986fd7501ce83dfb45894f1ab79", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-39448.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n   --> $DIR/issue-39448.rs:45:13\n    |\n@@ -7,6 +16,6 @@ LL |     x.foo(y.to()).to()\n    = note: required because of the requirements on the impl of `FromA<U>` for `T`\n    = note: required because of the requirements on the impl of `ToA<T>` for `U`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "72630ee9c7055c7020511533e4a3b682d37f72aa", "filename": "src/test/ui/specialization/issue-39618.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@\n \n // check-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo(&self);"}, {"sha": "d40d17d8f71ca2349fb875eb3a5454dae6a455cc", "filename": "src/test/ui/specialization/issue-39618.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-39618.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "29fc12066e8752d4d59d2e620e074fb0de6ed6b9", "filename": "src/test/ui/specialization/issue-50452.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn foo();"}, {"sha": "c01817e0b2793a5ab3c06294a48e9f7b6db29558", "filename": "src/test/ui/specialization/issue-50452.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-50452.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8046587020661b57a0ad2f63450a9d9068a3c86b", "filename": "src/test/ui/specialization/issue-52050.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for #52050: when inserting the blanket impl `I`\n // into the tree, we had to replace the child node for `Foo`, which"}, {"sha": "a7564ced055d5ef1ff5afad749b8e46291a60270", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-52050.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0119]: conflicting implementations of trait `IntoPyDictPointer` for type `()`:\n   --> $DIR/issue-52050.rs:28:1\n    |\n@@ -13,6 +22,6 @@ LL |   impl IntoPyDictPointer for ()\n    |\n    = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `()` in future versions\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "10f185c335144a198833f417d9f7f214f581947a", "filename": "src/test/ui/specialization/issue-63716-parse-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@\n // check-pass\n // edition:2018\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "43620e1ba51e1b3b631707f66fc94e6f93f09d4d", "filename": "src/test/ui/specialization/issue-63716-parse-async.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63716-parse-async.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d41b5355c2cded91a2db374db9e96214be95a947", "filename": "src/test/ui/specialization/issue-70442.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // check-pass\n "}, {"sha": "f71e4c7dd1cef0ca9bc9ccace200c5827ff831d8", "filename": "src/test/ui/specialization/issue-70442.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-70442.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7d6ac829dd1482115632309389b38940af10805", "filename": "src/test/ui/specialization/non-defaulted-item-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,5 @@\n #![feature(specialization, associated_type_defaults)]\n+//~^ WARN the feature `specialization` is incomplete\n \n // Test that attempting to override a non-default method or one not in the\n // parent impl causes an error."}, {"sha": "eae045b92c04d49521d2fb697391c9243fd5e0f6", "filename": "src/test/ui/specialization/non-defaulted-item-fail.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/non-defaulted-item-fail.rs:1:12\n+   |\n+LL | #![feature(specialization, associated_type_defaults)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:29:5\n+  --> $DIR/non-defaulted-item-fail.rs:30:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -14,7 +23,7 @@ LL |       type Ty = Vec<()>;\n    = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n \n error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:31:5\n+  --> $DIR/non-defaulted-item-fail.rs:32:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -29,7 +38,7 @@ LL |       const CONST: u8 = 42;\n    = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:33:5\n+  --> $DIR/non-defaulted-item-fail.rs:34:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -44,7 +53,7 @@ LL |       fn foo(&self) -> bool { true }\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:45:5\n+  --> $DIR/non-defaulted-item-fail.rs:46:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -55,7 +64,7 @@ LL |     type Ty = Vec<()>;\n    = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n \n error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:47:5\n+  --> $DIR/non-defaulted-item-fail.rs:48:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -66,7 +75,7 @@ LL |     const CONST: u8 = 42;\n    = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:49:5\n+  --> $DIR/non-defaulted-item-fail.rs:50:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -76,6 +85,6 @@ LL |     fn foo(&self) -> bool { true }\n    |\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "5d67160eb96ad8f2114c424ee0f778fa535818f8", "filename": "src/test/ui/specialization/specialization-allowed-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -5,7 +5,7 @@\n \n // aux-build:go_trait.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate go_trait;\n "}, {"sha": "7d087545725beb7b255c5bfa511110d55252769e", "filename": "src/test/ui/specialization/specialization-allowed-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-allowed-cross-crate.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cbfcb4719f6a495e14ecd30121eaf1b11473fafa", "filename": "src/test/ui/specialization/specialization-assoc-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // Test that non-method associated functions can be specialized\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn mk() -> Self;"}, {"sha": "b12738604ea839c0811ace95c23fe87ee3abcb5e", "filename": "src/test/ui/specialization/specialization-assoc-fns.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-assoc-fns.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "721c934dbfab96cbb06b2a63cb0260c2db581cc0", "filename": "src/test/ui/specialization/specialization-basics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Tests a variety of basic specialization scenarios and method\n // dispatch for them."}, {"sha": "ad00cd81df13c976cf0703423dbb40a1fc9d831f", "filename": "src/test/ui/specialization/specialization-basics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-basics.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4171505aa374c7d1066450bf9c73fb27789d08de", "filename": "src/test/ui/specialization/specialization-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // aux-build:specialization_cross_crate.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate specialization_cross_crate;\n "}, {"sha": "7481eed796d966ad32b43bdcbbe2c4b2f092673c", "filename": "src/test/ui/specialization/specialization-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-cross-crate.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dcf68afa945bf2ff83408a44447e61e702c5aca5", "filename": "src/test/ui/specialization/specialization-default-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Test that default methods are cascaded correctly\n "}, {"sha": "4fa19adad066e8bba150bc7a10156ab18c90d9e8", "filename": "src/test/ui/specialization/specialization-default-methods.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-methods.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7f3ae951287ca3daf1aab119c55a6b2409497764", "filename": "src/test/ui/specialization/specialization-default-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we can't project defaulted associated types\n "}, {"sha": "456eb6d5ca553b446a0fb1a7cf85fa366ce305d8", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-projection.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-projection.rs:21:5\n    |\n@@ -28,6 +37,6 @@ LL |     generic::<()>()\n    = help: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "346471f11e4a8d5c7c34ecac81502da8d70392a2", "filename": "src/test/ui/specialization/specialization-default-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n // associated type in the impl defining it -- otherwise, what happens\n // if it's overridden?\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Example {\n     type Output;"}, {"sha": "5e0221f07882ec994ff9a2f94eaff8d6c62b7ef2", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-types.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:15:9\n    |\n@@ -24,6 +33,6 @@ LL |     Example::generate(t)\n    = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ae739b2358d5869074269f32e064e4a68e6c90fe", "filename": "src/test/ui/specialization/specialization-no-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`."}, {"sha": "bb8b2a6c98e09f4ef997abd47b090bf65213f082", "filename": "src/test/ui/specialization/specialization-no-default.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-no-default.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5\n    |\n@@ -65,6 +74,6 @@ LL |       default fn redundant(&self) {}\n    |\n    = note: to specialize, `redundant` in the parent `impl` must be marked `default`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "be8dcc4232e7b7c96aad6fdf8866be7d4665c05a", "filename": "src/test/ui/specialization/specialization-on-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Ensure that specialization works for impls defined directly on a projection\n "}, {"sha": "d91668d10c5f3f7398a0a259337306797c1de9a9", "filename": "src/test/ui/specialization/specialization-on-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-on-projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cb7563e2760c2d4cc1f0162571cc1ca8668f0bcb", "filename": "src/test/ui/specialization/specialization-out-of-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n // Test that you can list the more specific impl before the more general one.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     type Out;"}, {"sha": "a17f9f11a3f31d815f9a5fe678d75b168c33cd06", "filename": "src/test/ui/specialization/specialization-out-of-order.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-out-of-order.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "550d37082953990ee21f23d69f4fba62f5ff9fa6", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,5 @@\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait MyTrait {}\n "}, {"sha": "6141174ba8c03c084ac83c92c8b73db3202e312d", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap-negative.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n@@ -6,6 +15,6 @@ LL | unsafe impl<T: Clone> Send for TestType<T> {}\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "b07efb2a5c1cdd631c3d664f70e83f31a1383f36", "filename": "src/test/ui/specialization/specialization-overlap-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@\n // projections involve specialization, so long as the associated type is\n // provided by the most specialized impl.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Assoc {\n     type Output;"}, {"sha": "6f1a594bacb3af550d3d84181f783aed35bb7122", "filename": "src/test/ui/specialization/specialization-overlap-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap-projection.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6bee22ceb8b645a2c923941cc2fe09b1edbb478a", "filename": "src/test/ui/specialization/specialization-overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo { fn foo() {} }\n impl<T: Clone> Foo for T {}"}, {"sha": "cf0f186a18337be7e57c8f6239316f36cb9bb69d", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`:\n   --> $DIR/specialization-overlap.rs:5:1\n    |\n@@ -30,6 +39,6 @@ LL | impl<T: Clone> Qux for T {}\n LL | impl<T: Eq> Qux for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "17897d8b803d9a967ed33c674e93e7f9a172dd53", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(optin_builtin_traits)]\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n auto trait Foo {}\n "}, {"sha": "c44af22b8e63b8092722cf34cfda7362466d37b7", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-polarity.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:10:1\n    |\n@@ -14,6 +23,6 @@ LL | impl<T> !Bar for T {}\n LL | impl Bar for u8 {}\n    | ^^^^^^^^^^^^^^^ positive implementation here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "f1f0b47bb65036e223f36029b2184e1196a5b120", "filename": "src/test/ui/specialization/specialization-projection-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for ICE when combining specialized associated types and type\n // aliases"}, {"sha": "0c3659a8f7a06a5542d3da9ec901b606e283fd86", "filename": "src/test/ui/specialization/specialization-projection-alias.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-projection-alias.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "700975e3b828f3e1ab739360f9610e67569ac584", "filename": "src/test/ui/specialization/specialization-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n // cf compile-fail/specialization-default-projection.rs"}, {"sha": "c5c86f5108e6e5dada1da6beae7681dfe7fb5c50", "filename": "src/test/ui/specialization/specialization-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fb85d8019218a7b551f15661cfc788538584ab01", "filename": "src/test/ui/specialization/specialization-super-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Test that you can specialize via an explicit trait hierarchy\n "}, {"sha": "05bdfd40136a45539e2adc7342c88d87c352b58c", "filename": "src/test/ui/specialization/specialization-super-traits.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-super-traits.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5c2781a9c63a6eb4267ed4bb53f5d0dfb874f1ac", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Iterator {\n     fn next(&self);"}, {"sha": "6284dd8f3f7d79eff9d03f333005b9699306384d", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections-with-lifetimes.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "62d63590a6688e238923122058c70780eee462b4", "filename": "src/test/ui/specialization/specialization-translate-projections-with-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -4,7 +4,7 @@\n // type parameters *and* rely on projections, and the type parameters are input\n // types on the trait.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Trait<T> {\n     fn convert(&self) -> T;"}, {"sha": "b17794173c5707b6865197fe99834a919b9c1f01", "filename": "src/test/ui/specialization/specialization-translate-projections-with-params.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections-with-params.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "92ea9e2b85d3256830ed2a384350a743e1f7c549", "filename": "src/test/ui/specialization/specialization-translate-projections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -3,7 +3,7 @@\n // Ensure that provided items are inherited properly even when impls vary in\n // type parameters *and* rely on projections.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n use std::convert::Into;\n "}, {"sha": "fbb28e606408842dc87f74bf70f9156af9f2390f", "filename": "src/test/ui/specialization/specialization-translate-projections.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c68bca432fa8667e7b5777dacc4959284f44b719", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,5 +1,6 @@\n #![feature(negative_impls)]\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait MyTrait {\n     type Foo;"}, {"sha": "50e74373b53bbd4c867a8fd16aa49e47123ea5c5", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,9 +1,18 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-default-impls.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0750]: negative impls cannot be default impls\n-  --> $DIR/negative-default-impls.rs:8:1\n+  --> $DIR/negative-default-impls.rs:9:1\n    |\n LL | default impl !MyTrait for u32 {}\n    | ^^^^^^^      ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0750`."}, {"sha": "35297ab124ed06f44381764f7ca535ac608bd1fd", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Test a negative impl that \"specializes\" another negative impl."}, {"sha": "8b536de378630094f892e16751257046dd556378", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-negative.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4281eedaf631c9173ac175c84d5d44cfd04486eb", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl."}, {"sha": "89ef15e89ac96a177a06ddff4ea54b3c835ec453", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-positive-item.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1\n    |\n@@ -7,6 +16,6 @@ LL | impl<T> MyTrait for T {\n LL | impl !MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "0e227691e0404e20186f2627ab651ba055215b6f", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl."}, {"sha": "e45d5a251ab263b0bcad9c2b255718b45a4d310d", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-positive.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1\n    |\n@@ -6,6 +15,6 @@ LL | impl<T> MyTrait for T {}\n LL | impl !MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "a06b357654068b2604fca2540ff841b3a7e38f74", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n trait MyTrait {}"}, {"sha": "49c16d474040e81102a085d941e5cbb25b382230", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/positive-specializes-negative.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1\n    |\n@@ -6,6 +15,6 @@ LL | impl<T> !MyTrait for T {}\n LL | impl MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^ positive implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "205d50a2ed9ce5bc88a7b0c508536d108da8378d", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,30 @@\n+// Test that we don't hit the recursion limit for short cycles involving lifetimes.\n+\n+// Shouldn't hit this, we should realize that we're in a cycle sooner.\n+#![recursion_limit=\"20\"]\n+\n+trait NotAuto {}\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+impl<T: NotAuto> NotAuto for Box<T> {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+impl<'a> NotAuto for C<'a> {}\n+\n+fn is_send<S: NotAuto>() {}\n+//~^ NOTE: required\n+\n+fn main() {\n+    // Should only be a few notes.\n+    is_send::<X<C<'static>>>();\n+    //~^ ERROR overflow evaluating\n+    //~| NOTE: required\n+}"}, {"sha": "9a227229ea4c2532ca90da09741b0c0b0c6a9460", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `std::boxed::Box<X<C<'_>>>: NotAuto`\n+  --> $DIR/traits-inductive-overflow-lifetime.rs:27:5\n+   |\n+LL | fn is_send<S: NotAuto>() {}\n+   |               ------- required by this bound in `is_send`\n+...\n+LL |     is_send::<X<C<'static>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "499334d983b1f1b38965c06be88b0cca8dac5279", "filename": "src/test/ui/transmute-specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftransmute-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftransmute-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-specialization.rs?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Specializable { type Output; }\n "}, {"sha": "02315051d30ec103e670f48dcfc5735f12ed7fdd", "filename": "src/test/ui/transmute-specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033013cab3a861224fd55f494c8be1cb0349eb49/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-specialization.stderr?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/transmute-specialization.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fb46b914c11b06828680cb526e2abe9e1d69b868", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1 +1 @@\n-Subproject commit 8d7a7167c15b9154755588c39b22b2336c89ca68\n+Subproject commit fb46b914c11b06828680cb526e2abe9e1d69b868"}, {"sha": "c1e9b7b87493c5197c4330693bdf4ccb30a90971", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=033013cab3a861224fd55f494c8be1cb0349eb49", "patch": "@@ -1 +1 @@\n-Subproject commit aedff61f7ac4fc2b287ff76d33f2584e1f63a3af\n+Subproject commit c1e9b7b87493c5197c4330693bdf4ccb30a90971"}]}