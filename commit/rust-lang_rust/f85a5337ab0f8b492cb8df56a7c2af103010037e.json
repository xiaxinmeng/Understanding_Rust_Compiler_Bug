{"sha": "f85a5337ab0f8b492cb8df56a7c2af103010037e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NWE1MzM3YWIwZjhiNDkyY2I4ZGY1NmE3YzJhZjEwMzAxMDAzN2U=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2017-04-19T18:57:29Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2017-04-19T18:57:29Z"}, "message": "specialize Extend for Vec with IntoIter", "tree": {"sha": "dfba14a7e2909a40803add33ba4bd790c08620e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfba14a7e2909a40803add33ba4bd790c08620e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85a5337ab0f8b492cb8df56a7c2af103010037e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85a5337ab0f8b492cb8df56a7c2af103010037e", "html_url": "https://github.com/rust-lang/rust/commit/f85a5337ab0f8b492cb8df56a7c2af103010037e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85a5337ab0f8b492cb8df56a7c2af103010037e/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa332c901575da70ac7a612609a26b752b1adc65", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa332c901575da70ac7a612609a26b752b1adc65", "html_url": "https://github.com/rust-lang/rust/commit/fa332c901575da70ac7a612609a26b752b1adc65"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "64c76142b59d660ca8d975a23da5aa7040c8f2aa", "filename": "src/libcollections/tests/vec.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f85a5337ab0f8b492cb8df56a7c2af103010037e/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85a5337ab0f8b492cb8df56a7c2af103010037e/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=f85a5337ab0f8b492cb8df56a7c2af103010037e", "patch": "@@ -84,6 +84,9 @@ fn test_extend() {\n     let mut v = Vec::new();\n     let mut w = Vec::new();\n \n+    v.extend(w.clone());\n+    assert_eq!(v, &[]);\n+\n     v.extend(0..3);\n     for i in 0..3 {\n         w.push(i)\n@@ -100,6 +103,25 @@ fn test_extend() {\n \n     v.extend(w.clone()); // specializes to `append`\n     assert!(v.iter().eq(w.iter().chain(w.iter())));\n+\n+    // Zero sized types\n+    #[derive(PartialEq, Debug)]\n+    struct Foo;\n+\n+    let mut a = Vec::new();\n+    let b = vec![Foo, Foo];\n+\n+    a.extend(b);\n+    assert_eq!(a, &[Foo, Foo]);\n+\n+    // Double drop\n+    let mut count_x = 0;\n+    {\n+        let mut x = Vec::new();\n+        let y = vec![DropCounter { count: &mut count_x }];\n+        x.extend(y);\n+    }\n+    assert_eq!(count_x, 1);\n }\n \n #[test]"}, {"sha": "bf54359226212422f7f5b7a2acf0c8f82aa41452", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f85a5337ab0f8b492cb8df56a7c2af103010037e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85a5337ab0f8b492cb8df56a7c2af103010037e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f85a5337ab0f8b492cb8df56a7c2af103010037e", "patch": "@@ -1039,18 +1039,22 @@ impl<T> Vec<T> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        self.reserve(other.len());\n-        let len = self.len();\n-        unsafe {\n-            ptr::copy_nonoverlapping(other.as_ptr(), self.get_unchecked_mut(len), other.len());\n-        }\n-\n-        self.len += other.len();\n         unsafe {\n+            self.append_elements(other.as_slice() as _);\n             other.set_len(0);\n         }\n     }\n \n+    /// Appends elements to `Self` from other buffer.\n+    #[inline]\n+    unsafe fn append_elements(&mut self, other: *const [T]) {\n+        let count = (*other).len();\n+        self.reserve(count);\n+        let len = self.len();\n+        ptr::copy_nonoverlapping(other as *const T, self.get_unchecked_mut(len), count);\n+        self.len += count;\n+    }\n+\n     /// Create a draining iterator that removes the specified range in the vector\n     /// and yields the removed items.\n     ///\n@@ -1681,7 +1685,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n         vector\n     }\n \n-    fn spec_extend(&mut self, iterator: I) {\n+    default fn spec_extend(&mut self, iterator: I) {\n         // This is the case for a TrustedLen iterator.\n         let (low, high) = iterator.size_hint();\n         if let Some(high_value) = high {\n@@ -1726,6 +1730,13 @@ impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n             vector\n         }\n     }\n+\n+    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n+        unsafe {\n+            self.append_elements(iterator.as_slice() as _);\n+        }\n+        iterator.ptr = iterator.end;\n+    }\n }\n \n impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>"}]}