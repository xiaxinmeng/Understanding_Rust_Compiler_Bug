{"sha": "8d9f258faaecc5c3824a9b7221463c0e984e1b71", "node_id": "C_kwDOAAsO6NoAKDhkOWYyNThmYWFlY2M1YzM4MjRhOWI3MjIxNDYzYzBlOTg0ZTFiNzE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-24T03:18:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-24T03:18:30Z"}, "message": "Rollup merge of #97240 - TaKO8Ki:improve-errors-about-typos-on-variables, r=compiler-errors\n\nTypo suggestion for a variable with a name similar to struct fields\n\ncloses #97133", "tree": {"sha": "28732f63527331e32fe31eea8ec39ab8c0415054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28732f63527331e32fe31eea8ec39ab8c0415054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9f258faaecc5c3824a9b7221463c0e984e1b71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijE6GCRBK7hj4Ov3rIwAACKEIAIAtUMNEeEP6S4dyXJquNAZG\nEU19QdlScRs7WZyH8uYNJrxikYc4yCD4cgtvpvFTCROrzlzfyDb2v+S7NBPUVHrs\ntc9EOxaZkO1UvbfUWYmJA6eLkvR9k/iWuyfvtIXF0y57UZgR6X1KSl1qtAMlDUre\nQtEx+vN5pX7q0ufFfqams64wNdTqhGZ791CgXU3p8KX1BZo2qavdqD2cRjc8+cqe\neEM8rwvTnTyYIlBTpfzJbfoIJWXbumY1tU+73i0/iJDXXQeTDj9LkAOelCP/g5NM\nRnaCHSfoC8Re6ZcIBxUSYtRliaesu8R9WGup6zFrJka50eNqHqI1SzpNbiAE/P8=\n=RnIS\n-----END PGP SIGNATURE-----\n", "payload": "tree 28732f63527331e32fe31eea8ec39ab8c0415054\nparent ee160f2f5e73b6f5954bc33f059c316d9e8582c4\nparent 39caed08ae56304b281cfb538020430e48cf499d\nauthor Yuki Okushi <jtitor@2k36.org> 1653362310 +0900\ncommitter GitHub <noreply@github.com> 1653362310 +0900\n\nRollup merge of #97240 - TaKO8Ki:improve-errors-about-typos-on-variables, r=compiler-errors\n\nTypo suggestion for a variable with a name similar to struct fields\n\ncloses #97133\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9f258faaecc5c3824a9b7221463c0e984e1b71", "html_url": "https://github.com/rust-lang/rust/commit/8d9f258faaecc5c3824a9b7221463c0e984e1b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9f258faaecc5c3824a9b7221463c0e984e1b71/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "html_url": "https://github.com/rust-lang/rust/commit/ee160f2f5e73b6f5954bc33f059c316d9e8582c4"}, {"sha": "39caed08ae56304b281cfb538020430e48cf499d", "url": "https://api.github.com/repos/rust-lang/rust/commits/39caed08ae56304b281cfb538020430e48cf499d", "html_url": "https://github.com/rust-lang/rust/commit/39caed08ae56304b281cfb538020430e48cf499d"}], "stats": {"total": 170, "additions": 163, "deletions": 7}, "files": [{"sha": "a6a04ac9ea6fc7da2681b608038edfcdc486fdf9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d9f258faaecc5c3824a9b7221463c0e984e1b71/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9f258faaecc5c3824a9b7221463c0e984e1b71/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8d9f258faaecc5c3824a9b7221463c0e984e1b71", "patch": "@@ -445,6 +445,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 );\n             }\n         }\n+        // Try Levenshtein algorithm.\n+        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -454,7 +456,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_suggestion(\n                                 span,\n                                 \"you might have meant to use the available field\",\n-                                format!(\"self.{}\", path_str),\n+                                format!(\"self.{path_str}\"),\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n@@ -465,7 +467,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             \"you might have meant to call the method\",\n-                            format!(\"self.{}\", path_str),\n+                            format!(\"self.{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -476,11 +478,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             &format!(\"you might have meant to {}\", candidate.action()),\n-                            format!(\"Self::{}\", path_str),\n+                            format!(\"Self::{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n+                self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n                 return (err, candidates);\n             }\n \n@@ -495,16 +498,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n                 err.span_suggestion(\n                     call_span,\n-                    &format!(\"try calling `{}` as a method\", ident),\n-                    format!(\"self.{}({})\", path_str, args_snippet),\n+                    &format!(\"try calling `{ident}` as a method\"),\n+                    format!(\"self.{path_str}({args_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n                 return (err, candidates);\n             }\n         }\n \n-        // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         // Try context-dependent help if relaxed lookup didn't work.\n         if let Some(res) = res {\n             if self.smart_resolve_context_dependent_help("}, {"sha": "ecd3f5881190420a0c0404b815c1a06a14e3de3d", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8d9f258faaecc5c3824a9b7221463c0e984e1b71/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9f258faaecc5c3824a9b7221463c0e984e1b71/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs?ref=8d9f258faaecc5c3824a9b7221463c0e984e1b71", "patch": "@@ -0,0 +1,46 @@\n+struct A {\n+    config: String,\n+}\n+\n+impl A {\n+    fn new(cofig: String) -> Self {\n+        Self { config } //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn do_something(cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn self_is_available(self, cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+}\n+\n+trait B {\n+    const BAR: u32 = 3;\n+    type Baz;\n+    fn bar(&self);\n+    fn baz(&self) {}\n+    fn bah() {}\n+}\n+\n+impl B for Box<isize> {\n+    type Baz = String;\n+    fn bar(&self) {\n+        // let baz = 3;\n+        baz();\n+        //~^ ERROR cannot find function `baz`\n+        bah;\n+        //~^ ERROR cannot find value `bah`\n+        BAR;\n+        //~^ ERROR cannot find value `BAR` in this scope\n+        let foo: Baz = \"\".to_string();\n+        //~^ ERROR cannot find type `Baz` in this scope\n+    }\n+}\n+\n+fn ba() {}\n+const BARR: u32 = 3;\n+type Bar = String;\n+\n+fn main() {}"}, {"sha": "0b0a37f246c9323fe434a56ffa8c239f9b130801", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8d9f258faaecc5c3824a9b7221463c0e984e1b71/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d9f258faaecc5c3824a9b7221463c0e984e1b71/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=8d9f258faaecc5c3824a9b7221463c0e984e1b71", "patch": "@@ -0,0 +1,109 @@\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:7:16\n+   |\n+LL |         Self { config }\n+   |                ^^^^^^\n+   |                |\n+   |                a field by this name exists in `Self`\n+   |                help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:11:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |                    |\n+   |                    a field by this name exists in `Self`\n+   |                    help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:15:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |\n+help: you might have meant to use the available field\n+   |\n+LL |         println!(\"{self.config}\");\n+   |                    ~~~~~~~~~~~\n+help: a local variable with a similar name exists\n+   |\n+LL |         println!(\"{cofig}\");\n+   |                    ~~~~~\n+\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:31:9\n+   |\n+LL |         baz();\n+   |         ^^^\n+...\n+LL | fn ba() {}\n+   | ------- similarly named function `ba` defined here\n+   |\n+help: you might have meant to call the method\n+   |\n+LL |         self.baz();\n+   |         ~~~~~~~~\n+help: a function with a similar name exists\n+   |\n+LL |         ba();\n+   |         ~~\n+\n+error[E0425]: cannot find value `bah` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:33:9\n+   |\n+LL |         bah;\n+   |         ^^^\n+...\n+LL | fn ba() {}\n+   | ------- similarly named function `ba` defined here\n+   |\n+help: you might have meant to call the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n+help: a function with a similar name exists\n+   |\n+LL |         ba;\n+   |         ~~\n+\n+error[E0425]: cannot find value `BAR` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:35:9\n+   |\n+LL |         BAR;\n+   |         ^^^\n+...\n+LL | const BARR: u32 = 3;\n+   | -------------------- similarly named constant `BARR` defined here\n+   |\n+help: you might have meant to use the associated `const`\n+   |\n+LL |         Self::BAR;\n+   |         ~~~~~~~~~\n+help: a constant with a similar name exists\n+   |\n+LL |         BARR;\n+   |         ~~~~\n+\n+error[E0412]: cannot find type `Baz` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:37:18\n+   |\n+LL |         let foo: Baz = \"\".to_string();\n+   |                  ^^^\n+...\n+LL | type Bar = String;\n+   | ------------------ similarly named type alias `Bar` defined here\n+   |\n+help: you might have meant to use the associated type\n+   |\n+LL |         let foo: Self::Baz = \"\".to_string();\n+   |                  ~~~~~~~~~\n+help: a type alias with a similar name exists\n+   |\n+LL |         let foo: Bar = \"\".to_string();\n+   |                  ~~~\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}]}