{"sha": "5ba5b653673faff60f15ad875cd22da6d0afc2bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTViNjUzNjczZmFmZjYwZjE1YWQ4NzVjZDIyZGE2ZDBhZmMyYmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-27T09:46:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-27T19:30:33Z"}, "message": "Sort fields, variants and other unsorted elements in the sidebar", "tree": {"sha": "dba74fd53570610c8634f3f8ff1fefd031deb6c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba74fd53570610c8634f3f8ff1fefd031deb6c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba5b653673faff60f15ad875cd22da6d0afc2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba5b653673faff60f15ad875cd22da6d0afc2bb", "html_url": "https://github.com/rust-lang/rust/commit/5ba5b653673faff60f15ad875cd22da6d0afc2bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba5b653673faff60f15ad875cd22da6d0afc2bb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eedd138ee22147111a885d6948fb050d9849bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eedd138ee22147111a885d6948fb050d9849bf4", "html_url": "https://github.com/rust-lang/rust/commit/9eedd138ee22147111a885d6948fb050d9849bf4"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "aa3777624d29ccd741224ef8a698febff5a2d906", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5ba5b653673faff60f15ad875cd22da6d0afc2bb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba5b653673faff60f15ad875cd22da6d0afc2bb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5ba5b653673faff60f15ad875cd22da6d0afc2bb", "patch": "@@ -4064,9 +4064,9 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_none())\n                 .flat_map(move |i| get_methods(i.inner_impl(), false, used_links_bor, false))\n                 .collect::<Vec<_>>();\n-            // We want links' order to be reproducible so we don't use unstable sort.\n-            ret.sort();\n             if !ret.is_empty() {\n+                // We want links' order to be reproducible so we don't use unstable sort.\n+                ret.sort();\n                 out.push_str(&format!(\n                     \"<a class=\\\"sidebar-title\\\" href=\\\"#implementations\\\">Methods</a>\\\n                      <div class=\\\"sidebar-links\\\">{}</div>\",\n@@ -4237,7 +4237,7 @@ fn is_negative_impl(i: &clean::Impl) -> bool {\n fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n \n-    let types = t\n+    let mut types = t\n         .items\n         .iter()\n         .filter_map(|m| match m.name {\n@@ -4246,8 +4246,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             }\n             _ => None,\n         })\n-        .collect::<String>();\n-    let consts = t\n+        .collect::<Vec<_>>();\n+    let mut consts = t\n         .items\n         .iter()\n         .filter_map(|m| match m.name {\n@@ -4256,7 +4256,7 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             }\n             _ => None,\n         })\n-        .collect::<String>();\n+        .collect::<Vec<_>>();\n     let mut required = t\n         .items\n         .iter()\n@@ -4279,32 +4279,34 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         .collect::<Vec<String>>();\n \n     if !types.is_empty() {\n+        types.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-types\\\">\\\n-                                   Associated Types</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-            types\n+                Associated Types</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+            types.join(\"\")\n         ));\n     }\n     if !consts.is_empty() {\n+        consts.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-const\\\">\\\n-                                   Associated Constants</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-            consts\n+                Associated Constants</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+            consts.join(\"\")\n         ));\n     }\n     if !required.is_empty() {\n         required.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#required-methods\\\">\\\n-                                   Required Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+                Required Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n             required.join(\"\")\n         ));\n     }\n     if !provided.is_empty() {\n         provided.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#provided-methods\\\">\\\n-                                   Provided Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+                Provided Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n             provided.join(\"\")\n         ));\n     }\n@@ -4322,8 +4324,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             res.sort();\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n-                                       Implementations on Foreign Types</a><div \\\n-                                       class=\\\"sidebar-links\\\">{}</div>\",\n+                    Implementations on Foreign Types</a><div \\\n+                    class=\\\"sidebar-links\\\">{}</div>\",\n                 res.into_iter()\n                     .map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name)))\n                     .collect::<Vec<_>>()\n@@ -4336,7 +4338,7 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     if t.auto {\n         sidebar.push_str(\n             \"<a class=\\\"sidebar-title\\\" \\\n-                          href=\\\"#synthetic-implementors\\\">Auto Implementors</a>\",\n+                href=\\\"#synthetic-implementors\\\">Auto Implementors</a>\",\n         );\n     }\n \n@@ -4362,18 +4364,18 @@ fn sidebar_typedef(buf: &mut Buffer, it: &clean::Item) {\n }\n \n fn get_struct_fields_name(fields: &[clean::Item]) -> String {\n-    fields\n+    let mut fields = fields\n         .iter()\n         .filter(|f| if let clean::StructFieldItem(..) = f.inner { true } else { false })\n         .filter_map(|f| match f.name {\n-            Some(ref name) => Some(format!(\n-                \"<a href=\\\"#structfield.{name}\\\">\\\n-                                              {name}</a>\",\n-                name = name\n-            )),\n+            Some(ref name) => {\n+                Some(format!(\"<a href=\\\"#structfield.{name}\\\">{name}</a>\", name = name))\n+            }\n             _ => None,\n         })\n-        .collect()\n+        .collect::<Vec<_>>();\n+    fields.sort();\n+    fields.join(\"\")\n }\n \n fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n@@ -4383,7 +4385,7 @@ fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n     if !fields.is_empty() {\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n-                                   <div class=\\\"sidebar-links\\\">{}</div>\",\n+             <div class=\\\"sidebar-links\\\">{}</div>\",\n             fields\n         ));\n     }\n@@ -4398,23 +4400,20 @@ fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n fn sidebar_enum(buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n     let mut sidebar = String::new();\n \n-    let variants = e\n+    let mut variants = e\n         .variants\n         .iter()\n         .filter_map(|v| match v.name {\n-            Some(ref name) => Some(format!(\n-                \"<a href=\\\"#variant.{name}\\\">{name}\\\n-                                                                 </a>\",\n-                name = name\n-            )),\n+            Some(ref name) => Some(format!(\"<a href=\\\"#variant.{name}\\\">{name}</a>\", name = name)),\n             _ => None,\n         })\n-        .collect::<String>();\n+        .collect::<Vec<_>>();\n     if !variants.is_empty() {\n+        variants.sort_unstable();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#variants\\\">Variants</a>\\\n-                                   <div class=\\\"sidebar-links\\\">{}</div>\",\n-            variants\n+             <div class=\\\"sidebar-links\\\">{}</div>\",\n+            variants.join(\"\"),\n         ));\n     }\n "}]}