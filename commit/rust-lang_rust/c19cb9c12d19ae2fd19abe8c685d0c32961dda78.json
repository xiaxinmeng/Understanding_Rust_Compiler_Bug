{"sha": "c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOWNiOWMxMmQxOWFlMmZkMTlhYmU4YzY4NWQwYzMyOTYxZGRhNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-16T04:43:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-16T04:43:53Z"}, "message": "Auto merge of #37764 - nnethercote:shrink-scope_auxiliary, r=nikomatsakis\n\nRemove `scope_auxiliary`.\n\n`scope_auxiliary` is a big part of the high memory usage in #36799. It's only used for MIR dumping. I have taken a hubristic approach: I have assumed that particular use is unimportant and removed `scope_auxiliary` and related things. This reduces peak RSS by ~10% for a cut-down version of the program in #36799.\n\nIf that assumption is wrong perhaps we can avoid building `scope_auxiliary` unless MIR dumping is enabled.", "tree": {"sha": "4521c1a97b746dc7947ff2c3a865eac3ab1c983f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4521c1a97b746dc7947ff2c3a865eac3ab1c983f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "html_url": "https://github.com/rust-lang/rust/commit/c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87bae6b6575efe97a0642142d9af1306dce7a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87bae6b6575efe97a0642142d9af1306dce7a7e", "html_url": "https://github.com/rust-lang/rust/commit/c87bae6b6575efe97a0642142d9af1306dce7a7e"}, {"sha": "d7755701ad62f2b0764f9c86b77d65e59b7c5e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7755701ad62f2b0764f9c86b77d65e59b7c5e6f", "html_url": "https://github.com/rust-lang/rust/commit/d7755701ad62f2b0764f9c86b77d65e59b7c5e6f"}], "stats": {"total": 159, "additions": 30, "deletions": 129}, "files": [{"sha": "2c7b47c7669993ff03dbe84e57a05e71bc4c47c9", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         let tcx = this.hir.tcx();\n \n                         // Enter the remainder scope, i.e. the bindings' destruction scope.\n-                        this.push_scope(remainder_scope, block);\n+                        this.push_scope(remainder_scope);\n                         let_extent_stack.push(remainder_scope);\n \n                         // Declare the bindings, which may create a visibility scope."}, {"sha": "71e97e4bfe0d3596bbf8b34db481592cc42b08ae", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -40,11 +40,6 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n-    pub fn current_location(&mut self, block: BasicBlock) -> Location {\n-        let index = self.block_data(block).statements.len();\n-        Location { block: block, statement_index: index }\n-    }\n-\n     pub fn push_assign(&mut self,\n                        block: BasicBlock,\n                        source_info: SourceInfo,"}, {"sha": "458a952543e4008090c0375df9ec54bd58275f72", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 14, "deletions": 46, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -36,13 +36,6 @@ pub struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// see the `scope` module for more details\n     scopes: Vec<scope::Scope<'tcx>>,\n \n-    ///  for each scope, a span of blocks that defines it;\n-    ///  we track these for use in region and borrow checking,\n-    ///  but these are liable to get out of date once optimization\n-    ///  begins. They are also hopefully temporary, and will be\n-    ///  no longer needed when we adopt graph-based regions.\n-    scope_auxiliary: IndexVec<ScopeId, ScopeAuxiliary>,\n-\n     /// the current set of loops; see the `scope` module for more\n     /// details\n     loop_scopes: Vec<scope::LoopScope>,\n@@ -82,30 +75,6 @@ impl Idx for ScopeId {\n     }\n }\n \n-/// For each scope, we track the extent (from the HIR) and a\n-/// single-entry-multiple-exit subgraph that contains all the\n-/// statements/terminators within it.\n-///\n-/// This information is separated out from the main `ScopeData`\n-/// because it is short-lived. First, the extent contains node-ids,\n-/// so it cannot be saved and re-loaded. Second, any optimization will mess up\n-/// the dominator/postdominator information.\n-///\n-/// The intention is basically to use this information to do\n-/// regionck/borrowck and then throw it away once we are done.\n-pub struct ScopeAuxiliary {\n-    /// extent of this scope from the MIR.\n-    pub extent: CodeExtent,\n-\n-    /// \"entry point\": dominator of all nodes in the scope\n-    pub dom: Location,\n-\n-    /// \"exit points\": mutual postdominators of all nodes in the scope\n-    pub postdoms: Vec<Location>,\n-}\n-\n-pub type ScopeAuxiliaryVec = IndexVec<ScopeId, ScopeAuxiliary>;\n-\n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a\n /// produced value (sometimes just unit, of course). The `unpack!`\n@@ -158,7 +127,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        abi: Abi,\n                                        return_ty: Ty<'gcx>,\n                                        ast_body: &'gcx hir::Expr)\n-                                       -> (Mir<'tcx>, ScopeAuxiliaryVec)\n+                                       -> Mir<'tcx>\n     where A: Iterator<Item=(Ty<'gcx>, Option<&'gcx hir::Pat>)>\n {\n     let arguments: Vec<_> = arguments.collect();\n@@ -221,15 +190,15 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    let (mut mir, aux) = builder.finish(upvar_decls, return_ty);\n+    let mut mir = builder.finish(upvar_decls, return_ty);\n     mir.spread_arg = spread_arg;\n-    (mir, aux)\n+    mir\n }\n \n pub fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        item_id: ast::NodeId,\n                                        ast_expr: &'tcx hir::Expr)\n-                                       -> (Mir<'tcx>, ScopeAuxiliaryVec) {\n+                                       -> Mir<'tcx> {\n     let tcx = hir.tcx();\n     let ty = tcx.tables().expr_ty_adjusted(ast_expr);\n     let span = tcx.map.span(item_id);\n@@ -269,7 +238,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             scopes: vec![],\n             visibility_scopes: IndexVec::new(),\n             visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n-            scope_auxiliary: IndexVec::new(),\n             loop_scopes: vec![],\n             local_decls: IndexVec::from_elem_n(LocalDecl::new_return_pointer(return_ty), 1),\n             var_indices: NodeMap(),\n@@ -288,22 +256,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn finish(self,\n               upvar_decls: Vec<UpvarDecl>,\n               return_ty: Ty<'tcx>)\n-              -> (Mir<'tcx>, ScopeAuxiliaryVec) {\n+              -> Mir<'tcx> {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n             if block.terminator.is_none() {\n                 span_bug!(self.fn_span, \"no terminator on block {:?}\", index);\n             }\n         }\n \n-        (Mir::new(self.cfg.basic_blocks,\n-                  self.visibility_scopes,\n-                  IndexVec::new(),\n-                  return_ty,\n-                  self.local_decls,\n-                  self.arg_count,\n-                  upvar_decls,\n-                  self.fn_span\n-        ), self.scope_auxiliary)\n+        Mir::new(self.cfg.basic_blocks,\n+                 self.visibility_scopes,\n+                 IndexVec::new(),\n+                 return_ty,\n+                 self.local_decls,\n+                 self.arg_count,\n+                 upvar_decls,\n+                 self.fn_span\n+        )\n     }\n \n     fn args_and_body(&mut self,"}, {"sha": "4d9b6c0e05a4250345e82fc8277f8b2b863a642b", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -86,7 +86,7 @@ should go to.\n \n */\n \n-use build::{BlockAnd, BlockAndExtension, Builder, CFG, ScopeAuxiliary, ScopeId};\n+use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n use rustc::ty::subst::{Kind, Subst};\n@@ -97,14 +97,10 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n \n pub struct Scope<'tcx> {\n-    /// the scope-id within the scope_auxiliary\n-    id: ScopeId,\n-\n     /// The visibility scope this scope was created in.\n     visibility_scope: VisibilityScope,\n \n-    /// the extent of this scope within source code; also stored in\n-    /// `ScopeAuxiliary`, but kept here for convenience\n+    /// the extent of this scope within source code.\n     extent: CodeExtent,\n \n     /// Whether there's anything to do for the cleanup path, that is,\n@@ -276,7 +272,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n-        self.push_scope(extent, block);\n+        self.push_scope(extent);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(extent, block));\n         debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n@@ -287,24 +283,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// scope and call `pop_scope` afterwards. Note that these two\n     /// calls must be paired; using `in_scope` as a convenience\n     /// wrapper maybe preferable.\n-    pub fn push_scope(&mut self, extent: CodeExtent, entry: BasicBlock) {\n+    pub fn push_scope(&mut self, extent: CodeExtent) {\n         debug!(\"push_scope({:?})\", extent);\n-        let id = ScopeId::new(self.scope_auxiliary.len());\n         let vis_scope = self.visibility_scope;\n         self.scopes.push(Scope {\n-            id: id,\n             visibility_scope: vis_scope,\n             extent: extent,\n             needs_cleanup: false,\n             drops: vec![],\n             free: None,\n             cached_exits: FxHashMap()\n         });\n-        self.scope_auxiliary.push(ScopeAuxiliary {\n-            extent: extent,\n-            dom: self.cfg.current_location(entry),\n-            postdoms: vec![]\n-        });\n     }\n \n     /// Pops a scope, which should have extent `extent`, adding any\n@@ -325,9 +314,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                           &self.scopes,\n                                           block,\n                                           self.arg_count));\n-        self.scope_auxiliary[scope.id]\n-            .postdoms\n-            .push(self.cfg.current_location(block));\n         block.unit()\n     }\n \n@@ -375,9 +361,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 self.cfg.terminate(block, scope.source_info(span), free);\n                 block = next;\n             }\n-            self.scope_auxiliary[scope.id]\n-                .postdoms\n-                .push(self.cfg.current_location(block));\n         }\n         }\n         let scope = &self.scopes[len - scope_count];"}, {"sha": "4a50585efe3bd0257a38a962e605a4fcbf1411a2", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -103,11 +103,11 @@ impl<'a, 'gcx, 'tcx> BuildMir<'a, 'gcx> {\n \n impl<'a, 'gcx, 'tcx> CxBuilder<'a, 'gcx, 'tcx> {\n     fn build<F>(&'tcx mut self, f: F)\n-        where F: for<'b> FnOnce(Cx<'b, 'gcx, 'tcx>) -> (Mir<'tcx>, build::ScopeAuxiliaryVec)\n+        where F: for<'b> FnOnce(Cx<'b, 'gcx, 'tcx>) -> Mir<'tcx>\n     {\n         let (src, def_id) = (self.src, self.def_id);\n         self.infcx.enter(|infcx| {\n-            let (mut mir, scope_auxiliary) = f(Cx::new(&infcx, src));\n+            let mut mir = f(Cx::new(&infcx, src));\n \n             // Convert the Mir to global types.\n             let tcx = infcx.tcx.global_tcx();\n@@ -120,7 +120,7 @@ impl<'a, 'gcx, 'tcx> CxBuilder<'a, 'gcx, 'tcx> {\n                 mem::transmute::<Mir, Mir<'gcx>>(mir)\n             };\n \n-            pretty::dump_mir(tcx, \"mir_map\", &0, src, &mir, Some(&scope_auxiliary));\n+            pretty::dump_mir(tcx, \"mir_map\", &0, src, &mir);\n \n             let mir = tcx.alloc_mir(mir);\n             assert!(tcx.mir_map.borrow_mut().insert(def_id, mir).is_none());"}, {"sha": "e7188d536980fccde9dd1d76342a0aaa8761e9a8", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 7, "deletions": 51, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{ScopeAuxiliaryVec, ScopeId};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n@@ -43,8 +42,7 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           pass_name: &str,\n                           disambiguator: &Display,\n                           src: MirSource,\n-                          mir: &Mir<'tcx>,\n-                          auxiliary: Option<&ScopeAuxiliaryVec>) {\n+                          mir: &Mir<'tcx>) {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return,\n         Some(ref filters) => filters,\n@@ -81,7 +79,7 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         writeln!(file, \"// pass_name = {}\", pass_name)?;\n         writeln!(file, \"// disambiguator = {}\", disambiguator)?;\n         writeln!(file, \"\")?;\n-        write_mir_fn(tcx, src, mir, &mut file, auxiliary)?;\n+        write_mir_fn(tcx, src, mir, &mut file)?;\n         Ok(())\n     });\n }\n@@ -106,52 +104,24 @@ pub fn write_mir_pretty<'a, 'b, 'tcx, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n \n         let id = tcx.map.as_local_node_id(def_id).unwrap();\n         let src = MirSource::from_node(tcx, id);\n-        write_mir_fn(tcx, src, mir, w, None)?;\n+        write_mir_fn(tcx, src, mir, w)?;\n \n         for (i, mir) in mir.promoted.iter_enumerated() {\n             writeln!(w, \"\")?;\n-            write_mir_fn(tcx, MirSource::Promoted(id, i), mir, w, None)?;\n+            write_mir_fn(tcx, MirSource::Promoted(id, i), mir, w)?;\n         }\n     }\n     Ok(())\n }\n \n-enum Annotation {\n-    EnterScope(ScopeId),\n-    ExitScope(ScopeId),\n-}\n-\n-fn scope_entry_exit_annotations(auxiliary: Option<&ScopeAuxiliaryVec>)\n-                                -> FxHashMap<Location, Vec<Annotation>>\n-{\n-    // compute scope/entry exit annotations\n-    let mut annotations = FxHashMap();\n-    if let Some(auxiliary) = auxiliary {\n-        for (scope_id, auxiliary) in auxiliary.iter_enumerated() {\n-            annotations.entry(auxiliary.dom)\n-                       .or_insert(vec![])\n-                       .push(Annotation::EnterScope(scope_id));\n-\n-            for &loc in &auxiliary.postdoms {\n-                annotations.entry(loc)\n-                           .or_insert(vec![])\n-                           .push(Annotation::ExitScope(scope_id));\n-            }\n-        }\n-    }\n-    return annotations;\n-}\n-\n pub fn write_mir_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               src: MirSource,\n                               mir: &Mir<'tcx>,\n-                              w: &mut Write,\n-                              auxiliary: Option<&ScopeAuxiliaryVec>)\n+                              w: &mut Write)\n                               -> io::Result<()> {\n-    let annotations = scope_entry_exit_annotations(auxiliary);\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n-        write_basic_block(tcx, block, mir, w, &annotations)?;\n+        write_basic_block(tcx, block, mir, w)?;\n         if block.index() + 1 != mir.basic_blocks().len() {\n             writeln!(w, \"\")?;\n         }\n@@ -165,8 +135,7 @@ pub fn write_mir_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn write_basic_block(tcx: TyCtxt,\n                      block: BasicBlock,\n                      mir: &Mir,\n-                     w: &mut Write,\n-                     annotations: &FxHashMap<Location, Vec<Annotation>>)\n+                     w: &mut Write)\n                      -> io::Result<()> {\n     let data = &mir[block];\n \n@@ -176,19 +145,6 @@ fn write_basic_block(tcx: TyCtxt,\n     // List of statements in the middle.\n     let mut current_location = Location { block: block, statement_index: 0 };\n     for statement in &data.statements {\n-        if let Some(ref annotations) = annotations.get(&current_location) {\n-            for annotation in annotations.iter() {\n-                match *annotation {\n-                    Annotation::EnterScope(id) =>\n-                        writeln!(w, \"{0}{0}// Enter Scope({1})\",\n-                                 INDENT, id.index())?,\n-                    Annotation::ExitScope(id) =>\n-                        writeln!(w, \"{0}{0}// Exit Scope({1})\",\n-                                 INDENT, id.index())?,\n-                }\n-            }\n-        }\n-\n         let indented_mir = format!(\"{0}{0}{1:?};\", INDENT, statement);\n         writeln!(w, \"{0:1$} // {2}\",\n                  indented_mir,"}, {"sha": "035f33de91aa5d15dca3bcc9048046bc5d20918c", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19cb9c12d19ae2fd19abe8c685d0c32961dda78/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=c19cb9c12d19ae2fd19abe8c685d0c32961dda78", "patch": "@@ -64,8 +64,7 @@ impl<'tcx> MirPassHook<'tcx> for DumpMir {\n                 is_after: is_after\n             },\n             src,\n-            mir,\n-            None\n+            mir\n         );\n     }\n }"}]}