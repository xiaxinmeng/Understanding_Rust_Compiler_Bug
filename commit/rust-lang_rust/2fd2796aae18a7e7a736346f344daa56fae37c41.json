{"sha": "2fd2796aae18a7e7a736346f344daa56fae37c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDI3OTZhYWUxOGE3ZTdhNzM2MzQ2ZjM0NGRhYTU2ZmFlMzdjNDE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-03-05T05:54:35Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-03-11T17:53:55Z"}, "message": "add ui testcase for issue 82772", "tree": {"sha": "bcfaa4a0a429d26a7b87a1ab4b6b06b9ff36488b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcfaa4a0a429d26a7b87a1ab4b6b06b9ff36488b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd2796aae18a7e7a736346f344daa56fae37c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2796aae18a7e7a736346f344daa56fae37c41", "html_url": "https://github.com/rust-lang/rust/commit/2fd2796aae18a7e7a736346f344daa56fae37c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2796aae18a7e7a736346f344daa56fae37c41/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b3c28518e4c45dfd12bc2c4400c0d0e9639927", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b3c28518e4c45dfd12bc2c4400c0d0e9639927", "html_url": "https://github.com/rust-lang/rust/commit/45b3c28518e4c45dfd12bc2c4400c0d0e9639927"}], "stats": {"total": 109, "additions": 101, "deletions": 8}, "files": [{"sha": "733f8e3dc9d8fc499cd038cbc060cc4addebbb41", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -1176,6 +1176,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut no_field_errors = true;\n \n         let mut inexistent_fields = vec![];\n+        let mut invisible_fields = vec![];\n         // Typecheck each field.\n         for field in fields {\n             let span = field.span;\n@@ -1191,6 +1192,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     field_map\n                         .get(&ident)\n                         .map(|(i, f)| {\n+                            if !f\n+                                .vis\n+                                .is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                            {\n+                                invisible_fields.push(field.ident);\n+                            }\n                             self.write_field_index(field.hir_id, *i);\n                             self.tcx.check_stability(f.did, Some(pat.hir_id), span);\n                             self.field_ty(span, f, substs)\n@@ -1281,6 +1288,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.error_tuple_variant_index_shorthand(variant, pat, fields)\n                 {\n                     err.emit();\n+                } else if !invisible_fields.is_empty() {\n+                    let mut err = self.error_invisible_fields(\n+                        adt.variant_descr(),\n+                        &invisible_fields,\n+                        variant,\n+                    );\n+                    err.emit();\n                 }\n             }\n         }\n@@ -1359,6 +1373,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n+    fn error_invisible_fields(\n+        &self,\n+        kind_name: &str,\n+        invisible_fields: &[Ident],\n+        variant: &ty::VariantDef,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let spans = invisible_fields.iter().map(|ident| ident.span).collect::<Vec<_>>();\n+        let (field_names, t) = if invisible_fields.len() == 1 {\n+            (format!(\"a field named `{}`\", invisible_fields[0]), \"is\")\n+        } else {\n+            (\n+                format!(\n+                    \"fields named {}\",\n+                    invisible_fields\n+                        .iter()\n+                        .map(|ident| format!(\"`{}`\", ident))\n+                        .collect::<Vec<String>>()\n+                        .join(\", \")\n+                ),\n+                \"are\",\n+            )\n+        };\n+        let err = struct_span_err!(\n+            self.tcx.sess,\n+            spans,\n+            E0603,\n+            \"cannot match on {} of {} `{}`, which {} not accessible in current scope\",\n+            field_names,\n+            kind_name,\n+            self.tcx.def_path_str(variant.def_id),\n+            t\n+        );\n+        err\n+    }\n+\n     fn error_inexistent_fields(\n         &self,\n         kind_name: &str,"}, {"sha": "bf765be75dd8c150f5265149064f8a90d48c904b", "filename": "src/test/ui/structs/struct-variant-privacy-xc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -1,9 +1,11 @@\n // aux-build:struct_variant_privacy.rs\n extern crate struct_variant_privacy;\n \n-fn f(b: struct_variant_privacy::Bar) { //~ ERROR enum `Bar` is private\n+fn f(b: struct_variant_privacy::Bar) {\n+    //~^ ERROR enum `Bar` is private\n     match b {\n-        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n+        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR cannot match on\n+                                                         //~^ ERROR enum `Bar` is private\n     }\n }\n "}, {"sha": "03de40b488ca9e9bf50e1d5526e5852a6bcd15fe", "filename": "src/test/ui/structs/struct-variant-privacy-xc.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -11,7 +11,7 @@ LL | enum Bar {\n    | ^^^^^^^^\n \n error[E0603]: enum `Bar` is private\n-  --> $DIR/struct-variant-privacy-xc.rs:6:33\n+  --> $DIR/struct-variant-privacy-xc.rs:7:33\n    |\n LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n    |                                 ^^^ private enum\n@@ -22,6 +22,12 @@ note: the enum `Bar` is defined here\n LL | enum Bar {\n    | ^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0603]: cannot match on a field named `a` of variant `struct_variant_privacy::Bar::Baz`, which is not accessible in current scope\n+  --> $DIR/struct-variant-privacy-xc.rs:7:44\n+   |\n+LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n+   |                                            ^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0603`."}, {"sha": "7ce8ce9e290c857cd948e8615df8cea451b12850", "filename": "src/test/ui/structs/struct-variant-privacy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -1,12 +1,14 @@\n mod foo {\n     enum Bar {\n-        Baz { a: isize }\n+        Baz { a: isize },\n     }\n }\n \n-fn f(b: foo::Bar) { //~ ERROR enum `Bar` is private\n+fn f(b: foo::Bar) {\n+    //~^ ERROR enum `Bar` is private\n     match b {\n         foo::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n+                                      //~^ ERROR cannot match on\n     }\n }\n "}, {"sha": "a69a888553b7a9ebcf99e05c750b962e0604541b", "filename": "src/test/ui/structs/struct-variant-privacy.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -11,7 +11,7 @@ LL |     enum Bar {\n    |     ^^^^^^^^\n \n error[E0603]: enum `Bar` is private\n-  --> $DIR/struct-variant-privacy.rs:9:14\n+  --> $DIR/struct-variant-privacy.rs:10:14\n    |\n LL |         foo::Bar::Baz { a: _a } => {}\n    |              ^^^ private enum\n@@ -22,6 +22,12 @@ note: the enum `Bar` is defined here\n LL |     enum Bar {\n    |     ^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0603]: cannot match on a field named `a` of variant `Bar::Baz`, which is not accessible in current scope\n+  --> $DIR/struct-variant-privacy.rs:10:25\n+   |\n+LL |         foo::Bar::Baz { a: _a } => {}\n+   |                         ^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0603`."}, {"sha": "62eb5f7a02147d85003293109dcbccf9554c9b85", "filename": "src/test/ui/typeck/issue-82772.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+fn main() {\n+    use a::LocalModPrivateStruct;\n+    let Box { 1: _, .. }: Box<()>; //~ ERROR cannot match on\n+    let LocalModPrivateStruct { 1: _, .. } = LocalModPrivateStruct::default();\n+    //~^ ERROR cannot match on\n+}\n+\n+mod a {\n+    #[derive(Default)]\n+    pub struct LocalModPrivateStruct(u8, u8);\n+}"}, {"sha": "5bc6a5aa9e32f0367ffccb8bde42d702ff628482", "filename": "src/test/ui/typeck/issue-82772.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2796aae18a7e7a736346f344daa56fae37c41/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr?ref=2fd2796aae18a7e7a736346f344daa56fae37c41", "patch": "@@ -0,0 +1,15 @@\n+error[E0603]: cannot match on a field named `1` of struct `Box`, which is not accessible in current scope\n+  --> $DIR/issue-82772.rs:5:15\n+   |\n+LL |     let Box { 1: _, .. }: Box<()>;\n+   |               ^\n+\n+error[E0603]: cannot match on a field named `1` of struct `LocalModPrivateStruct`, which is not accessible in current scope\n+  --> $DIR/issue-82772.rs:6:33\n+   |\n+LL |     let LocalModPrivateStruct { 1: _, .. } = LocalModPrivateStruct::default();\n+   |                                 ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0603`."}]}