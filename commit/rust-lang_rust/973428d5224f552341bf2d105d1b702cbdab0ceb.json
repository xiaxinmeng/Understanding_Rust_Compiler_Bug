{"sha": "973428d5224f552341bf2d105d1b702cbdab0ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzQyOGQ1MjI0ZjU1MjM0MWJmMmQxMDVkMWI3MDJjYmRhYjBjZWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-24T08:44:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-24T08:44:31Z"}, "message": "Rollup merge of #53503 - kornelski:master, r=dtolnay\n\nDiscourage overuse of mem::forget\n\nSome uses of `mem::forget` have been replaced by better methods of `Box`, so I've removed obsoleted use-cases from these docs.\n\nI've removed emphasis on leaking, because it's not obvious `mem::forget` does not guarantee leaking of memory: memory of stack-allocated objects and values partially moved out of `Box` will still be freed. That's a potential error when used to pass objects to FFI, so it's better to direct users to `Box::into_raw` instead.", "tree": {"sha": "ea83417057ea7f9077a1cee1d1e893c54bdfcedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea83417057ea7f9077a1cee1d1e893c54bdfcedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/973428d5224f552341bf2d105d1b702cbdab0ceb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbf8VvCRBK7hj4Ov3rIwAAdHIIAA6PfT54+fqMXC3rdkhdai7e\nozBQMgVfIzxpPWJOn+yYagTCIRGNuR4tdQrZ8UqG8JdfNN3dRmgAxn+8OD8W12lZ\nngULta+OVNnEx1uUeq/tSzGOLggQ5zxPbNjE3GAfo68AZEVKmrwxnr5prvPiWMB7\nC5REivl79ZzqRXxmtd3bYzo4OMuT3IVb0s/8UgWsf7qaotAyczFby4vl6oUtretU\n1W4eWjMPDR+WQwBoX5a9M687p1ksUwr3HWVaOqVafShszoLElOxn0fAobsgx5MaX\nDrQdvfpWtcOP5HVtwP8j4j/lYgPNNcu/O5cQO7K3iZIWbm1vabp3kXn7NLmTCnE=\n=DAEQ\n-----END PGP SIGNATURE-----\n", "payload": "tree ea83417057ea7f9077a1cee1d1e893c54bdfcedc\nparent ab5a71b0347bbcb66152210a5c358908972534c6\nparent e7709b3d44da921a65c009eb52492830141d330a\nauthor kennytm <kennytm@gmail.com> 1535100271 +0800\ncommitter GitHub <noreply@github.com> 1535100271 +0800\n\nRollup merge of #53503 - kornelski:master, r=dtolnay\n\nDiscourage overuse of mem::forget\n\nSome uses of `mem::forget` have been replaced by better methods of `Box`, so I've removed obsoleted use-cases from these docs.\n\nI've removed emphasis on leaking, because it's not obvious `mem::forget` does not guarantee leaking of memory: memory of stack-allocated objects and values partially moved out of `Box` will still be freed. That's a potential error when used to pass objects to FFI, so it's better to direct users to `Box::into_raw` instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/973428d5224f552341bf2d105d1b702cbdab0ceb", "html_url": "https://github.com/rust-lang/rust/commit/973428d5224f552341bf2d105d1b702cbdab0ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/973428d5224f552341bf2d105d1b702cbdab0ceb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5a71b0347bbcb66152210a5c358908972534c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5a71b0347bbcb66152210a5c358908972534c6", "html_url": "https://github.com/rust-lang/rust/commit/ab5a71b0347bbcb66152210a5c358908972534c6"}, {"sha": "e7709b3d44da921a65c009eb52492830141d330a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7709b3d44da921a65c009eb52492830141d330a", "html_url": "https://github.com/rust-lang/rust/commit/e7709b3d44da921a65c009eb52492830141d330a"}], "stats": {"total": 46, "additions": 7, "deletions": 39}, "files": [{"sha": "67cceb9d5360590d420374229a6bb943101b55e5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/973428d5224f552341bf2d105d1b702cbdab0ceb/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/973428d5224f552341bf2d105d1b702cbdab0ceb/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=973428d5224f552341bf2d105d1b702cbdab0ceb", "patch": "@@ -29,13 +29,15 @@ use ops::{Deref, DerefMut, CoerceUnsized};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n \n-/// Leaks a value: takes ownership and \"forgets\" about the value **without running\n-/// its destructor**.\n+/// Takes ownership and \"forgets\" about the value **without running its destructor**.\n ///\n /// Any resources the value manages, such as heap memory or a file handle, will linger\n-/// forever in an unreachable state.\n+/// forever in an unreachable state. However, it does not guarantee that pointers\n+/// to this memory will remain valid.\n ///\n-/// If you want to dispose of a value properly, running its destructor, see\n+/// * If you want to leak memory, see [`Box::leak`][leak].\n+/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`][into_raw].\n+/// * If you want to dispose of a value properly, running its destructor, see\n /// [`mem::drop`][drop].\n ///\n /// # Safety\n@@ -59,15 +61,6 @@ pub use intrinsics::transmute;\n ///\n /// # Examples\n ///\n-/// Leak some heap memory by never deallocating it:\n-///\n-/// ```\n-/// use std::mem;\n-///\n-/// let heap_memory = Box::new(3);\n-/// mem::forget(heap_memory);\n-/// ```\n-///\n /// Leak an I/O object, never closing the file:\n ///\n /// ```no_run\n@@ -137,38 +130,13 @@ pub use intrinsics::transmute;\n /// }\n /// ```\n ///\n-/// ## Use case 3\n-///\n-/// You are transferring ownership across a [FFI] boundary to code written in\n-/// another language. You need to `forget` the value on the Rust side because Rust\n-/// code is no longer responsible for it.\n-///\n-/// ```no_run\n-/// use std::mem;\n-///\n-/// extern \"C\" {\n-///     fn my_c_function(x: *const u32);\n-/// }\n-///\n-/// let x: Box<u32> = Box::new(3);\n-///\n-/// // Transfer ownership into C code.\n-/// unsafe {\n-///     my_c_function(&*x);\n-/// }\n-/// mem::forget(x);\n-/// ```\n-///\n-/// In this case, C code must call back into Rust to free the object. Calling C's `free`\n-/// function on a [`Box`][box] is *not* safe! Also, `Box` provides an [`into_raw`][into_raw]\n-/// method which is the preferred way to do this in practice.\n-///\n /// [drop]: fn.drop.html\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n /// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n+/// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[inline]"}]}