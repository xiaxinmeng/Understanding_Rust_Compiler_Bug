{"sha": "6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWMxOGU4ZGM5NGE2NzkxMjZkMjc2ODg0YTNhZDRiOWEzZTA5MzQ=", "commit": {"author": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-06-08T20:45:27Z"}, "committer": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-06-08T21:56:59Z"}, "message": "add a few blanket future impls to std", "tree": {"sha": "c7b916bf935b8d4bf1d7d9646b13b71e76157006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b916bf935b8d4bf1d7d9646b13b71e76157006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "html_url": "https://github.com/rust-lang/rust/commit/6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/comments", "author": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "html_url": "https://github.com/rust-lang/rust/commit/1b4c921103ff4ae225f2d84a8b13f1616dcb538e"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "896d9dee3ee45ca5ca01e057cc44141fa527e95e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -914,6 +914,45 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> Unpin for PinBox<T> {}\n \n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        PinMut::new(&mut **self).poll(cx)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        self.as_pin_mut().poll(cx)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafePoll for Box<F> {\n+    fn into_raw(self) -> *mut () {\n+        unsafe {\n+            mem::transmute(self)\n+        }\n+    }\n+\n+    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<()> {\n+        let ptr: *mut F = mem::transmute(task);\n+        let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n+        pin.poll(cx)\n+    }\n+\n+    unsafe fn drop(task: *mut ()) {\n+        let ptr: *mut F = mem::transmute(task);\n+        let boxed = Box::from_raw(ptr);\n+        drop(boxed)\n+    }\n+}\n+\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafePoll for PinBox<F> {\n     fn into_raw(self) -> *mut () {"}, {"sha": "a1139189c9a4446859fd32ffc78781e354960709", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -80,6 +80,7 @@\n #![cfg_attr(test, feature(rand, test))]\n #![feature(allocator_api)]\n #![feature(allow_internal_unstable)]\n+#![feature(arbitrary_self_types)]\n #![feature(ascii_ctype)]\n #![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]"}, {"sha": "a8c8f69411ea6d705e921356da21bb38186f1c7a", "filename": "src/libcore/future.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -15,6 +15,7 @@\n //! Asynchronous values.\n \n use mem::PinMut;\n+use marker::Unpin;\n use task::{self, Poll};\n \n /// A future represents an asychronous computation.\n@@ -91,3 +92,19 @@ pub trait Future {\n     /// about the behavior of `poll` after a future has completed.\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output>;\n }\n+\n+impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        F::poll(PinMut::new(&mut **self), cx)\n+    }\n+}\n+\n+impl<'a, F: ?Sized + Future> Future for PinMut<'a, F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        F::poll((*self).reborrow(), cx)\n+    }\n+}"}, {"sha": "ab1c1da57906a1a6b2b80fb0b8ee16f384facfd9", "filename": "src/libcore/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -32,6 +32,12 @@ pub enum Poll<T> {\n     Pending,\n }\n \n+impl<T> From<T> for Poll<T> {\n+    fn from(t: T) -> Poll<T> {\n+        Poll::Ready(t)\n+    }\n+}\n+\n /// A `Waker` is a handle for waking up a task by notifying its executor that it\n /// is ready to be run.\n ///"}, {"sha": "bb23fe5fa918e3f8506c625be1d0251e8754f971", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -239,6 +239,7 @@\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(align_offset)]\n+#![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(ascii_ctype)]\n #![feature(asm)]"}, {"sha": "b70de73991ffe1fbb90271521ed7183ce9c408a0", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c18e8dc94a679126d276884a3ad4b9a3e0934/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=6e5c18e8dc94a679126d276884a3ad4b9a3e0934", "patch": "@@ -15,11 +15,14 @@\n use any::Any;\n use cell::UnsafeCell;\n use fmt;\n+use future::Future;\n+use mem::PinMut;\n use ops::{Deref, DerefMut};\n use panicking;\n use ptr::{Unique, NonNull};\n use rc::Rc;\n use sync::{Arc, Mutex, RwLock, atomic};\n+use task::{self, Poll};\n use thread::Result;\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n@@ -315,6 +318,21 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n     }\n }\n \n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        unsafe {\n+            let pinned_field = PinMut::new_unchecked(\n+                &mut PinMut::get_mut(self.reborrow()).0\n+            ); \n+\n+            pinned_field.poll(cx) \n+        }\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of an unwinding panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}]}