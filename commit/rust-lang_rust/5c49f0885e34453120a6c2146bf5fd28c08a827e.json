{"sha": "5c49f0885e34453120a6c2146bf5fd28c08a827e", "node_id": "C_kwDOAAsO6NoAKDVjNDlmMDg4NWUzNDQ1MzEyMGE2YzIxNDZiZjVmZDI4YzA4YTgyN2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-05T19:57:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-05T19:57:23Z"}, "message": "Rollup merge of #108775 - cjgillot:issue-107860, r=compiler-errors\n\nUse the correct bound vars in return type suggestion.\n\nFixes https://github.com/rust-lang/rust/issues/107860", "tree": {"sha": "953c7e1f4b7d7d78c5b7d1ba85a2a43a1d326884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953c7e1f4b7d7d78c5b7d1ba85a2a43a1d326884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c49f0885e34453120a6c2146bf5fd28c08a827e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBPQjCRBK7hj4Ov3rIwAAMqoIADf6JAl03+Vz8wbQ+8U0Xx+7\njbVJPVMCWmsOKFy+O60PH1FX/zTp35c9Ek/Szh5SDos8PzBYxH5v0Zg3x1gkBjfe\nUDACYFo4nF+9Z4f5jrBTDnhp1MlTTxUaW8sa3y5KXeaHMQnj24x/P29P9Ghk6pZP\nFmE+vsnLWktr5nfyN9qMzHuI38euQmU/dwiYohqRegGFwZSj6eStdkSopwverOVz\njfCM7kE0H9chQtf4obwnm+qvXhaVURi4nyzXgITHdHcW2fiUidckvN8RXRoGYMdu\n9oXvrujmIXKQUm51Y2LOwhoN+5TExAF7o2jNvSkulJQ7O2BdrOBuMaPqrVXgt8c=\n=HEK9\n-----END PGP SIGNATURE-----\n", "payload": "tree 953c7e1f4b7d7d78c5b7d1ba85a2a43a1d326884\nparent 7125df06c3b420c1774bf83006529562ebba7a7b\nparent 1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678046243 +0100\ncommitter GitHub <noreply@github.com> 1678046243 +0100\n\nRollup merge of #108775 - cjgillot:issue-107860, r=compiler-errors\n\nUse the correct bound vars in return type suggestion.\n\nFixes https://github.com/rust-lang/rust/issues/107860\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c49f0885e34453120a6c2146bf5fd28c08a827e", "html_url": "https://github.com/rust-lang/rust/commit/5c49f0885e34453120a6c2146bf5fd28c08a827e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c49f0885e34453120a6c2146bf5fd28c08a827e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7125df06c3b420c1774bf83006529562ebba7a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7125df06c3b420c1774bf83006529562ebba7a7b", "html_url": "https://github.com/rust-lang/rust/commit/7125df06c3b420c1774bf83006529562ebba7a7b"}, {"sha": "1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "html_url": "https://github.com/rust-lang/rust/commit/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "690d8a238261aeef2848f43d24b0b9d9f144d67e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5c49f0885e34453120a6c2146bf5fd28c08a827e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c49f0885e34453120a6c2146bf5fd28c08a827e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=5c49f0885e34453120a6c2146bf5fd28c08a827e", "patch": "@@ -669,6 +669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return type is left as default, the method is not part of an\n     /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n     /// type.\n+    #[instrument(level = \"trace\", skip(self, err))]\n     pub(in super::super) fn suggest_missing_return_type(\n         &self,\n         err: &mut Diagnostic,\n@@ -705,28 +706,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return true\n                 }\n             }\n-            hir::FnRetTy::Return(ty) => {\n-                let span = ty.span;\n-\n-                if let hir::TyKind::OpaqueDef(item_id, ..) = ty.kind\n-                && let hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::OpaqueTy(op_ty),\n-                    ..\n-                }) = self.tcx.hir().get(item_id.hir_id())\n-                && let hir::OpaqueTy {\n-                    bounds: [bound], ..\n-                } = op_ty\n-                && let hir::GenericBound::LangItemTrait(\n-                    hir::LangItem::Future, _, _, generic_args) = bound\n-                && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n-                && let hir::TypeBinding { kind, .. } = ty_binding\n-                && let hir::TypeBindingKind::Equality { term } = kind\n-                && let hir::Term::Ty(term_ty) = term {\n+            hir::FnRetTy::Return(hir_ty) => {\n+                let span = hir_ty.span;\n+\n+                if let hir::TyKind::OpaqueDef(item_id, ..) = hir_ty.kind\n+                    && let hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::OpaqueTy(op_ty),\n+                        ..\n+                    }) = self.tcx.hir().get(item_id.hir_id())\n+                    && let [hir::GenericBound::LangItemTrait(\n+                        hir::LangItem::Future, _, _, generic_args)] = op_ty.bounds\n+                    && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n+                    && let hir::TypeBindingKind::Equality { term: hir::Term::Ty(term) } = ty_binding.kind\n+                {\n                     // Check if async function's return type was omitted.\n                     // Don't emit suggestions if the found type is `impl Future<...>`.\n-                    debug!(\"suggest_missing_return_type: found = {:?}\", found);\n+                    debug!(?found);\n                     if found.is_suggestable(self.tcx, false) {\n-                        if term_ty.span.is_empty() {\n+                        if term.span.is_empty() {\n                             err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n                             return true;\n                         } else {\n@@ -737,11 +734,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n-                debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n-                let ty = self.astconv().ast_ty_to_ty(ty);\n-                debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n-                debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                debug!(\"return type {:?}\", hir_ty);\n+                let ty = self.astconv().ast_ty_to_ty(hir_ty);\n+                debug!(\"return type {:?}\", ty);\n+                debug!(\"expected type {:?}\", expected);\n+                let bound_vars = self.tcx.late_bound_vars(hir_ty.hir_id.owner.into());\n                 let ty = Binder::bind_with_vars(ty, bound_vars);\n                 let ty = self.normalize(span, ty);\n                 let ty = self.tcx.erase_late_bound_regions(ty);"}, {"sha": "a6449cd44d0f8dade937382c7267fb7bc8ad08ba", "filename": "tests/ui/suggestions/issue-107860.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c49f0885e34453120a6c2146bf5fd28c08a827e/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c49f0885e34453120a6c2146bf5fd28c08a827e/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.rs?ref=5c49f0885e34453120a6c2146bf5fd28c08a827e", "patch": "@@ -0,0 +1,6 @@\n+// edition: 2021\n+\n+async fn str<T>(T: &str) -> &str { &str }\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "92e3cf8c43b3bff49ef086a45bc870c834e8ca61", "filename": "tests/ui/suggestions/issue-107860.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c49f0885e34453120a6c2146bf5fd28c08a827e/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c49f0885e34453120a6c2146bf5fd28c08a827e/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr?ref=5c49f0885e34453120a6c2146bf5fd28c08a827e", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107860.rs:3:36\n+   |\n+LL | async fn str<T>(T: &str) -> &str { &str }\n+   |                                    ^^^^ expected `&str`, found `&fn(&str) -> ... {str::<...>}`\n+   |\n+   = note: expected reference `&str`\n+              found reference `&for<'a> fn(&'a str) -> impl Future<Output = &'a str> {str::<_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}