{"sha": "7565b5ac6760e16295e1f16dc2af5232278977dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjViNWFjNjc2MGUxNjI5NWUxZjE2ZGMyYWY1MjMyMjc4OTc3ZGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-02T12:17:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:59:06Z"}, "message": "machine hooks for ptr (de)ref also need layout, and then they do not need the size", "tree": {"sha": "74a0a710652cde338b2f071b243bcccb4bc6500e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a0a710652cde338b2f071b243bcccb4bc6500e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7565b5ac6760e16295e1f16dc2af5232278977dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7565b5ac6760e16295e1f16dc2af5232278977dc", "html_url": "https://github.com/rust-lang/rust/commit/7565b5ac6760e16295e1f16dc2af5232278977dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7565b5ac6760e16295e1f16dc2af5232278977dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d596f29d9cf105833db5dc5cca1eccade08ce4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d596f29d9cf105833db5dc5cca1eccade08ce4e", "html_url": "https://github.com/rust-lang/rust/commit/0d596f29d9cf105833db5dc5cca1eccade08ce4e"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "27cf28ef41e8ac3a261d2d0a0a1d01dd3cdc97b7", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7565b5ac6760e16295e1f16dc2af5232278977dc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565b5ac6760e16295e1f16dc2af5232278977dc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=7565b5ac6760e16295e1f16dc2af5232278977dc", "patch": "@@ -17,11 +17,11 @@ use std::hash::Hash;\n \n use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n-use rustc::ty::{self, Ty, layout::{Size, TyLayout}, query::TyCtxtAt};\n+use rustc::ty::{self, layout::{Size, TyLayout}, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, EvalResult, Scalar,\n-    EvalContext, PlaceTy, OpTy, Pointer, MemPlace, MemoryKind,\n+    EvalContext, PlaceTy, MPlaceTy, OpTy, Pointer, MemoryKind,\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -217,26 +217,22 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     #[inline]\n     fn tag_reference(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        place: MemPlace<Self::PointerTag>,\n-        _ty: Ty<'tcx>,\n-        _size: Size,\n+        place: MPlaceTy<'tcx, Self::PointerTag>,\n         _mutability: Option<hir::Mutability>,\n-    ) -> EvalResult<'tcx, MemPlace<Self::PointerTag>> {\n-        Ok(place)\n+    ) -> EvalResult<'tcx, Scalar<Self::PointerTag>> {\n+        Ok(place.ptr)\n     }\n \n     /// Executed when evaluating the `*` operator: Following a reference.\n-    /// This has the change to adjust the tag.  It should not change anything else!\n+    /// This has the chance to adjust the tag.  It should not change anything else!\n     /// `mutability` can be `None` in case a raw ptr is being dereferenced.\n     #[inline]\n     fn tag_dereference(\n         _ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n-        place: MemPlace<Self::PointerTag>,\n-        _ty: Ty<'tcx>,\n-        _size: Size,\n+        place: MPlaceTy<'tcx, Self::PointerTag>,\n         _mutability: Option<hir::Mutability>,\n-    ) -> EvalResult<'tcx, MemPlace<Self::PointerTag>> {\n-        Ok(place)\n+    ) -> EvalResult<'tcx, Scalar<Self::PointerTag>> {\n+        Ok(place.ptr)\n     }\n \n     /// Execute a validation operation"}, {"sha": "19430c85cf73c20877b02ab7451bcb0e19f82a2a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7565b5ac6760e16295e1f16dc2af5232278977dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565b5ac6760e16295e1f16dc2af5232278977dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7565b5ac6760e16295e1f16dc2af5232278977dc", "patch": "@@ -278,42 +278,34 @@ where\n         let meta = val.to_meta()?;\n         let ptr = val.to_scalar_ptr()?;\n         let mplace = MemPlace { ptr, align, meta };\n+        let mut mplace = MPlaceTy { mplace, layout };\n         // Pointer tag tracking might want to adjust the tag.\n-        let mplace = if M::ENABLE_PTR_TRACKING_HOOKS {\n-            let (size, _) = self.size_and_align_of(meta, layout)?\n-                // for extern types, just cover what we can\n-                .unwrap_or_else(|| layout.size_and_align());\n+        if M::ENABLE_PTR_TRACKING_HOOKS {\n             let mutbl = match val.layout.ty.sty {\n                 // `builtin_deref` considers boxes immutable, that's useless for our purposes\n                 ty::Ref(_, _, mutbl) => Some(mutbl),\n                 ty::Adt(def, _) if def.is_box() => Some(hir::MutMutable),\n                 ty::RawPtr(_) => None,\n                 _ => bug!(\"Unexpected pointer type {}\", val.layout.ty.sty),\n             };\n-            M::tag_dereference(self, mplace, pointee_type, size, mutbl)?\n-        } else {\n-            mplace\n-        };\n-        Ok(MPlaceTy { mplace, layout })\n+            mplace.mplace.ptr = M::tag_dereference(self, mplace, mutbl)?;\n+        }\n+        // Done\n+        Ok(mplace)\n     }\n \n     /// Turn a mplace into a (thin or fat) pointer, as a reference, pointing to the same space.\n     /// This is the inverse of `ref_to_mplace`.\n     /// `mutbl` indicates whether we are create a shared or mutable ref, or a raw pointer (`None`).\n     pub fn create_ref(\n         &mut self,\n-        place: MPlaceTy<'tcx, M::PointerTag>,\n+        mut place: MPlaceTy<'tcx, M::PointerTag>,\n         mutbl: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Immediate<M::PointerTag>> {\n         // Pointer tag tracking might want to adjust the tag\n-        let place = if M::ENABLE_PTR_TRACKING_HOOKS {\n-            let (size, _) = self.size_and_align_of_mplace(place)?\n-                // for extern types, just cover what we can\n-                .unwrap_or_else(|| place.layout.size_and_align());\n-            M::tag_reference(self, *place, place.layout.ty, size, mutbl)?\n-        } else {\n-            *place\n-        };\n+        if M::ENABLE_PTR_TRACKING_HOOKS {\n+            place.mplace.ptr = M::tag_reference(self, place, mutbl)?\n+        }\n         Ok(match place.meta {\n             None => Immediate::Scalar(place.ptr.into()),\n             Some(meta) => Immediate::ScalarPair(place.ptr.into(), meta.into()),"}]}