{"sha": "2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91", "node_id": "C_kwDOAAsO6NoAKDJhNjJjOTJiMjVhOGZiYWYwZmRkMGZhOGY4YmFhYmY3YmU5ZDlhOTE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-07T04:36:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T20:23:14Z"}, "message": "Merge `main_options` into `main_args`.\n\nThere is no longer any need for them to be separate.", "tree": {"sha": "fbfbd9cd4600674387c70b794967490bab534200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbfbd9cd4600674387c70b794967490bab534200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91", "html_url": "https://github.com/rust-lang/rust/commit/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021d1fbd007456e6a8f2a7b865545352afb66a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/021d1fbd007456e6a8f2a7b865545352afb66a3f", "html_url": "https://github.com/rust-lang/rust/commit/021d1fbd007456e6a8f2a7b865545352afb66a3f"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "7e0cc668d7b591100f0fd6dc78125577a68dd23b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2a62c92b25a8fbaf0fdd0fa8f8baabf7be9d9a91", "patch": "@@ -674,35 +674,6 @@ fn usage(argv0: &str) {\n /// A result type used by several functions under `main()`.\n type MainResult = Result<(), ErrorGuaranteed>;\n \n-fn main_args(at_args: &[String]) -> MainResult {\n-    let args = rustc_driver::args::arg_expand_all(at_args);\n-\n-    let mut options = getopts::Options::new();\n-    for option in opts() {\n-        (option.apply)(&mut options);\n-    }\n-    let matches = match options.parse(&args[1..]) {\n-        Ok(m) => m,\n-        Err(err) => {\n-            early_error(ErrorOutputType::default(), &err.to_string());\n-        }\n-    };\n-\n-    // Note that we discard any distinction between different non-zero exit\n-    // codes from `from_matches` here.\n-    let options = match config::Options::from_matches(&matches, args) {\n-        Ok(opts) => opts,\n-        Err(code) => {\n-            return if code == 0 {\n-                Ok(())\n-            } else {\n-                Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-            };\n-        }\n-    };\n-    main_options(options)\n-}\n-\n fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainResult {\n     match res {\n         Ok(()) => Ok(()),\n@@ -733,7 +704,33 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     }\n }\n \n-fn main_options(options: config::Options) -> MainResult {\n+fn main_args(at_args: &[String]) -> MainResult {\n+    let args = rustc_driver::args::arg_expand_all(at_args);\n+\n+    let mut options = getopts::Options::new();\n+    for option in opts() {\n+        (option.apply)(&mut options);\n+    }\n+    let matches = match options.parse(&args[1..]) {\n+        Ok(m) => m,\n+        Err(err) => {\n+            early_error(ErrorOutputType::default(), &err.to_string());\n+        }\n+    };\n+\n+    // Note that we discard any distinction between different non-zero exit\n+    // codes from `from_matches` here.\n+    let options = match config::Options::from_matches(&matches, args) {\n+        Ok(opts) => opts,\n+        Err(code) => {\n+            return if code == 0 {\n+                Ok(())\n+            } else {\n+                Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            };\n+        }\n+    };\n+\n     let diag = core::new_handler(\n         options.error_format,\n         None,"}]}