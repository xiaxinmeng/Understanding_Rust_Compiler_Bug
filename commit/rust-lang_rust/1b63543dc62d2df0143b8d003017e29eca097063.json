{"sha": "1b63543dc62d2df0143b8d003017e29eca097063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjM1NDNkYzYyZDJkZjAxNDNiOGQwMDMwMTdlMjllY2EwOTcwNjM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-28T21:27:42Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-28T22:13:55Z"}, "message": "track items per-file instead of per-type", "tree": {"sha": "83c009b048061e40ff46a379d86dba31d69eb8cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c009b048061e40ff46a379d86dba31d69eb8cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b63543dc62d2df0143b8d003017e29eca097063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b63543dc62d2df0143b8d003017e29eca097063", "html_url": "https://github.com/rust-lang/rust/commit/1b63543dc62d2df0143b8d003017e29eca097063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b63543dc62d2df0143b8d003017e29eca097063/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b49191bbf8cf7b418fc828f944bf4580121db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b49191bbf8cf7b418fc828f944bf4580121db3", "html_url": "https://github.com/rust-lang/rust/commit/80b49191bbf8cf7b418fc828f944bf4580121db3"}], "stats": {"total": 150, "additions": 33, "deletions": 117}, "files": [{"sha": "6e0238b7a4d5ef58ff6972fa2fe4285d40553174", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 33, "deletions": 117, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/1b63543dc62d2df0143b8d003017e29eca097063/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b63543dc62d2df0143b8d003017e29eca097063/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=1b63543dc62d2df0143b8d003017e29eca097063", "patch": "@@ -1,10 +1,10 @@\n use crate::clean;\n use crate::core::DocContext;\n-use crate::html::item_type::ItemType;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n use syntax::attr;\n+use syntax_pos::FileName;\n \n use std::collections::BTreeMap;\n use std::fmt;\n@@ -75,74 +75,51 @@ impl fmt::Display for ItemCount {\n \n #[derive(Default)]\n struct CoverageCalculator {\n-    items: BTreeMap<ItemType, ItemCount>,\n+    items: BTreeMap<FileName, ItemCount>,\n }\n \n impl CoverageCalculator {\n     fn print_results(&self) {\n-        use crate::html::item_type::ItemType::*;\n-\n         let mut total = ItemCount::default();\n \n-        let main_types = [\n-            Module, Function,\n-            Struct, StructField,\n-            Enum, Variant,\n-            Union,\n-            Method,\n-            Trait, TyMethod,\n-            AssociatedType, AssociatedConst,\n-            Macro,\n-            Static, Constant,\n-            ForeignType, Existential,\n-            Typedef, TraitAlias,\n-            Primitive, Keyword,\n-        ];\n-\n-        println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n-        println!(\"| {:<25} | {:>10} | {:>10} | {:>10} |\",\n-                 \"Item Type\", \"Documented\", \"Total\", \"Percentage\");\n-        println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n-\n-        for item_type in &main_types {\n-            let count = self.items.get(item_type).cloned().unwrap_or_default();\n-\n-            if let Some(percentage) = count.percentage() {\n-                println!(\"| {:<25} | {:>10} | {:>10} | {:>9.1}% |\",\n-                         table_name(item_type), count.with_docs, count.total, percentage);\n+        fn print_table_line() {\n+            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+        }\n \n-                total += count;\n-            }\n+        fn print_table_record(name: &str, count: ItemCount, percentage: f64) {\n+            println!(\"| {:<35} | {:>10} | {:>10} | {:>9.1}% |\",\n+                     name, count.with_docs, count.total, percentage);\n         }\n \n-        println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+        print_table_line();\n+        println!(\"| {:<35} | {:>10} | {:>10} | {:>10} |\",\n+                 \"File\", \"Documented\", \"Total\", \"Percentage\");\n+        print_table_line();\n \n-        if let Some(count) = self.items.get(&Impl) {\n+        for (file, &count) in &self.items {\n             if let Some(percentage) = count.percentage() {\n-                if let Some(percentage) = total.percentage() {\n-                    println!(\"| {:<25} | {:>10} | {:>10} | {:>9.1}% |\",\n-                             \"Total (non trait impls)\", total.with_docs, total.total, percentage);\n+                let mut name = file.to_string();\n+                // if a filename is too long, shorten it so we don't blow out the table\n+                // FIXME(misdreavus): this needs to count graphemes, and probably also track\n+                // double-wide characters...\n+                if name.len() > 35 {\n+                    name = \"...\".to_string() + &name[name.len()-32..];\n                 }\n \n-                println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n-\n-                println!(\"| {:<25} | {:>10} | {:>10} | {:>9.1}% |\",\n-                         table_name(&Impl), count.with_docs, count.total, percentage);\n-\n-                println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+                print_table_record(&name, count, percentage);\n \n-                total += *count;\n+                total += count;\n             }\n         }\n \n-        println!(\"| {:<25} | {:>10} | {:>10} | {:>9.1}% |\",\n-                 \"Total\", total.with_docs, total.total, total.percentage().unwrap_or(0.0));\n-        println!(\"+-{0:->25}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+        print_table_line();\n+        print_table_record(\"Total\", total, total.percentage().unwrap_or(0.0));\n+        print_table_line();\n     }\n }\n \n impl fold::DocFolder for CoverageCalculator {\n-    fn fold_item(&mut self, mut i: clean::Item) -> Option<clean::Item> {\n+    fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n         let has_docs = !i.attrs.doc_strings.is_empty();\n \n         match i.inner {\n@@ -171,87 +148,26 @@ impl fold::DocFolder for CoverageCalculator {\n             }\n             clean::ImplItem(ref impl_) => {\n                 if let Some(ref tr) = impl_.trait_ {\n-                    debug!(\"counting impl {:#} for {:#}\", tr, impl_.for_);\n-\n-                    // trait impls inherit their docs from the trait definition, so documenting\n-                    // them can be considered optional\n-                    self.items.entry(ItemType::Impl).or_default().count_item(has_docs);\n-\n-                    for it in &impl_.items {\n-                        let has_docs = !it.attrs.doc_strings.is_empty();\n-                        self.items.entry(ItemType::Impl).or_default().count_item(has_docs);\n-                    }\n+                    debug!(\"impl {:#} for {:#} in {}\", tr, impl_.for_, i.source.filename);\n \n-                    // now skip recursing, so that we don't double-count this impl's items\n+                    // don't count trait impls, the missing-docs lint doesn't so we shouldn't\n+                    // either\n                     return Some(i);\n                 } else {\n                     // inherent impls *can* be documented, and those docs show up, but in most\n                     // cases it doesn't make sense, as all methods on a type are in one single\n                     // impl block\n-                    debug!(\"not counting impl {:#}\", impl_.for_);\n+                    debug!(\"impl {:#} in {}\", impl_.for_, i.source.filename);\n                 }\n             }\n-            clean::MacroItem(..) | clean::ProcMacroItem(..) => {\n-                // combine `macro_rules!` macros and proc-macros in the same count\n-                debug!(\"counting macro {:?}\", i.name);\n-                self.items.entry(ItemType::Macro).or_default().count_item(has_docs);\n-            }\n-            clean::TraitItem(ref mut trait_) => {\n-                // because both trait methods with a default impl and struct methods are\n-                // ItemType::Method, we need to properly tag trait methods as TyMethod instead\n-                debug!(\"counting trait {:?}\", i.name);\n-                self.items.entry(ItemType::Trait).or_default().count_item(has_docs);\n-\n-                // since we're not going on to document the crate, it doesn't matter if we discard\n-                // the item after counting it\n-                trait_.items.retain(|it| {\n-                    if it.type_() == ItemType::Method {\n-                        let has_docs = !it.attrs.doc_strings.is_empty();\n-                        self.items.entry(ItemType::TyMethod).or_default().count_item(has_docs);\n-                        false\n-                    } else {\n-                        true\n-                    }\n-                });\n-            }\n             _ => {\n-                debug!(\"counting {} {:?}\", i.type_(), i.name);\n-                self.items.entry(i.type_()).or_default().count_item(has_docs);\n+                debug!(\"counting {} {:?} in {}\", i.type_(), i.name, i.source.filename);\n+                self.items.entry(i.source.filename.clone())\n+                          .or_default()\n+                          .count_item(has_docs);\n             }\n         }\n \n         self.fold_item_recur(i)\n     }\n }\n-\n-fn table_name(type_: &ItemType) -> &'static str {\n-        match *type_ {\n-            ItemType::Module          => \"Modules\",\n-            ItemType::Struct          => \"Structs\",\n-            ItemType::Union           => \"Unions\",\n-            ItemType::Enum            => \"Enums\",\n-            ItemType::Function        => \"Functions\",\n-            ItemType::Typedef         => \"Type Aliases\",\n-            ItemType::Static          => \"Statics\",\n-            ItemType::Trait           => \"Traits\",\n-            // inherent impls aren't counted, and trait impls get all their items thrown into this\n-            // counter\n-            ItemType::Impl            => \"Trait Impl Items\",\n-            // even though trait methods with a default impl get cleaned as Method, we convert them\n-            // to TyMethod when counting\n-            ItemType::TyMethod        => \"Trait Methods\",\n-            ItemType::Method          => \"Methods\",\n-            ItemType::StructField     => \"Struct Fields\",\n-            ItemType::Variant         => \"Enum Variants\",\n-            ItemType::Macro           => \"Macros\",\n-            ItemType::Primitive       => \"Primitives\",\n-            ItemType::AssociatedType  => \"Associated Types\",\n-            ItemType::Constant        => \"Constants\",\n-            ItemType::AssociatedConst => \"Associated Constants\",\n-            ItemType::ForeignType     => \"Extern Types\",\n-            ItemType::Keyword         => \"Keywords\",\n-            ItemType::Existential     => \"Existential Types\",\n-            ItemType::TraitAlias      => \"Trait Aliases\",\n-            _                         => panic!(\"unanticipated ItemType: {}\", type_),\n-        }\n-}"}]}