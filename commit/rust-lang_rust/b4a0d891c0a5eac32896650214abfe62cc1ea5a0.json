{"sha": "b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTBkODkxYzBhNWVhYzMyODk2NjUwMjE0YWJmZTYyY2MxZWE1YTA=", "commit": {"author": {"name": "Kelly Wilson", "email": "wilsonk@cpsc.ucalgary.ca", "date": "2011-05-06T13:59:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-06T18:30:39Z"}, "message": "Ge the host triple using LLVM. Fix a few 'mutable' warnings also.", "tree": {"sha": "b5eef1c12afea03d3d771f17650aedd0dce3fba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5eef1c12afea03d3d771f17650aedd0dce3fba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "html_url": "https://github.com/rust-lang/rust/commit/b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/comments", "author": {"login": "wilsonk", "id": 38802, "node_id": "MDQ6VXNlcjM4ODAy", "avatar_url": "https://avatars.githubusercontent.com/u/38802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilsonk", "html_url": "https://github.com/wilsonk", "followers_url": "https://api.github.com/users/wilsonk/followers", "following_url": "https://api.github.com/users/wilsonk/following{/other_user}", "gists_url": "https://api.github.com/users/wilsonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilsonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilsonk/subscriptions", "organizations_url": "https://api.github.com/users/wilsonk/orgs", "repos_url": "https://api.github.com/users/wilsonk/repos", "events_url": "https://api.github.com/users/wilsonk/events{/privacy}", "received_events_url": "https://api.github.com/users/wilsonk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e03f004047668e80ea4e1469addd0484ef48fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e03f004047668e80ea4e1469addd0484ef48fbc", "html_url": "https://github.com/rust-lang/rust/commit/1e03f004047668e80ea4e1469addd0484ef48fbc"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "9c6c352dd37295c7a11f2c6160cda8f31b98f0fb", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "patch": "@@ -161,11 +161,27 @@ options:\n     --no-typestate     don't run the typestate pass (unsafe!)\\n\\n\");\n }\n \n-fn get_os() -> session.os {\n-    auto s = std.os.target_os();\n-    if (_str.eq(s, \"win32\")) { ret session.os_win32; }\n-    if (_str.eq(s, \"macos\")) { ret session.os_macos; }\n-    if (_str.eq(s, \"linux\")) { ret session.os_linux; }\n+fn get_os(str triple) -> session.os {\n+    if (_str.find(triple, \"win32\") > 0 ||\n+        _str.find(triple, \"mingw32\") > 0 ) {\n+        ret session.os_win32;\n+    } else if (_str.find(triple, \"darwin\") > 0) { ret session.os_macos; }\n+    else if (_str.find(triple, \"linux\") > 0) { ret session.os_linux; }\n+}\n+\n+fn get_arch(str triple) -> session.arch {\n+    if (_str.find(triple, \"i386\") > 0 ||\n+        _str.find(triple, \"i486\") > 0 ||\n+        _str.find(triple, \"i586\") > 0 ||\n+        _str.find(triple, \"i686\") > 0 ||\n+        _str.find(triple, \"i786\") > 0 ) {\n+        ret session.arch_x86;\n+    } else if (_str.find(triple, \"x86_64\") > 0) {\n+        ret session.arch_x64;\n+    } else if (_str.find(triple, \"arm\") > 0 ||\n+        _str.find(triple, \"xscale\") > 0 ) {\n+        ret session.arch_arm;\n+    }\n }\n \n fn get_default_sysroot(str binary) -> str {\n@@ -176,10 +192,12 @@ fn get_default_sysroot(str binary) -> str {\n \n fn main(vec[str] args) {\n \n-    // FIXME: don't hard-wire this.\n+    let str triple =\n+        std._str.rustrt.str_from_cstr(llvm.llvm.LLVMRustGetHostTriple());\n+\n     let @session.config target_cfg =\n-        @rec(os = get_os(),\n-             arch = session.arch_x86,\n+        @rec(os = get_os(triple),\n+             arch = get_arch(triple),\n              int_type = common.ty_i32,\n              uint_type = common.ty_u32,\n              float_type = common.ty_f64);"}, {"sha": "f825e05db21bab072252697524f6c7edadd02da4", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "patch": "@@ -848,6 +848,9 @@ native mod llvm = llvm_lib {\n         call. */\n     fn LLVMRustGetLastError() -> sbuf;\n \n+    /** Returns a string describing the hosts triple */\n+    fn LLVMRustGetHostTriple() -> sbuf;\n+\n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemoryBufferRef MemBuf) -> ModuleRef;\n "}, {"sha": "f712d22e621f92f4f15251d0b5f1a44299e241ef", "filename": "src/lib/sort.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Flib%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Flib%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsort.rs?ref=b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "patch": "@@ -45,10 +45,10 @@ fn swap[T](vec[mutable T] arr, uint x, uint y) {\n     arr.(y) = a;\n }\n \n-fn part[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n+fn part[T](lteq[T] compare_func, vec[mutable T] arr, uint left,\n         uint right, uint pivot) -> uint {\n \n-    fn compare[T](lteq[mutable T] compare_func, vec[mutable T]arr,\n+    fn compare[T](lteq[T] compare_func, vec[mutable T]arr,\n            uint arr_idx, &T arr_value) -> bool {\n \n         ret compare_func(arr.(arr_idx),arr_value);\n@@ -69,7 +69,7 @@ fn part[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n     ret storage_index;\n }\n \n-fn qsort[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n+fn qsort[T](lteq[T] compare_func, vec[mutable T] arr, uint left,\n         uint right) {\n \n     if (right > left) {\n@@ -83,12 +83,12 @@ fn qsort[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n     }\n }\n \n-fn quick_sort[T](lteq[mutable T] compare_func, vec[mutable T] arr) {\n+fn quick_sort[T](lteq[T] compare_func, vec[mutable T] arr) {\n \n-    if (len[mutable T](arr) == 0u) {\n+    if (len[T](arr) == 0u) {\n         ret;\n     }\n-    qsort[T](compare_func, arr, 0u, (len[mutable T](arr)) - 1u);\n+    qsort[T](compare_func, arr, 0u, (len[T](arr)) - 1u);\n }\n \n // Local Variables:"}, {"sha": "20894ed83fdb20dd4a1c1b152c80d6052537c3bb", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "patch": "@@ -20,6 +20,7 @@\n #include \"llvm/Target/TargetSelect.h\"\n #include \"llvm/Target/TargetRegistry.h\"\n #include \"llvm/Target/TargetOptions.h\"\n+#include \"llvm/Support/Host.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/Object.h\"\n@@ -106,3 +107,8 @@ extern \"C\" LLVMModuleRef LLVMRustParseBitcode(LLVMMemoryBufferRef MemBuf) {\n          ? NULL : M;\n }\n \n+extern \"C\" const char *LLVMRustGetHostTriple(void)\n+{\n+  static std::string str = llvm::sys::getHostTriple();\n+  return str.c_str();\n+}"}, {"sha": "748c77aa7bcea2fd63a485d16fa47bd6193ff37c", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b4a0d891c0a5eac32896650214abfe62cc1ea5a0/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=b4a0d891c0a5eac32896650214abfe62cc1ea5a0", "patch": "@@ -1,6 +1,7 @@\n LLVMRustCreateMemoryBufferWithContentsOfFile\n LLVMRustWriteOutputFile\n LLVMRustGetLastError\n+LLVMRustGetHostTriple\n LLVMRustParseBitcode\n LLVMLinkModules\n LLVMCreateObjectFile"}]}