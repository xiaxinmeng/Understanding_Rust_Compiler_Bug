{"sha": "5d90d6ee903d547cbb708b059c3b18b81fb7827c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTBkNmVlOTAzZDU0N2NiYjcwOGIwNTljM2IxOGI4MWZiNzgyN2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-12T08:43:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-12T08:43:15Z"}, "message": "Rollup merge of #76297 - lcnr:const-ty-alias, r=varkor\n\nrustdoc: fix min_const_generics with ty::Param\n\nfixes #75913\n\nr? @varkor cc @jyn514", "tree": {"sha": "c50a7aa02e9f42e0f422815e77f021b387f27da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50a7aa02e9f42e0f422815e77f021b387f27da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d90d6ee903d547cbb708b059c3b18b81fb7827c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXIojCRBK7hj4Ov3rIwAAdHIIADNEg68xjKrSU8s7SFPxof9z\n2MRipCCJwHAI5ngTI9F74QnErAttHWIuxt4CD1UFDxi/0f48OxQwuozfwFNlH5wI\n/VUWjv8nCUTUt0SsU8vIWERzVZzEHiDcDW2EDUshVNAmHy00lsxv8Z21KRIbwMLa\nN2sb44aPnWhAxKv31iUkupCzC5wuOZ3kgndnDsLHpiQP4GmvdvdjGn3/sV14/UOd\nkYtdis47NuQ8ojkFstB+wAhJHAmbICjBGSo4vc0Yxd2SWM5KKbEhw4Kq00qtTcm7\nRv8sXcy8s+SHhwmDCgSlWZC1GA9Ckpzt5NRhGruLn6vTbjXjMhId4Fgjt0wiKLE=\n=YtTv\n-----END PGP SIGNATURE-----\n", "payload": "tree c50a7aa02e9f42e0f422815e77f021b387f27da6\nparent 7344f930c053395909a965c413a906415e5a5d8f\nparent ccf1f580812b25eda231d4f2ac2e20c445fe7b62\nauthor Ralf Jung <post@ralfj.de> 1599900195 +0200\ncommitter GitHub <noreply@github.com> 1599900195 +0200\n\nRollup merge of #76297 - lcnr:const-ty-alias, r=varkor\n\nrustdoc: fix min_const_generics with ty::Param\n\nfixes #75913\n\nr? @varkor cc @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d90d6ee903d547cbb708b059c3b18b81fb7827c", "html_url": "https://github.com/rust-lang/rust/commit/5d90d6ee903d547cbb708b059c3b18b81fb7827c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d90d6ee903d547cbb708b059c3b18b81fb7827c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7344f930c053395909a965c413a906415e5a5d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7344f930c053395909a965c413a906415e5a5d8f", "html_url": "https://github.com/rust-lang/rust/commit/7344f930c053395909a965c413a906415e5a5d8f"}, {"sha": "ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "html_url": "https://github.com/rust-lang/rust/commit/ccf1f580812b25eda231d4f2ac2e20c445fe7b62"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "9d784d24609dc5ea294be1cda5fd6c764a1edcda", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d90d6ee903d547cbb708b059c3b18b81fb7827c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90d6ee903d547cbb708b059c3b18b81fb7827c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5d90d6ee903d547cbb708b059c3b18b81fb7827c", "patch": "@@ -1364,16 +1364,16 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                let length = match cx.tcx.const_eval_poly(def_id.to_def_id()) {\n-                    Ok(length) => {\n-                        print_const(cx, ty::Const::from_value(cx.tcx, length, cx.tcx.types.usize))\n-                    }\n-                    Err(_) => cx\n-                        .sess()\n-                        .source_map()\n-                        .span_to_snippet(cx.tcx.def_span(def_id))\n-                        .unwrap_or_else(|_| \"_\".to_string()),\n-                };\n+                // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n+                // as we currently do not supply the parent generics to anonymous constants\n+                // but do allow `ConstKind::Param`.\n+                //\n+                // `const_eval_poly` tries to to first substitute generic parameters which\n+                // results in an ICE while manually constructing the constant and using `eval`\n+                // does nothing for `ConstKind::Param`.\n+                let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n+                let param_env = cx.tcx.param_env(def_id);\n+                let length = print_const(cx, ct.eval(cx.tcx, param_env));\n                 Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),"}, {"sha": "3064d0701e3006afa1c59725ef04013dc24f437b", "filename": "src/test/rustdoc/const-generics/type-alias.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d90d6ee903d547cbb708b059c3b18b81fb7827c/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90d6ee903d547cbb708b059c3b18b81fb7827c/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=5d90d6ee903d547cbb708b059c3b18b81fb7827c", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+#![feature(min_const_generics)]\n+#![crate_name = \"foo\"]\n+\n+// @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+pub type CellIndex<const D: usize> = [i64; D];"}]}