{"sha": "a36d9a7820be9040de8e56ec1852e2920377b935", "node_id": "C_kwDOAAsO6NoAKGEzNmQ5YTc4MjBiZTkwNDBkZThlNTZlYzE4NTJlMjkyMDM3N2I5MzU", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-05-14T17:39:08Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-05-14T17:39:08Z"}, "message": "move `is_ty_alias` to `clippy_utils`", "tree": {"sha": "14e9238b09ae522a88eb9688e008329def928b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e9238b09ae522a88eb9688e008329def928b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36d9a7820be9040de8e56ec1852e2920377b935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36d9a7820be9040de8e56ec1852e2920377b935", "html_url": "https://github.com/rust-lang/rust/commit/a36d9a7820be9040de8e56ec1852e2920377b935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36d9a7820be9040de8e56ec1852e2920377b935/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "html_url": "https://github.com/rust-lang/rust/commit/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "28c3fc859e33227394bede57c02982234438519a", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a36d9a7820be9040de8e56ec1852e2920377b935/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36d9a7820be9040de8e56ec1852e2920377b935/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=a36d9a7820be9040de8e56ec1852e2920377b935", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::is_ty_alias;\n use clippy_utils::source::{snippet, snippet_with_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -197,12 +197,3 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n         }\n     }\n }\n-\n-/// `cx.qpath_res` seems to return `AssocFn` so we do this instead\n-fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n-    match *qpath {\n-        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n-        QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => is_ty_alias(&qpath),\n-        _ => false,\n-    }\n-}"}, {"sha": "2e27c260f74c4d45bf7de4c40f4a71cdabb6e86e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a36d9a7820be9040de8e56ec1852e2920377b935/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36d9a7820be9040de8e56ec1852e2920377b935/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a36d9a7820be9040de8e56ec1852e2920377b935", "patch": "@@ -1,5 +1,6 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n+#![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n@@ -282,6 +283,15 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n+/// Checks if the given `QPath` belongs to a type alias.\n+pub fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n+    match *qpath {\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => { is_ty_alias(&qpath) },\n+        _ => false,\n+    }\n+}\n+\n /// Checks if the method call given in `expr` belongs to the given trait.\n /// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {"}]}