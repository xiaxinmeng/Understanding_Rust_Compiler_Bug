{"sha": "9391b1c8ceb96e07e4553014cb3b543793ebf717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOTFiMWM4Y2ViOTZlMDdlNDU1MzAxNGNiM2I1NDM3OTNlYmY3MTc=", "commit": {"author": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-27T21:52:10Z"}, "committer": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-27T21:52:10Z"}, "message": "fixes and improvements", "tree": {"sha": "626d624dabc305b93acf769bb007d65ae5054490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/626d624dabc305b93acf769bb007d65ae5054490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9391b1c8ceb96e07e4553014cb3b543793ebf717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9391b1c8ceb96e07e4553014cb3b543793ebf717", "html_url": "https://github.com/rust-lang/rust/commit/9391b1c8ceb96e07e4553014cb3b543793ebf717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9391b1c8ceb96e07e4553014cb3b543793ebf717/comments", "author": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b7349e7a929cd55f916fc6cdfa171467ac897d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b7349e7a929cd55f916fc6cdfa171467ac897d", "html_url": "https://github.com/rust-lang/rust/commit/f1b7349e7a929cd55f916fc6cdfa171467ac897d"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "f678bf5d604233324d0ee0eee354a71cf606c28a", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9391b1c8ceb96e07e4553014cb3b543793ebf717/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9391b1c8ceb96e07e4553014cb3b543793ebf717/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9391b1c8ceb96e07e4553014cb3b543793ebf717", "patch": "@@ -6,8 +6,7 @@ mod sysroot;\n \n use std::{\n     error::Error,\n-    fs::File,\n-    fs::read_dir,\n+    fs::{read_dir, File, ReadDir},\n     io::BufReader,\n     path::{Path, PathBuf},\n     process::Command,\n@@ -26,15 +25,35 @@ pub use crate::{\n };\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlNotFoundError(pub PathBuf);\n+pub struct CargoTomlNoneFoundError(pub PathBuf);\n \n-impl std::fmt::Display for CargoTomlNotFoundError {\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct CargoTomlMultipleValidFoundError(pub Vec<PathBuf>);\n+\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct CargoTomlSearchFileSystemError(pub PathBuf, pub String);\n+\n+impl std::fmt::Display for CargoTomlNoneFoundError {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(fmt, \"can't find Cargo.toml at {}\", self.0.display())\n     }\n }\n \n-impl Error for CargoTomlNotFoundError {}\n+impl std::fmt::Display for CargoTomlMultipleValidFoundError {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(fmt, \"found multiple valid Cargo.toml files {:?}\", self.0)\n+    }\n+}\n+\n+impl std::fmt::Display for CargoTomlSearchFileSystemError {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(fmt, \"a filesystem error occurred while searching for Cargo.toml: {}\", self.1)\n+    }\n+}\n+\n+impl Error for CargoTomlNoneFoundError {}\n+impl Error for CargoTomlMultipleValidFoundError {}\n+impl Error for CargoTomlSearchFileSystemError {}\n \n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n@@ -407,7 +426,7 @@ fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n     None\n }\n \n-fn find_cargo_toml_down_the_fs(path: &Path) -> Option<PathBuf> {\n+fn find_cargo_toml_in_parent_dir(path: &Path) -> Option<PathBuf> {\n     let mut curr = Some(path);\n     while let Some(path) = curr {\n         let candidate = path.join(\"Cargo.toml\");\n@@ -416,41 +435,48 @@ fn find_cargo_toml_down_the_fs(path: &Path) -> Option<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    \n+\n     None\n }\n \n-fn find_cargo_toml_up_the_fs(path: &Path) -> Option<PathBuf> {\n-    let entities = match read_dir(path) {\n-        Ok(entities) => entities,\n-        Err(_) => return None\n-    };\n-\n-    // Only one level up to avoid cycles the easy way and stop a runaway scan with large projects\n+fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<PathBuf> {\n+    // Only one level down to avoid cycles the easy way and stop a runaway scan with large projects\n+    let mut valid_canditates = vec![];\n     for entity in entities.filter_map(Result::ok) {\n         let candidate = entity.path().join(\"Cargo.toml\");\n         if candidate.exists() {\n-            return Some(candidate);\n+            valid_canditates.push(candidate)\n         }\n     }\n-\n-    None\n+    valid_canditates\n }\n \n fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+    let path_as_buf = path.to_path_buf();\n+\n     if path.ends_with(\"Cargo.toml\") {\n         return Ok(path.to_path_buf());\n     }\n \n-    if let Some(p) = find_cargo_toml_down_the_fs(path) {\n-        return Ok(p)\n+    if let Some(p) = find_cargo_toml_in_parent_dir(path) {\n+        return Ok(p);\n     }\n \n-    if let Some(p) = find_cargo_toml_up_the_fs(path) {\n-        return Ok(p)\n-    }\n+    let entities = match read_dir(path.join(\"does_not_exist\")) {\n+        Ok(entities) => {\n+            entities\n+        },\n+        Err(e) => {\n+            return Err(CargoTomlSearchFileSystemError(path_as_buf, e.to_string()).into())\n+        },\n+    };\n \n-    Err(CargoTomlNotFoundError(path.to_path_buf()).into())\n+    let mut valid_canditates = find_cargo_toml_in_child_dir(entities);\n+    match valid_canditates.len() {\n+        1 => Ok(valid_canditates.remove(0)),\n+        0 => Err(CargoTomlNoneFoundError(path_as_buf).into()),\n+        _ => Err(CargoTomlMultipleValidFoundError(valid_canditates).into()),\n+    }\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {"}, {"sha": "37a46cd65f29692ce8d8c4027b930299085d1230", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9391b1c8ceb96e07e4553014cb3b543793ebf717/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9391b1c8ceb96e07e4553014cb3b543793ebf717/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9391b1c8ceb96e07e4553014cb3b543793ebf717", "patch": "@@ -115,7 +115,7 @@ pub fn main_loop(\n                     Ok(workspace) => loaded_workspaces.push(workspace),\n                     Err(e) => {\n                         log::error!(\"loading workspace failed: {:?}\", e);\n-                        if let Some(ra_project_model::CargoTomlNotFoundError(_)) = e.downcast_ref()\n+                        if let Some(ra_project_model::CargoTomlNoneFoundError(_)) = e.downcast_ref()\n                         {\n                             if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n                                 continue;"}]}