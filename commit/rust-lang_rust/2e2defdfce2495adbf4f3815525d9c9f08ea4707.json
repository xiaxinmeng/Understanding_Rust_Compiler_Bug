{"sha": "2e2defdfce2495adbf4f3815525d9c9f08ea4707", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmRlZmRmY2UyNDk1YWRiZjRmMzgxNTUyNWQ5YzlmMDhlYTQ3MDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-12-17T12:04:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-12-18T13:00:07Z"}, "message": "Cleanup for libgraphviz", "tree": {"sha": "2cf2d8cd3517444ae7d9560a825d8d4a25c1dd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf2d8cd3517444ae7d9560a825d8d4a25c1dd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2defdfce2495adbf4f3815525d9c9f08ea4707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2defdfce2495adbf4f3815525d9c9f08ea4707", "html_url": "https://github.com/rust-lang/rust/commit/2e2defdfce2495adbf4f3815525d9c9f08ea4707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2defdfce2495adbf4f3815525d9c9f08ea4707/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af57acef1cd1651861be0bfe77b4f4dd3066ce02", "url": "https://api.github.com/repos/rust-lang/rust/commits/af57acef1cd1651861be0bfe77b4f4dd3066ce02", "html_url": "https://github.com/rust-lang/rust/commit/af57acef1cd1651861be0bfe77b4f4dd3066ce02"}], "stats": {"total": 83, "additions": 24, "deletions": 59}, "files": [{"sha": "110493bbec1595519eb1c8bbae8a4449b80b9a5c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 24, "deletions": 59, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2e2defdfce2495adbf4f3815525d9c9f08ea4707/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2defdfce2495adbf4f3815525d9c9f08ea4707/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=2e2defdfce2495adbf4f3815525d9c9f08ea4707", "patch": "@@ -413,27 +413,14 @@ impl<'a> Id<'a> {\n     /// quotes, ...) will return an empty `Err` value.\n     pub fn new<Name: IntoCow<'a, str>>(name: Name) -> Result<Id<'a>, ()> {\n         let name = name.into_cow();\n-        {\n-            let mut chars = name.chars();\n-            match chars.next() {\n-                Some(c) if is_letter_or_underscore(c) => {}\n-                _ => return Err(()),\n-            }\n-            if !chars.all(is_constituent) {\n-                return Err(());\n-            }\n-        }\n-        return Ok(Id { name: name });\n-\n-        fn is_letter_or_underscore(c: char) -> bool {\n-            in_range('a', c, 'z') || in_range('A', c, 'Z') || c == '_'\n-        }\n-        fn is_constituent(c: char) -> bool {\n-            is_letter_or_underscore(c) || in_range('0', c, '9')\n+        match name.chars().next() {\n+            Some(c) if c.is_ascii_alphabetic() || c == '_' => {}\n+            _ => return Err(()),\n         }\n-        fn in_range(low: char, c: char, high: char) -> bool {\n-            low as usize <= c as usize && c as usize <= high as usize\n+        if !name.chars().all(|c| c.is_ascii_alphanumeric() || c == '_' ) {\n+            return Err(());\n         }\n+        return Ok(Id { name: name });\n     }\n \n     pub fn as_slice(&'a self) -> &'a str {\n@@ -484,8 +471,7 @@ pub trait Labeller<'a> {\n     /// Maps `e` to a label that will be used in the rendered output.\n     /// The label need not be unique, and may be the empty string; the\n     /// default is in fact the empty string.\n-    fn edge_label(&'a self, e: &Self::Edge) -> LabelText<'a> {\n-        let _ignored = e;\n+    fn edge_label(&'a self, _e: &Self::Edge) -> LabelText<'a> {\n         LabelStr(\"\".into_cow())\n     }\n \n@@ -655,79 +641,58 @@ pub fn render_opts<'a, N, E, G, W>(g: &'a G,\n           G: Labeller<'a, Node=N, Edge=E> + GraphWalk<'a, Node=N, Edge=E>,\n           W: Write\n {\n-    fn writeln<W: Write>(w: &mut W, arg: &[&str]) -> io::Result<()> {\n-        for &s in arg {\n-            w.write_all(s.as_bytes())?;\n-        }\n-        write!(w, \"\\n\")\n-    }\n-\n-    fn indent<W: Write>(w: &mut W) -> io::Result<()> {\n-        w.write_all(b\"    \")\n-    }\n-\n-    writeln(w, &[\"digraph \", g.graph_id().as_slice(), \" {\"])?;\n+    writeln!(w, \"digraph {} {{\", g.graph_id().as_slice())?;\n     for n in g.nodes().iter() {\n-        indent(w)?;\n+        write!(w, \"    \")?;\n         let id = g.node_id(n);\n \n         let escaped = &g.node_label(n).to_dot_string();\n-        let shape;\n \n-        let mut text = vec![id.as_slice()];\n+        let mut text = Vec::new();\n+        write!(text, \"{}\", id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoNodeLabels) {\n-            text.push(\"[label=\");\n-            text.push(escaped);\n-            text.push(\"]\");\n+            write!(text, \"[label={}]\", escaped).unwrap();\n         }\n \n         let style = g.node_style(n);\n         if !options.contains(&RenderOption::NoNodeStyles) && style != Style::None {\n-            text.push(\"[style=\\\"\");\n-            text.push(style.as_slice());\n-            text.push(\"\\\"]\");\n+            write!(text, \"[style=\\\"{}\\\"]\", style.as_slice()).unwrap();\n         }\n \n         if let Some(s) = g.node_shape(n) {\n-            shape = s.to_dot_string();\n-            text.push(\"[shape=\");\n-            text.push(&shape);\n-            text.push(\"]\");\n+            write!(text, \"[shape={}]\", &s.to_dot_string()).unwrap();\n         }\n \n-        text.push(\";\");\n-        writeln(w, &text)?;\n+        writeln!(text, \";\").unwrap();\n+        w.write_all(&text[..])?;\n     }\n \n     for e in g.edges().iter() {\n         let escaped_label = &g.edge_label(e).to_dot_string();\n-        indent(w)?;\n+        write!(w, \"    \")?;\n         let source = g.source(e);\n         let target = g.target(e);\n         let source_id = g.node_id(&source);\n         let target_id = g.node_id(&target);\n \n-        let mut text = vec![source_id.as_slice(), \" -> \", target_id.as_slice()];\n+        let mut text = Vec::new();\n+        write!(text, \"{} -> {}\", source_id.as_slice(), target_id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoEdgeLabels) {\n-            text.push(\"[label=\");\n-            text.push(escaped_label);\n-            text.push(\"]\");\n+            write!(text, \"[label={}]\", escaped_label).unwrap();\n         }\n \n         let style = g.edge_style(e);\n         if !options.contains(&RenderOption::NoEdgeStyles) && style != Style::None {\n-            text.push(\"[style=\\\"\");\n-            text.push(style.as_slice());\n-            text.push(\"\\\"]\");\n+            write!(text, \"[style=\\\"{}\\\"]\", style.as_slice()).unwrap();\n         }\n \n-        text.push(\";\");\n-        writeln(w, &text)?;\n+        writeln!(text, \";\").unwrap();\n+        w.write_all(&text[..])?;\n     }\n \n-    writeln(w, &[\"}\"])\n+    writeln!(w, \"}}\")\n }\n \n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {"}]}