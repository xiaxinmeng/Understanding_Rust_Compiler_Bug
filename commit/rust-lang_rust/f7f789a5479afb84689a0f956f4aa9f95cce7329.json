{"sha": "f7f789a5479afb84689a0f956f4aa9f95cce7329", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Zjc4OWE1NDc5YWZiODQ2ODlhMGY5NTZmNGFhOWY5NWNjZTczMjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-12T09:13:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-12T09:13:34Z"}, "message": "Use host floats for the intrinsics that we don't have soft float impls for", "tree": {"sha": "d00add17693efbed8a1ba7b35d66e96e34f330c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00add17693efbed8a1ba7b35d66e96e34f330c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f789a5479afb84689a0f956f4aa9f95cce7329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f789a5479afb84689a0f956f4aa9f95cce7329", "html_url": "https://github.com/rust-lang/rust/commit/f7f789a5479afb84689a0f956f4aa9f95cce7329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f789a5479afb84689a0f956f4aa9f95cce7329/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072c02f9a3e1767a7b9121ef5217415bbbc8711f", "url": "https://api.github.com/repos/rust-lang/rust/commits/072c02f9a3e1767a7b9121ef5217415bbbc8711f", "html_url": "https://github.com/rust-lang/rust/commit/072c02f9a3e1767a7b9121ef5217415bbbc8711f"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "aa17422159c470619bb9101b69bb351eb3cfae5c", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f7f789a5479afb84689a0f956f4aa9f95cce7329/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f789a5479afb84689a0f956f4aa9f95cce7329/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=f7f789a5479afb84689a0f956f4aa9f95cce7329", "patch": "@@ -245,7 +245,8 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n \n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n             \"log10f32\" | \"log2f32\" | \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n-                let f = self.value_to_primval(args[0])?.to_f32()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f32::from_bits(f as u32);\n                 let f = match intrinsic_name {\n                     \"sinf32\" => f.sin(),\n                     \"fabsf32\" => f.abs(),\n@@ -261,12 +262,13 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     \"truncf32\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                self.write_primval(dest, PrimVal::from_f32(f), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_ty)?;\n             }\n \n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n             \"log10f64\" | \"log2f64\" | \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n-                let f = self.value_to_primval(args[0])?.to_f64()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f64::from_bits(f as u64);\n                 let f = match intrinsic_name {\n                     \"sinf64\" => f.sin(),\n                     \"fabsf64\" => f.abs(),\n@@ -282,7 +284,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     \"truncf64\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                self.write_primval(dest, PrimVal::from_f64(f), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_ty)?;\n             }\n \n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n@@ -413,63 +415,75 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n             }\n \n             \"powf32\" => {\n-                let f = self.value_to_primval(args[0])?.to_f32()?;\n-                let f2 = self.value_to_primval(args[1])?.to_f32()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f32::from_bits(f as u32);\n+                let f2 = self.value_to_primval(args[1])?.to_bytes()?;\n+                let f2 = f32::from_bits(f2 as u32);\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f32(f.powf(f2)),\n+                    PrimVal::Bytes(f.powf(f2).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }\n \n             \"powf64\" => {\n-                let f = self.value_to_primval(args[0])?.to_f64()?;\n-                let f2 = self.value_to_primval(args[1])?.to_f64()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f64::from_bits(f as u64);\n+                let f2 = self.value_to_primval(args[1])?.to_bytes()?;\n+                let f2 = f64::from_bits(f2 as u64);\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f64(f.powf(f2)),\n+                    PrimVal::Bytes(f.powf(f2).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }\n \n             \"fmaf32\" => {\n-                let a = self.value_to_primval(args[0])?.to_f32()?;\n-                let b = self.value_to_primval(args[1])?.to_f32()?;\n-                let c = self.value_to_primval(args[2])?.to_f32()?;\n+                let a = self.value_to_primval(args[0])?.to_bytes()?;\n+                let a = f32::from_bits(a as u32);\n+                let b = self.value_to_primval(args[1])?.to_bytes()?;\n+                let b = f32::from_bits(b as u32);\n+                let c = self.value_to_primval(args[2])?.to_bytes()?;\n+                let c = f32::from_bits(c as u32);\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f32(a * b + c),\n+                    PrimVal::Bytes((a * b + c).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }\n \n             \"fmaf64\" => {\n-                let a = self.value_to_primval(args[0])?.to_f64()?;\n-                let b = self.value_to_primval(args[1])?.to_f64()?;\n-                let c = self.value_to_primval(args[2])?.to_f64()?;\n+                let a = self.value_to_primval(args[0])?.to_bytes()?;\n+                let a = f64::from_bits(a as u64);\n+                let b = self.value_to_primval(args[1])?.to_bytes()?;\n+                let b = f64::from_bits(b as u64);\n+                let c = self.value_to_primval(args[2])?.to_bytes()?;\n+                let c = f64::from_bits(c as u64);\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f64(a * b + c),\n+                    PrimVal::Bytes((a * b + c).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }\n \n             \"powif32\" => {\n-                let f = self.value_to_primval(args[0])?.to_f32()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f32::from_bits(f as u32);\n                 let i = self.value_to_primval(args[1])?.to_i128()?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f32(f.powi(i as i32)),\n+                    PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }\n \n             \"powif64\" => {\n-                let f = self.value_to_primval(args[0])?.to_f64()?;\n+                let f = self.value_to_primval(args[0])?.to_bytes()?;\n+                let f = f64::from_bits(f as u64);\n                 let i = self.value_to_primval(args[1])?.to_i128()?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_f64(f.powi(i as i32)),\n+                    PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n                     dest_ty,\n                 )?;\n             }"}]}