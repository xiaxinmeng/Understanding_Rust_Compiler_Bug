{"sha": "a09079f27aa631b011f6c0703200862d28af81f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTA3OWYyN2FhNjMxYjAxMWY2YzA3MDMyMDA4NjJkMjhhZjgxZjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-15T14:00:24Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Fix coercion of two closures to a function pointer\n\nFixes #8604.", "tree": {"sha": "863ab0fbdb3dafed13cdbe1b6b066072c012f1b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863ab0fbdb3dafed13cdbe1b6b066072c012f1b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09079f27aa631b011f6c0703200862d28af81f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09079f27aa631b011f6c0703200862d28af81f4", "html_url": "https://github.com/rust-lang/rust/commit/a09079f27aa631b011f6c0703200862d28af81f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09079f27aa631b011f6c0703200862d28af81f4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa6be243587e523d5a2fc218db78568041ff296", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa6be243587e523d5a2fc218db78568041ff296", "html_url": "https://github.com/rust-lang/rust/commit/afa6be243587e523d5a2fc218db78568041ff296"}], "stats": {"total": 104, "additions": 48, "deletions": 56}, "files": [{"sha": "27f59c8bb8c4b4d465855844b2151f68f35c2107", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=a09079f27aa631b011f6c0703200862d28af81f4", "patch": "@@ -40,32 +40,45 @@ impl<'a> InferenceContext<'a> {\n     /// Merge two types from different branches, with possible coercion.\n     ///\n     /// Mostly this means trying to coerce one to the other, but\n-    ///  - if we have two function types for different functions, we need to\n+    ///  - if we have two function types for different functions or closures, we need to\n     ///    coerce both to function pointers;\n     ///  - if we were concerned with lifetime subtyping, we'd need to look for a\n     ///    least upper bound.\n     pub(super) fn coerce_merge_branch(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n+        // Special case: two function types. Try to coerce both to\n+        // pointers to have a chance at getting a match. See\n+        // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n+        let sig = match (ty1.kind(&Interner), ty2.kind(&Interner)) {\n+            (TyKind::FnDef(..), TyKind::FnDef(..))\n+            | (TyKind::Closure(..), TyKind::FnDef(..))\n+            | (TyKind::FnDef(..), TyKind::Closure(..))\n+            | (TyKind::Closure(..), TyKind::Closure(..)) => {\n+                // FIXME: we're ignoring safety here. To be more correct, if we have one FnDef and one Closure,\n+                // we should be coercing the closure to a fn pointer of the safety of the FnDef\n+                cov_mark::hit!(coerce_fn_reification);\n+                let sig = ty1.callable_sig(self.db).expect(\"FnDef without callable sig\");\n+                Some(sig)\n+            }\n+            _ => None,\n+        };\n+        if let Some(sig) = sig {\n+            let target_ty = TyKind::Function(sig.to_fn_ptr()).intern(&Interner);\n+            let result1 = self.coerce_inner(ty1.clone(), &target_ty);\n+            let result2 = self.coerce_inner(ty2.clone(), &target_ty);\n+            if let (Ok(_result1), Ok(_result2)) = (result1, result2) {\n+                // TODO deal with the goals\n+                return target_ty;\n+            }\n+        }\n+\n         if self.coerce(ty1, ty2) {\n             ty2.clone()\n         } else if self.coerce(ty2, ty1) {\n             ty1.clone()\n         } else {\n-            if let (TyKind::FnDef(..), TyKind::FnDef(..)) =\n-                (ty1.kind(&Interner), ty2.kind(&Interner))\n-            {\n-                cov_mark::hit!(coerce_fn_reification);\n-                // Special case: two function types. Try to coerce both to\n-                // pointers to have a chance at getting a match. See\n-                // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n-                let sig1 = ty1.callable_sig(self.db).expect(\"FnDef without callable sig\");\n-                let sig2 = ty2.callable_sig(self.db).expect(\"FnDef without callable sig\");\n-                let ptr_ty1 = TyBuilder::fn_ptr(sig1);\n-                let ptr_ty2 = TyBuilder::fn_ptr(sig2);\n-                self.coerce_merge_branch(&ptr_ty1, &ptr_ty2)\n-            } else {\n-                cov_mark::hit!(coerce_merge_fail_fallback);\n-                ty1.clone()\n-            }\n+            // FIXME record a type mismatch\n+            cov_mark::hit!(coerce_merge_fail_fallback);\n+            ty1.clone()\n         }\n     }\n \n@@ -236,8 +249,7 @@ impl<'a> InferenceContext<'a> {\n         Ok(result)\n     }\n \n-    /// Attempts to coerce from the type of a Rust function item into a closure\n-    /// or a function pointer.\n+    /// Attempts to coerce from the type of a Rust function item into a function pointer.\n     fn coerce_from_fn_item(&mut self, from_ty: Ty, to_ty: &Ty) -> InferResult {\n         match to_ty.kind(&Interner) {\n             TyKind::Function(_) => {"}, {"sha": "06d5cd0b6af5a6e71a9ae4cfd0e9f1416e7b20ca", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a09079f27aa631b011f6c0703200862d28af81f4", "patch": "@@ -167,6 +167,7 @@ pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n     Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n }\n \n+// FIXME: get rid of this, just replace it by FnPointer\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type.\n #[derive(Clone, PartialEq, Eq, Debug)]"}, {"sha": "67295b663b3040c55dd48666cb415b0c67dc401d", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=a09079f27aa631b011f6c0703200862d28af81f4", "patch": "@@ -1,6 +1,6 @@\n use expect_test::expect;\n \n-use super::{check_infer, check_infer_with_mismatches};\n+use super::{check_infer, check_infer_with_mismatches, check_types};\n \n #[test]\n fn infer_block_expr_type_mismatch() {\n@@ -858,3 +858,18 @@ fn coerce_unsize_generic() {\n         \"]],\n     );\n }\n+\n+#[test]\n+fn infer_two_closures_lub() {\n+    check_types(\n+        r#\"\n+fn foo(c: i32) {\n+    let add = |a: i32, b: i32| a + b;\n+    let sub = |a, b| a - b;\n+            //^ |i32, i32| -> i32\n+    if c > 42 { add } else { sub };\n+  //^ fn(i32, i32) -> i32\n+}\n+        \"#,\n+    )\n+}"}, {"sha": "5c70a1fc01cc82011077463aaf60eb3b93f37195", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09079f27aa631b011f6c0703200862d28af81f4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a09079f27aa631b011f6c0703200862d28af81f4", "patch": "@@ -1039,42 +1039,6 @@ fn infer_in_elseif() {\n     )\n }\n \n-#[test]\n-fn infer_closure_unify() {\n-    check_infer(\n-        r#\"\n-        fn foo(f: bool) {\n-            let a = |x| x;\n-            let b = |x| x;\n-            let id = if f { a } else { b };\n-            id(123);\n-        }\n-        \"#,\n-        expect![[r#\"\n-            7..8 'f': bool\n-            16..106 '{     ...23); }': ()\n-            26..27 'a': |i32| -> i32\n-            30..35 '|x| x': |i32| -> i32\n-            31..32 'x': i32\n-            34..35 'x': i32\n-            45..46 'b': |i32| -> i32\n-            49..54 '|x| x': |i32| -> i32\n-            50..51 'x': i32\n-            53..54 'x': i32\n-            64..66 'id': |i32| -> i32\n-            69..90 'if f {... { b }': |i32| -> i32\n-            72..73 'f': bool\n-            74..79 '{ a }': |i32| -> i32\n-            76..77 'a': |i32| -> i32\n-            85..90 '{ b }': |i32| -> i32\n-            87..88 'b': |i32| -> i32\n-            96..98 'id': |i32| -> i32\n-            96..103 'id(123)': i32\n-            99..102 '123': i32\n-        \"#]],\n-    )\n-}\n-\n #[test]\n fn infer_if_match_with_return() {\n     check_infer("}]}