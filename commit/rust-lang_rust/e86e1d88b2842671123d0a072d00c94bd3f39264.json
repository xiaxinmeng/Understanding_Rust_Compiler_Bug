{"sha": "e86e1d88b2842671123d0a072d00c94bd3f39264", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmUxZDg4YjI4NDI2NzExMjNkMGEwNzJkMDBjOTRiZDNmMzkyNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T04:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T04:21:44Z"}, "message": "auto merge of #12822 : erickt/rust/cleanup, r=acrichto\n\nThis PR makes `std::io::FileStat` hashable, and `Path` serializable as a byte array.", "tree": {"sha": "946860b413e83873d8ed9a479b6f1edaa6d80b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946860b413e83873d8ed9a479b6f1edaa6d80b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86e1d88b2842671123d0a072d00c94bd3f39264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86e1d88b2842671123d0a072d00c94bd3f39264", "html_url": "https://github.com/rust-lang/rust/commit/e86e1d88b2842671123d0a072d00c94bd3f39264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86e1d88b2842671123d0a072d00c94bd3f39264/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53242a1a38301b4a40be71fcd182568b7ee91b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53242a1a38301b4a40be71fcd182568b7ee91b6", "html_url": "https://github.com/rust-lang/rust/commit/a53242a1a38301b4a40be71fcd182568b7ee91b6"}, {"sha": "62026fd6b64296c85a8150119e2cd6a162b8b5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/62026fd6b64296c85a8150119e2cd6a162b8b5e0", "html_url": "https://github.com/rust-lang/rust/commit/62026fd6b64296c85a8150119e2cd6a162b8b5e0"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "115bb6cb6f3cf46bb3478fd637d9a99f744b8b7f", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=e86e1d88b2842671123d0a072d00c94bd3f39264", "patch": "@@ -14,6 +14,7 @@\n Core encoding and decoding interfaces.\n */\n \n+use std::path;\n use std::rc::Rc;\n use std::vec;\n use std::vec_ng::Vec;\n@@ -625,6 +626,32 @@ impl<\n     }\n }\n \n+impl<E: Encoder> Encodable<E> for path::posix::Path {\n+    fn encode(&self, e: &mut E) {\n+        self.as_vec().encode(e)\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for path::posix::Path {\n+    fn decode(d: &mut D) -> path::posix::Path {\n+        let bytes: ~[u8] = Decodable::decode(d);\n+        path::posix::Path::new(bytes)\n+    }\n+}\n+\n+impl<E: Encoder> Encodable<E> for path::windows::Path {\n+    fn encode(&self, e: &mut E) {\n+        self.as_vec().encode(e)\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for path::windows::Path {\n+    fn decode(d: &mut D) -> path::windows::Path {\n+        let bytes: ~[u8] = Decodable::decode(d);\n+        path::windows::Path::new(bytes)\n+    }\n+}\n+\n // ___________________________________________________________________________\n // Helper routines\n //"}, {"sha": "c6795fad1a588dbfa4750e5dd8d6d1c4506da685", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e86e1d88b2842671123d0a072d00c94bd3f39264", "patch": "@@ -1320,7 +1320,7 @@ pub enum FileAccess {\n }\n \n /// Different kinds of files which can be identified by a call to stat\n-#[deriving(Eq, Show)]\n+#[deriving(Eq, Show, Hash)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     TypeFile,\n@@ -1358,6 +1358,7 @@ pub enum FileType {\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n+#[deriving(Hash)]\n pub struct FileStat {\n     /// The path that this stat structure is describing\n     path: Path,\n@@ -1399,6 +1400,7 @@ pub struct FileStat {\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n #[allow(missing_doc)]\n+#[deriving(Hash)]\n pub struct UnstableFileStat {\n     device: u64,\n     inode: u64,"}, {"sha": "8345a2d04d174aa069b1f7eb38cced1850863d64", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=e86e1d88b2842671123d0a072d00c94bd3f39264", "patch": "@@ -88,10 +88,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<H: Writer> ::hash::Hash<H> for Path {\n+impl<S: Writer> ::hash::Hash<S> for Path {\n     #[inline]\n-    fn hash(&self, hasher: &mut H) {\n-        self.repr.hash(hasher)\n+    fn hash(&self, state: &mut S) {\n+        self.repr.hash(state)\n     }\n }\n "}, {"sha": "180078ae9592d929a6e2c855d48bb69ee2336e7d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=e86e1d88b2842671123d0a072d00c94bd3f39264", "patch": "@@ -112,10 +112,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<H: Writer> ::hash::Hash<H> for Path {\n+impl<S: Writer> ::hash::Hash<S> for Path {\n     #[inline]\n-    fn hash(&self, hasher: &mut H) {\n-        self.repr.hash(hasher)\n+    fn hash(&self, state: &mut S) {\n+        self.repr.hash(state)\n     }\n }\n "}, {"sha": "a94feee9d3757fe6d31ee2e840308d3e2e6367e1", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e1d88b2842671123d0a072d00c94bd3f39264/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=e86e1d88b2842671123d0a072d00c94bd3f39264", "patch": "@@ -24,12 +24,12 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n \n     let (path, generics, args) = if cx.ecfg.deriving_hash_type_parameter {\n         (Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n-                    vec!(~Literal(Path::new_local(\"__H\"))), true),\n+                    vec!(~Literal(Path::new_local(\"__S\"))), true),\n          LifetimeBounds {\n              lifetimes: Vec::new(),\n-             bounds: vec!((\"__H\", vec!(Path::new(vec!(\"std\", \"io\", \"Writer\"))))),\n+             bounds: vec!((\"__S\", vec!(Path::new(vec!(\"std\", \"io\", \"Writer\"))))),\n          },\n-         Path::new_local(\"__H\"))\n+         Path::new_local(\"__S\"))\n     } else {\n         (Path::new(vec!(\"std\", \"hash\", \"Hash\")),\n          LifetimeBounds::empty(),"}]}