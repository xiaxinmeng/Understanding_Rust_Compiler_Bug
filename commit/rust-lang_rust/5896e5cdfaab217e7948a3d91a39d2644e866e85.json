{"sha": "5896e5cdfaab217e7948a3d91a39d2644e866e85", "node_id": "C_kwDOAAsO6NoAKDU4OTZlNWNkZmFhYjIxN2U3OTQ4YTNkOTFhMzlkMjY0NGU4NjZlODU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-19T10:27:00Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T15:23:56Z"}, "message": "Store symbol name as owned string", "tree": {"sha": "b2af48bb1dab27d1b7cf1ddc9fdb8563698dd8fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2af48bb1dab27d1b7cf1ddc9fdb8563698dd8fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5896e5cdfaab217e7948a3d91a39d2644e866e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5896e5cdfaab217e7948a3d91a39d2644e866e85", "html_url": "https://github.com/rust-lang/rust/commit/5896e5cdfaab217e7948a3d91a39d2644e866e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5896e5cdfaab217e7948a3d91a39d2644e866e85/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e9d2e1a21f91fee0013b03555f723358890864", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e9d2e1a21f91fee0013b03555f723358890864", "html_url": "https://github.com/rust-lang/rust/commit/b1e9d2e1a21f91fee0013b03555f723358890864"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "492e488265194fb2e4d4c1211c6f86e2a719bf56", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5896e5cdfaab217e7948a3d91a39d2644e866e85/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5896e5cdfaab217e7948a3d91a39d2644e866e85/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5896e5cdfaab217e7948a3d91a39d2644e866e85", "patch": "@@ -5,15 +5,14 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::SymbolName;\n \n use crate::constant::ConstantCx;\n use crate::debuginfo::FunctionDebugContext;\n use crate::prelude::*;\n use crate::pretty_clif::CommentWriter;\n \n-struct CodegenedFunction<'tcx> {\n-    symbol_name: SymbolName<'tcx>,\n+struct CodegenedFunction {\n+    symbol_name: String,\n     func_id: FuncId,\n     func: Function,\n     clif_comments: CommentWriter,\n@@ -42,7 +41,7 @@ fn codegen_fn<'tcx>(\n     cached_func: Function,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n-) -> CodegenedFunction<'tcx> {\n+) -> CodegenedFunction {\n     debug_assert!(!instance.substs.needs_infer());\n \n     let mir = tcx.instance_mir(instance.def);\n@@ -56,9 +55,9 @@ fn codegen_fn<'tcx>(\n     });\n \n     // Declare function\n-    let symbol_name = tcx.symbol_name(instance);\n+    let symbol_name = tcx.symbol_name(instance).name.to_string();\n     let sig = get_function_sig(tcx, module.isa().triple(), instance);\n-    let func_id = module.declare_function(symbol_name.name, Linkage::Local, &sig).unwrap();\n+    let func_id = module.declare_function(&symbol_name, Linkage::Local, &sig).unwrap();\n \n     // Make the FunctionBuilder\n     let mut func_ctx = FunctionBuilderContext::new();\n@@ -81,7 +80,7 @@ fn codegen_fn<'tcx>(\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n     let func_debug_cx = if let Some(debug_context) = &mut cx.debug_context {\n-        Some(debug_context.define_function(tcx, symbol_name.name, mir.span))\n+        Some(debug_context.define_function(tcx, &symbol_name, mir.span))\n     } else {\n         None\n     };\n@@ -113,6 +112,7 @@ fn codegen_fn<'tcx>(\n     tcx.sess.time(\"codegen clif ir\", || codegen_fn_body(&mut fx, start_block));\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n+    let symbol_name = fx.symbol_name;\n     let clif_comments = fx.clif_comments;\n     let func_debug_cx = fx.func_debug_cx;\n \n@@ -121,7 +121,7 @@ fn codegen_fn<'tcx>(\n     if cx.should_write_ir {\n         crate::pretty_clif::write_clif_file(\n             tcx.output_filenames(()),\n-            symbol_name.name,\n+            &symbol_name,\n             \"unopt\",\n             module.isa(),\n             &func,\n@@ -135,11 +135,11 @@ fn codegen_fn<'tcx>(\n     CodegenedFunction { symbol_name, func_id, func, clif_comments, func_debug_cx }\n }\n \n-fn compile_fn<'tcx>(\n+fn compile_fn(\n     cx: &mut crate::CodegenCx,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n-    codegened_func: CodegenedFunction<'tcx>,\n+    codegened_func: CodegenedFunction,\n ) {\n     let clif_comments = codegened_func.clif_comments;\n \n@@ -195,7 +195,7 @@ fn compile_fn<'tcx>(\n         // Write optimized function to file for debugging\n         crate::pretty_clif::write_clif_file(\n             &cx.output_filenames,\n-            codegened_func.symbol_name.name,\n+            &codegened_func.symbol_name,\n             \"opt\",\n             module.isa(),\n             &context.func,\n@@ -205,7 +205,7 @@ fn compile_fn<'tcx>(\n         if let Some(disasm) = &context.compiled_code().unwrap().disasm {\n             crate::pretty_clif::write_ir_file(\n                 &cx.output_filenames,\n-                &format!(\"{}.vcode\", codegened_func.symbol_name.name),\n+                &format!(\"{}.vcode\", codegened_func.symbol_name),\n                 |file| file.write_all(disasm.as_bytes()),\n             )\n         }"}, {"sha": "589594465783e1611c688cd17f5c82325ae9576f", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5896e5cdfaab217e7948a3d91a39d2644e866e85/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5896e5cdfaab217e7948a3d91a39d2644e866e85/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=5896e5cdfaab217e7948a3d91a39d2644e866e85", "patch": "@@ -6,7 +6,6 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n };\n-use rustc_middle::ty::SymbolName;\n use rustc_span::SourceFile;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -246,7 +245,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) func_debug_cx: Option<FunctionDebugContext>,\n \n     pub(crate) instance: Instance<'tcx>,\n-    pub(crate) symbol_name: SymbolName<'tcx>,\n+    pub(crate) symbol_name: String,\n     pub(crate) mir: &'tcx Body<'tcx>,\n     pub(crate) fn_abi: Option<&'tcx FnAbi<'tcx, Ty<'tcx>>>,\n "}]}