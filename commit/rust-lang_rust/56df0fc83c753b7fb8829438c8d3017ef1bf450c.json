{"sha": "56df0fc83c753b7fb8829438c8d3017ef1bf450c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZGYwZmM4M2M3NTNiN2ZiODgyOTQzOGM4ZDMwMTdlZjFiZjQ1MGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T13:03:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T13:25:40Z"}, "message": "Improve logging", "tree": {"sha": "54243859e17610f79c9e2ef2bebb96aa28c438bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54243859e17610f79c9e2ef2bebb96aa28c438bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56df0fc83c753b7fb8829438c8d3017ef1bf450c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56df0fc83c753b7fb8829438c8d3017ef1bf450c", "html_url": "https://github.com/rust-lang/rust/commit/56df0fc83c753b7fb8829438c8d3017ef1bf450c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56df0fc83c753b7fb8829438c8d3017ef1bf450c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4d904cfb1b604bc8627491e05980ac43cd59e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4d904cfb1b604bc8627491e05980ac43cd59e3", "html_url": "https://github.com/rust-lang/rust/commit/ee4d904cfb1b604bc8627491e05980ac43cd59e3"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "982463f0b92626895c620545bbe00728ad5239e9", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -602,12 +602,13 @@ name = \"ra_analysis\"\n version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -833,11 +834,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lock_api 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1348,7 +1350,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n-\"checksum salsa 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c8f8b59428c040fbac0f6a2e698ae892e33d23d7519713ba8b243edb3082dad\"\n+\"checksum salsa 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fc085b9e4a2cf422e798387d0dc1091c6dae97411b2b177755950db9a26dace\"\n \"checksum same-file 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10f7794e2fda7f594866840e95f5c5962e886e228e68b6505885811a94dd728c\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\""}, {"sha": "b9f9cd7a706a967e513879ab50643d94167e287a", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -5,6 +5,7 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+log = \"0.4.5\"\n relative-path = \"0.4.0\"\n rayon = \"1.0.2\"\n fst = \"0.3.1\""}, {"sha": "1a9023697d2df89e654f5fa9ea04fdcb034a6a45", "filename": "crates/ra_analysis/src/db/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -1,7 +1,6 @@\n pub(crate) mod input;\n \n use std::{\n-    fmt,\n     sync::Arc,\n };\n \n@@ -17,17 +16,11 @@ use crate::{\n     FileId,\n };\n \n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n }\n \n-impl fmt::Debug for RootDatabase {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt.write_str(\"RootDatabase { ... }\")\n-    }\n-}\n-\n impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime"}, {"sha": "6c1a4749abcbb119d04178323c56f56ae04649da", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -98,6 +98,8 @@ impl AnalysisHostImpl {\n         }\n     }\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n+        log::info!(\"apply_change {:?}\", change);\n+\n         for (file_id, text) in change.files_changed {\n             self.db\n                 .query(db::input::FileTextQuery)"}, {"sha": "703938cf9ee8f7a8824d7245b60f64203abc75e2", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -13,7 +13,7 @@ mod symbol_index;\n mod completion;\n \n use std::{\n-    fmt::Debug,\n+    fmt,\n     sync::Arc,\n     collections::BTreeMap,\n };\n@@ -60,12 +60,12 @@ pub struct CrateGraph {\n     pub crate_roots: BTreeMap<CrateId, FileId>,\n }\n \n-pub trait FileResolver: Debug + Send + Sync + 'static {\n+pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n     fn file_stem(&self, file_id: FileId) -> String;\n     fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n }\n \n-#[derive(Debug, Default)]\n+#[derive(Default)]\n pub struct AnalysisChange {\n     files_added: Vec<(FileId, String)>,\n     files_changed: Vec<(FileId, String)>,\n@@ -75,6 +75,19 @@ pub struct AnalysisChange {\n     file_resolver: Option<FileResolverImp>,\n }\n \n+impl fmt::Debug for AnalysisChange {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.debug_struct(\"AnalysisChange\")\n+            .field(\"files_added\", &self.files_added.len())\n+            .field(\"files_changed\", &self.files_changed.len())\n+            .field(\"files_removed\", &self.files_removed.len())\n+            .field(\"libraries_added\", &self.libraries_added.len())\n+            .field(\"crate_graph\", &self.crate_graph)\n+            .field(\"file_resolver\", &self.file_resolver)\n+            .finish()\n+    }\n+}\n+\n \n impl AnalysisChange {\n     pub fn new() -> AnalysisChange {"}, {"sha": "9ddc3fd0bb590b7bdea56c6efad2b27b6ef81138", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56df0fc83c753b7fb8829438c8d3017ef1bf450c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=56df0fc83c753b7fb8829438c8d3017ef1bf450c", "patch": "@@ -8,7 +8,7 @@ use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n use languageserver_types::NumberOrString;\n-use ra_analysis::{FileId, LibraryData};\n+use ra_analysis::{Canceled, FileId, LibraryData};\n use rayon::{self, ThreadPool};\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n@@ -376,7 +376,7 @@ impl<'a> PoolDispatcher<'a> {\n                         Err(e) => {\n                             match e.downcast::<LspError>() {\n                                 Ok(lsp_error) => RawResponse::err(id, lsp_error.code, lsp_error.message),\n-                                Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string())\n+                                Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, format!(\"{}\\n{}\", e, e.backtrace()))\n                             }\n                         }\n                     };\n@@ -408,14 +408,22 @@ fn update_file_notifications_on_threadpool(\n     pool.spawn(move || {\n         for file_id in subscriptions {\n             match handlers::publish_diagnostics(&world, file_id) {\n-                Err(e) => error!(\"failed to compute diagnostics: {:?}\", e),\n+                Err(e) => {\n+                    if !is_canceled(&e) {\n+                        error!(\"failed to compute diagnostics: {:?}\", e);\n+                    }\n+                },\n                 Ok(params) => {\n                     let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n                     sender.send(Task::Notify(not));\n                 }\n             }\n             match handlers::publish_decorations(&world, file_id) {\n-                Err(e) => error!(\"failed to compute decorations: {:?}\", e),\n+                Err(e) => {\n+                    if !is_canceled(&e) {\n+                        error!(\"failed to compute decorations: {:?}\", e);\n+                    }\n+                },\n                 Ok(params) => {\n                     let not = RawNotification::new::<req::PublishDecorations>(&params);\n                     sender.send(Task::Notify(not))\n@@ -432,3 +440,7 @@ fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n     let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n     sender.send(RawMessage::Notification(not));\n }\n+\n+fn is_canceled(e: &failure::Error) -> bool {\n+    e.downcast_ref::<Canceled>().is_some()\n+}"}]}