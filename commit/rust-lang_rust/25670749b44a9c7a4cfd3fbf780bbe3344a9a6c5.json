{"sha": "25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjcwNzQ5YjQ0YTljN2E0Y2ZkM2ZiZjc4MGJiZTMzNDRhOWE2YzU=", "commit": {"author": {"name": "Nathaniel McCallum", "email": "npmccallum@redhat.com", "date": "2020-07-06T18:32:30Z"}, "committer": {"name": "Nathaniel McCallum", "email": "npmccallum@redhat.com", "date": "2020-07-27T22:27:15Z"}, "message": "Suppress debuginfo on naked function arguments\n\nA function that has no prologue cannot be reasonably expected to support\ndebuginfo. In fact, the existing code (before this patch) would generate\ninvalid instructions that caused crashes. We can solve this easily by\njust not emitting the debuginfo in this case.\n\nFixes https://github.com/rust-lang/rust/issues/42779\ncc https://github.com/rust-lang/rust/issues/32408", "tree": {"sha": "61d06dd1a5b0a791c528f22f01d3194282265fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d06dd1a5b0a791c528f22f01d3194282265fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "html_url": "https://github.com/rust-lang/rust/commit/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/comments", "author": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e11fc8053d32c44e7152865852acc5c3c54efb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e11fc8053d32c44e7152865852acc5c3c54efb3", "html_url": "https://github.com/rust-lang/rust/commit/0e11fc8053d32c44e7152865852acc5c3c54efb3"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "2549b90ddfa11d8c444c0195998ad8e08e6579a7", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n@@ -797,12 +798,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         argument_scope: region::Scope,\n         ast_body: &'tcx hir::Expr<'tcx>,\n     ) -> BlockAnd<()> {\n+        let tcx = self.hir.tcx();\n+        let attrs = tcx.codegen_fn_attrs(fn_def_id);\n+        let naked = attrs.flags.contains(CodegenFnAttrFlags::NAKED);\n+\n         // Allocate locals for the function arguments\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n             let source_info =\n                 SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n+            // Emit function argument debuginfo only for non-naked functions.\n+            // See: https://github.com/rust-lang/rust/issues/42779\n+            if naked {\n+                continue;\n+            }\n+\n             // If this is a simple binding pattern, give debuginfo a nice name.\n             if let Some(arg) = arg_opt {\n                 if let Some(ident) = arg.pat.simple_ident() {\n@@ -815,7 +826,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        let tcx = self.hir.tcx();\n         let tcx_hir = tcx.hir();\n         let hir_typeck_results = self.hir.typeck_results();\n "}, {"sha": "758c6c4da9293c6c807896e9a051342ad78a8b98", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "patch": "@@ -18,7 +18,7 @@ pub fn naked_empty() {\n // CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n@@ -39,7 +39,7 @@ pub fn naked_with_return() -> isize {\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n     a"}, {"sha": "e88a99b322ed56d5f050be1f8a50201d2e1b7fb2", "filename": "src/test/debuginfo/function-arguments-naked.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs?ref=25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5", "patch": "@@ -0,0 +1,40 @@\n+// min-lldb-version: 310\n+\n+// We have to ignore android because of this issue:\n+// https://github.com/rust-lang/rust/issues/74847\n+// ignore-android\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:info args\n+// gdb-check:No arguments.\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:frame variable\n+// lldbg-check:(unsigned long) = 111 (unsigned long) = 222\n+// lldbr-check:(unsigned long) = 111 (unsigned long) = 222\n+// lldb-command:continue\n+\n+\n+#![feature(naked_functions)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+fn main() {\n+    naked(111, 222);\n+}\n+\n+#[naked]\n+fn naked(x: usize, y: usize) {\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}