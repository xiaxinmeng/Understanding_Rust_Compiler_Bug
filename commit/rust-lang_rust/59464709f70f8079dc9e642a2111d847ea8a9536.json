{"sha": "59464709f70f8079dc9e642a2111d847ea8a9536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDY0NzA5ZjcwZjgwNzlkYzllNjQyYTIxMTFkODQ3ZWE4YTk1MzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-17T17:13:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:58:39Z"}, "message": "resolve: Refactor away `DeterminacyExt`", "tree": {"sha": "5d11a57742bd2ec2d27570995053c7160be957d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d11a57742bd2ec2d27570995053c7160be957d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59464709f70f8079dc9e642a2111d847ea8a9536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59464709f70f8079dc9e642a2111d847ea8a9536", "html_url": "https://github.com/rust-lang/rust/commit/59464709f70f8079dc9e642a2111d847ea8a9536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59464709f70f8079dc9e642a2111d847ea8a9536/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "html_url": "https://github.com/rust-lang/rust/commit/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "a9044b90b00b59728fe40e9f8578eafc43af1087", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=59464709f70f8079dc9e642a2111d847ea8a9536", "patch": "@@ -97,19 +97,9 @@ fn is_known_tool(name: Name) -> bool {\n     [\"clippy\", \"rustfmt\"].contains(&&*name.as_str())\n }\n \n-enum DeterminacyExt {\n-    Determined,\n-    Undetermined,\n-    WeakUndetermined,\n-}\n-\n-impl DeterminacyExt {\n-    fn to_determinacy(self) -> Determinacy {\n-        match self {\n-            DeterminacyExt::Determined => Determined,\n-            DeterminacyExt::Undetermined | DeterminacyExt::WeakUndetermined => Undetermined,\n-        }\n-    }\n+enum Weak {\n+    Yes,\n+    No,\n }\n \n /// A free importable items suggested in case of resolution failure.\n@@ -2223,7 +2213,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n         let result = self.resolve_ident_in_module_unadjusted_ext(\n             module, ident, ns, parent_scope, false, record_used, path_span,\n-        ).map_err(DeterminacyExt::to_determinacy);\n+        ).map_err(|(determinacy, _)| determinacy);\n         self.current_module = orig_current_module;\n         result\n     }"}, {"sha": "0ea0ff16347ffb95192006f62152b0be4d696d4e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=59464709f70f8079dc9e642a2111d847ea8a9536", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use {CrateLint, DeterminacyExt, Resolver, ResolutionError};\n+use {CrateLint, Resolver, ResolutionError, Weak};\n use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, ToNameBinding};\n use {is_known_tool, names_to_string, resolve_error};\n use ModuleOrUniformRoot;\n@@ -688,10 +688,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                             };\n                             Ok((binding, Flags::MODULE | misc_flags))\n                         }\n-                        Err(DeterminacyExt::Undetermined) =>\n+                        Err((Determinacy::Undetermined, Weak::No)) =>\n                             return Err(Determinacy::determined(force)),\n-                        Err(DeterminacyExt::WeakUndetermined) => Err(Determinacy::Undetermined),\n-                        Err(DeterminacyExt::Determined) => Err(Determinacy::Determined),\n+                        Err((Determinacy::Undetermined, Weak::Yes)) =>\n+                            Err(Determinacy::Undetermined),\n+                        Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                     }\n                 }\n                 WhereToResolve::MacroUsePrelude => {"}, {"sha": "6dad1426ea363a86900b903a2070d3db984547cb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59464709f70f8079dc9e642a2111d847ea8a9536/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=59464709f70f8079dc9e642a2111d847ea8a9536", "patch": "@@ -11,7 +11,7 @@\n use self::ImportDirectiveSubclass::*;\n \n use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use {CrateLint, DeterminacyExt, Module, ModuleOrUniformRoot, PerNS, UniformRootKind};\n+use {CrateLint, Module, ModuleOrUniformRoot, PerNS, UniformRootKind, Weak};\n use Namespace::{self, TypeNS, MacroNS};\n use {NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n use {Resolver, Segment};\n@@ -145,7 +145,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         self.resolve_ident_in_module_unadjusted_ext(\n             module, ident, ns, None, false, record_used, path_span\n-        ).map_err(DeterminacyExt::to_determinacy)\n+        ).map_err(|(determinacy, _)| determinacy)\n     }\n \n     /// Attempts to resolve `ident` in namespaces `ns` of `module`.\n@@ -159,7 +159,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         restricted_shadowing: bool,\n         record_used: bool,\n         path_span: Span,\n-    ) -> Result<&'a NameBinding<'a>, DeterminacyExt> {\n+    ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let module = match module {\n             ModuleOrUniformRoot::Module(module) => module,\n             ModuleOrUniformRoot::UniformRoot(uniform_root_kind) => {\n@@ -171,9 +171,9 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                             Ok(binding)\n                         } else if !self.graph_root.unresolved_invocations.borrow().is_empty() {\n                             // Macro-expanded `extern crate` items can add names to extern prelude.\n-                            Err(DeterminacyExt::Undetermined)\n+                            Err((Undetermined, Weak::No))\n                         } else {\n-                            Err(DeterminacyExt::Determined)\n+                            Err((Determined, Weak::No))\n                         }\n                     }\n                     UniformRootKind::CurrentScope => {\n@@ -198,10 +198,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                         let binding = self.early_resolve_ident_in_lexical_scope(\n                             ident, ns, None, true, parent_scope, record_used, record_used, path_span\n                         );\n-                        return binding.map_err(|determinacy| match determinacy {\n-                            Determined => DeterminacyExt::Determined,\n-                            Undetermined => DeterminacyExt::Undetermined,\n-                        });\n+                        return binding.map_err(|determinacy| (determinacy, Weak::No));\n                     }\n                 }\n             }\n@@ -211,8 +208,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n \n         let resolution = self.resolution(module, ident, ns)\n             .try_borrow_mut()\n-            // This happens when there is a cycle of imports.\n-            .map_err(|_| DeterminacyExt::Determined)?;\n+            .map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n         if let Some(binding) = resolution.binding {\n             if !restricted_shadowing && binding.expansion != Mark::root() {\n@@ -226,13 +222,13 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             // `extern crate` are always usable for backwards compatibility, see issue #37020,\n             // remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`.\n             let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();\n-            if usable { Ok(binding) } else { Err(DeterminacyExt::Determined) }\n+            if usable { Ok(binding) } else { Err((Determined, Weak::No)) }\n         };\n \n         if record_used {\n-            return resolution.binding.ok_or(DeterminacyExt::Determined).and_then(|binding| {\n+            return resolution.binding.ok_or((Determined, Weak::No)).and_then(|binding| {\n                 if self.last_import_segment && check_usable(self, binding).is_err() {\n-                    Err(DeterminacyExt::Determined)\n+                    Err((Determined, Weak::No))\n                 } else {\n                     self.record_use(ident, ns, binding, restricted_shadowing);\n \n@@ -279,7 +275,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 continue;\n             }\n             let module = unwrap_or!(single_import.imported_module.get(),\n-                                    return Err(DeterminacyExt::Undetermined));\n+                                    return Err((Undetermined, Weak::No)));\n             let ident = match single_import.subclass {\n                 SingleImport { source, .. } => source,\n                 _ => unreachable!(),\n@@ -290,7 +286,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 Ok(binding) if !self.is_accessible_from(\n                     binding.vis, single_import.parent_scope.module\n                 ) => continue,\n-                Ok(_) | Err(Undetermined) => return Err(DeterminacyExt::Undetermined),\n+                Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::No)),\n             }\n         }\n \n@@ -311,7 +307,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n                 return check_usable(self, binding);\n             } else {\n-                return Err(DeterminacyExt::Undetermined);\n+                return Err((Undetermined, Weak::No));\n             }\n         }\n \n@@ -321,12 +317,12 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         // expansion. With restricted shadowing names from globs and macro expansions cannot\n         // shadow names from outer scopes, so we can freely fallback from module search to search\n         // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer\n-        // scopes we return `WeakUndetermined` instead of full `Undetermined`.\n+        // scopes we return `Undetermined` with `Weak::Yes`.\n \n         // Check if one of unexpanded macros can still define the name,\n         // if it can then our \"no resolution\" result is not determined and can be invalidated.\n         if unexpanded_macros {\n-            return Err(DeterminacyExt::WeakUndetermined);\n+            return Err((Undetermined, Weak::Yes));\n         }\n \n         // Check if one of glob imports can still define the name,\n@@ -338,7 +334,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             let module = match glob_import.imported_module.get() {\n                 Some(ModuleOrUniformRoot::Module(module)) => module,\n                 Some(ModuleOrUniformRoot::UniformRoot(_)) => continue,\n-                None => return Err(DeterminacyExt::WeakUndetermined),\n+                None => return Err((Undetermined, Weak::Yes)),\n             };\n             let (orig_current_module, mut ident) = (self.current_module, ident.modern());\n             match ident.span.glob_adjust(module.expansion, glob_import.span.ctxt().modern()) {\n@@ -360,12 +356,12 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 Ok(binding) if !self.is_accessible_from(\n                     binding.vis, glob_import.parent_scope.module\n                 ) => continue,\n-                Ok(_) | Err(Undetermined) => return Err(DeterminacyExt::WeakUndetermined),\n+                Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),\n             }\n         }\n \n         // No resolution and no one else can define the name - determinate error.\n-        Err(DeterminacyExt::Determined)\n+        Err((Determined, Weak::No))\n     }\n \n     // Add an import directive to the current module."}]}