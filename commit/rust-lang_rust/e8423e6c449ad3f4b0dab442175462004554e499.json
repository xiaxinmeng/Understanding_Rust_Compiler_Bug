{"sha": "e8423e6c449ad3f4b0dab442175462004554e499", "node_id": "C_kwDOAAsO6NoAKGU4NDIzZTZjNDQ5YWQzZjRiMGRhYjQ0MjE3NTQ2MjAwNDU1NGU0OTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-19T06:13:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-19T06:13:29Z"}, "message": "Auto merge of #91033 - JohnTitor:rollup-sr9zg6o, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89258 (Make char conversion functions unstably const)\n - #90578 (add const generics test)\n - #90633 (Refactor single variant `Candidate` enum into a struct)\n - #90800 (bootstap: create .cargo/config only if not present)\n - #90942 (windows: Return the \"Not Found\" error when a path is empty)\n - #90947 (Move some tests to more reasonable directories - 9.5)\n - #90961 (Suggest removal of arguments for unit variant, not replacement)\n - #90990 (Arenas cleanup)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d26b9b610d98ea97a5396fb952b8df2269c58750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26b9b610d98ea97a5396fb952b8df2269c58750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8423e6c449ad3f4b0dab442175462004554e499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8423e6c449ad3f4b0dab442175462004554e499", "html_url": "https://github.com/rust-lang/rust/commit/e8423e6c449ad3f4b0dab442175462004554e499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8423e6c449ad3f4b0dab442175462004554e499/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "html_url": "https://github.com/rust-lang/rust/commit/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb"}, {"sha": "1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "html_url": "https://github.com/rust-lang/rust/commit/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5"}], "stats": {"total": 738, "additions": 331, "deletions": 407}, "files": [{"sha": "6f9ecb9cd21e094afbc71354b6dcac6e1565a517", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -111,7 +111,7 @@ impl<T> Default for TypedArena<T> {\n             // alloc() will trigger a grow().\n             ptr: Cell::new(ptr::null_mut()),\n             end: Cell::new(ptr::null_mut()),\n-            chunks: RefCell::new(vec![]),\n+            chunks: Default::default(),\n             _own: PhantomData,\n         }\n     }\n@@ -325,13 +325,17 @@ unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n \n unsafe impl<T: Send> Send for TypedArena<T> {}\n \n+/// An arena that can hold objects of multiple different types that impl `Copy`\n+/// and/or satisfy `!mem::needs_drop`.\n pub struct DroplessArena {\n     /// A pointer to the start of the free space.\n     start: Cell<*mut u8>,\n \n     /// A pointer to the end of free space.\n     ///\n-    /// The allocation proceeds from the end of the chunk towards the start.\n+    /// The allocation proceeds downwards from the end of the chunk towards the\n+    /// start. (This is slightly simpler and faster than allocating upwards,\n+    /// see <https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html>.)\n     /// When this pointer crosses the start pointer, a new chunk is allocated.\n     end: Cell<*mut u8>,\n \n@@ -516,10 +520,14 @@ impl DroplessArena {\n     }\n }\n \n+// Declare an `Arena` containing one dropless arena and many typed arenas (the\n+// types of the typed arenas are specified by the arguments). The dropless\n+// arena will be used for any types that impl `Copy`, and also for any of the\n+// specified types that satisfy `!mem::needs_drop`.\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     #[derive(Default)]\n-    pub struct Arena<$tcx> {\n+    pub struct Arena<'tcx> {\n         pub dropless: $crate::DroplessArena,\n         $($name: $crate::TypedArena<$ty>,)*\n     }\n@@ -532,6 +540,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n         ) -> &'a mut [Self];\n     }\n \n+    // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n     impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n         #[inline]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n@@ -544,12 +553,11 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n         ) -> &'a mut [Self] {\n             arena.dropless.alloc_from_iter(iter)\n         }\n-\n     }\n     $(\n-        impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n+        impl<'tcx> ArenaAllocatable<'tcx, $ty> for $ty {\n             #[inline]\n-            fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n                 if !::std::mem::needs_drop::<Self>() {\n                     arena.dropless.alloc(self)\n                 } else {\n@@ -559,7 +567,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n \n             #[inline]\n             fn allocate_from_iter<'a>(\n-                arena: &'a Arena<$tcx>,\n+                arena: &'a Arena<'tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n             ) -> &'a mut [Self] {\n                 if !::std::mem::needs_drop::<Self>() {\n@@ -577,6 +585,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n             value.allocate_on(self)\n         }\n \n+        // Any type that impls `Copy` can have slices be arena-allocated in the `DroplessArena`.\n         #[inline]\n         pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n             if value.is_empty() {"}, {"sha": "2b3a538772ecbc62d57ae5cea8eb7e34665a9e46", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -84,7 +84,7 @@ mod item;\n mod pat;\n mod path;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena, 'tcx);\n+rustc_hir::arena_types!(rustc_arena::declare_arena);\n \n struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes."}, {"sha": "a92b20f5cb520ae147c0ddfd3be48fc532738870", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 82, "deletions": 101, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -93,17 +93,8 @@ impl TempState {\n /// returned value in a promoted MIR, unless it's a subset\n /// of a larger candidate.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum Candidate {\n-    /// Borrow of a constant temporary, candidate for lifetime extension.\n-    Ref(Location),\n-}\n-\n-impl Candidate {\n-    fn source_info(&self, body: &Body<'_>) -> SourceInfo {\n-        match self {\n-            Candidate::Ref(location) => *body.source_info(*location),\n-        }\n-    }\n+pub struct Candidate {\n+    location: Location,\n }\n \n struct Collector<'a, 'tcx> {\n@@ -167,7 +158,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n         match *rvalue {\n             Rvalue::Ref(..) => {\n-                self.candidates.push(Candidate::Ref(location));\n+                self.candidates.push(Candidate { location });\n             }\n             _ => {}\n         }\n@@ -209,36 +200,33 @@ struct Unpromotable;\n \n impl<'tcx> Validator<'_, 'tcx> {\n     fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {\n-        match candidate {\n-            Candidate::Ref(loc) => {\n-                let statement = &self.body[loc.block].statements[loc.statement_index];\n-                match &statement.kind {\n-                    StatementKind::Assign(box (_, Rvalue::Ref(_, kind, place))) => {\n-                        // We can only promote interior borrows of promotable temps (non-temps\n-                        // don't get promoted anyway).\n-                        self.validate_local(place.local)?;\n-\n-                        // The reference operation itself must be promotable.\n-                        // (Needs to come after `validate_local` to avoid ICEs.)\n-                        self.validate_ref(*kind, place)?;\n-\n-                        // We do not check all the projections (they do not get promoted anyway),\n-                        // but we do stay away from promoting anything involving a dereference.\n-                        if place.projection.contains(&ProjectionElem::Deref) {\n-                            return Err(Unpromotable);\n-                        }\n+        let loc = candidate.location;\n+        let statement = &self.body[loc.block].statements[loc.statement_index];\n+        match &statement.kind {\n+            StatementKind::Assign(box (_, Rvalue::Ref(_, kind, place))) => {\n+                // We can only promote interior borrows of promotable temps (non-temps\n+                // don't get promoted anyway).\n+                self.validate_local(place.local)?;\n+\n+                // The reference operation itself must be promotable.\n+                // (Needs to come after `validate_local` to avoid ICEs.)\n+                self.validate_ref(*kind, place)?;\n \n-                        // We cannot promote things that need dropping, since the promoted value\n-                        // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n-                            return Err(Unpromotable);\n-                        }\n+                // We do not check all the projections (they do not get promoted anyway),\n+                // but we do stay away from promoting anything involving a dereference.\n+                if place.projection.contains(&ProjectionElem::Deref) {\n+                    return Err(Unpromotable);\n+                }\n \n-                        Ok(())\n-                    }\n-                    _ => bug!(),\n+                // We cannot promote things that need dropping, since the promoted value\n+                // would not get dropped.\n+                if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n+                    return Err(Unpromotable);\n                 }\n+\n+                Ok(())\n             }\n+            _ => bug!(),\n         }\n     }\n \n@@ -871,58 +859,55 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 }))\n             };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n-            match candidate {\n-                Candidate::Ref(loc) => {\n-                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n-                    match statement.kind {\n-                        StatementKind::Assign(box (\n-                            _,\n-                            Rvalue::Ref(ref mut region, borrow_kind, ref mut place),\n-                        )) => {\n-                            // Use the underlying local for this (necessarily interior) borrow.\n-                            let ty = local_decls.local_decls()[place.local].ty;\n-                            let span = statement.source_info.span;\n-\n-                            let ref_ty = tcx.mk_ref(\n-                                tcx.lifetimes.re_erased,\n-                                ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },\n-                            );\n-\n-                            *region = tcx.lifetimes.re_erased;\n-\n-                            let mut projection = vec![PlaceElem::Deref];\n-                            projection.extend(place.projection);\n-                            place.projection = tcx.intern_place_elems(&projection);\n-\n-                            // Create a temp to hold the promoted reference.\n-                            // This is because `*r` requires `r` to be a local,\n-                            // otherwise we would use the `promoted` directly.\n-                            let mut promoted_ref = LocalDecl::new(ref_ty, span);\n-                            promoted_ref.source_info = statement.source_info;\n-                            let promoted_ref = local_decls.push(promoted_ref);\n-                            assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n-\n-                            let promoted_ref_statement = Statement {\n-                                source_info: statement.source_info,\n-                                kind: StatementKind::Assign(Box::new((\n-                                    Place::from(promoted_ref),\n-                                    Rvalue::Use(promoted_operand(ref_ty, span)),\n-                                ))),\n-                            };\n-                            self.extra_statements.push((loc, promoted_ref_statement));\n-\n-                            Rvalue::Ref(\n-                                tcx.lifetimes.re_erased,\n-                                borrow_kind,\n-                                Place {\n-                                    local: mem::replace(&mut place.local, promoted_ref),\n-                                    projection: List::empty(),\n-                                },\n-                            )\n-                        }\n-                        _ => bug!(),\n-                    }\n+            let loc = candidate.location;\n+            let statement = &mut blocks[loc.block].statements[loc.statement_index];\n+            match statement.kind {\n+                StatementKind::Assign(box (\n+                    _,\n+                    Rvalue::Ref(ref mut region, borrow_kind, ref mut place),\n+                )) => {\n+                    // Use the underlying local for this (necessarily interior) borrow.\n+                    let ty = local_decls.local_decls()[place.local].ty;\n+                    let span = statement.source_info.span;\n+\n+                    let ref_ty = tcx.mk_ref(\n+                        tcx.lifetimes.re_erased,\n+                        ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },\n+                    );\n+\n+                    *region = tcx.lifetimes.re_erased;\n+\n+                    let mut projection = vec![PlaceElem::Deref];\n+                    projection.extend(place.projection);\n+                    place.projection = tcx.intern_place_elems(&projection);\n+\n+                    // Create a temp to hold the promoted reference.\n+                    // This is because `*r` requires `r` to be a local,\n+                    // otherwise we would use the `promoted` directly.\n+                    let mut promoted_ref = LocalDecl::new(ref_ty, span);\n+                    promoted_ref.source_info = statement.source_info;\n+                    let promoted_ref = local_decls.push(promoted_ref);\n+                    assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n+\n+                    let promoted_ref_statement = Statement {\n+                        source_info: statement.source_info,\n+                        kind: StatementKind::Assign(Box::new((\n+                            Place::from(promoted_ref),\n+                            Rvalue::Use(promoted_operand(ref_ty, span)),\n+                        ))),\n+                    };\n+                    self.extra_statements.push((loc, promoted_ref_statement));\n+\n+                    Rvalue::Ref(\n+                        tcx.lifetimes.re_erased,\n+                        borrow_kind,\n+                        Place {\n+                            local: mem::replace(&mut place.local, promoted_ref),\n+                            projection: List::empty(),\n+                        },\n+                    )\n                 }\n+                _ => bug!(),\n             }\n         };\n \n@@ -964,25 +949,21 @@ pub fn promote_candidates<'tcx>(\n \n     let mut extra_statements = vec![];\n     for candidate in candidates.into_iter().rev() {\n-        match candidate {\n-            Candidate::Ref(Location { block, statement_index }) => {\n-                if let StatementKind::Assign(box (place, _)) =\n-                    &body[block].statements[statement_index].kind\n-                {\n-                    if let Some(local) = place.as_local() {\n-                        if temps[local] == TempState::PromotedOut {\n-                            // Already promoted.\n-                            continue;\n-                        }\n-                    }\n+        let Location { block, statement_index } = candidate.location;\n+        if let StatementKind::Assign(box (place, _)) = &body[block].statements[statement_index].kind\n+        {\n+            if let Some(local) = place.as_local() {\n+                if temps[local] == TempState::PromotedOut {\n+                    // Already promoted.\n+                    continue;\n                 }\n             }\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain.\n         let initial_locals = iter::once(LocalDecl::new(tcx.types.never, body.span)).collect();\n \n-        let mut scope = body.source_scopes[candidate.source_info(body).scope].clone();\n+        let mut scope = body.source_scopes[body.source_info(candidate.location).scope].clone();\n         scope.parent_scope = None;\n \n         let promoted = Body::new("}, {"sha": "f19ca497d8bf257f4a8853302366a54ad6c70dc7", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -1,52 +1,52 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]`,\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             // HIR types\n-            [] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n+            [] hir_krate: rustc_hir::Crate<'tcx>,\n+            [] arm: rustc_hir::Arm<'tcx>,\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [] body: rustc_hir::Body<$tcx>,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] expr_field: rustc_hir::ExprField<$tcx>,\n-            [] pat_field: rustc_hir::PatField<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] block: rustc_hir::Block<'tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n+            [] body: rustc_hir::Body<'tcx>,\n+            [] generic_arg: rustc_hir::GenericArg<'tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<'tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<'tcx>,\n+            [] generic_param: rustc_hir::GenericParam<'tcx>,\n+            [] expr: rustc_hir::Expr<'tcx>,\n+            [] expr_field: rustc_hir::ExprField<'tcx>,\n+            [] pat_field: rustc_hir::PatField<'tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<'tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<'tcx>,\n             [] foreign_item_ref: rustc_hir::ForeignItemRef,\n-            [] impl_item: rustc_hir::ImplItem<$tcx>,\n+            [] impl_item: rustc_hir::ImplItem<'tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef,\n-            [] item: rustc_hir::Item<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [] mod_: rustc_hir::Mod<$tcx>,\n-            [] owner_info: rustc_hir::OwnerInfo<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] field_def: rustc_hir::FieldDef<$tcx>,\n-            [] trait_item: rustc_hir::TraitItem<$tcx>,\n+            [] item: rustc_hir::Item<'tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<'tcx>,\n+            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<'tcx>,\n+            [] local: rustc_hir::Local<'tcx>,\n+            [] mod_: rustc_hir::Mod<'tcx>,\n+            [] owner_info: rustc_hir::OwnerInfo<'tcx>,\n+            [] param: rustc_hir::Param<'tcx>,\n+            [] pat: rustc_hir::Pat<'tcx>,\n+            [] path: rustc_hir::Path<'tcx>,\n+            [] path_segment: rustc_hir::PathSegment<'tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<'tcx>,\n+            [] qpath: rustc_hir::QPath<'tcx>,\n+            [] stmt: rustc_hir::Stmt<'tcx>,\n+            [] field_def: rustc_hir::FieldDef<'tcx>,\n+            [] trait_item: rustc_hir::TraitItem<'tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n-        ], $tcx);\n+            [] ty: rustc_hir::Ty<'tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<'tcx>,\n+            [] variant: rustc_hir::Variant<'tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<'tcx>,\n+        ]);\n     )\n }"}, {"sha": "ee2e190e7cd44b7e698956f795101075a0f2423c", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -1,33 +1,33 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             [] layout: rustc_target::abi::Layout,\n-            [] fn_abi: rustc_target::abi::call::FnAbi<$tcx, rustc_middle::ty::Ty<$tcx>>,\n+            [] fn_abi: rustc_target::abi::call::FnAbi<'tcx, rustc_middle::ty::Ty<'tcx>>,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n-            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<$tcx>>,\n-            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n-            [decode] mir: rustc_middle::mir::Body<$tcx>,\n+            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<'tcx>>,\n+            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<'tcx>>,\n+            [decode] mir: rustc_middle::mir::Body<'tcx>,\n             [] steal_promoted:\n                 rustc_data_structures::steal::Steal<\n                     rustc_index::vec::IndexVec<\n                         rustc_middle::mir::Promoted,\n-                        rustc_middle::mir::Body<$tcx>\n+                        rustc_middle::mir::Body<'tcx>\n                     >\n                 >,\n             [decode] promoted:\n                 rustc_index::vec::IndexVec<\n                     rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::Body<$tcx>\n+                    rustc_middle::mir::Body<'tcx>\n                 >,\n-            [decode] typeck_results: rustc_middle::ty::TypeckResults<$tcx>,\n+            [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n-                rustc_middle::mir::BorrowCheckResult<$tcx>,\n+                rustc_middle::mir::BorrowCheckResult<'tcx>,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n@@ -78,14 +78,14 @@ macro_rules! arena_types {\n             [] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n-            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n             [] attribute: rustc_ast::Attribute,\n             [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<$tcx>,\n-            [] predicates: rustc_middle::ty::PredicateInner<$tcx>,\n+            [] tys: rustc_middle::ty::TyS<'tcx>,\n+            [] predicates: rustc_middle::ty::PredicateInner<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena\n@@ -97,8 +97,8 @@ macro_rules! arena_types {\n             [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct,\n-        ], $tcx);\n+        ]);\n     )\n }\n \n-arena_types!(rustc_arena::declare_arena, 'tcx);\n+arena_types!(rustc_arena::declare_arena);"}, {"sha": "3f2b987b1e6307f1f8ad224cccc151487cbb02d1", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -417,17 +417,17 @@ macro_rules! __impl_decoder_methods {\n macro_rules! impl_arena_allocatable_decoder {\n     ([]$args:tt) => {};\n     ([decode $(, $attrs:ident)*]\n-     [[$name:ident: $ty:ty], $tcx:lifetime]) => {\n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for $ty {\n+     [$name:ident: $ty:ty]) => {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for $ty {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable(decoder)\n             }\n         }\n \n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for [$ty] {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [$ty] {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable_slice(decoder)\n             }\n         }\n@@ -438,15 +438,15 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([$($a:tt $name:ident: $ty:ty,)*]) => {\n         $(\n-            impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n+            impl_arena_allocatable_decoder!($a [$name: $ty]);\n         )*\n     }\n }\n \n-rustc_hir::arena_types!(impl_arena_allocatable_decoders, 'tcx);\n-arena_types!(impl_arena_allocatable_decoders, 'tcx);\n+rustc_hir::arena_types!(impl_arena_allocatable_decoders);\n+arena_types!(impl_arena_allocatable_decoders);\n \n #[macro_export]\n macro_rules! implement_ty_decoder {"}, {"sha": "635ed93819319e536cfea9c1572d528c9e269c99", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -349,9 +349,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::FnPtr(sig) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;\n+                let mut removal_span = call_expr.span;\n                 if let ty::Adt(adt_def, ..) = t {\n                     if adt_def.is_enum() {\n                         if let hir::ExprKind::Call(expr, _) = call_expr.kind {\n+                            removal_span =\n+                                expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n                             unit_variant =\n                                 self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n                         }\n@@ -379,14 +382,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n \n                 if let Some(ref path) = unit_variant {\n-                    err.span_suggestion(\n-                        call_expr.span,\n+                    err.span_suggestion_verbose(\n+                        removal_span,\n                         &format!(\n-                            \"`{}` is a unit variant, you need to write it \\\n-                                 without the parentheses\",\n+                            \"`{}` is a unit variant, you need to write it without the parentheses\",\n                             path\n                         ),\n-                        path.to_string(),\n+                        String::new(),\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "c4046d7496f71b3238a1f83a2a7f879e734ecd6d", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -51,8 +51,13 @@ use super::MAX;\n #[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_u32(i: u32) -> Option<char> {\n-    char::try_from(i).ok()\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_u32(i: u32) -> Option<char> {\n+    // FIXME: once Result::ok is const fn, use it here\n+    match char_try_from_u32(i) {\n+        Ok(c) => Some(c),\n+        Err(_) => None,\n+    }\n }\n \n /// Converts a `u32` to a `char`, ignoring validity.\n@@ -91,7 +96,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n #[inline]\n #[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n-pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n     if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { unsafe { transmute(i) } }\n }\n@@ -248,18 +254,23 @@ impl FromStr for char {\n     }\n }\n \n+#[inline]\n+const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {\n+    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+        Err(CharTryFromError(()))\n+    } else {\n+        // SAFETY: checked that it's a legal unicode value\n+        Ok(unsafe { transmute(i) })\n+    }\n+}\n+\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n     #[inline]\n     fn try_from(i: u32) -> Result<Self, Self::Error> {\n-        if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n-            Err(CharTryFromError(()))\n-        } else {\n-            // SAFETY: checked that it's a legal unicode value\n-            Ok(unsafe { transmute(i) })\n-        }\n+        char_try_from_u32(i)\n     }\n }\n \n@@ -327,7 +338,8 @@ impl fmt::Display for CharTryFromError {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n     }"}, {"sha": "d5ad0c385c7012f16c666660c51fd071926531ed", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -136,9 +136,10 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_u32(i: u32) -> Option<char> {\n+    pub const fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n     }\n \n@@ -178,9 +179,10 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+    pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n         unsafe { super::convert::from_u32_unchecked(i) }\n     }\n@@ -235,9 +237,10 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+    pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)\n     }\n \n@@ -331,10 +334,11 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    pub fn to_digit(self, radix: u32) -> Option<u32> {\n+    pub const fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // If not a digit, a number greater than radix will be created.\n         let mut digit = (self as u32).wrapping_sub('0' as u32);\n@@ -345,7 +349,8 @@ impl char {\n             // Force the 6th bit to be set to ensure ascii is lower case.\n             digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);\n         }\n-        (digit < radix).then_some(digit)\n+        // FIXME: once then_some is const fn, use it here\n+        if digit < radix { Some(digit) } else { None }\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a"}, {"sha": "4a64e2e2d102dc10171ceadeed49ab6e33db9b73", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_char_convert)]\n #![feature(const_discriminant)]\n #![feature(const_eval_select)]\n #![feature(const_float_bits_conv)]"}, {"sha": "9a8f1e44f1f1cc3b04928d84b4c13361b44117ed", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -1430,4 +1430,8 @@ fn create_dir_long_paths() {\n     // This will fail if the path isn't converted to verbatim.\n     path.push(\"a\");\n     fs::create_dir(&path).unwrap();\n+\n+    // #90940: Ensure an empty path returns the \"Not Found\" error.\n+    let path = Path::new(\"\");\n+    assert_eq!(path.canonicalize().unwrap_err().kind(), crate::io::ErrorKind::NotFound);\n }"}, {"sha": "d0b7d9e7377aac1f9a81f8e99c7370075f217283", "filename": "library/std/src/sys/windows/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -174,8 +174,8 @@ pub(crate) fn maybe_verbatim(path: &Path) -> io::Result<Vec<u16>> {\n     const UNC_PREFIX: &[u16] = &[SEP, SEP, QUERY, SEP, U, N, C, SEP];\n \n     let mut path = to_u16s(path)?;\n-    if path.starts_with(VERBATIM_PREFIX) || path.starts_with(NT_PREFIX) {\n-        // Early return for paths that are already verbatim.\n+    if path.starts_with(VERBATIM_PREFIX) || path.starts_with(NT_PREFIX) || path == &[0] {\n+        // Early return for paths that are already verbatim or empty.\n         return Ok(path);\n     } else if path.len() < LEGACY_MAX_PATH {\n         // Early return if an absolute path is less < 260 UTF-16 code units."}, {"sha": "425c2011b32390bdf4c3900cc873880e597e019c", "filename": "library/std/src/sys/windows/path/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -91,7 +91,6 @@ fn verbatim() {\n     // Make sure opening a drive will work.\n     check(\"Z:\", \"Z:\");\n \n-    // An empty path or a path that contains null are not valid paths.\n-    assert!(maybe_verbatim(Path::new(\"\")).is_err());\n+    // A path that contains null is not a valid path.\n     assert!(maybe_verbatim(Path::new(\"\\0\")).is_err());\n }"}, {"sha": "22f2e405a1e88d29356539b74453b4e71b16c793", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -1119,17 +1119,22 @@ def check_vendored_status(self):\n                     raise Exception(\"{} not found\".format(vendor_dir))\n \n         if self.use_vendored_sources:\n+            config = (\"[source.crates-io]\\n\"\n+                      \"replace-with = 'vendored-sources'\\n\"\n+                      \"registry = 'https://example.com'\\n\"\n+                      \"\\n\"\n+                      \"[source.vendored-sources]\\n\"\n+                      \"directory = '{}/vendor'\\n\"\n+                      .format(self.rust_root))\n             if not os.path.exists('.cargo'):\n                 os.makedirs('.cargo')\n-            with output('.cargo/config') as cargo_config:\n-                cargo_config.write(\n-                    \"[source.crates-io]\\n\"\n-                    \"replace-with = 'vendored-sources'\\n\"\n-                    \"registry = 'https://example.com'\\n\"\n-                    \"\\n\"\n-                    \"[source.vendored-sources]\\n\"\n-                    \"directory = '{}/vendor'\\n\"\n-                    .format(self.rust_root))\n+                with output('.cargo/config') as cargo_config:\n+                    cargo_config.write(config)\n+            else:\n+                print('info: using vendored source, but .cargo/config is already present.')\n+                print('      Reusing the current configuration file. But you may want to '\n+                      'configure vendoring like this:')\n+                print(config)\n         else:\n             if os.path.exists('.cargo'):\n                 shutil.rmtree('.cargo')"}, {"sha": "2649c2eac33db057a8166fa85a4fffb30c6c7e56", "filename": "src/test/ui/array-slice-vec/byte-literals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Farray-slice-vec%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Farray-slice-vec%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbyte-literals.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/byte-literals.rs"}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/attributes/suffixed-literal-meta.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/suffixed-literal-meta.rs"}, {"sha": "5245ffead715321236cc5835899028d9a8fe479d", "filename": "src/test/ui/attributes/suffixed-literal-meta.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fsuffixed-literal-meta.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/suffixed-literal-meta.stderr"}, {"sha": "0d1dcfd8bddb0ea71d95ed424a036074dd818eab", "filename": "src/test/ui/binop/operator-multidispatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Foperator-multidispatch.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/operator-multidispatch.rs"}, {"sha": "6b3abcbc76cc22c8adac58b97611e3df030ad284", "filename": "src/test/ui/binop/operator-overloading.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Foperator-overloading.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/operator-overloading.rs"}, {"sha": "4df96dedbd45be137032e094308cf3c5334ac741", "filename": "src/test/ui/binop/placement-syntax.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/placement-syntax.rs"}, {"sha": "3fdaf4cd0f55d74ef4810c57c4baf7f66ad07b67", "filename": "src/test/ui/binop/placement-syntax.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fplacement-syntax.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/placement-syntax.stderr"}, {"sha": "242a33e8216d8d9024a2ce4e3d4a837f6821c181", "filename": "src/test/ui/borrowck/immut-function-arguments.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/immut-function-arguments.rs"}, {"sha": "7238dd14433ce888cfba8b7b303acd6cec186471", "filename": "src/test/ui/borrowck/immut-function-arguments.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/immut-function-arguments.stderr"}, {"sha": "5b5d86eec2c0eb22fc94918e50155e4c430728b7", "filename": "src/test/ui/borrowck/kindck-implicit-close-over-mut-var.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fborrowck%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fkindck-implicit-close-over-mut-var.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/kindck-implicit-close-over-mut-var.rs"}, {"sha": "f89d1edd6586a015f757d692d38f6c2ce748d446", "filename": "src/test/ui/cfg/crt-static-on-works.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcfg%2Fcrt-static-on-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcfg%2Fcrt-static-on-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcrt-static-on-works.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/crt-static-on-works.rs"}, {"sha": "4e2e400cec02371e3918f73e9d198c55cab66d46", "filename": "src/test/ui/closures/once-move-out-on-heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fclosures%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fclosures%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fonce-move-out-on-heap.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/once-move-out-on-heap.rs"}, {"sha": "8e42976709519fe2ac680a28d2eccc6d21ea06cd", "filename": "src/test/ui/codegen/auxiliary/llvm_pr32379.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fllvm_pr32379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fllvm_pr32379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fllvm_pr32379.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/llvm_pr32379.rs"}, {"sha": "ce905572f2a8cee736a5e33f3e30514097e5bb50", "filename": "src/test/ui/codegen/init-large-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Finit-large-type.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/init-large-type.rs"}, {"sha": "8a1f03241b110b547ae05ffcb1ec031f5235f96f", "filename": "src/test/ui/codegen/llvm-pr32379.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Fllvm-pr32379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcodegen%2Fllvm-pr32379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fllvm-pr32379.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/llvm-pr32379.rs"}, {"sha": "ae500cb15dfdd813d29855954edfdc0e2ec4ccfa", "filename": "src/test/ui/coercion/retslot-cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/retslot-cast.rs"}, {"sha": "798ce1199a9dc24ac41b70f26fc13f00c5f85b43", "filename": "src/test/ui/coercion/retslot-cast.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fretslot-cast.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/retslot-cast.stderr"}, {"sha": "ce0fad104713b64a766b653e1df6065db617e691", "filename": "src/test/ui/const-generics/invariant.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -0,0 +1,26 @@\n+warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n+  --> $DIR/invariant.rs:14:1\n+   |\n+LL | impl SadBee for for<'a> fn(&'a ()) {\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl SadBee for fn(&'static ()) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(&'a ())`\n+   |\n+   = note: `#[warn(coherence_leak_check)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invariant.rs:27:5\n+   |\n+LL |     v\n+   |     ^ one type is more general than the other\n+   |\n+   = note: expected reference `&Foo<fn(&())>`\n+              found reference `&Foo<for<'a> fn(&'a ())>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ee191b65c2c76fdcf8cacc2484993ae5abb090fa", "filename": "src/test/ui/const-generics/invariant.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+use std::marker::PhantomData;\n+\n+trait SadBee {\n+    const ASSOC: usize;\n+}\n+// fn(&'static ())` is a supertype of `for<'a> fn(&'a ())` while\n+// we allow two different impls for these types, leading\n+// to different const eval results.\n+impl SadBee for for<'a> fn(&'a ()) {\n+    const ASSOC: usize = 0;\n+}\n+impl SadBee for fn(&'static ()) {\n+    //~^ WARNING conflicting implementations of trait\n+    //~| WARNING this was previously accepted\n+    const ASSOC: usize = 100;\n+}\n+\n+struct Foo<T: SadBee>([u8; <T as SadBee>::ASSOC], PhantomData<T>)\n+where\n+    [(); <T as SadBee>::ASSOC]: ;\n+\n+fn covariant(\n+    v: &'static Foo<for<'a> fn(&'a ())>\n+) -> &'static Foo<fn(&'static ())> {\n+    v //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    let y = covariant(&Foo([], PhantomData));\n+    println!(\"{:?}\", y.0);\n+}"}, {"sha": "318c885e6a6bb8962d1b4d41cbfd58506c7381e6", "filename": "src/test/ui/const-generics/invariant.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -0,0 +1,26 @@\n+warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n+  --> $DIR/invariant.rs:14:1\n+   |\n+LL | impl SadBee for for<'a> fn(&'a ()) {\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl SadBee for fn(&'static ()) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(&'a ())`\n+   |\n+   = note: `#[warn(coherence_leak_check)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invariant.rs:27:5\n+   |\n+LL |     v\n+   |     ^ one type is more general than the other\n+   |\n+   = note: expected reference `&'static Foo<fn(&'static ())>`\n+              found reference `&'static Foo<for<'a> fn(&'a ())>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "38c717089c46bf1712a8dbea4ee2ef4b0fae9344", "filename": "src/test/ui/dropck/cleanup-arm-conditional.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fdropck%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fdropck%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fcleanup-arm-conditional.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/cleanup-arm-conditional.rs"}, {"sha": "8c3397c951db6d4b35c65150461ceda9868592fe", "filename": "src/test/ui/editions/edition-keywords-2015-2018.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/edition-keywords-2015-2018.rs"}, {"sha": "5043440aa167a3b34450b70f8050fd12fe796c26", "filename": "src/test/ui/editions/edition-keywords-2018-2018.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/edition-keywords-2018-2018.rs"}, {"sha": "81651c5bf6f40c4842a0d8108dcf5c2f5f453205", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -22,8 +22,9 @@ LL |     let e4 = E::Empty4();\n    |\n help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     let e4 = E::Empty4;\n-   |              ~~~~~~~~~\n+LL -     let e4 = E::Empty4();\n+LL +     let e4 = E::Empty4;\n+   | \n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n@@ -43,8 +44,9 @@ LL |     let xe4 = XE::XEmpty4();\n    |\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     let xe4 = XE::XEmpty4;\n-   |               ~~~~~~~~~~~\n+LL -     let xe4 = XE::XEmpty4();\n+LL +     let xe4 = XE::XEmpty4;\n+   | \n \n error: aborting due to 4 previous errors\n "}, {"sha": "a3a90968df704c38e5ccf3e15636de2d09f3e98a", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -11,8 +11,9 @@ LL |     X::Entry();\n    |\n help: `X::Entry` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     X::Entry;\n-   |     ~~~~~~~~\n+LL -     X::Entry();\n+LL +     X::Entry;\n+   | \n \n error[E0618]: expected function, found `i32`\n   --> $DIR/E0618.rs:9:5"}, {"sha": "73ceec6803a9014a96d7599221bfdd4db33ad2d8", "filename": "src/test/ui/export.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,10 +0,0 @@\n-mod foo {\n-    pub fn x(y: isize) { log(debug, y); }\n-    //~^ ERROR cannot find function `log` in this scope\n-    //~| ERROR cannot find value `debug` in this scope\n-    fn z(y: isize) { log(debug, y); }\n-    //~^ ERROR cannot find function `log` in this scope\n-    //~| ERROR cannot find value `debug` in this scope\n-}\n-\n-fn main() { foo::z(10); } //~ ERROR function `z` is private"}, {"sha": "23c29b31c6a8eeb8fb34b6cc073f3b7994e1852f", "filename": "src/test/ui/export.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport.stderr?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,40 +0,0 @@\n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/export.rs:2:26\n-   |\n-LL |     pub fn x(y: isize) { log(debug, y); }\n-   |                          ^^^ not found in this scope\n-\n-error[E0425]: cannot find value `debug` in this scope\n-  --> $DIR/export.rs:2:30\n-   |\n-LL |     pub fn x(y: isize) { log(debug, y); }\n-   |                              ^^^^^ not found in this scope\n-\n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/export.rs:5:22\n-   |\n-LL |     fn z(y: isize) { log(debug, y); }\n-   |                      ^^^ not found in this scope\n-\n-error[E0425]: cannot find value `debug` in this scope\n-  --> $DIR/export.rs:5:26\n-   |\n-LL |     fn z(y: isize) { log(debug, y); }\n-   |                          ^^^^^ not found in this scope\n-\n-error[E0603]: function `z` is private\n-  --> $DIR/export.rs:10:18\n-   |\n-LL | fn main() { foo::z(10); }\n-   |                  ^ private function\n-   |\n-note: the function `z` is defined here\n-  --> $DIR/export.rs:5:5\n-   |\n-LL |     fn z(y: isize) { log(debug, y); }\n-   |     ^^^^^^^^^^^^^^\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0425, E0603.\n-For more information about an error, try `rustc --explain E0425`."}, {"sha": "54bcbb328b038a1ec762fa1399608b0986ae0c42", "filename": "src/test/ui/expr-block-slot.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexpr-block-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fexpr-block-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-slot.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// Regression test for issue #377\n-\n-\n-struct A { a: isize }\n-struct V { v: isize }\n-\n-pub fn main() {\n-    let a = { let b = A {a: 3}; b };\n-    assert_eq!(a.a, 3);\n-    let c = { let d = V {v: 3}; d };\n-    assert_eq!(c.v, 3);\n-}"}, {"sha": "7fc73c76cc92a7448f9685fb00476460382de1ab", "filename": "src/test/ui/extern/auxiliary/no-mangle-associated-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fno-mangle-associated-fn.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/no-mangle-associated-fn.rs"}, {"sha": "ecd44abbf264c23e5a5e4673ad80889fd4ca849d", "filename": "src/test/ui/extern/no-mangle-associated-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fextern%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fextern%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fno-mangle-associated-fn.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-mangle-associated-fn.rs"}, {"sha": "5b83e2620d8442f3bccfb9bb2d692725df1136f6", "filename": "src/test/ui/fn/fun-call-variants.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffn%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffn%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffun-call-variants.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/fun-call-variants.rs"}, {"sha": "26769b30dd5f0ee3fe1fe6e9b9cc4c7e4308534b", "filename": "src/test/ui/for-loop-while/break-outside-loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/break-outside-loop.rs"}, {"sha": "287bf9af62e49ca169b4d56c17eb00d24077ca20", "filename": "src/test/ui/for-loop-while/break-outside-loop.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/break-outside-loop.stderr"}, {"sha": "6064e6ab00235f368f4003c2217c293a04c1c481", "filename": "src/test/ui/for-loop-while/break-while-condition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/break-while-condition.rs"}, {"sha": "6960c4fd8673537f30dd5ffe960a25034a5ea4a4", "filename": "src/test/ui/for-loop-while/break-while-condition.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/break-while-condition.stderr"}, {"sha": "e5ed09c600bf9618d0d04567c8ed983738423879", "filename": "src/test/ui/hygiene/thread-local-not-in-prelude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fhygiene%2Fthread-local-not-in-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fhygiene%2Fthread-local-not-in-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fthread-local-not-in-prelude.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/thread-local-not-in-prelude.rs"}, {"sha": "96b5131674c757ff2e76ee611232f950ebea0e65", "filename": "src/test/ui/imports/absolute-paths-in-nested-use-groups.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/absolute-paths-in-nested-use-groups.rs"}, {"sha": "e41590ac45eed7bc4f1f0addb7a1bf37212993f1", "filename": "src/test/ui/imports/absolute-paths-in-nested-use-groups.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fabsolute-paths-in-nested-use-groups.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/absolute-paths-in-nested-use-groups.stderr"}, {"sha": "639ab1a0f3acd4c40c5ab0ea2dbc61fade2a711a", "filename": "src/test/ui/imports/reexport-star.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Freexport-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fimports%2Freexport-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexport-star.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/reexport-star.rs"}, {"sha": "9b629838ffdf6d41a06d2b279585f530a810932c", "filename": "src/test/ui/inference/newlambdas-ret-infer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/newlambdas-ret-infer.rs"}, {"sha": "abe31a05f2260953c43630a94b3da293b963315c", "filename": "src/test/ui/inference/newlambdas-ret-infer2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fnewlambdas-ret-infer2.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/newlambdas-ret-infer2.rs"}, {"sha": "f07c041717f33b04e27a7b8a8f124d7abcb55241", "filename": "src/test/ui/inference/range-type-infer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Frange-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Frange-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Frange-type-infer.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/range-type-infer.rs"}, {"sha": "849adfd53686b821615a3b113cd9a5c38959aa10", "filename": "src/test/ui/inference/tutorial-suffix-inference-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/tutorial-suffix-inference-test.rs"}, {"sha": "fbfbffbd24e2ff79892d16733d827015a408355a", "filename": "src/test/ui/inference/tutorial-suffix-inference-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/tutorial-suffix-inference-test.stderr"}, {"sha": "a3d6916cbf76085cae19df64fe314ef457fcd434", "filename": "src/test/ui/inference/type-infer-generalize-ty-var.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftype-infer-generalize-ty-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Finference%2Ftype-infer-generalize-ty-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ftype-infer-generalize-ty-var.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/type-infer-generalize-ty-var.rs"}, {"sha": "322f726156d0c6e91e23f938c41c1ec6e91c4f21", "filename": "src/test/ui/leak-unique-as-tydesc.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fleak-unique-as-tydesc.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,9 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-\n-fn leaky<T>(_t: T) { }\n-\n-pub fn main() {\n-    let x = Box::new(10);\n-    leaky::<Box<isize>>(x);\n-}"}, {"sha": "0d927117d81d363efd81733e169875fd1b6deca4", "filename": "src/test/ui/linkage-attr/auxiliary/link-cfg-works-transitive-dylib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/link-cfg-works-transitive-dylib.rs"}, {"sha": "0a296f0b2ef4c7490cdf61e6e10ccb2ce03cbfd5", "filename": "src/test/ui/linkage-attr/auxiliary/link-cfg-works-transitive-rlib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/link-cfg-works-transitive-rlib.rs"}, {"sha": "254091ff2508cbe2c58baa4fd72686d32fdcaed5", "filename": "src/test/ui/linkage-attr/link-cfg-works.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Flink-cfg-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flinkage-attr%2Flink-cfg-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-cfg-works.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/link-cfg-works.rs"}, {"sha": "461b923ccd47d881d766a276abb881419e3682c3", "filename": "src/test/ui/lint/lint-cap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flint%2Flint-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Flint%2Flint-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-cap.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/lint-cap.rs"}, {"sha": "b463f4368d11195c3a2ec36cbb531b6f22c4fa2f", "filename": "src/test/ui/liveness/liveness-assign-imm-local-after-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign-imm-local-after-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign-imm-local-after-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign-imm-local-after-ret.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/liveness-assign-imm-local-after-ret.rs"}, {"sha": "53e9ea9a5775b6efb0b300fcf8a83bdc8174b24c", "filename": "src/test/ui/match/match-on-negative-integer-ranges.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmatch%2Fmatch-on-negative-integer-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmatch%2Fmatch-on-negative-integer-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-on-negative-integer-ranges.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/match-on-negative-integer-ranges.rs"}, {"sha": "1e99faaded4efce4187a4262b4da2b1fe91506fe", "filename": "src/test/ui/mir/issue-73914.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmir%2Fissue-73914.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmir%2Fissue-73914.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-73914.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/issue-73914.rs"}, {"sha": "21df464d5e4500db8972eacda01ab1d94d1fa059", "filename": "src/test/ui/mismatched_types/assignment-operator-unimplemented.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/assignment-operator-unimplemented.rs"}, {"sha": "73c9f86e0022088e63e56a288523330ebe0a89ae", "filename": "src/test/ui/mismatched_types/assignment-operator-unimplemented.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/assignment-operator-unimplemented.stderr"}, {"sha": "34079b61e67b44a2604729603b17883a365c6344", "filename": "src/test/ui/mismatched_types/float-literal-inference-restrictions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/float-literal-inference-restrictions.rs"}, {"sha": "454373c322e9b15367f7dc67552e0643b4285dd3", "filename": "src/test/ui/mismatched_types/float-literal-inference-restrictions.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffloat-literal-inference-restrictions.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/float-literal-inference-restrictions.stderr"}, {"sha": "8ee75b2fef11bd45499d6a99819bb56c7fc67fc2", "filename": "src/test/ui/newtype-temporary.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fnewtype-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fnewtype-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnewtype-temporary.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-\n-#[derive(PartialEq, Debug)]\n-struct Foo(usize);\n-\n-fn foo() -> Foo {\n-    Foo(42)\n-}\n-\n-pub fn main() {\n-    assert_eq!(foo(), Foo(42));\n-}"}, {"sha": "832688f5162b346d28b19dccb86d64cd92d09575", "filename": "src/test/ui/nll/lub-if.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/lub-if.nll.stderr"}, {"sha": "132b83810ead724f93b2ef73f9122f12844b8a3b", "filename": "src/test/ui/nll/lub-if.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/lub-if.rs"}, {"sha": "a12c48582c79e88e9542f7d5766c9249e05719c7", "filename": "src/test/ui/nll/lub-if.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fnll%2Flub-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/lub-if.stderr"}, {"sha": "38c83e00a6ade4cd1d71ac1cb1a6e2bd51fb590d", "filename": "src/test/ui/non-legacy-modes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-legacy-modes.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-\n-struct X {\n-    repr: isize\n-}\n-\n-fn apply<T, F>(x: T, f: F) where F: FnOnce(T) {\n-    f(x);\n-}\n-\n-fn check_int(x: isize) {\n-    assert_eq!(x, 22);\n-}\n-\n-fn check_struct(x: X) {\n-    check_int(x.repr);\n-}\n-\n-pub fn main() {\n-    apply(22, check_int);\n-    apply(X {repr: 22}, check_struct);\n-}"}, {"sha": "07d44ff82b133daec527c5463cd488565006e0cd", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/overloaded-calls-nontuple.rs"}, {"sha": "8f299bc9434f38e416275da1809ec55d72225e42", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/overloaded-calls-nontuple.stderr"}, {"sha": "c2cc91d8f7703768c45c9ca21ad50bc235e38888", "filename": "src/test/ui/parser/attribute-with-no-generics-in-parameter-list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.rs"}, {"sha": "4c5964715db7ea01bb470397898d1b2f7500c1ec", "filename": "src/test/ui/parser/attribute-with-no-generics-in-parameter-list.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattribute-with-no-generics-in-parameter-list.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.stderr"}, {"sha": "d2b02cc2af5432bea42e7bef9aed3eb3187ec350", "filename": "src/test/ui/parser/dyn-trait-compatibility.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/dyn-trait-compatibility.rs"}, {"sha": "9218ae9d5daa3ce72adcfb6239d73e229d95fde8", "filename": "src/test/ui/parser/dyn-trait-compatibility.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/dyn-trait-compatibility.stderr"}, {"sha": "4f40c80bc4c74f72055f093129253fa356991d1e", "filename": "src/test/ui/parser/operator-associativity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Foperator-associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fparser%2Foperator-associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Foperator-associativity.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/operator-associativity.rs"}, {"sha": "5980e1a857f26f3d858c7cd7e3bdf8ce0f7f968e", "filename": "src/test/ui/pattern/ignore-all-the-things.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fpattern%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fpattern%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fignore-all-the-things.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/ignore-all-the-things.rs"}, {"sha": "5f9c22681671b20df02ce293fa1f4f92739106d9", "filename": "src/test/ui/privacy/auxiliary/impl_privacy_xc_2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/impl_privacy_xc_2.rs"}, {"sha": "20f110b1a8cfdb4eb338e0a0b6ada41b96d1b1a9", "filename": "src/test/ui/privacy/auxiliary/reachable-unnameable-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Freachable-unnameable-items.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/reachable-unnameable-items.rs"}, {"sha": "46c10067ce20ce061014ce50ccb245e18c8234f0", "filename": "src/test/ui/privacy/export-tag-variant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/export-tag-variant.rs"}, {"sha": "f73bd454d35922495ee755c3d999e1ce1acc3a81", "filename": "src/test/ui/privacy/export-tag-variant.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fexport-tag-variant.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/export-tag-variant.stderr"}, {"sha": "390764588fc87a369b7d39515dfb5ea255331496", "filename": "src/test/ui/privacy/impl-privacy-xc-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fimpl-privacy-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Fimpl-privacy-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fimpl-privacy-xc-2.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/impl-privacy-xc-2.rs"}, {"sha": "f1e53a0d8b4266658134f0953db9b546126ee211", "filename": "src/test/ui/privacy/reachable-unnameable-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/reachable-unnameable-items.rs"}, {"sha": "5fd418e6c86c1f86d748f7c446eef68a378bebbc", "filename": "src/test/ui/process/core-run-destroy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fcore-run-destroy.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/core-run-destroy.rs"}, {"sha": "37e8b99c2f69744ee272355fa9c6d08a6b4a5c90", "filename": "src/test/ui/process/multi-panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/multi-panic.rs"}, {"sha": "24985386a97a13ca25f03d36f5216ca31d8bec07", "filename": "src/test/ui/process/no-stdio.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fno-stdio.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-stdio.rs"}, {"sha": "692197210b15fdce27038d55aebbb15ee3b6691b", "filename": "src/test/ui/process/try-wait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fprocess%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Ftry-wait.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/try-wait.rs"}, {"sha": "2f2ece75ebeeb0c7cead9f59b4e96559cbc7a045", "filename": "src/test/ui/pure-sum.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpure-sum.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,51 +0,0 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-// Check that functions can modify local state.\n-\n-// pretty-expanded FIXME #23616\n-\n-fn sums_to(v: Vec<isize> , sum: isize) -> bool {\n-    let mut i = 0;\n-    let mut sum0 = 0;\n-    while i < v.len() {\n-        sum0 += v[i];\n-        i += 1;\n-    }\n-    return sum0 == sum;\n-}\n-\n-fn sums_to_using_uniq(v: Vec<isize> , sum: isize) -> bool {\n-    let mut i = 0;\n-    let mut sum0: Box<_> = 0.into();\n-    while i < v.len() {\n-        *sum0 += v[i];\n-        i += 1;\n-    }\n-    return *sum0 == sum;\n-}\n-\n-fn sums_to_using_rec(v: Vec<isize> , sum: isize) -> bool {\n-    let mut i = 0;\n-    let mut sum0 = F {f: 0};\n-    while i < v.len() {\n-        sum0.f += v[i];\n-        i += 1;\n-    }\n-    return sum0.f == sum;\n-}\n-\n-struct F<T> { f: T }\n-\n-fn sums_to_using_uniq_rec(v: Vec<isize> , sum: isize) -> bool {\n-    let mut i = 0;\n-    let mut sum0 = F::<Box<_>> {f: 0.into() };\n-    while i < v.len() {\n-        *sum0.f += v[i];\n-        i += 1;\n-    }\n-    return *sum0.f == sum;\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "7c4dd3ec84f6c9931761a7049b6c822997a3245b", "filename": "src/test/ui/regions/wf-bound-region-in-object-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fregions%2Fwf-bound-region-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fregions%2Fwf-bound-region-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fwf-bound-region-in-object-type.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/wf-bound-region-in-object-type.rs"}, {"sha": "cf769f31bf7eccd8600d23eb9c77f75bb276079d", "filename": "src/test/ui/resolve/auxiliary/blind-item-mixed-crate-use-item-foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/blind-item-mixed-crate-use-item-foo.rs"}, {"sha": "81c16ede90930a2922422508896ee5c156077fa5", "filename": "src/test/ui/resolve/auxiliary/blind-item-mixed-crate-use-item-foo2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fblind-item-mixed-crate-use-item-foo2.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/blind-item-mixed-crate-use-item-foo2.rs"}, {"sha": "36d8ab151e4fc2dc9dbd1fbdd087ee3640fad352", "filename": "src/test/ui/resolve/blind-item-mixed-crate-use-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-crate-use-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-crate-use-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-crate-use-item.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/blind-item-mixed-crate-use-item.rs"}, {"sha": "4a39054967b4a78b90d9b5bbba23e50bc6271659", "filename": "src/test/ui/resolve/blind-item-mixed-use-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-use-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-use-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fblind-item-mixed-use-item.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/blind-item-mixed-use-item.rs"}, {"sha": "4e73a2c548884a28ee81df0e0c9e936d6b93ea15", "filename": "src/test/ui/resolve/export-fully-qualified.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/export-fully-qualified.rs"}, {"sha": "7ee352e1232a78a241e1b7e0c6e3bf941db5f56c", "filename": "src/test/ui/resolve/export-fully-qualified.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fexport-fully-qualified.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/export-fully-qualified.stderr"}, {"sha": "5b59e9b4eb3855f5579937810413ad5a494850f2", "filename": "src/test/ui/resolve/no-std-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fno-std-1.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-std-1.rs"}, {"sha": "487d41649f4cb112387e718341011fee6e63dd0a", "filename": "src/test/ui/resolve/no-std-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fno-std-2.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-std-2.rs"}, {"sha": "f6c4ed5794c918a380e6475254958ed432a8ecf4", "filename": "src/test/ui/resolve/no-std-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fno-std-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fno-std-3.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-std-3.rs"}, {"sha": "0ffa5eb894040977d0ac92345e835d8ef6f72c33", "filename": "src/test/ui/resolve/pathless-extern-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fpathless-extern-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fpathless-extern-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpathless-extern-ok.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/pathless-extern-ok.rs"}, {"sha": "c93ba915efb2f36fd919fff93466f6fdd41ba55c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -340,8 +340,9 @@ LL |         let _ = Z::Unit();\n    |\n help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n    |\n-LL |         let _ = Z::Unit;\n-   |                 ~~~~~~~\n+LL -         let _ = Z::Unit();\n+LL +         let _ = Z::Unit;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n@@ -374,8 +375,9 @@ LL |     let _: E = m::E::Unit();\n    |\n help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     let _: E = m::E::Unit;\n-   |                ~~~~~~~~~~\n+LL -     let _: E = m::E::Unit();\n+LL +     let _: E = m::E::Unit;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n@@ -408,8 +410,9 @@ LL |     let _: E = E::Unit();\n    |\n help: `E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     let _: E = E::Unit;\n-   |                ~~~~~~~\n+LL -     let _: E = E::Unit();\n+LL +     let _: E = E::Unit;\n+   | \n \n error: aborting due to 23 previous errors\n "}, {"sha": "fe57910530f85ae08adaa502bcc3b347b83edefe", "filename": "src/test/ui/runtime/atomic-print.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fatomic-print.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/atomic-print.rs"}, {"sha": "1411bcf89e87f942a8da33e2da9567cc1309aeac", "filename": "src/test/ui/runtime/backtrace-debuginfo-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo-aux.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/backtrace-debuginfo-aux.rs"}, {"sha": "b976c3a13bd5927f37ab09a2d72c5dd5a5176b7c", "filename": "src/test/ui/runtime/backtrace-debuginfo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/backtrace-debuginfo.rs"}, {"sha": "f17c9fa6ca9378b11f778cc8ff240d66fda4fa9b", "filename": "src/test/ui/runtime/native-print-no-runtime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fnative-print-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fruntime%2Fnative-print-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fnative-print-no-runtime.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/native-print-no-runtime.rs"}, {"sha": "f12e9198b0d7c274f767b703d1892845e66e5019", "filename": "src/test/ui/stability-attribute/stability-in-private-module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/stability-in-private-module.rs"}, {"sha": "e64f2acbd351d1bc2d160c860e06074a19332679", "filename": "src/test/ui/stability-attribute/stability-in-private-module.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-in-private-module.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/stability-in-private-module.stderr"}, {"sha": "c090bc79fce83b2c6d145b8458d5debc07617bb6", "filename": "src/test/ui/static/auxiliary/extern-statics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fextern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fextern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fextern-statics.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/auxiliary/extern-statics.rs"}, {"sha": "cec5f9d9c9f934c37edf5f660adf261ed6956f74", "filename": "src/test/ui/static/safe-extern-statics-mut.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.mir.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics-mut.mir.stderr"}, {"sha": "389a4589a713559c7f75831d28504fc5edf2b927", "filename": "src/test/ui/static/safe-extern-statics-mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics-mut.rs"}, {"sha": "8e6d2805a0ba4a4d6f3de41669612cb2d3983ffe", "filename": "src/test/ui/static/safe-extern-statics-mut.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics-mut.thir.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics-mut.thir.stderr"}, {"sha": "102abd0816fec233c8ab08226aa4d218c6aa1164", "filename": "src/test/ui/static/safe-extern-statics.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.mir.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics.mir.stderr"}, {"sha": "0aa90c442ea75141f6318d310988a5ca5677876e", "filename": "src/test/ui/static/safe-extern-statics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics.rs"}, {"sha": "7fd2182c4c69387d2deab718b9dc1dbcd165afb7", "filename": "src/test/ui/static/safe-extern-statics.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fsafe-extern-statics.thir.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/safe-extern-statics.thir.stderr"}, {"sha": "547e5445aa1b63f3207db8a157b708dc2c066134", "filename": "src/test/ui/static/thread-local-in-ctfe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/thread-local-in-ctfe.rs"}, {"sha": "fd967604624cb9ca863f40e90670e16201a9e89a", "filename": "src/test/ui/static/thread-local-in-ctfe.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fthread-local-in-ctfe.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/thread-local-in-ctfe.stderr"}, {"sha": "9143a8cdd59bc915e1daff145d699adcb6fa5cd6", "filename": "src/test/ui/stdlib-unit-tests/matches2021.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fmatches2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fmatches2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fmatches2021.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/matches2021.rs"}, {"sha": "9100bfbde95fa7368791c3e57a4c2daec12355da", "filename": "src/test/ui/stdlib-unit-tests/minmax-stability-issue-23687.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fminmax-stability-issue-23687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fminmax-stability-issue-23687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fminmax-stability-issue-23687.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/minmax-stability-issue-23687.rs"}, {"sha": "f4648994fa9182bf45e10d9bb7be6a3addabb748", "filename": "src/test/ui/stdlib-unit-tests/not-sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/not-sync.rs"}, {"sha": "1ee358ba8368e8603e15d4d6f6905888fa20dc80", "filename": "src/test/ui/stdlib-unit-tests/not-sync.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fnot-sync.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/not-sync.stderr"}, {"sha": "9f50659ed60d096a9392087614dc5474e6415832", "filename": "src/test/ui/stdlib-unit-tests/raw-fat-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/raw-fat-ptr.rs"}, {"sha": "f73e7e1c39121f8b5a41e6c14a29d530b67eceb9", "filename": "src/test/ui/stdlib-unit-tests/volatile-fat-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fvolatile-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fvolatile-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fvolatile-fat-ptr.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/volatile-fat-ptr.rs"}, {"sha": "4a3b24383abc4a37e4dd375eea92e99314f2537b", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,10 +0,0 @@\n-use std::marker::Send;\n-\n-struct TestType;\n-\n-trait TestTrait {}\n-\n-impl !Send for TestType {}\n-//~^ ERROR negative trait bounds\n-\n-fn main() {}"}, {"sha": "3562deecbd522bcc6a68650877efaed7e514bfac", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:6\n-   |\n-LL | impl !Send for TestType {}\n-   |      ^^^^^\n-   |\n-   = note: see issue #68318 <https://github.com/rust-lang/rust/issues/68318> for more information\n-   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c67c5b7a555c1d16c25eb78e05876bddb66b480e", "filename": "src/test/ui/tail-direct.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Ftail-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb/src%2Ftest%2Fui%2Ftail-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-direct.rs?ref=ce3f3a5ffa7452131cde06c003cc2eaa7c729bfb", "patch": "@@ -1,7 +0,0 @@\n-// run-pass\n-\n-pub fn main() { assert!((even(42))); assert!((odd(45))); }\n-\n-fn even(n: isize) -> bool { if n == 0 { return true; } else { return odd(n - 1); } }\n-\n-fn odd(n: isize) -> bool { if n == 0 { return false; } else { return even(n - 1); } }"}, {"sha": "9fc661b14777ea6eb4708a37d7d1b05e6ccacf29", "filename": "src/test/ui/threads-sendsync/clone-with-exterior.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fthreads-sendsync%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fthreads-sendsync%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fclone-with-exterior.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/clone-with-exterior.rs"}, {"sha": "175663643403bdf47194e8daabd24805f9f0ac38", "filename": "src/test/ui/threads-sendsync/tcp-stress.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftcp-stress.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/tcp-stress.rs"}, {"sha": "eb503dcf3b63bb2083a5bbd1f7f80a640f8c12f6", "filename": "src/test/ui/traits/alignment-gep-tup-like-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falignment-gep-tup-like-1.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/alignment-gep-tup-like-1.rs"}, {"sha": "9241f3789d72a92e4e6ef130cd99fbd234372279", "filename": "src/test/ui/traits/cycle-generic-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fcycle-generic-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fcycle-generic-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-generic-bound.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/cycle-generic-bound.rs"}, {"sha": "f4b69c1409561ca70a719acc2e787955f639fdf7", "filename": "src/test/ui/traits/early-vtbl-resolution.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fearly-vtbl-resolution.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/early-vtbl-resolution.rs"}, {"sha": "dc33b961800ea8bf75bc8ecef9780493ab95a9da", "filename": "src/test/ui/traits/map-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmap-types.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/map-types.rs"}, {"sha": "71006e1f4e2d8e330e8b110fd03f9ccb598930a9", "filename": "src/test/ui/traits/map-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/map-types.stderr"}, {"sha": "75a363f9f763907a46559d9f11329ebdec175921", "filename": "src/test/ui/traits/no_send-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no_send-struct.rs"}, {"sha": "ee7bdf282b740122a7cb3a194c56c03c81518479", "filename": "src/test/ui/traits/no_send-struct.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fno_send-struct.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no_send-struct.stderr"}, {"sha": "90f56d5fa71d164324e220f0647dda9216a189d0", "filename": "src/test/ui/try-block/try-is-identifier-edition2015.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftry-block%2Ftry-is-identifier-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftry-block%2Ftry-is-identifier-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-is-identifier-edition2015.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/try-is-identifier-edition2015.rs"}, {"sha": "0cf020861c749558d86e0512d73762943a949d73", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -29,8 +29,9 @@ LL |     Alias::Unit();\n    |\n help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n    |\n-LL |     Alias::Unit;\n-   |     ~~~~~~~~~~~\n+LL -     Alias::Unit();\n+LL +     Alias::Unit;\n+   | \n \n error[E0164]: expected tuple struct or tuple variant, found unit variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:9"}, {"sha": "7adb074428ce97cb025e3a2b651ece681a20249d", "filename": "src/test/ui/type/type-ascription.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/type-ascription.rs"}, {"sha": "d0cfdbf504deae43d07ae63ba300001c3c82a023", "filename": "src/test/ui/typeck/no-type-for-node-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-type-for-node-ice.rs"}, {"sha": "b50241fb1a05957f2808ffa5505843476d6b296f", "filename": "src/test/ui/typeck/no-type-for-node-ice.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fno-type-for-node-ice.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/no-type-for-node-ice.stderr"}, {"sha": "b10239c22d1f408191efce5033f6639b605aab76", "filename": "src/test/ui/typeck/project-cache-issue-37154.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fproject-cache-issue-37154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fproject-cache-issue-37154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fproject-cache-issue-37154.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/project-cache-issue-37154.rs"}, {"sha": "eee2b55b2a01e99c22159d463fbc91ffa5330226", "filename": "src/test/ui/typeck/ufcs-type-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fufcs-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Fufcs-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fufcs-type-params.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/ufcs-type-params.rs"}, {"sha": "da1d82e896ae51a341f43ea6f6024ff2c9b67b7b", "filename": "src/test/ui/typeck/unify-return-ty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Ftypeck%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Funify-return-ty.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/unify-return-ty.rs"}, {"sha": "d7af0c4248056de175194e77fb867f7de58c2b50", "filename": "src/test/ui/unsized/maybe-bounds-where.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/maybe-bounds-where.rs"}, {"sha": "39bc1b88e56d7f11f18015b4c5ca28e47a5aa6f0", "filename": "src/test/ui/unsized/maybe-bounds-where.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fmaybe-bounds-where.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/maybe-bounds-where.stderr"}, {"sha": "4152a1065ca14e8d1d1d8e48079d690d7ee5a187", "filename": "src/test/ui/wasm/wasm-import-module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/wasm-import-module.rs"}, {"sha": "47d6cb6899723c4b2bcd2b4b5d937ea714928081", "filename": "src/test/ui/wasm/wasm-import-module.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr?ref=e8423e6c449ad3f4b0dab442175462004554e499", "previous_filename": "src/test/ui/wasm-import-module.stderr"}, {"sha": "248d4f1583f8a65c3e9e0db5a0990cb6ec2fb180", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8423e6c449ad3f4b0dab442175462004554e499/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=e8423e6c449ad3f4b0dab442175462004554e499", "patch": "@@ -7,9 +7,9 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1102;\n+const ROOT_ENTRY_LIMIT: usize = 983;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n-const PARSER_LIMIT: usize = 1005;\n+const PARSER_LIMIT: usize = 1010;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}