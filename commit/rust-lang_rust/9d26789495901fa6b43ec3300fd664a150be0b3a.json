{"sha": "9d26789495901fa6b43ec3300fd664a150be0b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjY3ODk0OTU5MDFmYTZiNDNlYzMzMDBmZDY2NGExNTBiZTBiM2E=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-13T10:33:51Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-03-03T15:07:32Z"}, "message": "Reduce the size of events by using a u64 instead of Instant\n\nPart of #58372", "tree": {"sha": "0cf8afecbac1d0e2109fd533d4d3c67ab702c5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf8afecbac1d0e2109fd533d4d3c67ab702c5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d26789495901fa6b43ec3300fd664a150be0b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d26789495901fa6b43ec3300fd664a150be0b3a", "html_url": "https://github.com/rust-lang/rust/commit/9d26789495901fa6b43ec3300fd664a150be0b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d26789495901fa6b43ec3300fd664a150be0b3a/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccc84199cdf12de8ae89b7bea5276beb6a67c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccc84199cdf12de8ae89b7bea5276beb6a67c29", "html_url": "https://github.com/rust-lang/rust/commit/fccc84199cdf12de8ae89b7bea5276beb6a67c29"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "c052f00cd18e3ccee47afc1dbf5aefabf91f8ee1", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9d26789495901fa6b43ec3300fd664a150be0b3a/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d26789495901fa6b43ec3300fd664a150be0b3a/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=9d26789495901fa6b43ec3300fd664a150be0b3a", "patch": "@@ -4,7 +4,7 @@ use std::io::{BufWriter, Write};\n use std::mem;\n use std::process;\n use std::thread::ThreadId;\n-use std::time::Instant;\n+use std::time::{Duration, Instant, SystemTime};\n \n use crate::session::config::Options;\n \n@@ -21,20 +21,20 @@ pub enum ProfileCategory {\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n pub enum ProfilerEvent {\n-    QueryStart { query_name: &'static str, category: ProfileCategory, time: Instant },\n-    QueryEnd { query_name: &'static str, category: ProfileCategory, time: Instant },\n-    GenericActivityStart { category: ProfileCategory, time: Instant },\n-    GenericActivityEnd { category: ProfileCategory, time: Instant },\n-    IncrementalLoadResultStart { query_name: &'static str, time: Instant },\n-    IncrementalLoadResultEnd { query_name: &'static str, time: Instant },\n-    QueryCacheHit { query_name: &'static str, category: ProfileCategory, time: Instant },\n-    QueryCount { query_name: &'static str, category: ProfileCategory, count: usize, time: Instant },\n-    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: Instant },\n-    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: Instant },\n+    QueryStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n+    QueryEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n+    GenericActivityStart { category: ProfileCategory, time: u64 },\n+    GenericActivityEnd { category: ProfileCategory, time: u64 },\n+    IncrementalLoadResultStart { query_name: &'static str, time: u64 },\n+    IncrementalLoadResultEnd { query_name: &'static str, time: u64 },\n+    QueryCacheHit { query_name: &'static str, category: ProfileCategory, time: u64 },\n+    QueryCount { query_name: &'static str, category: ProfileCategory, count: usize, time: u64 },\n+    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n+    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n }\n \n impl ProfilerEvent {\n-    fn timestamp(&self) -> Instant {\n+    fn timestamp(&self) -> u64 {\n         use self::ProfilerEvent::*;\n \n         match self {\n@@ -58,32 +58,34 @@ fn thread_id_to_u64(tid: ThreadId) -> u64 {\n \n pub struct SelfProfiler {\n     events: HashMap<ThreadId, Vec<ProfilerEvent>>,\n+    start_time: SystemTime,\n+    start_instant: Instant,\n }\n \n impl SelfProfiler {\n     pub fn new() -> SelfProfiler {\n-        let mut profiler = SelfProfiler {\n+        let profiler = SelfProfiler {\n             events: HashMap::new(),\n+            start_time: SystemTime::now(),\n+            start_instant: Instant::now(),\n         };\n \n-        profiler.start_activity(ProfileCategory::Other);\n-\n         profiler\n     }\n \n     #[inline]\n     pub fn start_activity(&mut self, category: ProfileCategory) {\n         self.record(ProfilerEvent::GenericActivityStart {\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n     #[inline]\n     pub fn end_activity(&mut self, category: ProfileCategory) {\n         self.record(ProfilerEvent::GenericActivityEnd {\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -98,7 +100,7 @@ impl SelfProfiler {\n             query_name,\n             category,\n             count,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -107,7 +109,7 @@ impl SelfProfiler {\n         self.record(ProfilerEvent::QueryCacheHit {\n             query_name,\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -116,7 +118,7 @@ impl SelfProfiler {\n         self.record(ProfilerEvent::QueryStart {\n             query_name,\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         });\n     }\n \n@@ -125,23 +127,23 @@ impl SelfProfiler {\n         self.record(ProfilerEvent::QueryEnd {\n             query_name,\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n     #[inline]\n     pub fn incremental_load_result_start(&mut self, query_name: &'static str) {\n         self.record(ProfilerEvent::IncrementalLoadResultStart {\n             query_name,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n     #[inline]\n     pub fn incremental_load_result_end(&mut self, query_name: &'static str) {\n         self.record(ProfilerEvent::IncrementalLoadResultEnd {\n             query_name,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -150,7 +152,7 @@ impl SelfProfiler {\n         self.record(ProfilerEvent::QueryBlockedStart {\n             query_name,\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -159,7 +161,7 @@ impl SelfProfiler {\n         self.record(ProfilerEvent::QueryBlockedEnd {\n             query_name,\n             category,\n-            time: Instant::now(),\n+            time: self.get_time_from_start(),\n         })\n     }\n \n@@ -171,19 +173,15 @@ impl SelfProfiler {\n         events.push(event);\n     }\n \n+    #[inline]\n+    fn get_time_from_start(&self) -> u64 {\n+        let duration = Instant::now() - self.start_instant;\n+        duration.as_nanos() as u64\n+    }\n+\n     pub fn dump_raw_events(&self, opts: &Options) {\n         use self::ProfilerEvent::*;\n \n-        //find the earliest Instant to use as t=0\n-        //when serializing the events, we'll calculate a Duration\n-        //using (instant - min_instant)\n-        let min_instant =\n-            self.events\n-                .iter()\n-                .map(|(_, values)| values[0].timestamp())\n-                .min()\n-                .unwrap();\n-\n         let pid = process::id();\n \n         let filename =\n@@ -229,8 +227,10 @@ impl SelfProfiler {\n                 }\n \n                 let (secs, nanos) = {\n-                    let duration = event.timestamp() - min_instant;\n-                    (duration.as_secs(), duration.subsec_nanos())\n+                    let time = self.start_time + Duration::from_nanos(event.timestamp());\n+                    let time_since_unix =\n+                        time.duration_since(SystemTime::UNIX_EPOCH).unwrap_or_default();\n+                    (time_since_unix.as_secs(), time_since_unix.subsec_nanos())\n                 };\n \n                 match event {"}]}