{"sha": "f09f62f62c401a42bf338a23f8721c7f5a28a800", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWY2MmY2MmM0MDFhNDJiZjMzOGEyM2Y4NzIxYzdmNWEyOGE4MDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T09:34:36Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T09:34:36Z"}, "message": "liballoc: adjust abolute imports + more import fixes.", "tree": {"sha": "bf6faa1d899e58ff4435736ac371520dbd79786e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6faa1d899e58ff4435736ac371520dbd79786e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09f62f62c401a42bf338a23f8721c7f5a28a800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09f62f62c401a42bf338a23f8721c7f5a28a800", "html_url": "https://github.com/rust-lang/rust/commit/f09f62f62c401a42bf338a23f8721c7f5a28a800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09f62f62c401a42bf338a23f8721c7f5a28a800/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7693e3e6662c2ae8aa24d69434161f501d855420", "url": "https://api.github.com/repos/rust-lang/rust/commits/7693e3e6662c2ae8aa24d69434161f501d855420", "html_url": "https://github.com/rust-lang/rust/commit/7693e3e6662c2ae8aa24d69434161f501d855420"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "5d69b1005471914ac06c9cc8e33575757db86bd0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -165,5 +165,5 @@ pub mod vec;\n \n #[cfg(not(test))]\n mod std {\n-    pub use core::ops;      // RangeFull\n+    pub use core::ops; // RangeFull\n }"}, {"sha": "016185791edb680f456ec337d2c81ba397f6d69c", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -736,7 +736,7 @@ unsafe impl<#[may_dangle] T, A: Alloc> Drop for RawVec<T, A> {\n \n #[inline]\n fn alloc_guard(alloc_size: usize) -> Result<(), CollectionAllocErr> {\n-    if mem::size_of::<usize>() < 8 && alloc_size > ::core::isize::MAX as usize {\n+    if mem::size_of::<usize>() < 8 && alloc_size > core::isize::MAX as usize {\n         Err(CapacityOverflow)\n     } else {\n         Ok(())"}, {"sha": "c24e216383974a7b7899e92d50ff56278faf210d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -244,6 +244,7 @@ use core::{\n     ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn},\n     pin::Pin,\n     ptr::{self, NonNull},\n+    slice::from_raw_parts_mut,\n     convert::From,\n     usize,\n };\n@@ -768,8 +769,6 @@ impl<T: Clone> RcFromSlice<T> for Rc<[T]> {\n \n         impl<T> Drop for Guard<T> {\n             fn drop(&mut self) {\n-                use core::slice::from_raw_parts_mut;\n-\n                 unsafe {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);"}, {"sha": "771d8f5d3473c311bf3aeb6350b24e1c9157ad52", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -141,13 +141,11 @@ pub use self::hack::to_vec;\n // `test_permutations` test\n mod hack {\n     use core::mem;\n-    use crate::boxed::Box;\n+    use crate::{boxed::Box, vec::Vec};\n \n     #[cfg(test)]\n     use crate::string::ToString;\n \n-    use crate::vec::Vec;\n-\n     pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> {\n         unsafe {\n             let xs = Vec::from_raw_parts(b.as_mut_ptr(), b.len(), b.len());"}, {"sha": "95f6b28a16817f5f49a6bf526ef99b8b57f3e4ff", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -2165,7 +2165,7 @@ pub trait ToString {\n impl<T: fmt::Display + ?Sized> ToString for T {\n     #[inline]\n     default fn to_string(&self) -> String {\n-        use core::fmt::Write;\n+        use fmt::Write;\n         let mut buf = String::new();\n         buf.write_fmt(format_args!(\"{}\", self))\n            .expect(\"a Display implementation returned an error unexpectedly\");"}, {"sha": "5e7a26132cb13739ef8667cfda1cb0f874495938", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -24,6 +24,7 @@ use core::{\n     hash::{Hash, Hasher},\n     isize, usize,\n     convert::From,\n+    slice::from_raw_parts_mut,\n };\n \n use crate::{\n@@ -677,8 +678,6 @@ impl<T: Clone> ArcFromSlice<T> for Arc<[T]> {\n \n         impl<T> Drop for Guard<T> {\n             fn drop(&mut self) {\n-                use core::slice::from_raw_parts_mut;\n-\n                 unsafe {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);"}, {"sha": "6859b0138b5ed2bacb2d4891bc9c8636754bad23", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -200,7 +200,7 @@ fn test_range_inclusive() {\n \n #[test]\n fn test_range_inclusive_max_value() {\n-    let max = ::std::usize::MAX;\n+    let max = std::usize::MAX;\n     let map: BTreeMap<_, _> = vec![(max, 0)].into_iter().collect();\n \n     assert_eq!(map.range(max..=max).collect::<Vec<_>>(), &[(&max, &0)]);"}, {"sha": "28e021c741e7dced5afc539b4f9ca991ce03c752", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -1070,7 +1070,7 @@ fn test_rev_iterator() {\n #[test]\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n-    for c in (0..0x110000).filter_map(::std::char::from_u32) {\n+    for c in (0..0x110000).filter_map(std::char::from_u32) {\n         let s = c.encode_utf8(&mut bytes);\n         if Some(c) != s.chars().next() {\n             panic!(\"character {:x}={} does not decode correctly\", c as u32, c);\n@@ -1081,7 +1081,7 @@ fn test_chars_decoding() {\n #[test]\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n-    for c in (0..0x110000).filter_map(::std::char::from_u32) {\n+    for c in (0..0x110000).filter_map(std::char::from_u32) {\n         let s = c.encode_utf8(&mut bytes);\n         if Some(c) != s.chars().rev().next() {\n             panic!(\"character {:x}={} does not decode correctly\", c as u32, c);"}, {"sha": "14f70fdf3034d1d5e408f15038bf010683d47b50", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -23,7 +23,7 @@ impl<'a> IntoCow<'a, str> for &'a str {\n \n #[test]\n fn test_from_str() {\n-    let owned: Option<::std::string::String> = \"string\".parse().ok();\n+    let owned: Option<std::string::String> = \"string\".parse().ok();\n     assert_eq!(owned.as_ref().map(|s| &**s), Some(\"string\"));\n }\n \n@@ -124,7 +124,7 @@ fn test_from_utf16() {\n         let s_as_utf16 = s.encode_utf16().collect::<Vec<u16>>();\n         let u_as_string = String::from_utf16(&u).unwrap();\n \n-        assert!(::core::char::decode_utf16(u.iter().cloned()).all(|r| r.is_ok()));\n+        assert!(core::char::decode_utf16(u.iter().cloned()).all(|r| r.is_ok()));\n         assert_eq!(s_as_utf16, u);\n \n         assert_eq!(u_as_string, s);"}, {"sha": "b65c68d51a5027bf2bacfe5593e20f146dfbf8c8", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -640,7 +640,7 @@ fn test_splice_unbounded() {\n fn test_splice_forget() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    ::std::mem::forget(v.splice(2..4, a.iter().cloned()));\n+    std::mem::forget(v.splice(2..4, a.iter().cloned()));\n     assert_eq!(v, &[1, 2]);\n }\n "}, {"sha": "2ef1497ade71550c3b513143d615ac0ccff92161", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09f62f62c401a42bf338a23f8721c7f5a28a800/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f09f62f62c401a42bf338a23f8721c7f5a28a800", "patch": "@@ -70,7 +70,7 @@ use core::{\n         Index, IndexMut, RangeBounds,\n     },\n     ptr::{self, NonNull},\n-    slice,\n+    slice::{self, SliceIndex},\n };\n \n use crate::{\n@@ -1672,10 +1672,7 @@ impl<T: Hash> Hash for Vec<T> {\n     message=\"vector indices are of type `usize` or ranges of `usize`\",\n     label=\"vector indices are of type `usize` or ranges of `usize`\",\n )]\n-impl<T, I> Index<I> for Vec<T>\n-where\n-    I: ::core::slice::SliceIndex<[T]>,\n-{\n+impl<T, I: SliceIndex<[T]>> Index<I> for Vec<T> {\n     type Output = I::Output;\n \n     #[inline]\n@@ -1689,10 +1686,7 @@ where\n     message=\"vector indices are of type `usize` or ranges of `usize`\",\n     label=\"vector indices are of type `usize` or ranges of `usize`\",\n )]\n-impl<T, I> IndexMut<I> for Vec<T>\n-where\n-    I: ::core::slice::SliceIndex<[T]>,\n-{\n+impl<T, I: SliceIndex<[T]>> IndexMut<I> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut Self::Output {\n         IndexMut::index_mut(&mut **self, index)"}]}