{"sha": "57576ac420989070e695bac195d516a410191ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTc2YWM0MjA5ODkwNzBlNjk1YmFjMTk1ZDUxNmE0MTAxOTFhZDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T10:57:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T10:57:36Z"}, "message": "Merge #5200\n\n5200: Refactor keyword completion tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "007c62c899cedd397501d1c2d477c61ac071c84c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007c62c899cedd397501d1c2d477c61ac071c84c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57576ac420989070e695bac195d516a410191ad9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/w8gCRBK7hj4Ov3rIwAAdHIIAGRdcltFEYtA2wuGd6y4Z+tw\n67gaVpv97PVEpPeSBxPupkP2JvdDSoTeLBnF6AacpXVKoRGdGx/7/ytSJUWG+uXl\nladgQUucaJHQTI+9DTviEM267o2cJWZWUapveBFAVvQMdBVTBtiWCvRCip0Zz9zI\ncm8cM/Ov8b32nfmfFMbAaZzESnPKBc6isSR6YEBj2sZjbk4QJRY/j+hkA8zjiWqA\nwU4BPLfKR9a2HiaMW6cUrxx1asOx/hmV+dNqEYydn/khIrgrAbbY512X8a2IiYOG\nzgvrWkGQnPGThfFwvjmBVGWb7zYW5Z7d00HDv09/52FdKexlbjmcpW3XxSxpUkQ=\n=xUC9\n-----END PGP SIGNATURE-----\n", "payload": "tree 007c62c899cedd397501d1c2d477c61ac071c84c\nparent 81bb3d9c1a1cfd1e94a3c43013eb7f63cf54f8c7\nparent e2b04621f9213b14b57df366138f38252735ffad\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593773856 +0000\ncommitter GitHub <noreply@github.com> 1593773856 +0000\n\nMerge #5200\n\n5200: Refactor keyword completion tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57576ac420989070e695bac195d516a410191ad9", "html_url": "https://github.com/rust-lang/rust/commit/57576ac420989070e695bac195d516a410191ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57576ac420989070e695bac195d516a410191ad9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bb3d9c1a1cfd1e94a3c43013eb7f63cf54f8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bb3d9c1a1cfd1e94a3c43013eb7f63cf54f8c7", "html_url": "https://github.com/rust-lang/rust/commit/81bb3d9c1a1cfd1e94a3c43013eb7f63cf54f8c7"}, {"sha": "e2b04621f9213b14b57df366138f38252735ffad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b04621f9213b14b57df366138f38252735ffad", "html_url": "https://github.com/rust-lang/rust/commit/e2b04621f9213b14b57df366138f38252735ffad"}], "stats": {"total": 404, "additions": 198, "deletions": 206}, "files": [{"sha": "c3c6eda339b6f3805a1164d5ae13d8c18380df0e", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 198, "deletions": 206, "changes": 404, "blob_url": "https://github.com/rust-lang/rust/blob/57576ac420989070e695bac195d516a410191ad9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57576ac420989070e695bac195d516a410191ad9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=57576ac420989070e695bac195d516a410191ad9", "patch": "@@ -174,289 +174,281 @@ fn complete_return(\n \n #[cfg(test)]\n mod tests {\n+    use expect::{expect, Expect};\n+\n     use crate::completion::{test_utils::completion_list, CompletionKind};\n-    use insta::assert_snapshot;\n \n-    fn get_keyword_completions(code: &str) -> String {\n-        completion_list(code, CompletionKind::Keyword)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Keyword);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn test_keywords_in_use_stmt() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"use <|>\"),\n-            @r###\"\n-            kw crate::\n-            kw self\n-            kw super::\n-        \"###\n+        check(\n+            r\"use <|>\",\n+            expect![[r#\"\n+                kw crate::\n+                kw self\n+                kw super::\n+            \"#]],\n         );\n \n-        assert_snapshot!(\n-            get_keyword_completions(r\"use a::<|>\"),\n-            @r###\"\n+        check(\n+            r\"use a::<|>\",\n+            expect![[r#\"\n             kw self\n             kw super::\n-        \"###\n+        \"#]],\n         );\n \n-        assert_snapshot!(\n-            get_keyword_completions(r\"use a::{b, <|>}\"),\n-            @r###\"\n+        check(\n+            r\"use a::{b, <|>}\",\n+            expect![[r#\"\n             kw self\n             kw super::\n-        \"###\n+        \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_at_source_file_level() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"m<|>\"),\n-            @r###\"\n-            kw const\n-            kw enum\n-            kw extern\n-            kw fn\n-            kw impl\n-            kw mod\n-            kw pub\n-            kw static\n-            kw struct\n-            kw trait\n-            kw type\n-            kw union\n-            kw unsafe\n-            kw use\n-        \"###\n+        check(\n+            r\"m<|>\",\n+            expect![[r#\"\n+                kw const\n+                kw enum\n+                kw extern\n+                kw fn\n+                kw impl\n+                kw mod\n+                kw pub\n+                kw static\n+                kw struct\n+                kw trait\n+                kw type\n+                kw union\n+                kw unsafe\n+                kw use\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_function() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn quux() { <|> }\"),\n-            @r###\"\n-            kw const\n-            kw extern\n-            kw fn\n-            kw if\n-            kw if let\n-            kw impl\n-            kw let\n-            kw loop\n-            kw match\n-            kw mod\n-            kw return\n-            kw static\n-            kw trait\n-            kw type\n-            kw unsafe\n-            kw use\n-            kw while\n-        \"###\n+        check(\n+            r\"fn quux() { <|> }\",\n+            expect![[r#\"\n+                kw const\n+                kw extern\n+                kw fn\n+                kw if\n+                kw if let\n+                kw impl\n+                kw let\n+                kw loop\n+                kw match\n+                kw mod\n+                kw return\n+                kw static\n+                kw trait\n+                kw type\n+                kw unsafe\n+                kw use\n+                kw while\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_inside_block() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn quux() { if true { <|> } }\"),\n-            @r###\"\n-            kw const\n-            kw extern\n-            kw fn\n-            kw if\n-            kw if let\n-            kw impl\n-            kw let\n-            kw loop\n-            kw match\n-            kw mod\n-            kw return\n-            kw static\n-            kw trait\n-            kw type\n-            kw unsafe\n-            kw use\n-            kw while\n-        \"###\n+        check(\n+            r\"fn quux() { if true { <|> } }\",\n+            expect![[r#\"\n+                kw const\n+                kw extern\n+                kw fn\n+                kw if\n+                kw if let\n+                kw impl\n+                kw let\n+                kw loop\n+                kw match\n+                kw mod\n+                kw return\n+                kw static\n+                kw trait\n+                kw type\n+                kw unsafe\n+                kw use\n+                kw while\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_if() {\n-        assert_snapshot!(\n-            get_keyword_completions(\n-                r\"\n-                fn quux() {\n-                    if true {\n-                        ()\n-                    } <|>\n-                }\n-                \",\n-            ),\n-            @r###\"\n-            kw const\n-            kw else\n-            kw else if\n-            kw extern\n-            kw fn\n-            kw if\n-            kw if let\n-            kw impl\n-            kw let\n-            kw loop\n-            kw match\n-            kw mod\n-            kw return\n-            kw static\n-            kw trait\n-            kw type\n-            kw unsafe\n-            kw use\n-            kw while\n-        \"###\n+        check(\n+            r#\"fn quux() { if true { () } <|> }\"#,\n+            expect![[r#\"\n+                kw const\n+                kw else\n+                kw else if\n+                kw extern\n+                kw fn\n+                kw if\n+                kw if let\n+                kw impl\n+                kw let\n+                kw loop\n+                kw match\n+                kw mod\n+                kw return\n+                kw static\n+                kw trait\n+                kw type\n+                kw unsafe\n+                kw use\n+                kw while\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_match_arm() {\n-        assert_snapshot!(\n-            get_keyword_completions(\n-                r\"\n-                fn quux() -> i32 {\n-                    match () {\n-                        () => <|>\n-                    }\n-                }\n-                \",\n-            ),\n-            @r###\"\n-            kw if\n-            kw if let\n-            kw loop\n-            kw match\n-            kw return\n-            kw unsafe\n-        \"###\n+        check(\n+            r#\"\n+fn quux() -> i32 {\n+    match () {\n+        () => <|>\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                kw if\n+                kw if let\n+                kw loop\n+                kw match\n+                kw return\n+                kw unsafe\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_trait_def() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"trait My { <|> }\"),\n-            @r###\"\n-            kw const\n-            kw fn\n-            kw type\n-            kw unsafe\n-        \"###\n+        check(\n+            r\"trait My { <|> }\",\n+            expect![[r#\"\n+                kw const\n+                kw fn\n+                kw type\n+                kw unsafe\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_impl_def() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"impl My { <|> }\"),\n-            @r###\"\n-            kw const\n-            kw fn\n-            kw pub\n-            kw type\n-            kw unsafe\n-        \"###\n+        check(\n+            r\"impl My { <|> }\",\n+            expect![[r#\"\n+                kw const\n+                kw fn\n+                kw pub\n+                kw type\n+                kw unsafe\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_loop() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn my() { loop { <|> } }\"),\n-            @r###\"\n-            kw break\n-            kw const\n-            kw continue\n-            kw extern\n-            kw fn\n-            kw if\n-            kw if let\n-            kw impl\n-            kw let\n-            kw loop\n-            kw match\n-            kw mod\n-            kw return\n-            kw static\n-            kw trait\n-            kw type\n-            kw unsafe\n-            kw use\n-            kw while\n-        \"###\n+        check(\n+            r\"fn my() { loop { <|> } }\",\n+            expect![[r#\"\n+                kw break\n+                kw const\n+                kw continue\n+                kw extern\n+                kw fn\n+                kw if\n+                kw if let\n+                kw impl\n+                kw let\n+                kw loop\n+                kw match\n+                kw mod\n+                kw return\n+                kw static\n+                kw trait\n+                kw type\n+                kw unsafe\n+                kw use\n+                kw while\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_unsafe_in_item_list() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"unsafe <|>\"),\n-            @r###\"\n-            kw fn\n-            kw impl\n-            kw trait\n-        \"###\n+        check(\n+            r\"unsafe <|>\",\n+            expect![[r#\"\n+                kw fn\n+                kw impl\n+                kw trait\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_unsafe_in_block_expr() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn my_fn() { unsafe <|> }\"),\n-            @r###\"\n-            kw fn\n-            kw impl\n-            kw trait\n-        \"###\n+        check(\n+            r\"fn my_fn() { unsafe <|> }\",\n+            expect![[r#\"\n+                kw fn\n+                kw impl\n+                kw trait\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_mut_in_ref_and_in_fn_parameters_list() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn my_fn(&<|>) {}\"),\n-            @r###\"\n-            kw mut\n-        \"###\n+        check(\n+            r\"fn my_fn(&<|>) {}\",\n+            expect![[r#\"\n+                kw mut\n+            \"#]],\n         );\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn my_fn(<|>) {}\"),\n-            @r###\"\n-            kw mut\n-        \"###\n+        check(\n+            r\"fn my_fn(<|>) {}\",\n+            expect![[r#\"\n+                kw mut\n+            \"#]],\n         );\n-        assert_snapshot!(\n-            get_keyword_completions(r\"fn my_fn() { let &<|> }\"),\n-            @r###\"\n-            kw mut\n-        \"###\n+        check(\n+            r\"fn my_fn() { let &<|> }\",\n+            expect![[r#\"\n+                kw mut\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_where_keyword() {\n-        assert_snapshot!(\n-            get_keyword_completions(r\"trait A <|>\"),\n-            @r###\"\n-            kw where\n-        \"###\n+        check(\n+            r\"trait A <|>\",\n+            expect![[r#\"\n+                kw where\n+            \"#]],\n         );\n-        assert_snapshot!(\n-            get_keyword_completions(r\"impl A <|>\"),\n-            @r###\"\n-            kw where\n-        \"###\n+        check(\n+            r\"impl A <|>\",\n+            expect![[r#\"\n+                kw where\n+            \"#]],\n         );\n     }\n }"}]}