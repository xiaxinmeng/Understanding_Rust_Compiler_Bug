{"sha": "e2d9974b3b9a1021894c532b293e7624eaeb1e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDk5NzRiM2I5YTEwMjE4OTRjNTMyYjI5M2U3NjI0ZWFlYjFlMWM=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-25T19:29:19Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-26T17:02:25Z"}, "message": "improve `BitAnd` trait documentation\n\nThis pull request is based on the discussion in PR #35927.\n\nAdd a module-level note that `&&` and `||` are short-circuiting operators and not overloadable.\n\nAdd a simple `Scalar` example that lifts the `&` operator to a trivial struct tuple.\n\nMake `BooleanVector` a struct tuple.\n\nDerive `PartialEq` for `BooleanVector` instead of implementing it.\n\nAdds a `fn main` wrapper so that the example can integrate with Rust Playground.\n\nsimplified bitand expression\n\nadd a comment explaining what \"rhs\" means", "tree": {"sha": "c655ce5deed749754499c6cbd490d34d0417929a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c655ce5deed749754499c6cbd490d34d0417929a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d9974b3b9a1021894c532b293e7624eaeb1e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d9974b3b9a1021894c532b293e7624eaeb1e1c", "html_url": "https://github.com/rust-lang/rust/commit/e2d9974b3b9a1021894c532b293e7624eaeb1e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d9974b3b9a1021894c532b293e7624eaeb1e1c/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "html_url": "https://github.com/rust-lang/rust/commit/eaf71f8d1034f16140791f566cab3f3c9a0bf96a"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "128cf8f05bb5901ee0b8ca05545eb9208eb81a6c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e2d9974b3b9a1021894c532b293e7624eaeb1e1c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d9974b3b9a1021894c532b293e7624eaeb1e1c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=e2d9974b3b9a1021894c532b293e7624eaeb1e1c", "patch": "@@ -21,6 +21,11 @@\n //! custom operators are required, you should look toward macros or compiler\n //! plugins to extend Rust's syntax.\n //!\n+//! Note that the `&&` and `||` operators short-circuit, i.e. they only\n+//! evaluate their second operand if it contributes to the result. Since this\n+//! behavior is not enforceable by traits, `&&` and `||` are not supported as\n+//! overloadable operators.\n+//!\n //! Many of the operators take their operands by value. In non-generic\n //! contexts involving built-in types, this is usually not a problem.\n //! However, using these operators in generic code, requires some\n@@ -793,41 +798,56 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// In this example, the `BitAnd` trait is implemented for a `BooleanVector`\n-/// struct.\n+/// In this example, the `&` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitAnd;\n ///\n-/// #[derive(Debug)]\n-/// struct BooleanVector {\n-///     value: Vec<bool>,\n-/// };\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitAnd for BooleanVector {\n+/// impl BitAnd for Scalar {\n ///     type Output = Self;\n ///\n+///     // rhs is the \"right-hand side\" of the expression `a & b`\n ///     fn bitand(self, rhs: Self) -> Self {\n-///         BooleanVector {\n-///             value: self.value\n-///                 .iter()\n-///                 .zip(rhs.value.iter())\n-///                 .map(|(x, y)| *x && *y)\n-///                 .collect(),\n-///         }\n+///         Scalar(self.0 & rhs.0)\n ///     }\n /// }\n ///\n-/// impl PartialEq for BooleanVector {\n-///     fn eq(&self, other: &Self) -> bool {\n-///         self.value == other.value\n+/// fn main() {\n+///     assert_eq!(Scalar(true) & Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(true) & Scalar(false), Scalar(false));\n+///     assert_eq!(Scalar(false) & Scalar(true), Scalar(false));\n+///     assert_eq!(Scalar(false) & Scalar(false), Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitAnd` trait is implemented for a `BooleanVector`\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::BitAnd;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitAnd for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitand(self, BooleanVector(rhs): Self) -> Self {\n+///         let BooleanVector(lhs) = self;\n+///         assert_eq!(lhs.len(), rhs.len());\n+///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x && *y).collect())\n ///     }\n /// }\n ///\n-/// let bv1 = BooleanVector { value: vec![true, true, false, false] };\n-/// let bv2 = BooleanVector { value: vec![true, false, true, false] };\n-/// let expected = BooleanVector { value: vec![true, false, false, false] };\n-/// assert_eq!(bv1 & bv2, expected);\n+/// fn main() {\n+///     let bv1 = BooleanVector(vec![true, true, false, false]);\n+///     let bv2 = BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![true, false, false, false]);\n+///     assert_eq!(bv1 & bv2, expected);\n+/// }\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}