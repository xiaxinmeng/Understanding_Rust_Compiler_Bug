{"sha": "97d0f76c633b3e3f73bed79096e24b320ee6dbaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDBmNzZjNjMzYjNlM2Y3M2JlZDc5MDk2ZTI0YjMyMGVlNmRiYWY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-08T01:27:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-08T17:46:46Z"}, "message": "fix long lines", "tree": {"sha": "75a7ffd56dd54368ae23c8c7e5a4211fa581d065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a7ffd56dd54368ae23c8c7e5a4211fa581d065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d0f76c633b3e3f73bed79096e24b320ee6dbaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d0f76c633b3e3f73bed79096e24b320ee6dbaf", "html_url": "https://github.com/rust-lang/rust/commit/97d0f76c633b3e3f73bed79096e24b320ee6dbaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d0f76c633b3e3f73bed79096e24b320ee6dbaf/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c001af07c658b9583bde8d138d1d9408274d741", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c001af07c658b9583bde8d138d1d9408274d741", "html_url": "https://github.com/rust-lang/rust/commit/9c001af07c658b9583bde8d138d1d9408274d741"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "619a553d52f73311ccf21d12c3e846abc581c745", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/97d0f76c633b3e3f73bed79096e24b320ee6dbaf/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0f76c633b3e3f73bed79096e24b320ee6dbaf/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=97d0f76c633b3e3f73bed79096e24b320ee6dbaf", "patch": "@@ -890,9 +890,9 @@ fn seq_states(&_fn_info_map fm, &fn_info enclosing,\n }\n \n fn find_pre_post_state_exprs(&_fn_info_map fm,\n-\t\t\t     &fn_info enclosing,\n-\t\t\t     &prestate pres,\n-\t\t\t     &ann a, &vec[@expr] es) -> bool {\n+                             &fn_info enclosing,\n+                             &prestate pres,\n+                             &ann a, &vec[@expr] es) -> bool {\n   auto res = seq_states(fm, enclosing, pres, es);\n   set_prestate_ann(a, pres);\n   set_poststate_ann(a, res._1);\n@@ -918,21 +918,21 @@ fn find_pre_post_state_expr(&_fn_info_map fm, &fn_info enclosing,\n     case (expr_call(?operator, ?operands, ?a)) {\n       /* do the prestate for the rator */\n       changed = find_pre_post_state_expr(fm, enclosing, pres, operator)\n-\t|| changed;\n+        || changed;\n       /* rands go left-to-right */\n       ret(find_pre_post_state_exprs(fm, enclosing,\n-\t\t\t\t    expr_poststate(*operator), a, operands)\n-\t  || changed);\n+                                    expr_poststate(*operator), a, operands)\n+          || changed);\n     }\n     case (expr_path(_,_,?a)) {\n       pure_exp(a, pres);\n       ret false;\n     }\n     case (expr_log(?e,?a)) {\n-\tchanged = find_pre_post_state_expr(fm, enclosing, pres, e);\n-\tset_prestate_ann(a, pres);\n-\tset_poststate_ann(a, expr_poststate(*e));\n-\tret changed;\n+        changed = find_pre_post_state_expr(fm, enclosing, pres, e);\n+        set_prestate_ann(a, pres);\n+        set_poststate_ann(a, expr_poststate(*e));\n+        ret changed;\n     }\n     case (_) {\n       log(\"find_pre_post_state_expr: implement this case!\");\n@@ -954,23 +954,23 @@ fn find_pre_post_state_stmt(&_fn_info_map fm, &fn_info enclosing,\n         case (ast.decl_local(?alocal)) {\n           alt (alocal.init) {\n             case (some[ast.initializer](?an_init)) {\n-\t      changed = find_pre_post_state_expr\n-\t\t(fm, enclosing,\tpres, an_init.expr) || changed;\n-\t      set_prestate(stmt_ann, expr_prestate(*an_init.expr));\n-\t      set_poststate(stmt_ann, expr_poststate(*an_init.expr));\n-\t      gen(enclosing, stmt_ann, alocal.id);\n-\t      ret changed;\n-\t    }\n-\t    case (none[ast.initializer]) {\n-\t      set_prestate(stmt_ann, pres);\n-\t      set_poststate(stmt_ann, pres);\n-\t      ret false;\n-\t    }\n+              changed = find_pre_post_state_expr\n+                (fm, enclosing, pres, an_init.expr) || changed;\n+              set_prestate(stmt_ann, expr_prestate(*an_init.expr));\n+              set_poststate(stmt_ann, expr_poststate(*an_init.expr));\n+              gen(enclosing, stmt_ann, alocal.id);\n+              ret changed;\n+            }\n+            case (none[ast.initializer]) {\n+              set_prestate(stmt_ann, pres);\n+              set_poststate(stmt_ann, pres);\n+              ret false;\n+            }\n           }\n         }\n-\tcase (ast.decl_item(?an_item)) {\n-\t  be find_pre_post_state_item(fm, an_item);\n-\t}\n+        case (ast.decl_item(?an_item)) {\n+          be find_pre_post_state_item(fm, an_item);\n+        }\n       }\n     }\n     case (stmt_expr(?e, ?a)) {\n@@ -989,7 +989,6 @@ fn find_pre_post_state_stmt(&_fn_info_map fm, &fn_info enclosing,\n    returns a boolean flag saying whether any pre- or poststates changed */\n fn find_pre_post_state_block(&_fn_info_map fm, &fn_info enclosing, block b)\n   -> bool {\n-  log(\"pre_post_state_block: \" + uistr(fm.size()) + \" \" + uistr(enclosing.size()));\n \n   auto changed = false;\n   auto num_local_vars = num_locals(enclosing);\n@@ -1023,11 +1022,8 @@ fn find_pre_post_state_fn(&_fn_info_map f_info, &fn_info fi, &ast._fn f)\n }\n \n fn fixed_point_states(_fn_info_map fm, fn_info f_info,\n-\t\t      // with no ampersands for the first two args, and likewise for find_pre_post_state_fn,\n-\t\t      // I got a segfault\n                       fn (&_fn_info_map, &fn_info, &ast._fn) -> bool f,\n                       &ast._fn start) -> () {\n-  log(\"fixed_point_states: \" + uistr(fm.size()) + \" \" + uistr(f_info.size()));\n \n   auto changed = f(fm, f_info, start);\n \n@@ -1061,11 +1057,11 @@ fn check_states_stmt(fn_info enclosing, &stmt s) -> () {\n \n       if (!implies(pres, prec)) {\n         log(\"check_states_stmt: unsatisfied precondition for \");\n-\tlog_stmt(s);\n-\tlog(\"Precondition: \");\n-\tlog_bitv(enclosing, prec);\n-\tlog(\"Prestate: \");\n-\tlog_bitv(enclosing, pres);\n+        log_stmt(s);\n+        log(\"Precondition: \");\n+        log_bitv(enclosing, prec);\n+        log(\"Prestate: \");\n+        log_bitv(enclosing, pres);\n         fail;\n       }\n     }\n@@ -1095,8 +1091,6 @@ fn check_item_fn_state(&_fn_info_map f_info_map, &span sp, ident i,\n   check(f_info_map.contains_key(id));\n   auto f_info = f_info_map.get(id);\n \n-  log(\"check_item_fn_state: id = \" + i + \" \" + uistr(f_info_map.size()) + \" \" + uistr(f_info.size()));\n-\n   /* Compute the pre- and post-states for this function */\n   auto g = find_pre_post_state_fn;\n   fixed_point_states(f_info_map, f_info, g, f);"}]}