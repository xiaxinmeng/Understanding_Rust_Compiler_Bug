{"sha": "95272a07f1fe3a82497225a4cd0d67080b8ffebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjcyYTA3ZjFmZTNhODI0OTcyMjVhNGNkMGQ2NzA4MGI4ZmZlYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-20T10:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-20T10:31:20Z"}, "message": "Auto merge of #45324 - GuillaumeGomez:switch-default-markdown-renderer, r=steveklabnik\n\nPrint rustdoc rendering warnings all the time\n\nr? @rust-lang/dev-tools", "tree": {"sha": "b0877a80f3acb6738dd91f5e7fdc8cf642461faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0877a80f3acb6738dd91f5e7fdc8cf642461faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95272a07f1fe3a82497225a4cd0d67080b8ffebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95272a07f1fe3a82497225a4cd0d67080b8ffebf", "html_url": "https://github.com/rust-lang/rust/commit/95272a07f1fe3a82497225a4cd0d67080b8ffebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95272a07f1fe3a82497225a4cd0d67080b8ffebf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0956ff265d0459e6f643f5454a8560e5dc2712c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0956ff265d0459e6f643f5454a8560e5dc2712c", "html_url": "https://github.com/rust-lang/rust/commit/c0956ff265d0459e6f643f5454a8560e5dc2712c"}, {"sha": "11b2b08ba9bdf7d3759666a3b05711b0a6c20484", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b2b08ba9bdf7d3759666a3b05711b0a6c20484", "html_url": "https://github.com/rust-lang/rust/commit/11b2b08ba9bdf7d3759666a3b05711b0a6c20484"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "d538428a7e9a96be8ed54f0405894dab69c4dc6f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/95272a07f1fe3a82497225a4cd0d67080b8ffebf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95272a07f1fe3a82497225a4cd0d67080b8ffebf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=95272a07f1fe3a82497225a4cd0d67080b8ffebf", "patch": "@@ -1826,37 +1826,32 @@ fn render_markdown(w: &mut fmt::Formatter,\n                    prefix: &str,\n                    scx: &SharedContext)\n                    -> fmt::Result {\n-    // We only emit warnings if the user has opted-in to Pulldown rendering.\n-    let output = if render_type == RenderType::Pulldown {\n-        // Save the state of USED_ID_MAP so it only gets updated once even\n-        // though we're rendering twice.\n-        let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n-        let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n-        USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n-        let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n-        let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n-        differences.retain(|s| {\n-            match *s {\n-                html_diff::Difference::NodeText { ref elem_text,\n-                                                  ref opposite_elem_text,\n-                                                  .. }\n-                    if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n-                        false\n-                }\n-                _ => true,\n+    // Save the state of USED_ID_MAP so it only gets updated once even\n+    // though we're rendering twice.\n+    let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n+    let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n+    USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n+    let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n+    let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+    differences.retain(|s| {\n+        match *s {\n+            html_diff::Difference::NodeText { ref elem_text,\n+                                              ref opposite_elem_text,\n+                                              .. }\n+                if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n+                    false\n             }\n-        });\n-\n-        if !differences.is_empty() {\n-            scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n+            _ => true,\n         }\n+    });\n \n-        pulldown_output\n-    } else {\n-        format!(\"{}\", Markdown(md_text, RenderType::Hoedown))\n-    };\n+    if !differences.is_empty() {\n+        scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n+    }\n \n-    write!(w, \"<div class='docblock'>{}{}</div>\", prefix, output)\n+    write!(w, \"<div class='docblock'>{}{}</div>\",\n+           prefix,\n+           if render_type == RenderType::Pulldown { pulldown_output } else { hoedown_output })\n }\n \n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,"}]}