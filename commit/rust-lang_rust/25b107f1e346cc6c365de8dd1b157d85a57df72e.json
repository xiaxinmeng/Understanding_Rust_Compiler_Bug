{"sha": "25b107f1e346cc6c365de8dd1b157d85a57df72e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YjEwN2YxZTM0NmNjNmMzNjVkZThkZDFiMTU3ZDg1YTU3ZGY3MmU=", "commit": {"author": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2014-01-17T00:19:52Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2014-01-23T01:32:40Z"}, "message": "Add LowerExp 'e' and UpperExp 'E' format traits/specifiers", "tree": {"sha": "2345eb6d884fdcf3c4dfa12cd4f5bdad08ff4d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2345eb6d884fdcf3c4dfa12cd4f5bdad08ff4d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b107f1e346cc6c365de8dd1b157d85a57df72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b107f1e346cc6c365de8dd1b157d85a57df72e", "html_url": "https://github.com/rust-lang/rust/commit/25b107f1e346cc6c365de8dd1b157d85a57df72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b107f1e346cc6c365de8dd1b157d85a57df72e/comments", "author": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4bd0780bb98f4171dd6464a4f01065b8d85ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4bd0780bb98f4171dd6464a4f01065b8d85ffd", "html_url": "https://github.com/rust-lang/rust/commit/2b4bd0780bb98f4171dd6464a4f01065b8d85ffd"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "5b2a792a05b1099c06d64a51cd0ef969977eb6a8", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=25b107f1e346cc6c365de8dd1b157d85a57df72e", "patch": "@@ -147,6 +147,8 @@ The current mapping of types to traits is:\n * `p` \u21d2 `Pointer`\n * `t` \u21d2 `Binary`\n * `f` \u21d2 `Float`\n+* `e` \u21d2 `LowerExp`\n+* `E` \u21d2 `UpperExp`\n * *nothing* \u21d2 `Default`\n \n What this means is that any type of argument which implements the\n@@ -578,6 +580,12 @@ pub trait Pointer { fn fmt(&Self, &mut Formatter); }\n /// Format trait for the `f` character\n #[allow(missing_doc)]\n pub trait Float { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `e` character\n+#[allow(missing_doc)]\n+pub trait LowerExp { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `E` character\n+#[allow(missing_doc)]\n+pub trait UpperExp { fn fmt(&Self, &mut Formatter); }\n \n /// The `write` function takes an output stream, a precompiled format string,\n /// and a list of arguments. The arguments will be formatted according to the\n@@ -1085,6 +1093,28 @@ macro_rules! floating(($ty:ident) => {\n             fmt.pad_integral(s.as_bytes(), \"\", *f >= 0.0);\n         }\n     }\n+\n+    impl LowerExp for $ty {\n+        fn fmt(f: &$ty, fmt: &mut Formatter) {\n+            // XXX: this shouldn't perform an allocation\n+            let s = match fmt.precision {\n+                Some(i) => ::$ty::to_str_exp_exact(f.abs(), i, false),\n+                None => ::$ty::to_str_exp_digits(f.abs(), 6, false)\n+            };\n+            fmt.pad_integral(s.as_bytes(), \"\", *f >= 0.0);\n+        }\n+    }\n+\n+    impl UpperExp for $ty {\n+        fn fmt(f: &$ty, fmt: &mut Formatter) {\n+            // XXX: this shouldn't perform an allocation\n+            let s = match fmt.precision {\n+                Some(i) => ::$ty::to_str_exp_exact(f.abs(), i, true),\n+                None => ::$ty::to_str_exp_digits(f.abs(), 6, true)\n+            };\n+            fmt.pad_integral(s.as_bytes(), \"\", *f >= 0.0);\n+        }\n+    }\n })\n floating!(f32)\n floating!(f64)"}, {"sha": "5df4b598a88739e0e4062b9405f1e0fc949d57e0", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=25b107f1e346cc6c365de8dd1b157d85a57df72e", "patch": "@@ -783,6 +783,40 @@ pub fn to_str_digits(num: f32, dig: uint) -> ~str {\n     r\n }\n \n+///\n+/// Converts a float to a string using the exponential notation with exactly the number of\n+/// provided digits after the decimal point in the significand\n+///\n+/// # Arguments\n+///\n+/// * num - The float value\n+/// * digits - The number of digits after the decimal point\n+/// * upper - Use `E` instead of `e` for the exponent sign\n+///\n+#[inline]\n+pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> ~str {\n+    let (r, _) = strconv::float_to_str_common(\n+        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n+    r\n+}\n+\n+///\n+/// Converts a float to a string using the exponential notation with the maximum number of\n+/// digits after the decimal point in the significand\n+///\n+/// # Arguments\n+///\n+/// * num - The float value\n+/// * digits - The number of digits after the decimal point\n+/// * upper - Use `E` instead of `e` for the exponent sign\n+///\n+#[inline]\n+pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> ~str {\n+    let (r, _) = strconv::float_to_str_common(\n+        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);\n+    r\n+}\n+\n impl to_str::ToStr for f32 {\n     #[inline]\n     fn to_str(&self) -> ~str { to_str_digits(*self, 8) }"}, {"sha": "6c0a2a41ec18a1034afc109e292557e8b311574b", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=25b107f1e346cc6c365de8dd1b157d85a57df72e", "patch": "@@ -785,6 +785,40 @@ pub fn to_str_digits(num: f64, dig: uint) -> ~str {\n     r\n }\n \n+///\n+/// Converts a float to a string using the exponential notation with exactly the number of\n+/// provided digits after the decimal point in the significand\n+///\n+/// # Arguments\n+///\n+/// * num - The float value\n+/// * digits - The number of digits after the decimal point\n+/// * upper - Use `E` instead of `e` for the exponent sign\n+///\n+#[inline]\n+pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> ~str {\n+    let (r, _) = strconv::float_to_str_common(\n+        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n+    r\n+}\n+\n+///\n+/// Converts a float to a string using the exponential notation with the maximum number of\n+/// digits after the decimal point in the significand\n+///\n+/// # Arguments\n+///\n+/// * num - The float value\n+/// * digits - The number of digits after the decimal point\n+/// * upper - Use `E` instead of `e` for the exponent sign\n+///\n+#[inline]\n+pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> ~str {\n+    let (r, _) = strconv::float_to_str_common(\n+        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);\n+    r\n+}\n+\n impl to_str::ToStr for f64 {\n     #[inline]\n     fn to_str(&self) -> ~str { to_str_digits(*self, 8) }"}, {"sha": "bbf6f7fff7f9e274d46f0ab9956cd51951d6cc9b", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b107f1e346cc6c365de8dd1b157d85a57df72e/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=25b107f1e346cc6c365de8dd1b157d85a57df72e", "patch": "@@ -687,6 +687,8 @@ impl<'a> Context<'a> {\n                     \"b\" => \"Bool\",\n                     \"c\" => \"Char\",\n                     \"d\" | \"i\" => \"Signed\",\n+                    \"e\" => \"LowerExp\",\n+                    \"E\" => \"UpperExp\",\n                     \"f\" => \"Float\",\n                     \"o\" => \"Octal\",\n                     \"p\" => \"Pointer\","}]}