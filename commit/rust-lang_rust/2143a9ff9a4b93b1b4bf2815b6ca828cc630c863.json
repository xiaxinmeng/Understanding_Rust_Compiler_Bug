{"sha": "2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNDNhOWZmOWE0YjkzYjFiNGJmMjgxNWI2Y2E4MjhjYzYzMGM4NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T14:57:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T14:57:41Z"}, "message": "Auto merge of #29643 - petrochenkov:stability5, r=alexcrichton\n\nAlso remove `stable` stability annotations from inherent impls\n\n(There will be a warning for useless stability annotations soon.)\n\nr? @Gankro", "tree": {"sha": "18f7b1dde96a52f8aa796155dd8e554f3f919cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f7b1dde96a52f8aa796155dd8e554f3f919cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "html_url": "https://github.com/rust-lang/rust/commit/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cd8f69a4f06d41979f95c48ec6bca2310fae995", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd8f69a4f06d41979f95c48ec6bca2310fae995", "html_url": "https://github.com/rust-lang/rust/commit/7cd8f69a4f06d41979f95c48ec6bca2310fae995"}, {"sha": "2ef07f05192c98c7441977420efde6730d730b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef07f05192c98c7441977420efde6730d730b25", "html_url": "https://github.com/rust-lang/rust/commit/2ef07f05192c98c7441977420efde6730d730b25"}], "stats": {"total": 39, "additions": 0, "deletions": 39}, "files": [{"sha": "a5a15cfe66e6d5052b82e741704f52d04dd1fe95", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -881,7 +881,6 @@ impl<T> fmt::Pointer for Arc<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Arc<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Arc<T> {\n         Arc::new(Default::default())\n     }"}, {"sha": "2e4ac13b34d02c16afd50c6a29fb6f03aaeb824f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -264,15 +264,13 @@ impl<T : ?Sized> Box<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Box<T> {\n         box Default::default()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Box<[T]> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Box<[T]> {\n         Box::<[T; 0]>::new([])\n     }"}, {"sha": "672b63eda67c71994b89ee118446208455196fe8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -508,7 +508,6 @@ impl<T: Default> Default for Rc<T> {\n     /// let x: Rc<i32> = Default::default();\n     /// ```\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Rc<T> {\n         Rc::new(Default::default())\n     }"}, {"sha": "39925ddff849d54ba4893375fe3fe381425ee3d6", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -903,7 +903,6 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Default for BTreeMap<K, V> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }"}, {"sha": "121668fbb9d9d8026853f495c66cd13360b75956", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -559,7 +559,6 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BTreeSet<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "8e6b0183d53d2d424145fa858e30c4393f8fc357", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -230,7 +230,6 @@ impl<T> LinkedList<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for LinkedList<T> {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> LinkedList<T> { LinkedList::new() }\n }\n "}, {"sha": "e6391f5c988a4bc9649ceceae9fe84e9e902b53b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -160,7 +160,6 @@ mod hack {\n /// Allocating extension methods for slices.\n #[lang = \"slice\"]\n #[cfg(not(test))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> [T] {\n     /// Returns the number of elements in the slice.\n     ///"}, {"sha": "104fbe699e09e94599428df367e7513ed994b265", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -153,7 +153,6 @@ impl ToOwned for str {\n /// Any string that can be represented as a slice.\n #[lang = \"str\"]\n #[cfg(not(test))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl str {\n     /// Returns the length of `self` in bytes.\n     ///"}, {"sha": "4255665681c8a1491823af3ebc69ff8550a1db7c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -990,7 +990,6 @@ impl_eq! { Cow<'a, str>, String }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for String {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> String {\n         String::new()\n     }"}, {"sha": "716a07be2b4b2572b176c71b73003406eb9f7ba8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -1401,7 +1401,6 @@ impl<T> Drop for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Vec<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}, {"sha": "9fcc2b3412aad444823f39d30f0459d2d2f7930e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -249,7 +249,6 @@ impl<T:Copy> Clone for Cell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default + Copy> Default for Cell<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n@@ -468,7 +467,6 @@ impl<T: Clone> Clone for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default> Default for RefCell<T> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())"}, {"sha": "302c9d0c3697440ac17bd863244df27dd477972e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -199,7 +199,6 @@ impl Eq for Ordering {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ordering {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n         (*self as i32).cmp(&(*other as i32))\n     }\n@@ -208,7 +207,6 @@ impl Ord for Ordering {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for Ordering {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {\n         (*self as i32).partial_cmp(&(*other as i32))\n     }"}, {"sha": "cbad72eae3d7d378ff1bd32bd6efdab209d28098", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -133,7 +133,6 @@ macro_rules! default_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Default for $t {\n             #[inline]\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             fn default() -> $t { $v }\n         }\n     }"}, {"sha": "a9388793f330d1edf55e9021f63bbd1c1a001a9e", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -3386,7 +3386,6 @@ impl<I: Iterator> Iterator for Peekable<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator> ExactSizeIterator for Peekable<I> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator> Peekable<I> {\n     /// Returns a reference to the next() value without advancing the iterator.\n     ///"}, {"sha": "d3f63ab4a8c4fd2aa6f138a844675aa8b6ade59b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -1636,7 +1636,6 @@ macro_rules! impl_from {\n     ($Small: ty, $Large: ty) => {\n         #[stable(feature = \"lossless_prim_conv\", since = \"1.5.0\")]\n         impl From<$Small> for $Large {\n-            #[stable(feature = \"lossless_prim_conv\", since = \"1.5.0\")]\n             #[inline]\n             fn from(small: $Small) -> $Large {\n                 small as $Large"}, {"sha": "1bfdafa7133927211b6016f455d6a3d7d8896e34", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -542,11 +542,9 @@ macro_rules! neg_impl_core {\n     ($id:ident => $body:expr, $($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Neg for $t {\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             type Output = $t;\n \n             #[inline]\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             fn neg(self) -> $t { let $id = self; $body }\n         }\n "}, {"sha": "26e00867d84d54b430277bb808abacb5b09b6edb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -756,7 +756,6 @@ impl<T: Default> Option<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> Option<T> { None }\n }\n \n@@ -940,7 +939,6 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// assert!(res == Some(vec!(2, 3)));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this\n         // performance bug is closed."}, {"sha": "6183034c084265f81e1f16a7efcba88c53adc7e9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -161,7 +161,6 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns true if the pointer is null.\n@@ -210,7 +209,6 @@ impl<T: ?Sized> *const T {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n     /// Returns true if the pointer is null."}, {"sha": "c111ea8dce6672280c1654d9ffb1958827aca05e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -257,7 +257,6 @@ pub enum Result<T, E> {\n // Type implementation\n /////////////////////////////////////////////////////////////////////////////\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, E> Result<T, E> {\n     /////////////////////////////////////////////////////////////////////////\n     // Querying the contained values\n@@ -708,7 +707,6 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n     ///\n@@ -758,7 +756,6 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Err`.\n     ///"}, {"sha": "8ba4e9605c8e85835aff695435445e89441167db", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -651,7 +651,6 @@ impl<T> ops::IndexMut<RangeFull> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Default for &'a [T] {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> &'a [T] { &[] }\n }\n "}, {"sha": "18334ba91c61d2bdb028bce15895526ab94c14a4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -1826,6 +1826,5 @@ fn char_range_at_raw(bytes: &[u8], i: usize) -> (u32, usize) {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Default for &'a str {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> &'a str { \"\" }\n }"}, {"sha": "15f46a8602076fc1f2186fb5e1fde329d8e4c7d2", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -438,7 +438,6 @@ impl AtomicBool {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AtomicIsize {\n     /// Creates a new `AtomicIsize`.\n     ///\n@@ -631,7 +630,6 @@ impl AtomicIsize {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AtomicUsize {\n     /// Creates a new `AtomicUsize`.\n     ///"}, {"sha": "33098cfcf8b6d712b9455a5273b188ee7b6b0820", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -105,7 +105,6 @@ macro_rules! tuple_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:Default),+> Default for ($($T,)+) {\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n                 #[inline]\n                 fn default() -> ($($T,)+) {\n                     ($({ let x: $T = Default::default(); x},)+)"}, {"sha": "8ef94eb16f25db4434c0e73c53f5bb3c626db5e6", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -113,7 +113,6 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for ReseedWithDefault {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> ReseedWithDefault {\n         ReseedWithDefault\n     }"}, {"sha": "f73cc6837e363e85db96b14138deb7fa214297ab", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -111,7 +111,6 @@ impl Iterator for CaseMappingIter {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"char\"]\n impl char {\n     /// Checks if a `char` is a digit in the given radix."}, {"sha": "d4cef2ab07adf2dc3a2c0cba56bb94e907c086b3", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -675,7 +675,6 @@ impl<T, S> Default for HashSet<T, S>\n     where T: Eq + Hash,\n           S: HashState + Default,\n {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn default() -> HashSet<T, S> {\n         HashSet::with_hash_state(Default::default())\n     }"}, {"sha": "657396df22a514805ece883415c165479402ce46", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -677,7 +677,6 @@ impl Iterator for ReadDir {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DirEntry {\n     /// Returns the full path to the file that this entry represents.\n     ///"}, {"sha": "34736f810339ce034de379949fadd60331cc3a63", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -1534,7 +1534,6 @@ pub struct Take<T> {\n     limit: u64,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Take<T> {\n     /// Returns the number of bytes that can be read before this instance will\n     /// return EOF."}, {"sha": "439ed40648900d896f36f511c7d9faf3e15c4536", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -120,7 +120,6 @@ mod cmath {\n \n #[cfg(not(test))]\n #[lang = \"f32\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f32 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\","}, {"sha": "aa0e7df76ab7783e4dd04993eef276d8bb712877", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143a9ff9a4b93b1b4bf2815b6ca828cc630c863/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=2143a9ff9a4b93b1b4bf2815b6ca828cc630c863", "patch": "@@ -77,7 +77,6 @@ mod cmath {\n \n #[cfg(not(test))]\n #[lang = \"f64\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f64 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\","}]}