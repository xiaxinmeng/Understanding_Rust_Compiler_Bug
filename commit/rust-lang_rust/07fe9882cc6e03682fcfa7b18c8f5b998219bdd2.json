{"sha": "07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "node_id": "C_kwDOAAsO6NoAKDA3ZmU5ODgyY2M2ZTAzNjgyZmNmYTdiMThjOGY1Yjk5ODIxOWJkZDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-30T14:17:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:31:29Z"}, "message": "add array tests, cleanup, tidy, and bless", "tree": {"sha": "5277e7ee1a3d35da9983ab738d8167704db80d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5277e7ee1a3d35da9983ab738d8167704db80d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "html_url": "https://github.com/rust-lang/rust/commit/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "html_url": "https://github.com/rust-lang/rust/commit/e4593ef0f214b7259e5f5706b2952610ae1fb5ef"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "2ddaf9201098ec8069e68e3aeb22d7936f21b36f", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -182,7 +182,7 @@ declare_features! (\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n     /// Allows `union` fields that don't implement `Copy` as long as they don't have any drop glue.\n     (removed, untagged_unions, \"1.13.0\", Some(55149), None,\n-     Some(\"unions with `Copy` and `MaybeUninit` fields are stable; there is no intent to stabilize more\")),\n+     Some(\"unions with `Copy` and `ManuallyDrop` fields are stable; there is no intent to stabilize more\")),\n     /// Allows `#[unwind(..)]`.\n     ///\n     /// Permits specifying whether a function should permit unwinding or abort on unwind."}, {"sha": "dfcd35d2178e746be43b1b25cc04fbb8b3093895", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -422,7 +422,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                 }\n                 _ => {\n                     // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n-                    ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                    ty.ty_adt_def().is_some_and(|adt_def| adt_def.is_manually_drop())\n                         || ty.is_copy_modulo_regions(tcx.at(span), param_env)\n                 }\n             }"}, {"sha": "f98ae46c58730e9f7425a3fad85cceca14b16edd", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -72,6 +72,7 @@ This API is completely unstable and subject to change.\n #![feature(once_cell)]\n #![feature(slice_partition_dedup)]\n #![feature(try_blocks)]\n+#![feature(is_some_with)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "ae5f6b2baee40613ebab6ecd1530f0b77e0873d5", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:40:1\n+  --> $DIR/invalid-union.rs:41:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ constructing invalid value at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:41:25\n+  --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n@@ -24,7 +24,7 @@ error: aborting due to 2 previous errors\n For more information about this error, try `rustc --explain E0080`.\n Future incompatibility report: Future breakage diagnostic:\n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:41:25\n+  --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "d5d1e44ac855c97fb3e8bd3ea50f4a5db90584cb", "filename": "src/test/ui/union/field_checks.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n use std::mem::ManuallyDrop;\n \n union U1 { // OK\n@@ -45,6 +44,10 @@ union U5Nested { // a nested union that drops is NOT OK\n     nest: U5, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n+union U5Nested2 { // for now we don't special-case empty arrays\n+    nest: [U5; 0], //~ ERROR unions cannot contain fields that may need dropping\n+}\n+\n union U6 { // OK\n     s: &'static i32,\n     m: &'static mut i32,\n@@ -54,4 +57,9 @@ union U7<T> { // OK\n     f: (&'static mut i32, ManuallyDrop<T>, i32),\n }\n \n+union U8<T> { // OK\n+    f1: [(&'static mut i32, i32); 8],\n+    f2: [ManuallyDrop<T>; 2],\n+}\n+\n fn main() {}"}, {"sha": "1f97e97ac6ede1de3f5b7f6357c7c4096c36ea04", "filename": "src/test/ui/union/field_checks.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,5 +1,5 @@\n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/field_checks.rs:25:5\n+  --> $DIR/field_checks.rs:24:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/field_checks.rs:29:5\n+  --> $DIR/field_checks.rs:28:5\n    |\n LL |     a: std::cell::RefCell<i32>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     a: std::mem::ManuallyDrop<std::cell::RefCell<i32>>,\n    |        +++++++++++++++++++++++                       +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/field_checks.rs:33:5\n+  --> $DIR/field_checks.rs:32:5\n    |\n LL |     a: T,\n    |     ^^^^\n@@ -35,7 +35,7 @@ LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/field_checks.rs:45:5\n+  --> $DIR/field_checks.rs:44:5\n    |\n LL |     nest: U5,\n    |     ^^^^^^^^\n@@ -46,6 +46,18 @@ help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>\n LL |     nest: std::mem::ManuallyDrop<U5>,\n    |           +++++++++++++++++++++++  +\n \n-error: aborting due to 4 previous errors\n+error[E0740]: unions cannot contain fields that may need dropping\n+  --> $DIR/field_checks.rs:48:5\n+   |\n+LL |     nest: [U5; 0],\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   |\n+LL |     nest: std::mem::ManuallyDrop<[U5; 0]>,\n+   |           +++++++++++++++++++++++       +\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0740`."}, {"sha": "4bdf7c6872fa5183f3eb4da6666db8fe778c642e", "filename": "src/test/ui/union/union-nonrepresentable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,4 +1,3 @@\n-\n union U { //~ ERROR recursive type `U` has infinite size\n     a: u8,\n     b: std::mem::ManuallyDrop<U>,"}, {"sha": "9804b1418b2080923b6741ae167298c3df9de8a6", "filename": "src/test/ui/union/union-nonrepresentable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,5 +1,5 @@\n error[E0072]: recursive type `U` has infinite size\n-  --> $DIR/union-nonrepresentable.rs:2:1\n+  --> $DIR/union-nonrepresentable.rs:1:1\n    |\n LL | union U {\n    | ^^^^^^^ recursive type has infinite size"}, {"sha": "b276c384c04ea83dfa79f12728fab4c79e07b269", "filename": "src/tools/clippy/tests/ui/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -1,7 +1,7 @@\n-#![feature(untagged_unions)]\n #![allow(dead_code)]\n #![warn(clippy::expl_impl_clone_on_copy)]\n \n+\n #[derive(Copy)]\n struct Qux;\n "}, {"sha": "f0c59b4080be3ca78c60631c67ec214afaa9acce", "filename": "src/tools/clippy/tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fe9882cc6e03682fcfa7b18c8f5b998219bdd2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs?ref=07fe9882cc6e03682fcfa7b18c8f5b998219bdd2", "patch": "@@ -4,7 +4,7 @@\n #![allow(path_statements)]\n #![allow(clippy::deref_addrof)]\n #![allow(clippy::redundant_field_names)]\n-#![feature(untagged_unions)]\n+\n \n struct Unit;\n struct Tuple(i32);"}]}