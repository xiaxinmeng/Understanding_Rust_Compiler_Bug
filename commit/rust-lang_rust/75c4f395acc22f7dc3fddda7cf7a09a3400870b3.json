{"sha": "75c4f395acc22f7dc3fddda7cf7a09a3400870b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzRmMzk1YWNjMjJmN2RjM2ZkZGRhN2NmN2EwOWEzNDAwODcwYjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-12-22T22:08:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-06T02:05:50Z"}, "message": "Strip the trait-def phase from collect, which has no function.", "tree": {"sha": "6996976eaebf6c46e4ef1ed3e68820f6dc975773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6996976eaebf6c46e4ef1ed3e68820f6dc975773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c4f395acc22f7dc3fddda7cf7a09a3400870b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c4f395acc22f7dc3fddda7cf7a09a3400870b3", "html_url": "https://github.com/rust-lang/rust/commit/75c4f395acc22f7dc3fddda7cf7a09a3400870b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c4f395acc22f7dc3fddda7cf7a09a3400870b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005fa14358d78bc2da3c68933fce0aa58159d944", "url": "https://api.github.com/repos/rust-lang/rust/commits/005fa14358d78bc2da3c68933fce0aa58159d944", "html_url": "https://github.com/rust-lang/rust/commit/005fa14358d78bc2da3c68933fce0aa58159d944"}], "stats": {"total": 50, "additions": 7, "deletions": 43}, "files": [{"sha": "d161324f5644fec798bc0f26e4eddd495e102562", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/75c4f395acc22f7dc3fddda7cf7a09a3400870b3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c4f395acc22f7dc3fddda7cf7a09a3400870b3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=75c4f395acc22f7dc3fddda7cf7a09a3400870b3", "patch": "@@ -34,13 +34,12 @@ lazilly and on demand, and include logic that checks for cycles.\n Demand is driven by calls to `AstConv::get_item_type_scheme` or\n `AstConv::lookup_trait_def`.\n \n-Currently, we \"convert\" types and traits in three phases (note that\n+Currently, we \"convert\" types and traits in two phases (note that\n conversion only affects the types of items / enum variants / methods;\n it does not e.g. compute the types of individual expressions):\n \n 0. Intrinsics\n-1. Trait definitions\n-2. Type definitions\n+1. Trait/Type definitions\n \n Conversion itself is done by simply walking each of the items in turn\n and invoking an appropriate function (e.g., `trait_def_of_item` or\n@@ -56,11 +55,6 @@ There are some shortcomings in this design:\n - Because the type scheme includes defaults, cycles through type\n   parameter defaults are illegal even if those defaults are never\n   employed. This is not necessarily a bug.\n-- The phasing of trait definitions before type definitions does not\n-  seem to be necessary, sufficient, or particularly helpful, given that\n-  processing a trait definition can trigger processing a type def and\n-  vice versa. However, if I remove it, I get ICEs, so some more work is\n-  needed in that area. -nmatsakis\n \n */\n \n@@ -105,9 +99,6 @@ use rustc_front::print::pprust;\n pub fn collect_item_types(tcx: &ty::ctxt) {\n     let ccx = &CrateCtxt { tcx: tcx, stack: RefCell::new(Vec::new()) };\n \n-    let mut visitor = CollectTraitDefVisitor{ ccx: ccx };\n-    ccx.tcx.map.krate().visit_all_items(&mut visitor);\n-\n     let mut visitor = CollectItemTypesVisitor{ ccx: ccx };\n     ccx.tcx.map.krate().visit_all_items(&mut visitor);\n }\n@@ -147,28 +138,6 @@ enum AstConvRequest {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// First phase: just collect *trait definitions* -- basically, the set\n-// of type parameters and supertraits. This is information we need to\n-// know later when parsing field defs.\n-\n-struct CollectTraitDefVisitor<'a, 'tcx: 'a> {\n-    ccx: &'a CrateCtxt<'a, 'tcx>\n-}\n-\n-impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CollectTraitDefVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &hir::Item) {\n-        match i.node {\n-            hir::ItemTrait(..) => {\n-                // computing the trait def also fills in the table\n-                let _ = trait_def_of_item(self.ccx, i);\n-            }\n-            _ => { }\n-        }\n-    }\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// Second phase: collection proper.\n \n struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n@@ -1286,16 +1255,11 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         substs: substs,\n     };\n \n-    let trait_def = ty::TraitDef {\n-        paren_sugar: paren_sugar,\n-        unsafety: unsafety,\n-        generics: ty_generics,\n-        trait_ref: trait_ref,\n-        associated_type_names: associated_type_names,\n-        nonblanket_impls: RefCell::new(FnvHashMap()),\n-        blanket_impls: RefCell::new(vec![]),\n-        flags: Cell::new(ty::TraitFlags::NO_TRAIT_FLAGS)\n-    };\n+    let trait_def = ty::TraitDef::new(unsafety,\n+                                      paren_sugar,\n+                                      ty_generics,\n+                                      trait_ref,\n+                                      associated_type_names);\n \n     return tcx.intern_trait_def(trait_def);\n "}]}