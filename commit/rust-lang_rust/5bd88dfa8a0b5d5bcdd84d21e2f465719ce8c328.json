{"sha": "5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "node_id": "C_kwDOAAsO6NoAKDViZDg4ZGZhOGEwYjVkNWJjZGQ4NGQyMWUyZjQ2NTcxOWNlOGMzMjg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T22:33:36Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T22:33:36Z"}, "message": "Add a note about privacy to wrapping suggestion", "tree": {"sha": "0e23b2e8de0d6dc7b59f84bf91abce5e55f35ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e23b2e8de0d6dc7b59f84bf91abce5e55f35ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "html_url": "https://github.com/rust-lang/rust/commit/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2edad7d77c91145b594ac80c3dc7906998b7674a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edad7d77c91145b594ac80c3dc7906998b7674a", "html_url": "https://github.com/rust-lang/rust/commit/2edad7d77c91145b594ac80c3dc7906998b7674a"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "a2d8765289c55498ae098f049d3ea424b386a5aa", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            let compatible_variants: Vec<String> = expected_adt\n+            let compatible_variants: Vec<(String, Option<String>)> = expected_adt\n                 .variants()\n                 .iter()\n                 .filter(|variant| {\n@@ -357,14 +357,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n \n-                    if !sole_field.did.is_local()\n-                        && !sole_field\n-                            .vis\n-                            .is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx)\n-                    {\n+                    let field_is_local = sole_field.did.is_local();\n+                    let field_is_accessible =\n+                        sole_field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx);\n+\n+                    if !field_is_local && !field_is_accessible {\n                         return None;\n                     }\n \n+                    let note_about_variant_field_privacy = (field_is_local && !field_is_accessible)\n+                        .then(|| format!(\" (its field is private, but it's local to this crate and its privacy can be changed)\"));\n+\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path =\n@@ -373,9 +376,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\")\n                             && let Some((_, path)) = path.split_once(\"::\")\n                         {\n-                            return Some(path.to_string());\n+                            return Some((path.to_string(), note_about_variant_field_privacy));\n                         }\n-                        Some(variant_path)\n+                        Some((variant_path, note_about_variant_field_privacy))\n                     } else {\n                         None\n                     }\n@@ -389,10 +392,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match &compatible_variants[..] {\n                 [] => { /* No variants to format */ }\n-                [variant] => {\n+                [(variant, note)] => {\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n-                        &format!(\"try wrapping the expression in `{variant}`\"),\n+                        &format!(\n+                            \"try wrapping the expression in `{variant}`{note}\",\n+                            note = note.as_deref().unwrap_or(\"\")\n+                        ),\n                         vec![\n                             (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -407,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"try wrapping the expression in a variant of `{}`\",\n                             self.tcx.def_path_str(expected_adt.did())\n                         ),\n-                        compatible_variants.into_iter().map(|variant| {\n+                        compatible_variants.into_iter().map(|(variant, _)| {\n                             vec![\n                                 (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                                 (expr.span.shrink_to_hi(), \")\".to_string()),"}, {"sha": "e8eb8d263ec795d068e71d14ef464dc56020a7e4", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "patch": "@@ -13,7 +13,7 @@ note: function defined here\n    |\n LL | fn needs_wrapper(t: inner::Wrapper<i32>) {}\n    |    ^^^^^^^^^^^^^ ----------------------\n-help: try wrapping the expression in `inner::Wrapper`\n+help: try wrapping the expression in `inner::Wrapper` (its field is private, but it's local to this crate and its privacy can be changed)\n    |\n LL |     needs_wrapper(inner::Wrapper(0));\n    |                   +++++++++++++++ +"}]}