{"sha": "114a1b878e95c20490af574550ea0825b7a8f9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNGExYjg3OGU5NWMyMDQ5MGFmNTc0NTUwZWEwODI1YjdhOGY5ZDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:34:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:34:52Z"}, "message": "rename AdtDef -> Adt", "tree": {"sha": "3fe7cb05dc4d92d19ecbb87bfafc4a9ff202153e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe7cb05dc4d92d19ecbb87bfafc4a9ff202153e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114a1b878e95c20490af574550ea0825b7a8f9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114a1b878e95c20490af574550ea0825b7a8f9d1", "html_url": "https://github.com/rust-lang/rust/commit/114a1b878e95c20490af574550ea0825b7a8f9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114a1b878e95c20490af574550ea0825b7a8f9d1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf30d389c3744ab517372431eb7e1e1dfcc50df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf30d389c3744ab517372431eb7e1e1dfcc50df", "html_url": "https://github.com/rust-lang/rust/commit/bcf30d389c3744ab517372431eb7e1e1dfcc50df"}], "stats": {"total": 189, "additions": 90, "deletions": 99}, "files": [{"sha": "543ed164c7773767ea19dabf2e68252fb986a03e", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -1,6 +1,6 @@\n use std::iter;\n \n-use hir::{db::HirDatabase, AdtDef, HasSource};\n+use hir::{db::HirDatabase, Adt, HasSource};\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{ast_editor::AstBuilder, Assist, AssistCtx, AssistId};\n@@ -60,7 +60,7 @@ fn resolve_enum_def(\n     let expr_ty = analyzer.type_of(db, &expr)?;\n \n     analyzer.autoderef(db, expr_ty).find_map(|ty| match ty.as_adt() {\n-        Some((AdtDef::Enum(e), _)) => Some(e.source(db).ast),\n+        Some((Adt::Enum(e), _)) => Some(e.source(db).ast),\n         _ => None,\n     })\n }"}, {"sha": "c1938bd8670486b74927a03b39ad016a22e384d4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -127,7 +127,7 @@ impl BuiltinType {\n pub enum ModuleDef {\n     Module(Module),\n     Function(Function),\n-    AdtDef(AdtDef),\n+    Adt(Adt),\n     // Can't be directly declared, but can be imported.\n     EnumVariant(EnumVariant),\n     Const(Const),\n@@ -139,7 +139,7 @@ pub enum ModuleDef {\n impl_froms!(\n     ModuleDef: Module,\n     Function,\n-    AdtDef(Struct, Enum, Union),\n+    Adt(Struct, Enum, Union),\n     EnumVariant,\n     Const,\n     Static,\n@@ -496,37 +496,38 @@ impl EnumVariant {\n     }\n }\n \n+/// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum AdtDef {\n+pub enum Adt {\n     Struct(Struct),\n     Union(Union),\n     Enum(Enum),\n }\n-impl_froms!(AdtDef: Struct, Union, Enum);\n+impl_froms!(Adt: Struct, Union, Enum);\n \n-impl AdtDef {\n+impl Adt {\n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n         match self {\n-            AdtDef::Struct(it) => it.ty(db),\n-            AdtDef::Union(it) => it.ty(db),\n-            AdtDef::Enum(it) => it.ty(db),\n+            Adt::Struct(it) => it.ty(db),\n+            Adt::Union(it) => it.ty(db),\n+            Adt::Enum(it) => it.ty(db),\n         }\n     }\n \n     pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n         match self {\n-            AdtDef::Struct(s) => s.module(db),\n-            AdtDef::Union(s) => s.module(db),\n-            AdtDef::Enum(e) => e.module(db),\n+            Adt::Struct(s) => s.module(db),\n+            Adt::Union(s) => s.module(db),\n+            Adt::Enum(e) => e.module(db),\n         }\n         .krate(db)\n     }\n \n     pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         match self {\n-            AdtDef::Struct(it) => it.resolver(db),\n-            AdtDef::Union(it) => it.resolver(db),\n-            AdtDef::Enum(it) => it.resolver(db),\n+            Adt::Struct(it) => it.resolver(db),\n+            Adt::Union(it) => it.resolver(db),\n+            Adt::Enum(it) => it.resolver(db),\n         }\n     }\n }"}, {"sha": "030ec53a29d68433ffe4fb39139e276b0eba0591", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    AdtDef, Function, Name, Path,\n+    Adt, Function, Name, Path,\n };\n \n use super::{Expr, ExprId, RecordLitField};\n@@ -58,7 +58,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         let struct_def = match self.infer[id].as_adt() {\n-            Some((AdtDef::Struct(s), _)) => s,\n+            Some((Adt::Struct(s), _)) => s,\n             _ => return,\n         };\n \n@@ -123,7 +123,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             _ => return,\n         };\n \n-        let std_result_ctor = TypeCtor::Adt(AdtDef::Enum(std_result_enum));\n+        let std_result_ctor = TypeCtor::Adt(Adt::Enum(std_result_enum));\n         let params = match &mismatch.expected {\n             Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &std_result_ctor => parameters,\n             _ => return,"}, {"sha": "77fb76bfcc1c55815a09ebcc98444a665615c651", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     name::SELF_TYPE,\n     path::Path,\n     type_ref::{TypeBound, TypeRef},\n-    AdtDef, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n-    Trait, TypeAlias, Union,\n+    Adt, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -47,7 +47,7 @@ pub struct WherePredicate {\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDef {\n     Function(Function),\n-    AdtDef(AdtDef),\n+    Adt(Adt),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n@@ -57,7 +57,7 @@ pub enum GenericDef {\n }\n impl_froms!(\n     GenericDef: Function,\n-    AdtDef(Struct, Enum, Union),\n+    Adt(Struct, Enum, Union),\n     Trait,\n     TypeAlias,\n     ImplBlock,\n@@ -74,17 +74,17 @@ impl GenericParams {\n             GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n             GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n-            GenericDef::AdtDef(_) | GenericDef::Trait(_) => None,\n+            GenericDef::Adt(_) | GenericDef::Trait(_) => None,\n             GenericDef::ImplBlock(_) => None,\n         };\n         generics.parent_params = parent.map(|p| db.generic_params(p));\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n             GenericDef::Function(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::AdtDef(AdtDef::Struct(it)) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::AdtDef(AdtDef::Union(it)) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::AdtDef(AdtDef::Enum(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::Adt(Adt::Struct(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::Adt(Adt::Union(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::Adt(Adt::Enum(it)) => generics.fill(&it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam { idx: start, name: SELF_TYPE, default: None });\n@@ -188,7 +188,7 @@ impl GenericDef {\n     pub(crate) fn resolver(&self, db: &impl HirDatabase) -> crate::Resolver {\n         match self {\n             GenericDef::Function(inner) => inner.resolver(db),\n-            GenericDef::AdtDef(adt) => adt.resolver(db),\n+            GenericDef::Adt(adt) => adt.resolver(db),\n             GenericDef::Trait(inner) => inner.resolver(db),\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n             GenericDef::ImplBlock(inner) => inner.resolver(db),"}, {"sha": "e3b71cec31865e428a424621cc3efa742130ecb6", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{ast::AttrsOwner, SmolStr};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    AdtDef, Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n+    Adt, Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -107,10 +107,8 @@ impl LangItems {\n                 ModuleDef::Trait(trait_) => {\n                     self.collect_lang_item(db, trait_, LangItemTarget::Trait)\n                 }\n-                ModuleDef::AdtDef(AdtDef::Enum(e)) => {\n-                    self.collect_lang_item(db, e, LangItemTarget::Enum)\n-                }\n-                ModuleDef::AdtDef(AdtDef::Struct(s)) => {\n+                ModuleDef::Adt(Adt::Enum(e)) => self.collect_lang_item(db, e, LangItemTarget::Enum),\n+                ModuleDef::Adt(Adt::Struct(s)) => {\n                     self.collect_lang_item(db, s, LangItemTarget::Struct)\n                 }\n                 ModuleDef::Function(f) => self.collect_lang_item(db, f, LangItemTarget::Function),"}, {"sha": "508da362315d315f23df3f2921f3c9465e3246e5", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -85,7 +85,7 @@ pub use self::{\n pub use self::code_model::{\n     docs::{DocDef, Docs, Documentation},\n     src::{HasBodySource, HasSource, Source},\n-    AdtDef, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n+    Adt, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n     EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef, ModuleSource,\n     Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "3a3bf6b5f70b0981fc82d9ad7c82a141e11f050e", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -69,8 +69,8 @@ use crate::{\n     diagnostics::DiagnosticSink,\n     ids::MacroDefId,\n     nameres::diagnostics::DefDiagnostic,\n-    AdtDef, AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path,\n-    PathKind, Trait,\n+    Adt, AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind,\n+    Trait,\n };\n \n pub(crate) use self::raw::{ImportSourceMap, RawItems};\n@@ -426,7 +426,7 @@ impl CrateDefMap {\n                         }\n                     }\n                 }\n-                ModuleDef::AdtDef(AdtDef::Enum(e)) => {\n+                ModuleDef::Adt(Adt::Enum(e)) => {\n                     // enum variant\n                     tested_by!(can_import_enum_variant);\n                     match e.variant(db, &segment.name) {"}, {"sha": "7d2f313c1d4ef7ece51ac9e031feef4b1e4bbfff", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -13,8 +13,8 @@ use crate::{\n         raw, Crate, CrateDefMap, CrateModuleId, ModuleData, ModuleDef, PerNs, ReachedFixedPoint,\n         Resolution, ResolveMode,\n     },\n-    AdtDef, AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind,\n-    Static, Struct, Trait, TypeAlias, Union,\n+    Adt, AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind, Static,\n+    Struct, Trait, TypeAlias, Union,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -314,7 +314,7 @@ where\n                             .push((module_id, import_id));\n                     }\n                 }\n-                Some(ModuleDef::AdtDef(AdtDef::Enum(e))) => {\n+                Some(ModuleDef::Adt(Adt::Enum(e))) => {\n                     tested_by!(glob_enum);\n                     // glob import from enum => just import all the variants\n                     let variants = e.variants(self.db);"}, {"sha": "a77a9aeb19af4db6dd5f720f4d75341b9d85f0f2", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, CrateModuleId, PerNs},\n     path::Path,\n-    AdtDef, Enum, MacroDef, ModuleDef, Struct, Trait,\n+    Adt, Enum, MacroDef, ModuleDef, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -143,7 +143,7 @@ impl Resolver {\n     ) -> Option<Struct> {\n         let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n         match res {\n-            Resolution::Def(ModuleDef::AdtDef(AdtDef::Struct(it))) => Some(it),\n+            Resolution::Def(ModuleDef::Adt(Adt::Struct(it))) => Some(it),\n             _ => None,\n         }\n     }\n@@ -152,7 +152,7 @@ impl Resolver {\n     pub(crate) fn resolve_known_enum(&self, db: &impl HirDatabase, path: &Path) -> Option<Enum> {\n         let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n         match res {\n-            Resolution::Def(ModuleDef::AdtDef(AdtDef::Enum(it))) => Some(it),\n+            Resolution::Def(ModuleDef::Adt(Adt::Enum(it))) => Some(it),\n             _ => None,\n         }\n     }"}, {"sha": "375850b92ee08a2e871b04c8183a45f814a2dabd", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -16,7 +16,7 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, mem};\n \n-use crate::{db::HirDatabase, type_ref::Mutability, AdtDef, GenericParams, Name, Trait, TypeAlias};\n+use crate::{db::HirDatabase, type_ref::Mutability, Adt, GenericParams, Name, Trait, TypeAlias};\n use display::{HirDisplay, HirFormatter};\n \n pub(crate) use autoderef::autoderef;\n@@ -47,7 +47,7 @@ pub enum TypeCtor {\n     Float(primitive::UncertainFloatTy),\n \n     /// Structures, enumerations and unions.\n-    Adt(AdtDef),\n+    Adt(Adt),\n \n     /// The pointee of a string slice. Written as `str`.\n     Str,\n@@ -458,7 +458,7 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_adt(&self) -> Option<(AdtDef, &Substs)> {\n+    pub fn as_adt(&self) -> Option<(Adt, &Substs)> {\n         match self {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_def), parameters }) => {\n                 Some((*adt_def, parameters))\n@@ -726,9 +726,9 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::Adt(def_id) => {\n                 let name = match def_id {\n-                    AdtDef::Struct(s) => s.name(f.db),\n-                    AdtDef::Union(u) => u.name(f.db),\n-                    AdtDef::Enum(e) => e.name(f.db),\n+                    Adt::Struct(s) => s.name(f.db),\n+                    Adt::Union(u) => u.name(f.db),\n+                    Adt::Enum(e) => e.name(f.db),\n                 }\n                 .unwrap_or_else(Name::missing);\n                 write!(f, \"{}\", name)?;"}, {"sha": "540a99b152b1289645875ffec50c2bca8201d01d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -48,7 +48,7 @@ use crate::{\n     resolve::{Resolution, Resolver},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, ImplItem, ModuleDef, Name, Path,\n+    Adt, ConstData, DefWithBody, FnData, Function, HasBody, ImplItem, ModuleDef, Name, Path,\n     StructField,\n };\n \n@@ -668,7 +668,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // FIXME remove the duplication between here and `Ty::from_path`?\n         let substs = Ty::substs_from_path(self.db, resolver, path, def);\n         match def {\n-            TypableDef::AdtDef(AdtDef::Struct(s)) => {\n+            TypableDef::Adt(Adt::Struct(s)) => {\n                 let ty = s.ty(self.db);\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(s.into()))\n@@ -678,8 +678,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::AdtDef(AdtDef::Enum(_))\n-            | TypableDef::AdtDef(AdtDef::Union(_))\n+            TypableDef::Adt(Adt::Enum(_))\n+            | TypableDef::Adt(Adt::Union(_))\n             | TypableDef::TypeAlias(_)\n             | TypableDef::Function(_)\n             | TypableDef::Const(_)\n@@ -1185,7 +1185,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             let i = name.to_string().parse::<usize>().ok();\n                             i.and_then(|i| a_ty.parameters.0.get(i).cloned())\n                         }\n-                        TypeCtor::Adt(AdtDef::Struct(s)) => s.field(self.db, name).map(|field| {\n+                        TypeCtor::Adt(Adt::Struct(s)) => s.field(self.db, name).map(|field| {\n                             self.write_field_resolution(tgt_expr, field);\n                             field.ty(self.db).subst(&a_ty.parameters)\n                         }),\n@@ -1489,7 +1489,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         trait_.associated_type_by_name(self.db, &name::OUTPUT)\n     }\n \n-    fn resolve_boxed_box(&self) -> Option<AdtDef> {\n+    fn resolve_boxed_box(&self) -> Option<Adt> {\n         let boxed_box_path = Path {\n             kind: PathKind::Abs,\n             segments: vec![\n@@ -1499,7 +1499,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             ],\n         };\n         let struct_ = self.resolver.resolve_known_struct(self.db, &boxed_box_path)?;\n-        Some(AdtDef::Struct(struct_))\n+        Some(Adt::Struct(struct_))\n     }\n }\n "}, {"sha": "946e9e9fb848bd73639fc901fd1b7676383f024d", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     nameres::Namespace,\n     path::{GenericArg, PathSegment},\n     resolve::{Resolution, Resolver},\n-    ty::AdtDef,\n+    ty::Adt,\n     type_ref::{TypeBound, TypeRef},\n     BuiltinType, Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField,\n     Trait, TypeAlias, Union,\n@@ -172,7 +172,7 @@ impl Ty {\n     ) -> Substs {\n         let def_generic: Option<GenericDef> = match resolved {\n             TypableDef::Function(func) => Some(func.into()),\n-            TypableDef::AdtDef(adt) => Some(adt.into()),\n+            TypableDef::Adt(adt) => Some(adt.into()),\n             TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n             TypableDef::TypeAlias(t) => Some(t.into()),\n             TypableDef::Const(_) | TypableDef::Static(_) | TypableDef::BuiltinType(_) => None,\n@@ -191,7 +191,7 @@ impl Ty {\n         let last = path.segments.last().expect(\"path should have at least one segment\");\n         let segment = match resolved {\n             TypableDef::Function(_)\n-            | TypableDef::AdtDef(_)\n+            | TypableDef::Adt(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n             | TypableDef::TypeAlias(_)\n@@ -406,10 +406,8 @@ fn assoc_type_bindings_from_type_bound<'a>(\n pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace) -> Ty {\n     match (def, ns) {\n         (TypableDef::Function(f), Namespace::Values) => type_for_fn(db, f),\n-        (TypableDef::AdtDef(AdtDef::Struct(s)), Namespace::Values) => {\n-            type_for_struct_constructor(db, s)\n-        }\n-        (TypableDef::AdtDef(adt), Namespace::Types) => type_for_adt(db, adt),\n+        (TypableDef::Adt(Adt::Struct(s)), Namespace::Values) => type_for_struct_constructor(db, s),\n+        (TypableDef::Adt(adt), Namespace::Types) => type_for_adt(db, adt),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n@@ -418,8 +416,8 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n-        (TypableDef::AdtDef(AdtDef::Union(_)), Namespace::Values) => Ty::Unknown,\n-        (TypableDef::AdtDef(AdtDef::Enum(_)), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::Adt(Adt::Union(_)), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::Adt(Adt::Enum(_)), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n@@ -587,7 +585,7 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) ->\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n \n-fn type_for_adt(db: &impl HirDatabase, adt: impl Into<AdtDef> + HasGenericParams) -> Ty {\n+fn type_for_adt(db: &impl HirDatabase, adt: impl Into<Adt> + HasGenericParams) -> Ty {\n     let generics = adt.generic_params(db);\n     Ty::apply(TypeCtor::Adt(adt.into()), Substs::identity(&generics))\n }\n@@ -604,7 +602,7 @@ fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum TypableDef {\n     Function(Function),\n-    AdtDef(AdtDef),\n+    Adt(Adt),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     Const(Const),\n@@ -613,7 +611,7 @@ pub enum TypableDef {\n }\n impl_froms!(\n     TypableDef: Function,\n-    AdtDef(Struct, Enum, Union),\n+    Adt(Struct, Enum, Union),\n     EnumVariant,\n     TypeAlias,\n     Const,\n@@ -625,7 +623,7 @@ impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n         let res = match def {\n             ModuleDef::Function(f) => f.into(),\n-            ModuleDef::AdtDef(adt) => adt.into(),\n+            ModuleDef::Adt(adt) => adt.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n             ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(v) => v.into(),"}, {"sha": "9e64c86590c9b837416433f2227f9365824a4d6d", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -1,4 +1,4 @@\n-use hir::{AdtDef, Ty, TypeCtor};\n+use hir::{Adt, Ty, TypeCtor};\n \n use crate::completion::completion_item::CompletionKind;\n use crate::{\n@@ -37,7 +37,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n     for receiver in ctx.analyzer.autoderef(ctx.db, receiver) {\n         if let Ty::Apply(a_ty) = receiver {\n             match a_ty.ctor {\n-                TypeCtor::Adt(AdtDef::Struct(s)) => {\n+                TypeCtor::Adt(Adt::Struct(s)) => {\n                     for field in s.fields(ctx.db) {\n                         acc.add_field(ctx, field, &a_ty.parameters);\n                     }"}, {"sha": "4d3414f33babec45acfe42521b5c568343f1e197", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -1,4 +1,4 @@\n-use hir::{AdtDef, Either, Resolution};\n+use hir::{Adt, Either, Resolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -37,14 +37,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 acc.add_resolution(ctx, name.to_string(), &res.def.map(hir::Resolution::Def));\n             }\n         }\n-        hir::ModuleDef::AdtDef(_) | hir::ModuleDef::TypeAlias(_) => {\n-            if let hir::ModuleDef::AdtDef(AdtDef::Enum(e)) = def {\n+        hir::ModuleDef::Adt(_) | hir::ModuleDef::TypeAlias(_) => {\n+            if let hir::ModuleDef::Adt(Adt::Enum(e)) = def {\n                 for variant in e.variants(ctx.db) {\n                     acc.add_enum_variant(ctx, variant);\n                 }\n             }\n             let ty = match def {\n-                hir::ModuleDef::AdtDef(adt) => adt.ty(ctx.db),\n+                hir::ModuleDef::Adt(adt) => adt.ty(ctx.db),\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };"}, {"sha": "fb7f9feb8ceca3988347e60fb2af64f4d410c493", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -15,7 +15,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n             _ => continue,\n         };\n         match def {\n-            hir::ModuleDef::AdtDef(hir::AdtDef::Enum(..))\n+            hir::ModuleDef::Adt(hir::Adt::Enum(..))\n             | hir::ModuleDef::EnumVariant(..)\n             | hir::ModuleDef::Const(..)\n             | hir::ModuleDef::Module(..) => (),"}, {"sha": "95bbd34b71a9b7e14d2556d13088d2eb52c59920", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -67,15 +67,13 @@ impl Completions {\n             Resolution::Def(Function(func)) => {\n                 return self.add_function_with_name(ctx, Some(local_name), *func);\n             }\n-            Resolution::Def(AdtDef(hir::AdtDef::Struct(it))) => {\n+            Resolution::Def(Adt(hir::Adt::Struct(it))) => {\n                 (CompletionItemKind::Struct, it.docs(ctx.db))\n             }\n-            Resolution::Def(AdtDef(hir::AdtDef::Union(it))) => {\n+            Resolution::Def(Adt(hir::Adt::Union(it))) => {\n                 (CompletionItemKind::Struct, it.docs(ctx.db))\n             }\n-            Resolution::Def(AdtDef(hir::AdtDef::Enum(it))) => {\n-                (CompletionItemKind::Enum, it.docs(ctx.db))\n-            }\n+            Resolution::Def(Adt(hir::Adt::Enum(it))) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n             Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n             Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n             Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),"}, {"sha": "03382ab3cba9c437aeda0bb386218baf87b8eaf3", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -178,11 +178,11 @@ impl NavigationTarget {\n         )\n     }\n \n-    pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::AdtDef) -> NavigationTarget {\n+    pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::Adt) -> NavigationTarget {\n         match adt_def {\n-            hir::AdtDef::Struct(it) => NavigationTarget::from_def_source(db, it),\n-            hir::AdtDef::Union(it) => NavigationTarget::from_def_source(db, it),\n-            hir::AdtDef::Enum(it) => NavigationTarget::from_def_source(db, it),\n+            hir::Adt::Struct(it) => NavigationTarget::from_def_source(db, it),\n+            hir::Adt::Union(it) => NavigationTarget::from_def_source(db, it),\n+            hir::Adt::Enum(it) => NavigationTarget::from_def_source(db, it),\n         }\n     }\n \n@@ -193,7 +193,7 @@ impl NavigationTarget {\n         let nav = match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_def_source(db, func),\n-            hir::ModuleDef::AdtDef(it) => NavigationTarget::from_adt_def(db, it),\n+            hir::ModuleDef::Adt(it) => NavigationTarget::from_adt_def(db, it),\n             hir::ModuleDef::Const(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::Static(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::EnumVariant(it) => NavigationTarget::from_def_source(db, it),"}, {"sha": "28a6bef12d4fb5c02c7c7ffff98fb55b08578593", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -1,4 +1,4 @@\n-use hir::{AdtDef, HasSource, HirDisplay};\n+use hir::{Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{\n@@ -129,13 +129,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         }\n                     }\n                     hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::AdtDef(AdtDef::Struct(it)) => {\n-                        res.extend(from_def_source(db, it))\n-                    }\n-                    hir::ModuleDef::AdtDef(AdtDef::Union(it)) => {\n-                        res.extend(from_def_source(db, it))\n-                    }\n-                    hir::ModuleDef::AdtDef(AdtDef::Enum(it)) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n@@ -149,9 +145,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {\n                     res.extend(match adt_def {\n-                        hir::AdtDef::Struct(it) => from_def_source(db, it),\n-                        hir::AdtDef::Union(it) => from_def_source(db, it),\n-                        hir::AdtDef::Enum(it) => from_def_source(db, it),\n+                        hir::Adt::Struct(it) => from_def_source(db, it),\n+                        hir::Adt::Union(it) => from_def_source(db, it),\n+                        hir::Adt::Enum(it) => from_def_source(db, it),\n                     })\n                 }\n             }"}, {"sha": "6c2a7b260b4e51314b795edce14f5ccdf1b52f0d", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn classify_name_ref(\n         let record_lit = field_expr.syntax().ancestors().find_map(ast::RecordLit::cast);\n \n         if let Some(ty) = record_lit.and_then(|lit| analyzer.type_of(db, &lit.into())) {\n-            if let Some((hir::AdtDef::Struct(s), _)) = ty.as_adt() {\n+            if let Some((hir::Adt::Struct(s), _)) = ty.as_adt() {\n                 let hir_path = hir::Path::from_name_ref(name_ref);\n                 let hir_name = hir_path.as_ident().unwrap();\n "}, {"sha": "86ab3a26056e80c12268ae9ce0b8577f9a4ea0c0", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114a1b878e95c20490af574550ea0825b7a8f9d1/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=114a1b878e95c20490af574550ea0825b7a8f9d1", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(AssocItem(hir::ImplItem::TypeAlias(_))) => \"type\",\n                         Some(Def(hir::ModuleDef::Module(_))) => \"module\",\n                         Some(Def(hir::ModuleDef::Function(_))) => \"function\",\n-                        Some(Def(hir::ModuleDef::AdtDef(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::Adt(_))) => \"type\",\n                         Some(Def(hir::ModuleDef::EnumVariant(_))) => \"constant\",\n                         Some(Def(hir::ModuleDef::Const(_))) => \"constant\",\n                         Some(Def(hir::ModuleDef::Static(_))) => \"constant\","}]}