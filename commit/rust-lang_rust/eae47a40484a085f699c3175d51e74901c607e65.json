{"sha": "eae47a40484a085f699c3175d51e74901c607e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTQ3YTQwNDg0YTA4NWY2OTljMzE3NWQ1MWU3NDkwMWM2MDdlNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T22:36:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T22:36:14Z"}, "message": "Auto merge of #54734 - pawroman:fix_range_borrowing_suggestion, r=varkor\n\nFix range literals borrowing suggestions\n\nFixes #54505. The compiler issued incorrect range borrowing suggestions (missing `()` around borrows of range literals). This was not correct syntax (see the issue for an example).\n\nWith changes in this PR, this is fixed for all types of `Range` literals.\n\nThanks again to @varkor and @estebank for their invaluable help and guidance.\n\nr? @varkor", "tree": {"sha": "cc668188444c2ecdbc605b7855bc98ce9fcf960e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc668188444c2ecdbc605b7855bc98ce9fcf960e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae47a40484a085f699c3175d51e74901c607e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae47a40484a085f699c3175d51e74901c607e65", "html_url": "https://github.com/rust-lang/rust/commit/eae47a40484a085f699c3175d51e74901c607e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae47a40484a085f699c3175d51e74901c607e65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96cafc53cfc6667a03c8e77d8e0a2fc96555ff6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cafc53cfc6667a03c8e77d8e0a2fc96555ff6b", "html_url": "https://github.com/rust-lang/rust/commit/96cafc53cfc6667a03c8e77d8e0a2fc96555ff6b"}, {"sha": "1f7dafbb778dc9bff6a13828813fbcd105d977c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7dafbb778dc9bff6a13828813fbcd105d977c9", "html_url": "https://github.com/rust-lang/rust/commit/1f7dafbb778dc9bff6a13828813fbcd105d977c9"}], "stats": {"total": 667, "additions": 664, "deletions": 3}, "files": [{"sha": "85b6bcbd144fc7a8debf1e8d8444b1efdcb94f81", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 72, "deletions": 3, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -309,11 +309,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n-                        let sugg_expr = match expr.node { // parenthesize if needed (Issue #46756)\n+                        let needs_parens = match expr.node {\n+                            // parenthesize if needed (Issue #46756)\n                             hir::ExprKind::Cast(_, _) |\n-                            hir::ExprKind::Binary(_, _, _) => format!(\"({})\", src),\n-                            _ => src,\n+                            hir::ExprKind::Binary(_, _, _) => true,\n+                            // parenthesize borrows of range literals (Issue #54505)\n+                            _ if self.is_range_literal(expr) => true,\n+                            _ => false,\n                         };\n+                        let sugg_expr = if needs_parens {\n+                            format!(\"({})\", src)\n+                        } else {\n+                            src\n+                        };\n+\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n                         }\n@@ -374,6 +383,66 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n+    /// This function checks if the specified expression is a built-in range literal.\n+    /// (See: `LoweringContext::lower_expr()` in `src/librustc/hir/lowering.rs`).\n+    fn is_range_literal(&self, expr: &hir::Expr) -> bool {\n+        use hir::{Path, QPath, ExprKind, TyKind};\n+\n+        // We support `::std::ops::Range` and `::core::ops::Range` prefixes\n+        let is_range_path = |path: &Path| {\n+            let mut segs = path.segments.iter()\n+                .map(|seg| seg.ident.as_str());\n+\n+            if let (Some(root), Some(std_core), Some(ops), Some(range), None) =\n+                (segs.next(), segs.next(), segs.next(), segs.next(), segs.next())\n+            {\n+                // \"{{root}}\" is the equivalent of `::` prefix in Path\n+                root == \"{{root}}\" && (std_core == \"std\" || std_core == \"core\")\n+                    && ops == \"ops\" && range.starts_with(\"Range\")\n+            } else {\n+                false\n+            }\n+        };\n+\n+        let span_is_range_literal = |span: &Span| {\n+            // Check whether a span corresponding to a range expression\n+            // is a range literal, rather than an explicit struct or `new()` call.\n+            let source_map = self.tcx.sess.source_map();\n+            let end_point = source_map.end_point(*span);\n+\n+            if let Ok(end_string) = source_map.span_to_snippet(end_point) {\n+                !(end_string.ends_with(\"}\") || end_string.ends_with(\")\"))\n+            } else {\n+                false\n+            }\n+        };\n+\n+        match expr.node {\n+            // All built-in range literals but `..=` and `..` desugar to Structs\n+            ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n+            // `..` desugars to its struct path\n+            ExprKind::Path(QPath::Resolved(None, ref path)) => {\n+                return is_range_path(&path) && span_is_range_literal(&expr.span);\n+            }\n+\n+            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`\n+            ExprKind::Call(ref func, _) => {\n+                if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.node {\n+                    if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n+                        let call_to_new = segment.ident.as_str() == \"new\";\n+\n+                        return is_range_path(&path) && span_is_range_literal(&expr.span)\n+                            && call_to_new;\n+                    }\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+\n+        false\n+    }\n+\n     pub fn check_for_cast(&self,\n                       err: &mut DiagnosticBuilder<'tcx>,\n                       expr: &hir::Expr,"}, {"sha": "4d8f67182b9ace5b62fefefd7685d99534cc16aa", "filename": "src/test/ui/range/issue-54505-no-literals.fixed", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+\n+// Regression test for changes introduced while fixing #54505\n+\n+// This test uses non-literals for Ranges\n+// (expecting no parens with borrow suggestion)\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(&std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(&::std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(&std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+\n+    take_range(&::std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+\n+    take_range(&std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFull {}\n+\n+    take_range(&::std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFull {}\n+\n+    take_range(&std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(&::std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(&std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+\n+    take_range(&::std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+\n+    take_range(&std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+\n+    take_range(&::std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+}"}, {"sha": "dc21dcbc2db4170aabbf0104f30e50b15f133f80", "filename": "src/test/ui/range/issue-54505-no-literals.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+\n+// Regression test for changes introduced while fixing #54505\n+\n+// This test uses non-literals for Ranges\n+// (expecting no parens with borrow suggestion)\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(::std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+\n+    take_range(::std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+\n+    take_range(std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFull {}\n+\n+    take_range(::std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFull {}\n+\n+    take_range(std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(::std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+\n+    take_range(::std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+\n+    take_range(std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+\n+    take_range(::std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+}"}, {"sha": "b8811c98d21bdd5c28a296b83ee51021f4b71ba7", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,147 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:16:16\n+   |\n+LL |     take_range(std::ops::Range { start: 0, end: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:21:16\n+   |\n+LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:26:16\n+   |\n+LL |     take_range(std::ops::RangeFrom { start: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:31:16\n+   |\n+LL |     take_range(::std::ops::RangeFrom { start: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:36:16\n+   |\n+LL |     take_range(std::ops::RangeFull {});\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&std::ops::RangeFull {}`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:41:16\n+   |\n+LL |     take_range(::std::ops::RangeFull {});\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&::std::ops::RangeFull {}`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:46:16\n+   |\n+LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:51:16\n+   |\n+LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:56:16\n+   |\n+LL |     take_range(std::ops::RangeTo { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:61:16\n+   |\n+LL |     take_range(::std::ops::RangeTo { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:66:16\n+   |\n+LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:71:16\n+   |\n+LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1915fd82899aa2669898059cf37cce77d0bcc945", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,57 @@\n+// error-pattern: `#[panic_handler]` function required, but not found\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+// This test doesn't use std\n+// (so all Ranges resolve to core::ops::Range...)\n+\n+#![no_std]\n+#![feature(lang_items)]\n+\n+use core::ops::RangeBounds;\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+#[lang = \"eh_personality\"]\n+extern fn eh_personality() {}\n+\n+#[cfg(target_os = \"windows\")]\n+#[lang = \"eh_unwind_resume\"]\n+extern fn eh_unwind_resume() {}\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(0..1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(1..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(0..=1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(..5);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(..=42);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "4922e59953c9c8daaa4c02af8675bfb84d98d53d", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,77 @@\n+error: `#[panic_handler]` function required, but not found\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:28:16\n+   |\n+LL |     take_range(0..1);\n+   |                ^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::Range`\n+   |                help: consider borrowing here: `&(0..1)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:33:16\n+   |\n+LL |     take_range(1..);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeFrom`\n+   |                help: consider borrowing here: `&(1..)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:38:16\n+   |\n+LL |     take_range(..);\n+   |                ^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeFull`\n+   |                help: consider borrowing here: `&(..)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:43:16\n+   |\n+LL |     take_range(0..=1);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&(0..=1)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:48:16\n+   |\n+LL |     take_range(..5);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeTo`\n+   |                help: consider borrowing here: `&(..5)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:53:16\n+   |\n+LL |     take_range(..=42);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&(..=42)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f8298c0b5ceffeebb7a87904cf6d04bf13f7344e", "filename": "src/test/ui/range/issue-54505.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(&(0..1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(&(1..));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(&(..));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(&(0..=1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(&(..5));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(&(..=42));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "03673252dd3bae32fc06c27962589716369602a2", "filename": "src/test/ui/range/issue-54505.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(0..1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(1..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(0..=1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(..5);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(..=42);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "d6e1fb0cef23860b3a65b5e46477a22ce14489ae", "filename": "src/test/ui/range/issue-54505.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eae47a40484a085f699c3175d51e74901c607e65/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=eae47a40484a085f699c3175d51e74901c607e65", "patch": "@@ -0,0 +1,75 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:14:16\n+   |\n+LL |     take_range(0..1);\n+   |                ^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&(0..1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:19:16\n+   |\n+LL |     take_range(1..);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&(1..)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:24:16\n+   |\n+LL |     take_range(..);\n+   |                ^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&(..)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:29:16\n+   |\n+LL |     take_range(0..=1);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&(0..=1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:34:16\n+   |\n+LL |     take_range(..5);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&(..5)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:39:16\n+   |\n+LL |     take_range(..=42);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&(..=42)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}