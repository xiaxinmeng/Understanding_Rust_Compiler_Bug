{"sha": "cde25f8dbe86c34dc4774107018b18974d9a14ee", "node_id": "C_kwDOAAsO6NoAKGNkZTI1ZjhkYmU4NmMzNGRjNDc3NDEwNzAxOGIxODk3NGQ5YTE0ZWU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-28T04:12:40Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-29T05:14:31Z"}, "message": "Simplify `lower_mac_args`.\n\nThe `token` is always an interpolated non-terminal expression, and\nalways a literal in valid code. This commit simplifies the processing\naccordingly, by directly extracting and using the literal.", "tree": {"sha": "cba05792b7a8da674b715f124b347cbd3ad38da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba05792b7a8da674b715f124b347cbd3ad38da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde25f8dbe86c34dc4774107018b18974d9a14ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde25f8dbe86c34dc4774107018b18974d9a14ee", "html_url": "https://github.com/rust-lang/rust/commit/cde25f8dbe86c34dc4774107018b18974d9a14ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde25f8dbe86c34dc4774107018b18974d9a14ee/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481a4461ae709e4410af6ba495c725d673ba5c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/481a4461ae709e4410af6ba495c725d673ba5c2d", "html_url": "https://github.com/rust-lang/rust/commit/481a4461ae709e4410af6ba495c725d673ba5c2d"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "526679e5315ffed810213c4c48584bf9fe951b2c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cde25f8dbe86c34dc4774107018b18974d9a14ee/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde25f8dbe86c34dc4774107018b18974d9a14ee/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cde25f8dbe86c34dc4774107018b18974d9a14ee", "patch": "@@ -38,8 +38,8 @@\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n-use rustc_ast::token::{Delimiter, Token};\n-use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};\n+use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream};\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n@@ -878,33 +878,19 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // spans to handle nonterminals in `#[doc]` (e.g. `#[doc = $e]`).\n             MacArgs::Eq(eq_span, ref token) => {\n                 // In valid code the value is always representable as a single literal token.\n-                fn unwrap_single_token(sess: &Session, tokens: TokenStream, span: Span) -> Token {\n-                    if tokens.len() != 1 {\n-                        sess.diagnostic()\n-                            .delay_span_bug(span, \"multiple tokens in key-value attribute's value\");\n-                    }\n-                    match tokens.into_trees().next() {\n-                        Some(TokenTree::Token(token)) => token,\n-                        Some(TokenTree::Delimited(_, delim, tokens)) => {\n-                            if delim != Delimiter::Invisible {\n-                                sess.diagnostic().delay_span_bug(\n-                                    span,\n-                                    \"unexpected delimiter in key-value attribute's value\",\n-                                );\n-                            }\n-                            unwrap_single_token(sess, tokens, span)\n-                        }\n-                        None => Token::dummy(),\n+                // Otherwise, a dummy token suffices because the error is handled elsewhere.\n+                let token = if let token::Interpolated(nt) = &token.kind\n+                    && let token::NtExpr(expr) = &**nt\n+                {\n+                    if let ExprKind::Lit(Lit { token, span, .. }) = expr.kind {\n+                        Token::new(TokenKind::Literal(token), span)\n+                    } else {\n+                        Token::dummy()\n                     }\n-                }\n-\n-                let tokens = FlattenNonterminals {\n-                    parse_sess: &self.sess.parse_sess,\n-                    synthesize_tokens: CanSynthesizeMissingTokens::Yes,\n-                    nt_to_tokenstream: self.nt_to_tokenstream,\n-                }\n-                .process_token(token.clone());\n-                MacArgs::Eq(eq_span, unwrap_single_token(self.sess, tokens, token.span))\n+                } else {\n+                    unreachable!()\n+                };\n+                MacArgs::Eq(eq_span, token)\n             }\n         }\n     }"}]}