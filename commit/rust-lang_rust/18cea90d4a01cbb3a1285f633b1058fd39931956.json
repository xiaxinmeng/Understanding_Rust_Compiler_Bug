{"sha": "18cea90d4a01cbb3a1285f633b1058fd39931956", "node_id": "C_kwDOAAsO6NoAKDE4Y2VhOTBkNGEwMWNiYjNhMTI4NWY2MzNiMTA1OGZkMzk5MzE5NTY", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-28T22:32:16Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-28T23:42:30Z"}, "message": "Handle existing parentheses when suggesting trailing-tuple-comma", "tree": {"sha": "82383c5e1766bc2369b2226f13e8941f8277890d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82383c5e1766bc2369b2226f13e8941f8277890d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18cea90d4a01cbb3a1285f633b1058fd39931956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18cea90d4a01cbb3a1285f633b1058fd39931956", "html_url": "https://github.com/rust-lang/rust/commit/18cea90d4a01cbb3a1285f633b1058fd39931956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18cea90d4a01cbb3a1285f633b1058fd39931956/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c734c32776e26861c89e261b8757522e46031978", "url": "https://api.github.com/repos/rust-lang/rust/commits/c734c32776e26861c89e261b8757522e46031978", "html_url": "https://github.com/rust-lang/rust/commit/c734c32776e26861c89e261b8757522e46031978"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "71a81d12839dce61519764f5177b0e47fc3c9915", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/18cea90d4a01cbb3a1285f633b1058fd39931956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cea90d4a01cbb3a1285f633b1058fd39931956/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=18cea90d4a01cbb3a1285f633b1058fd39931956", "patch": "@@ -2045,14 +2045,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // parentheses around it, perhaps the user meant to write `(expr,)` to\n                         // build a tuple (issue #86100)\n                         (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n-                            err.multipart_suggestion(\n-                                \"use a trailing comma to create a tuple with one element\",\n-                                vec![\n-                                    (span.shrink_to_lo(), \"(\".into()),\n-                                    (span.shrink_to_hi(), \",)\".into()),\n-                                ],\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if code.starts_with('(') && code.ends_with(')') {\n+                                    let before_close = span.hi() - BytePos::from_u32(1);\n+\n+                                    err.span_suggestion(\n+                                        span.with_hi(before_close).shrink_to_hi(),\n+                                        \"use a trailing comma to create a tuple with one element\",\n+                                        \",\".into(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                } else {\n+                                    err.multipart_suggestion(\n+                                        \"use a trailing comma to create a tuple with one element\",\n+                                        vec![\n+                                            (span.shrink_to_lo(), \"(\".into()),\n+                                            (span.shrink_to_hi(), \",)\".into()),\n+                                        ],\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n                         }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to"}]}