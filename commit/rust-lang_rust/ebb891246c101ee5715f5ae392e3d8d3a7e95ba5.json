{"sha": "ebb891246c101ee5715f5ae392e3d8d3a7e95ba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYjg5MTI0NmMxMDFlZTU3MTVmNWFlMzkyZTNkOGQzYTdlOTViYTU=", "commit": {"author": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-08T10:15:40Z"}, "committer": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-08T10:15:40Z"}, "message": "Split and document array method resolution logic.", "tree": {"sha": "cb88ae943486835740fc5d100b8f59652335c14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb88ae943486835740fc5d100b8f59652335c14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5", "html_url": "https://github.com/rust-lang/rust/commit/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5/comments", "author": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9593fe684d0933f206686296946bb166abd13c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9593fe684d0933f206686296946bb166abd13c8d", "html_url": "https://github.com/rust-lang/rust/commit/9593fe684d0933f206686296946bb166abd13c8d"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "f12ced24cc4328db00fb07dfd2baec5dbf22f093", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 53, "deletions": 34, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb891246c101ee5715f5ae392e3d8d3a7e95ba5/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=ebb891246c101ee5715f5ae392e3d8d3a7e95ba5", "patch": "@@ -709,6 +709,33 @@ fn iterate_trait_method_candidates(\n     false\n }\n \n+fn filter_inherent_impls_for_self_ty<'i>(\n+    impls: &'i InherentImpls,\n+    self_ty: &Ty,\n+) -> impl Iterator<Item = &'i ImplId> {\n+    // inherent methods on arrays are fingerprinted as [T; {unknown}], so we must also consider them when\n+    // resolving a method call on an array with a known len\n+    let array_impls = {\n+        if let TyKind::Array(parameters, array_len) = self_ty.kind(&Interner) {\n+            if !array_len.is_unknown() {\n+                let unknown_array_len_ty =\n+                    TyKind::Array(parameters.clone(), consteval::usize_const(None))\n+                        .intern(&Interner);\n+\n+                Some(impls.for_self_ty(&unknown_array_len_ty))\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+    .into_iter()\n+    .flatten();\n+\n+    impls.for_self_ty(self_ty).iter().chain(array_impls)\n+}\n+\n fn iterate_inherent_methods(\n     self_ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,\n@@ -726,25 +753,7 @@ fn iterate_inherent_methods(\n     for krate in def_crates {\n         let impls = db.inherent_impls_in_crate(krate);\n \n-        let impls_for_self_ty = impls.for_self_ty(&self_ty.value).iter().chain(\n-            {\n-                if let TyKind::Array(parameters, array_len) = self_ty.value.kind(&Interner) {\n-                    if !array_len.is_unknown() {\n-                        let unknown_array_len_ty =\n-                            TyKind::Array(parameters.clone(), consteval::usize_const(None))\n-                                .intern(&Interner);\n-\n-                        Some(impls.for_self_ty(&unknown_array_len_ty))\n-                    } else {\n-                        None\n-                    }\n-                } else {\n-                    None\n-                }\n-            }\n-            .into_iter()\n-            .flatten(),\n-        );\n+        let impls_for_self_ty = filter_inherent_impls_for_self_ty(&impls, &self_ty.value);\n \n         for &impl_def in impls_for_self_ty {\n             for &item in db.impl_data(impl_def).items.iter() {\n@@ -798,6 +807,28 @@ pub fn resolve_indexing_op(\n     None\n }\n \n+fn is_transformed_receiver_ty_equal(transformed_receiver_ty: &Ty, receiver_ty: &Ty) -> bool {\n+    if transformed_receiver_ty == receiver_ty {\n+        return true;\n+    }\n+\n+    // a transformed receiver may be considered equal (and a valid method call candidate) if it is an array\n+    // with an unknown (i.e. generic) length, and the receiver is an array with the same item type but a known len,\n+    // this allows inherent methods on arrays to be considered valid resolution candidates\n+    match (transformed_receiver_ty.kind(&Interner), receiver_ty.kind(&Interner)) {\n+        (\n+            TyKind::Array(transformed_array_ty, transformed_array_len),\n+            TyKind::Array(receiver_array_ty, receiver_array_len),\n+        ) if transformed_array_ty == receiver_array_ty\n+            && transformed_array_len.is_unknown()\n+            && !receiver_array_len.is_unknown() =>\n+        {\n+            true\n+        }\n+        _ => false,\n+    }\n+}\n+\n fn is_valid_candidate(\n     db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,\n@@ -823,21 +854,9 @@ fn is_valid_candidate(\n                     Some(ty) => ty,\n                     None => return false,\n                 };\n-                if transformed_receiver_ty != receiver_ty.value {\n-                    match (\n-                        transformed_receiver_ty.kind(&Interner),\n-                        receiver_ty.value.kind(&Interner),\n-                    ) {\n-                        (\n-                            TyKind::Array(transformed_array_ty, transformed_array_len),\n-                            TyKind::Array(receiver_array_ty, receiver_array_len),\n-                        ) if transformed_array_ty == receiver_array_ty\n-                            && transformed_array_len.is_unknown()\n-                            && !receiver_array_len.is_unknown() => {}\n-                        _ => {\n-                            return false;\n-                        }\n-                    }\n+\n+                if !is_transformed_receiver_ty_equal(&transformed_receiver_ty, &receiver_ty.value) {\n+                    return false;\n                 }\n             }\n             if let Some(from_module) = visible_from_module {"}]}