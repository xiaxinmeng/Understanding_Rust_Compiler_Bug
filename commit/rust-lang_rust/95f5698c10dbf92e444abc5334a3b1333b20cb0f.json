{"sha": "95f5698c10dbf92e444abc5334a3b1333b20cb0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjU2OThjMTBkYmY5MmU0NDRhYmM1MzM0YTNiMTMzM2IyMGNiMGY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T11:32:38Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-26T22:52:27Z"}, "message": "Remove dead tracking of external param names", "tree": {"sha": "153403e3629554a6816f0417ee553a34c742ffca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153403e3629554a6816f0417ee553a34c742ffca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f5698c10dbf92e444abc5334a3b1333b20cb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f5698c10dbf92e444abc5334a3b1333b20cb0f", "html_url": "https://github.com/rust-lang/rust/commit/95f5698c10dbf92e444abc5334a3b1333b20cb0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f5698c10dbf92e444abc5334a3b1333b20cb0f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d57c67843f05a40d11c7d442bd5b461da6ddee", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d57c67843f05a40d11c7d442bd5b461da6ddee", "html_url": "https://github.com/rust-lang/rust/commit/57d57c67843f05a40d11c7d442bd5b461da6ddee"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "ed82c522779eb1f0420c6a49cd7a7898bfc0f632", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95f5698c10dbf92e444abc5334a3b1333b20cb0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f5698c10dbf92e444abc5334a3b1333b20cb0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=95f5698c10dbf92e444abc5334a3b1333b20cb0f", "patch": "@@ -566,23 +566,6 @@ pub enum ItemEnum {\n }\n \n impl ItemEnum {\n-    pub fn generics(&self) -> Option<&Generics> {\n-        Some(match *self {\n-            ItemEnum::StructItem(ref s) => &s.generics,\n-            ItemEnum::EnumItem(ref e) => &e.generics,\n-            ItemEnum::FunctionItem(ref f) => &f.generics,\n-            ItemEnum::TypedefItem(ref t, _) => &t.generics,\n-            ItemEnum::OpaqueTyItem(ref t, _) => &t.generics,\n-            ItemEnum::TraitItem(ref t) => &t.generics,\n-            ItemEnum::ImplItem(ref i) => &i.generics,\n-            ItemEnum::TyMethodItem(ref i) => &i.generics,\n-            ItemEnum::MethodItem(ref i) => &i.generics,\n-            ItemEnum::ForeignFunctionItem(ref f) => &f.generics,\n-            ItemEnum::TraitAliasItem(ref ta) => &ta.generics,\n-            _ => return None,\n-        })\n-    }\n-\n     pub fn is_associated(&self) -> bool {\n         match *self {\n             ItemEnum::TypedefItem(_, _) |\n@@ -1535,8 +1518,6 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                 (self.name.to_string(), GenericParamDefKind::Lifetime)\n             }\n             ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n-                cx.renderinfo.borrow_mut().external_param_names\n-                             .insert(self.def_id, self.name.clean(cx));\n                 let default = if has_default {\n                     Some(cx.tcx.type_of(self.def_id).clean(cx))\n                 } else {"}, {"sha": "896246126d869c2136d3782d74e088aae5b1d6bc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/95f5698c10dbf92e444abc5334a3b1333b20cb0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f5698c10dbf92e444abc5334a3b1333b20cb0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=95f5698c10dbf92e444abc5334a3b1333b20cb0f", "patch": "@@ -282,11 +282,6 @@ impl Impl {\n /// rendering threads.\n #[derive(Default)]\n pub struct Cache {\n-    /// Mapping of typaram ids to the name of the type parameter. This is used\n-    /// when pretty-printing a type (so pretty-printing doesn't have to\n-    /// painfully maintain a context like this)\n-    pub param_names: FxHashMap<DefId, String>,\n-\n     /// Maps a type ID to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n@@ -382,7 +377,6 @@ pub struct Cache {\n pub struct RenderInfo {\n     pub inlined: FxHashSet<DefId>,\n     pub external_paths: crate::core::ExternalPaths,\n-    pub external_param_names: FxHashMap<DefId, String>,\n     pub exact_paths: FxHashMap<DefId, Vec<String>>,\n     pub access_levels: AccessLevels<DefId>,\n     pub deref_trait_did: Option<DefId>,\n@@ -617,7 +611,6 @@ pub fn run(mut krate: clean::Crate,\n     let RenderInfo {\n         inlined: _,\n         external_paths,\n-        external_param_names,\n         exact_paths,\n         access_levels,\n         deref_trait_did,\n@@ -651,7 +644,6 @@ pub fn run(mut krate: clean::Crate,\n         deref_mut_trait_did,\n         owned_box_did,\n         masked_crates: mem::take(&mut krate.masked_crates),\n-        param_names: external_param_names,\n         aliases: Default::default(),\n     };\n \n@@ -1419,12 +1411,6 @@ impl DocFolder for Cache {\n             }\n         }\n \n-        // Register any generics to their corresponding string. This is used\n-        // when pretty-printing types.\n-        if let Some(generics) = item.inner.generics() {\n-            self.generics(generics);\n-        }\n-\n         // Propagate a trait method's documentation to all implementors of the\n         // trait.\n         if let clean::TraitItem(ref t) = item.inner {\n@@ -1657,18 +1643,6 @@ impl DocFolder for Cache {\n }\n \n impl Cache {\n-    fn generics(&mut self, generics: &clean::Generics) {\n-        for param in &generics.params {\n-            match param.kind {\n-                clean::GenericParamDefKind::Lifetime => {}\n-                clean::GenericParamDefKind::Type { did, .. } |\n-                clean::GenericParamDefKind::Const { did, .. } => {\n-                    self.param_names.insert(did, param.name.clone());\n-                }\n-            }\n-        }\n-    }\n-\n     fn add_aliases(&mut self, item: &clean::Item) {\n         if item.def_id.index == CRATE_DEF_INDEX {\n             return"}]}