{"sha": "c1ad1b03388778893159c549db82b2716c71f102", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYWQxYjAzMzg4Nzc4ODkzMTU5YzU0OWRiODJiMjcxNmM3MWYxMDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-01T16:51:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-06T21:32:30Z"}, "message": "Fix invalid urls", "tree": {"sha": "4b53ea3c0299cb78559a99a9f621cc11075df3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b53ea3c0299cb78559a99a9f621cc11075df3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ad1b03388778893159c549db82b2716c71f102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ad1b03388778893159c549db82b2716c71f102", "html_url": "https://github.com/rust-lang/rust/commit/c1ad1b03388778893159c549db82b2716c71f102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ad1b03388778893159c549db82b2716c71f102/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b3382f2b9d1f6137f6415532a01faf55241c6dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3382f2b9d1f6137f6415532a01faf55241c6dc", "html_url": "https://github.com/rust-lang/rust/commit/1b3382f2b9d1f6137f6415532a01faf55241c6dc"}], "stats": {"total": 61, "additions": 19, "deletions": 42}, "files": [{"sha": "e9e390d831f6b40ccc3da55952c3cbeaaec83d03", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -806,9 +806,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n     /// count reaches zero then the only other references (if any) are\n-    /// [`Weak`][weak], so we `drop` the inner value.\n-    ///\n-    /// [weak]: struct.Weak.html\n+    /// [`Weak`], so we `drop` the inner value.\n     ///\n     /// # Examples\n     ///\n@@ -1173,9 +1171,8 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating any memory.\n-    /// Calling [`upgrade`] on the return value always gives [`None`].\n+    /// Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n@@ -1321,9 +1318,8 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n-    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n+    /// it. Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples"}, {"sha": "837e17cf640173b127fce5cd2758c1ad361e9aa7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -1927,9 +1927,7 @@ impl<'a> Add<&'a str> for String {\n \n /// Implements the `+=` operator for appending to a `String`.\n ///\n-/// This has the same behavior as the [`push_str`] method.\n-///\n-/// [`push_str`]: struct.String.html#method.push_str\n+/// This has the same behavior as the [`push_str`][String::push_str] method.\n #[stable(feature = \"stringaddassign\", since = \"1.12.0\")]\n impl<'a> AddAssign<&'a str> for String {\n     #[inline]"}, {"sha": "fc6b7a29677b38bf3faabf4d22becee6064e524f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -916,9 +916,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n     /// count reaches zero then the only other references (if any) are\n-    /// [`Weak`][weak], so we `drop` the inner value.\n-    ///\n-    /// [weak]: struct.Weak.html\n+    /// [`Weak`], so we `drop` the inner value.\n     ///\n     /// # Examples\n     ///\n@@ -1159,9 +1157,9 @@ impl<T: ?Sized> Clone for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating memory.\n-    /// Calling [`upgrade`] on the return value always gives [`None`].\n+    /// Calling [`upgrade`][Weak::upgrade] on the return value always\n+    /// gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples"}, {"sha": "53cf626bb1ca02b93ef084b003de7c7138f538ba", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -1006,9 +1006,7 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Returns [`None`].\n-    ///\n-    /// [`None`]: #variant.None\n+    /// Returns [`None`][Option::None].\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -1228,9 +1226,10 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n-    /// Takes each element in the [`Iterator`]: if it is [`None`], no further\n-    /// elements are taken, and the [`None`] is returned. Should no [`None`] occur, a\n-    /// container with the values of each `Option` is returned.\n+    /// Takes each element in the [`Iterator`]: if it is [`None`][Option::None],\n+    /// no further elements are taken, and the [`None`][Option::None] is\n+    /// returned. Should no [`None`][Option::None] occur, a container with the\n+    /// values of each [`Option`] is returned.\n     ///\n     /// Here is an example which increments every integer in a vector,\n     /// checking for overflow:\n@@ -1247,7 +1246,6 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ```\n     ///\n     /// [`Iterator`]: ../iter/trait.Iterator.html\n-    /// [`None`]: enum.Option.html#variant.None\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}, {"sha": "c4b4a0fd72a680e012619260d706d131c2a2f1b6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -507,7 +507,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns an iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -520,8 +520,6 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n@@ -530,7 +528,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns a mutable iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -547,8 +545,6 @@ impl<T, E> Result<T, E> {\n     /// let mut x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter_mut().next(), None);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n@@ -994,7 +990,7 @@ impl<T, E> IntoIterator for Result<T, E> {\n \n     /// Returns a consuming iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -1009,8 +1005,6 @@ impl<T, E> IntoIterator for Result<T, E> {\n     /// let v: Vec<u32> = x.into_iter().collect();\n     /// assert_eq!(v, []);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { inner: self.ok() }"}, {"sha": "3e54b502234ff6da129f34b56576f96d172f8161", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -2655,9 +2655,8 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n-    /// Creates a new `DefaultHasher` using [`new`]. See its documentation for more.\n-    ///\n-    /// [`new`]: #method.new\n+    /// Creates a new `DefaultHasher` using [`new`][DefaultHasher::new].\n+    /// See its documentation for more.\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()\n     }"}, {"sha": "e26e6d391f84d3f12bee12a774746e5506811d09", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -294,17 +294,15 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// `.into_inner()` immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n-    /// To seek without discarding the internal buffer, use [`seek_relative`].\n+    /// To seek without discarding the internal buffer, use [`Seek::seek_relative`].\n     ///\n-    /// See `std::io::Seek` for more details.\n+    /// See [`std::io::Seek`] for more details.\n     ///\n     /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you called `seek` with `SeekFrom::Current(0)`.\n-    ///\n-    /// [`seek_relative`]: #method.seek_relative\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {"}, {"sha": "54bfd8122b4ed4a764e1b3b0ea92ca190298f865", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -386,8 +386,6 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`].\n-    ///\n-    /// [`Mutex::new`]: #method.new\n     fn from(t: T) -> Self {\n         Mutex::new(t)\n     }"}, {"sha": "c0c706590db945a7eb03574db26e7ad6d062a04f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ad1b03388778893159c549db82b2716c71f102/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=c1ad1b03388778893159c549db82b2716c71f102", "patch": "@@ -461,8 +461,6 @@ impl<T: Default> Default for RwLock<T> {\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`].\n-    ///\n-    /// [`RwLock::new`]: #method.new\n     fn from(t: T) -> Self {\n         RwLock::new(t)\n     }"}]}