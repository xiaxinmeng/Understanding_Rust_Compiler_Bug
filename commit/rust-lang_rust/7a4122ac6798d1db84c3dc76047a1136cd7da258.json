{"sha": "7a4122ac6798d1db84c3dc76047a1136cd7da258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNDEyMmFjNjc5OGQxZGI4NGMzZGM3NjA0N2ExMTM2Y2Q3ZGEyNTg=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T14:50:36Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:35Z"}, "message": "librustc: Remove visit_tydesc intrinsic.", "tree": {"sha": "9e330f07ed10d7f38362861b02e971aadc3a75a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e330f07ed10d7f38362861b02e971aadc3a75a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4122ac6798d1db84c3dc76047a1136cd7da258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4122ac6798d1db84c3dc76047a1136cd7da258", "html_url": "https://github.com/rust-lang/rust/commit/7a4122ac6798d1db84c3dc76047a1136cd7da258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4122ac6798d1db84c3dc76047a1136cd7da258/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6226e6c97a11933f09a9730458c6984e883bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6226e6c97a11933f09a9730458c6984e883bd7", "html_url": "https://github.com/rust-lang/rust/commit/ce6226e6c97a11933f09a9730458c6984e883bd7"}], "stats": {"total": 175, "additions": 0, "deletions": 175}, "files": [{"sha": "bcbb775133576bf591fa3fed614d8a9e7041a556", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7a4122ac6798d1db84c3dc76047a1136cd7da258", "patch": "@@ -327,8 +327,6 @@ extern \"rust-intrinsic\" {\n     /// Returns `true` if a type is managed (will be allocated on the local heap)\n     pub fn owns_managed<T>() -> bool;\n \n-    pub fn visit_tydesc(td: *const TyDesc, tv: &mut TyVisitor);\n-\n     /// Calculates the offset from a pointer. The offset *must* be in-bounds of\n     /// the object, or one-byte-past-the-end. An arithmetic overflow is also\n     /// undefined behaviour."}, {"sha": "399c20a510826e794f25d29b898d7be2bae7b929", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=7a4122ac6798d1db84c3dc76047a1136cd7da258", "patch": "@@ -307,13 +307,6 @@ pub fn trans_intrinsic_call<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, node: ast::N\n             let tp_ty = *substs.types.get(FnSpace, 0);\n             C_bool(ccx, ty::type_contents(ccx.tcx(), tp_ty).owns_managed())\n         }\n-        (_, \"visit_tydesc\") => {\n-            let td = *llargs.get(0);\n-            let visitor = *llargs.get(1);\n-            let td = PointerCast(bcx, td, ccx.tydesc_type().ptr_to());\n-            glue::call_visit_glue(bcx, visitor, td);\n-            C_nil(ccx)\n-        }\n         (_, \"offset\") => {\n             let ptr = *llargs.get(0);\n             let offset = *llargs.get(1);"}, {"sha": "be622bd685501018343cd8d4f2f46f549a62daa7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4122ac6798d1db84c3dc76047a1136cd7da258/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7a4122ac6798d1db84c3dc76047a1136cd7da258", "patch": "@@ -5578,25 +5578,6 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                     }\n                 }\n             },\n-            \"visit_tydesc\" => {\n-              let tydesc_ty = match ty::get_tydesc_ty(ccx.tcx) {\n-                  Ok(t) => t,\n-                  Err(s) => { tcx.sess.span_fatal(it.span, s.as_slice()); }\n-              };\n-              let region0 = ty::ReLateBound(it.id, ty::BrAnon(0));\n-              let region1 = ty::ReLateBound(it.id, ty::BrAnon(1));\n-              let visitor_object_ty =\n-                    match ty::visitor_object_ty(tcx, region0, region1) {\n-                        Ok((_, vot)) => vot,\n-                        Err(s) => { tcx.sess.span_fatal(it.span, s.as_slice()); }\n-                    };\n-\n-              let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n-                  ty: tydesc_ty,\n-                  mutbl: ast::MutImmutable\n-              });\n-              (0, vec!( td_ptr, visitor_object_ty ), ty::mk_nil())\n-            }\n             \"offset\" => {\n               (1,\n                vec!("}, {"sha": "5de34dc2df5dfda40f0791fd26924b1076ef8f43", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ce6226e6c97a11933f09a9730458c6984e883bd7/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6226e6c97a11933f09a9730458c6984e883bd7/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=ce6226e6c97a11933f09a9730458c6984e883bd7", "patch": "@@ -1,147 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n-\n-struct MyVisitor {\n-    types: Vec<String> ,\n-}\n-\n-impl TyVisitor for MyVisitor {\n-    fn visit_bot(&mut self) -> bool {\n-        self.types.push(\"bot\".to_string());\n-        println!(\"visited bot type\");\n-        true\n-    }\n-    fn visit_nil(&mut self) -> bool {\n-        self.types.push(\"nil\".to_string());\n-        println!(\"visited nil type\");\n-        true\n-    }\n-    fn visit_bool(&mut self) -> bool {\n-        self.types.push(\"bool\".to_string());\n-        println!(\"visited bool type\");\n-        true\n-    }\n-    fn visit_int(&mut self) -> bool {\n-        self.types.push(\"int\".to_string());\n-        println!(\"visited int type\");\n-        true\n-    }\n-    fn visit_i8(&mut self) -> bool {\n-        self.types.push(\"i8\".to_string());\n-        println!(\"visited i8 type\");\n-        true\n-    }\n-    fn visit_i16(&mut self) -> bool {\n-        self.types.push(\"i16\".to_string());\n-        println!(\"visited i16 type\");\n-        true\n-    }\n-    fn visit_i32(&mut self) -> bool { true }\n-    fn visit_i64(&mut self) -> bool { true }\n-\n-    fn visit_uint(&mut self) -> bool { true }\n-    fn visit_u8(&mut self) -> bool { true }\n-    fn visit_u16(&mut self) -> bool { true }\n-    fn visit_u32(&mut self) -> bool { true }\n-    fn visit_u64(&mut self) -> bool { true }\n-\n-    fn visit_f32(&mut self) -> bool { true }\n-    fn visit_f64(&mut self) -> bool { true }\n-\n-    fn visit_char(&mut self) -> bool { true }\n-\n-    fn visit_estr_slice(&mut self) -> bool { true }\n-\n-    fn visit_box(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_uniq(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_ptr(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_rptr(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-\n-    fn visit_evec_slice(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_evec_fixed(&mut self, _n: uint, _sz: uint, _align: uint,\n-                        _inner: *const TyDesc) -> bool { true }\n-\n-    fn visit_enter_rec(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool { true }\n-    fn visit_rec_field(&mut self, _i: uint, _name: &str,\n-                       _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_leave_rec(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool { true }\n-\n-    fn visit_enter_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n-                         _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(&mut self, _i: uint, _name: &str, _named: bool,\n-                         _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_leave_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n-                         _sz: uint, _align: uint) -> bool { true }\n-\n-    fn visit_enter_tup(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool { true }\n-    fn visit_tup_field(&mut self, _i: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_leave_tup(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool { true }\n-\n-    fn visit_enter_enum(&mut self, _n_variants: uint,\n-                        _get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_enter_enum_variant(&mut self,\n-                                _variant: uint,\n-                                _disr_val: Disr,\n-                                _n_fields: uint,\n-                                _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(&mut self, _i: uint, _offset: uint, _inner: *const TyDesc)\n-        -> bool { true }\n-    fn visit_leave_enum_variant(&mut self,\n-                                _variant: uint,\n-                                _disr_val: Disr,\n-                                _n_fields: uint,\n-                                _name: &str) -> bool { true }\n-    fn visit_leave_enum(&mut self,\n-                        _n_variants: uint,\n-                        _get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        _sz: uint, _align: uint) -> bool { true }\n-\n-    fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,\n-                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n-    fn visit_fn_input(&mut self, _i: uint, _mode: uint, _inner: *const TyDesc) -> bool { true }\n-    fn visit_fn_output(&mut self, _retstyle: uint, _variadic: bool, _inner: *const TyDesc)\n-        -> bool { true }\n-    fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,\n-                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n-\n-\n-    fn visit_trait(&mut self, _name: &str) -> bool { true }\n-    fn visit_param(&mut self, _i: uint) -> bool { true }\n-    fn visit_self(&mut self) -> bool { true }\n-}\n-\n-fn visit_ty<T>(v: &mut MyVisitor) {\n-    unsafe { visit_tydesc(get_tydesc::<T>(), v as &mut TyVisitor) }\n-}\n-\n-pub fn main() {\n-    let mut v = MyVisitor {types: Vec::new()};\n-\n-    visit_ty::<bool>(&mut v);\n-    visit_ty::<int>(&mut v);\n-    visit_ty::<i8>(&mut v);\n-    visit_ty::<i16>(&mut v);\n-\n-    for s in v.types.iter() {\n-        println!(\"type: {}\", (*s).clone());\n-    }\n-\n-    let vec_types: Vec<String> = v.types.clone().into_iter().collect();\n-    assert_eq!(vec_types, vec!(\"bool\".to_string(), \"int\".to_string(),\n-                               \"i8\".to_string(), \"i16\".to_string()));\n-}"}]}