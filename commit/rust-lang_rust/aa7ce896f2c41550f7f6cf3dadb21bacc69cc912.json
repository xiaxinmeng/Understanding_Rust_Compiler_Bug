{"sha": "aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhN2NlODk2ZjJjNDE1NTBmN2Y2Y2YzZGFkYjIxYmFjYzY5Y2M5MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T21:14:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T21:14:53Z"}, "message": "Auto merge of #50121 - pnkfelix:revert-stabilization-of-never-type-et-al, r=alexcrichton\n\nRevert stabilization of never_type (!) et al\n\nFix #49691\n\nI *think* this correctly adopts @nikomatsakis 's desired fix of:\n * reverting stabilization of `!` and `TryFrom`, and\n * returning to the previous fallback semantics (i.e. it is once again dependent on whether the crate has opted into `#[feature(never_type)]`,\n * **without** attempting to put back in the previous future-proofing warnings regarding the change in fallback semantics.\n\n(I'll be away from computers for a week starting now, so any updates to this PR should be either pushed into it, or someone else should adopt the task of polishing this fix and put up their own PR.)", "tree": {"sha": "421b5b857e218551788d71342af7e7d7abb7cde0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421b5b857e218551788d71342af7e7d7abb7cde0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "html_url": "https://github.com/rust-lang/rust/commit/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699eb95ae3dae023cddca85facf6660b196bd0d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/699eb95ae3dae023cddca85facf6660b196bd0d1", "html_url": "https://github.com/rust-lang/rust/commit/699eb95ae3dae023cddca85facf6660b196bd0d1"}, {"sha": "42b6d4653a2ad22be695760aba3514fc64c18d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b6d4653a2ad22be695760aba3514fc64c18d66", "html_url": "https://github.com/rust-lang/rust/commit/42b6d4653a2ad22be695760aba3514fc64c18d66"}], "stats": {"total": 237, "additions": 188, "deletions": 49}, "files": [{"sha": "3d24f8902bd83827be8aee45f393f9cf9f9e33a6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -148,7 +148,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -162,7 +162,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "803a924eb3a469f49b20f21ccbe55bd81176dd3c", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -204,7 +204,7 @@ impl FromStr for char {\n }\n \n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -219,11 +219,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "210eceebc51010c74879667d4018a47fc7486d18", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -40,7 +40,7 @@ pub use self::convert::{from_u32, from_digit};\n pub use self::convert::from_u32_unchecked;\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use self::convert::ParseCharError;\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub use self::convert::CharTryFromError;\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};"}, {"sha": "f79f73516989f1597f4a55b425bd33009daddd66", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -179,7 +179,7 @@ mod impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "c91aa06609dd7a5bf4c019ba3d12eb1d0e7d0013", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -881,24 +881,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Eq for ! {}\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "7324df95bc5d5691306ba78924148e593abb4ed4", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -322,26 +322,22 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -409,7 +405,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -421,7 +417,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n     type Error = !;\n "}, {"sha": "a8430f14410e6aef368198e038840f4177214371", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -1780,14 +1780,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self"}, {"sha": "ac1a8091eb3642de3c4060b41806c2c8adc7f9ee", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -82,6 +82,7 @@\n #![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(macro_at_most_once_rep)]\n #![feature(no_core)]"}, {"sha": "feb689dbc1fe8c525282b83ea0fda8ceeef46515", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -630,7 +630,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "801e2328a4bfb87697c38c2de78e5236593e86f1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -4192,7 +4192,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromIntError(());\n \n@@ -4207,14 +4207,14 @@ impl TryFromIntError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         never\n@@ -4224,7 +4224,7 @@ impl From<!> for TryFromIntError {\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4243,7 +4243,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4262,7 +4262,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n "}, {"sha": "3b080689cb3667a01792ac340c271a2981062cef", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -36,6 +36,7 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]\n+#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![cfg_attr(stage0, feature(atomic_nand))]"}, {"sha": "bb495049483ac3c0d2b95671655be1dd47eefc3f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -52,6 +52,7 @@\n #![cfg_attr(windows, feature(libc))]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n #![feature(nonzero)]"}, {"sha": "f3a2aa519465c9933e5269b10c287c571fc09dc9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -2374,6 +2374,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.intern_tup(&[])\n     }\n \n+    pub fn mk_diverging_default(self) -> Ty<'tcx> {\n+        if self.features().never_type {\n+            self.types.never\n+        } else {\n+            self.intern_tup(&[])\n+        }\n+    }\n+\n     pub fn mk_bool(self) -> Ty<'tcx> {\n         self.mk_ty(TyBool)\n     }"}, {"sha": "08438805a703e759f5823ab6b4a1a7b830dc616b", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -45,6 +45,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![forbid(unsafe_code)]\n \n+#![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}, {"sha": "147b8cc2175af9d88de2a6400b16cb5f24c644f1", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n                 let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n                     i == variant_index || {\n+                        self.hir.tcx().features().never_type &&\n                         self.hir.tcx().features().exhaustive_patterns &&\n                         self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n                     }"}, {"sha": "a47b3cacc517e1fc6694c632a9a851349886b4f3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -33,6 +33,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nonzero)]\n #![feature(inclusive_range_fields)]\n #![feature(crate_visibility_modifier)]\n+#![feature(never_type)]\n #![cfg_attr(stage0, feature(try_trait))]\n \n extern crate arena;"}, {"sha": "acde10a6396936b445b83aae2f97e72f40519c1c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -2217,7 +2217,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with !, unconstrained ints with i32,\n+    // Non-numerics get replaced with ! or () (depending on whether\n+    // feature(never_type) is enabled, unconstrained ints with i32,\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n@@ -2231,7 +2232,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => self.tcx.types.never,\n+            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n             Neither => return false,\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);"}, {"sha": "ed0cfe38a7ad95c7d4218d271f45e1ebdeb62f45", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -82,6 +82,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(dyn_trait)]\n+#![feature(never_type)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "749b8ccc13da642c1efca75057f2baa136494e17", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -233,7 +233,7 @@ impl<'a> From<Cow<'a, str>> for Box<Error> {\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.26.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }\n@@ -284,14 +284,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -365,7 +365,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "e53e009678c1030e0d4dba2ffb4a8419615b7477", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -275,6 +275,7 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]\n@@ -306,6 +307,7 @@\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n+#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]"}, {"sha": "42bac6055117f5c49677cbf1a00a855019b2cf81", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -79,6 +79,7 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -155,6 +156,7 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;"}, {"sha": "fe2466ff005b74c40e9ffa63db33ea29cc13d67a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -272,6 +272,9 @@ declare_features! (\n     // Allows cfg(target_has_atomic = \"...\").\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n+    // The `!` type. Does not imply exhaustive_patterns (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+\n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", None, None),\n \n@@ -1644,6 +1647,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_abi(bare_fn_ty.abi, ty.span);\n             }\n+            ast::TyKind::Never => {\n+                gate_feature_post!(&self, never_type, ty.span,\n+                                   \"The `!` type is experimental\");\n+            }\n             ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n                 gate_feature_post!(&self, dyn_trait, ty.span,\n                                    \"`dyn Trait` syntax is unstable\");"}, {"sha": "583befed1e8287bf8d82f23f38a71f3e24a4a71b", "filename": "src/test/compile-fail/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can't pass other types for !\n \n+#![feature(never_type)]\n+\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "14a06b306d82a93a8dc71a82c5f3cf54b8f43b43", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn cast_a() {"}, {"sha": "62ff09f4616b80c7268bcefeb6aa954c1132a6fc", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {"}, {"sha": "ac8ac85824edcc34783e3d161d76cdc9280f30f2", "filename": "src/test/compile-fail/defaulted-never-note.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// We need to opt inot the `!` feature in order to trigger the\n+// requirement that this is testing.\n+#![feature(never_type)]\n+\n #![allow(unused)]\n \n trait Deserialize: Sized {"}, {"sha": "d11aacec1963169919de344b7bd762004d5d3058", "filename": "src/test/compile-fail/inhabitedness-infinite-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:reached recursion limit\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n struct Foo<'a, T: 'a> {"}, {"sha": "938f7fba2a0324320b3616e4b68e8acc66ec5ce9", "filename": "src/test/compile-fail/loop-break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "8777ef2ffe33c9e5a774024438c9f4262373a56c", "filename": "src/test/compile-fail/match-privately-empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod private {"}, {"sha": "0fb75b535c6bcd5df32de572ee474ba824089747", "filename": "src/test/compile-fail/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,7 @@\n \n // Test that an assignment of type ! makes the rest of the block dead code.\n \n+#![feature(never_type)]\n #![feature(rustc_attrs)]\n #![warn(unused)]\n "}, {"sha": "c0dd2cab749f4a24cf0753689a842b4bd33d9742", "filename": "src/test/compile-fail/never-assign-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,7 @@\n \n // Test that we can't use another type in place of !\n \n+#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "05a97b855e703e5fcd50b2b6c2567d3aaadb688e", "filename": "src/test/compile-fail/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod foo {"}, {"sha": "2cf4b78bdffe40927b446c817e93fe903bc657c5", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]"}, {"sha": "cfd829e416e5b6f4cef4c51e30ad6b026521685f", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "df340095bb433477cbe3ddef4476a5decc89e70f", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns, rustc_attrs)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]"}, {"sha": "da68dc39f85d752f3273baa6bc6cbe787d37f8d0", "filename": "src/test/run-fail/adjust_never.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fadjust_never.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -11,6 +11,9 @@\n // Test that a variable of type ! can coerce to another type.\n \n // error-pattern:explicit\n+\n+#![feature(never_type)]\n+\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x;"}, {"sha": "95101e70db95192aae510e6593b4a6175cbfa902", "filename": "src/test/run-fail/call-fn-never-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -12,6 +12,7 @@\n \n // error-pattern:wowzers!\n \n+#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "8f7b0c40538f9dbd1c2a1e0080b28177cb85186b", "filename": "src/test/run-fail/cast-never.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcast-never.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -11,6 +11,9 @@\n // Test that we can explicitly cast ! to another type\n \n // error-pattern:explicit\n+\n+#![feature(never_type)]\n+\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x as u32;"}, {"sha": "fdd21e08c20f9ac0b3f5fda8935ac2326f37df0f", "filename": "src/test/run-fail/never-associated-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -12,6 +12,8 @@\n \n // error-pattern:kapow!\n \n+#![feature(never_type)]\n+\n trait Foo {\n     type Wow;\n "}, {"sha": "826ca3a08c0e1dc5e67c30aa80b2c30fef3c33ac", "filename": "src/test/run-fail/never-type-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -12,6 +12,8 @@\n \n // error-pattern:oh no!\n \n+#![feature(never_type)]\n+\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "723a98bcdfa0d85a894e7aea8d20739afdc0aff0", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -14,6 +14,8 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n+#![feature(never_type)]\n+\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "86cf9b5ec4783146db47f9b89b1fa0cf8cb15a18", "filename": "src/test/run-pass/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "794f5969bff507fbc04b2821e399522a5de85966", "filename": "src/test/run-pass/impl-for-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n+#![feature(never_type)]\n+\n trait StringifyType {\n     fn stringify_type() -> &'static str;\n }"}, {"sha": "5cbd3446d9b6fe186bf6198b6f6d708cf7de94f0", "filename": "src/test/run-pass/issue-44402.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44402.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old"}, {"sha": "39053769b24b59d9aff3ffb37128675726c760f0", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n+\n #[allow(unused)]\n fn never_returns() {\n     loop {"}, {"sha": "9641ed282936fafcbb6f178728a2b0a64b58f2d3", "filename": "src/test/run-pass/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -11,6 +11,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n+#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "5c0af392f44df27c659d6cebedccf666c1c4dee7", "filename": "src/test/run-pass/never-result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-result.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n+#![feature(never_type)]\n+\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "7bd9a1703ee9413710160c1b8529b64ddda505b9", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(never_type)]\n \n use std::mem::size_of;\n "}, {"sha": "75b60aa8d10b7b392033577ec1c78cb197b1969f", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n }"}, {"sha": "7924ab74444065190b82382e7bf4a606ea90853e", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `!: Add<A>` is not satisfied\n+error[E0277]: the trait bound `(): Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `!`\n+   |           ^ the trait `Add<A>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "ed9033ad53d565f0314f1d714004c60226a7da02", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(try_from)]\n+\n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};\n "}, {"sha": "e8b2c84c0df0bbd11f7db7a7da0e8365168ce2ff", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:15:1\n+  --> $DIR/conflict-with-std.rs:17:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:22:1\n+  --> $DIR/conflict-with-std.rs:24:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:29:1\n+  --> $DIR/conflict-with-std.rs:31:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c83d9b56bc39f029a36ab189d9b53c4ae0fce9af", "filename": "src/test/ui/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n fn foo() -> Result<u32, !> {\n     Ok(123)\n }"}, {"sha": "ebbe17a821f02fdd5d740bd0cb23a273e563839c", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that ! errors when used in illegal positions with feature(never_type) disabled\n+\n+trait Foo {\n+    type Wub;\n+}\n+\n+type Ma = (u32, !, i32); //~ ERROR type is experimental\n+type Meeshka = Vec<!>; //~ ERROR type is experimental\n+type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+type Skwoz = &mut !; //~ ERROR type is experimental\n+\n+impl Foo for Meeshka {\n+    type Wub = !; //~ ERROR type is experimental\n+}\n+\n+fn main() {\n+}"}, {"sha": "187be6d829137ab5324e99f17eff68aff58daef9", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -0,0 +1,43 @@\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:17:17\n+   |\n+LL | type Ma = (u32, !, i32); //~ ERROR type is experimental\n+   |                 ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:18:20\n+   |\n+LL | type Meeshka = Vec<!>; //~ ERROR type is experimental\n+   |                    ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:19:16\n+   |\n+LL | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:20:19\n+   |\n+LL | type Skwoz = &mut !; //~ ERROR type is experimental\n+   |                   ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:23:16\n+   |\n+LL |     type Wub = !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9ae86136a909170585b9513f41fd35d144858bc0", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n \n+#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "26760cfea4478cc1f39abde71abae7d9a1fa6416", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "308f2483be50a95b6bc3fc90b53094e85885adff", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "9696bdadf87e803cddf70b12033f879f1c061f10", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "fc0041daf7c7c8635a4f433ba4f19b1dcc21c33b", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "c91646cfa1ef119b17fa061f384897268cae6344", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "ce12412ba7438a6595a64733100a5b6e8be8b0e5", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "5b7ea57b1661a01f21efe9af5ae8781fcf771a30", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ce896f2c41550f7f6cf3dadb21bacc69cc912/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=aa7ce896f2c41550f7f6cf3dadb21bacc69cc912", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}]}