{"sha": "299d7be132584b17c17dd72309605131a8ed9c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OWQ3YmUxMzI1ODRiMTdjMTdkZDcyMzA5NjA1MTMxYThlZDljMjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T09:00:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T09:00:13Z"}, "message": "rustfmt fallout in doc comments", "tree": {"sha": "ae0a1f1e42977862a1e53fef4a1e0fa9fbaa4656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae0a1f1e42977862a1e53fef4a1e0fa9fbaa4656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299d7be132584b17c17dd72309605131a8ed9c21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWkSdAAoJEFbW7qD8Z6xG614P/iVC5lin396iKqJsMnjAQAjW\n7rKXl6AANh3vMO2HnJ1zHBY9ZdaA0fbrLXk/2Oc9gNGKDBmA6+FYR2lTKwuLCHww\nVqTNa5iOryCHt/448ez7SOrxaoPLsnLijvtR8Iy9I49zO3PBZnHNnkW1ERFi6Fq+\namezeQDgl5M65mWUGrwybSBXGibuOi3oIE/PLEnWs7ZUncBLbQwJUprUJ0YT14t0\nok9q2npkTzRl7ft59SIWMjETO35OsfC1jU5ZJieqdskdgkqwU97rXjvaViG62eGz\n9p692bGtdluAUhI8TKz7WgNT9XXCoKQkY9PlcFCE20PYTP0ApD25CktKsrExlv7b\nQVcqCsO8FMZ50QukmSHj+UJkwELgOwiKI8Zv8apmyGTdKSuCIek2WhsWz5D8iCzk\nsTujNxivCje9Z40NQjOYJpPziDPeBiuhxixilmzcU92YZ2yxBbW+yHravYUZEg1E\nzhbUZpcarDJOBf1W9qtRNty5FzjqE79tT79amDl0aZC5iUr1HYG8481pre/6TJUr\nrGLtnqiiVx0uWRjwkzKb+c48/jcyNtghuuypGt82KqN8w9Mo8gqEfvGQZB+6eubZ\nwYTiWOTShjloxRrA7balD4dhiCHd7r3rqy/WhnnzlCR5mK58hGl6nnXLS4XPQJKj\nRztsNdO5INTxgv3x4q6e\n=WE0Z\n-----END PGP SIGNATURE-----", "payload": "tree ae0a1f1e42977862a1e53fef4a1e0fa9fbaa4656\nparent 44533f09aaf0ed7c9dd146305dc8140476633124\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482310813 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482310813 +0100\n\nrustfmt fallout in doc comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299d7be132584b17c17dd72309605131a8ed9c21", "html_url": "https://github.com/rust-lang/rust/commit/299d7be132584b17c17dd72309605131a8ed9c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299d7be132584b17c17dd72309605131a8ed9c21/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44533f09aaf0ed7c9dd146305dc8140476633124", "url": "https://api.github.com/repos/rust-lang/rust/commits/44533f09aaf0ed7c9dd146305dc8140476633124", "html_url": "https://github.com/rust-lang/rust/commit/44533f09aaf0ed7c9dd146305dc8140476633124"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "85bd419df7320c167fcadadd7ea0dd085b0a0d60", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=299d7be132584b17c17dd72309605131a8ed9c21", "patch": "@@ -2,7 +2,7 @@\n //!\n //! For example, the lint would catch:\n //!\n-//! ```rust\n+//! ```rust,ignore\n //! if x {\n //!     if y {\n //!         println!(\"Hello world\");\n@@ -28,7 +28,7 @@ use utils::sugg::Sugg;\n /// **Known problems:** None.\n ///\n /// **Example:**\n-/// ```rust\n+/// ```rust,ignore\n /// if x {\n ///     if y {\n ///         \u2026\n@@ -48,7 +48,7 @@ use utils::sugg::Sugg;\n ///\n /// Should be written:\n ///\n-/// ```rust\n+/// ```rust.ignore\n /// if x && y {\n ///     \u2026\n /// }\n@@ -140,7 +140,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext, expr: &ast::Expr, check: &ast:\n     }}\n }\n \n-/// If the block contains only one expression, returns it.\n+/// If the block contains only one expression, return it.\n fn expr_block(block: &ast::Block) -> Option<&ast::Expr> {\n     let mut it = block.stmts.iter();\n "}, {"sha": "f31ce3706ebffaee55d64cb2bc6b69c6f0217b74", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=299d7be132584b17c17dd72309605131a8ed9c21", "patch": "@@ -35,23 +35,27 @@ pub type MethodArgs = HirVec<P<Expr>>;\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///\n-///     if_let_chain! {[\n-///         let Some(y) = x,\n-///         y.len() == 2,\n-///         let Some(z) = y,\n-///     ], {\n-///         block\n-///     }}\n+/// ```rust,ignore\n+/// if_let_chain! {[\n+///     let Some(y) = x,\n+///     y.len() == 2,\n+///     let Some(z) = y,\n+/// ], {\n+///     block\n+/// }}\n+/// ```\n ///\n /// becomes\n ///\n-///     if let Some(y) = x {\n-///         if y.len() == 2 {\n-///             if let Some(z) = y {\n-///                 block\n-///             }\n+/// ```rust,ignore\n+/// if let Some(y) = x {\n+///     if y.len() == 2 {\n+///         if let Some(z) = y {\n+///             block\n ///         }\n ///     }\n+/// }\n+/// ```\n #[macro_export]\n macro_rules! if_let_chain {\n     ([let $pat:pat = $expr:expr, $($tt:tt)+], $block:block) => {\n@@ -135,7 +139,7 @@ pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n /// Check if a `DefId`'s path matches the given absolute type path usage.\n ///\n /// # Examples\n-/// ```\n+/// ```rust,ignore\n /// match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])\n /// ```\n ///\n@@ -229,7 +233,7 @@ pub fn single_segment_path(path: &QPath) -> Option<&PathSegment> {\n /// Match a `Path` against a slice of segment string literals.\n ///\n /// # Examples\n-/// ```\n+/// ```rust,ignore\n /// match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n pub fn match_path(path: &QPath, segments: &[&str]) -> bool {\n@@ -254,7 +258,7 @@ pub fn match_path_old(path: &Path, segments: &[&str]) -> bool {\n /// Match a `Path` against a slice of segment string literals, e.g.\n ///\n /// # Examples\n-/// ```\n+/// ```rust,ignore\n /// match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n@@ -371,7 +375,7 @@ pub fn get_item_name(cx: &LateContext, expr: &Expr) -> Option<Name> {\n /// Convert a span to a code snippet if available, otherwise use default.\n ///\n /// # Example\n-/// ```\n+/// ```rust,ignore\n /// snippet(cx, expr.span, \"..\")\n /// ```\n pub fn snippet<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n@@ -388,7 +392,7 @@ pub fn snippet_opt<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String>\n /// things which need to be printed as such.\n ///\n /// # Example\n-/// ```\n+/// ```rust,ignore\n /// snippet(cx, expr.span, \"..\")\n /// ```\n pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {"}, {"sha": "e4938f1c1edc3f0b910f1003d4540d72d881cf2a", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299d7be132584b17c17dd72309605131a8ed9c21/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=299d7be132584b17c17dd72309605131a8ed9c21", "patch": "@@ -398,7 +398,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n     /// ```\n     fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D);\n@@ -409,7 +409,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// db.suggest_prepend_item(cx, item,\n     /// \"fn foo() {\n     ///     bar();"}]}