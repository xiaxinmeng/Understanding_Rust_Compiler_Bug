{"sha": "6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMGNkYzVmNTUwYzBjY2VmNzYyZmNmZjdkMWZiZWU5YjYyNDUwMjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-09T10:33:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-09T10:33:31Z"}, "message": "Merge #8774\n\n8774: feat: Honor `.cargo/config.toml` r=matklad a=Veykril\n\n![f1Gup1aiAn](https://user-images.githubusercontent.com/3757771/117545448-1dcaae00-b026-11eb-977a-0f35a5e3f2e0.gif)\r\n\r\nImplements `cargo/.config` build target and cfg access by using unstable cargo options:\r\n\r\n- `cargo config get` to read the target triple out of the config to pass to `cargo metadata` --filter-platform\r\n- `cargo rustc --print` to read out the `rustc_cfgs`, this causes us to honor `rustflags` and the like.\r\n\r\nIf those commands fail, due to not having a nightly toolchain present for example, they will fall back to invoking rustc directly as we currently do.\r\n\r\nI personally think it should be fine to use these unstable options as they are unlikely to change(even if they did it shouldn't be a problem due to the fallback) and don't burden the user if they do not have a nightly toolchain at hand since we fall back to the previous behaviour.\r\n\r\ncc #8741\r\nCloses #6604, Closes #5904, Closes #8430, Closes #8480\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3e56ee06982fddc9e10127999d4ee7a0e6071399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e56ee06982fddc9e10127999d4ee7a0e6071399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgl7p7CRBK7hj4Ov3rIwAAFT0IAHamJs5MwQlYcNR9YayXhHRV\nRd34t0xtQTwCnJUEbSHmTuAney6k8E38BfPxcW+/7GtxGbXD/XxBNpCteK7L9tui\nNlXY0X1LLbM8Fhi+bPGvsubdaDp+YL+tmf0iXeOO+wRTcuawMa5rtOyRYr+kh2jN\nDsEvLwvh8jFlDowJnq/Q20hhBzUbCWbNT/YtiiBwG4gDU08w9832NEbs8B4nBRUz\nPh52uEw063d4kKEIPaKnvWU3+fYs0tXvPnaoJh9iR6nnHYVKS9uF0/G74tAwU6lI\nSfqM3AILImIE+smMTDh7c1iM5mcJKPcZHVpP8tkeyOW/VtK6TTJiuaSd4A8TaUE=\n=H6sD\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e56ee06982fddc9e10127999d4ee7a0e6071399\nparent cf4d4f646b6227242b2d4e216e8e30b5e111e02e\nparent b7e6537935d421afd7e02585aaa5cec92bee63b0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620556411 +0000\ncommitter GitHub <noreply@github.com> 1620556411 +0000\n\nMerge #8774\n\n8774: feat: Honor `.cargo/config.toml` r=matklad a=Veykril\n\n![f1Gup1aiAn](https://user-images.githubusercontent.com/3757771/117545448-1dcaae00-b026-11eb-977a-0f35a5e3f2e0.gif)\r\n\r\nImplements `cargo/.config` build target and cfg access by using unstable cargo options:\r\n\r\n- `cargo config get` to read the target triple out of the config to pass to `cargo metadata` --filter-platform\r\n- `cargo rustc --print` to read out the `rustc_cfgs`, this causes us to honor `rustflags` and the like.\r\n\r\nIf those commands fail, due to not having a nightly toolchain present for example, they will fall back to invoking rustc directly as we currently do.\r\n\r\nI personally think it should be fine to use these unstable options as they are unlikely to change(even if they did it shouldn't be a problem due to the fallback) and don't burden the user if they do not have a nightly toolchain at hand since we fall back to the previous behaviour.\r\n\r\ncc #8741\r\nCloses #6604, Closes #5904, Closes #8430, Closes #8480\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "html_url": "https://github.com/rust-lang/rust/commit/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4d4f646b6227242b2d4e216e8e30b5e111e02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4d4f646b6227242b2d4e216e8e30b5e111e02e", "html_url": "https://github.com/rust-lang/rust/commit/cf4d4f646b6227242b2d4e216e8e30b5e111e02e"}, {"sha": "b7e6537935d421afd7e02585aaa5cec92bee63b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e6537935d421afd7e02585aaa5cec92bee63b0", "html_url": "https://github.com/rust-lang/rust/commit/b7e6537935d421afd7e02585aaa5cec92bee63b0"}], "stats": {"total": 119, "additions": 82, "deletions": 37}, "files": [{"sha": "b18699b7711bd1531f02add2751125aa0a337bc7", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "patch": "@@ -201,31 +201,12 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n         }\n-        let target = if let Some(target) = config.target.as_ref() {\n+        let target = if let Some(target) = &config.target {\n             Some(target.clone())\n+        } else if let stdout @ Some(_) = cargo_config_build_target(cargo_toml) {\n+            stdout\n         } else {\n-            // cargo metadata defaults to giving information for _all_ targets.\n-            // In the absence of a preference from the user, we use the host platform.\n-            let mut rustc = Command::new(toolchain::rustc());\n-            rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n-            log::debug!(\"Discovering host platform by {:?}\", rustc);\n-            match utf8_stdout(rustc) {\n-                Ok(stdout) => {\n-                    let field = \"host: \";\n-                    let target = stdout.lines().find_map(|l| l.strip_prefix(field));\n-                    if let Some(target) = target {\n-                        Some(target.to_string())\n-                    } else {\n-                        // If we fail to resolve the host platform, it's not the end of the world.\n-                        log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n-                        None\n-                    }\n-                }\n-                Err(e) => {\n-                    log::warn!(\"Failed to discover host platform: {}\", e);\n-                    None\n-                }\n-            }\n+            rustc_discover_host_triple(cargo_toml)\n         };\n         if let Some(target) = target {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n@@ -368,3 +349,43 @@ impl CargoWorkspace {\n         self.packages.iter().filter(|(_, v)| v.name == name).count() == 1\n     }\n }\n+\n+fn rustc_discover_host_triple(cargo_toml: &AbsPath) -> Option<String> {\n+    let mut rustc = Command::new(toolchain::rustc());\n+    rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n+    log::debug!(\"Discovering host platform by {:?}\", rustc);\n+    match utf8_stdout(rustc) {\n+        Ok(stdout) => {\n+            let field = \"host: \";\n+            let target = stdout.lines().find_map(|l| l.strip_prefix(field));\n+            if let Some(target) = target {\n+                Some(target.to_string())\n+            } else {\n+                // If we fail to resolve the host platform, it's not the end of the world.\n+                log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n+                None\n+            }\n+        }\n+        Err(e) => {\n+            log::warn!(\"Failed to discover host platform: {}\", e);\n+            None\n+        }\n+    }\n+}\n+\n+fn cargo_config_build_target(cargo_toml: &AbsPath) -> Option<String> {\n+    let mut cargo_config = Command::new(toolchain::cargo());\n+    cargo_config\n+        .current_dir(cargo_toml.parent().unwrap())\n+        .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n+        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+    // if successful we receive `build.target = \"target-triple\"`\n+    log::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n+    match utf8_stdout(cargo_config) {\n+        Ok(stdout) => stdout\n+            .strip_prefix(\"build.target = \\\"\")\n+            .and_then(|stdout| stdout.strip_suffix('\"'))\n+            .map(ToOwned::to_owned),\n+        Err(_) => None,\n+    }\n+}"}, {"sha": "012eab256ab4b76fa81a09d222033f7b8d572733", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "patch": "@@ -2,9 +2,12 @@\n \n use std::process::Command;\n \n+use anyhow::Result;\n+use paths::AbsPath;\n+\n use crate::{cfg_flag::CfgFlag, utf8_stdout};\n \n-pub(crate) fn get(target: Option<&str>) -> Vec<CfgFlag> {\n+pub(crate) fn get(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n     let mut res = Vec::with_capacity(6 * 2 + 1);\n \n@@ -16,19 +19,39 @@ pub(crate) fn get(target: Option<&str>) -> Vec<CfgFlag> {\n         }\n     }\n \n-    let rustc_cfgs = {\n-        let mut cmd = Command::new(toolchain::rustc());\n-        cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n-        if let Some(target) = target {\n-            cmd.args(&[\"--target\", target]);\n-        }\n-        utf8_stdout(cmd)\n-    };\n-\n-    match rustc_cfgs {\n+    match get_rust_cfgs(cargo_toml, target) {\n         Ok(rustc_cfgs) => res.extend(rustc_cfgs.lines().map(|it| it.parse().unwrap())),\n         Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n     res\n }\n+\n+fn get_rust_cfgs(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Result<String> {\n+    let cargo_rust_cfgs = match cargo_toml {\n+        Some(cargo_toml) => {\n+            let mut cargo_config = Command::new(toolchain::cargo());\n+            cargo_config\n+                .current_dir(cargo_toml.parent().unwrap())\n+                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+            if let Some(target) = target {\n+                cargo_config.args(&[\"--target\", target]);\n+            }\n+            utf8_stdout(cargo_config).ok()\n+        }\n+        None => None,\n+    };\n+    match cargo_rust_cfgs {\n+        Some(stdout) => Ok(stdout),\n+        None => {\n+            // using unstable cargo features failed, fall back to using plain rustc\n+            let mut cmd = Command::new(toolchain::rustc());\n+            cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+            if let Some(target) = target {\n+                cmd.args(&[\"--target\", target]);\n+            }\n+            utf8_stdout(cmd)\n+        }\n+    }\n+}"}, {"sha": "84c702fdf7e4c7e7bdd8a5c37498ed4b0a193522", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0cdc5f550c0ccef762fcff7d1fbee9b6245027/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=6c0cdc5f550c0ccef762fcff7d1fbee9b6245027", "patch": "@@ -143,7 +143,8 @@ impl ProjectWorkspace {\n                 } else {\n                     None\n                 };\n-                let rustc_cfg = rustc_cfg::get(config.target.as_deref());\n+\n+                let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n                 ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg }\n             }\n         };\n@@ -159,7 +160,7 @@ impl ProjectWorkspace {\n             Some(path) => Some(Sysroot::load(path)?),\n             None => None,\n         };\n-        let rustc_cfg = rustc_cfg::get(target);\n+        let rustc_cfg = rustc_cfg::get(None, target);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n@@ -310,7 +311,7 @@ fn project_json_to_crate_graph(\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n-                    cfg_cache.entry(target).or_insert_with(|| rustc_cfg::get(Some(target)))\n+                    cfg_cache.entry(target).or_insert_with(|| rustc_cfg::get(None, Some(target)))\n                 }\n                 None => &rustc_cfg,\n             };"}]}