{"sha": "aff620de1e5e0791b7c91f765cf17f3214848230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjYyMGRlMWU1ZTA3OTFiN2M5MWY3NjVjZjE3ZjMyMTQ4NDgyMzA=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-22T22:59:42Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:22:05Z"}, "message": "rustc: Remove moved_variables_set", "tree": {"sha": "cc099394e8b1c50a7904eaa45f302a713066933b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc099394e8b1c50a7904eaa45f302a713066933b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff620de1e5e0791b7c91f765cf17f3214848230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff620de1e5e0791b7c91f765cf17f3214848230", "html_url": "https://github.com/rust-lang/rust/commit/aff620de1e5e0791b7c91f765cf17f3214848230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff620de1e5e0791b7c91f765cf17f3214848230/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10735e3840b1bfcd52bf063258bc5db0c6e2a66", "html_url": "https://github.com/rust-lang/rust/commit/d10735e3840b1bfcd52bf063258bc5db0c6e2a66"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "10650b747bd78d3deea1be8c24987224d2177ffa", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -348,8 +348,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     time(time_passes, \"effect checking\", (), |_|\n          middle::effect::check_crate(&ty_cx, krate));\n \n-    let middle::moves::MoveMaps {moves_map, moved_variables_set,\n-                                 capture_map} =\n+    let middle::moves::MoveMaps {moves_map, capture_map} =\n         time(time_passes, \"compute moves\", (), |_|\n              middle::moves::compute_moves(&ty_cx, krate));\n \n@@ -361,11 +360,9 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n \n     time(time_passes, \"borrow checking\", (), |_|\n          middle::borrowck::check_crate(&ty_cx, &moves_map,\n-                                       &moved_variables_set,\n                                        &capture_map, krate));\n \n     drop(moves_map);\n-    drop(moved_variables_set);\n \n     time(time_passes, \"kind checking\", (), |_|\n          kind::check_crate(&ty_cx, krate));"}, {"sha": "5504393e7c27378bd8ce57f0b6ea458fcd230dde", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -77,13 +77,11 @@ impl<'a> Visitor<()> for BorrowckCtxt<'a> {\n \n pub fn check_crate(tcx: &ty::ctxt,\n                    moves_map: &NodeSet,\n-                   moved_variables_set: &NodeSet,\n                    capture_map: &moves::CaptureMap,\n                    krate: &ast::Crate) {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n         moves_map: moves_map,\n-        moved_variables_set: moved_variables_set,\n         capture_map: capture_map,\n         stats: @BorrowStats {\n             loaned_paths_same: Cell::new(0),\n@@ -168,7 +166,6 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n pub struct BorrowckCtxt<'a> {\n     tcx: &'a ty::ctxt,\n     moves_map: &'a NodeSet,\n-    moved_variables_set: &'a NodeSet,\n     capture_map: &'a moves::CaptureMap,\n \n     // Statistics:"}, {"sha": "1e44e1ab7f967b0a335d30e51872c08a135fc047", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -101,11 +101,6 @@ borrow checker and trans, for example, only care about the outermost\n expressions that are moved.  It is more efficient therefore just to\n store those entries.\n \n-Sometimes though we want to know the variables that are moved (in\n-particular in the borrow checker). For these cases, the set\n-`moved_variables_set` just collects the ids of variables that are\n-moved.\n-\n Finally, the `capture_map` maps from the node_id of a closure\n expression to an array of `CaptureVar` structs detailing which\n variables are captured and how (by ref, by copy, by move).\n@@ -170,7 +165,6 @@ pub struct MoveMaps {\n      * pub Note: The `moves_map` stores expression ids that are moves,\n      * whereas this set stores the ids of the variables that are\n      * moved at some point */\n-    pub moved_variables_set: NodeSet,\n     pub capture_map: CaptureMap\n }\n \n@@ -206,7 +200,6 @@ pub fn compute_moves(tcx: &ty::ctxt, krate: &Crate) -> MoveMaps {\n         tcx: tcx,\n         move_maps: MoveMaps {\n             moves_map: NodeSet::new(),\n-            moved_variables_set: NodeSet::new(),\n             capture_map: NodeMap::new()\n         }\n     };\n@@ -326,19 +319,6 @@ impl<'a> VisitContext<'a> {\n         debug!(\"comp_mode = {:?}\", comp_mode);\n \n         match expr.node {\n-            ExprPath(..) => {\n-                match comp_mode {\n-                    Move => {\n-                        let def = self.tcx.def_map.borrow().get_copy(&expr.id);\n-                        let r = moved_variable_node_id_from_def(def);\n-                        for &id in r.iter() {\n-                            self.move_maps.moved_variables_set.insert(id);\n-                        }\n-                    }\n-                    Read => {}\n-                }\n-            }\n-\n             ExprUnary(UnDeref, base) => {      // *base\n                 if !self.use_overloaded_operator(expr, base, []) {\n                     // Moving out of *base moves out of base.\n@@ -475,6 +455,7 @@ impl<'a> VisitContext<'a> {\n                 self.use_expr(base, Read);\n             }\n \n+            ExprPath(..) |\n             ExprInlineAsm(..) |\n             ExprBreak(..) |\n             ExprAgain(..) |"}, {"sha": "ff138451e93f2d904de5baf283ec629ad51283e5", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -26,8 +26,10 @@ struct F { f: ~int }\n pub fn main() {\n     let mut x = @F {f: ~3};\n     borrow(x.f, |b_x| {\n+    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n+        //~^ NOTE borrow occurs due to use of `x` in closure\n         x = @F {f: ~4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));", "previous_filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs"}, {"sha": "b06eb0d6ba23a14caa784fa794c335431a2bb684", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -26,8 +26,10 @@ struct F { f: ~int }\n pub fn main() {\n     let mut x = ~@F{f: ~3};\n     borrow(x.f, |b_x| {\n+    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n+        //~^ NOTE  borrow occurs due to use of `x` in closure\n         *x = @F{f: ~4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));", "previous_filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs"}, {"sha": "1a920c7871e1cecc421141e75fb2561aaca689d2", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -24,8 +24,10 @@ fn borrow(x: &int, f: |x: &int|) {\n pub fn main() {\n     let mut x = @3;\n     borrow(x, |b_x| {\n+    //~^ ERROR cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x) as *int, &(*b_x) as *int);\n+        //~^ NOTE borrow occurs due to use of `x` in closure\n         x = @22;\n \n         println!(\"&*b_x = {:p}\", &(*b_x));", "previous_filename": "src/test/run-pass/borrowck-preserve-box.rs"}, {"sha": "7000e2351dd91bacedfb97fe38c1d26f42f15ebd", "filename": "src/test/compile-fail/borrowck-preserve-cond-box.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -30,8 +30,8 @@ fn testfn(cond: bool) {\n     println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);\n \n-    x = @5;\n-    y = @6;\n+    x = @5; //~ERROR cannot assign to `x` because it is borrowed\n+    y = @6; //~ERROR cannot assign to `y` because it is borrowed\n \n     println!(\"*r = {}, exp = {}\", *r, exp);\n     assert_eq!(*r, exp);", "previous_filename": "src/test/run-pass/borrowck-preserve-cond-box.rs"}, {"sha": "aeabf6d9f8b559329119e6717f82f5ba922ab93e", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -26,8 +26,10 @@ struct F { f: ~int }\n pub fn main() {\n     let mut x = @F {f: ~3};\n     borrow((*x).f, |b_x| {\n+    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n+        //~^ NOTE borrow occurs due to use of `x` in closure\n         x = @F {f: ~4};\n \n         println!(\"&*b_x = {:p}\", &(*b_x));", "previous_filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs"}, {"sha": "68bbebb8cb048bafafe685c916816a261c87eae4", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff620de1e5e0791b7c91f765cf17f3214848230/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=aff620de1e5e0791b7c91f765cf17f3214848230", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/* Tests conditional rooting of the box y */\n+// Test no-special rooting is used for managed boxes\n \n #![feature(managed_boxes)]\n \n@@ -25,12 +25,11 @@ fn testfn(cond: bool) {\n         exp = 4;\n     }\n \n-    x = @5;\n-    y = @6;\n+    x = @5; //~ERROR cannot assign to `x` because it is borrowed\n+    y = @6; //~ERROR cannot assign to `y` because it is borrowed\n     assert_eq!(*a, exp);\n     assert_eq!(x, @5);\n     assert_eq!(y, @6);\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}", "previous_filename": "src/test/run-pass/regions-appearance-constraint.rs"}]}