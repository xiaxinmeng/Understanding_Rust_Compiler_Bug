{"sha": "550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MGQ3ZmJlM2NiZjJhZjRhNDdmY2E2YzliYmVmYWY3OThjZDdiN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-12T14:46:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-12T14:46:54Z"}, "message": "Rename ra_tt -> tt", "tree": {"sha": "1bf923c652e0bdb325240e27bb07e3c552a1aa07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf923c652e0bdb325240e27bb07e3c552a1aa07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "html_url": "https://github.com/rust-lang/rust/commit/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "208b7bd7ba687fb570feb1b89219f14c63712ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/208b7bd7ba687fb570feb1b89219f14c63712ce8", "html_url": "https://github.com/rust-lang/rust/commit/208b7bd7ba687fb570feb1b89219f14c63712ce8"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "598b739c7e1a8c1e944c8f78e930fed9508f6563", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -939,8 +939,8 @@ version = \"0.1.0\"\n dependencies = [\n  \"ra_mbe\",\n  \"ra_syntax\",\n- \"ra_tt\",\n  \"rustc-hash\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -950,11 +950,11 @@ dependencies = [\n  \"profile\",\n  \"ra_cfg\",\n  \"ra_syntax\",\n- \"ra_tt\",\n  \"rustc-hash\",\n  \"salsa\",\n  \"stdx\",\n  \"test_utils\",\n+ \"tt\",\n  \"vfs\",\n ]\n \n@@ -1004,11 +1004,11 @@ dependencies = [\n  \"ra_hir_expand\",\n  \"ra_mbe\",\n  \"ra_syntax\",\n- \"ra_tt\",\n  \"rustc-hash\",\n  \"smallvec\",\n  \"stdx\",\n  \"test_utils\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -1023,9 +1023,9 @@ dependencies = [\n  \"ra_mbe\",\n  \"ra_parser\",\n  \"ra_syntax\",\n- \"ra_tt\",\n  \"rustc-hash\",\n  \"test_utils\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -1107,10 +1107,10 @@ dependencies = [\n  \"log\",\n  \"ra_parser\",\n  \"ra_syntax\",\n- \"ra_tt\",\n  \"rustc-hash\",\n  \"smallvec\",\n  \"test_utils\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -1127,9 +1127,9 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n- \"ra_tt\",\n  \"serde\",\n  \"serde_json\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -1144,9 +1144,9 @@ dependencies = [\n  \"ra_mbe\",\n  \"ra_proc_macro\",\n  \"ra_toolchain\",\n- \"ra_tt\",\n  \"serde_derive\",\n  \"test_utils\",\n+ \"tt\",\n ]\n \n [[package]]\n@@ -1217,14 +1217,6 @@ dependencies = [\n  \"home\",\n ]\n \n-[[package]]\n-name = \"ra_tt\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"smol_str\",\n- \"stdx\",\n-]\n-\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -1329,14 +1321,14 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_toolchain\",\n- \"ra_tt\",\n  \"rayon\",\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n  \"stdx\",\n  \"test_utils\",\n  \"threadpool\",\n+ \"tt\",\n  \"vfs\",\n  \"vfs-notify\",\n  \"winapi 0.3.9\",\n@@ -1706,6 +1698,14 @@ dependencies = [\n  \"tracing-subscriber\",\n ]\n \n+[[package]]\n+name = \"tt\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"smol_str\",\n+ \"stdx\",\n+]\n+\n [[package]]\n name = \"ungrammar\"\n version = \"1.1.1\""}, {"sha": "770a407428fec24380dde05bfdd3b0e55b9eed8e", "filename": "crates/ra_cfg/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_cfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_cfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -12,7 +12,7 @@ doctest = false\n rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n-tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+tt = { path = \"../tt\" }\n \n [dev-dependencies]\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }"}, {"sha": "47a0f6248f2740fbac961f11875836ca027c4ac5", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -15,7 +15,7 @@ rustc-hash = \"1.1.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_cfg = { path = \"../ra_cfg\" }\n profile = { path = \"../profile\" }\n-ra_tt = { path = \"../ra_tt\" }\n+tt = { path = \"../tt\" }\n test_utils = { path = \"../test_utils\" }\n vfs = { path = \"../vfs\" }\n stdx = { path = \"../stdx\" }"}, {"sha": "02a1abee0f00a0941e4410990230adcb3032d917", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -10,8 +10,8 @@ use std::{fmt, iter::FromIterator, ops, str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use ra_syntax::SmolStr;\n-use ra_tt::TokenExpander;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use tt::TokenExpander;\n use vfs::file_set::FileSet;\n \n pub use vfs::FileId;\n@@ -156,7 +156,7 @@ impl CrateGraph {\n         display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n-        proc_macro: Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)>,\n+        proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n     ) -> CrateId {\n         let proc_macro =\n             proc_macro.into_iter().map(|(name, it)| ProcMacro { name, expander: it }).collect();"}, {"sha": "1a080a8b4bdae801f9f07954a4084748bf93756e", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -30,7 +30,7 @@ hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n ra_cfg = { path = \"../ra_cfg\" }\n-tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+tt = { path = \"../tt\" }\n \n [dev-dependencies]\n expect = { path = \"../expect\" }"}, {"sha": "7d8ccd56fc51529e44c7812fba8203a6a117cba2", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -18,6 +18,6 @@ ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_parser = { path = \"../ra_parser\" }\n profile = { path = \"../profile\" }\n-tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+tt = { path = \"../tt\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n test_utils = { path = \"../test_utils\"}"}, {"sha": "23315910c4769878a81d9ce6e1eeddba5ae577f4", "filename": "crates/ra_mbe/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_mbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_mbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -11,7 +11,7 @@ doctest = false\n [dependencies]\n ra_syntax = { path = \"../ra_syntax\" }\n ra_parser = { path = \"../ra_parser\" }\n-tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+tt = { path = \"../tt\" }\n rustc-hash = \"1.1.0\"\n smallvec = \"1.2.0\"\n log = \"0.4.8\""}, {"sha": "f854ca09abe82256e4a4cd43611a623a5c77040f", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -1,5 +1,5 @@\n //! `mbe` (short for Macro By Example) crate contains code for handling\n-//! `macro_rules` macros. It uses `TokenTree` (from `ra_tt` package) as the\n+//! `macro_rules` macros. It uses `TokenTree` (from `tt` package) as the\n //! interface, although it contains some code to bridge `SyntaxNode`s and\n //! `TokenTree`s as well!\n "}, {"sha": "d2d1bc228d58ae332fd1c8d54ece26a96c2ddad6", "filename": "crates/ra_proc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -10,7 +10,7 @@ license = \"MIT OR Apache-2.0\"\n doctest = false\n \n [dependencies]\n-ra_tt = { path = \"../ra_tt\" }\n+tt = { path = \"../tt\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n log = \"0.4.8\""}, {"sha": "15db57eb28bb85badee87102ebfa2b7f0a5388d9", "filename": "crates/ra_proc_macro/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Flib.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -9,15 +9,17 @@ mod rpc;\n mod process;\n pub mod msg;\n \n-use process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n-use ra_tt::{SmolStr, Subtree};\n use std::{\n     ffi::OsStr,\n     io,\n     path::{Path, PathBuf},\n     sync::Arc,\n };\n \n+use tt::{SmolStr, Subtree};\n+\n+use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n+\n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n \n #[derive(Debug, Clone)]\n@@ -36,12 +38,12 @@ impl PartialEq for ProcMacroProcessExpander {\n     }\n }\n \n-impl ra_tt::TokenExpander for ProcMacroProcessExpander {\n+impl tt::TokenExpander for ProcMacroProcessExpander {\n     fn expand(\n         &self,\n         subtree: &Subtree,\n         _attr: Option<&Subtree>,\n-    ) -> Result<Subtree, ra_tt::ExpansionError> {\n+    ) -> Result<Subtree, tt::ExpansionError> {\n         self.process.custom_derive(&self.dylib_path, subtree, &self.name)\n     }\n }\n@@ -72,10 +74,7 @@ impl ProcMacroClient {\n         ProcMacroClient { kind: ProcMacroClientKind::Dummy }\n     }\n \n-    pub fn by_dylib_path(\n-        &self,\n-        dylib_path: &Path,\n-    ) -> Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)> {\n+    pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<(SmolStr, Arc<dyn tt::TokenExpander>)> {\n         match &self.kind {\n             ProcMacroClientKind::Dummy => vec![],\n             ProcMacroClientKind::Process { process, .. } => {\n@@ -94,7 +93,7 @@ impl ProcMacroClient {\n                         match kind {\n                             ProcMacroKind::CustomDerive => {\n                                 let name = SmolStr::new(&name);\n-                                let expander: Arc<dyn ra_tt::TokenExpander> =\n+                                let expander: Arc<dyn tt::TokenExpander> =\n                                     Arc::new(ProcMacroProcessExpander {\n                                         process: process.clone(),\n                                         name: name.clone(),"}, {"sha": "f84ebdbc5744287f103c260f4e9ecac6c91f6294", "filename": "crates/ra_proc_macro/src/msg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fmsg.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -5,11 +5,12 @@ use std::{\n     io::{self, BufRead, Write},\n };\n \n+use serde::{de::DeserializeOwned, Deserialize, Serialize};\n+\n use crate::{\n     rpc::{ListMacrosResult, ListMacrosTask},\n     ExpansionResult, ExpansionTask,\n };\n-use serde::{de::DeserializeOwned, Deserialize, Serialize};\n \n #[derive(Debug, Serialize, Deserialize, Clone)]\n pub enum Request {"}, {"sha": "51ffcaa786d82b3ba0fb6a54eba18d663ac4ab5b", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -1,21 +1,22 @@\n //! Handle process life-time and message passing for proc-macro client\n \n-use crossbeam_channel::{bounded, Receiver, Sender};\n-use ra_tt::Subtree;\n-\n-use crate::msg::{ErrorCode, Message, Request, Response, ResponseError};\n-use crate::rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n-\n-use io::{BufRead, BufReader};\n use std::{\n     convert::{TryFrom, TryInto},\n     ffi::{OsStr, OsString},\n-    io::{self, Write},\n+    io::{self, BufRead, BufReader, Write},\n     path::{Path, PathBuf},\n     process::{Child, Command, Stdio},\n     sync::{Arc, Weak},\n };\n \n+use crossbeam_channel::{bounded, Receiver, Sender};\n+use tt::Subtree;\n+\n+use crate::{\n+    msg::{ErrorCode, Message, Request, Response, ResponseError},\n+    rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind},\n+};\n+\n #[derive(Debug, Default)]\n pub(crate) struct ProcMacroProcessSrv {\n     inner: Option<Weak<Sender<Task>>>,\n@@ -50,7 +51,7 @@ impl ProcMacroProcessSrv {\n     pub fn find_proc_macros(\n         &self,\n         dylib_path: &Path,\n-    ) -> Result<Vec<(String, ProcMacroKind)>, ra_tt::ExpansionError> {\n+    ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n         let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n \n         let result: ListMacrosResult = self.send_task(Request::ListMacro(task))?;\n@@ -62,7 +63,7 @@ impl ProcMacroProcessSrv {\n         dylib_path: &Path,\n         subtree: &Subtree,\n         derive_name: &str,\n-    ) -> Result<Subtree, ra_tt::ExpansionError> {\n+    ) -> Result<Subtree, tt::ExpansionError> {\n         let task = ExpansionTask {\n             macro_body: subtree.clone(),\n             macro_name: derive_name.to_string(),\n@@ -74,38 +75,35 @@ impl ProcMacroProcessSrv {\n         Ok(result.expansion)\n     }\n \n-    pub fn send_task<R>(&self, req: Request) -> Result<R, ra_tt::ExpansionError>\n+    pub fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n     where\n         R: TryFrom<Response, Error = &'static str>,\n     {\n         let sender = match &self.inner {\n-            None => return Err(ra_tt::ExpansionError::Unknown(\"No sender is found.\".to_string())),\n+            None => return Err(tt::ExpansionError::Unknown(\"No sender is found.\".to_string())),\n             Some(it) => it,\n         };\n \n         let (result_tx, result_rx) = bounded(0);\n         let sender = match sender.upgrade() {\n             None => {\n-                return Err(ra_tt::ExpansionError::Unknown(\"Proc macro process is closed.\".into()))\n+                return Err(tt::ExpansionError::Unknown(\"Proc macro process is closed.\".into()))\n             }\n             Some(it) => it,\n         };\n         sender.send(Task { req, result_tx }).unwrap();\n         let res = result_rx\n             .recv()\n-            .map_err(|_| ra_tt::ExpansionError::Unknown(\"Proc macro thread is closed.\".into()))?;\n+            .map_err(|_| tt::ExpansionError::Unknown(\"Proc macro thread is closed.\".into()))?;\n \n         match res {\n             Some(Response::Error(err)) => {\n-                return Err(ra_tt::ExpansionError::ExpansionError(err.message));\n+                return Err(tt::ExpansionError::ExpansionError(err.message));\n             }\n             Some(res) => Ok(res.try_into().map_err(|err| {\n-                ra_tt::ExpansionError::Unknown(format!(\n-                    \"Fail to get response, reason : {:#?} \",\n-                    err\n-                ))\n+                tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n             })?),\n-            None => Err(ra_tt::ExpansionError::Unknown(\"Empty result\".into())),\n+            None => Err(tt::ExpansionError::Unknown(\"Empty result\".into())),\n         }\n     }\n }"}, {"sha": "5e5d78d067fe1eff5ccf76ac75655067a6743041", "filename": "crates/ra_proc_macro/src/rpc.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Frpc.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -1,17 +1,18 @@\n //! Data struture serialization related stuff for RPC\n //!\n //! Defines all necessary rpc serialization data structures,\n-//! which includes `ra_tt` related data and some task messages.\n-//! Although adding `Serialize` and `Deserialize` traits to `ra_tt` directly seems\n-//! to be much easier, we deliberately duplicate `ra_tt` structs with `#[serde(with = \"XXDef\")]`\n+//! which includes `tt` related data and some task messages.\n+//! Although adding `Serialize` and `Deserialize` traits to `tt` directly seems\n+//! to be much easier, we deliberately duplicate `tt` structs with `#[serde(with = \"XXDef\")]`\n //! for separation of code responsibility.\n \n-use ra_tt::{\n+use std::path::PathBuf;\n+\n+use serde::{Deserialize, Serialize};\n+use tt::{\n     Delimiter, DelimiterKind, Ident, Leaf, Literal, Punct, SmolStr, Spacing, Subtree, TokenId,\n     TokenTree,\n };\n-use serde::{Deserialize, Serialize};\n-use std::path::PathBuf;\n \n #[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub struct ListMacrosTask {"}, {"sha": "a690cc0443e112eaf1f0c0aad98f2f7437d98560", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -10,7 +10,7 @@ license = \"MIT OR Apache-2.0\"\n doctest = false\n \n [dependencies]\n-ra_tt = { path = \"../ra_tt\" }\n+tt = { path = \"../tt\" }\n ra_mbe = { path = \"../ra_mbe\" }\n ra_proc_macro = { path = \"../ra_proc_macro\" }\n goblin = \"0.2.1\""}, {"sha": "9b6cc91ef92331695ca4be348b0d40fefb496270", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -128,9 +128,9 @@ impl Expander {\n     pub fn expand(\n         &self,\n         macro_name: &str,\n-        macro_body: &ra_tt::Subtree,\n-        attributes: Option<&ra_tt::Subtree>,\n-    ) -> Result<ra_tt::Subtree, bridge::PanicMessage> {\n+        macro_body: &tt::Subtree,\n+        attributes: Option<&tt::Subtree>,\n+    ) -> Result<tt::Subtree, bridge::PanicMessage> {\n         let parsed_body = TokenStream::with_subtree(macro_body.clone());\n \n         let parsed_attributes = attributes"}, {"sha": "1fc2eef82e9c4c88d4684e6262760cd98313b815", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -5,7 +5,7 @@\n //!\n //! But we adapt it to better fit RA needs:\n //!\n-//! * We use `ra_tt` for proc-macro `TokenStream` server, it is easier to manipulate and interact with\n+//! * We use `tt` for proc-macro `TokenStream` server, it is easier to manipulate and interact with\n //!   RA than `proc-macro2` token stream.\n //! * By **copying** the whole rustc `lib_proc_macro` code, we are able to build this with `stable`\n //!   rustc rather than `unstable`. (Although in gerenal ABI compatibility is still an issue)"}, {"sha": "d534d1337fe6b6ebd3a925615eb8bee5af52bea6", "filename": "crates/ra_proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -1,15 +1,14 @@\n-//! Rustc proc-macro server implementation with ra_tt\n+//! Rustc proc-macro server implementation with tt\n //!\n //! Based on idea from https://github.com/fedochet/rust-proc-macro-expander\n //! The lib-proc-macro server backend is `TokenStream`-agnostic, such that\n //! we could provide any TokenStream implementation.\n //! The original idea from fedochet is using proc-macro2 as backend,\n-//! we use ra_tt instead for better intergation with RA.\n+//! we use tt instead for better intergation with RA.\n //!\n //! FIXME: No span and source file information is implemented yet\n \n use crate::proc_macro::bridge::{self, server};\n-use ra_tt as tt;\n \n use std::collections::{Bound, HashMap};\n use std::hash::Hash;\n@@ -153,9 +152,10 @@ pub struct TokenStreamBuilder {\n \n /// Public implementation details for the `TokenStream` type, such as iterators.\n pub mod token_stream {\n-    use super::{tt, TokenStream, TokenTree};\n     use std::str::FromStr;\n \n+    use super::{TokenStream, TokenTree};\n+\n     /// An iterator over `TokenStream`'s `TokenTree`s.\n     /// The iteration is \"shallow\", e.g., the iterator doesn't recurse into delimited groups,\n     /// and returns whole groups as token trees."}, {"sha": "9bc5cc63146647df384ca5992cc76913e6cc0781", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -61,4 +61,4 @@ winapi = \"0.3.8\"\n expect = { path = \"../expect\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n-tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+tt = { path = \"../tt\" }"}, {"sha": "dfcdcf03e86eee28d8748f98ece92f5c80104549", "filename": "crates/tt/Cargo.toml", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2FCargo.toml?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -1,15 +1,16 @@\n [package]\n-edition = \"2018\"\n-name = \"ra_tt\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n+name = \"tt\"\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n \n [dependencies]\n-stdx = { path = \"../stdx\" }\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n+\n+stdx = { path = \"../stdx\" }", "previous_filename": "crates/ra_tt/Cargo.toml"}, {"sha": "02c771f70f7a9f2c79757f38095cb885eddf04de", "filename": "crates/tt/src/buffer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "previous_filename": "crates/ra_tt/src/buffer.rs"}, {"sha": "20c3f5eabfb8dfe54e2e6e75ff3f51882239c737", "filename": "crates/tt/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "previous_filename": "crates/ra_tt/src/lib.rs"}, {"sha": "ddaab93ab70e5a873da589391c3e2b2d7d490d73", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=550d7fbe3cbf2af4a47fca6c9bbefaf798cd7b7b", "patch": "@@ -200,7 +200,7 @@ impl TidyDocs {\n             \"profile\",\n             \"ra_project_model\",\n             \"ra_syntax\",\n-            \"ra_tt\",\n+            \"tt\",\n             \"ra_hir_ty\",\n         ];\n "}]}