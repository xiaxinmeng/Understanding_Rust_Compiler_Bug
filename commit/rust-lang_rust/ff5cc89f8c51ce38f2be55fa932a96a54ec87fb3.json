{"sha": "ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWNjODlmOGM1MWNlMzhmMmJlNTVmYTkzMmE5NmE1NGVjODdmYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-21T04:21:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-21T04:21:20Z"}, "message": "Auto merge of #29190 - alexcrichton:from-str-socket-addr, r=brson\n\nThis was already implemented for SocketAddr, so the other types are lacking it\r\nis just an oversight!\r\n\r\nCloses #29183", "tree": {"sha": "5b7db69f6a16ab79f33523fb963e5084e27a5319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b7db69f6a16ab79f33523fb963e5084e27a5319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "html_url": "https://github.com/rust-lang/rust/commit/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fddf2f75747faf5e0e2fa9e10befe30120554e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fddf2f75747faf5e0e2fa9e10befe30120554e02", "html_url": "https://github.com/rust-lang/rust/commit/fddf2f75747faf5e0e2fa9e10befe30120554e02"}, {"sha": "8aa6a117a4174a4a906d816fff4e7798286bd92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa6a117a4174a4a906d816fff4e7798286bd92d", "html_url": "https://github.com/rust-lang/rust/commit/8aa6a117a4174a4a906d816fff4e7798286bd92d"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "827a3eb9bf600482f521dd569025efd96bffc285", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "patch": "@@ -594,10 +594,18 @@ mod tests {\n     fn test_from_str_socket_addr() {\n         assert_eq!(Ok(sa4(Ipv4Addr::new(77, 88, 21, 11), 80)),\n                    \"77.88.21.11:80\".parse());\n+        assert_eq!(Ok(SocketAddrV4::new(Ipv4Addr::new(77, 88, 21, 11), 80)),\n+                   \"77.88.21.11:80\".parse());\n         assert_eq!(Ok(sa6(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53)),\n                    \"[2a02:6b8:0:1::1]:53\".parse());\n+        assert_eq!(Ok(SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1,\n+                                                      0, 0, 0, 1), 53, 0, 0)),\n+                   \"[2a02:6b8:0:1::1]:53\".parse());\n         assert_eq!(Ok(sa6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0x7F00, 1), 22)),\n                    \"[::127.0.0.1]:22\".parse());\n+        assert_eq!(Ok(SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0,\n+                                                      0x7F00, 1), 22, 0, 0)),\n+                   \"[::127.0.0.1]:22\".parse());\n \n         // without port\n         let none: Option<SocketAddr> = \"127.0.0.1\".parse().ok();"}, {"sha": "1619dac78ca8ed1eb59469d6cf335d9d216977c9", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=ff5cc89f8c51ce38f2be55fa932a96a54ec87fb3", "patch": "@@ -267,30 +267,42 @@ impl<'a> Parser<'a> {\n         self.read_or(&mut [Box::new(ipv4_addr), Box::new(ipv6_addr)])\n     }\n \n-    fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n+    fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {\n+        let ip_addr = |p: &mut Parser| p.read_ipv4_addr();\n+        let colon = |p: &mut Parser| p.read_given_char(':');\n+        let port = |p: &mut Parser| {\n+            p.read_number(10, 5, 0x10000).map(|n| n as u16)\n+        };\n+\n+        self.read_seq_3(ip_addr, colon, port).map(|t| {\n+            let (ip, _, port): (Ipv4Addr, char, u16) = t;\n+            SocketAddrV4::new(ip, port)\n+        })\n+    }\n+\n+    fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n         let ip_addr = |p: &mut Parser| {\n-            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |p: &mut Parser| {\n-                let open_br = |p: &mut Parser| p.read_given_char('[');\n-                let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n-                let clos_br = |p: &mut Parser| p.read_given_char(']');\n-                p.read_seq_3::<char, Ipv6Addr, char, _, _, _>(open_br, ip_addr, clos_br)\n-                        .map(|t| match t { (_, ip, _) => IpAddr::V6(ip) })\n-            };\n-            p.read_or(&mut [Box::new(ipv4_p), Box::new(ipv6_p)])\n+            let open_br = |p: &mut Parser| p.read_given_char('[');\n+            let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n+            let clos_br = |p: &mut Parser| p.read_given_char(']');\n+            p.read_seq_3(open_br, ip_addr, clos_br).map(|t| t.1)\n         };\n         let colon = |p: &mut Parser| p.read_given_char(':');\n-        let port  = |p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);\n+        let port = |p: &mut Parser| {\n+            p.read_number(10, 5, 0x10000).map(|n| n as u16)\n+        };\n \n-        // host, colon, port\n         self.read_seq_3(ip_addr, colon, port).map(|t| {\n-            let (ip, _, port): (IpAddr, char, u16) = t;\n-            match ip {\n-                IpAddr::V4(ip) => SocketAddr::V4(SocketAddrV4::new(ip, port)),\n-                IpAddr::V6(ip) => SocketAddr::V6(SocketAddrV6::new(ip, port, 0, 0)),\n-            }\n+            let (ip, _, port): (Ipv6Addr, char, u16) = t;\n+            SocketAddrV6::new(ip, port, 0, 0)\n         })\n     }\n+\n+    fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n+        let v4 = |p: &mut Parser| p.read_socket_addr_v4().map(SocketAddr::V4);\n+        let v6 = |p: &mut Parser| p.read_socket_addr_v6().map(SocketAddr::V6);\n+        self.read_or(&mut [Box::new(v4), Box::new(v6)])\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -326,6 +338,28 @@ impl FromStr for Ipv6Addr {\n     }\n }\n \n+#[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n+impl FromStr for SocketAddrV4 {\n+    type Err = AddrParseError;\n+    fn from_str(s: &str) -> Result<SocketAddrV4, AddrParseError> {\n+        match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v4()) {\n+            Some(s) => Ok(s),\n+            None => Err(AddrParseError(())),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n+impl FromStr for SocketAddrV6 {\n+    type Err = AddrParseError;\n+    fn from_str(s: &str) -> Result<SocketAddrV6, AddrParseError> {\n+        match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v6()) {\n+            Some(s) => Ok(s),\n+            None => Err(AddrParseError(())),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for SocketAddr {\n     type Err = AddrParseError;"}]}