{"sha": "5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2NkNmE5ZWVlYTM4MGFmNGY4MTUwYjdhZmNkYzlmMTUzMzJhYmM=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-23T21:54:48Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-23T21:54:48Z"}, "message": "Apply packed and align restrictions to unions.", "tree": {"sha": "4a6bce2bb84bd7b7ae2bdf442c481942c48785e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6bce2bb84bd7b7ae2bdf442c481942c48785e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "html_url": "https://github.com/rust-lang/rust/commit/5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200c4d041059dd233c2181ff0fd0997b08bdc755", "url": "https://api.github.com/repos/rust-lang/rust/commits/200c4d041059dd233c2181ff0fd0997b08bdc755", "html_url": "https://github.com/rust-lang/rust/commit/200c4d041059dd233c2181ff0fd0997b08bdc755"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "74d46c1525caf44c7701249d75b34944fbc0d910", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "patch": "@@ -1073,6 +1073,8 @@ fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n+\n+    check_packed(tcx, span, def_id);\n }\n \n pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n@@ -1477,11 +1479,11 @@ fn check_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId)\n     if tcx.adt_def(def_id).repr.packed() {\n         if tcx.adt_def(def_id).repr.align > 0 {\n             struct_span_err!(tcx.sess, sp, E0587,\n-                             \"struct has conflicting packed and align representation hints\").emit();\n+                             \"type has conflicting packed and align representation hints\").emit();\n         }\n         else if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n             struct_span_err!(tcx.sess, sp, E0588,\n-                \"packed struct cannot transitively contain a `[repr(align)]` struct\").emit();\n+                \"packed type cannot transitively contain a `[repr(align)]` type\").emit();\n         }\n     }\n }\n@@ -1495,7 +1497,7 @@ fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return false;\n     }\n     match t.sty {\n-        ty::TyAdt(def, substs) if def.is_struct() => {\n+        ty::TyAdt(def, substs) if def.is_struct() || def.is_union() => {\n             if tcx.adt_def(def.did).repr.align > 0 {\n                 return true;\n             }"}, {"sha": "12ac8fb57b1f875beae0eca6359159cbdbdc0bbc", "filename": "src/test/compile-fail/conflicting-repr-hints.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs?ref=5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "patch": "@@ -28,14 +28,31 @@ enum D { D }\n struct E(i32);\n \n #[repr(packed, align(8))]\n-struct F(i32); //~ ERROR struct has conflicting packed and align representation hints\n+struct F(i32); //~ ERROR type has conflicting packed and align representation hints\n \n #[repr(packed)]\n #[repr(align(8))]\n-struct G(i32); //~ ERROR struct has conflicting packed and align representation hints\n+struct G(i32); //~ ERROR type has conflicting packed and align representation hints\n \n #[repr(align(8))]\n #[repr(packed)]\n-struct H(i32); //~ ERROR struct has conflicting packed and align representation hints\n+struct H(i32); //~ ERROR type has conflicting packed and align representation hints\n+\n+#[repr(packed, align(8))]\n+union X { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n+\n+#[repr(packed)]\n+#[repr(align(8))]\n+union Y { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n+\n+#[repr(align(8))]\n+#[repr(packed)]\n+union Z { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n \n fn main() {}"}, {"sha": "78d43064ea3d2323be727bbd7854fc9bd0c08a08", "filename": "src/test/compile-fail/repr-packed-contains-align.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cccd6a9eeea380af4f8150b7afcdc9f15332abc/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs?ref=5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "patch": "@@ -9,17 +9,53 @@\n // except according to those terms.\n #![feature(attr_literals)]\n #![feature(repr_align)]\n+#![feature(untagged_unions)]\n #![allow(dead_code)]\n \n #[repr(align(16))]\n-struct A(i32);\n+struct SA(i32);\n \n-struct B(A);\n+struct SB(SA);\n+\n+#[repr(align(16))]\n+union UA {\n+    i: i32\n+}\n+\n+union UB {\n+    a: UA\n+}\n+\n+#[repr(packed)]\n+struct SC(SA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SD(SB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SE(UA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SF(UB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+union UC { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    a: UA\n+}\n+\n+#[repr(packed)]\n+union UD { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    n: UB\n+}\n \n #[repr(packed)]\n-struct C(A); //~ ERROR: packed struct cannot transitively contain a `[repr(align)]` struct\n+union UE { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    a: SA\n+}\n \n #[repr(packed)]\n-struct D(B); //~ ERROR: packed struct cannot transitively contain a `[repr(align)]` struct\n+union UF { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    n: SB\n+}\n \n fn main() {}"}]}