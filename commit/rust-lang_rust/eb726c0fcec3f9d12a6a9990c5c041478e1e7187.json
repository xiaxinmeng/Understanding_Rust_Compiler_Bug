{"sha": "eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzI2YzBmY2VjM2Y5ZDEyYTZhOTk5MGM1YzA0MTQ3OGUxZTcxODc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-18T02:39:23Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T21:53:29Z"}, "message": "Add Artificial flag to generator variants", "tree": {"sha": "030e20b778849f6ff99950ef29585882e17b3140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030e20b778849f6ff99950ef29585882e17b3140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "html_url": "https://github.com/rust-lang/rust/commit/eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb726c0fcec3f9d12a6a9990c5c041478e1e7187/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a831f51169767c27ddd7edb30269d01f00bf29", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a831f51169767c27ddd7edb30269d01f00bf29", "html_url": "https://github.com/rust-lang/rust/commit/a5a831f51169767c27ddd7edb30269d01f00bf29"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "f26c45e90110ab3f45ddcfb88a305549f143608b", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eb726c0fcec3f9d12a6a9990c5c041478e1e7187/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb726c0fcec3f9d12a6a9990c5c041478e1e7187/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "patch": "@@ -863,7 +863,7 @@ fn foreign_type_metadata(\n     debug!(\"foreign_type_metadata: {:?}\", t);\n \n     let name = compute_debuginfo_type_name(cx.tcx, t, false);\n-    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA)\n+    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA, DIFlags::FlagZero)\n }\n \n fn pointer_type_metadata(\n@@ -1161,8 +1161,14 @@ fn prepare_struct_metadata(\n \n     let containing_scope = get_namespace_for_item(cx, struct_def_id);\n \n-    let struct_metadata_stub =\n-        create_struct_stub(cx, struct_type, &struct_name, unique_type_id, Some(containing_scope));\n+    let struct_metadata_stub = create_struct_stub(\n+        cx,\n+        struct_type,\n+        &struct_name,\n+        unique_type_id,\n+        Some(containing_scope),\n+        DIFlags::FlagZero,\n+    );\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,\n@@ -1218,8 +1224,14 @@ fn prepare_tuple_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n-    let struct_stub =\n-        create_struct_stub(cx, tuple_type, &tuple_name[..], unique_type_id, containing_scope);\n+    let struct_stub = create_struct_stub(\n+        cx,\n+        tuple_type,\n+        &tuple_name[..],\n+        unique_type_id,\n+        containing_scope,\n+        DIFlags::FlagZero,\n+    );\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,\n@@ -1390,6 +1402,10 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         } else {\n             type_metadata(cx, self.enum_type, self.span)\n         };\n+        let flags = match self.enum_type.kind {\n+            ty::Generator(..) => DIFlags::FlagArtificial,\n+            _ => DIFlags::FlagZero,\n+        };\n \n         match self.layout.variants {\n             Variants::Single { index } => {\n@@ -1423,7 +1439,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n                     align: self.layout.align.abi,\n-                    flags: DIFlags::FlagZero,\n+                    flags,\n                     discriminant: None,\n                     source_info: variant_info.source_info(cx),\n                 }]\n@@ -1477,7 +1493,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n                             align: self.layout.align.abi,\n-                            flags: DIFlags::FlagZero,\n+                            flags,\n                             discriminant: Some(\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n@@ -1560,7 +1576,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         offset: Size::ZERO,\n                         size: variant.size,\n                         align: variant.align.abi,\n-                        flags: DIFlags::FlagZero,\n+                        flags,\n                         discriminant: None,\n                         source_info: variant_info.source_info(cx),\n                     }]\n@@ -1610,7 +1626,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 offset: Size::ZERO,\n                                 size: self.layout.size,\n                                 align: self.layout.align.abi,\n-                                flags: DIFlags::FlagZero,\n+                                flags,\n                                 discriminant: niche_value,\n                                 source_info: variant_info.source_info(cx),\n                             }\n@@ -1743,6 +1759,14 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         }\n         None\n     }\n+\n+    #[allow(dead_code)]\n+    fn is_artificial(&self) -> bool {\n+        match self {\n+            VariantInfo::Generator { .. } => true,\n+            VariantInfo::Adt(..) => false,\n+        }\n+    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1762,7 +1786,15 @@ fn describe_enum_variant(\n             .type_map\n             .borrow_mut()\n             .get_unique_type_id_of_enum_variant(cx, layout.ty, &variant_name);\n-        create_struct_stub(cx, layout.ty, &variant_name, unique_type_id, Some(containing_scope))\n+        create_struct_stub(\n+            cx,\n+            layout.ty,\n+            &variant_name,\n+            unique_type_id,\n+            Some(containing_scope),\n+            // FIXME(tmandry): This doesn't seem to have any effect.\n+            if variant.is_artificial() { DIFlags::FlagArtificial } else { DIFlags::FlagZero },\n+        )\n     });\n \n     // Build an array of (field name, field type) pairs to be captured in the factory closure.\n@@ -1824,6 +1856,11 @@ fn prepare_enum_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tcx = cx.tcx;\n     let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n+    // FIXME(tmandry): This doesn't seem to have any effect.\n+    let enum_flags = match enum_type.kind {\n+        ty::Generator(..) => DIFlags::FlagArtificial,\n+        _ => DIFlags::FlagZero,\n+    };\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -1958,7 +1995,7 @@ fn prepare_enum_metadata(\n                     UNKNOWN_LINE_NUMBER,\n                     layout.size.bits(),\n                     layout.align.abi.bits() as u32,\n-                    DIFlags::FlagZero,\n+                    enum_flags,\n                     None,\n                     0, // RuntimeLang\n                     unique_type_id_str.as_ptr().cast(),\n@@ -2079,7 +2116,7 @@ fn prepare_enum_metadata(\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n             layout.align.abi.bits() as u32,\n-            DIFlags::FlagZero,\n+            enum_flags,\n             discriminator_metadata,\n             empty_array,\n             variant_part_unique_type_id_str.as_ptr().cast(),\n@@ -2105,7 +2142,7 @@ fn prepare_enum_metadata(\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n                 layout.align.abi.bits() as u32,\n-                DIFlags::FlagZero,\n+                enum_flags,\n                 None,\n                 type_array,\n                 0,\n@@ -2156,6 +2193,7 @@ fn composite_type_metadata(\n         composite_type_name,\n         composite_type_unique_id,\n         containing_scope,\n+        DIFlags::FlagZero,\n     );\n     // ... and immediately create and add the member descriptions.\n     set_members_of_composite_type(cx, composite_type, composite_type_metadata, member_descriptions);\n@@ -2257,6 +2295,7 @@ fn create_struct_stub(\n     struct_type_name: &str,\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n+    flags: DIFlags,\n ) -> &'ll DICompositeType {\n     let (struct_size, struct_align) = cx.size_and_align_of(struct_type);\n \n@@ -2278,7 +2317,7 @@ fn create_struct_stub(\n             UNKNOWN_LINE_NUMBER,\n             struct_size.bits(),\n             struct_align.bits() as u32,\n-            DIFlags::FlagZero,\n+            flags,\n             None,\n             empty_array,\n             0,"}]}