{"sha": "ff6d8ecd6482587368ab0a6287009460eac536b3", "node_id": "C_kwDOAAsO6NoAKGZmNmQ4ZWNkNjQ4MjU4NzM2OGFiMGE2Mjg3MDA5NDYwZWFjNTM2YjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-31T08:20:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-31T08:20:27Z"}, "message": "Rollup merge of #90427 - jkugelman:must-use-alloc-leak, r=joshtriplett\n\nAdd #[must_use] to alloc functions that would leak memory\n\nAs [requested](https://github.com/rust-lang/rust/pull/89899#issuecomment-955600779) by `@joshtriplett.`\n\n> Please do go ahead and add the ones whose only legitimate use for ignoring the return value is leaking memory. (In a separate PR please.) I think it's sufficiently error-prone to call something like alloc and ignore the result that it's legitimate to require `let _ =` for that.\n\nI added `realloc` myself. Clippy ignored it because of its `mut` argument.\n\n```rust\nalloc/src/alloc.rs:123:1   alloc   unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8;\n```\n\nParent issue: #89692\n\nr? `@joshtriplett`", "tree": {"sha": "e89ccb94dd1d71a655d22668e2308b5c3e56c322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89ccb94dd1d71a655d22668e2308b5c3e56c322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff6d8ecd6482587368ab0a6287009460eac536b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhflHLCRBK7hj4Ov3rIwAAW/oIAEOYwlg4KjuEbJL2T0W18oUn\nDf+Wu4F0EP5EIoRbF++2FKilpSEMUhdsv246avnnkiOsYYruDU27V/NJmNF3yAC7\ntFHT5wITQt6AbxrL2IPsgLEGFCUZfFWa6GF4sKl7bDkc81hkhrDPyqUz7H8xMawS\nYpLS+my0txzKyo5KMJ9SHH/8V6nQUDAsaxsb5zdihhcvojTIJs0ftzJqvheITBXm\nGTElp5iftbK0S0ElBfrN/6AICOqF0i/MqFmVBSs3YT4Hlhs/Q0PBjH9N/nf4QJ+3\n4g3ZU5YmOS4VnUBMQTzqFlZFM1BMmjrKPEMaTxdtcA+lpw82ABx7cbw7UiHHV6o=\n=A07b\n-----END PGP SIGNATURE-----\n", "payload": "tree e89ccb94dd1d71a655d22668e2308b5c3e56c322\nparent d4bdcdb1ec1c166c5ba67459511e471c4ad2a0ab\nparent 42e0282d5201dc825307582fbb48f05144d78ee0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635668427 +0100\ncommitter GitHub <noreply@github.com> 1635668427 +0100\n\nRollup merge of #90427 - jkugelman:must-use-alloc-leak, r=joshtriplett\n\nAdd #[must_use] to alloc functions that would leak memory\n\nAs [requested](https://github.com/rust-lang/rust/pull/89899#issuecomment-955600779) by `@joshtriplett.`\n\n> Please do go ahead and add the ones whose only legitimate use for ignoring the return value is leaking memory. (In a separate PR please.) I think it's sufficiently error-prone to call something like alloc and ignore the result that it's legitimate to require `let _ =` for that.\n\nI added `realloc` myself. Clippy ignored it because of its `mut` argument.\n\n```rust\nalloc/src/alloc.rs:123:1   alloc   unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8;\n```\n\nParent issue: #89692\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6d8ecd6482587368ab0a6287009460eac536b3", "html_url": "https://github.com/rust-lang/rust/commit/ff6d8ecd6482587368ab0a6287009460eac536b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff6d8ecd6482587368ab0a6287009460eac536b3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bdcdb1ec1c166c5ba67459511e471c4ad2a0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bdcdb1ec1c166c5ba67459511e471c4ad2a0ab", "html_url": "https://github.com/rust-lang/rust/commit/d4bdcdb1ec1c166c5ba67459511e471c4ad2a0ab"}, {"sha": "42e0282d5201dc825307582fbb48f05144d78ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e0282d5201dc825307582fbb48f05144d78ee0", "html_url": "https://github.com/rust-lang/rust/commit/42e0282d5201dc825307582fbb48f05144d78ee0"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "66ef92558d8b563c4d149fe5966c54ad60a657ad", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff6d8ecd6482587368ab0a6287009460eac536b3/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6d8ecd6482587368ab0a6287009460eac536b3/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=ff6d8ecd6482587368ab0a6287009460eac536b3", "patch": "@@ -81,6 +81,7 @@ pub use std::alloc::Global;\n /// }\n /// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n     unsafe { __rust_alloc(layout.size(), layout.align()) }\n@@ -117,6 +118,7 @@ pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n ///\n /// See [`GlobalAlloc::realloc`].\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n@@ -150,6 +152,7 @@ pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8\n /// }\n /// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {\n     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }"}, {"sha": "b738337a2ddd19805fc0d623f6570077f6991a22", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff6d8ecd6482587368ab0a6287009460eac536b3/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6d8ecd6482587368ab0a6287009460eac536b3/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ff6d8ecd6482587368ab0a6287009460eac536b3", "patch": "@@ -804,6 +804,7 @@ impl<T: ?Sized> Arc<T> {\n     /// let x_ptr = Arc::into_raw(x);\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n+    #[must_use = \"losing the pointer will leak memory\"]\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n         let ptr = Self::as_ptr(&this);"}]}