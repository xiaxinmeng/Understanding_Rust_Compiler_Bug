{"sha": "43929a8a75d85ae3939a80703bdd827e81c51ba5", "node_id": "C_kwDOAAsO6NoAKDQzOTI5YThhNzVkODVhZTM5MzlhODA3MDNiZGQ4MjdlODFjNTFiYTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-14T15:11:14Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-14T15:11:14Z"}, "message": "Remove src_files and remove_file\n\nThey only apply to the main source archive and their role can be\nfulfilled through the skip argument of add_archive too.", "tree": {"sha": "5014abfcba1bdb73feb2a6487c4fc460fd9fc870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5014abfcba1bdb73feb2a6487c4fc460fd9fc870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43929a8a75d85ae3939a80703bdd827e81c51ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43929a8a75d85ae3939a80703bdd827e81c51ba5", "html_url": "https://github.com/rust-lang/rust/commit/43929a8a75d85ae3939a80703bdd827e81c51ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43929a8a75d85ae3939a80703bdd827e81c51ba5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e084aa210494732f84a3aff589ba72ce5d697c", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e084aa210494732f84a3aff589ba72ce5d697c", "html_url": "https://github.com/rust-lang/rust/commit/70e084aa210494732f84a3aff589ba72ce5d697c"}], "stats": {"total": 89, "additions": 15, "deletions": 74}, "files": [{"sha": "4822c7e03a99ae0f75e48f172304f55a79c2f300", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=43929a8a75d85ae3939a80703bdd827e81c51ba5", "patch": "@@ -61,19 +61,6 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         }\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| String::from_utf8(name.clone()).unwrap()).collect()\n-    }\n-\n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name.as_bytes())\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string().into_bytes(),"}, {"sha": "1975035ae20b9a446dbfa1619176cfa2dbd9549e", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=43929a8a75d85ae3939a80703bdd827e81c51ba5", "patch": "@@ -70,19 +70,6 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         }\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| name.clone()).collect()\n-    }\n-\n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name)\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string(),"}, {"sha": "455c38ffb327fd1186165fdcfac8031859c83c03", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=43929a8a75d85ae3939a80703bdd827e81c51ba5", "patch": "@@ -21,7 +21,6 @@ pub struct LlvmArchiveBuilder<'a> {\n     sess: &'a Session,\n     dst: PathBuf,\n     src: Option<PathBuf>,\n-    removals: Vec<String>,\n     additions: Vec<Addition>,\n     src_archive: Option<Option<ArchiveRO>>,\n }\n@@ -65,35 +64,11 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             sess,\n             dst: output.to_path_buf(),\n             src: input.map(|p| p.to_path_buf()),\n-            removals: Vec::new(),\n             additions: Vec::new(),\n             src_archive: None,\n         }\n     }\n \n-    /// Removes a file from this archive\n-    fn remove_file(&mut self, file: &str) {\n-        self.removals.push(file.to_string());\n-    }\n-\n-    /// Lists all files in an archive\n-    fn src_files(&mut self) -> Vec<String> {\n-        if self.src_archive().is_none() {\n-            return Vec::new();\n-        }\n-\n-        let archive = self.src_archive.as_ref().unwrap().as_ref().unwrap();\n-\n-        archive\n-            .iter()\n-            .filter_map(|child| child.ok())\n-            .filter(is_relevant_child)\n-            .filter_map(|child| child.name())\n-            .filter(|name| !self.removals.iter().any(|x| x == name))\n-            .map(|name| name.to_owned())\n-            .collect()\n-    }\n-\n     fn add_archive<F>(&mut self, archive: &Path, skip: F) -> io::Result<()>\n     where\n         F: FnMut(&str) -> bool + 'static,\n@@ -296,7 +271,6 @@ impl<'a> LlvmArchiveBuilder<'a> {\n     }\n \n     fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n-        let removals = mem::take(&mut self.removals);\n         let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n@@ -308,9 +282,6 @@ impl<'a> LlvmArchiveBuilder<'a> {\n                 for child in archive.iter() {\n                     let child = child.map_err(string_to_io_error)?;\n                     let Some(child_name) = child.name() else { continue };\n-                    if removals.iter().any(|r| r == child_name) {\n-                        continue;\n-                    }\n \n                     let name = CString::new(child_name)?;\n                     members.push(llvm::LLVMRustArchiveMemberNew("}, {"sha": "1c9fc217ea411f69e53a58b8f796cd6de46961e1", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=43929a8a75d85ae3939a80703bdd827e81c51ba5", "patch": "@@ -45,8 +45,6 @@ pub trait ArchiveBuilder<'a> {\n     fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self;\n \n     fn add_file(&mut self, path: &Path);\n-    fn remove_file(&mut self, name: &str);\n-    fn src_files(&mut self) -> Vec<String>;\n \n     fn add_archive<F>(&mut self, archive: &Path, skip: F) -> io::Result<()>\n     where"}, {"sha": "0f528c119f396d8ae60e53f9b548b4148d0776d9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43929a8a75d85ae3939a80703bdd827e81c51ba5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=43929a8a75d85ae3939a80703bdd827e81c51ba5", "patch": "@@ -2466,17 +2466,19 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n \n         sess.prof.generic_activity_with_arg(\"link_altering_rlib\", name).run(|| {\n-            let mut archive = <B as ArchiveBuilder>::new(sess, &dst, Some(cratepath));\n-\n-            let mut any_objects = false;\n-            for f in archive.src_files() {\n+            let canonical_name = name.replace('-', \"_\");\n+            let upstream_rust_objects_already_included =\n+                are_upstream_rust_objects_already_included(sess);\n+            let is_builtins = sess.target.no_builtins\n+                || !codegen_results.crate_info.is_no_builtins.contains(&cnum);\n+\n+            let mut archive = <B as ArchiveBuilder>::new(sess, &dst, None);\n+            if let Err(e) = archive.add_archive(cratepath, move |f| {\n                 if f == METADATA_FILENAME {\n-                    archive.remove_file(&f);\n-                    continue;\n+                    return true;\n                 }\n \n                 let canonical = f.replace('-', \"_\");\n-                let canonical_name = name.replace('-', \"_\");\n \n                 let is_rust_object =\n                     canonical.starts_with(&canonical_name) && looks_like_rust_object_file(&f);\n@@ -2490,20 +2492,16 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // file, then we don't need the object file as it's part of the\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n-                let skip_because_lto = are_upstream_rust_objects_already_included(sess)\n-                    && is_rust_object\n-                    && (sess.target.no_builtins\n-                        || !codegen_results.crate_info.is_no_builtins.contains(&cnum));\n+                let skip_because_lto =\n+                    upstream_rust_objects_already_included && is_rust_object && is_builtins;\n \n                 if skip_because_cfg_say_so || skip_because_lto {\n-                    archive.remove_file(&f);\n-                } else {\n-                    any_objects = true;\n+                    return true;\n                 }\n-            }\n \n-            if !any_objects {\n-                return;\n+                false\n+            }) {\n+                sess.fatal(&format!(\"failed to build archive from rlib: {}\", e));\n             }\n             archive.build();\n             link_upstream(&dst);"}]}