{"sha": "0606234880ac8318a8e247e836ac61b32c63e9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDYyMzQ4ODBhYzgzMThhOGUyNDdlODM2YWM2MWIzMmM2M2U5Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-08T01:02:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-08T01:02:10Z"}, "message": "auto merge of #17836 : typelist/rust/guide-tuples, r=steveklabnik\n\nCurrently, the Guide says tuples \"are only equivalent if the arity, types, and values are all identical\", before presenting an example that uses `==` to compare two tuples whose arity and contained types match. This is misleading, because it implies that `==` can dynamically check whether two tuples have the same arity and contained types, whereas trying to do this would lead to a compiler error.\r\n\r\nI tried to avoid destroying the flow of this section, but I'm not sure if I've been successful.", "tree": {"sha": "be1bc6eb590ed017c7c8b47f749eb0bef86883b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1bc6eb590ed017c7c8b47f749eb0bef86883b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0606234880ac8318a8e247e836ac61b32c63e9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0606234880ac8318a8e247e836ac61b32c63e9f9", "html_url": "https://github.com/rust-lang/rust/commit/0606234880ac8318a8e247e836ac61b32c63e9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0606234880ac8318a8e247e836ac61b32c63e9f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b945dcae6dcedd0917652d66edd8ceefb4f73c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b945dcae6dcedd0917652d66edd8ceefb4f73c1", "html_url": "https://github.com/rust-lang/rust/commit/3b945dcae6dcedd0917652d66edd8ceefb4f73c1"}, {"sha": "c211d132c38f06196e76c0b5536fb2ae6af4d521", "url": "https://api.github.com/repos/rust-lang/rust/commits/c211d132c38f06196e76c0b5536fb2ae6af4d521", "html_url": "https://github.com/rust-lang/rust/commit/c211d132c38f06196e76c0b5536fb2ae6af4d521"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "a615acbe5d311a6efd9096bf0e4398e6e2518cc0", "filename": "src/doc/guide.md", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0606234880ac8318a8e247e836ac61b32c63e9f9/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/0606234880ac8318a8e247e836ac61b32c63e9f9/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=0606234880ac8318a8e247e836ac61b32c63e9f9", "patch": "@@ -914,12 +914,23 @@ or 'breaks up,' the tuple, and assigns the bits to three bindings.\n \n This pattern is very powerful, and we'll see it repeated more later.\n \n-The last thing to say about tuples is that they are only equivalent if\n-the arity, types, and values are all identical.\n+There also a few things you can do with a tuple as a whole, without\n+destructuring. You can assign one tuple into another, if they have the same\n+arity and contained types.\n+\n+```rust\n+let mut x = (1i, 2i);\n+let y = (2i, 3i);\n+\n+x = y;\n+```\n+\n+You can also check for equality with `==`. Again, this will only compile if the\n+tuples have the same type.\n \n ```rust\n let x = (1i, 2i, 3i);\n-let y = (2i, 3i, 4i);\n+let y = (2i, 2i, 4i);\n \n if x == y {\n     println!(\"yes\");\n@@ -928,7 +939,7 @@ if x == y {\n }\n ```\n \n-This will print `no`, as the values aren't equal.\n+This will print `no`, because some of the values aren't equal.\n \n One other use of tuples is to return multiple values from a function:\n "}]}