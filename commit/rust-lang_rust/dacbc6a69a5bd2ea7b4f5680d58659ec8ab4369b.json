{"sha": "dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "node_id": "C_kwDOAAsO6NoAKGRhY2JjNmE2OWE1YmQyZWE3YjRmNTY4MGQ1ODY1OWVjOGFiNDM2OWI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T18:33:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "move the rest of ssr parsing to fragments", "tree": {"sha": "ec055dbef3db1fedc67abc8b431a6c447791a924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec055dbef3db1fedc67abc8b431a6c447791a924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "html_url": "https://github.com/rust-lang/rust/commit/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9c74d20bb8b33889179315f82160285469c5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c74d20bb8b33889179315f82160285469c5f6", "html_url": "https://github.com/rust-lang/rust/commit/7e9c74d20bb8b33889179315f82160285469c5f6"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "dab214b4074b43366117d5e4c0a68ffd69cc981d", "filename": "crates/ide_ssr/src/fragments.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "patch": "@@ -36,6 +36,20 @@ pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n     Ok(node.syntax().clone_subtree())\n }\n \n+pub(crate) fn pat(s: &str) -> Result<SyntaxNode, ()> {\n+    let template = \"const _: () = {let {} = ();};\";\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let node = parse.tree().syntax().descendants().find_map(ast::Pat::cast).ok_or(())?;\n+    if node.to_string() != s {\n+        return Err(());\n+    }\n+    Ok(node.syntax().clone_subtree())\n+}\n+\n pub(crate) fn expr(s: &str) -> Result<SyntaxNode, ()> {\n     let template = \"const _: () = {};\";\n     let input = template.replace(\"{}\", s);"}, {"sha": "aaaee576b52b447571a99e3d1b397a92a2c9ec8f", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=dacbc6a69a5bd2ea7b4f5680d58659ec8ab4369b", "patch": "@@ -4,12 +4,12 @@\n //! placeholders, which start with `$`. For replacement templates, this is the final form. For\n //! search patterns, we go further and parse the pattern as each kind of thing that we can match.\n //! e.g. expressions, type references etc.\n+use rustc_hash::{FxHashMap, FxHashSet};\n+use std::{fmt::Display, str::FromStr};\n+use syntax::{SmolStr, SyntaxKind, SyntaxNode, T};\n \n use crate::errors::bail;\n use crate::{fragments, SsrError, SsrPattern, SsrRule};\n-use rustc_hash::{FxHashMap, FxHashSet};\n-use std::{fmt::Display, str::FromStr};\n-use syntax::{ast, AstNode, SmolStr, SyntaxKind, SyntaxNode, T};\n \n #[derive(Debug)]\n pub(crate) struct ParsedRule {\n@@ -75,14 +75,14 @@ impl ParsedRule {\n \n         let raw_template_stmt = raw_template.map(fragments::stmt);\n         if let raw_template_expr @ Some(Ok(_)) = raw_template.map(fragments::expr) {\n-            builder.try_add2(fragments::expr(&raw_pattern), raw_template_expr);\n+            builder.try_add(fragments::expr(&raw_pattern), raw_template_expr);\n         } else {\n-            builder.try_add2(fragments::expr(&raw_pattern), raw_template_stmt.clone());\n+            builder.try_add(fragments::expr(&raw_pattern), raw_template_stmt.clone());\n         }\n-        builder.try_add2(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n-        builder.try_add2(fragments::item(&raw_pattern), raw_template.map(fragments::item));\n-        builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n-        builder.try_add2(fragments::stmt(&raw_pattern), raw_template_stmt);\n+        builder.try_add(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n+        builder.try_add(fragments::item(&raw_pattern), raw_template.map(fragments::item));\n+        builder.try_add(fragments::pat(&raw_pattern), raw_template.map(fragments::pat));\n+        builder.try_add(fragments::stmt(&raw_pattern), raw_template_stmt);\n         builder.build()\n     }\n }\n@@ -93,27 +93,7 @@ struct RuleBuilder {\n }\n \n impl RuleBuilder {\n-    fn try_add<T: AstNode, T2: AstNode>(\n-        &mut self,\n-        pattern: Result<T, ()>,\n-        template: Option<Result<T2, ()>>,\n-    ) {\n-        match (pattern, template) {\n-            (Ok(pattern), Some(Ok(template))) => self.rules.push(ParsedRule {\n-                placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n-                pattern: pattern.syntax().clone(),\n-                template: Some(template.syntax().clone()),\n-            }),\n-            (Ok(pattern), None) => self.rules.push(ParsedRule {\n-                placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n-                pattern: pattern.syntax().clone(),\n-                template: None,\n-            }),\n-            _ => {}\n-        }\n-    }\n-\n-    fn try_add2(\n+    fn try_add(\n         &mut self,\n         pattern: Result<SyntaxNode, ()>,\n         template: Option<Result<SyntaxNode, ()>>,"}]}