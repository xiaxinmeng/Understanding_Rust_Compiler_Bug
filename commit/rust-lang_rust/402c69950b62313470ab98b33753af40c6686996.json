{"sha": "402c69950b62313470ab98b33753af40c6686996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMmM2OTk1MGI2MjMxMzQ3MGFiOThiMzM3NTNhZjQwYzY2ODY5OTY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-05T20:33:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-05T20:33:21Z"}, "message": "Rollup merge of #54851 - alexcrichton:revert-optimize, r=sfackler\n\nFix a regression in 1.30 by reverting #53564\n\nInvestigation on #54477 revealed https://github.com/rust-lang/rust/pull/53564 as the culprit in the regression for that crate. I've reproduced the regression with the [detailed test cases provided](https://github.com/rust-lang/rust/issues/54477#issuecomment-427398456). While we figure out how to fix the regression this commit reverts the current culprit.", "tree": {"sha": "cc23bd0964e52b41d579108a34a4c2612ad7b080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc23bd0964e52b41d579108a34a4c2612ad7b080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402c69950b62313470ab98b33753af40c6686996", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbt8qRCRBK7hj4Ov3rIwAAdHIIAE3if60b6xYuuy9zZ8bzDEfK\nvoXjzVE8NK/PoBTAbaT11Z+AI7Ca2aULXZVcFUgAsLEyhG6Q96TRB7htnDftIWtF\n3dHFiHRuRQD2EJD6IKVPCVaJIt4pHVs59fc4JOJ4ARkf+Ufe0nnerSc3reOPa3d8\nrn7paF0BOoxql3JqOu4vXQMwMywf/ywh5WxU6s/fpwJL1jK9aV9+3+QpMIesN/L4\ngLw5RrbIydacWP2O77RzTk3lkoKl0h9yXaMVKYUITZVxq/DHFzo0tAJtSrAgiTXK\nPzuem7A++uKIPJbb3wIHtiXGRpH7KNcmblcdfz2Y9PatHKP01GL7M7jGYojTKNg=\n=JPDE\n-----END PGP SIGNATURE-----\n", "payload": "tree cc23bd0964e52b41d579108a34a4c2612ad7b080\nparent 42fcde8abb0860d33cb37e9713493a13f3b2bcd1\nparent 70ae43fee798ea7af56db31b4e43180ef42a4476\nauthor Pietro Albini <pietro@pietroalbini.org> 1538771601 +0200\ncommitter GitHub <noreply@github.com> 1538771601 +0200\n\nRollup merge of #54851 - alexcrichton:revert-optimize, r=sfackler\n\nFix a regression in 1.30 by reverting #53564\n\nInvestigation on #54477 revealed https://github.com/rust-lang/rust/pull/53564 as the culprit in the regression for that crate. I've reproduced the regression with the [detailed test cases provided](https://github.com/rust-lang/rust/issues/54477#issuecomment-427398456). While we figure out how to fix the regression this commit reverts the current culprit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402c69950b62313470ab98b33753af40c6686996", "html_url": "https://github.com/rust-lang/rust/commit/402c69950b62313470ab98b33753af40c6686996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402c69950b62313470ab98b33753af40c6686996/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fcde8abb0860d33cb37e9713493a13f3b2bcd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fcde8abb0860d33cb37e9713493a13f3b2bcd1", "html_url": "https://github.com/rust-lang/rust/commit/42fcde8abb0860d33cb37e9713493a13f3b2bcd1"}, {"sha": "70ae43fee798ea7af56db31b4e43180ef42a4476", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ae43fee798ea7af56db31b4e43180ef42a4476", "html_url": "https://github.com/rust-lang/rust/commit/70ae43fee798ea7af56db31b4e43180ef42a4476"}], "stats": {"total": 52, "additions": 5, "deletions": 47}, "files": [{"sha": "571f35a2031d2a0b9e1eb57ac1f9728ca2fb245f", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/402c69950b62313470ab98b33753af40c6686996/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402c69950b62313470ab98b33753af40c6686996/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=402c69950b62313470ab98b33753af40c6686996", "patch": "@@ -19,7 +19,6 @@\n \n use core::cmp::Ordering;\n use core::fmt;\n-use core::isize;\n use core::iter::{repeat, FromIterator, FusedIterator};\n use core::mem;\n use core::ops::Bound::{Excluded, Included, Unbounded};\n@@ -203,33 +202,6 @@ impl<T> VecDeque<T> {\n                                  len);\n     }\n \n-    /// Copies all values from `src` to the back of `self`, wrapping around if needed.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The capacity must be sufficient to hold self.len() + src.len() elements.\n-    /// If so, this function never panics.\n-    #[inline]\n-    unsafe fn copy_slice(&mut self, src: &[T]) {\n-        /// This is guaranteed by `RawVec`.\n-        debug_assert!(self.capacity() <= isize::MAX as usize);\n-\n-        let expected_new_len = self.len() + src.len();\n-        debug_assert!(self.capacity() >= expected_new_len);\n-\n-        let dst_high_ptr = self.ptr().add(self.head);\n-        let dst_high_len = self.cap() - self.head;\n-\n-        let split = cmp::min(src.len(), dst_high_len);\n-        let (src_high, src_low) = src.split_at(split);\n-\n-        ptr::copy_nonoverlapping(src_high.as_ptr(), dst_high_ptr, src_high.len());\n-        ptr::copy_nonoverlapping(src_low.as_ptr(), self.ptr(), src_low.len());\n-\n-        self.head = self.wrap_add(self.head, src.len());\n-        debug_assert!(self.len() == expected_new_len);\n-    }\n-\n     /// Copies a potentially wrapping block of memory len long from src to dest.\n     /// (abs(dst - src) + len) must be no larger than cap() (There must be at\n     /// most one continuous overlapping region between src and dest).\n@@ -1052,7 +1024,7 @@ impl<T> VecDeque<T> {\n             iter: Iter {\n                 tail: drain_tail,\n                 head: drain_head,\n-                ring: unsafe { self.buffer_as_slice() },\n+                ring: unsafe { self.buffer_as_mut_slice() },\n             },\n         }\n     }\n@@ -1862,22 +1834,8 @@ impl<T> VecDeque<T> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        unsafe {\n-            // Guarantees there is space in `self` for `other`.\n-            self.reserve(other.len());\n-\n-            {\n-                let (src_high, src_low) = other.as_slices();\n-\n-                // This is only safe because copy_slice never panics when capacity is sufficient.\n-                self.copy_slice(src_low);\n-                self.copy_slice(src_high);\n-            }\n-\n-            // Some values now exist in both `other` and `self` but are made inaccessible\n-            // in`other`.\n-            other.tail = other.head;\n-        }\n+        // naive impl\n+        self.extend(other.drain(..));\n     }\n \n     /// Retains only the elements specified by the predicate.\n@@ -2635,8 +2593,8 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n                         let mut right_offset = 0;\n                         for i in left_edge..right_edge {\n                             right_offset = (i - left_edge) % (cap - right_edge);\n-                            let src = right_edge + right_offset;\n-                            ptr::swap(buf.add(i), buf.add(src));\n+                            let src: isize = (right_edge + right_offset) as isize;\n+                            ptr::swap(buf.add(i), buf.offset(src));\n                         }\n                         let n_ops = right_edge - left_edge;\n                         left_edge += n_ops;"}]}