{"sha": "82dbd0780694bd5281f9eb93199369da56e21ee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZGJkMDc4MDY5NGJkNTI4MWY5ZWI5MzE5OTM2OWRhNTZlMjFlZTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-30T16:20:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-30T16:20:37Z"}, "message": "Add support for calling C abi functions", "tree": {"sha": "a04c8947dd4394eccd1cc86953ea3e5ae7da4e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a04c8947dd4394eccd1cc86953ea3e5ae7da4e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82dbd0780694bd5281f9eb93199369da56e21ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82dbd0780694bd5281f9eb93199369da56e21ee2", "html_url": "https://github.com/rust-lang/rust/commit/82dbd0780694bd5281f9eb93199369da56e21ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82dbd0780694bd5281f9eb93199369da56e21ee2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4da89d6086b2b105fbed0922d93fa54565034d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4da89d6086b2b105fbed0922d93fa54565034d7", "html_url": "https://github.com/rust-lang/rust/commit/a4da89d6086b2b105fbed0922d93fa54565034d7"}], "stats": {"total": 122, "additions": 87, "deletions": 35}, "files": [{"sha": "82160c6435da8386a74f992c5fc9991fb947bcac", "filename": "build.sh", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -1,7 +1,12 @@\n cargo build || exit 1\n \n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so mini_core.rs --crate-name mini_core --crate-type lib -Og &&\n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so -L crate=. example.rs --crate-type lib -Og &&\n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so ./target/libcore/src/libcore/lib.rs --crate-type lib -Og\n+cd examples/\n \n-rm libmini_core.rlib libexample.rlib\n+RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift.so -Og -L crate=. --crate-type lib\"\n+\n+$RUSTC mini_core.rs --crate-name mini_core &&\n+$RUSTC example.rs &&\n+$RUSTC mini_core_hello_world.rs &&\n+$RUSTC ../target/libcore/src/libcore/lib.rs\n+\n+rm *.rlib"}, {"sha": "1f9a5e0755b46a12f365415c0b7821ddd0bf5469", "filename": "examples/example.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "previous_filename": "example.rs"}, {"sha": "ca97c5cd8860e0b9ea9015789d6b99c2d035a28e", "filename": "examples/mini_core.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "previous_filename": "mini_core.rs"}, {"sha": "5fc0cff08bd6a009dcb46c7391e81f0c39a8d7b7", "filename": "examples/mini_core_hello_world.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -0,0 +1,25 @@\n+// Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n+\n+#![feature(no_core, unboxed_closures, start)]\n+#![no_core]\n+#![allow(dead_code)]\n+\n+extern crate mini_core;\n+\n+use mini_core::*;\n+\n+#[link(name = \"c\")]\n+extern \"C\" {}\n+\n+extern \"C\" {\n+    fn puts(s: *const u8);\n+}\n+\n+#[start]\n+fn main(i: isize, _: *const *const u8) -> isize {\n+    unsafe {\n+        let (ptr, _): (*const u8, usize) = intrinsics::transmute(\"Hello!\\0\");\n+        puts(ptr);\n+    }\n+    0\n+}"}, {"sha": "2c9f72d2fe1da0c9249c7cfef25df116c3e4b370", "filename": "src/abi.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -9,7 +9,8 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<\n     let sig = ty_fn_sig(tcx, fn_ty);\n     assert!(!sig.variadic, \"Variadic function are not yet supported\");\n     let (call_conv, inputs, _output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n-        Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n+        Abi::Rust => (CallConv::Fast, sig.inputs().to_vec(), sig.output()),\n+        Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             println!(\"rust-call sig: {:?} inputs: {:?} output: {:?}\", sig, sig.inputs(), sig.output());\n             assert_eq!(sig.inputs().len(), 2);\n@@ -20,7 +21,7 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<\n             let mut inputs: Vec<Ty> = vec![sig.inputs()[0]];\n             inputs.extend(extra_args.into_iter());\n             (\n-                CallConv::SystemV,\n+                CallConv::Fast,\n                 inputs,\n                 sig.output(),\n             )\n@@ -31,7 +32,17 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<\n     };\n     Signature {\n         params: Some(types::I64).into_iter() // First param is place to put return val\n-            .chain(inputs.into_iter().map(|ty| cton_type_from_ty(tcx, ty).unwrap_or(types::I64)))\n+            .chain(inputs.into_iter().map(|ty| {\n+                let cton_ty = cton_type_from_ty(tcx, ty);\n+                if let Some(cton_ty) = cton_ty {\n+                    cton_ty\n+                } else {\n+                    if sig.abi == Abi::C {\n+                        unimplemented!(\"Non scalars are not yet supported for \\\"C\\\" abi\");\n+                    }\n+                    types::I64\n+                }\n+            }))\n             .map(AbiParam::new).collect(),\n         returns: vec![],\n         call_conv,\n@@ -91,17 +102,13 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n     /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n         assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n-        let tcx = self.tcx;\n-        let module = &mut self.module;\n-        let func_id = *self.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n-            let fn_ty = inst.ty(tcx);\n-            let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n-            let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n-            let mut name = String::new();\n-            def_path_based_names.push_instance_as_string(inst, &mut name);\n-            module.declare_function(&name, Linkage::Local, &sig).unwrap()\n-        });\n-        module.declare_func_in_func(func_id, &mut self.bcx.func)\n+        let fn_ty = inst.ty(self.tcx);\n+        let sig = cton_sig_from_fn_ty(self.tcx, fn_ty);\n+        let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(self.tcx, false, false);\n+        let mut name = String::new();\n+        def_path_based_names.push_instance_as_string(inst, &mut name);\n+        let func_id = self.module.declare_function(&name, Linkage::Import, &sig).unwrap();\n+        self.module.declare_func_in_func(func_id, &mut self.bcx.func)\n     }\n \n     fn lib_call(\n@@ -156,6 +163,11 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n }\n \n pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb: Ebb) {\n+    match fx.self_sig().abi {\n+        Abi::Rust | Abi::RustCall => {}\n+        _ => unimplemented!(\"declared function with non \\\"rust\\\" or \\\"rust-call\\\" abi\"),\n+    }\n+\n     let ret_param = fx.bcx.append_ebb_param(start_ebb, types::I64);\n     let _ = fx.bcx.create_stack_slot(StackSlotData {\n         kind: StackSlotKind::ExplicitSlot,"}, {"sha": "3647bcc4001057023acb79e6f509b3a47bebf56c", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -20,15 +20,13 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n                     &fn_ty,\n                 );\n                 let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n+\n                 let func_id = {\n-                    let module = &mut cx.module;\n-                    *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n-                        // WARNING: keep in sync with FunctionCx::get_function_ref\n-                        let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n-                        let mut name = String::new();\n-                        def_path_based_names.push_instance_as_string(inst, &mut name);\n-                        module.declare_function(&name, Linkage::Local, &sig).unwrap()\n-                    })\n+                    // WARNING: keep in sync with FunctionCx::get_function_ref\n+                    let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(cx.tcx, false, false);\n+                    let mut name = String::new();\n+                    def_path_based_names.push_instance_as_string(inst, &mut name);\n+                    cx.module.declare_function(&name, Linkage::Export, &sig).unwrap()\n                 };\n \n                 let mut f = Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n@@ -84,7 +82,6 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n     let mut fx = FunctionCx {\n         tcx: cx.tcx,\n         module: &mut cx.module,\n-        def_id_fn_id_map: &mut cx.def_id_fn_id_map,\n         instance,\n         mir,\n         bcx,"}, {"sha": "d98818604ee7776479e0fc3bfd0c8670031a8596", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use rustc_target::spec::{HasTargetSpec, Target};\n \n-use cranelift_module::{Module, FuncId, DataId};\n+use cranelift_module::{Module, DataId};\n \n use crate::prelude::*;\n \n@@ -295,7 +295,6 @@ pub fn cton_intcast<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, val: Value, fro\n pub struct FunctionCx<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<CurrentBackend>,\n-    pub def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n     pub instance: Instance<'tcx>,\n     pub mir: &'tcx Mir<'tcx>,\n     pub param_substs: &'tcx Substs<'tcx>,\n@@ -308,7 +307,6 @@ pub struct FunctionCx<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        writeln!(f, \"{:?}\", self.def_id_fn_id_map)?;\n         writeln!(f, \"{:?}\", self.param_substs)?;\n         writeln!(f, \"{:?}\", self.local_map)?;\n "}, {"sha": "66d2e662c8fab27d52a0ae94624f8c8bb9c8c711", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dbd0780694bd5281f9eb93199369da56e21ee2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=82dbd0780694bd5281f9eb93199369da56e21ee2", "patch": "@@ -89,7 +89,6 @@ use crate::prelude::*;\n pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n-    pub def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n     pub constants: HashMap<AllocId, DataId>,\n }\n \n@@ -225,13 +224,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let isa = cranelift::codegen::isa::lookup(target_lexicon::Triple::host()).unwrap().finish(flags);\n         let mut module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n         let mut context = Context::new();\n-        let mut def_id_fn_id_map = HashMap::new();\n \n         {\n             let mut cx = CodegenCx {\n                 tcx,\n                 module: &mut module,\n-                def_id_fn_id_map: &mut def_id_fn_id_map,\n                 constants: HashMap::new(),\n             };\n \n@@ -251,12 +248,30 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             module.finalize_all();\n             tcx.sess.warn(\"Finalized everything\");\n \n-            for (inst, func_id) in def_id_fn_id_map.iter() {\n+            for mono_item in\n+                collector::collect_crate_mono_items(\n+                    tcx,\n+                    collector::MonoItemCollectionMode::Eager\n+                ).0 {\n+\n+                let inst = match mono_item {\n+                    MonoItem::Fn(inst) => inst,\n+                    _ => continue,\n+                };\n+\n                 //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n                 if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n                     continue;\n                 }\n-                let finalized_function: *const u8 = module.finalize_function(*func_id);\n+\n+                let fn_ty = inst.ty(tcx);\n+                let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n+                let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n+                let mut name = String::new();\n+                def_path_based_names.push_instance_as_string(inst, &mut name);\n+                let func_id = module.declare_function(&name, Linkage::Import, &sig).unwrap();\n+\n+                let finalized_function: *const u8 = module.finalize_function(func_id);\n                 /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n                 let mut res = 0u32;\n                 f(&mut res);"}]}