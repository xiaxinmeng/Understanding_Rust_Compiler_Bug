{"sha": "c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NGVkNWNhOTFmMTM2M2I2Njk3MGNlMmNiZDZlMjc3M2UzY2IxZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T04:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T04:43:38Z"}, "message": "Auto merge of #75436 - JohnTitor:rollup-ss0lxds, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #74521 (older toolchains not valid anymore)\n - #74960 (Fix regionck failure when converting Index to IndexMut)\n - #75234 (Update asm! documentation in unstable book)\n - #75368 (Move to doc links inside the prelude)\n - #75371 (Move to doc links inside std/time.rs)\n - #75394 (Add a function to `TyCtxt` for computing an `Allocation` for a `static` item's initializer)\n - #75395 (Switch to intra-doc links in library/std/src/os/*/fs.rs)\n - #75422 (Accept more safety comments)\n - #75424 (fix wrong word in documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "084f519a1715a703b4ba9815f80196e11fb20e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084f519a1715a703b4ba9815f80196e11fb20e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "html_url": "https://github.com/rust-lang/rust/commit/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "840dbe7654bf3e803d0b447960bd9c120661cd1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/840dbe7654bf3e803d0b447960bd9c120661cd1d", "html_url": "https://github.com/rust-lang/rust/commit/840dbe7654bf3e803d0b447960bd9c120661cd1d"}, {"sha": "2cc7da6f9555f9bb911bc65a1c858ed9e7a7126d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc7da6f9555f9bb911bc65a1c858ed9e7a7126d", "html_url": "https://github.com/rust-lang/rust/commit/2cc7da6f9555f9bb911bc65a1c858ed9e7a7126d"}], "stats": {"total": 305, "additions": 155, "deletions": 150}, "files": [{"sha": "3399f7fe6c8b1463b4c432986a7f90f68561f154", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -1,9 +1,9 @@\n-<a href = \"https://www.rust-lang.org/\"> \n+<a href = \"https://www.rust-lang.org/\">\n <img width = \"90%\" height = \"auto\" src = \"https://img.shields.io/badge/Rust-Programming%20Language-black?style=flat&logo=rust\" alt = \"The Rust Programming Language\">\n </a>\n \n This is the main source code repository for [Rust]. It contains the compiler,\n-standard library, and documentation. \n+standard library, and documentation.\n \n [Rust]: https://www.rust-lang.org\n \n@@ -23,7 +23,7 @@ Read [\"Installation\"] from [The Book].\n section.**\n \n The Rust build system uses a Python script called `x.py` to build the compiler,\n-which manages the bootstrapping process. More information about it can be found \n+which manages the bootstrapping process. More information about it can be found\n by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n \n [gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n@@ -157,17 +157,6 @@ by manually calling the appropriate vcvars file before running the bootstrap.\n > python x.py build\n ```\n \n-### Building rustc with older host toolchains\n-It is still possible to build Rust with the older toolchain versions listed below, but only if the\n-LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN option is set to true in the config.toml file.\n-\n-* Clang 3.1\n-* Apple Clang 3.1\n-* GCC 4.8\n-* Visual Studio 2015 (Update 3)\n-\n-Toolchain versions older than what is listed above cannot be used to build rustc.\n-\n #### Specifying an ABI\n \n Each specific ABI can also be used from either environment (for example, using"}, {"sha": "a0b151a4496f114c86d3530990b16c73012c82eb", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -239,7 +239,7 @@\n //! println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n //! ```\n //!\n-//! print two significantly different things:\n+//! print three significantly different things:\n //!\n //! ```text\n //! Hello, `1234.560` has 3 fractional digits"}, {"sha": "6aeef330dfa24b38e590baf3b4d370bbb3924c07", "filename": "library/std/src/os/android/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::android::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "e4c4e04cd30aa87a378772280433f5fce7a413a6", "filename": "library/std/src/os/dragonfly/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::dragonfly::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "d4f758a3457fe3266bfda5e1d2787177d69fa270", "filename": "library/std/src/os/emscripten/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::emscripten::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "c6a00e179bd7fb736105294724c98d299159ed40", "filename": "library/std/src/os/freebsd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::freebsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "b48a46f9124a916fa6e429ba1bf811294dcaee5f", "filename": "library/std/src/os/fuchsia/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -5,7 +5,7 @@ use crate::sys_common::AsInner;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"}, {"sha": "28015f62526331698937d416eb6810c085072912", "filename": "library/std/src/os/haiku/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::haiku::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "021d154ff5a8a6e7dd75aae9ecc514297187866f", "filename": "library/std/src/os/illumos/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::illumos::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "2c5e38a803d30a2c4efcf3095679466450eb3f6c", "filename": "library/std/src/os/ios/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::ios::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "cae65f12187e21d3c934ad2d1f2535daa4fa49b2", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::linux::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains\n@@ -18,7 +18,7 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     ///\n-    /// [`stat`]: ../../../../std/os/linux/raw/struct.stat.html\n+    /// [`stat`]: crate::os::linux::raw::stat\n     ///\n     /// # Examples\n     ///"}, {"sha": "4152c3529361ded6e8e560da87860fc0bb9eea4d", "filename": "library/std/src/os/macos/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::macos::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "6b29a40d2b5452bc08d644c3bd92b8fd89774e1d", "filename": "library/std/src/os/netbsd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::netbsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "3143dc95fdf44adb0098920a1a4f78c2791cc2c7", "filename": "library/std/src/os/openbsd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::openbsd::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "94d65651daa3c4cc5e15e434700305cfb9e7a925", "filename": "library/std/src/os/redox/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::redox::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains\n@@ -18,7 +18,7 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     ///\n-    /// [`stat`]: ../../../../std/os/redox/raw/struct.stat.html\n+    /// [`stat`]: crate::os::redox::raw::stat\n     ///\n     /// # Examples\n     ///"}, {"sha": "908c5c38a842e83ac4817f684dd06d5e3e24b992", "filename": "library/std/src/os/solaris/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -8,7 +8,7 @@ use crate::os::solaris::raw;\n \n /// OS-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "5a7e5bcaa7600a92061908eca7fbaa33a5776da2", "filename": "library/std/src/os/vxworks/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fos%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fvxworks%2Ffs.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -4,7 +4,7 @@ use crate::fs::Metadata;\n use crate::sys_common::AsInner;\n \n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"}, {"sha": "710c616be73cbec5d12cd24f36451d1edd3661c9", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 25, "deletions": 58, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -17,7 +17,7 @@\n //! such as [`std::io::prelude`]. Various libraries in the Rust ecosystem may\n //! also define their own preludes.\n //!\n-//! [`std::io::prelude`]: ../io/prelude/index.html\n+//! [`std::io::prelude`]: crate::io::prelude\n //!\n //! The difference between 'the prelude' and these other preludes is that they\n //! are not automatically `use`'d, and must be imported manually. This is still\n@@ -49,67 +49,34 @@\n //! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n //!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}. Iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{`self`, `Some`, `None`}. A type which\n-//!   expresses the presence or absence of a value. This type is so commonly\n-//!   used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{`self`, `Ok`, `Err`}. A type for functions\n-//!   that may succeed or fail. Like [`Option`], its variants are exported as\n-//!   well.\n+//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}. A\n+//!   type which expresses the presence or absence of a value. This type is so\n+//!   commonly used, its variants are also exported.\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}. A type\n+//!   for functions that may succeed or fail. Like [`Option`], its variants are\n+//!   exported as well.\n //! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`](../vec/struct.Vec.html), a growable, heap-allocated\n+//! * [`std::vec`]::[`Vec`], a growable, heap-allocated\n //!   vector.\n //!\n-//! [`AsMut`]: ../convert/trait.AsMut.html\n-//! [`AsRef`]: ../convert/trait.AsRef.html\n-//! [`Box`]: ../boxed/struct.Box.html\n-//! [`Clone`]: ../clone/trait.Clone.html\n-//! [`Copy`]: ../marker/trait.Copy.html\n-//! [`Default`]: ../default/trait.Default.html\n-//! [`DoubleEndedIterator`]: ../iter/trait.DoubleEndedIterator.html\n-//! [`Drop`]: ../ops/trait.Drop.html\n-//! [`Eq`]: ../cmp/trait.Eq.html\n-//! [`ExactSizeIterator`]: ../iter/trait.ExactSizeIterator.html\n-//! [`Extend`]: ../iter/trait.Extend.html\n-//! [`FnMut`]: ../ops/trait.FnMut.html\n-//! [`FnOnce`]: ../ops/trait.FnOnce.html\n-//! [`Fn`]: ../ops/trait.Fn.html\n-//! [`From`]: ../convert/trait.From.html\n-//! [`IntoIterator`]: ../iter/trait.IntoIterator.html\n-//! [`Into`]: ../convert/trait.Into.html\n-//! [`Iterator`]: ../iter/trait.Iterator.html\n-//! [`Option`]: ../option/enum.Option.html\n-//! [`Ord`]: ../cmp/trait.Ord.html\n-//! [`PartialEq`]: ../cmp/trait.PartialEq.html\n-//! [`PartialOrd`]: ../cmp/trait.PartialOrd.html\n-//! [`Result`]: ../result/enum.Result.html\n-//! [`Send`]: ../marker/trait.Send.html\n-//! [`Sized`]: ../marker/trait.Sized.html\n-//! [`SliceConcatExt`]: ../slice/trait.SliceConcatExt.html\n-//! [`String`]: ../string/struct.String.html\n-//! [`Sync`]: ../marker/trait.Sync.html\n-//! [`ToOwned`]: ../borrow/trait.ToOwned.html\n-//! [`ToString`]: ../string/trait.ToString.html\n-//! [`Unpin`]: ../marker/trait.Unpin.html\n-//! [`Vec`]: ../vec/struct.Vec.html\n-//! [`Clone::clone`]: ../clone/trait.Clone.html#tymethod.clone\n-//! [`mem::drop`]: ../mem/fn.drop.html\n-//! [`std::borrow`]: ../borrow/index.html\n-//! [`std::boxed`]: ../boxed/index.html\n-//! [`std::clone`]: ../clone/index.html\n-//! [`std::cmp`]: ../cmp/index.html\n-//! [`std::convert`]: ../convert/index.html\n-//! [`std::default`]: ../default/index.html\n-//! [`std::iter`]: ../iter/index.html\n-//! [`std::marker`]: ../marker/index.html\n-//! [`std::mem`]: ../mem/index.html\n-//! [`std::ops`]: ../ops/index.html\n-//! [`std::option`]: ../option/index.html\n-//! [`std::prelude::v1`]: v1/index.html\n-//! [`std::result`]: ../result/index.html\n-//! [`std::slice`]: ../slice/index.html\n-//! [`std::string`]: ../string/index.html\n+//! [`mem::drop`]: crate::mem::drop\n+//! [`std::borrow`]: crate::borrow\n+//! [`std::boxed`]: crate::boxed\n+//! [`std::clone`]: crate::clone\n+//! [`std::cmp`]: crate::cmp\n+//! [`std::convert`]: crate::convert\n+//! [`std::default`]: crate::default\n+//! [`std::iter`]: crate::iter\n+//! [`std::marker`]: crate::marker\n+//! [`std::mem`]: crate::mem\n+//! [`std::ops`]: crate::ops\n+//! [`std::option`]: crate::option\n+//! [`std::prelude::v1`]: v1\n+//! [`std::result`]: crate::result\n+//! [`std::slice`]: crate::slice\n+//! [`std::string`]: crate::string\n //! [`std::vec`]: ../vec/index.html\n-//! [`to_owned`]: ../borrow/trait.ToOwned.html#tymethod.to_owned\n+//! [`to_owned`]: crate::borrow::ToOwned::to_owned\n //! [book-closures]: ../../book/ch13-01-closures.html\n //! [book-dtor]: ../../book/ch15-03-drop.html\n //! [book-enums]: ../../book/ch06-01-defining-an-enum.html"}, {"sha": "969c442884df2f10cfa8f4b0c928ac0eff524ec0", "filename": "library/std/src/time.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -97,7 +97,6 @@ pub use core::time::Duration;\n /// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n@@ -125,11 +124,6 @@ pub struct Instant(time::Instant);\n /// The size of a `SystemTime` struct may vary depending on the target operating\n /// system.\n ///\n-/// [`Instant`]: ../../std/time/struct.Instant.html\n-/// [`Result`]: ../../std/result/enum.Result.html\n-/// [`Duration`]: ../../std/time/struct.Duration.html\n-/// [`UNIX_EPOCH`]: ../../std/time/constant.UNIX_EPOCH.html\n-///\n /// Example:\n ///\n /// ```no_run\n@@ -176,7 +170,6 @@ pub struct Instant(time::Instant);\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n@@ -368,7 +361,7 @@ impl Add<Duration> for Instant {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.Instant.html#method.checked_add\n+    /// [`checked_add`]: Instant::checked_add\n     fn add(self, other: Duration) -> Instant {\n         self.checked_add(other).expect(\"overflow when adding duration to instant\")\n     }\n@@ -463,11 +456,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `earlier` is later than `self`, and the error\n     /// contains how far from `self` the time is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -497,11 +485,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -544,7 +527,7 @@ impl Add<Duration> for SystemTime {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.SystemTime.html#method.checked_add\n+    /// [`checked_add`]: SystemTime::checked_add\n     fn add(self, dur: Duration) -> SystemTime {\n         self.checked_add(dur).expect(\"overflow when adding duration to instant\")\n     }\n@@ -589,8 +572,6 @@ impl fmt::Debug for SystemTime {\n /// measurement lies, and using `UNIX_EPOCH + duration` can be used to create a\n /// [`SystemTime`] instance to represent another fixed point in time.\n ///\n-/// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -608,13 +589,9 @@ impl SystemTimeError {\n     /// Returns the positive duration which represents how far forward the\n     /// second system time was from the first.\n     ///\n-    /// A `SystemTimeError` is returned from the [`duration_since`] and [`elapsed`]\n-    /// methods of [`SystemTime`] whenever the second system time represents a point later\n-    /// in time than the `self` of the method call.\n-    ///\n-    /// [`duration_since`]: ../../std/time/struct.SystemTime.html#method.duration_since\n-    /// [`elapsed`]: ../../std/time/struct.SystemTime.html#method.elapsed\n-    /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+    /// A `SystemTimeError` is returned from the [`SystemTime::duration_since`]\n+    /// and [`SystemTime::elapsed`] methods whenever the second system time\n+    /// represents a point later in time than the `self` of the method call.\n     ///\n     /// # Examples\n     ///"}, {"sha": "28a5fe31fc4b5f328e0be7dc72cf3a7e09a54d80", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -18,7 +18,15 @@ It can be used to embed handwritten assembly in the assembly output generated by\n Generally this should not be necessary, but might be where the required performance or timing\n cannot be otherwise achieved. Accessing low level hardware primitives, e.g. in kernel code, may also demand this functionality.\n \n-> **Note**: the examples here are given in x86/x86-64 assembly, but ARM, AArch64 and RISC-V are also supported.\n+> **Note**: the examples here are given in x86/x86-64 assembly, but other architectures are also supported.\n+\n+Inline assembly is currently supported on the following architectures:\n+- x86 and x86-64\n+- ARM\n+- AArch64\n+- RISC-V\n+- NVPTX\n+- Hexagon\n \n ## Basic usage\n \n@@ -606,6 +614,10 @@ Some registers cannot be used for input or output operands:\n | RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n | Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n \n+In some cases LLVM will allocate a \"reserved register\" for `reg` operands even though this register cannot be explicitly specified. Assembly code making use of reserved registers should be careful since `reg` operands may alias with those registers. Reserved registers are:\n+- The frame pointer on all architectures.\n+- `r6` on ARM.\n+\n ## Template modifiers\n \n The placeholders can be augmented by modifiers which are specified after the `:` in the curly braces. These modifiers do not affect register allocation, but change the way operands are formatted when inserted into the template string. Only one modifier is allowed per template placeholder."}, {"sha": "dcc1f8b1a4b3cd673a198eab02a69b8d12abd111", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -74,4 +74,27 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.const_eval_validated(inputs)\n         }\n     }\n+\n+    /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    pub fn eval_static_initializer(\n+        self,\n+        def_id: DefId,\n+    ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n+        trace!(\"eval_static_initializer: Need to compute {:?}\", def_id);\n+        assert!(self.is_static(def_id));\n+        let instance = ty::Instance::mono(self, def_id);\n+        let gid = GlobalId { instance, promoted: None };\n+        self.eval_to_allocation(gid, ty::ParamEnv::reveal_all())\n+    }\n+\n+    /// Evaluate anything constant-like, returning the allocation of the final memory.\n+    fn eval_to_allocation(\n+        self,\n+        gid: GlobalId<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n+        trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n+        let raw_const = self.const_eval_raw(param_env.and(gid))?;\n+        Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n+    }\n }"}, {"sha": "49d97ff7cecccfc93c40cfea1c632fd399749ba0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -14,13 +14,12 @@ use std::ptr;\n \n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, Instance, ParamEnv, TyCtxt};\n+use rustc_middle::ty::{Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, GlobalId,\n-    InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n+    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, InterpResult,\n+    Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n };\n use crate::util::pretty;\n \n@@ -119,17 +118,6 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-/// Return the `tcx` allocation containing the initial value of the given static\n-pub fn get_static(tcx: TyCtxt<'tcx>, def_id: DefId) -> InterpResult<'tcx, &'tcx Allocation> {\n-    trace!(\"get_static: Need to compute {:?}\", def_id);\n-    let instance = Instance::mono(tcx, def_id);\n-    let gid = GlobalId { instance, promoted: None };\n-    // Use the raw query here to break validation cycles. Later uses of the static\n-    // will call the full query anyway.\n-    let raw_const = tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid))?;\n-    Ok(tcx.global_alloc(raw_const.alloc_id).unwrap_memory())\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n@@ -489,7 +477,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     throw_unsup!(ReadExternStatic(def_id));\n                 }\n \n-                (get_static(tcx, def_id)?, Some(def_id))\n+                (tcx.eval_static_initializer(def_id)?, Some(def_id))\n             }\n         };\n         M::before_access_global(memory_extra, id, alloc, def_id, is_write)?;"}, {"sha": "a931b0bbe9777b4b02b9f831d96797b92293b9af", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -21,7 +21,7 @@ pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in\n pub use self::eval_context::{Frame, FrameInfo, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{get_static, AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;"}, {"sha": "4bef9aecd2ecb2236e88a44b82dcddedf99a0376", "filename": "src/librustc_typeck/check/place_op.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::autoderef::Autoderef;\n+use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -243,19 +244,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             match expr.kind {\n-                hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    // We need to get the final type in case dereferences were needed for the trait\n-                    // to apply (#72002).\n-                    let index_expr_ty = self.typeck_results.borrow().expr_ty_adjusted(index_expr);\n-                    self.convert_place_op_to_mutable(\n-                        PlaceOp::Index,\n-                        expr,\n-                        base_expr,\n-                        &[index_expr_ty],\n-                    );\n+                hir::ExprKind::Index(ref base_expr, ..) => {\n+                    self.convert_place_op_to_mutable(PlaceOp::Index, expr, base_expr);\n                 }\n                 hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base_expr) => {\n-                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr, &[]);\n+                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr);\n                 }\n                 _ => {}\n             }\n@@ -267,9 +260,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         op: PlaceOp,\n         expr: &hir::Expr<'_>,\n         base_expr: &hir::Expr<'_>,\n-        arg_tys: &[Ty<'tcx>],\n     ) {\n-        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?}, {:?})\", op, expr, base_expr, arg_tys);\n+        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?})\", op, expr, base_expr);\n         if !self.typeck_results.borrow().is_method_call(expr) {\n             debug!(\"convert_place_op_to_mutable - builtin, nothing to do\");\n             return;\n@@ -284,6 +276,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .expect(\"place op takes something that is not a ref\")\n             .ty;\n \n+        let arg_ty = match op {\n+            PlaceOp::Deref => None,\n+            PlaceOp::Index => {\n+                // We would need to recover the `T` used when we resolve `<_ as Index<T>>::index`\n+                // in try_index_step. This is the subst at index 1.\n+                //\n+                // Note: we should *not* use `expr_ty` of index_expr here because autoderef\n+                // during coercions can cause type of index_expr to differ from `T` (#72002).\n+                // We also could not use `expr_ty_adjusted` of index_expr because reborrowing\n+                // during coercions can also cause type of index_expr to differ from `T`,\n+                // which can potentially cause regionck failure (#74933).\n+                Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n+            }\n+        };\n+        let arg_tys = match arg_ty {\n+            None => &[],\n+            Some(ref ty) => slice::from_ref(ty),\n+        };\n+\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}, {"sha": "4b6c173b8ce58af987014425f1fe6805b7d83fe1", "filename": "src/test/ui/typeck/issue-74933.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+//\n+// rust-lang/rust#74933: Lifetime error when indexing with borrowed index\n+\n+use std::ops::{Index, IndexMut};\n+\n+struct S(V);\n+struct K<'a>(&'a ());\n+struct V;\n+\n+impl<'a> Index<&'a K<'a>> for S {\n+    type Output = V;\n+\n+    fn index(&self, _: &'a K<'a>) -> &V {\n+        &self.0\n+    }\n+}\n+\n+impl<'a> IndexMut<&'a K<'a>> for S {\n+    fn index_mut(&mut self, _: &'a K<'a>) -> &mut V {\n+        &mut self.0\n+    }\n+}\n+\n+impl V {\n+    fn foo(&mut self) {}\n+}\n+\n+fn test(s: &mut S, k: &K<'_>) {\n+    s[k] = V;\n+    s[k].foo();\n+}\n+\n+fn main() {\n+    let mut s = S(V);\n+    let k = K(&());\n+    test(&mut s, &k);\n+}"}, {"sha": "bce3cf06b0751ce72a5ca0abe3ca01d882655f98", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "patch": "@@ -263,7 +263,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     suppressible_tidy_err!(err, skip_undocumented_unsafe, \"undocumented unsafe\");\n                 }\n             }\n-            if line.contains(\"// SAFETY: \") || line.contains(\"// Safety: \") {\n+            if line.contains(\"// SAFETY:\") || line.contains(\"// Safety:\") {\n                 last_safety_comment = true;\n             } else if line.trim().starts_with(\"//\") || line.trim().is_empty() {\n                 // keep previous value"}]}