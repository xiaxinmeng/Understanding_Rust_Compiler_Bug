{"sha": "fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "node_id": "C_kwDOAAsO6NoAKGZiMWVlODc2NGY0ZDZiYTc4YzFhZDE4MDNhMzRhMGEyZDJiMGJmOTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-02-22T02:46:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-02-22T02:46:51Z"}, "message": "ScalarMaybeUninit is explicitly hexadecimal in its formatting", "tree": {"sha": "589b767d15fad398178c3efe4317e9eee36787ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589b767d15fad398178c3efe4317e9eee36787ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "html_url": "https://github.com/rust-lang/rust/commit/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "html_url": "https://github.com/rust-lang/rust/commit/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "bc4dca4c146f6e2257ab5e1b61084c4860a8ad62", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "patch": "@@ -142,11 +142,11 @@ impl<Tag: Provenance> std::fmt::Display for ImmTy<'_, Tag> {\n                         p(cx, s, ty)?;\n                         return Ok(());\n                     }\n-                    write!(f, \"{}: {}\", s, self.layout.ty)\n+                    write!(f, \"{:x}: {}\", s, self.layout.ty)\n                 }\n                 Immediate::ScalarPair(a, b) => {\n                     // FIXME(oli-obk): at least print tuples and slices nicely\n-                    write!(f, \"({}, {}): {}\", a, b, self.layout.ty,)\n+                    write!(f, \"({:x}, {:x}): {}\", a, b, self.layout.ty,)\n                 }\n             }\n         })"}, {"sha": "54e29299e6c97652fbba7fd431941a6364d45ee7", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "patch": "@@ -503,7 +503,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     value.to_bool(),\n                     self.path,\n                     err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>\n-                        { \"{}\", value } expected { \"a boolean\" },\n+                        { \"{:x}\", value } expected { \"a boolean\" },\n                 );\n                 Ok(true)\n             }\n@@ -513,7 +513,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     value.to_char(),\n                     self.path,\n                     err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>\n-                        { \"{}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n+                        { \"{:x}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n                 );\n                 Ok(true)\n             }\n@@ -526,7 +526,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());\n                     if !is_bits {\n                         throw_validation_failure!(self.path,\n-                            { \"{}\", value } expected { \"initialized plain (non-pointer) bytes\" }\n+                            { \"{:x}\", value } expected { \"initialized plain (non-pointer) bytes\" }\n                         )\n                     }\n                 }\n@@ -580,7 +580,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n                     err_ub!(InvalidUninitBytes(None)) =>\n-                        { \"{}\", value } expected { \"a function pointer\" },\n+                        { \"{:x}\", value } expected { \"a function pointer\" },\n                 );\n                 // FIXME: Check if the signature matches\n                 Ok(true)\n@@ -632,7 +632,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let value = try_validation!(\n             value.check_init(),\n             self.path,\n-            err_ub!(InvalidUninitBytes(None)) => { \"{}\", value }\n+            err_ub!(InvalidUninitBytes(None)) => { \"{:x}\", value }\n                 expected { \"something {}\", wrapping_range_format(valid_range, max_value) },\n         );\n         let bits = match value.try_to_int() {"}, {"sha": "c8ddc4edc8adae51efb0b50e5858c7ad696ba8c5", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=fb1ee8764f4d6ba78c1ad1803a34a0a2d2b0bf93", "patch": "@@ -498,7 +498,7 @@ impl<Tag: Provenance> fmt::Debug for ScalarMaybeUninit<Tag> {\n     }\n }\n \n-impl<Tag: Provenance> fmt::Display for ScalarMaybeUninit<Tag> {\n+impl<Tag: Provenance> fmt::LowerHex for ScalarMaybeUninit<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ScalarMaybeUninit::Uninit => write!(f, \"uninitialized bytes\"),"}]}