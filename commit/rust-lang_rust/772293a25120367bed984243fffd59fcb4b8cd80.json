{"sha": "772293a25120367bed984243fffd59fcb4b8cd80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MjI5M2EyNTEyMDM2N2JlZDk4NDI0M2ZmZmQ1OWZjYjRiOGNkODA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-27T16:55:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-27T17:48:24Z"}, "message": "Fix pretty-printer test failure by carrying the bound lifetime names through\nthe types.  Initially I thought it would be necessary to thread this data\nthrough not only the AST but the types themselves, but then I remembered that\nthe pretty printer only cares about the AST.  Regardless, I have elected to\nleave the changes to the types intact since they will eventually be needed.  I\nleft a few FIXMEs where it didn't seem worth finishing up since the code wasn't\ncrucial yet.", "tree": {"sha": "722c5bb36b4f6932ed83dd37d4b80f1bb92fa0a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722c5bb36b4f6932ed83dd37d4b80f1bb92fa0a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/772293a25120367bed984243fffd59fcb4b8cd80", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/772293a25120367bed984243fffd59fcb4b8cd80", "html_url": "https://github.com/rust-lang/rust/commit/772293a25120367bed984243fffd59fcb4b8cd80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/772293a25120367bed984243fffd59fcb4b8cd80/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93393e907eddab513fa2be541af4356b8203282", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93393e907eddab513fa2be541af4356b8203282", "html_url": "https://github.com/rust-lang/rust/commit/b93393e907eddab513fa2be541af4356b8203282"}], "stats": {"total": 230, "additions": 130, "deletions": 100}, "files": [{"sha": "e37b3a963c4e8e62c73ed350e69b94c7e665095b", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -24,6 +24,7 @@ use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::codemap::{respan, dummy_sp};\n+use syntax::opt_vec;\n \n // Compact string representation for ty::t values. API ty_str &\n // parse_from_str. Extra parameters are for converting to/from def_ids in the\n@@ -479,7 +480,9 @@ fn parse_sig(st: @mut PState, conv: conv_did) -> ty::FnSig {\n     }\n     st.pos += 1u; // eat the ']'\n     let ret_ty = parse_ty(st, conv);\n-    ty::FnSig {inputs: inputs, output: ret_ty}\n+    ty::FnSig {bound_lifetime_names: opt_vec::Empty, // FIXME(#4846)\n+               inputs: inputs,\n+               output: ret_ty}\n }\n \n // Rust metadata parsing"}, {"sha": "92d231a96aae9ac9db0b3018664c6f32785a3fe2", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -40,6 +40,7 @@ use util::ppaux::ty_to_str;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};\n+use syntax::opt_vec;\n use syntax::parse::token::special_idents;\n \n fn abi_info(arch: session::arch) -> @cabi::ABIInfo {\n@@ -615,7 +616,8 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 sigil: ast::BorrowedSigil,\n                 onceness: ast::Many,\n                 region: ty::re_bound(ty::br_anon(0)),\n-                sig: FnSig {inputs: ~[arg {mode: ast::expl(ast::by_copy),\n+                sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n+                            inputs: ~[arg {mode: ast::expl(ast::by_copy),\n                                            ty: star_u8}],\n                             output: ty::mk_nil(bcx.tcx())}\n             });"}, {"sha": "0a7024b161e34e046020e4070f97d7525c5813e8", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -37,6 +37,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util::local_def;\n+use syntax::opt_vec;\n use syntax::parse::token::special_idents;\n \n pub fn monomorphic_fn(ccx: @CrateContext,\n@@ -282,7 +283,8 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n                 ty::BareFnTy {\n                     purity: ast::impure_fn,\n                     abi: ast::RustAbi,\n-                    sig: FnSig {inputs: ~[],\n+                    sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n+                                inputs: ~[],\n                                 output: ty::mk_nil(tcx)}}))\n         }\n         ty::ty_closure(ref fty) => {\n@@ -316,7 +318,8 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n                 sigil: sigil,\n                 onceness: ast::Many,\n                 region: ty::re_static,\n-                sig: ty::FnSig {inputs: ~[],\n+                sig: ty::FnSig {bound_lifetime_names: opt_vec::Empty,\n+                                inputs: ~[],\n                                 output: ty::mk_nil(tcx)}})\n     }\n }"}, {"sha": "0d36453c757396551c261b44d8ff985511e77711", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -45,6 +45,8 @@ use syntax::codemap::span;\n use syntax::codemap;\n use syntax::print::pprust;\n use syntax::{ast, ast_map};\n+use syntax::opt_vec::OptVec;\n+use syntax::opt_vec;\n use syntax;\n \n // Data types\n@@ -376,10 +378,12 @@ pub struct ClosureTy {\n  * Signature of a function type, which I have arbitrarily\n  * decided to use to refer to the input/output types.\n  *\n+ * - `lifetimes` is the list of region names bound in this fn.\n  * - `inputs` is the list of arguments and their modes.\n  * - `output` is the return type. */\n #[deriving(Eq)]\n pub struct FnSig {\n+    bound_lifetime_names: OptVec<ast::ident>,\n     inputs: ~[arg],\n     output: t\n }\n@@ -1062,7 +1066,8 @@ pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n                BareFnTy {\n                    purity: ast::pure_fn,\n                    abi: ast::RustAbi,\n-                   sig: FnSig {inputs: input_args,\n+                   sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n+                               inputs: input_args,\n                                output: output}})\n }\n \n@@ -1203,6 +1208,7 @@ pub fn fold_sig(sig: &FnSig, fldop: &fn(t) -> t) -> FnSig {\n     };\n \n     FnSig {\n+        bound_lifetime_names: copy sig.bound_lifetime_names,\n         inputs: args,\n         output: fldop(sig.output)\n     }"}, {"sha": "b167f0c0d75f25256a648204c7dc1acbe0f6f372", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 59, "deletions": 44, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -58,7 +58,7 @@ use middle::const_eval;\n use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n-use middle::typeck::rscope::{in_binding_rscope, in_binding_rscope_ext};\n+use middle::typeck::rscope::{in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope, RegionError};\n use middle::typeck::rscope::{RegionParamNames};\n \n@@ -67,6 +67,7 @@ use core::vec;\n use syntax::{ast, ast_util};\n use syntax::codemap::span;\n use syntax::opt_vec::OptVec;\n+use syntax::opt_vec;\n use syntax::print::pprust::{lifetime_to_str, path_to_str};\n use syntax::parse::token::special_idents;\n use util::common::indenter;\n@@ -347,7 +348,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n       }\n       ast::ty_bare_fn(ref bf) => {\n           ty::mk_bare_fn(tcx, ty_of_bare_fn(self, rscope, bf.purity,\n-                                            bf.abi, &bf.decl))\n+                                            bf.abi, &bf.lifetimes, &bf.decl))\n       }\n       ast::ty_closure(ref f) => {\n           let fn_decl = ty_of_closure(self,\n@@ -508,45 +509,50 @@ pub fn ty_of_arg<AC:AstConv,RS:region_scope + Copy + Durable>(\n     arg {mode: mode, ty: ty}\n }\n \n-pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n-        self: &AC,\n-        rscope: &RS,\n-        purity: ast::purity,\n-        abi: ast::Abi,\n-        decl: &ast::fn_decl)\n-     -> ty::BareFnTy {\n-    debug!(\"ty_of_bare_fn\");\n-\n-    // new region names that appear inside of the fn decl are bound to\n-    // that function type\n-    let rb = in_binding_rscope(rscope);\n-\n-    let input_tys = decl.inputs.map(|a| ty_of_arg(self, &rb, *a, None));\n-    let output_ty = match decl.output.node {\n-        ast::ty_infer => self.ty_infer(decl.output.span),\n-        _ => ast_ty_to_ty(self, &rb, decl.output)\n-    };\n-\n-    ty::BareFnTy {\n-        purity: purity,\n-        abi: abi,\n-        sig: ty::FnSig {inputs: input_tys, output: output_ty}\n-    }\n+pub fn bound_lifetimes<AC:AstConv>(\n+    self: &AC,\n+    ast_lifetimes: &OptVec<ast::Lifetime>) -> OptVec<ast::ident>\n+{\n+    /*!\n+     *\n+     * Converts a list of lifetimes into a list of bound identifier\n+     * names.  Does not permit special names like 'static or 'self to\n+     * be bound.  Note that this function is for use in closures,\n+     * methods, and fn definitions.  It is legal to bind 'self in a\n+     * type.  Eventually this distinction should go away and the same\n+     * rules should apply everywhere ('self would not be a special name\n+     * at that point).\n+     */\n+\n+    let special_idents = [special_idents::static, special_idents::self_];\n+    let mut bound_lifetime_names = opt_vec::Empty;\n+    ast_lifetimes.map_to_vec(|ast_lifetime| {\n+        if special_idents.any(|&i| i == ast_lifetime.ident) {\n+            self.tcx().sess.span_err(\n+                ast_lifetime.span,\n+                fmt!(\"illegal lifetime parameter name: `%s`\",\n+                     lifetime_to_str(ast_lifetime, self.tcx().sess.intr())));\n+        } else {\n+            bound_lifetime_names.push(ast_lifetime.ident);\n+        }\n+    });\n+    bound_lifetime_names\n }\n \n-pub fn ty_of_bare_fn_ext<AC:AstConv,RS:region_scope + Copy + Durable>(\n-        self: &AC,\n-        rscope: &RS,\n-        purity: ast::purity,\n-        abi: ast::Abi,\n-        decl: &ast::fn_decl,\n-        +region_param_names: RegionParamNames)\n-     -> ty::BareFnTy {\n-    debug!(\"ty_of_bare_fn_ext\");\n+pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    self: &AC,\n+    rscope: &RS,\n+    purity: ast::purity,\n+    abi: ast::Abi,\n+    lifetimes: &OptVec<ast::Lifetime>,\n+    decl: &ast::fn_decl) -> ty::BareFnTy\n+{\n+    debug!(\"ty_of_bare_fn\");\n \n     // new region names that appear inside of the fn decl are bound to\n     // that function type\n-    let rb = in_binding_rscope_ext(rscope, region_param_names);\n+    let bound_lifetime_names = bound_lifetimes(self, lifetimes);\n+    let rb = in_binding_rscope(rscope, RegionParamNames(copy bound_lifetime_names));\n \n     let input_tys = decl.inputs.map(|a| ty_of_arg(self, &rb, *a, None));\n     let output_ty = match decl.output.node {\n@@ -557,7 +563,9 @@ pub fn ty_of_bare_fn_ext<AC:AstConv,RS:region_scope + Copy + Durable>(\n     ty::BareFnTy {\n         purity: purity,\n         abi: abi,\n-        sig: ty::FnSig {inputs: input_tys, output: output_ty}\n+        sig: ty::FnSig {bound_lifetime_names: bound_lifetime_names,\n+                        inputs: input_tys,\n+                        output: output_ty}\n     }\n }\n \n@@ -569,10 +577,16 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n         onceness: ast::Onceness,\n         opt_lifetime: Option<@ast::Lifetime>,\n         decl: &ast::fn_decl,\n-        expected_tys: Option<ty::FnSig>,\n+        expected_sig: Option<ty::FnSig>,\n         lifetimes: &OptVec<ast::Lifetime>,\n         span: span)\n-     -> ty::ClosureTy {\n+     -> ty::ClosureTy\n+{\n+    // The caller should not both provide explicit bound lifetime\n+    // names and expected types.  Either we infer the bound lifetime\n+    // names or they are provided, but not both.\n+    fail_unless!(lifetimes.is_empty() || expected_sig.is_none());\n+\n     debug!(\"ty_of_fn_decl\");\n     let _i = indenter();\n \n@@ -599,19 +613,19 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n \n     // new region names that appear inside of the fn decl are bound to\n     // that function type\n-    let region_param_names = RegionParamNames::from_lifetimes(lifetimes);\n-    let rb = in_binding_rscope_ext(rscope, region_param_names);\n+    let bound_lifetime_names = bound_lifetimes(self, lifetimes);\n+    let rb = in_binding_rscope(rscope, RegionParamNames(copy bound_lifetime_names));\n \n     let input_tys = do decl.inputs.mapi |i, a| {\n-        let expected_arg_ty = do expected_tys.chain_ref |e| {\n+        let expected_arg_ty = do expected_sig.chain_ref |e| {\n             // no guarantee that the correct number of expected args\n             // were supplied\n             if i < e.inputs.len() {Some(e.inputs[i])} else {None}\n         };\n         ty_of_arg(self, &rb, *a, expected_arg_ty)\n     };\n \n-    let expected_ret_ty = expected_tys.map(|e| e.output);\n+    let expected_ret_ty = expected_sig.map(|e| e.output);\n     let output_ty = match decl.output.node {\n         ast::ty_infer if expected_ret_ty.is_some() => expected_ret_ty.get(),\n         ast::ty_infer => self.ty_infer(decl.output.span),\n@@ -623,7 +637,8 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n         sigil: sigil,\n         onceness: onceness,\n         region: bound_region,\n-        sig: ty::FnSig {inputs: input_tys,\n+        sig: ty::FnSig {bound_lifetime_names: bound_lifetime_names,\n+                        inputs: input_tys,\n                         output: output_ty}\n     }\n }"}, {"sha": "90e6b6c88a54955b797b7886bad8306c13328e68", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -1633,7 +1633,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // sigils.\n         let expected_sty = unpack_expected(fcx, expected, |x| Some(copy *x));\n         let mut error_happened = false;\n-        let (expected_tys,\n+        let (expected_sig,\n              expected_purity,\n              expected_sigil,\n              expected_onceness) = {\n@@ -1668,13 +1668,14 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                                expected_onceness,\n                                                None,\n                                                decl,\n-                                               expected_tys,\n+                                               expected_sig,\n                                                &opt_vec::Empty,\n                                                expr.span);\n \n         let mut fty_sig;\n         let fty = if error_happened {\n             fty_sig = FnSig {\n+                bound_lifetime_names: opt_vec::Empty,\n                 inputs: fn_ty.sig.inputs.map(|an_arg| {\n                     arg { mode: an_arg.mode,\n                          ty: ty::mk_err(tcx)\n@@ -3492,6 +3493,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             onceness: ast::Once,\n             region: ty::re_bound(ty::br_anon(0)),\n             sig: ty::FnSig {\n+                bound_lifetime_names: opt_vec::Empty,\n                 inputs: ~[arg {mode: ast::expl(ast::by_copy),\n                                ty: ty::mk_imm_ptr(\n                                    ccx.tcx,\n@@ -3723,7 +3725,8 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n         purity: ast::unsafe_fn,\n         abi: ast::RustAbi,\n-        sig: FnSig {inputs: inputs,\n+        sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n+                    inputs: inputs,\n                     output: output}\n     });\n     let i_ty = ty::lookup_item_type(ccx.tcx, local_def(it.id));"}, {"sha": "573285c357e315b1698663e8795d3dab5905d277", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -59,6 +59,7 @@ use syntax::codemap;\n use syntax::print::pprust::path_to_str;\n use syntax::visit;\n use syntax::opt_vec::OptVec;\n+use syntax::opt_vec;\n \n pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n \n@@ -716,6 +717,7 @@ pub fn convert_struct(ccx: &CrateCtxt,\n                 &type_rscope(region_parameterization),\n                 ast::impure_fn,\n                 ast::RustAbi,\n+                &opt_vec::Empty,\n                 &ast_util::dtor_dec()));\n         write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n         tcx.tcache.insert(local_def(dtor.node.id),\n@@ -776,17 +778,16 @@ pub fn ty_of_method(ccx: &CrateCtxt,\n                  -> ty::method {\n     let rscope = MethodRscope::new(m.self_ty.node,\n                                    rp,\n-                                   rcvr_generics,\n-                                   method_generics);\n+                                   rcvr_generics);\n     ty::method {\n         ident: m.ident,\n         tps: ty_param_bounds(ccx, &m.generics),\n-        fty: astconv::ty_of_bare_fn_ext(ccx,\n-                                        &rscope,\n-                                        m.purity,\n-                                        ast::RustAbi,\n-                                        &m.decl,\n-                                        rscope.region_param_names()),\n+        fty: astconv::ty_of_bare_fn(ccx,\n+                                    &rscope,\n+                                    m.purity,\n+                                    ast::RustAbi,\n+                                    &method_generics.lifetimes,\n+                                    &m.decl),\n         self_ty: m.self_ty.node,\n         vis: m.vis,\n         def_id: local_def(m.id)\n@@ -799,16 +800,16 @@ pub fn ty_of_ty_method(self: &CrateCtxt,\n                        id: ast::def_id,\n                        generics: &ast::Generics)\n                     -> ty::method {\n-    let rscope = MethodRscope::new(m.self_ty.node, rp, generics, &m.generics);\n+    let rscope = MethodRscope::new(m.self_ty.node, rp, generics);\n     ty::method {\n         ident: m.ident,\n         tps: ty_param_bounds(self, &m.generics),\n-        fty: astconv::ty_of_bare_fn_ext(self,\n-                                        &rscope,\n-                                        m.purity,\n-                                        ast::RustAbi,\n-                                        &m.decl,\n-                                        rscope.region_param_names()),\n+        fty: astconv::ty_of_bare_fn(self,\n+                                    &rscope,\n+                                    m.purity,\n+                                    ast::RustAbi,\n+                                    &m.generics.lifetimes,\n+                                    &m.decl),\n         // assume public, because this is only invoked on trait methods\n         self_ty: m.self_ty.node,\n         vis: ast::public,\n@@ -869,13 +870,12 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n       }\n       ast::item_fn(ref decl, purity, ref generics, _) => {\n         let bounds = ty_param_bounds(ccx, generics);\n-        let region_param_names = RegionParamNames::from_generics(generics);\n-        let tofd = astconv::ty_of_bare_fn_ext(ccx,\n-                                              &empty_rscope,\n-                                              purity,\n-                                              ast::RustAbi,\n-                                              decl,\n-                                              region_param_names);\n+        let tofd = astconv::ty_of_bare_fn(ccx,\n+                                          &empty_rscope,\n+                                          purity,\n+                                          ast::RustAbi,\n+                                          &generics.lifetimes,\n+                                          decl);\n         let tpt = ty_param_bounds_and_ty {\n             bounds: bounds,\n             region_param: None,\n@@ -971,11 +971,10 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt, it: @ast::foreign_item)\n                                   generics)\n         }\n         ast::foreign_item_const(t) => {\n-            let rb = in_binding_rscope(&empty_rscope);\n             ty::ty_param_bounds_and_ty {\n                 bounds: @~[],\n                 region_param: None,\n-                ty: ast_ty_to_ty(ccx, &rb, t)\n+                ty: ast_ty_to_ty(ccx, &empty_rscope, t)\n             }\n         }\n     }\n@@ -1043,7 +1042,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n                           -> ty::ty_param_bounds_and_ty {\n     let bounds = ty_param_bounds(ccx, generics);\n     let region_param_names = RegionParamNames::from_generics(generics);\n-    let rb = in_binding_rscope_ext(&empty_rscope, region_param_names);\n+    let rb = in_binding_rscope(&empty_rscope, region_param_names);\n     let input_tys = decl.inputs.map(|a| ty_of_arg(ccx, &rb, *a, None) );\n     let output_ty = ast_ty_to_ty(ccx, &rb, decl.output);\n \n@@ -1052,7 +1051,9 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n         ty::BareFnTy {\n             abi: ast::RustAbi,\n             purity: ast::unsafe_fn,\n-            sig: ty::FnSig {inputs: input_tys, output: output_ty}\n+            sig: ty::FnSig {bound_lifetime_names: opt_vec::Empty,\n+                            inputs: input_tys,\n+                            output: output_ty}\n         });\n     let tpt = ty_param_bounds_and_ty {\n         bounds: bounds,"}, {"sha": "2c053e2bbe02dde0ac45cbbf4ffc1214f05d0134", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -70,6 +70,7 @@ use core::result::{iter_vec2, map_vec2};\n use core::vec;\n use syntax::ast::{Onceness, purity, ret_style};\n use syntax::ast;\n+use syntax::opt_vec;\n use syntax::codemap::span;\n \n pub trait Combine {\n@@ -432,7 +433,9 @@ pub fn super_fn_sigs<C:Combine>(\n     do argvecs(self, a_f.inputs, b_f.inputs)\n             .chain |inputs| {\n         do self.tys(a_f.output, b_f.output).chain |output| {\n-            Ok(FnSig {inputs: /*bad*/copy inputs, output: output})\n+            Ok(FnSig {bound_lifetime_names: opt_vec::Empty, // FIXME(#4846)\n+                      inputs: /*bad*/copy inputs,\n+                      output: output})\n         }\n     }\n }"}, {"sha": "7082c154d2f2c6e79b8a355aa38bbd10d3078ab8", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -156,12 +156,10 @@ impl MethodRscope {\n     // trait).\n     pub fn new(self_ty: ast::self_ty_,\n                variance: Option<ty::region_variance>,\n-               rcvr_generics: &ast::Generics,\n-               method_generics: &ast::Generics)\n+               rcvr_generics: &ast::Generics)\n             -> MethodRscope {\n         let mut region_param_names =\n             RegionParamNames::from_generics(rcvr_generics);\n-        region_param_names.add_generics(method_generics);\n         MethodRscope {\n             self_ty: self_ty,\n             variance: variance,\n@@ -273,18 +271,7 @@ pub struct binding_rscope {\n     region_param_names: RegionParamNames,\n }\n \n-pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(self: &RS)\n-    -> binding_rscope {\n-    let base = @copy *self;\n-    let base = base as @region_scope;\n-    binding_rscope {\n-        base: base,\n-        anon_bindings: @mut 0,\n-        region_param_names: RegionParamNames::new()\n-    }\n-}\n-\n-pub fn in_binding_rscope_ext<RS:region_scope + Copy + Durable>(\n+pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(\n         self: &RS,\n         +region_param_names: RegionParamNames)\n      -> binding_rscope {"}, {"sha": "9112e92df7e45f3a48ac6ad6af41a424db9924a5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -904,6 +904,7 @@ pub struct TyClosure {\n pub struct TyBareFn {\n     purity: purity,\n     abi: Abi,\n+    lifetimes: OptVec<Lifetime>,\n     decl: fn_decl\n }\n "}, {"sha": "9d4cf4e89392f2a971a3078661730af4af367670", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -615,6 +615,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n         }\n         ty_bare_fn(ref f) => {\n             ty_bare_fn(@TyBareFn {\n+                lifetimes: f.lifetimes,\n                 purity: f.purity,\n                 abi: f.abi,\n                 decl: fold_fn_decl(&f.decl, fld)"}, {"sha": "c82151bb4a9193107b937c1967182ec2b3839755", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -363,10 +363,11 @@ pub impl Parser {\n \n         let purity = self.parse_purity();\n         self.expect_keyword(&~\"fn\");\n-        let (decl, _) = self.parse_ty_fn_decl();\n+        let (decl, lifetimes) = self.parse_ty_fn_decl();\n         return ty_bare_fn(@TyBareFn {\n             abi: RustAbi,\n             purity: purity,\n+            lifetimes: lifetimes,\n             decl: decl\n         });\n     }"}, {"sha": "a6064b467b1d7a7702d6e773646acab9c4a5f244", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -14,6 +14,7 @@ use ast::{RegionTyParamBound, TraitTyParamBound, required, provided};\n use ast;\n use ast_util;\n use opt_vec::OptVec;\n+use opt_vec;\n use attr;\n use codemap::{CodeMap, BytePos};\n use codemap;\n@@ -402,14 +403,18 @@ pub fn print_type(s: @ps, &&ty: @ast::Ty) {\n         pclose(s);\n       }\n       ast::ty_bare_fn(f) => {\n+          let generics = ast::Generics {lifetimes: copy f.lifetimes,\n+                                        ty_params: opt_vec::Empty};\n           print_ty_fn(s, Some(f.abi), None, None,\n                       f.purity, ast::Many, &f.decl, None,\n-                      None, None);\n+                      Some(&generics), None);\n       }\n       ast::ty_closure(f) => {\n+          let generics = ast::Generics {lifetimes: copy f.lifetimes,\n+                                        ty_params: opt_vec::Empty};\n           print_ty_fn(s, None, Some(f.sigil), f.region,\n                       f.purity, f.onceness, &f.decl, None,\n-                      None, None);\n+                      Some(&generics), None);\n       }\n       ast::ty_path(path, _) => print_path(s, path, false),\n       ast::ty_fixed_length_vec(ref mt, v) => {\n@@ -1923,7 +1928,8 @@ pub fn print_ty_fn(s: @ps,\n                    opt_region: Option<@ast::Lifetime>,\n                    purity: ast::purity,\n                    onceness: ast::Onceness,\n-                   decl: &ast::fn_decl, id: Option<ast::ident>,\n+                   decl: &ast::fn_decl,\n+                   id: Option<ast::ident>,\n                    generics: Option<&ast::Generics>,\n                    opt_self_ty: Option<ast::self_ty_>) {\n     ibox(s, indent_unit);"}, {"sha": "652a7a33396176d28509b41fd30b4646f02e303e", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/772293a25120367bed984243fffd59fcb4b8cd80/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772293a25120367bed984243fffd59fcb4b8cd80/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=772293a25120367bed984243fffd59fcb4b8cd80", "patch": "@@ -1,5 +1,3 @@\n-// xfail-pretty\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}