{"sha": "9285cbffb66e1c497469fedc5c181b7f295742fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODVjYmZmYjY2ZTFjNDk3NDY5ZmVkYzVjMTgxYjdmMjk1NzQyZmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:08:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:08:54Z"}, "message": "More compact", "tree": {"sha": "085ed3a0f8d31c7e1ceac60f37ea3a0fb6740b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085ed3a0f8d31c7e1ceac60f37ea3a0fb6740b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9285cbffb66e1c497469fedc5c181b7f295742fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9285cbffb66e1c497469fedc5c181b7f295742fd", "html_url": "https://github.com/rust-lang/rust/commit/9285cbffb66e1c497469fedc5c181b7f295742fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9285cbffb66e1c497469fedc5c181b7f295742fd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd2a1249589c0c732b04177e3e7484ac6440fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd2a1249589c0c732b04177e3e7484ac6440fd8", "html_url": "https://github.com/rust-lang/rust/commit/6fd2a1249589c0c732b04177e3e7484ac6440fd8"}], "stats": {"total": 1680, "additions": 241, "deletions": 1439}, "files": [{"sha": "846212a6f4da1dbf44040eb7e00f55be4bad1192", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 125, "deletions": 750, "changes": 875, "blob_url": "https://github.com/rust-lang/rust/blob/9285cbffb66e1c497469fedc5c181b7f295742fd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285cbffb66e1c497469fedc5c181b7f295742fd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=9285cbffb66e1c497469fedc5c181b7f295742fd", "patch": "@@ -16,12 +16,7 @@ impl std::fmt::Display for SourceFile {\n     }\n }\n impl AstNode for SourceFile {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SOURCE_FILE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -47,12 +42,7 @@ impl std::fmt::Display for FnDef {\n     }\n }\n impl AstNode for FnDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FN_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FN_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -89,12 +79,7 @@ impl std::fmt::Display for RetType {\n     }\n }\n impl AstNode for RetType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RET_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RET_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -118,12 +103,7 @@ impl std::fmt::Display for StructDef {\n     }\n }\n impl AstNode for StructDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STRUCT_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -153,12 +133,7 @@ impl std::fmt::Display for UnionDef {\n     }\n }\n impl AstNode for UnionDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            UNION_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -189,12 +164,7 @@ impl std::fmt::Display for RecordFieldDefList {\n     }\n }\n impl AstNode for RecordFieldDefList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_DEF_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -219,12 +189,7 @@ impl std::fmt::Display for RecordFieldDef {\n     }\n }\n impl AstNode for RecordFieldDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -250,12 +215,7 @@ impl std::fmt::Display for TupleFieldDefList {\n     }\n }\n impl AstNode for TupleFieldDefList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_FIELD_DEF_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -280,12 +240,7 @@ impl std::fmt::Display for TupleFieldDef {\n     }\n }\n impl AstNode for TupleFieldDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_FIELD_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -310,12 +265,7 @@ impl std::fmt::Display for EnumDef {\n     }\n }\n impl AstNode for EnumDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -344,12 +294,7 @@ impl std::fmt::Display for EnumVariantList {\n     }\n }\n impl AstNode for EnumVariantList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM_VARIANT_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -374,12 +319,7 @@ impl std::fmt::Display for EnumVariant {\n     }\n }\n impl AstNode for EnumVariant {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM_VARIANT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -408,12 +348,7 @@ impl std::fmt::Display for TraitDef {\n     }\n }\n impl AstNode for TraitDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRAIT_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -445,12 +380,7 @@ impl std::fmt::Display for Module {\n     }\n }\n impl AstNode for Module {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MODULE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MODULE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -479,12 +409,7 @@ impl std::fmt::Display for ItemList {\n     }\n }\n impl AstNode for ItemList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ITEM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -511,12 +436,7 @@ impl std::fmt::Display for ConstDef {\n     }\n }\n impl AstNode for ConstDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -549,12 +469,7 @@ impl std::fmt::Display for StaticDef {\n     }\n }\n impl AstNode for StaticDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STATIC_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -587,12 +502,7 @@ impl std::fmt::Display for TypeAliasDef {\n     }\n }\n impl AstNode for TypeAliasDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_ALIAS_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ALIAS_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -625,12 +535,7 @@ impl std::fmt::Display for ImplDef {\n     }\n }\n impl AstNode for ImplDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IMPL_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -661,12 +566,7 @@ impl std::fmt::Display for ParenType {\n     }\n }\n impl AstNode for ParenType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PAREN_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -691,12 +591,7 @@ impl std::fmt::Display for TupleType {\n     }\n }\n impl AstNode for TupleType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -721,12 +616,7 @@ impl std::fmt::Display for NeverType {\n     }\n }\n impl AstNode for NeverType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NEVER_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NEVER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -749,12 +639,7 @@ impl std::fmt::Display for PathType {\n     }\n }\n impl AstNode for PathType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PATH_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -777,12 +662,7 @@ impl std::fmt::Display for PointerType {\n     }\n }\n impl AstNode for PointerType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            POINTER_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -807,12 +687,7 @@ impl std::fmt::Display for ArrayType {\n     }\n }\n impl AstNode for ArrayType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ARRAY_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -839,12 +714,7 @@ impl std::fmt::Display for SliceType {\n     }\n }\n impl AstNode for SliceType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SLICE_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SLICE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -869,12 +739,7 @@ impl std::fmt::Display for ReferenceType {\n     }\n }\n impl AstNode for ReferenceType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            REFERENCE_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == REFERENCE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -900,12 +765,7 @@ impl std::fmt::Display for PlaceholderType {\n     }\n }\n impl AstNode for PlaceholderType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PLACEHOLDER_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PLACEHOLDER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -928,12 +788,7 @@ impl std::fmt::Display for FnPointerType {\n     }\n }\n impl AstNode for FnPointerType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FN_POINTER_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FN_POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -960,12 +815,7 @@ impl std::fmt::Display for ForType {\n     }\n }\n impl AstNode for ForType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FOR_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -990,12 +840,7 @@ impl std::fmt::Display for ImplTraitType {\n     }\n }\n impl AstNode for ImplTraitType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IMPL_TRAIT_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_TRAIT_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1019,12 +864,7 @@ impl std::fmt::Display for DynTraitType {\n     }\n }\n impl AstNode for DynTraitType {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DYN_TRAIT_TYPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DYN_TRAIT_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1048,12 +888,7 @@ impl std::fmt::Display for TupleExpr {\n     }\n }\n impl AstNode for TupleExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1079,12 +914,7 @@ impl std::fmt::Display for ArrayExpr {\n     }\n }\n impl AstNode for ArrayExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ARRAY_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1111,12 +941,7 @@ impl std::fmt::Display for ParenExpr {\n     }\n }\n impl AstNode for ParenExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PAREN_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1142,12 +967,7 @@ impl std::fmt::Display for PathExpr {\n     }\n }\n impl AstNode for PathExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PATH_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1170,12 +990,7 @@ impl std::fmt::Display for LambdaExpr {\n     }\n }\n impl AstNode for LambdaExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LAMBDA_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LAMBDA_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1204,12 +1019,7 @@ impl std::fmt::Display for IfExpr {\n     }\n }\n impl AstNode for IfExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IF_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IF_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1234,12 +1044,7 @@ impl std::fmt::Display for LoopExpr {\n     }\n }\n impl AstNode for LoopExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LOOP_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1264,12 +1069,7 @@ impl std::fmt::Display for TryBlockExpr {\n     }\n }\n impl AstNode for TryBlockExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRY_BLOCK_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1294,12 +1094,7 @@ impl std::fmt::Display for ForExpr {\n     }\n }\n impl AstNode for ForExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FOR_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1327,12 +1122,7 @@ impl std::fmt::Display for WhileExpr {\n     }\n }\n impl AstNode for WhileExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHILE_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHILE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1358,12 +1148,7 @@ impl std::fmt::Display for ContinueExpr {\n     }\n }\n impl AstNode for ContinueExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONTINUE_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1388,12 +1173,7 @@ impl std::fmt::Display for BreakExpr {\n     }\n }\n impl AstNode for BreakExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BREAK_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BREAK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1419,12 +1199,7 @@ impl std::fmt::Display for Label {\n     }\n }\n impl AstNode for Label {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LABEL => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1447,12 +1222,7 @@ impl std::fmt::Display for BlockExpr {\n     }\n }\n impl AstNode for BlockExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BLOCK_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1478,12 +1248,7 @@ impl std::fmt::Display for ReturnExpr {\n     }\n }\n impl AstNode for ReturnExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RETURN_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1507,12 +1272,7 @@ impl std::fmt::Display for CallExpr {\n     }\n }\n impl AstNode for CallExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CALL_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CALL_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1536,12 +1296,7 @@ impl std::fmt::Display for MethodCallExpr {\n     }\n }\n impl AstNode for MethodCallExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            METHOD_CALL_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == METHOD_CALL_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1569,12 +1324,7 @@ impl std::fmt::Display for IndexExpr {\n     }\n }\n impl AstNode for IndexExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            INDEX_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == INDEX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1599,12 +1349,7 @@ impl std::fmt::Display for FieldExpr {\n     }\n }\n impl AstNode for FieldExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FIELD_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FIELD_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1630,12 +1375,7 @@ impl std::fmt::Display for AwaitExpr {\n     }\n }\n impl AstNode for AwaitExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AWAIT_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AWAIT_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1661,12 +1401,7 @@ impl std::fmt::Display for TryExpr {\n     }\n }\n impl AstNode for TryExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRY_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1691,12 +1426,7 @@ impl std::fmt::Display for CastExpr {\n     }\n }\n impl AstNode for CastExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CAST_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CAST_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1722,12 +1452,7 @@ impl std::fmt::Display for RefExpr {\n     }\n }\n impl AstNode for RefExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            REF_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == REF_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1754,12 +1479,7 @@ impl std::fmt::Display for PrefixExpr {\n     }\n }\n impl AstNode for PrefixExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PREFIX_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PREFIX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1784,12 +1504,7 @@ impl std::fmt::Display for BoxExpr {\n     }\n }\n impl AstNode for BoxExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BOX_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1814,12 +1529,7 @@ impl std::fmt::Display for RangeExpr {\n     }\n }\n impl AstNode for RangeExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RANGE_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RANGE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1843,12 +1553,7 @@ impl std::fmt::Display for BinExpr {\n     }\n }\n impl AstNode for BinExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BIN_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BIN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1872,12 +1577,7 @@ impl std::fmt::Display for Literal {\n     }\n }\n impl AstNode for Literal {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LITERAL => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1900,12 +1600,7 @@ impl std::fmt::Display for MatchExpr {\n     }\n }\n impl AstNode for MatchExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MATCH_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1931,12 +1626,7 @@ impl std::fmt::Display for MatchArmList {\n     }\n }\n impl AstNode for MatchArmList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MATCH_ARM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_ARM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1962,12 +1652,7 @@ impl std::fmt::Display for MatchArm {\n     }\n }\n impl AstNode for MatchArm {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MATCH_ARM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_ARM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1994,12 +1679,7 @@ impl std::fmt::Display for MatchGuard {\n     }\n }\n impl AstNode for MatchGuard {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MATCH_GUARD => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_GUARD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2023,12 +1703,7 @@ impl std::fmt::Display for RecordLit {\n     }\n }\n impl AstNode for RecordLit {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_LIT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_LIT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2052,12 +1727,7 @@ impl std::fmt::Display for RecordFieldList {\n     }\n }\n impl AstNode for RecordFieldList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2084,12 +1754,7 @@ impl std::fmt::Display for RecordField {\n     }\n }\n impl AstNode for RecordField {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2115,12 +1780,7 @@ impl std::fmt::Display for OrPat {\n     }\n }\n impl AstNode for OrPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            OR_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == OR_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2143,12 +1803,7 @@ impl std::fmt::Display for ParenPat {\n     }\n }\n impl AstNode for ParenPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PAREN_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2173,12 +1828,7 @@ impl std::fmt::Display for RefPat {\n     }\n }\n impl AstNode for RefPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            REF_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == REF_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2203,12 +1853,7 @@ impl std::fmt::Display for BoxPat {\n     }\n }\n impl AstNode for BoxPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BOX_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2232,12 +1877,7 @@ impl std::fmt::Display for BindPat {\n     }\n }\n impl AstNode for BindPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BIND_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BIND_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2264,12 +1904,7 @@ impl std::fmt::Display for PlaceholderPat {\n     }\n }\n impl AstNode for PlaceholderPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PLACEHOLDER_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PLACEHOLDER_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2292,12 +1927,7 @@ impl std::fmt::Display for DotDotPat {\n     }\n }\n impl AstNode for DotDotPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOT_DOT_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOT_DOT_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2320,12 +1950,7 @@ impl std::fmt::Display for PathPat {\n     }\n }\n impl AstNode for PathPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PATH_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2348,12 +1973,7 @@ impl std::fmt::Display for SlicePat {\n     }\n }\n impl AstNode for SlicePat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SLICE_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SLICE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2378,12 +1998,7 @@ impl std::fmt::Display for RangePat {\n     }\n }\n impl AstNode for RangePat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RANGE_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RANGE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2406,12 +2021,7 @@ impl std::fmt::Display for LiteralPat {\n     }\n }\n impl AstNode for LiteralPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LITERAL_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2434,12 +2044,7 @@ impl std::fmt::Display for MacroPat {\n     }\n }\n impl AstNode for MacroPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2462,12 +2067,7 @@ impl std::fmt::Display for RecordPat {\n     }\n }\n impl AstNode for RecordPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2493,12 +2093,7 @@ impl std::fmt::Display for RecordFieldPatList {\n     }\n }\n impl AstNode for RecordFieldPatList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_PAT_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2528,12 +2123,7 @@ impl std::fmt::Display for RecordFieldPat {\n     }\n }\n impl AstNode for RecordFieldPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2559,12 +2149,7 @@ impl std::fmt::Display for TupleStructPat {\n     }\n }\n impl AstNode for TupleStructPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_STRUCT_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_STRUCT_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2590,12 +2175,7 @@ impl std::fmt::Display for TuplePat {\n     }\n }\n impl AstNode for TuplePat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TUPLE_PAT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2620,12 +2200,7 @@ impl std::fmt::Display for Visibility {\n     }\n }\n impl AstNode for Visibility {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            VISIBILITY => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == VISIBILITY }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2651,12 +2226,7 @@ impl std::fmt::Display for Name {\n     }\n }\n impl AstNode for Name {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAME => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2679,12 +2249,7 @@ impl std::fmt::Display for NameRef {\n     }\n }\n impl AstNode for NameRef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAME_REF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2707,12 +2272,7 @@ impl std::fmt::Display for MacroCall {\n     }\n }\n impl AstNode for MacroCall {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_CALL => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_CALL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2741,12 +2301,7 @@ impl std::fmt::Display for Attr {\n     }\n }\n impl AstNode for Attr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ATTR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ATTR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2775,12 +2330,7 @@ impl std::fmt::Display for TokenTree {\n     }\n }\n impl AstNode for TokenTree {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TOKEN_TREE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TOKEN_TREE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2801,12 +2351,7 @@ impl std::fmt::Display for TypeParamList {\n     }\n }\n impl AstNode for TypeParamList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_PARAM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2834,12 +2379,7 @@ impl std::fmt::Display for TypeParam {\n     }\n }\n impl AstNode for TypeParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_PARAM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2866,12 +2406,7 @@ impl std::fmt::Display for ConstParam {\n     }\n }\n impl AstNode for ConstParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST_PARAM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2898,12 +2433,7 @@ impl std::fmt::Display for LifetimeParam {\n     }\n }\n impl AstNode for LifetimeParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LIFETIME_PARAM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2927,12 +2457,7 @@ impl std::fmt::Display for TypeBound {\n     }\n }\n impl AstNode for TypeBound {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_BOUND => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2957,12 +2482,7 @@ impl std::fmt::Display for TypeBoundList {\n     }\n }\n impl AstNode for TypeBoundList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_BOUND_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2985,12 +2505,7 @@ impl std::fmt::Display for WherePred {\n     }\n }\n impl AstNode for WherePred {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHERE_PRED => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3015,12 +2530,7 @@ impl std::fmt::Display for WhereClause {\n     }\n }\n impl AstNode for WhereClause {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHERE_CLAUSE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_CLAUSE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3044,12 +2554,7 @@ impl std::fmt::Display for Abi {\n     }\n }\n impl AstNode for Abi {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ABI => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3072,12 +2577,7 @@ impl std::fmt::Display for ExprStmt {\n     }\n }\n impl AstNode for ExprStmt {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXPR_STMT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXPR_STMT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3102,12 +2602,7 @@ impl std::fmt::Display for LetStmt {\n     }\n }\n impl AstNode for LetStmt {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LET_STMT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_STMT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3135,12 +2630,7 @@ impl std::fmt::Display for Condition {\n     }\n }\n impl AstNode for Condition {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONDITION => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONDITION }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3166,12 +2656,7 @@ impl std::fmt::Display for Block {\n     }\n }\n impl AstNode for Block {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BLOCK => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3199,12 +2684,7 @@ impl std::fmt::Display for ParamList {\n     }\n }\n impl AstNode for ParamList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PARAM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3230,12 +2710,7 @@ impl std::fmt::Display for SelfParam {\n     }\n }\n impl AstNode for SelfParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SELF_PARAM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3262,12 +2737,7 @@ impl std::fmt::Display for Param {\n     }\n }\n impl AstNode for Param {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PARAM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3293,12 +2763,7 @@ impl std::fmt::Display for UseItem {\n     }\n }\n impl AstNode for UseItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            USE_ITEM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3324,12 +2789,7 @@ impl std::fmt::Display for UseTree {\n     }\n }\n impl AstNode for UseTree {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            USE_TREE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3355,12 +2815,7 @@ impl std::fmt::Display for Alias {\n     }\n }\n impl AstNode for Alias {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ALIAS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ALIAS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3384,12 +2839,7 @@ impl std::fmt::Display for UseTreeList {\n     }\n }\n impl AstNode for UseTreeList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            USE_TREE_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3414,12 +2864,7 @@ impl std::fmt::Display for ExternCrateItem {\n     }\n }\n impl AstNode for ExternCrateItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXTERN_CRATE_ITEM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_CRATE_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3447,12 +2892,7 @@ impl std::fmt::Display for ArgList {\n     }\n }\n impl AstNode for ArgList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ARG_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ARG_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3477,12 +2917,7 @@ impl std::fmt::Display for Path {\n     }\n }\n impl AstNode for Path {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PATH => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3506,12 +2941,7 @@ impl std::fmt::Display for PathSegment {\n     }\n }\n impl AstNode for PathSegment {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PATH_SEGMENT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3541,12 +2971,7 @@ impl std::fmt::Display for TypeArgList {\n     }\n }\n impl AstNode for TypeArgList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_ARG_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3576,12 +3001,7 @@ impl std::fmt::Display for TypeArg {\n     }\n }\n impl AstNode for TypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_ARG => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3604,12 +3024,7 @@ impl std::fmt::Display for AssocTypeArg {\n     }\n }\n impl AstNode for AssocTypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ASSOC_TYPE_ARG => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_TYPE_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3635,12 +3050,7 @@ impl std::fmt::Display for LifetimeArg {\n     }\n }\n impl AstNode for LifetimeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LIFETIME_ARG => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3663,12 +3073,7 @@ impl std::fmt::Display for ConstArg {\n     }\n }\n impl AstNode for ConstArg {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST_ARG => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3693,12 +3098,7 @@ impl std::fmt::Display for MacroItems {\n     }\n }\n impl AstNode for MacroItems {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_ITEMS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_ITEMS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3721,12 +3121,7 @@ impl std::fmt::Display for MacroStmts {\n     }\n }\n impl AstNode for MacroStmts {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_STMTS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_STMTS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3750,12 +3145,7 @@ impl std::fmt::Display for ExternItemList {\n     }\n }\n impl AstNode for ExternItemList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXTERN_ITEM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3782,12 +3172,7 @@ impl std::fmt::Display for ExternBlock {\n     }\n }\n impl AstNode for ExternBlock {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXTERN_BLOCK => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_BLOCK }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3811,12 +3196,7 @@ impl std::fmt::Display for MetaItem {\n     }\n }\n impl AstNode for MetaItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            META_ITEM => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == META_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3842,12 +3222,7 @@ impl std::fmt::Display for MacroDef {\n     }\n }\n impl AstNode for MacroDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_DEF => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "e64b8bce6a488ac8f59fac85d9faa33d7b283408", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 114, "deletions": 679, "changes": 793, "blob_url": "https://github.com/rust-lang/rust/blob/9285cbffb66e1c497469fedc5c181b7f295742fd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285cbffb66e1c497469fedc5c181b7f295742fd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=9285cbffb66e1c497469fedc5c181b7f295742fd", "patch": "@@ -15,12 +15,7 @@ impl std::fmt::Display for Semi {\n     }\n }\n impl AstToken for Semi {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SEMI => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SEMI }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -40,12 +35,7 @@ impl std::fmt::Display for Comma {\n     }\n }\n impl AstToken for Comma {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            COMMA => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == COMMA }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -65,12 +55,7 @@ impl std::fmt::Display for LParen {\n     }\n }\n impl AstToken for LParen {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_PAREN => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == L_PAREN }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -90,12 +75,7 @@ impl std::fmt::Display for RParen {\n     }\n }\n impl AstToken for RParen {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_PAREN => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == R_PAREN }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -115,12 +95,7 @@ impl std::fmt::Display for LCurly {\n     }\n }\n impl AstToken for LCurly {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_CURLY => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == L_CURLY }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -140,12 +115,7 @@ impl std::fmt::Display for RCurly {\n     }\n }\n impl AstToken for RCurly {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_CURLY => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == R_CURLY }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -165,12 +135,7 @@ impl std::fmt::Display for LBrack {\n     }\n }\n impl AstToken for LBrack {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_BRACK => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == L_BRACK }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -190,12 +155,7 @@ impl std::fmt::Display for RBrack {\n     }\n }\n impl AstToken for RBrack {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_BRACK => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == R_BRACK }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -215,12 +175,7 @@ impl std::fmt::Display for LAngle {\n     }\n }\n impl AstToken for LAngle {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_ANGLE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == L_ANGLE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -240,12 +195,7 @@ impl std::fmt::Display for RAngle {\n     }\n }\n impl AstToken for RAngle {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_ANGLE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == R_ANGLE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -265,12 +215,7 @@ impl std::fmt::Display for At {\n     }\n }\n impl AstToken for At {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -290,12 +235,7 @@ impl std::fmt::Display for Pound {\n     }\n }\n impl AstToken for Pound {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            POUND => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == POUND }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -315,12 +255,7 @@ impl std::fmt::Display for Tilde {\n     }\n }\n impl AstToken for Tilde {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TILDE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TILDE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -340,12 +275,7 @@ impl std::fmt::Display for Question {\n     }\n }\n impl AstToken for Question {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            QUESTION => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == QUESTION }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -365,12 +295,7 @@ impl std::fmt::Display for Dollar {\n     }\n }\n impl AstToken for Dollar {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOLLAR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOLLAR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -390,12 +315,7 @@ impl std::fmt::Display for Amp {\n     }\n }\n impl AstToken for Amp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AMP => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AMP }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -415,12 +335,7 @@ impl std::fmt::Display for Pipe {\n     }\n }\n impl AstToken for Pipe {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PIPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -440,12 +355,7 @@ impl std::fmt::Display for Plus {\n     }\n }\n impl AstToken for Plus {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PLUS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PLUS }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -465,12 +375,7 @@ impl std::fmt::Display for Star {\n     }\n }\n impl AstToken for Star {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STAR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STAR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -490,12 +395,7 @@ impl std::fmt::Display for Slash {\n     }\n }\n impl AstToken for Slash {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SLASH => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SLASH }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -515,12 +415,7 @@ impl std::fmt::Display for Caret {\n     }\n }\n impl AstToken for Caret {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CARET => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CARET }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -540,12 +435,7 @@ impl std::fmt::Display for Percent {\n     }\n }\n impl AstToken for Percent {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PERCENT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PERCENT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -565,12 +455,7 @@ impl std::fmt::Display for Underscore {\n     }\n }\n impl AstToken for Underscore {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            UNDERSCORE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNDERSCORE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -590,12 +475,7 @@ impl std::fmt::Display for Dot {\n     }\n }\n impl AstToken for Dot {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -615,12 +495,7 @@ impl std::fmt::Display for Dotdot {\n     }\n }\n impl AstToken for Dotdot {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOTDOT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -640,12 +515,7 @@ impl std::fmt::Display for Dotdotdot {\n     }\n }\n impl AstToken for Dotdotdot {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOTDOTDOT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOTDOT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -665,12 +535,7 @@ impl std::fmt::Display for Dotdoteq {\n     }\n }\n impl AstToken for Dotdoteq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOTDOTEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOTEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -690,12 +555,7 @@ impl std::fmt::Display for Colon {\n     }\n }\n impl AstToken for Colon {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            COLON => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == COLON }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -715,12 +575,7 @@ impl std::fmt::Display for Coloncolon {\n     }\n }\n impl AstToken for Coloncolon {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            COLONCOLON => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == COLONCOLON }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -740,12 +595,7 @@ impl std::fmt::Display for Eq {\n     }\n }\n impl AstToken for Eq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -765,12 +615,7 @@ impl std::fmt::Display for Eqeq {\n     }\n }\n impl AstToken for Eqeq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EQEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EQEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -790,12 +635,7 @@ impl std::fmt::Display for FatArrow {\n     }\n }\n impl AstToken for FatArrow {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FAT_ARROW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FAT_ARROW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -815,12 +655,7 @@ impl std::fmt::Display for Excl {\n     }\n }\n impl AstToken for Excl {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXCL => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXCL }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -840,12 +675,7 @@ impl std::fmt::Display for Neq {\n     }\n }\n impl AstToken for Neq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -865,12 +695,7 @@ impl std::fmt::Display for Minus {\n     }\n }\n impl AstToken for Minus {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MINUS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MINUS }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -890,12 +715,7 @@ impl std::fmt::Display for ThinArrow {\n     }\n }\n impl AstToken for ThinArrow {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            THIN_ARROW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == THIN_ARROW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -915,12 +735,7 @@ impl std::fmt::Display for Lteq {\n     }\n }\n impl AstToken for Lteq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LTEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LTEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -940,12 +755,7 @@ impl std::fmt::Display for Gteq {\n     }\n }\n impl AstToken for Gteq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            GTEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == GTEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -965,12 +775,7 @@ impl std::fmt::Display for Pluseq {\n     }\n }\n impl AstToken for Pluseq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PLUSEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PLUSEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -990,12 +795,7 @@ impl std::fmt::Display for Minuseq {\n     }\n }\n impl AstToken for Minuseq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MINUSEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MINUSEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1015,12 +815,7 @@ impl std::fmt::Display for Pipeeq {\n     }\n }\n impl AstToken for Pipeeq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PIPEEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPEEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1040,12 +835,7 @@ impl std::fmt::Display for Ampeq {\n     }\n }\n impl AstToken for Ampeq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AMPEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AMPEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1065,12 +855,7 @@ impl std::fmt::Display for Careteq {\n     }\n }\n impl AstToken for Careteq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CARETEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CARETEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1090,12 +875,7 @@ impl std::fmt::Display for Slasheq {\n     }\n }\n impl AstToken for Slasheq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SLASHEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SLASHEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1115,12 +895,7 @@ impl std::fmt::Display for Stareq {\n     }\n }\n impl AstToken for Stareq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STAREQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STAREQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1140,12 +915,7 @@ impl std::fmt::Display for Percenteq {\n     }\n }\n impl AstToken for Percenteq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PERCENTEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PERCENTEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1165,12 +935,7 @@ impl std::fmt::Display for Ampamp {\n     }\n }\n impl AstToken for Ampamp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AMPAMP => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AMPAMP }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1190,12 +955,7 @@ impl std::fmt::Display for Pipepipe {\n     }\n }\n impl AstToken for Pipepipe {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PIPEPIPE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPEPIPE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1215,12 +975,7 @@ impl std::fmt::Display for Shl {\n     }\n }\n impl AstToken for Shl {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SHL => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SHL }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1240,12 +995,7 @@ impl std::fmt::Display for Shr {\n     }\n }\n impl AstToken for Shr {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SHR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SHR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1265,12 +1015,7 @@ impl std::fmt::Display for Shleq {\n     }\n }\n impl AstToken for Shleq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SHLEQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SHLEQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1290,12 +1035,7 @@ impl std::fmt::Display for Shreq {\n     }\n }\n impl AstToken for Shreq {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SHREQ => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SHREQ }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1315,12 +1055,7 @@ impl std::fmt::Display for AsKw {\n     }\n }\n impl AstToken for AsKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AS_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AS_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1340,12 +1075,7 @@ impl std::fmt::Display for AsyncKw {\n     }\n }\n impl AstToken for AsyncKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ASYNC_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ASYNC_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1365,12 +1095,7 @@ impl std::fmt::Display for AwaitKw {\n     }\n }\n impl AstToken for AwaitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AWAIT_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AWAIT_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1390,12 +1115,7 @@ impl std::fmt::Display for BoxKw {\n     }\n }\n impl AstToken for BoxKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BOX_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1415,12 +1135,7 @@ impl std::fmt::Display for BreakKw {\n     }\n }\n impl AstToken for BreakKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BREAK_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BREAK_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1440,12 +1155,7 @@ impl std::fmt::Display for ConstKw {\n     }\n }\n impl AstToken for ConstKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1465,12 +1175,7 @@ impl std::fmt::Display for ContinueKw {\n     }\n }\n impl AstToken for ContinueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONTINUE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1490,12 +1195,7 @@ impl std::fmt::Display for CrateKw {\n     }\n }\n impl AstToken for CrateKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CRATE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CRATE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1515,12 +1215,7 @@ impl std::fmt::Display for DynKw {\n     }\n }\n impl AstToken for DynKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DYN_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DYN_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1539,13 +1234,8 @@ impl std::fmt::Display for ElseKw {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for ElseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ELSE_KW => true,\n-            _ => false,\n-        }\n-    }\n+impl AstToken for ElseKw {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ELSE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1565,12 +1255,7 @@ impl std::fmt::Display for EnumKw {\n     }\n }\n impl AstToken for EnumKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1590,12 +1275,7 @@ impl std::fmt::Display for ExternKw {\n     }\n }\n impl AstToken for ExternKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXTERN_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1615,12 +1295,7 @@ impl std::fmt::Display for FalseKw {\n     }\n }\n impl AstToken for FalseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FALSE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FALSE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1640,12 +1315,7 @@ impl std::fmt::Display for FnKw {\n     }\n }\n impl AstToken for FnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FN_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FN_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1665,12 +1335,7 @@ impl std::fmt::Display for ForKw {\n     }\n }\n impl AstToken for ForKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FOR_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1690,12 +1355,7 @@ impl std::fmt::Display for IfKw {\n     }\n }\n impl AstToken for IfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IF_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IF_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1715,12 +1375,7 @@ impl std::fmt::Display for ImplKw {\n     }\n }\n impl AstToken for ImplKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IMPL_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1740,12 +1395,7 @@ impl std::fmt::Display for InKw {\n     }\n }\n impl AstToken for InKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IN_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IN_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1765,12 +1415,7 @@ impl std::fmt::Display for LetKw {\n     }\n }\n impl AstToken for LetKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LET_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1790,12 +1435,7 @@ impl std::fmt::Display for LoopKw {\n     }\n }\n impl AstToken for LoopKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LOOP_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1815,12 +1455,7 @@ impl std::fmt::Display for MacroKw {\n     }\n }\n impl AstToken for MacroKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1840,12 +1475,7 @@ impl std::fmt::Display for MatchKw {\n     }\n }\n impl AstToken for MatchKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MATCH_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1865,12 +1495,7 @@ impl std::fmt::Display for ModKw {\n     }\n }\n impl AstToken for ModKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MOD_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MOD_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1890,12 +1515,7 @@ impl std::fmt::Display for MoveKw {\n     }\n }\n impl AstToken for MoveKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MOVE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MOVE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1915,12 +1535,7 @@ impl std::fmt::Display for MutKw {\n     }\n }\n impl AstToken for MutKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MUT_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MUT_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1940,12 +1555,7 @@ impl std::fmt::Display for PubKw {\n     }\n }\n impl AstToken for PubKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PUB_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PUB_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1965,12 +1575,7 @@ impl std::fmt::Display for RefKw {\n     }\n }\n impl AstToken for RefKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            REF_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == REF_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1990,12 +1595,7 @@ impl std::fmt::Display for ReturnKw {\n     }\n }\n impl AstToken for ReturnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RETURN_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2015,12 +1615,7 @@ impl std::fmt::Display for SelfKw {\n     }\n }\n impl AstToken for SelfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SELF_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2040,12 +1635,7 @@ impl std::fmt::Display for StaticKw {\n     }\n }\n impl AstToken for StaticKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STATIC_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2065,12 +1655,7 @@ impl std::fmt::Display for StructKw {\n     }\n }\n impl AstToken for StructKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STRUCT_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2090,12 +1675,7 @@ impl std::fmt::Display for SuperKw {\n     }\n }\n impl AstToken for SuperKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SUPER_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SUPER_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2115,12 +1695,7 @@ impl std::fmt::Display for TraitKw {\n     }\n }\n impl AstToken for TraitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRAIT_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2140,12 +1715,7 @@ impl std::fmt::Display for TrueKw {\n     }\n }\n impl AstToken for TrueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRUE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRUE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2165,12 +1735,7 @@ impl std::fmt::Display for TryKw {\n     }\n }\n impl AstToken for TryKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TRY_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2190,12 +1755,7 @@ impl std::fmt::Display for TypeKw {\n     }\n }\n impl AstToken for TypeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2215,12 +1775,7 @@ impl std::fmt::Display for UnsafeKw {\n     }\n }\n impl AstToken for UnsafeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            UNSAFE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNSAFE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2240,12 +1795,7 @@ impl std::fmt::Display for UseKw {\n     }\n }\n impl AstToken for UseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            USE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2265,12 +1815,7 @@ impl std::fmt::Display for WhereKw {\n     }\n }\n impl AstToken for WhereKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHERE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2290,12 +1835,7 @@ impl std::fmt::Display for WhileKw {\n     }\n }\n impl AstToken for WhileKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHILE_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHILE_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2315,12 +1855,7 @@ impl std::fmt::Display for AutoKw {\n     }\n }\n impl AstToken for AutoKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            AUTO_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == AUTO_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2340,12 +1875,7 @@ impl std::fmt::Display for DefaultKw {\n     }\n }\n impl AstToken for DefaultKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DEFAULT_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == DEFAULT_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2365,12 +1895,7 @@ impl std::fmt::Display for ExistentialKw {\n     }\n }\n impl AstToken for ExistentialKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            EXISTENTIAL_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXISTENTIAL_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2390,12 +1915,7 @@ impl std::fmt::Display for UnionKw {\n     }\n }\n impl AstToken for UnionKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            UNION_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2415,12 +1935,7 @@ impl std::fmt::Display for RawKw {\n     }\n }\n impl AstToken for RawKw {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RAW_KW => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_KW }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2440,12 +1955,7 @@ impl std::fmt::Display for IntNumber {\n     }\n }\n impl AstToken for IntNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            INT_NUMBER => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == INT_NUMBER }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2465,12 +1975,7 @@ impl std::fmt::Display for FloatNumber {\n     }\n }\n impl AstToken for FloatNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FLOAT_NUMBER => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2490,12 +1995,7 @@ impl std::fmt::Display for Char {\n     }\n }\n impl AstToken for Char {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CHAR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CHAR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2515,12 +2015,7 @@ impl std::fmt::Display for Byte {\n     }\n }\n impl AstToken for Byte {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BYTE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2540,12 +2035,7 @@ impl std::fmt::Display for String {\n     }\n }\n impl AstToken for String {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            STRING => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2565,12 +2055,7 @@ impl std::fmt::Display for RawString {\n     }\n }\n impl AstToken for RawString {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RAW_STRING => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2590,12 +2075,7 @@ impl std::fmt::Display for ByteString {\n     }\n }\n impl AstToken for ByteString {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            BYTE_STRING => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE_STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2615,12 +2095,7 @@ impl std::fmt::Display for RawByteString {\n     }\n }\n impl AstToken for RawByteString {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RAW_BYTE_STRING => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_BYTE_STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2640,12 +2115,7 @@ impl std::fmt::Display for Error {\n     }\n }\n impl AstToken for Error {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ERROR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ERROR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2665,12 +2135,7 @@ impl std::fmt::Display for Ident {\n     }\n }\n impl AstToken for Ident {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IDENT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IDENT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2690,12 +2155,7 @@ impl std::fmt::Display for Whitespace {\n     }\n }\n impl AstToken for Whitespace {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            WHITESPACE => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHITESPACE }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2715,12 +2175,7 @@ impl std::fmt::Display for Lifetime {\n     }\n }\n impl AstToken for Lifetime {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LIFETIME => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2740,12 +2195,7 @@ impl std::fmt::Display for Comment {\n     }\n }\n impl AstToken for Comment {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            COMMENT => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == COMMENT }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2765,12 +2215,7 @@ impl std::fmt::Display for Shebang {\n     }\n }\n impl AstToken for Shebang {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SHEBANG => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SHEBANG }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2790,12 +2235,7 @@ impl std::fmt::Display for LDollar {\n     }\n }\n impl AstToken for LDollar {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_DOLLAR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == L_DOLLAR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2815,12 +2255,7 @@ impl std::fmt::Display for RDollar {\n     }\n }\n impl AstToken for RDollar {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_DOLLAR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == R_DOLLAR }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "f9a50c5b97c5777dcc472de294ec114652a1139c", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9285cbffb66e1c497469fedc5c181b7f295742fd/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285cbffb66e1c497469fedc5c181b7f295742fd/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=9285cbffb66e1c497469fedc5c181b7f295742fd", "patch": "@@ -75,12 +75,7 @@ fn generate_tokens(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n             }\n \n             impl AstToken for #name {\n-                fn can_cast(kind: SyntaxKind) -> bool {\n-                    match kind {\n-                        #kind => true,\n-                        _ => false,\n-                    }\n-                }\n+                fn can_cast(kind: SyntaxKind) -> bool { kind == #kind }\n                 fn cast(syntax: SyntaxToken) -> Option<Self> {\n                     if Self::can_cast(syntax.kind()) { Some(Self { syntax }) } else { None }\n                 }\n@@ -243,10 +238,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n \n             impl AstNode for #name {\n                 fn can_cast(kind: SyntaxKind) -> bool {\n-                    match kind {\n-                        #kind => true,\n-                        _ => false,\n-                    }\n+                    kind == #kind\n                 }\n                 fn cast(syntax: SyntaxNode) -> Option<Self> {\n                     if Self::can_cast(syntax.kind()) { Some(Self { syntax }) } else { None }"}]}