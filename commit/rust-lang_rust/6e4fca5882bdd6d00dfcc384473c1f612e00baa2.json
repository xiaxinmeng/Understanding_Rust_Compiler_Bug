{"sha": "6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNGZjYTU4ODJiZGQ2ZDAwZGZjYzM4NDQ3M2MxZjYxMmUwMGJhYTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-08T11:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T11:29:35Z"}, "message": "Merge #4773\n\n4773: Run|Debug hover actions. r=matklad a=vsrs\n\n![hover_actions_run](https://user-images.githubusercontent.com/62505555/83335644-dfc1f780-a2b6-11ea-820b-ccaa82290e7d.gif)\r\n\r\nThis hover actions work exactly like corresponding lenses.\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "07fd36fde432cc8d42d23408a67133422a94fedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fd36fde432cc8d42d23408a67133422a94fedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3iEfCRBK7hj4Ov3rIwAAdHIIABgOcpZV0id7YRW431/iqH5o\nGNp8r9tf8YFt4o/6tOVejkySCCJIlAMBMLD31iw1Rswc7lYF23FxGkfyZgkB4Rmf\nV+hSMYffKQejP7JZPcLdlQ3oO77yZ5rdk/gDNVe230O0AL/J9cO+BQiIYMDQldU9\nTpowedWCmIm1Fc44sE1Wmke5bJY/ErFDgd6SawPoII7XrICdQA/2CaL/jXiXCpEV\n5xl+UXue+o26xEKXY7RGsOuFFOXb197VdnzBl5TUrWhcRbLlb+MaWPspZyL0i5Cd\nGbzJ/s3XRu8egWDWwx3nHk25zCGjRRqeNNDGeXYh2FuW2u0Wh0KObMs4FhByceQ=\n=ySsL\n-----END PGP SIGNATURE-----\n", "payload": "tree 07fd36fde432cc8d42d23408a67133422a94fedb\nparent a5f427ced3ee0ec27041f0b7632b4baae6a736b2\nparent b7db9f058ad51b7ba47db02b581a76b6756d74e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591615775 +0000\ncommitter GitHub <noreply@github.com> 1591615775 +0000\n\nMerge #4773\n\n4773: Run|Debug hover actions. r=matklad a=vsrs\n\n![hover_actions_run](https://user-images.githubusercontent.com/62505555/83335644-dfc1f780-a2b6-11ea-820b-ccaa82290e7d.gif)\r\n\r\nThis hover actions work exactly like corresponding lenses.\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "html_url": "https://github.com/rust-lang/rust/commit/6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f427ced3ee0ec27041f0b7632b4baae6a736b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f427ced3ee0ec27041f0b7632b4baae6a736b2", "html_url": "https://github.com/rust-lang/rust/commit/a5f427ced3ee0ec27041f0b7632b4baae6a736b2"}, {"sha": "b7db9f058ad51b7ba47db02b581a76b6756d74e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db9f058ad51b7ba47db02b581a76b6756d74e8", "html_url": "https://github.com/rust-lang/rust/commit/b7db9f058ad51b7ba47db02b581a76b6756d74e8"}], "stats": {"total": 380, "additions": 312, "deletions": 68}, "files": [{"sha": "ad78b767120c1c34cf4961881372a0a000b1a46c", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 138, "deletions": 4, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -14,34 +14,43 @@ use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffs\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav},\n-    FilePosition, NavigationTarget, RangeInfo,\n+    runnables::runnable,\n+    FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n+use test_utils::mark;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n     pub implementations: bool,\n+    pub run: bool,\n+    pub debug: bool,\n }\n \n impl Default for HoverConfig {\n     fn default() -> Self {\n-        Self { implementations: true }\n+        Self { implementations: true, run: true, debug: true }\n     }\n }\n \n impl HoverConfig {\n-    pub const NO_ACTIONS: Self = Self { implementations: false };\n+    pub const NO_ACTIONS: Self = Self { implementations: false, run: false, debug: false };\n \n     pub fn any(&self) -> bool {\n-        self.implementations\n+        self.implementations || self.runnable()\n     }\n \n     pub fn none(&self) -> bool {\n         !self.any()\n     }\n+\n+    pub fn runnable(&self) -> bool {\n+        self.run || self.debug\n+    }\n }\n \n #[derive(Debug, Clone)]\n pub enum HoverAction {\n+    Runnable(Runnable),\n     Implementaion(FilePosition),\n }\n \n@@ -125,6 +134,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 res.push_action(action);\n             }\n \n+            if let Some(action) = runnable_action(&sema, name_kind, position.file_id) {\n+                res.push_action(action);\n+            }\n+\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -175,6 +188,36 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n     }\n }\n \n+fn runnable_action(\n+    sema: &Semantics<RootDatabase>,\n+    def: Definition,\n+    file_id: FileId,\n+) -> Option<HoverAction> {\n+    match def {\n+        Definition::ModuleDef(it) => match it {\n+            ModuleDef::Module(it) => match it.definition_source(sema.db).value {\n+                ModuleSource::Module(it) => runnable(&sema, it.syntax().clone(), file_id)\n+                    .map(|it| HoverAction::Runnable(it)),\n+                _ => None,\n+            },\n+            ModuleDef::Function(it) => {\n+                let src = it.source(sema.db);\n+                if src.file_id != file_id.into() {\n+                    mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n+                    mark::hit!(hover_macro_generated_struct_fn_doc_attr);\n+\n+                    return None;\n+                }\n+\n+                runnable(&sema, src.value.syntax().clone(), file_id)\n+                    .map(|it| HoverAction::Runnable(it))\n+            }\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n fn hover_text(\n     docs: Option<String>,\n     desc: Option<String>,\n@@ -292,6 +335,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use insta::assert_debug_snapshot;\n \n     use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n@@ -309,6 +353,7 @@ mod tests {\n     fn assert_impl_action(action: &HoverAction, position: u32) {\n         let offset = match action {\n             HoverAction::Implementaion(pos) => pos.offset,\n+            it => panic!(\"Unexpected hover action: {:#?}\", it),\n         };\n         assert_eq!(offset, position.into());\n     }\n@@ -1076,6 +1121,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_comment() {\n+        mark::check!(hover_macro_generated_struct_fn_doc_comment);\n+\n         check_hover_result(\n             r#\"\n             //- /lib.rs\n@@ -1102,6 +1149,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_attr() {\n+        mark::check!(hover_macro_generated_struct_fn_doc_attr);\n+\n         check_hover_result(\n             r#\"\n             //- /lib.rs\n@@ -1176,4 +1225,89 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         assert_impl_action(&actions[0], 5);\n     }\n+\n+    #[test]\n+    fn test_hover_test_has_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            #[test]\n+            fn foo_<|>test() {}\n+            \",\n+            &[\"fn foo_test()\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                Runnable(\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..24,\n+                            name: \"foo_test\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                11..19,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_test_mod_has_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            mod tests<|> {\n+                #[test]\n+                fn foo_test() {}\n+            }\n+            \",\n+            &[\"mod tests\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                Runnable(\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..46,\n+                            name: \"tests\",\n+                            kind: MODULE,\n+                            focus_range: Some(\n+                                4..9,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"tests\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ),\n+            ]\n+            \"###);\n+    }\n }"}, {"sha": "fc57dc33d78d7af0bd6b1bba2f9b9f048e96b004", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -11,14 +11,14 @@ use ra_syntax::{\n \n use crate::{display::ToNav, FileId, NavigationTarget};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct Runnable {\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg_exprs: Vec<CfgExpr>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum TestId {\n     Name(String),\n     Path(String),\n@@ -33,7 +33,7 @@ impl fmt::Display for TestId {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n@@ -42,6 +42,42 @@ pub enum RunnableKind {\n     Bin,\n }\n \n+#[derive(Debug, Eq, PartialEq)]\n+pub struct RunnableAction {\n+    pub run_title: &'static str,\n+    pub debugee: bool,\n+}\n+\n+const TEST: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Test\", debugee: true };\n+const DOCTEST: RunnableAction =\n+    RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Doctest\", debugee: false };\n+const BENCH: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Bench\", debugee: true };\n+const BIN: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run\", debugee: true };\n+\n+impl Runnable {\n+    // test package::module::testname\n+    pub fn label(&self, target: Option<String>) -> String {\n+        match &self.kind {\n+            RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n+            RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n+            RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n+            RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n+            RunnableKind::Bin => {\n+                target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n+            }\n+        }\n+    }\n+\n+    pub fn action(&self) -> &'static RunnableAction {\n+        match &self.kind {\n+            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => &TEST,\n+            RunnableKind::DocTest { .. } => &DOCTEST,\n+            RunnableKind::Bench { .. } => &BENCH,\n+            RunnableKind::Bin => &BIN,\n+        }\n+    }\n+}\n+\n // Feature: Run\n //\n // Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n@@ -59,7 +95,11 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     source_file.syntax().descendants().filter_map(|i| runnable(&sema, i, file_id)).collect()\n }\n \n-fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode, file_id: FileId) -> Option<Runnable> {\n+pub(crate) fn runnable(\n+    sema: &Semantics<RootDatabase>,\n+    item: SyntaxNode,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n     match_ast! {\n         match item {\n             ast::FnDef(it) => runnable_fn(sema, it, file_id),\n@@ -135,7 +175,7 @@ fn runnable_fn(\n     Some(Runnable { nav, kind, cfg_exprs })\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Copy, Clone)]\n pub struct TestAttr {\n     pub ignore: bool,\n }\n@@ -207,6 +247,15 @@ mod tests {\n \n     use crate::mock_analysis::analysis_and_position;\n \n+    use super::{Runnable, RunnableAction, BENCH, BIN, DOCTEST, TEST};\n+\n+    fn assert_actions(runnables: &[Runnable], actions: &[&RunnableAction]) {\n+        assert_eq!(\n+            actions,\n+            runnables.into_iter().map(|it| it.action()).collect::<Vec<_>>().as_slice()\n+        );\n+    }\n+\n     #[test]\n     fn test_runnables() {\n         let (analysis, pos) = analysis_and_position(\n@@ -221,6 +270,9 @@ mod tests {\n         #[test]\n         #[ignore]\n         fn test_foo() {}\n+\n+        #[bench]\n+        fn bench() {}\n         \"#,\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n@@ -295,9 +347,32 @@ mod tests {\n                 },\n                 cfg_exprs: [],\n             },\n+            Runnable {\n+                nav: NavigationTarget {\n+                    file_id: FileId(\n+                        1,\n+                    ),\n+                    full_range: 82..104,\n+                    name: \"bench\",\n+                    kind: FN_DEF,\n+                    focus_range: Some(\n+                        94..99,\n+                    ),\n+                    container_name: None,\n+                    description: None,\n+                    docs: None,\n+                },\n+                kind: Bench {\n+                    test_id: Path(\n+                        \"bench\",\n+                    ),\n+                },\n+                cfg_exprs: [],\n+            },\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &TEST, &TEST, &BENCH]);\n     }\n \n     #[test]\n@@ -361,6 +436,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n@@ -427,6 +503,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n@@ -493,6 +570,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -561,6 +639,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -631,6 +710,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -681,6 +761,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST]);\n     }\n \n     #[test]\n@@ -739,6 +820,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST]);\n     }\n \n     #[test]"}, {"sha": "17671f89ee415db0bef17dff04d848e75e846906", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -285,6 +285,8 @@ impl Config {\n         set(value, \"/hoverActions/enable\", &mut use_hover_actions);\n         if use_hover_actions {\n             set(value, \"/hoverActions/implementations\", &mut self.hover.implementations);\n+            set(value, \"/hoverActions/run\", &mut self.hover.run);\n+            set(value, \"/hoverActions/debug\", &mut self.hover.debug);\n         } else {\n             self.hover = HoverConfig::NO_ACTIONS;\n         }"}, {"sha": "a41adf8b0b51bad07b767c436bdabe4d6e8ee721", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 73, "deletions": 49, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -18,8 +18,8 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, RunnableKind, SearchScope,\n-    TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind,\n+    SearchScope, TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -404,15 +404,10 @@ pub fn handle_runnables(\n                 continue;\n             }\n         }\n-        // Do not suggest binary run on other target than binary\n-        if let RunnableKind::Bin = runnable.kind {\n-            if let Some(spec) = &cargo_spec {\n-                match spec.target_kind {\n-                    TargetKind::Bin => {}\n-                    _ => continue,\n-                }\n-            }\n+        if should_skip_target(&runnable, cargo_spec.as_ref()) {\n+            continue;\n         }\n+\n         res.push(to_proto::runnable(&snap, file_id, runnable)?);\n     }\n \n@@ -555,7 +550,7 @@ pub fn handle_hover(\n             }),\n             range: Some(range),\n         },\n-        actions: prepare_hover_actions(&snap, info.info.actions()),\n+        actions: prepare_hover_actions(&snap, position.file_id, info.info.actions()),\n     };\n \n     Ok(Some(hover))\n@@ -817,55 +812,25 @@ pub fn handle_code_lens(\n     if snap.config.lens.runnable() {\n         // Gather runnables\n         for runnable in snap.analysis().runnables(file_id)? {\n-            let (run_title, debugee) = match &runnable.kind {\n-                RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => {\n-                    (\"\u25b6\\u{fe0e} Run Test\", true)\n-                }\n-                RunnableKind::DocTest { .. } => {\n-                    // cargo does not support -no-run for doctests\n-                    (\"\u25b6\\u{fe0e} Run Doctest\", false)\n-                }\n-                RunnableKind::Bench { .. } => {\n-                    // Nothing wrong with bench debugging\n-                    (\"Run Bench\", true)\n-                }\n-                RunnableKind::Bin => {\n-                    // Do not suggest binary run on other target than binary\n-                    match &cargo_spec {\n-                        Some(spec) => match spec.target_kind {\n-                            TargetKind::Bin => (\"Run\", true),\n-                            _ => continue,\n-                        },\n-                        None => continue,\n-                    }\n-                }\n-            };\n+            if should_skip_target(&runnable, cargo_spec.as_ref()) {\n+                continue;\n+            }\n \n+            let action = runnable.action();\n             let range = to_proto::range(&line_index, runnable.nav.range());\n             let r = to_proto::runnable(&snap, file_id, runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {\n                     range,\n-                    command: Some(Command {\n-                        title: run_title.to_string(),\n-                        command: \"rust-analyzer.runSingle\".into(),\n-                        arguments: Some(vec![to_value(&r).unwrap()]),\n-                    }),\n+                    command: Some(run_single_command(&r, action.run_title)),\n                     data: None,\n                 };\n                 lenses.push(lens);\n             }\n \n-            if debugee && snap.config.lens.debug {\n-                let debug_lens = CodeLens {\n-                    range,\n-                    command: Some(Command {\n-                        title: \"Debug\".into(),\n-                        command: \"rust-analyzer.debugSingle\".into(),\n-                        arguments: Some(vec![to_value(r).unwrap()]),\n-                    }),\n-                    data: None,\n-                };\n+            if action.debugee && snap.config.lens.debug {\n+                let debug_lens =\n+                    CodeLens { range, command: Some(debug_single_command(&r)), data: None };\n                 lenses.push(debug_lens);\n             }\n         }\n@@ -1169,6 +1134,22 @@ fn show_references_command(\n     }\n }\n \n+fn run_single_command(runnable: &lsp_ext::Runnable, title: &str) -> Command {\n+    Command {\n+        title: title.to_string(),\n+        command: \"rust-analyzer.runSingle\".into(),\n+        arguments: Some(vec![to_value(runnable).unwrap()]),\n+    }\n+}\n+\n+fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n+    Command {\n+        title: \"Debug\".into(),\n+        command: \"rust-analyzer.debugSingle\".into(),\n+        arguments: Some(vec![to_value(runnable).unwrap()]),\n+    }\n+}\n+\n fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n@@ -1199,8 +1180,37 @@ fn show_impl_command_link(\n     None\n }\n \n+fn to_runnable_action(\n+    snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n+    runnable: Runnable,\n+) -> Option<lsp_ext::CommandLinkGroup> {\n+    let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n+    if should_skip_target(&runnable, cargo_spec.as_ref()) {\n+        return None;\n+    }\n+\n+    let action: &'static _ = runnable.action();\n+    to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n+        let mut group = lsp_ext::CommandLinkGroup::default();\n+\n+        if snap.config.hover.run {\n+            let run_command = run_single_command(&r, action.run_title);\n+            group.commands.push(to_command_link(run_command, r.label.clone()));\n+        }\n+\n+        if snap.config.hover.debug {\n+            let dbg_command = debug_single_command(&r);\n+            group.commands.push(to_command_link(dbg_command, r.label));\n+        }\n+\n+        group\n+    })\n+}\n+\n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover.none() || !snap.config.client_caps.hover_actions {\n@@ -1211,6 +1221,20 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n+            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r.clone()),\n         })\n         .collect()\n }\n+\n+fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>) -> bool {\n+    match runnable.kind {\n+        RunnableKind::Bin => {\n+            // Do not suggest binary run on other target than binary\n+            match &cargo_spec {\n+                Some(spec) => spec.target_kind != TargetKind::Bin,\n+                None => true,\n+            }\n+        }\n+        _ => false,\n+    }\n+}"}, {"sha": "710df1fbdec4e7d3e530b8c2d64fbe083bd5641e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -4,7 +4,7 @@ use ra_ide::{\n     Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n     FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n     InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n-    ResolvedAssist, Runnable, RunnableKind, Severity, SourceChange, SourceFileEdit, TextEdit,\n+    ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_vfs::LineEndings;\n@@ -662,15 +662,7 @@ pub(crate) fn runnable(\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n         CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.cfg_exprs)?;\n-    let label = match &runnable.kind {\n-        RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n-        RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-        RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n-        RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n-        RunnableKind::Bin => {\n-            target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n-        }\n-    };\n+    let label = runnable.label(target);\n     let location = location_link(snap, None, runnable.nav)?;\n \n     Ok(lsp_ext::Runnable {"}, {"sha": "779d7e1b87164f20c5c81d12386e0b80ef3370f8", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6e4fca5882bdd6d00dfcc384473c1f612e00baa2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6e4fca5882bdd6d00dfcc384473c1f612e00baa2", "patch": "@@ -486,6 +486,16 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.hoverActions.run\": {\n+                    \"markdownDescription\": \"Whether to show `Run` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.hoverActions.debug\": {\n+                    \"markdownDescription\": \"Whether to show `Debug` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n                 \"rust-analyzer.linkedProjects\": {\n                     \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.  \\nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format\",\n                     \"type\": \"array\","}]}