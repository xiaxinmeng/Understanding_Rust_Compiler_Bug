{"sha": "d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "node_id": "C_kwDOAAsO6NoAKGQ3MDQ5Y2FiZDBhMzcwYWM1YWY4YjRmMDNjZTgzNmIzZjkzODRkOTg", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-01T13:47:55Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:20:32Z"}, "message": "add the --json flag to compiletest", "tree": {"sha": "4b303a63e64a15293ab1bdf58e1dd47a3446879f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b303a63e64a15293ab1bdf58e1dd47a3446879f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAvsAACgkQzXazX3c0\ndp6jeg/9FlLYMDzy+VD3We5YcOHSuVxKvIvg1uW93X6nxfDHuD1ZbbboBzOua6bc\n3zuC5dFyvbI7n0qlAMvXfx9dX3gC0+62Isowd2UpDATDkoqzxZBKfGDqF1t5+oqu\njelGdHSadhB9JpgSSpPhXnEcU0Yf42byvk/dOEqN612nv9Gr2PlDQED4odsgeXoj\nvMrwFIPSwk1ipW/tIWolACxGz45ZINxGXFDtzP/OW9RmN9VhiXf9EJPxwvJeZMe2\nn1DAGtcm0KJuC/rd648V1L3WsaZvsQS0M6xsXQ/udUTH36K5FIbAWfQmuJ2we3Fv\nY3jv6Jddd5ducIzmR+DPX/4s6LW2w9O+ar9ojSAFfxOf4H2+OQeUqa6PWA5Xwnj3\n5Par2MribkxfddyhDvG8NUvdNbV8+ZSsb4sehRHSb2fB6zQ0khsFWymsT1/Csn2U\nwoa4A/lZyyuUuBjboe8uflkEyrAaeCOofrOgCuG6ISiNKywI9+w7VKHmO5tXdtTC\nDYSxn7NY+CRknNxadX4cZWjrE3UxVW7OF/JXV7OSIasBFjzcoqYOXDDEcUCZpFxM\nhx1yWwlpL3qewTg/Ql7eDnSxCIbLy11jUoEJpzfuaIyc2oFDUb4/FEfGU+stYDhJ\nI/zgf5uSkaVNlw3BBOM5qncVqABh8HQmbbZouBE1z8E1E3ZjH4g=\n=CAdz\n-----END PGP SIGNATURE-----", "payload": "tree 4b303a63e64a15293ab1bdf58e1dd47a3446879f\nparent 64165aac68af780182ff89a6eb3982e3c262266e\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677678475 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677770432 +0100\n\nadd the --json flag to compiletest\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "html_url": "https://github.com/rust-lang/rust/commit/d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7049cabd0a370ac5af8b4f03ce836b3f9384d98/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64165aac68af780182ff89a6eb3982e3c262266e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64165aac68af780182ff89a6eb3982e3c262266e", "html_url": "https://github.com/rust-lang/rust/commit/64165aac68af780182ff89a6eb3982e3c262266e"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "7691f5c32b21e562286e6e382fe6ed459e807b29", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7049cabd0a370ac5af8b4f03ce836b3f9384d98/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7049cabd0a370ac5af8b4f03ce836b3f9384d98/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "patch": "@@ -9,7 +9,7 @@ use std::str::FromStr;\n \n use crate::util::{add_dylib_path, PathBufExt};\n use lazycell::LazyCell;\n-use test::ColorConfig;\n+use test::{ColorConfig, OutputFormat};\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n@@ -337,7 +337,7 @@ pub struct Config {\n     pub verbose: bool,\n \n     /// Print one character per test instead of one line\n-    pub quiet: bool,\n+    pub format: OutputFormat,\n \n     /// Whether to use colors in test.\n     pub color: ColorConfig,"}, {"sha": "167cd5c5dc170394866ac9c9619227c3a00b0aa2", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7049cabd0a370ac5af8b4f03ce836b3f9384d98/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7049cabd0a370ac5af8b4f03ce836b3f9384d98/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d7049cabd0a370ac5af8b4f03ce836b3f9384d98", "patch": "@@ -114,6 +114,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optflag(\"\", \"quiet\", \"print one character per test instead of one line\")\n         .optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\")\n+        .optflag(\"\", \"json\", \"emit json output instead of plaintext output\")\n         .optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\")\n         .optopt(\"\", \"target\", \"the target to build for\", \"TARGET\")\n         .optopt(\"\", \"host\", \"the host to build for\", \"HOST\")\n@@ -281,7 +282,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             && !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n-        quiet: matches.opt_present(\"quiet\"),\n+        format: match (matches.opt_present(\"quiet\"), matches.opt_present(\"json\")) {\n+            (true, true) => panic!(\"--quiet and --json are incompatible\"),\n+            (true, false) => test::OutputFormat::Terse,\n+            (false, true) => test::OutputFormat::Json,\n+            (false, false) => test::OutputFormat::Pretty,\n+        },\n         only_modified: matches.opt_present(\"only-modified\"),\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n@@ -339,7 +345,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"ar: {}\", config.ar));\n     logv(c, format!(\"linker: {:?}\", config.linker));\n     logv(c, format!(\"verbose: {}\", config.verbose));\n-    logv(c, format!(\"quiet: {}\", config.quiet));\n+    logv(c, format!(\"format: {:?}\", config.format));\n     logv(c, \"\\n\".to_string());\n }\n \n@@ -501,7 +507,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         filters: config.filters.clone(),\n         filter_exact: config.filter_exact,\n         run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n-        format: if config.quiet { test::OutputFormat::Terse } else { test::OutputFormat::Pretty },\n+        format: config.format,\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         bench_benchmarks: true,"}]}