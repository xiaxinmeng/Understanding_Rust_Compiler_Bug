{"sha": "bb8474682366592fa9d52cb11723a5fd5cd9421e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODQ3NDY4MjM2NjU5MmZhOWQ1MmNiMTE3MjNhNWZkNWNkOTQyMWU=", "commit": {"author": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-03T22:27:20Z"}, "committer": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-03T22:27:20Z"}, "message": "AsMut example", "tree": {"sha": "3bc8ff51a70bc09630adb9f33d8701362a60e26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc8ff51a70bc09630adb9f33d8701362a60e26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8474682366592fa9d52cb11723a5fd5cd9421e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8474682366592fa9d52cb11723a5fd5cd9421e", "html_url": "https://github.com/rust-lang/rust/commit/bb8474682366592fa9d52cb11723a5fd5cd9421e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8474682366592fa9d52cb11723a5fd5cd9421e/comments", "author": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79efca10934b3ea0a172db0ab514fdd72ddeacfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/79efca10934b3ea0a172db0ab514fdd72ddeacfb", "html_url": "https://github.com/rust-lang/rust/commit/79efca10934b3ea0a172db0ab514fdd72ddeacfb"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "0bc05506413633c84e55f0391d3b271ee15a9a84", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb8474682366592fa9d52cb11723a5fd5cd9421e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8474682366592fa9d52cb11723a5fd5cd9421e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=bb8474682366592fa9d52cb11723a5fd5cd9421e", "patch": "@@ -91,6 +91,8 @@ use str::FromStr;\n /// [`Path`]: ../../std/path/struct.Path.html\n ///\n /// ```\n+/// use std::path::Path;\n+///\n /// impl AsRef<Path> for str {\n ///     fn as_ref(&self) -> &Path {\n ///         Path::new(self)\n@@ -123,7 +125,8 @@ pub trait AsRef<T: ?Sized> {\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n-/// This trait is similar to `AsRef` but used for converting mutable references.\n+/// This trait is similar to `AsRef` but used for converting between mutable\n+/// references.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n@@ -153,11 +156,13 @@ pub trait AsRef<T: ?Sized> {\n /// assert_eq!(*boxed_num, 1);\n /// ```\n ///\n-/// Implementing `AsMut`:\n+/// `Vec` implements `AsMut` for converting between itself and a primitive array:\n ///\n /// ```\n-/// impl Type {\n-/// let a = 1;\n+/// impl<T> AsMut<[T]> for Vec<T> {\n+///   fn as_mut(&mut self) -> &mut [T] {\n+///     self\n+///   }\n /// }\n /// ```\n ///\n@@ -250,19 +255,22 @@ pub trait Into<T>: Sized {\n /// An example usage for error handling:\n ///\n /// ```\n+/// use std::io::{self, Read};\n+/// use std::num;\n+///\n /// enum CliError {\n ///     IoError(io::Error),\n ///     ParseError(num::ParseIntError),\n /// }\n ///\n-/// impl From<io::Error> for MyError {\n+/// impl From<io::Error> for CliError {\n ///     fn from(error: io::Error) -> Self {\n ///         CliError::IoError(error)\n ///     }\n /// }\n ///\n-/// impl From<num::ParseIntError> for MyError {\n-///     fn from(error: io::Error) -> Self {\n+/// impl From<num::ParseIntError> for CliError {\n+///     fn from(error: num::ParseIntError) -> Self {\n ///         CliError::ParseError(error)\n ///     }\n /// }"}]}