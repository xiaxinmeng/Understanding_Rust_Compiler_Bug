{"sha": "8d0be731f543837251ea10a77499725f91d02560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMGJlNzMxZjU0MzgzNzI1MWVhMTBhNzc0OTk3MjVmOTFkMDI1NjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-26T23:07:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-27T20:08:48Z"}, "message": "doc: Update the tutorial about bounds for traits", "tree": {"sha": "c0e91ccb67077485e84ad2b7f42270ed46598938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e91ccb67077485e84ad2b7f42270ed46598938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d0be731f543837251ea10a77499725f91d02560", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0be731f543837251ea10a77499725f91d02560", "html_url": "https://github.com/rust-lang/rust/commit/8d0be731f543837251ea10a77499725f91d02560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d0be731f543837251ea10a77499725f91d02560/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9172d7b512c36f34d34b024640f030d1fde2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9172d7b512c36f34d34b024640f030d1fde2eb", "html_url": "https://github.com/rust-lang/rust/commit/bb9172d7b512c36f34d34b024640f030d1fde2eb"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "b0d9e3e9802f31b36b47979a3a714c1322cf0acb", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8d0be731f543837251ea10a77499725f91d02560/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d0be731f543837251ea10a77499725f91d02560/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=8d0be731f543837251ea10a77499725f91d02560", "patch": "@@ -2103,7 +2103,7 @@ a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal muta\n These are types that do not contain any data whose lifetime is bound to\n a particular stack frame. These are types that do not contain any\n references, or types where the only contained references\n-have the `'static` lifetime. (For more on named lifetimes and their uses, \n+have the `'static` lifetime. (For more on named lifetimes and their uses,\n see the [references and lifetimes guide][lifetimes].)\n \n > ***Note:*** These two traits were referred to as 'kinds' in earlier\n@@ -2430,23 +2430,25 @@ select the method to call at runtime.\n \n This usage of traits is similar to Java interfaces.\n \n-By default, each of the three storage classes for traits enforce a\n-particular set of built-in kinds that their contents must fulfill in\n-order to be packaged up in a trait object of that storage class.\n+There are some built-in bounds, such as `Send` and `Share`, which are properties\n+of the components of types. By design, trait objects don't know the exact type\n+of their contents and so the compiler cannot reason about those properties.\n \n-* The contents of owned traits (`~Trait`) must fulfill the `Send` bound.\n-* The contents of reference traits (`&Trait`) are not constrained by any bound.\n+You can instruct the compiler, however, that the contents of a trait object must\n+acribe to a particular bound with a trailing colon (`:`). These are examples of\n+valid types:\n \n-Consequently, the trait objects themselves automatically fulfill their\n-respective kind bounds. However, this default behavior can be overridden by\n-specifying a list of bounds on the trait type, for example, by writing `~Trait:`\n-(which indicates that the contents of the owned trait need not fulfill any\n-bounds), or by writing `~Trait:Send+Share`, which indicates that in addition\n-to fulfilling `Send`, contents must also fulfill `Share`, and as a consequence,\n-the trait itself fulfills `Share`.\n+~~~rust\n+trait Foo {}\n+trait Bar<T> {}\n \n-* `~Trait:Send` is equivalent to `~Trait`.\n-* `&Trait:` is equivalent to `&Trait`.\n+fn sendable_foo(f: ~Foo:Send) { /* ... */ }\n+fn shareable_bar<T: Share>(b: &Bar<T>: Share) { /* ... */ }\n+~~~\n+\n+When no colon is specified (such as the type `~Foo`), it is inferred that the\n+value ascribes to no bounds. They must be added manually if any bounds are\n+necessary for usage.\n \n Builtin kind bounds can also be specified on closure types in the same way (for\n example, by writing `fn:Send()`), and the default behaviours are the same as"}, {"sha": "d9d7fbbce9cacf8dfe35410425db3de271c64dbc", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d0be731f543837251ea10a77499725f91d02560/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0be731f543837251ea10a77499725f91d02560/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=8d0be731f543837251ea10a77499725f91d02560", "patch": "@@ -206,8 +206,8 @@ impl rtio::RtioPipe for FileDesc {\n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError> {\n         self.inner_write(buf)\n     }\n-    fn clone(&self) -> ~rtio::RtioPipe {\n-        ~FileDesc { inner: self.inner.clone() } as ~rtio::RtioPipe\n+    fn clone(&self) -> ~rtio::RtioPipe:Send {\n+        ~FileDesc { inner: self.inner.clone() } as ~rtio::RtioPipe:Send\n     }\n }\n "}, {"sha": "d629e5867c983cfbb6c0fcfcd7f22b23b31f1c95", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d0be731f543837251ea10a77499725f91d02560/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0be731f543837251ea10a77499725f91d02560/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=8d0be731f543837251ea10a77499725f91d02560", "patch": "@@ -335,12 +335,12 @@ impl rtio::RtioPipe for UnixStream {\n         Ok(())\n     }\n \n-    fn clone(&self) -> ~rtio::RtioPipe {\n+    fn clone(&self) -> ~rtio::RtioPipe:Send {\n         ~UnixStream {\n             inner: self.inner.clone(),\n             read: None,\n             write: None,\n-        } as ~rtio::RtioPipe\n+        } as ~rtio::RtioPipe:Send\n     }\n }\n \n@@ -383,8 +383,8 @@ impl Drop for UnixListener {\n }\n \n impl rtio::RtioUnixListener for UnixListener {\n-    fn listen(~self) -> IoResult<~rtio::RtioUnixAcceptor> {\n-        self.native_listen().map(|a| ~a as ~rtio::RtioUnixAcceptor)\n+    fn listen(~self) -> IoResult<~rtio::RtioUnixAcceptor:Send> {\n+        self.native_listen().map(|a| ~a as ~rtio::RtioUnixAcceptor:Send)\n     }\n }\n \n@@ -485,8 +485,8 @@ impl UnixAcceptor {\n }\n \n impl rtio::RtioUnixAcceptor for UnixAcceptor {\n-    fn accept(&mut self) -> IoResult<~rtio::RtioPipe> {\n-        self.native_accept().map(|s| ~s as ~rtio::RtioPipe)\n+    fn accept(&mut self) -> IoResult<~rtio::RtioPipe:Send> {\n+        self.native_accept().map(|s| ~s as ~rtio::RtioPipe:Send)\n     }\n }\n "}]}