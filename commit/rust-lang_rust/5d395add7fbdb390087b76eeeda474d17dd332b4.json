{"sha": "5d395add7fbdb390087b76eeeda474d17dd332b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzk1YWRkN2ZiZGIzOTAwODdiNzZlZWVkYTQ3NGQxN2RkMzMyYjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-29T12:10:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-29T12:10:30Z"}, "message": "Rollup merge of #56023 - vorner:doc/atomic-ordering-strip, r=@stjepang\n\natomic::Ordering: Get rid of misleading parts of intro\n\nRemove the parts of atomic::Ordering's intro that wrongly claimed that\nSeqCst prevents all reorderings around it.\n\nCloses #55196\n\nThis is a (minimal) alternative to #55233.\n\nI also wonder if it would be worth adding at least some warnings that atomics are often a footgun/hard to use correctly, similarly like `mem::transmute` or other functions have.", "tree": {"sha": "0498b19f8199ba473566630da393e6943a663907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0498b19f8199ba473566630da393e6943a663907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d395add7fbdb390087b76eeeda474d17dd332b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb/9c2CRBK7hj4Ov3rIwAAdHIIABgfwTdt9JDotmqL7Ip9XL72\nQlC1grC/j3yiBmeyM9LWDNTaHFaPOPQ9VKq1xsg9LuYbluDevXQDd+Je7I3hs34K\nBdtfZZ3mCUQGU796uvt7NJ4FFmUeuhhKFqUaDB1clrri5MSiiySLPq9cw82mGkSz\nhTF4KvoYuC0tjvd1X2nsiHM580bdPWoNJAUY0oPQMikfOBEQtNA8bJ3bN6ePGgG/\nqU2X4/NgXbQF6tHZNn/CDSm1Doei0IdF95R3023K0zU5p4JrCgC4gnvQLjj2CMGi\n69keeukk03dKvqpn++qyXzDyAu6oY/J+vSRwJCbwuaHsDZ/MNDJzCwPeaXD5vdY=\n=qcb3\n-----END PGP SIGNATURE-----\n", "payload": "tree 0498b19f8199ba473566630da393e6943a663907\nparent 8e7a8b81e87e1fa77ea876cb9289f3678e98d798\nparent cc63bd47efe4387982b399e2397adab6ac4030ef\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1543493430 +0100\ncommitter GitHub <noreply@github.com> 1543493430 +0100\n\nRollup merge of #56023 - vorner:doc/atomic-ordering-strip, r=@stjepang\n\natomic::Ordering: Get rid of misleading parts of intro\n\nRemove the parts of atomic::Ordering's intro that wrongly claimed that\nSeqCst prevents all reorderings around it.\n\nCloses #55196\n\nThis is a (minimal) alternative to #55233.\n\nI also wonder if it would be worth adding at least some warnings that atomics are often a footgun/hard to use correctly, similarly like `mem::transmute` or other functions have.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d395add7fbdb390087b76eeeda474d17dd332b4", "html_url": "https://github.com/rust-lang/rust/commit/5d395add7fbdb390087b76eeeda474d17dd332b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d395add7fbdb390087b76eeeda474d17dd332b4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "html_url": "https://github.com/rust-lang/rust/commit/8e7a8b81e87e1fa77ea876cb9289f3678e98d798"}, {"sha": "cc63bd47efe4387982b399e2397adab6ac4030ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc63bd47efe4387982b399e2397adab6ac4030ef", "html_url": "https://github.com/rust-lang/rust/commit/cc63bd47efe4387982b399e2397adab6ac4030ef"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "27eeb045bb196ab4987a0f7877497672525c4ba3", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d395add7fbdb390087b76eeeda474d17dd332b4/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d395add7fbdb390087b76eeeda474d17dd332b4/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5d395add7fbdb390087b76eeeda474d17dd332b4", "patch": "@@ -173,18 +173,20 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n \n /// Atomic memory orderings\n ///\n-/// Memory orderings limit the ways that both the compiler and CPU may reorder\n-/// instructions around atomic operations. At its most restrictive,\n-/// \"sequentially consistent\" atomics allow neither reads nor writes\n-/// to be moved either before or after the atomic operation; on the other end\n-/// \"relaxed\" atomics allow all reorderings.\n+/// Memory orderings specify the way atomic operations synchronize memory.\n+/// In its weakest [`Relaxed`][Ordering::Relaxed], only the memory directly touched by the\n+/// operation is synchronized. On the other hand, a store-load pair of [`SeqCst`][Ordering::SeqCst]\n+/// operations synchronize other memory while additionally preserving a total order of such\n+/// operations across all threads.\n ///\n /// Rust's memory orderings are [the same as\n /// LLVM's](https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n ///\n /// For more information see the [nomicon].\n ///\n /// [nomicon]: ../../../nomicon/atomics.html\n+/// [Ordering::Relaxed]: #variant.Relaxed\n+/// [Ordering::SeqCst]: #variant.SeqCst\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n #[non_exhaustive]\n@@ -234,8 +236,8 @@ pub enum Ordering {\n     /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n     ///\n     /// Notice that in the case of `compare_and_swap`, it is possible that the operation ends up\n-    /// not performing any store and hence it has just `Acquire` ordering. However,\n-    /// `AcqRel` will never perform [`Relaxed`] accesses.\n+    /// not performing any store and hence it has just [`Acquire`] ordering. However,\n+    /// [`AcqRel`][`AcquireRelease`] will never perform [`Relaxed`] accesses.\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///"}]}