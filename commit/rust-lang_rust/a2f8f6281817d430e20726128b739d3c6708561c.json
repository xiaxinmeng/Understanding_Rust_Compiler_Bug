{"sha": "a2f8f6281817d430e20726128b739d3c6708561c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjhmNjI4MTgxN2Q0MzBlMjA3MjYxMjhiNzM5ZDNjNjcwODU2MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-27T18:36:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-27T18:36:32Z"}, "message": "Auto merge of #81335 - thomwiggers:no-panic-shrink-to, r=Mark-Simulacrum\n\nTrying to shrink_to greater than capacity should be no-op\n\nPer the discussion in https://github.com/rust-lang/rust/issues/56431, `shrink_to` shouldn't panic if you try to make a vector shrink to a capacity greater than its current capacity.", "tree": {"sha": "28024be6199a7cc05e20fb034e4dfa94f62632f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28024be6199a7cc05e20fb034e4dfa94f62632f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f8f6281817d430e20726128b739d3c6708561c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8f6281817d430e20726128b739d3c6708561c", "html_url": "https://github.com/rust-lang/rust/commit/a2f8f6281817d430e20726128b739d3c6708561c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8f6281817d430e20726128b739d3c6708561c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613ef740f3f37702728c6324f948d0abd1e9c82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/613ef740f3f37702728c6324f948d0abd1e9c82b", "html_url": "https://github.com/rust-lang/rust/commit/613ef740f3f37702728c6324f948d0abd1e9c82b"}, {"sha": "d069c58e78891d453b0b17adfecd368694fd289f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d069c58e78891d453b0b17adfecd368694fd289f", "html_url": "https://github.com/rust-lang/rust/commit/d069c58e78891d453b0b17adfecd368694fd289f"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "8a36b2af765227f96ad51fd44a9a93aac5e4292d", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -870,8 +870,7 @@ impl<T> BinaryHeap<T> {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///"}, {"sha": "eb8994681937adeff2440ba2975be12db7c9ba12", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -761,8 +761,7 @@ impl<T> VecDeque<T> {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///\n@@ -780,10 +779,9 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n-        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n-\n-        // +1 since the ringbuffer always leaves one space empty\n-        // len + 1 can't overflow for an existing, well-formed ringbuffer.\n+        let min_capacity = cmp::min(min_capacity, self.capacity());\n+        // We don't have to worry about an overflow as neither `self.len()` nor `self.capacity()`\n+        // can ever be `usize::MAX`. +1 as the ringbuffer always leaves one space empty.\n         let target_cap = cmp::max(cmp::max(min_capacity, self.len()) + 1, MINIMUM_CAPACITY + 1)\n             .next_power_of_two();\n "}, {"sha": "9b0b480a7e9258d883aa308b628d6747d3b9e989", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -1036,8 +1036,7 @@ impl String {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///"}, {"sha": "13fcf5207e0c4d78c32ee85d4a6bfb8fa9a38a99", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -321,7 +321,7 @@ mod spec_extend;\n /// ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\n /// and then filling it back up to the same [`len`] should incur no calls to\n /// the allocator. If you wish to free up unused memory, use\n-/// [`shrink_to_fit`].\n+/// [`shrink_to_fit`] or [`shrink_to`].\n ///\n /// [`push`] and [`insert`] will never (re)allocate if the reported capacity is\n /// sufficient. [`push`] and [`insert`] *will* (re)allocate if\n@@ -360,6 +360,7 @@ mod spec_extend;\n /// [`String`]: crate::string::String\n /// [`&str`]: type@str\n /// [`shrink_to_fit`]: Vec::shrink_to_fit\n+/// [`shrink_to`]: Vec::shrink_to\n /// [`capacity`]: Vec::capacity\n /// [`mem::size_of::<T>`]: core::mem::size_of\n /// [`len`]: Vec::len\n@@ -909,10 +910,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n-    /// # Panics\n-    ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///\n@@ -929,7 +927,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n-        self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n+        if self.capacity() > min_capacity {\n+            self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n+        }\n     }\n \n     /// Converts the vector into [`Box<[T]>`][owned slice]."}, {"sha": "28a25572dd83e28c0d1199379e44faa2ab3a70c2", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -658,8 +658,7 @@ where\n     /// down no lower than the supplied limit while maintaining the internal rules\n     /// and possibly leaving some space in accordance with the resize policy.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///\n@@ -679,7 +678,6 @@ where\n     #[inline]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n-        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n         self.base.shrink_to(min_capacity);\n     }\n "}, {"sha": "b08510d6b01ae864573e405bffde1d31108ba96f", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -462,9 +462,7 @@ where\n     /// down no lower than the supplied limit while maintaining the internal rules\n     /// and possibly leaving some space in accordance with the resize policy.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n-    ///\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "21060182d60bc94ec4a4cbd5a057a74116c516b5", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -304,8 +304,7 @@ impl OsString {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n-    /// Panics if the current capacity is smaller than the supplied\n-    /// minimum capacity.\n+    /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n     /// # Examples\n     ///"}, {"sha": "6b0ac78857a0ebcb42349f1340434b3ce1fe3fd9", "filename": "src/test/codegen/vec-shrink-panic.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8f6281817d430e20726128b739d3c6708561c/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8f6281817d430e20726128b739d3c6708561c/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs?ref=a2f8f6281817d430e20726128b739d3c6708561c", "patch": "@@ -26,11 +26,3 @@ pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n     // CHECK-NOT: panic\n     iter.iter().copied().collect()\n }\n-\n-// Sanity-check that we do see a possible panic for an arbitrary `Vec::shrink_to`.\n-// CHECK-LABEL: @shrink_to\n-#[no_mangle]\n-pub fn shrink_to(vec: &mut Vec<u32>) {\n-    // CHECK: panic\n-    vec.shrink_to(42);\n-}"}]}