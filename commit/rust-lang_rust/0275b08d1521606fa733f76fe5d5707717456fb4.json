{"sha": "0275b08d1521606fa733f76fe5d5707717456fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzViMDhkMTUyMTYwNmZhNzMzZjc2ZmU1ZDU3MDc3MTc0NTZmYjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-04T21:54:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-04T21:54:42Z"}, "message": "Merge #5940\n\n5940: Implement \"Replace `impl Trait` function argument with the named generic\" assist. r=matklad a=alekseysidorov\n\nFixes #5085 \n\nCo-authored-by: Aleksei Sidorov <gorthauer87@yandex.ru>", "tree": {"sha": "5af1036e93cd7cdc3425c913a20864d668ecf1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af1036e93cd7cdc3425c913a20864d668ecf1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0275b08d1521606fa733f76fe5d5707717456fb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfUreiCRBK7hj4Ov3rIwAAdHIIAHM5Kd0NJG7qtGL2k3Yvf8hm\nEDS294Hj9LM7ju4SmS620udK4CHuPBKNsxhg33t6kSnFVKRu/ssHKTKUPxbOUIVb\nQNKaUM4MECi7h5eW3hPp+akXkRQJDxhDGzo4BTHkg5ZsiPpQwveG1qB/y+xLXVXh\nN6yyC8kagXtHjGUfgwz+5g162PMZi0NmtfF/T2Gu1Fs1X1XHZbdis13sBTraoF9C\nCoVxBOgoe0+Khiad1HiJMUpI1ijNqIXZiB7qF6FNx4gio9IoU90t+pMzCdmvzSOz\ncLUz2q0FWRZCKwu4Vaxy5hoWrrrJQ5n2BHJ0A3SCr1FPMCwjLQheNM3aV0K0GG0=\n=bcQf\n-----END PGP SIGNATURE-----\n", "payload": "tree 5af1036e93cd7cdc3425c913a20864d668ecf1c2\nparent 9dfa69a44ac5054b5c970fdd13ade4d50f4c097d\nparent e1b8d836a9b64169a8337be674c78cac20940b92\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1599256482 +0000\ncommitter GitHub <noreply@github.com> 1599256482 +0000\n\nMerge #5940\n\n5940: Implement \"Replace `impl Trait` function argument with the named generic\" assist. r=matklad a=alekseysidorov\n\nFixes #5085 \n\nCo-authored-by: Aleksei Sidorov <gorthauer87@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0275b08d1521606fa733f76fe5d5707717456fb4", "html_url": "https://github.com/rust-lang/rust/commit/0275b08d1521606fa733f76fe5d5707717456fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0275b08d1521606fa733f76fe5d5707717456fb4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dfa69a44ac5054b5c970fdd13ade4d50f4c097d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfa69a44ac5054b5c970fdd13ade4d50f4c097d", "html_url": "https://github.com/rust-lang/rust/commit/9dfa69a44ac5054b5c970fdd13ade4d50f4c097d"}, {"sha": "e1b8d836a9b64169a8337be674c78cac20940b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b8d836a9b64169a8337be674c78cac20940b92", "html_url": "https://github.com/rust-lang/rust/commit/e1b8d836a9b64169a8337be674c78cac20940b92"}], "stats": {"total": 268, "additions": 267, "deletions": 1}, "files": [{"sha": "6738bc13419dd219fc9c0e3ce03e78eb56dfba22", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=0275b08d1521606fa733f76fe5d5707717456fb4", "patch": "@@ -0,0 +1,168 @@\n+use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, GenericParamsOwner};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_impl_trait_with_generic\n+//\n+// Replaces `impl Trait` function argument with the named generic.\n+//\n+// ```\n+// fn foo(bar: <|>impl Bar) {}\n+// ```\n+// ->\n+// ```\n+// fn foo<B: Bar>(bar: B) {}\n+// ```\n+pub(crate) fn replace_impl_trait_with_generic(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n+    let type_impl_trait = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n+    let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n+    let type_fn = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+\n+    let impl_trait_ty = type_impl_trait.type_bound_list()?;\n+\n+    let target = type_fn.syntax().text_range();\n+    acc.add(\n+        AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n+        \"Replace impl trait with generic\",\n+        target,\n+        |edit| {\n+            let generic_letter = impl_trait_ty.to_string().chars().next().unwrap().to_string();\n+\n+            let generic_param_list = type_fn\n+                .generic_param_list()\n+                .unwrap_or_else(|| make::generic_param_list(None))\n+                .append_param(make::generic_param(generic_letter.clone(), Some(impl_trait_ty)));\n+\n+            let new_type_fn = type_fn\n+                .replace_descendant::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter))\n+                .with_generic_param_list(generic_param_list);\n+\n+            edit.replace_ast(type_fn.clone(), new_type_fn);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::check_assist;\n+\n+    #[test]\n+    fn replace_impl_trait_with_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<G>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<G, B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_without_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_two_impl_trait_with_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<G>(foo: impl Foo, bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_empty_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_empty_multiline_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<\n+            >(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar\n+            >(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore = \"This case is very rare but there is no simple solutions to fix it.\"]\n+    fn replace_impl_trait_with_exist_generic_letter() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<B>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B, C: Bar>(bar: C) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_multiline_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<\n+                G: Foo,\n+                F,\n+                H,\n+            >(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<\n+                G: Foo,\n+                F,\n+                H, B: Bar\n+            >(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_multiple() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo(bar: <|>impl Foo + Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<F: Foo + Bar>(bar: F) {}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "cbac53e71112e28582dae079ce7c58ef046ee750", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=0275b08d1521606fa733f76fe5d5707717456fb4", "patch": "@@ -155,6 +155,7 @@ mod handlers {\n     mod remove_unused_param;\n     mod reorder_fields;\n     mod replace_if_let_with_match;\n+    mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_unwrap_with_match;\n@@ -202,6 +203,7 @@ mod handlers {\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n+            replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_unwrap_with_match::replace_unwrap_with_match,"}, {"sha": "27d15adb08a74aea3d0588b17cc177185f60f4e8", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0275b08d1521606fa733f76fe5d5707717456fb4", "patch": "@@ -814,6 +814,19 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_replace_impl_trait_with_generic() {\n+    check_doc_test(\n+        \"replace_impl_trait_with_generic\",\n+        r#####\"\n+fn foo(bar: <|>impl Bar) {}\n+\"#####,\n+        r#####\"\n+fn foo<B: Bar>(bar: B) {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_let_with_if_let() {\n     check_doc_test("}, {"sha": "8b1c65dd6f149d01270a2d9257a86870845e9907", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=0275b08d1521606fa733f76fe5d5707717456fb4", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     ast::{\n         self,\n         make::{self, tokens},\n-        AstNode, TypeBoundsOwner,\n+        AstNode, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n     },\n     AstToken, Direction, InsertPosition, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n@@ -46,6 +46,19 @@ impl ast::Fn {\n         to_insert.push(body.syntax().clone().into());\n         self.replace_children(single_node(old_body_or_semi), to_insert)\n     }\n+\n+    #[must_use]\n+    pub fn with_generic_param_list(&self, generic_args: ast::GenericParamList) -> ast::Fn {\n+        if let Some(old) = self.generic_param_list() {\n+            return self.replace_descendant(old, generic_args);\n+        }\n+\n+        let anchor = self.name().expect(\"The function must have a name\").syntax().clone();\n+\n+        let mut to_insert: ArrayVec<[SyntaxElement; 1]> = ArrayVec::new();\n+        to_insert.push(generic_args.syntax().clone().into());\n+        self.insert_children(InsertPosition::After(anchor.into()), to_insert)\n+    }\n }\n \n fn make_multiline<N>(node: N) -> N\n@@ -459,6 +472,61 @@ impl ast::MatchArmList {\n     }\n }\n \n+impl ast::GenericParamList {\n+    #[must_use]\n+    pub fn append_params(\n+        &self,\n+        params: impl IntoIterator<Item = ast::GenericParam>,\n+    ) -> ast::GenericParamList {\n+        let mut res = self.clone();\n+        params.into_iter().for_each(|it| res = res.append_param(it));\n+        res\n+    }\n+\n+    #[must_use]\n+    pub fn append_param(&self, item: ast::GenericParam) -> ast::GenericParamList {\n+        let space = tokens::single_space();\n+\n+        let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n+        if self.generic_params().next().is_some() {\n+            to_insert.push(space.into());\n+        }\n+        to_insert.push(item.syntax().clone().into());\n+\n+        macro_rules! after_l_angle {\n+            () => {{\n+                let anchor = match self.l_angle_token() {\n+                    Some(it) => it.into(),\n+                    None => return self.clone(),\n+                };\n+                InsertPosition::After(anchor)\n+            }};\n+        }\n+\n+        macro_rules! after_field {\n+            ($anchor:expr) => {\n+                if let Some(comma) = $anchor\n+                    .syntax()\n+                    .siblings_with_tokens(Direction::Next)\n+                    .find(|it| it.kind() == T![,])\n+                {\n+                    InsertPosition::After(comma)\n+                } else {\n+                    to_insert.insert(0, make::token(T![,]).into());\n+                    InsertPosition::After($anchor.syntax().clone().into())\n+                }\n+            };\n+        };\n+\n+        let position = match self.generic_params().last() {\n+            Some(it) => after_field!(it),\n+            None => after_l_angle!(),\n+        };\n+\n+        self.insert_children(position, to_insert)\n+    }\n+}\n+\n #[must_use]\n pub fn remove_attrs_and_docs<N: ast::AttrsOwner>(node: &N) -> N {\n     N::cast(remove_attrs_and_docs_inner(node.syntax().clone())).unwrap()"}, {"sha": "25e8a359d9e2324774c7465aec81945fe3b99625", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0275b08d1521606fa733f76fe5d5707717456fb4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0275b08d1521606fa733f76fe5d5707717456fb4", "patch": "@@ -294,6 +294,21 @@ pub fn param_list(pats: impl IntoIterator<Item = ast::Param>) -> ast::ParamList\n     ast_from_text(&format!(\"fn f({}) {{ }}\", args))\n }\n \n+pub fn generic_param(name: String, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n+    let bound = match ty {\n+        Some(it) => format!(\": {}\", it),\n+        None => String::new(),\n+    };\n+    ast_from_text(&format!(\"fn f<{}{}>() {{ }}\", name, bound))\n+}\n+\n+pub fn generic_param_list(\n+    pats: impl IntoIterator<Item = ast::GenericParam>,\n+) -> ast::GenericParamList {\n+    let args = pats.into_iter().join(\", \");\n+    ast_from_text(&format!(\"fn f<{}>() {{ }}\", args))\n+}\n+\n pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }"}]}