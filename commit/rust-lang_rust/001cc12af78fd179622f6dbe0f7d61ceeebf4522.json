{"sha": "001cc12af78fd179622f6dbe0f7d61ceeebf4522", "node_id": "C_kwDOAAsO6NoAKDAwMWNjMTJhZjc4ZmQxNzk2MjJmNmRiZTBmN2Q2MWNlZWViZjQ1MjI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-12T09:40:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-12T09:40:39Z"}, "message": "remove Clean trait implementation for hir::BareFnTy", "tree": {"sha": "2d5805519531efe2a96cdaa6c0277cf17ef57b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5805519531efe2a96cdaa6c0277cf17ef57b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001cc12af78fd179622f6dbe0f7d61ceeebf4522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001cc12af78fd179622f6dbe0f7d61ceeebf4522", "html_url": "https://github.com/rust-lang/rust/commit/001cc12af78fd179622f6dbe0f7d61ceeebf4522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001cc12af78fd179622f6dbe0f7d61ceeebf4522/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "html_url": "https://github.com/rust-lang/rust/commit/a65647a7f618d8b2d4367dbbfc197b17ebb00d80"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "addd6ffa11e280d0ed81263c2d920bcc43a9c46a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/001cc12af78fd179622f6dbe0f7d61ceeebf4522/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001cc12af78fd179622f6dbe0f7d61ceeebf4522/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=001cc12af78fd179622f6dbe0f7d61ceeebf4522", "patch": "@@ -1510,7 +1510,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                 if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n-        TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n+        TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n         TyKind::Infer | TyKind::Err => Infer,\n         TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", ty.kind),\n@@ -1874,22 +1874,23 @@ fn clean_path_segment<'tcx>(\n     PathSegment { name: path.ident.name, args: clean_generic_args(path.args(), cx) }\n }\n \n-impl<'tcx> Clean<'tcx, BareFunctionDecl> for hir::BareFnTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> BareFunctionDecl {\n-        let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n-            // NOTE: generics must be cleaned before args\n-            let generic_params = self\n-                .generic_params\n-                .iter()\n-                .filter(|p| !is_elided_lifetime(p))\n-                .map(|x| clean_generic_param(cx, None, x))\n-                .collect();\n-            let args = clean_args_from_types_and_names(cx, self.decl.inputs, self.param_names);\n-            let decl = clean_fn_decl_with_args(cx, self.decl, args);\n-            (generic_params, decl)\n-        });\n-        BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n-    }\n+fn clean_bare_fn_ty<'tcx>(\n+    bare_fn: &hir::BareFnTy<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> BareFunctionDecl {\n+    let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n+        // NOTE: generics must be cleaned before args\n+        let generic_params = bare_fn\n+            .generic_params\n+            .iter()\n+            .filter(|p| !is_elided_lifetime(p))\n+            .map(|x| clean_generic_param(cx, None, x))\n+            .collect();\n+        let args = clean_args_from_types_and_names(cx, bare_fn.decl.inputs, bare_fn.param_names);\n+        let decl = clean_fn_decl_with_args(cx, bare_fn.decl, args);\n+        (generic_params, decl)\n+    });\n+    BareFunctionDecl { unsafety: bare_fn.unsafety, abi: bare_fn.abi, decl, generic_params }\n }\n \n fn clean_maybe_renamed_item<'tcx>("}]}