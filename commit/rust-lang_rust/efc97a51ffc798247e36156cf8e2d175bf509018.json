{"sha": "efc97a51ffc798247e36156cf8e2d175bf509018", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzk3YTUxZmZjNzk4MjQ3ZTM2MTU2Y2Y4ZTJkMTc1YmY1MDkwMTg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-26T21:05:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-29T12:49:01Z"}, "message": "convert remaining `range(a, b)` to `a..b`", "tree": {"sha": "2add0ca20cbe4fc9abec6e98d5d15e2065d12322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2add0ca20cbe4fc9abec6e98d5d15e2065d12322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc97a51ffc798247e36156cf8e2d175bf509018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc97a51ffc798247e36156cf8e2d175bf509018", "html_url": "https://github.com/rust-lang/rust/commit/efc97a51ffc798247e36156cf8e2d175bf509018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc97a51ffc798247e36156cf8e2d175bf509018/comments", "author": null, "committer": null, "parents": [{"sha": "7d661af9c86566088f7dbaeee25143ecde673b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d661af9c86566088f7dbaeee25143ecde673b75", "html_url": "https://github.com/rust-lang/rust/commit/7d661af9c86566088f7dbaeee25143ecde673b75"}], "stats": {"total": 203, "additions": 101, "deletions": 102}, "files": [{"sha": "f717fc6075d4679b3c883e80b4791a4caee2a32d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -67,7 +67,7 @@\n //! // for a simpler implementation.\n //! fn shortest_path(adj_list: &Vec<Vec<Edge>>, start: uint, goal: uint) -> uint {\n //!     // dist[node] = current shortest distance from `start` to `node`\n-//!     let mut dist: Vec<_> = range(0, adj_list.len()).map(|_| uint::MAX).collect();\n+//!     let mut dist: Vec<_> = (0..adj_list.len()).map(|_| uint::MAX).collect();\n //!\n //!     let mut heap = BinaryHeap::new();\n //!"}, {"sha": "4f2c2cb60287eebd1266feec69e4eb169228935a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1730,7 +1730,7 @@ mod test {\n         let map: BTreeMap<uint, uint> = (0..size).map(|i| (i, i)).collect();\n \n         let mut j = 0u;\n-        for ((&k, &v), i) in map.range(Included(&2), Unbounded).zip(range(2u, size)) {\n+        for ((&k, &v), i) in map.range(Included(&2), Unbounded).zip(2u..size) {\n             assert_eq!(k, i);\n             assert_eq!(v, i);\n             j += 1;"}, {"sha": "aded4b8a7ac9e7fabfd28fbc659e0037b95efb58", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -599,7 +599,7 @@ impl<T> DList<T> {\n         }  else {\n             // better off starting from the end\n             let mut iter = self.iter_mut();\n-            for _ in range(0, len - 1 - (at - 1)) {\n+            for _ in 0..len - 1 - (at - 1) {\n                 iter.next_back();\n             }\n             iter.tail"}, {"sha": "14f1f88613ae13630dea11edb4acf553bbffef73", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -388,7 +388,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::with_capacity(15);\n-    /// buf.extend(range(0u, 4));\n+    /// buf.extend(0u..4);\n     /// assert_eq!(buf.capacity(), 15);\n     /// buf.shrink_to_fit();\n     /// assert!(buf.capacity() >= 4);\n@@ -483,7 +483,7 @@ impl<T> RingBuf<T> {\n     #[unstable(feature = \"collections\",\n                reason = \"matches collection reform specification; waiting on panic semantics\")]\n     pub fn truncate(&mut self, len: uint) {\n-        for _ in range(len, self.len()) {\n+        for _ in len..self.len() {\n             self.pop_back();\n         }\n     }"}, {"sha": "1046e3077eaaa7c88d0dcd8422e1328fb04da076", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1254,7 +1254,7 @@ impl Iterator for ElementSwaps {\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         // For a vector of size n, there are exactly n! permutations.\n-        let n = range(2, self.sdir.len() + 1).product();\n+        let n = (2..self.sdir.len() + 1).product();\n         (n - self.swaps_made, Some(n - self.swaps_made))\n     }\n }\n@@ -1385,7 +1385,7 @@ fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Order\n     // .offset-ing.\n     for start in range_step(0, len, insertion) {\n         // start <= i < len;\n-        for i in range(start, cmp::min(start + insertion, len)) {\n+        for i in start..cmp::min(start + insertion, len) {\n             // j satisfies: start <= j <= i;\n             let mut j = i as int;\n             unsafe {"}, {"sha": "74f6d4bad09772ae4a66cd937b6a61acbfbb1d02", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1079,7 +1079,7 @@ impl<T: Clone> Vec<T> {\n     pub fn push_all(&mut self, other: &[T]) {\n         self.reserve(other.len());\n \n-        for i in range(0, other.len()) {\n+        for i in 0..other.len() {\n             let len = self.len();\n \n             // Unsafe code so this can be optimised to a memcpy (or something similarly\n@@ -1988,12 +1988,12 @@ mod tests {\n         let mut v = Vec::new();\n         let mut w = Vec::new();\n \n-        v.extend(range(0i, 3));\n+        v.extend(0i..3);\n         for i in 0i..3 { w.push(i) }\n \n         assert_eq!(v, w);\n \n-        v.extend(range(3i, 10));\n+        v.extend(3i..10);\n         for i in 3i..10 { w.push(i) }\n \n         assert_eq!(v, w);\n@@ -2499,7 +2499,7 @@ mod tests {\n     }\n \n     fn do_bench_from_slice(b: &mut Bencher, src_len: uint) {\n-        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+        let src: Vec<uint> = FromIterator::from_iter(0..src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2531,7 +2531,7 @@ mod tests {\n     }\n \n     fn do_bench_from_iter(b: &mut Bencher, src_len: uint) {\n-        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+        let src: Vec<uint> = FromIterator::from_iter(0..src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2563,8 +2563,8 @@ mod tests {\n     }\n \n     fn do_bench_extend(b: &mut Bencher, dst_len: uint, src_len: uint) {\n-        let dst: Vec<uint> = FromIterator::from_iter(range(0, dst_len));\n-        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+        let dst: Vec<uint> = FromIterator::from_iter(0..dst_len);\n+        let src: Vec<uint> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2612,8 +2612,8 @@ mod tests {\n     }\n \n     fn do_bench_push_all(b: &mut Bencher, dst_len: uint, src_len: uint) {\n-        let dst: Vec<uint> = FromIterator::from_iter(range(0, dst_len));\n-        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+        let dst: Vec<uint> = FromIterator::from_iter(0..dst_len);\n+        let src: Vec<uint> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2661,8 +2661,8 @@ mod tests {\n     }\n \n     fn do_bench_push_all_move(b: &mut Bencher, dst_len: uint, src_len: uint) {\n-        let dst: Vec<uint> = FromIterator::from_iter(range(0u, dst_len));\n-        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+        let dst: Vec<uint> = FromIterator::from_iter(0u..dst_len);\n+        let src: Vec<uint> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2710,7 +2710,7 @@ mod tests {\n     }\n \n     fn do_bench_clone(b: &mut Bencher, src_len: uint) {\n-        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+        let src: Vec<uint> = FromIterator::from_iter(0..src_len);\n \n         b.bytes = src_len as u64;\n \n@@ -2742,8 +2742,8 @@ mod tests {\n     }\n \n     fn do_bench_clone_from(b: &mut Bencher, times: uint, dst_len: uint, src_len: uint) {\n-        let dst: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n-        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+        let dst: Vec<uint> = FromIterator::from_iter(0..src_len);\n+        let src: Vec<uint> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n         b.bytes = (times * src_len) as u64;\n "}, {"sha": "9f83b91fc9bbd972c81c8b0f5616c37a7bfd4add", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -459,7 +459,7 @@ impl<V> VecMap<V> {\n     pub fn insert(&mut self, key: uint, value: V) -> Option<V> {\n         let len = self.v.len();\n         if len <= key {\n-            self.v.extend(range(0, key - len + 1).map(|_| None));\n+            self.v.extend((0..key - len + 1).map(|_| None));\n         }\n         replace(&mut self.v[key], Some(value))\n     }"}, {"sha": "035443e9c3f35466a189e7b45bddb9a2092055cf", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -125,7 +125,7 @@ impl<T> ToOwned<T> for T where T: Clone {\n /// use std::borrow::Cow;\n ///\n /// fn abs_all(input: &mut Cow<Vec<int>, [int]>) {\n-///     for i in range(0, input.len()) {\n+///     for i in 0..input.len() {\n ///         let v = input[i];\n ///         if v < 0 {\n ///             // clones into a vector the first time (if not already owned)"}, {"sha": "9f1d781fcbf4ec0bcd796adbbea07876ecf9c36b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -800,7 +800,7 @@ impl TwoWaySearcher {\n             // See if the right part of the needle matches\n             let start = if long_period { self.crit_pos }\n                         else { cmp::max(self.crit_pos, self.memory) };\n-            for i in range(start, needle.len()) {\n+            for i in start..needle.len() {\n                 if needle[i] != haystack[self.position + i] {\n                     self.position += i - self.crit_pos + 1;\n                     if !long_period {"}, {"sha": "8bcd4982fba5d11b6ed388e799a3e2ff2a1fad57", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -305,7 +305,7 @@ fn test_cycle() {\n #[test]\n fn test_iterator_nth() {\n     let v: &[_] = &[0i, 1, 2, 3, 4];\n-    for i in range(0u, v.len()) {\n+    for i in 0u..v.len() {\n         assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n     }\n     assert_eq!(v.iter().nth(v.len()), None);\n@@ -458,7 +458,7 @@ fn test_min_by() {\n \n #[test]\n fn test_by_ref() {\n-    let mut xs = range(0i, 10);\n+    let mut xs = 0i..10;\n     // sum the first five values\n     let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n     assert_eq!(partial_sum, 10);\n@@ -730,32 +730,32 @@ fn test_random_access_cycle() {\n \n #[test]\n fn test_double_ended_range() {\n-    assert!(range(11i, 14).rev().collect::<Vec<int>>() == vec![13i, 12, 11]);\n+    assert!((11i..14).rev().collect::<Vec<int>>() == vec![13i, 12, 11]);\n     for _ in (10i..0).rev() {\n         panic!(\"unreachable\");\n     }\n \n-    assert!(range(11u, 14).rev().collect::<Vec<uint>>() == vec![13u, 12, 11]);\n+    assert!((11u..14).rev().collect::<Vec<uint>>() == vec![13u, 12, 11]);\n     for _ in (10u..0).rev() {\n         panic!(\"unreachable\");\n     }\n }\n \n #[test]\n fn test_range() {\n-    assert!(range(0i, 5).collect::<Vec<int>>() == vec![0i, 1, 2, 3, 4]);\n-    assert!(range(-10i, -1).collect::<Vec<int>>() ==\n+    assert!((0i..5).collect::<Vec<int>>() == vec![0i, 1, 2, 3, 4]);\n+    assert!((-10i..-1).collect::<Vec<int>>() ==\n                vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n-    assert!(range(0i, 5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n-    assert_eq!(range(200i, -5).count(), 0);\n-    assert_eq!(range(200i, -5).rev().count(), 0);\n-    assert_eq!(range(200i, 200).count(), 0);\n-    assert_eq!(range(200i, 200).rev().count(), 0);\n+    assert!((0i..5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n+    assert_eq!((200i..-5).count(), 0);\n+    assert_eq!((200i..-5).rev().count(), 0);\n+    assert_eq!((200i..200).count(), 0);\n+    assert_eq!((200i..200).rev().count(), 0);\n \n-    assert_eq!(range(0i, 100).size_hint(), (100, Some(100)));\n+    assert_eq!((0i..100).size_hint(), (100, Some(100)));\n     // this test is only meaningful when sizeof uint < sizeof u64\n-    assert_eq!(range(uint::MAX - 1, uint::MAX).size_hint(), (1, Some(1)));\n-    assert_eq!(range(-10i, -1).size_hint(), (9, Some(9)));\n+    assert_eq!((uint::MAX - 1..uint::MAX).size_hint(), (1, Some(1)));\n+    assert_eq!((-10i..-1).size_hint(), (9, Some(9)));\n }\n \n #[test]\n@@ -892,7 +892,7 @@ fn bench_rposition(b: &mut Bencher) {\n #[bench]\n fn bench_skip_while(b: &mut Bencher) {\n     b.iter(|| {\n-        let it = range(0u, 100);\n+        let it = 0u..100;\n         let mut sum = 0;\n         it.skip_while(|&x| { sum += x; sum < 4000 }).all(|_| true);\n     });"}, {"sha": "938755113b524e1fb05b0ca1d7d154327a6c0d30", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -17,7 +17,7 @@ fn test_bool_from_str() {\n \n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n-    for i in range(0, s.len()) {\n+    for i in 0..s.len() {\n         for j in range(i+1, s.len() + 1) {\n             assert!(s.contains(&s[i..j]));\n         }"}, {"sha": "deb0091264620400f0bbb6cccbf429da052a329e", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -176,7 +176,7 @@\n //! }\n //!\n //! impl<'a> dot::GraphWalk<'a, Nd, Ed<'a>> for Graph {\n-//!     fn nodes(&self) -> dot::Nodes<'a,Nd> { range(0,self.nodes.len()).collect() }\n+//!     fn nodes(&self) -> dot::Nodes<'a,Nd> { (0..self.nodes.len()).collect() }\n //!     fn edges(&'a self) -> dot::Edges<'a,Ed<'a>> { self.edges.iter().collect() }\n //!     fn source(&self, e: &Ed) -> Nd { let & &(s,_) = e; s }\n //!     fn target(&self, e: &Ed) -> Nd { let & &(_,t) = e; t }\n@@ -715,7 +715,7 @@ mod tests {\n \n     impl<'a> GraphWalk<'a, Node, &'a Edge> for LabelledGraph {\n         fn nodes(&'a self) -> Nodes<'a,Node> {\n-            range(0u, self.node_labels.len()).collect()\n+            (0u..self.node_labels.len()).collect()\n         }\n         fn edges(&'a self) -> Edges<'a,&'a Edge> {\n             self.edges.iter().collect()"}, {"sha": "51252a342a53a8e3764d3cedde64508b4b7e70ab", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -132,7 +132,7 @@ pub fn parse_state_from_data<'a, 'tcx>(data: &'a [u8], crate_num: ast::CrateNum,\n fn data_log_string(data: &[u8], pos: uint) -> String {\n     let mut buf = String::new();\n     buf.push_str(\"<<\");\n-    for i in range(pos, data.len()) {\n+    for i in pos..data.len() {\n         let c = data[i];\n         if c > 0x20 && c <= 0x7F {\n             buf.push(c as char);"}, {"sha": "16b7d6134c39a37cd49b7b90cac639c52009f329", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -157,7 +157,7 @@ fn calculate_type(sess: &session::Session,\n     });\n \n     // Collect what we've got so far in the return vector.\n-    let mut ret = range(1, sess.cstore.next_crate_num()).map(|i| {\n+    let mut ret = (1..sess.cstore.next_crate_num()).map(|i| {\n         match formats.get(&i).map(|v| *v) {\n             v @ Some(cstore::RequireDynamic) => v,\n             _ => None,"}, {"sha": "f0174c5b0c6bcbda565a07e4aca1c540db813990", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1229,8 +1229,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             let mut insert = Vec::new();\n                             if lifetimes.len() == 0 {\n                                 let anon = self.cur_anon.get();\n-                                for (i, a) in range(anon,\n-                                                    anon+expected).enumerate() {\n+                                for (i, a) in (anon..anon+expected).enumerate() {\n                                     if anon_nums.contains(&a) {\n                                         insert.push(i as u32);\n                                     }"}, {"sha": "6a69fc5647c2e7e773e760bd475c963bb31503c6", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -983,7 +983,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     }\n \n     fn construct_var_data(&self) -> Vec<VarData> {\n-        range(0, self.num_vars() as uint).map(|_| {\n+        (0..self.num_vars() as uint).map(|_| {\n             VarData {\n                 // All nodes are initially classified as contracting; during\n                 // the expansion phase, we will shift the classification for\n@@ -1259,7 +1259,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n         let mut opt_graph = None;\n \n-        for idx in range(0u, self.num_vars() as uint) {\n+        for idx in 0u..self.num_vars() as uint {\n             match var_data[idx].value {\n                 Value(_) => {\n                     /* Inference successful */\n@@ -1316,7 +1316,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n         }\n \n-        range(0, self.num_vars() as uint).map(|idx| var_data[idx].value).collect()\n+        (0..self.num_vars() as uint).map(|idx| var_data[idx].value).collect()\n     }\n \n     fn construct_graph(&self) -> RegionGraph {"}, {"sha": "14e553f77dc2857dd2ea4784483f08413b70326f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -404,7 +404,7 @@ impl<'a> LifetimeContext<'a> {\n     }\n \n     fn check_lifetime_defs(&mut self, old_scope: Scope, lifetimes: &Vec<ast::LifetimeDef>) {\n-        for i in range(0, lifetimes.len()) {\n+        for i in 0..lifetimes.len() {\n             let lifetime_i = &lifetimes[i];\n \n             let special_idents = [special_idents::static_lifetime];\n@@ -417,7 +417,7 @@ impl<'a> LifetimeContext<'a> {\n             }\n \n             // It is a hard error to shadow a lifetime within the same scope.\n-            for j in range(i + 1, lifetimes.len()) {\n+            for j in i + 1..lifetimes.len() {\n                 let lifetime_j = &lifetimes[j];\n \n                 if lifetime_i.lifetime.name == lifetime_j.lifetime.name {"}, {"sha": "8005da507dc7dbef70e014f4ee86de246cc2ca85", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -595,7 +595,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let mut i = 0;\n             while i < candidates.len() {\n                 let is_dup =\n-                    range(0, candidates.len())\n+                    (0..candidates.len())\n                     .filter(|&j| i != j)\n                     .any(|j| self.candidate_should_be_dropped_in_favor_of(stack,\n                                                                           &candidates[i],"}, {"sha": "fbd5cc5c74d648893a21bc4bdb76ecef37592ef4", "filename": "src/librustc/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Flev_distance.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -14,7 +14,7 @@ pub fn lev_distance(me: &str, t: &str) -> uint {\n     if me.is_empty() { return t.chars().count(); }\n     if t.is_empty() { return me.chars().count(); }\n \n-    let mut dcol: Vec<_> = range(0, t.len() + 1).collect();\n+    let mut dcol: Vec<_> = (0..t.len() + 1).collect();\n     let mut t_last = 0;\n \n     for (i, sc) in me.chars().enumerate() {"}, {"sha": "771363a8d055f39eb227b846dab47e6dd6c50295", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -714,7 +714,7 @@ pub fn run_passes(sess: &Session,\n         cmd.args(&sess.target.target.options.pre_link_args[]);\n         cmd.arg(\"-nostdlib\");\n \n-        for index in range(0, trans.modules.len()) {\n+        for index in 0..trans.modules.len() {\n             cmd.arg(crate_output.with_extension(&format!(\"{}.o\", index)[]));\n         }\n \n@@ -824,7 +824,7 @@ pub fn run_passes(sess: &Session,\n         let keep_numbered_bitcode = needs_crate_bitcode ||\n                 (user_wants_bitcode && sess.opts.cg.codegen_units > 1);\n \n-        for i in range(0, trans.modules.len()) {\n+        for i in 0..trans.modules.len() {\n             if modules_config.emit_obj {\n                 let ext = format!(\"{}.o\", i);\n                 remove(sess, &crate_output.with_extension(&ext[]));"}, {"sha": "146239d0c482024324aa4f4dba53359345b3a8ac", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -606,7 +606,7 @@ fn extract_variant_args<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     val: ValueRef)\n                                     -> ExtractedBlock<'blk, 'tcx> {\n     let _icx = push_ctxt(\"match::extract_variant_args\");\n-    let args = range(0, adt::num_args(repr, disr_val)).map(|i| {\n+    let args = (0..adt::num_args(repr, disr_val)).map(|i| {\n         adt::trans_field_ptr(bcx, repr, val, disr_val, i)\n     }).collect();\n \n@@ -653,8 +653,8 @@ fn extract_vec_elems<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let vec_datum = match_datum(val, left_ty);\n     let (base, len) = vec_datum.get_vec_base_and_len(bcx);\n     let mut elems = vec![];\n-    elems.extend(range(0, before).map(|i| GEPi(bcx, base, &[i])));\n-    elems.extend(range(0, after).rev().map(|i| {\n+    elems.extend((0..before).map(|i| GEPi(bcx, base, &[i])));\n+    elems.extend((0..after).rev().map(|i| {\n         InBoundsGEP(bcx, base, &[\n             Sub(bcx, len, C_uint(bcx.ccx(), i + 1), DebugLoc::None)\n         ])\n@@ -768,7 +768,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         })\n     };\n \n-    range(0, m[0].pats.len())\n+    (0..m[0].pats.len())\n         .filter(column_contains_any_nonwild_patterns)\n         .map(|col| (col, column_score(m, col)))\n         .max_by(|&(_, score)| score)\n@@ -1005,7 +1005,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let adt_vals = if any_irrefutable_adt_pat(bcx.tcx(), m, col) {\n         let repr = adt::represent_type(bcx.ccx(), left_ty);\n         let arg_count = adt::num_args(&*repr, 0);\n-        let field_vals: Vec<ValueRef> = std::iter::range(0, arg_count).map(|ix|\n+        let field_vals: Vec<ValueRef> = (0..arg_count).map(|ix|\n             adt::trans_field_ptr(bcx, &*repr, val, 0, ix)\n         ).collect();\n         Some(field_vals)"}, {"sha": "1195b9f084b0f37595f7134fd5afab867ab80d49", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1651,7 +1651,7 @@ fn copy_closure_args_to_allocas<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                      wasn't a tuple?!\")\n         }\n     };\n-    for j in range(0, args.len()) {\n+    for j in 0..args.len() {\n         let tuple_element_type = untupled_arg_types[j];\n         let tuple_element_datum =\n             tuple_datum.get_element(bcx,"}, {"sha": "fc29c7071f2e37f153107d7ba679f2c815a85b42", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -905,7 +905,7 @@ fn trans_args_under_call_abi<'blk, 'tcx>(\n                                                           tuple_expr.id));\n             let repr = adt::represent_type(bcx.ccx(), tuple_type);\n             let repr_ptr = &*repr;\n-            for i in range(0, field_types.len()) {\n+            for i in 0..field_types.len() {\n                 let arg_datum = tuple_lvalue_datum.get_element(\n                     bcx,\n                     field_types[i],"}, {"sha": "12e79c407eceaf11006302a213d5dce10214b4f4", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -310,7 +310,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n         let (local_ccx, index) =\n             self.local_ccxs\n                 .iter()\n-                .zip(range(0, self.local_ccxs.len()))\n+                .zip(0..self.local_ccxs.len())\n                 .min_by(|&(local_ccx, _idx)| local_ccx.n_llvm_insns.get())\n                 .unwrap();\n         CrateContext {"}, {"sha": "5965d396e8719c13f24875fe8615c55abd121e9c", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -716,7 +716,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Build up the arguments to the call to the rust function.\n         // Careful to adapt for cases where the native convention uses\n         // a pointer and Rust does not or vice versa.\n-        for i in range(0, tys.fn_sig.inputs.len()) {\n+        for i in 0..tys.fn_sig.inputs.len() {\n             let rust_ty = tys.fn_sig.inputs[i];\n             let llrust_ty = tys.llsig.llarg_tys[i];\n             let rust_indirect = type_of::arg_is_indirect(ccx, rust_ty);"}, {"sha": "a382cfca0bd899e73b25c1e185dfb984e78dc774", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -314,7 +314,7 @@ fn create_substs_for_ast_path<'tcx>(\n \n         match anon_regions {\n             Ok(v) => v.into_iter().collect(),\n-            Err(_) => range(0, expected_num_region_params)\n+            Err(_) => (0..expected_num_region_params)\n                           .map(|_| ty::ReStatic).collect() // hokey\n         }\n     };"}, {"sha": "cb4c880717bc86b5ea47d8cd2c96f030a41be199", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -167,7 +167,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         }\n         ast::PatTup(ref elements) => {\n             let element_tys: Vec<_> =\n-                range(0, elements.len()).map(|_| fcx.infcx().next_ty_var())\n+                (0..elements.len()).map(|_| fcx.infcx().next_ty_var())\n                                         .collect();\n             let pat_ty = ty::mk_tup(tcx, element_tys.clone());\n             fcx.write_ty(pat.id, pat_ty);"}, {"sha": "5067a72c8818e9bd93a66a097b26fd7879ba96e6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1871,7 +1871,7 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n \n     fn anon_regions(&self, span: Span, count: uint)\n                     -> Result<Vec<ty::Region>, Option<Vec<(String, uint)>>> {\n-        Ok(range(0, count).map(|_| {\n+        Ok((0..count).map(|_| {\n             self.infcx().next_region_var(infer::MiscVariable(span))\n         }).collect())\n     }\n@@ -1903,7 +1903,7 @@ pub fn autoderef<'a, 'tcx, T, F>(fcx: &FnCtxt<'a, 'tcx>,\n            lvalue_pref);\n \n     let mut t = base_ty;\n-    for autoderefs in range(0, fcx.tcx().sess.recursion_limit.get()) {\n+    for autoderefs in 0..fcx.tcx().sess.recursion_limit.get() {\n         let resolved_t = structurally_resolved_type(fcx, sp, t);\n \n         if ty::type_is_error(resolved_t) {\n@@ -5107,7 +5107,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // that the *default* type are expressed in terms of all prior\n         // parameters, so we have to substitute as we go with the\n         // partial substitution that we have built up.\n-        for i in range(provided_len, desired.len()) {\n+        for i in provided_len..desired.len() {\n             let default = desired[i].default.unwrap();\n             let default = default.subst_spanned(fcx.tcx(), substs, Some(span));\n             substs.types.push(space, default);"}, {"sha": "7aaf56336a83b80fd436d047dac17f00120f97cb", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -135,7 +135,7 @@ impl RegionScope for BindingRscope {\n                     count: uint)\n                     -> Result<Vec<ty::Region>, Option<Vec<(String, uint)>>>\n     {\n-        Ok(range(0, count).map(|_| self.next_region()).collect())\n+        Ok((0..count).map(|_| self.next_region()).collect())\n     }\n }\n "}, {"sha": "b8ebbf8ff3604d0b030b416aac668c23eac9ffc8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1500,7 +1500,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n     try!(document(w, item));\n \n-    let mut indices = range(0, items.len()).filter(|i| {\n+    let mut indices = (0..items.len()).filter(|i| {\n         !cx.ignore_private_item(&items[*i])\n     }).collect::<Vec<uint>>();\n "}, {"sha": "c21d4c60f7b3051c1f7f5eb223e5d155b251c745", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1326,7 +1326,7 @@ impl Stack {\n     /// Compares this stack with an array of StackElements.\n     pub fn is_equal_to(&self, rhs: &[StackElement]) -> bool {\n         if self.stack.len() != rhs.len() { return false; }\n-        for i in range(0, rhs.len()) {\n+        for i in 0..rhs.len() {\n             if self.get(i) != rhs[i] { return false; }\n         }\n         return true;\n@@ -1336,7 +1336,7 @@ impl Stack {\n     /// the ones passed as parameter.\n     pub fn starts_with(&self, rhs: &[StackElement]) -> bool {\n         if self.stack.len() < rhs.len() { return false; }\n-        for i in range(0, rhs.len()) {\n+        for i in 0..rhs.len() {\n             if self.get(i) != rhs[i] { return false; }\n         }\n         return true;\n@@ -1347,7 +1347,7 @@ impl Stack {\n     pub fn ends_with(&self, rhs: &[StackElement]) -> bool {\n         if self.stack.len() < rhs.len() { return false; }\n         let offset = self.stack.len() - rhs.len();\n-        for i in range(0, rhs.len()) {\n+        for i in 0..rhs.len() {\n             if self.get(i + offset) != rhs[i] { return false; }\n         }\n         return true;"}, {"sha": "269e4ce29fd7e5d0f3090ec870b0b338d9009b8b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1217,7 +1217,7 @@ mod test_set {\n             for _ in s.iter() { panic!(\"s should be empty!\"); }\n \n             // reset to try again.\n-            s.extend(range(1, 100));\n+            s.extend(1..100);\n         }\n     }\n }"}, {"sha": "87b3b9fe4155cde3cc407c06244e4ecb8f9467cd", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -418,7 +418,7 @@ mod test {\n \n     #[test]\n     fn test_iter_reader() {\n-        let mut r = IterReader::new(range(0u8, 8));\n+        let mut r = IterReader::new(0u8..8);\n         let mut buf = [0, 0, 0];\n         let len = r.read(&mut buf).unwrap();\n         assert_eq!(len, 3);\n@@ -437,7 +437,7 @@ mod test {\n \n     #[test]\n     fn iter_reader_zero_length() {\n-        let mut r = IterReader::new(range(0u8, 8));\n+        let mut r = IterReader::new(0u8..8);\n         let mut buf = [];\n         assert_eq!(Ok(0), r.read(&mut buf));\n     }"}, {"sha": "2969eec47373b122f3a06fbda59fc9952612b7c3", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -427,7 +427,7 @@ pub fn random<T: Rand>() -> T {\n /// use std::rand::{thread_rng, sample};\n ///\n /// let mut rng = thread_rng();\n-/// let sample = sample(&mut rng, range(1i, 100), 5);\n+/// let sample = sample(&mut rng, 1i..100, 5);\n /// println!(\"{:?}\", sample);\n /// ```\n pub fn sample<T, I: Iterator<Item=T>, R: Rng>(rng: &mut R,"}, {"sha": "43e1b1a2264f4377f9be288612e2a59d2f69324c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -1346,7 +1346,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = channel::<int>();\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n@@ -1357,7 +1357,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = channel::<int>();\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n@@ -1370,7 +1370,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_recv_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = channel::<int>();\n             Thread::spawn(move|| {\n                 let res = Thread::scoped(move|| {\n@@ -1388,7 +1388,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = channel();\n             let _t = Thread::spawn(move|| {\n                 tx.send(box 10i).unwrap();\n@@ -1399,7 +1399,7 @@ mod test {\n \n     #[test]\n     fn stream_send_recv_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = channel();\n \n             send(tx, 0);\n@@ -1810,7 +1810,7 @@ mod sync_tests {\n \n     #[test]\n     fn oneshot_multi_thread_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<int>(0);\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n@@ -1821,7 +1821,7 @@ mod sync_tests {\n \n     #[test]\n     fn oneshot_multi_thread_send_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<int>(0);\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n@@ -1834,7 +1834,7 @@ mod sync_tests {\n \n     #[test]\n     fn oneshot_multi_thread_recv_close_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<int>(0);\n             let _t = Thread::spawn(move|| {\n                 let res = Thread::scoped(move|| {\n@@ -1852,7 +1852,7 @@ mod sync_tests {\n \n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<Box<int>>(0);\n             let _t = Thread::spawn(move|| {\n                 tx.send(box 10i).unwrap();\n@@ -1863,7 +1863,7 @@ mod sync_tests {\n \n     #[test]\n     fn stream_send_recv_stress() {\n-        for _ in range(0, stress_factor()) {\n+        for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<Box<int>>(0);\n \n             send(tx, 0);"}, {"sha": "3fcca2f35e1b760b3a01b9d7c1b70ab6d5ed3375", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -224,7 +224,7 @@ impl Process {\n                 if !setup(err_fd, libc::STDERR_FILENO) { fail(&mut output) }\n \n                 // close all other fds\n-                for fd in range(3, getdtablesize()).rev() {\n+                for fd in (3..getdtablesize()).rev() {\n                     if fd != output.fd() {\n                         let _ = close(fd as c_int);\n                     }"}, {"sha": "3d66718d00ba0c73f08cd996603eea48de612975", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -388,7 +388,7 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n             cmd.push('\"');\n         }\n         let argvec: Vec<char> = arg.chars().collect();\n-        for i in range(0u, argvec.len()) {\n+        for i in 0u..argvec.len() {\n             append_char_at(cmd, argvec.as_slice(), i);\n         }\n         if quote {"}, {"sha": "7f4f5e6ead66e813ed279f68033722266cc496bb", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -770,7 +770,7 @@ impl<'a> MethodDef<'a> {\n         let mut raw_fields = Vec::new(); // ~[[fields of self],\n                                  // [fields of next Self arg], [etc]]\n         let mut patterns = Vec::new();\n-        for i in range(0us, self_args.len()) {\n+        for i in 0us..self_args.len() {\n             let struct_path= cx.path(DUMMY_SP, vec!( type_ident ));\n             let (pat, ident_expr) =\n                 trait_.create_struct_pattern(cx,"}, {"sha": "2a0a352f1281a6b5119693c4a368146f74df5fe9", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -661,7 +661,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     name_ordering: Vec<String>,\n                                     names: HashMap<String, P<ast::Expr>>)\n                                     -> P<ast::Expr> {\n-    let arg_types: Vec<_> = range(0, args.len()).map(|_| None).collect();\n+    let arg_types: Vec<_> = (0..args.len()).map(|_| None).collect();\n     let mut cx = Context {\n         ecx: ecx,\n         args: args,"}, {"sha": "0f617302c921951706d3e7a11185233e4946719f", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -665,7 +665,7 @@ fn mk_tt(cx: &ExtCtxt, tt: &ast::TokenTree) -> Vec<P<ast::Stmt>> {\n         }\n         ref tt @ ast::TtToken(_, MatchNt(..)) => {\n             let mut seq = vec![];\n-            for i in range(0, tt.len()) {\n+            for i in 0..tt.len() {\n                 seq.push(tt.get_tt(i));\n             }\n             mk_tts(cx, &seq[])"}, {"sha": "e3211c7c337e64d975d2abf48af6f4636ff2e5e4", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -392,7 +392,7 @@ pub fn parse(sess: &ParseSess,\n                             cur_eis.push(new_ei);\n                         }\n \n-                        let matches: Vec<_> = range(0, ei.matches.len())\n+                        let matches: Vec<_> = (0..ei.matches.len())\n                             .map(|_| Vec::new()).collect();\n                         let ei_t = ei;\n                         cur_eis.push(box MatcherPos {"}, {"sha": "a3a8bfecab1c49ac926aea31751da0edfacc4e53", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -172,7 +172,7 @@ impl<T: Float + FromPrimitive> Stats<T> for [T] {\n             let mut j = 0;\n             // This inner loop applies `hi`/`lo` summation to each\n             // partial so that the list of partial sums remains exact.\n-            for i in range(0, partials.len()) {\n+            for i in 0..partials.len() {\n                 let mut y: T = partials[i];\n                 if x.abs() < y.abs() {\n                     mem::swap(&mut x, &mut y);"}, {"sha": "e12a9e7cb161bb99d59e968a85bd5cc2238d7276", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -49,7 +49,7 @@ fn rotate(x: &mut [i32]) {\n }\n \n fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n-    for i in range(1, perm.len()) {\n+    for i in 1..perm.len() {\n         rotate(&mut perm[..i + 1]);\n         let count_i = &mut count[i];\n         if *count_i >= i as i32 {"}, {"sha": "2da276b722e870811c99fde7183d234ac5c3ec5b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -158,7 +158,7 @@ fn main() {\n \n     // initialize each sequence sorter\n     let sizes = vec!(1u,2,3,4,6,12,18);\n-    let mut streams = range(0, sizes.len()).map(|_| {\n+    let mut streams = (0..sizes.len()).map(|_| {\n         Some(channel::<String>())\n     }).collect::<Vec<_>>();\n     let mut from_child = Vec::new();"}, {"sha": "e6ef58cba35f83b07f16e5bbaa02e78018a9fd8b", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -199,8 +199,8 @@ fn is_board_unfeasible(board: u64, masks: &Vec<Vec<Vec<u64>>>) -> bool {\n \n // Filter the masks that we can prove to result to unfeasible board.\n fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n-    for i in range(0, masks.len()) {\n-        for j in range(0, (*masks)[i].len()) {\n+    for i in 0..masks.len() {\n+        for j in 0..(*masks)[i].len() {\n             masks[i][j] =\n                 (*masks)[i][j].iter().map(|&m| m)\n                 .filter(|&m| !is_board_unfeasible(m, masks))"}, {"sha": "a7adaacc0a5bfc41c6206d8301f591a5d6a9c023", "filename": "src/test/compile-fail/issue-14303-fncall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14303-fncall.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    range(0, 4)\n+    (0..4)\n     .map(|x| x * 2)\n     .collect::<Vec<'a, usize, 'b>>()\n     //~^ ERROR lifetime parameters must be declared prior to type parameters"}, {"sha": "6ffc12b943cd871b62cef328ea7c1bfa7610b629", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -29,7 +29,7 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n \n         // `box() (...)` syntax is needed to make pretty printer converge in one try:\n         let callback: SamplesFn = box() (move |buffer| {\n-            for i in range(0u, buffer.len()) {\n+            for i in 0u..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }\n         });"}, {"sha": "ce80750013855f2d7ed8caabdc161f6fa5523e44", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc97a51ffc798247e36156cf8e2d175bf509018/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=efc97a51ffc798247e36156cf8e2d175bf509018", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n         box BarStruct{ x: 2 } as Box<FooTrait>\n     );\n \n-    for i in range(0u, foos.len()) {\n+    for i in 0u..foos.len() {\n         assert_eq!(i, foos[i].foo());\n     }\n }"}]}