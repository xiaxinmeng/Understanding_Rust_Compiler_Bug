{"sha": "a3c8572b545124b62dcd16fb4b354f2efe842f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzg1NzJiNTQ1MTI0YjYyZGNkMTZmYjRiMzU0ZjJlZmU4NDJmMzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T07:51:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T07:51:54Z"}, "message": "Rollup merge of #65752 - estebank:sugg, r=Centril\n\nUse structured suggestions for missing associated items\n\nWhen encountering an `impl` that is missing associated items required by its `trait`, use structured suggestions at an appropriate place in the `impl`.", "tree": {"sha": "c21598f8cc63ad1dd05bb08a79fab08e8ff97ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21598f8cc63ad1dd05bb08a79fab08e8ff97ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c8572b545124b62dcd16fb4b354f2efe842f35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw80aCRBK7hj4Ov3rIwAAdHIIAANxKZ4X8AKOoLm8nx0eDvym\ncn2wN9QLl1JWiZhcn+9RQPn/fmNXlwkgymurkmw3YhbiieJmhhmLtIl4LDKWbrkF\nJQ77NsmDmeqDyXmCr07C1lH//SlEy4hu8g1ARoeKsKhBFA6gv4TOeyrXIq5+Fvs6\n0Taka1AqUGXkU1FaflmWoCbSd9Q0iiTJf+9HeRcvD87OuZOPAziOHiQ8I/oOVYQa\n80fA/4OvClbYxwhIa2ISdHD1VCOXivOGP+Hk7a8HHGA+6LmCoR7crOfF9gDnlZJA\n/8Qvw1TxCQJkH2GvYmZUdYJvVHAQ7tNTg0BM6F1rTSwirmBd9iXHYDasqvzp5rs=\n=Ww6/\n-----END PGP SIGNATURE-----\n", "payload": "tree c21598f8cc63ad1dd05bb08a79fab08e8ff97ffc\nparent d7f1406378a31b9f5e9012d882ae237131e3c252\nparent a12a32ab652d63e342f482566c767042609ab1a6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573113114 +0100\ncommitter GitHub <noreply@github.com> 1573113114 +0100\n\nRollup merge of #65752 - estebank:sugg, r=Centril\n\nUse structured suggestions for missing associated items\n\nWhen encountering an `impl` that is missing associated items required by its `trait`, use structured suggestions at an appropriate place in the `impl`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c8572b545124b62dcd16fb4b354f2efe842f35", "html_url": "https://github.com/rust-lang/rust/commit/a3c8572b545124b62dcd16fb4b354f2efe842f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c8572b545124b62dcd16fb4b354f2efe842f35/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f1406378a31b9f5e9012d882ae237131e3c252", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1406378a31b9f5e9012d882ae237131e3c252", "html_url": "https://github.com/rust-lang/rust/commit/d7f1406378a31b9f5e9012d882ae237131e3c252"}, {"sha": "a12a32ab652d63e342f482566c767042609ab1a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a12a32ab652d63e342f482566c767042609ab1a6", "html_url": "https://github.com/rust-lang/rust/commit/a12a32ab652d63e342f482566c767042609ab1a6"}], "stats": {"total": 327, "additions": 243, "deletions": 84}, "files": [{"sha": "d409ca6f3c5f520e34f19f59f24021a081340166", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -1075,6 +1075,13 @@ impl Mutability {\n             MutImmutable => MutMutable,\n         }\n     }\n+\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            MutMutable => \"mut \",\n+            MutImmutable => \"\",\n+        }\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n@@ -2184,6 +2191,15 @@ pub enum Unsafety {\n     Normal,\n }\n \n+impl Unsafety {\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            Unsafety::Unsafe => \"unsafe \",\n+            Unsafety::Normal => \"\",\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum Constness {\n     Const,"}, {"sha": "a25c111b598719df27e48746902b8082df2087b5", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -1734,9 +1734,7 @@ impl<'a> State<'a> {\n                     _ => false,\n                 };\n                 self.s.word(\"&\");\n-                if mutbl == hir::MutMutable {\n-                    self.s.word(\"mut \");\n-                }\n+                self.s.word(mutbl.prefix_str());\n                 if is_range_inner {\n                     self.popen();\n                 }"}, {"sha": "38edef50c966275d2e8c2965e308c5783bdc184f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -897,11 +897,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             } else {\n                 r.push(' ');\n             }\n-            s.push_highlighted(format!(\n-                \"&{}{}\",\n-                r,\n-                if mutbl == hir::MutMutable { \"mut \" } else { \"\" }\n-            ));\n+            s.push_highlighted(format!(\"&{}{}\", r, mutbl.prefix_str()));\n             s.push_normal(ty.to_string());\n         }\n "}, {"sha": "0b6060e0eb01ccb07f64f13da5cf40ec7a173ba8", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -80,9 +80,7 @@ impl DefPathBasedNames<'tcx> {\n             }\n             ty::Ref(_, inner_type, mutbl) => {\n                 output.push('&');\n-                if mutbl == hir::MutMutable {\n-                    output.push_str(\"mut \");\n-                }\n+                output.push_str(mutbl.prefix_str());\n \n                 self.push_type_name(inner_type, output, debug);\n             }\n@@ -114,9 +112,7 @@ impl DefPathBasedNames<'tcx> {\n             ty::Foreign(did) => self.push_def_path(did, output),\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let sig = t.fn_sig(self.tcx);\n-                if sig.unsafety() == hir::Unsafety::Unsafe {\n-                    output.push_str(\"unsafe \");\n-                }\n+                output.push_str(sig.unsafety().prefix_str());\n \n                 let abi = sig.abi();\n                 if abi != ::rustc_target::spec::abi::Abi::Rust {"}, {"sha": "c4785621985c36743712eed3bf616008e505d385", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -1666,8 +1666,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::TypeAndMut<'tcx> {\n-        p!(write(\"{}\", if self.mutbl == hir::MutMutable { \"mut \" } else { \"\" }),\n-            print(self.ty))\n+        p!(write(\"{}\", self.mutbl.prefix_str()), print(self.ty))\n     }\n \n     ty::ExistentialTraitRef<'tcx> {\n@@ -1693,9 +1692,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::FnSig<'tcx> {\n-        if self.unsafety == hir::Unsafety::Unsafe {\n-            p!(write(\"unsafe \"));\n-        }\n+        p!(write(\"{}\", self.unsafety.prefix_str()));\n \n         if self.abi != Abi::Rust {\n             p!(write(\"extern {} \", self.abi));"}, {"sha": "b9fa53d638fcbd1f00009c105b9c163c4052fc91", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -76,9 +76,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n             if !cpp_like_names {\n                 output.push('&');\n             }\n-            if mutbl == hir::MutMutable {\n-                output.push_str(\"mut \");\n-            }\n+            output.push_str(mutbl.prefix_str());\n \n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n@@ -140,9 +138,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n \n \n             let sig = t.fn_sig(tcx);\n-            if sig.unsafety() == hir::Unsafety::Unsafe {\n-                output.push_str(\"unsafe \");\n-            }\n+            output.push_str(sig.unsafety().prefix_str());\n \n             let abi = sig.abi();\n             if abi != rustc_target::spec::abi::Abi::Rust {"}, {"sha": "477ad10460f6b8445cf71c6427e5e870033bc771", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -293,10 +293,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                 match self.ty.kind {\n                     ty::Adt(def, _) if def.is_box() => write!(f, \"box \")?,\n                     ty::Ref(_, _, mutbl) => {\n-                        write!(f, \"&\")?;\n-                        if mutbl == hir::MutMutable {\n-                            write!(f, \"mut \")?;\n-                        }\n+                        write!(f, \"&{}\", mutbl.prefix_str())?;\n                     }\n                     _ => bug!(\"{} is a bad Deref pattern type\", self.ty)\n                 }"}, {"sha": "ded655c1ae32af5918b47c3367e704280996661b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -341,10 +341,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                          tstr);\n         match self.expr_ty.kind {\n             ty::Ref(_, _, mt) => {\n-                let mtstr = match mt {\n-                    hir::MutMutable => \"mut \",\n-                    hir::MutImmutable => \"\",\n-                };\n+                let mtstr = mt.prefix_str();\n                 if self.cast_ty.is_trait() {\n                     match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                         Ok(s) => {"}, {"sha": "bc1189e443e2843b6f847249e9edeeeade6cb3cc", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -592,20 +592,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             cause.span,\n                             target_id,\n                         );\n-                        let val = match ty.kind {\n-                            ty::Bool => \"true\",\n-                            ty::Char => \"'a'\",\n-                            ty::Int(_) | ty::Uint(_) => \"42\",\n-                            ty::Float(_) => \"3.14159\",\n-                            ty::Error | ty::Never => return,\n-                            _ => \"value\",\n-                        };\n-                        let msg = \"give it a value of the expected type\";\n-                        let label = destination.label\n-                            .map(|l| format!(\" {}\", l.ident))\n-                            .unwrap_or_else(String::new);\n-                        let sugg = format!(\"break{} {}\", label, val);\n-                        err.span_suggestion(expr.span, msg, sugg, Applicability::HasPlaceholders);\n+                        if let Some(val) = ty_kind_suggestion(ty) {\n+                            let label = destination.label\n+                                .map(|l| format!(\" {}\", l.ident))\n+                                .unwrap_or_else(String::new);\n+                            err.span_suggestion(\n+                                expr.span,\n+                                \"give it a value of the expected type\",\n+                                format!(\"break{} {}\", label, val),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n                     }, false);\n                 }\n             } else {\n@@ -1725,3 +1722,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_unit()\n     }\n }\n+\n+pub(super) fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n+    Some(match ty.kind {\n+        ty::Bool => \"true\",\n+        ty::Char => \"'a'\",\n+        ty::Int(_) | ty::Uint(_) => \"42\",\n+        ty::Float(_) => \"3.14159\",\n+        ty::Error | ty::Never => return None,\n+        _ => \"value\",\n+    })\n+}"}, {"sha": "845fc231429c8a285809fca6eacc294981fdfd9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 125, "deletions": 28, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -127,7 +127,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::source_map::{DUMMY_SP, original_sp};\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::{kw, sym, Ident};\n use syntax::util::parser::ExprPrecedence;\n \n use std::cell::{Cell, RefCell, Ref, RefMut};\n@@ -1800,12 +1800,12 @@ fn check_specialization_validity<'tcx>(\n \n fn check_impl_items_against_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_span: Span,\n+    full_impl_span: Span,\n     impl_id: DefId,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n     impl_item_refs: &[hir::ImplItemRef],\n ) {\n-    let impl_span = tcx.sess.source_map().def_span(impl_span);\n+    let impl_span = tcx.sess.source_map().def_span(full_impl_span);\n \n     // If the trait reference itself is erroneous (so the compilation is going\n     // to fail), skip checking the items here -- the `impl_item` table in `tcx`\n@@ -1925,35 +1925,132 @@ fn check_impl_items_against_trait<'tcx>(\n     }\n \n     if !missing_items.is_empty() {\n-        let mut err = struct_span_err!(tcx.sess, impl_span, E0046,\n-            \"not all trait items implemented, missing: `{}`\",\n-            missing_items.iter()\n-                .map(|trait_item| trait_item.ident.to_string())\n-                .collect::<Vec<_>>().join(\"`, `\"));\n-        err.span_label(impl_span, format!(\"missing `{}` in implementation\",\n-                missing_items.iter()\n-                    .map(|trait_item| trait_item.ident.to_string())\n-                    .collect::<Vec<_>>().join(\"`, `\")));\n-        for trait_item in missing_items {\n-            if let Some(span) = tcx.hir().span_if_local(trait_item.def_id) {\n-                err.span_label(span, format!(\"`{}` from trait\", trait_item.ident));\n-            } else {\n-                err.note_trait_signature(trait_item.ident.to_string(),\n-                                         trait_item.signature(tcx));\n-            }\n-        }\n-        err.emit();\n+        missing_items_err(tcx, impl_span, &missing_items, full_impl_span);\n     }\n \n     if !invalidated_items.is_empty() {\n         let invalidator = overridden_associated_type.unwrap();\n-        span_err!(tcx.sess, invalidator.span, E0399,\n-                  \"the following trait items need to be reimplemented \\\n-                   as `{}` was overridden: `{}`\",\n-                  invalidator.ident,\n-                  invalidated_items.iter()\n-                                   .map(|name| name.to_string())\n-                                   .collect::<Vec<_>>().join(\"`, `\"))\n+        span_err!(\n+            tcx.sess,\n+            invalidator.span,\n+            E0399,\n+            \"the following trait items need to be reimplemented as `{}` was overridden: `{}`\",\n+            invalidator.ident,\n+            invalidated_items.iter()\n+                .map(|name| name.to_string())\n+                .collect::<Vec<_>>().join(\"`, `\")\n+        )\n+    }\n+}\n+\n+fn missing_items_err(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    missing_items: &[ty::AssocItem],\n+    full_impl_span: Span,\n+) {\n+    let missing_items_msg = missing_items.iter()\n+        .map(|trait_item| trait_item.ident.to_string())\n+        .collect::<Vec<_>>().join(\"`, `\");\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing: `{}`\",\n+        missing_items_msg\n+    );\n+    err.span_label(impl_span, format!(\"missing `{}` in implementation\", missing_items_msg));\n+\n+    // `Span` before impl block closing brace.\n+    let hi = full_impl_span.hi() - BytePos(1);\n+    // Point at the place right before the closing brace of the relevant `impl` to suggest\n+    // adding the associated item at the end of its body.\n+    let sugg_sp = full_impl_span.with_lo(hi).with_hi(hi);\n+    // Obtain the level of indentation ending in `sugg_sp`.\n+    let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n+    // Make the whitespace that will make the suggestion have the right indentation.\n+    let padding: String = (0..indentation).map(|_| \" \").collect();\n+\n+    for trait_item in missing_items {\n+        let snippet = suggestion_signature(&trait_item, tcx);\n+        let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n+        let msg = format!(\"implement the missing item: `{}`\", snippet);\n+        let appl = Applicability::HasPlaceholders;\n+        if let Some(span) = tcx.hir().span_if_local(trait_item.def_id) {\n+            err.span_label(span, format!(\"`{}` from trait\", trait_item.ident));\n+            err.tool_only_span_suggestion(sugg_sp, &msg, code, appl);\n+        } else {\n+            err.span_suggestion_hidden(sugg_sp, &msg, code, appl);\n+        }\n+    }\n+    err.emit();\n+}\n+\n+/// Return placeholder code for the given function.\n+fn fn_sig_suggestion(sig: &ty::FnSig<'_>, ident: Ident) -> String {\n+    let args = sig.inputs()\n+        .iter()\n+        .map(|ty| Some(match ty.kind {\n+            ty::Param(param) if param.name == kw::SelfUpper => \"self\".to_string(),\n+            ty::Ref(reg, ref_ty, mutability) => {\n+                let reg = match &format!(\"{}\", reg)[..] {\n+                    \"'_\" | \"\" => String::new(),\n+                    reg => format!(\"{} \", reg),\n+                };\n+                match ref_ty.kind {\n+                    ty::Param(param) if param.name == kw::SelfUpper => {\n+                        format!(\"&{}{}self\", reg, mutability.prefix_str())\n+                    }\n+                    _ => format!(\"_: {:?}\", ty),\n+                }\n+            }\n+            _ => format!(\"_: {:?}\", ty),\n+        }))\n+        .chain(std::iter::once(if sig.c_variadic {\n+            Some(\"...\".to_string())\n+        } else {\n+            None\n+        }))\n+        .filter_map(|arg| arg)\n+        .collect::<Vec<String>>()\n+        .join(\", \");\n+    let output = sig.output();\n+    let output = if !output.is_unit() {\n+        format!(\" -> {:?}\", output)\n+    } else {\n+        String::new()\n+    };\n+\n+    let unsafety = sig.unsafety.prefix_str();\n+    // FIXME: this is not entirely correct, as the lifetimes from borrowed params will\n+    // not be present in the `fn` definition, not will we account for renamed\n+    // lifetimes between the `impl` and the `trait`, but this should be good enough to\n+    // fill in a significant portion of the missing code, and other subsequent\n+    // suggestions can help the user fix the code.\n+    format!(\"{}fn {}({}){} {{ unimplemented!() }}\", unsafety, ident, args, output)\n+}\n+\n+/// Return placeholder code for the given associated item.\n+/// Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a\n+/// structured suggestion.\n+fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n+    match assoc.kind {\n+        ty::AssocKind::Method => {\n+            // We skip the binder here because the binder would deanonymize all\n+            // late-bound regions, and we don't want method signatures to show up\n+            // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n+            // regions just fine, showing `fn(&MyType)`.\n+            fn_sig_suggestion(tcx.fn_sig(assoc.def_id).skip_binder(), assoc.ident)\n+        }\n+        ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.ident),\n+        // FIXME(type_alias_impl_trait): we should print bounds here too.\n+        ty::AssocKind::OpaqueTy => format!(\"type {} = Type;\", assoc.ident),\n+        ty::AssocKind::Const => {\n+            let ty = tcx.type_of(assoc.def_id);\n+            let val = expr::ty_kind_suggestion(ty).unwrap_or(\"value\");\n+            format!(\"const {}: {:?} = {};\", assoc.ident, ty, val)\n+        }\n     }\n }\n "}, {"sha": "151dc68162155c971f4be0694ce111e42b3aeff1", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -29,7 +29,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "271fbb6c87426b9726d2848d538b8d26dbab5be4", "filename": "src/test/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = note: `partial_cmp` from trait: `fn(&Self, &Rhs) -> std::option::Option<std::cmp::Ordering>`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { unimplemented!() }`\n \n error: aborting due to previous error\n "}, {"sha": "f8243528d72cff0243759b5afba8633df46c6f9a", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -4,9 +4,9 @@ error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `met\n LL | impl m1::X for X {\n    | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method` in implementation\n    |\n-   = note: `CONSTANT` from trait: `const CONSTANT: u32;`\n-   = note: `Type` from trait: `type Type;`\n-   = note: `method` from trait: `fn(&Self, std::string::String) -> <Self as m1::X>::Type`\n+   = help: implement the missing item: `const CONSTANT: u32 = 42;`\n+   = help: implement the missing item: `type Type = Type;`\n+   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { unimplemented!() }`\n \n error: aborting due to previous error\n "}, {"sha": "f23f421edc7c55dad352d0d48fb837acee5e377c", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -64,7 +64,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl Debug for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f88ce6c88db2397d094cdd9a80acd28da8509f10", "filename": "src/test/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Item`\n LL |         impl Iterator for Recurrence {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n-   = note: `Item` from trait: `type Item;`\n+   = help: implement the missing item: `type Item = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "46a820f1b76606c1f850dffb4522ea92c9a6d4ca", "filename": "src/test/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Output`\n LL | impl<C: Component> FnOnce<(C,)> for Prototype {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n-   = note: `Output` from trait: `type Output;`\n+   = help: implement the missing item: `type Output = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "a1f9b2550201903b5c03076a44b6d693cb853edd", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Target`\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n-   = note: `Target` from trait: `type Target;`\n+   = help: implement the missing item: `type Target = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "42f579a665e5fe0fcecd6a93a95d01bff609a421", "filename": "src/test/ui/suggestions/missing-trait-item.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+trait T {\n+    unsafe fn foo(a: &usize, b: &usize) -> usize;\n+    fn bar(&self, a: &usize, b: &usize) -> usize;\n+}\n+\n+mod foo {\n+    use super::T;\n+    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    } //~ ERROR not all trait items\n+\n+    impl T for usize { //~ ERROR not all trait items\n+        fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b4fca25ba2f11c586fa0a3ebdb395a5a4b53a497", "filename": "src/test/ui/suggestions/missing-trait-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+trait T {\n+    unsafe fn foo(a: &usize, b: &usize) -> usize;\n+    fn bar(&self, a: &usize, b: &usize) -> usize;\n+}\n+\n+mod foo {\n+    use super::T;\n+    impl T for () {} //~ ERROR not all trait items\n+\n+    impl T for usize { //~ ERROR not all trait items\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a9d7b472c93a16b9ed4d89538f9475a81713db7", "filename": "src/test/ui/suggestions/missing-trait-item.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c8572b545124b62dcd16fb4b354f2efe842f35/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr?ref=a3c8572b545124b62dcd16fb4b354f2efe842f35", "patch": "@@ -0,0 +1,25 @@\n+error[E0046]: not all trait items implemented, missing: `foo`, `bar`\n+  --> $DIR/missing-trait-item.rs:10:5\n+   |\n+LL |     unsafe fn foo(a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `foo` from trait\n+LL |     fn bar(&self, a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `bar` from trait\n+...\n+LL |     impl T for () {}\n+   |     ^^^^^^^^^^^^^ missing `foo`, `bar` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `foo`, `bar`\n+  --> $DIR/missing-trait-item.rs:12:5\n+   |\n+LL |     unsafe fn foo(a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `foo` from trait\n+LL |     fn bar(&self, a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `bar` from trait\n+...\n+LL |     impl T for usize {\n+   |     ^^^^^^^^^^^^^^^^ missing `foo`, `bar` in implementation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0046`."}]}