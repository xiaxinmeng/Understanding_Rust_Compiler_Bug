{"sha": "875e01e6166d4b5dea370023564703968a3cd92a", "node_id": "C_kwDOAAsO6NoAKDg3NWUwMWU2MTY2ZDRiNWRlYTM3MDAyMzU2NDcwMzk2OGEzY2Q5MmE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-22T10:08:59Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-22T10:08:59Z"}, "message": "Add `<*{const|mut} T>::{to|from}_bits`\n\nNamed based on the floating-point methods of the same name, as those are also about returning the *representation* of the value.", "tree": {"sha": "ab5c788464b1eca2908e35e687a3192401ca96c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab5c788464b1eca2908e35e687a3192401ca96c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/875e01e6166d4b5dea370023564703968a3cd92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/875e01e6166d4b5dea370023564703968a3cd92a", "html_url": "https://github.com/rust-lang/rust/commit/875e01e6166d4b5dea370023564703968a3cd92a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/875e01e6166d4b5dea370023564703968a3cd92a/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c48297ce21ac0dc5b36ff730377bdb7be6ece4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c48297ce21ac0dc5b36ff730377bdb7be6ece4", "html_url": "https://github.com/rust-lang/rust/commit/f7c48297ce21ac0dc5b36ff730377bdb7be6ece4"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "03f17e0697cdb5990255015d193ef7bde179a566", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/875e01e6166d4b5dea370023564703968a3cd92a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875e01e6166d4b5dea370023564703968a3cd92a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=875e01e6166d4b5dea370023564703968a3cd92a", "patch": "@@ -48,6 +48,54 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`Self::from_bits`].\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let array = [13, 42];\n+    /// let p0: *const i32 = &array[0];\n+    /// assert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *const i32 = &array[1];\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *const T`, but is more specific to enhance readability.\n+    /// The inverse method is [`Self::to_bits`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *const u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*const u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`]."}, {"sha": "5a5ce5ee121aee5075a9ee2523220d1a0e813e81", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/875e01e6166d4b5dea370023564703968a3cd92a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875e01e6166d4b5dea370023564703968a3cd92a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=875e01e6166d4b5dea370023564703968a3cd92a", "patch": "@@ -47,6 +47,55 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`Self::from_bits`].\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let mut array = [13, 42];\n+    /// let mut it = array.iter_mut();\n+    /// let p0: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *mut T`, but is more specific to enhance readability.\n+    /// The inverse method is [`Self::to_bits`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *mut u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`]."}]}