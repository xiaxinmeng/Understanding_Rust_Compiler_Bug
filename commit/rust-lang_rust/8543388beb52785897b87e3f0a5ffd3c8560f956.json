{"sha": "8543388beb52785897b87e3f0a5ffd3c8560f956", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NDMzODhiZWI1Mjc4NTg5N2I4N2UzZjBhNWZmZDNjODU2MGY5NTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-26T17:07:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-26T17:07:52Z"}, "message": "address review feedback", "tree": {"sha": "cdb1fcdfee072d3893e6e530390446c59ab5c609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb1fcdfee072d3893e6e530390446c59ab5c609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8543388beb52785897b87e3f0a5ffd3c8560f956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8543388beb52785897b87e3f0a5ffd3c8560f956", "html_url": "https://github.com/rust-lang/rust/commit/8543388beb52785897b87e3f0a5ffd3c8560f956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8543388beb52785897b87e3f0a5ffd3c8560f956/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3533204e999cf70378131c63e1abbfe812109792", "url": "https://api.github.com/repos/rust-lang/rust/commits/3533204e999cf70378131c63e1abbfe812109792", "html_url": "https://github.com/rust-lang/rust/commit/3533204e999cf70378131c63e1abbfe812109792"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "38519f759ae0504cdd483b396f1c451f4945ac70", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8543388beb52785897b87e3f0a5ffd3c8560f956/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8543388beb52785897b87e3f0a5ffd3c8560f956/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=8543388beb52785897b87e3f0a5ffd3c8560f956", "patch": "@@ -238,20 +238,21 @@ impl<T: ?Sized> *const T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`offset`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// `x.wrapping_offset(o).wrapping_offset(-o)` is always the same as `x` (if `-o` does not\n-    /// overflow). In other words, leaving the allocated object and then re-entering it later is\n-    /// permitted.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other\n+    /// words, leaving the allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -580,17 +581,19 @@ impl<T: ?Sized> *const T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`add`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n     /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n     /// allocated object and then re-entering it later is permitted.\n     ///\n@@ -643,17 +646,19 @@ impl<T: ?Sized> *const T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`sub`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n     /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n     /// allocated object and then re-entering it later is permitted.\n     ///"}, {"sha": "92f4e431de499dbf24ae88abeeb1be3020b0a97b", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8543388beb52785897b87e3f0a5ffd3c8560f956/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8543388beb52785897b87e3f0a5ffd3c8560f956/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=8543388beb52785897b87e3f0a5ffd3c8560f956", "patch": "@@ -244,20 +244,21 @@ impl<T: ?Sized> *mut T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`offset`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// `x.wrapping_offset(o).wrapping_offset(-o)` is always the same as `x` (if `-o` does not\n-    /// overflow). In other words, leaving the allocated object and then re-entering it later is\n-    /// permitted.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other\n+    /// words, leaving the allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -687,17 +688,19 @@ impl<T: ?Sized> *mut T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`add`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n     /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n     /// allocated object and then re-entering it later is permitted.\n     ///\n@@ -750,17 +753,19 @@ impl<T: ?Sized> *mut T {\n     /// It may *not* be used to access a different allocated object. Note that in Rust, every\n     /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n-    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n-    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n-    /// same allocated object.\n+    /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`sub`], this method basically delays the requirement of staying within the\n     /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n     /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n     /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n     /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n     /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n     /// allocated object and then re-entering it later is permitted.\n     ///"}]}