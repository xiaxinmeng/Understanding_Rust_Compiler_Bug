{"sha": "73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZjM1Y2ZiMjQwNjY3NTE4Yzg2MzZmYjhjOGNhMmE5Njc5YzRmMmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-08T12:32:36Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-08T12:43:45Z"}, "message": "Added tests illustrating when and when not to use the UGEH attribute w.r.t. types in negative position.", "tree": {"sha": "d3d91a6fe3eaacbe040951c60074983ce9fab11c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d91a6fe3eaacbe040951c60074983ce9fab11c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "html_url": "https://github.com/rust-lang/rust/commit/73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73f35cfb240667518c8636fb8c8ca2a9679c4f2b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eda5b508f14a262ffd6aabee631b5e39ce45874", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eda5b508f14a262ffd6aabee631b5e39ce45874", "html_url": "https://github.com/rust-lang/rust/commit/7eda5b508f14a262ffd6aabee631b5e39ce45874"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "89e6d68567d47eb959a2c375cdfe0d89085f3d04", "filename": "src/test/compile-fail/issue28498-reject-passed-to-fn.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/73f35cfb240667518c8636fb8c8ca2a9679c4f2b/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f35cfb240667518c8636fb8c8ca2a9679c4f2b/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-passed-to-fn.rs?ref=73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Demonstrate that a type param in negative position causes dropck to reject code\n+// that might indirectly access previously dropped value.\n+//\n+// Compare with run-pass/issue28498-ugeh-with-passed-to-fn.rs\n+\n+#[derive(Debug)]\n+struct ScribbleOnDrop(String);\n+\n+impl Drop for ScribbleOnDrop {\n+    fn drop(&mut self) {\n+        self.0 = format!(\"DROPPED\");\n+    }\n+}\n+\n+struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n+\n+impl<T> Drop for Foo<T> {\n+    #[unsafe_destructor_blind_to_params]\n+    fn drop(&mut self) {\n+        // Use of `unsafe_destructor_blind_to_params` is unsound,\n+        // because we pass `T` to the callback in `self.2`\n+        // below, and thus potentially read from borrowed data.\n+        println!(\"Dropping Foo({}, {})\", self.0, (self.2)(&self.1));\n+    }\n+}\n+\n+fn callback(s: & &ScribbleOnDrop) -> String { format!(\"{:?}\", s) }\n+\n+fn main() {\n+    let (last_dropped, foo0);\n+    let (foo1, first_dropped);\n+\n+    last_dropped = ScribbleOnDrop(format!(\"last\"));\n+    first_dropped = ScribbleOnDrop(format!(\"first\"));\n+    foo0 = Foo(0, &last_dropped, Box::new(callback));\n+    //~^ ERROR `last_dropped` does not live long enough\n+    foo1 = Foo(1, &first_dropped, Box::new(callback));\n+    //~^ ERROR `first_dropped` does not live long enough\n+\n+    println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n+}"}, {"sha": "bb430ea3e33a8f11f674f23cd9b2ccd5cefb3d15", "filename": "src/test/run-pass/issue28498-ugeh-with-passed-to-fn.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/73f35cfb240667518c8636fb8c8ca2a9679c4f2b/src%2Ftest%2Frun-pass%2Fissue28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f35cfb240667518c8636fb8c8ca2a9679c4f2b/src%2Ftest%2Frun-pass%2Fissue28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue28498-ugeh-with-passed-to-fn.rs?ref=73f35cfb240667518c8636fb8c8ca2a9679c4f2b", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Demonstrate the use of the unguarded escape hatch with a type param in negative position\n+// to assert that destructor will not access any dead data.\n+//\n+// Compare with compile-fail/issue28498-reject-lifetime-param.rs\n+\n+// Demonstrate that a type param in negative position causes dropck to reject code\n+// that might indirectly access previously dropped value.\n+//\n+// Compare with run-pass/issue28498-ugeh-with-passed-to-fn.rs\n+\n+#![feature(dropck_parametricity)]\n+\n+#[derive(Debug)]\n+struct ScribbleOnDrop(String);\n+\n+impl Drop for ScribbleOnDrop {\n+    fn drop(&mut self) {\n+        self.0 = format!(\"DROPPED\");\n+    }\n+}\n+\n+struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n+\n+impl<T> Drop for Foo<T> {\n+    #[unsafe_destructor_blind_to_params]\n+    fn drop(&mut self) {\n+        // Use of `unsafe_destructor_blind_to_params` is sound,\n+        // because destructor never passes a `self.1` to the callback\n+        // (in `self.2`) despite having it available.\n+        println!(\"Dropping Foo({}, _)\", self.0);\n+    }\n+}\n+\n+fn callback(s: & &ScribbleOnDrop) -> String { format!(\"{:?}\", s) }\n+\n+fn main() {\n+    let (last_dropped, foo0);\n+    let (foo1, first_dropped);\n+\n+    last_dropped = ScribbleOnDrop(format!(\"last\"));\n+    first_dropped = ScribbleOnDrop(format!(\"first\"));\n+    foo0 = Foo(0, &last_dropped, Box::new(callback));\n+    foo1 = Foo(1, &first_dropped, Box::new(callback));\n+\n+    println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n+}"}]}