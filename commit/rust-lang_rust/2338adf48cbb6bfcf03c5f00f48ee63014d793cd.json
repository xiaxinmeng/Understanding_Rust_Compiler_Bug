{"sha": "2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzhhZGY0OGNiYjZiZmNmMDNjNWYwMGY0OGVlNjMwMTRkNzkzY2Q=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-02-28T09:09:08Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-04-28T08:55:23Z"}, "message": "Allow MIR borrowck to catch unused mutable locals", "tree": {"sha": "1b40817d44585719634e9c4dd937254961090273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b40817d44585719634e9c4dd937254961090273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "html_url": "https://github.com/rust-lang/rust/commit/2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2338adf48cbb6bfcf03c5f00f48ee63014d793cd/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "html_url": "https://github.com/rust-lang/rust/commit/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "501f77547e282c1320b7796c14a0e83f39174cd1", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2338adf48cbb6bfcf03c5f00f48ee63014d793cd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2338adf48cbb6bfcf03c5f00f48ee63014d793cd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "patch": "@@ -247,6 +247,20 @@ impl<'tcx> Mir<'tcx> {\n         })\n     }\n \n+    /// Returns an iterator over all user-declared mutable locals.\n+    #[inline]\n+    pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n+        (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n+            let local = Local::new(index);\n+            let decl = &self.local_decls[local];\n+            if decl.is_user_variable && decl.mutability == Mutability::Mut {\n+                Some(local)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n     /// Returns an iterator over all function arguments.\n     #[inline]\n     pub fn args_iter(&self) -> impl Iterator<Item=Local> {"}, {"sha": "6cebd290b9a25908f6fade7234981b0513c3618b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2338adf48cbb6bfcf03c5f00f48ee63014d793cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2338adf48cbb6bfcf03c5f00f48ee63014d793cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2338adf48cbb6bfcf03c5f00f48ee63014d793cd", "patch": "@@ -17,10 +17,11 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Place};\n-use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n-use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n-use rustc::mir::{ClosureRegionRequirements, Local};\n+use rustc::lint::builtin::UNUSED_MUT;\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, ClearCrossCrate, Local};\n+use rustc::mir::{Location, Place, Mir, Mutability, Operand, Projection, ProjectionElem};\n+use rustc::mir::{Rvalue, Field, Statement, StatementKind, Terminator, TerminatorKind};\n+use rustc::mir::ClosureRegionRequirements;\n \n use rustc_data_structures::control_flow_graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n@@ -236,7 +237,8 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n         moved_error_reported: FxHashSet(),\n-        nonlexical_regioncx: regioncx,\n+        nonlexical_regioncx: opt_regioncx,\n+        used_mut: FxHashSet(),\n         nonlexical_cause_info: None,\n         borrow_set,\n         dominators,\n@@ -287,6 +289,9 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     /// This field keeps track of errors reported in the checking of moved variables,\n     /// so that we don't report report seemingly duplicate errors.\n     moved_error_reported: FxHashSet<Place<'tcx>>,\n+    /// This field keeps track of all the local variables that are declared mut and are mutated.\n+    /// Used for the warning issued by an unused mutable local variable.\n+    used_mut: FxHashSet<Local>,\n     /// Non-lexical region inference context, if NLL is enabled.  This\n     /// contains the results from region inference and lets us e.g.\n     /// find out which CFG points are contained in each borrow region.\n@@ -434,6 +439,22 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n \n         self.check_activations(location, span, flow_state);\n \n+        for local in self.mir.mut_vars_iter().filter(|local| !self.used_mut.contains(local)) {\n+            if let ClearCrossCrate::Set(ref vsi) = self.mir.visibility_scope_info {\n+                let source_info = self.mir.local_decls[local].source_info;\n+                let mut_span = self.tcx.sess.codemap().span_until_non_whitespace(source_info.span);\n+\n+                self.tcx.struct_span_lint_node(\n+                    UNUSED_MUT,\n+                    vsi[source_info.scope].lint_root,\n+                    source_info.span,\n+                    \"variable does not need to be mutable\"\n+                )\n+                .span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned())\n+                .emit();\n+            }\n+        }\n+\n         match term.kind {\n             TerminatorKind::SwitchInt {\n                 ref discr,\n@@ -1594,7 +1615,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ///\n     /// Returns true if an error is reported, false otherwise.\n     fn check_access_permissions(\n-        &self,\n+        &mut self,\n         (place, span): (&Place<'tcx>, Span),\n         kind: ReadOrWrite,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n@@ -1631,7 +1652,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 err.emit();\n             },\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {\n-\n+                if let Place::Local(local) = *place {\n+                    self.used_mut.insert(local);\n+                }\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n                     let mut err_info = None;"}]}