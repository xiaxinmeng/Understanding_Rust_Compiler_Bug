{"sha": "cd62ef3450c500748486d61edbce4414889969aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjJlZjM0NTBjNTAwNzQ4NDg2ZDYxZWRiY2U0NDE0ODg5OTY5YWE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-15T17:16:40Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-15T17:16:40Z"}, "message": "Merge pull request #56 from Manishearth/identity_op\n\nnew lint: identity_op, refactored bit_masks a bit", "tree": {"sha": "d41f1b2171287dd2fb3c15bb7d4b91888785e1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41f1b2171287dd2fb3c15bb7d4b91888785e1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd62ef3450c500748486d61edbce4414889969aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd62ef3450c500748486d61edbce4414889969aa", "html_url": "https://github.com/rust-lang/rust/commit/cd62ef3450c500748486d61edbce4414889969aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd62ef3450c500748486d61edbce4414889969aa/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f527ea810b304bf7da2b97d27fe979cdc7c8612", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f527ea810b304bf7da2b97d27fe979cdc7c8612", "html_url": "https://github.com/rust-lang/rust/commit/6f527ea810b304bf7da2b97d27fe979cdc7c8612"}, {"sha": "edf747ab7617c38381e791f56c0376f0f8fea559", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf747ab7617c38381e791f56c0376f0f8fea559", "html_url": "https://github.com/rust-lang/rust/commit/edf747ab7617c38381e791f56c0376f0f8fea559"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "47747d86e267644f6601c04a662336e5aaecc1ea", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -21,6 +21,7 @@ Lints included in this crate:\n  - `float_cmp`: Warns on `==` or `!=` comparisons of floaty typed values. As floating-point operations usually involve rounding errors, it is always better to check for approximate equality within some small bounds\n  - `precedence`: Warns on expressions where precedence may trip up the unwary reader of the source and suggests adding parenthesis, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n  - `redundant_closure`: Warns on usage of eta-reducible closures like `|a| foo(a)` (which can be written as just `foo`)\n+ - `identity_op`: Warns on identity operations like `x + 0` or `y / 1` (which can be reduced to `x` and `y`, respectively)\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "ec4495539d2a083221967b50bfc005cac5218507", "filename": "src/identity_op.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -0,0 +1,82 @@\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use rustc::middle::const_eval::lookup_const_by_id;\n+use rustc::middle::def::*;\n+use syntax::ast::*;\n+use syntax::ast_util::{is_comparison_binop, binop_to_string};\n+use syntax::ptr::P;\n+use syntax::codemap::Span;\n+\n+declare_lint! { pub IDENTITY_OP, Warn,\n+    \"Warn on identity operations, e.g. '_ + 0'\"}\n+    \n+#[derive(Copy,Clone)]\n+pub struct IdentityOp;\n+\n+impl LintPass for IdentityOp {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IDENTITY_OP)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+\t\tif let ExprBinary(ref cmp, ref left, ref right) = e.node {\n+\t\t\tmatch cmp.node {\n+\t\t\t\tBiAdd | BiBitOr | BiBitXor => {\n+\t\t\t\t\tcheck(cx, left, 0, e.span, right.span);\n+\t\t\t\t\tcheck(cx, right, 0, e.span, left.span);\n+\t\t\t\t},\n+\t\t\t\tBiShl | BiShr | BiSub => \n+\t\t\t\t\tcheck(cx, right, 0, e.span, left.span),\n+\t\t\t\tBiMul => {\n+\t\t\t\t\tcheck(cx, left, 1, e.span, right.span);\n+\t\t\t\t\tcheck(cx, right, 1, e.span, left.span);\n+\t\t\t\t},\n+\t\t\t\tBiDiv =>\n+\t\t\t\t\tcheck(cx, right, 1, e.span, left.span),\n+\t\t\t\tBiBitAnd => {\n+\t\t\t\t\tcheck(cx, left, -1, e.span, right.span);\n+\t\t\t\t\tcheck(cx, right, -1, e.span, left.span);\n+\t\t\t\t},\n+\t\t\t\t_ => ()\n+\t\t\t}\n+\t\t}\n+    }\n+}\n+\n+\n+fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n+\tif have_lit(cx, e, m) {\n+\t\tlet map = cx.sess().codemap();\n+\t\tcx.span_lint(IDENTITY_OP, span, &format!(\n+\t\t\t\"The operation is ineffective. Consider reducing it to '{}'\", \n+\t\t\t&*map.span_to_snippet(arg).unwrap_or(\"..\".to_string())));\n+\t}\n+}\n+\n+fn have_lit(cx: &Context, e : &Expr, m: i8) -> bool {\n+\tmatch &e.node {\n+\t\t&ExprUnary(UnNeg, ref litexp) => have_lit(cx, litexp, -m), \n+\t\t&ExprLit(ref lit) => {\n+\t\t\tmatch (&lit.node, m) {\n+\t\t\t\t(&LitInt(0, _), 0) => true,\n+\t\t\t\t(&LitInt(1, SignedIntLit(_, Plus)), 1) => true,\n+\t\t\t\t(&LitInt(1, UnsuffixedIntLit(Plus)), 1) => true,\n+\t\t\t\t(&LitInt(1, SignedIntLit(_, Minus)), -1) => true,\n+\t\t\t\t(&LitInt(1, UnsuffixedIntLit(Minus)), -1) => true,\n+\t\t\t\t_ => false\n+\t\t\t}\n+\t\t},\n+\t\t&ExprParen(ref p) => have_lit(cx, p, m),\n+\t\t&ExprPath(_, _) => {\n+                match cx.tcx.def_map.borrow().get(&e.id) {\n+                    Some(&PathResolution { base_def: DefConst(def_id), ..}) => \n+\t\t\t\t\t\tmatch lookup_const_by_id(cx.tcx, def_id, Option::None) {\n+\t\t\t\t\t\t\tSome(l) => have_lit(cx, l, m),\n+\t\t\t\t\t\t\tNone => false\n+\t\t\t\t\t\t},\n+                    _ => false\n+                }\n+            }\n+\t\t_ => false\n+\t}\n+}"}, {"sha": "c9585d2ebbafeaa438c6c5e754a2e061a1f6a683", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -22,6 +22,7 @@ pub mod ptr_arg;\n pub mod needless_bool;\n pub mod approx_const;\n pub mod eta_reduction;\n+pub mod identity_op;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -38,6 +39,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::FloatCmp as LintPassObject);\n     reg.register_lint_pass(box misc::Precedence as LintPassObject);\n     reg.register_lint_pass(box eta_reduction::EtaPass as LintPassObject);\n+    reg.register_lint_pass(box identity_op::IdentityOp as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -50,5 +52,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            misc::CMP_NAN, misc::FLOAT_CMP,\n                                            misc::PRECEDENCE,\n                                            eta_reduction::REDUNDANT_CLOSURE,\n+                                           identity_op::IDENTITY_OP,\n                                            ]);\n }"}, {"sha": "e45b789800e8c042d8d34c4fd3c9a7d72268f9b2", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -5,7 +5,7 @@ const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n #[deny(bad_bit_mask)]\n-#[allow(ineffective_bit_mask)]\n+#[allow(ineffective_bit_mask, identity_op)]\n fn main() {\n \tlet x = 5;\n \t"}, {"sha": "07b15625b2c0cb0edb319e3a980adac469ef178e", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -6,6 +6,7 @@ fn id<X>(x: X) -> X {\n }\n \n #[deny(eq_op)]\n+#[allow(identity_op)]\n fn main() {\n \t// simple values and comparisons\n \t1 == 1; //~ERROR"}, {"sha": "6c17d30fac4251edbe267ae9f473061aae487fea", "filename": "tests/compile-fail/identity_op.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd62ef3450c500748486d61edbce4414889969aa/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=cd62ef3450c500748486d61edbce4414889969aa", "patch": "@@ -0,0 +1,24 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+const ONE : i64 = 1;\n+const NEG_ONE : i64 = -1;\n+const ZERO : i64 = 0;\n+\n+#[deny(identity_op)]\n+fn main() {\n+\tlet x = 0;\n+\t\n+\tx + 0; //~ERROR\n+\t0 + x; //~ERROR\n+\tx - ZERO; //~ERROR\n+\tx | (0); //~ERROR\n+\t((ZERO)) | x; //~ERROR\n+\t\t\n+\tx * 1; //~ERROR\n+\t1 * x; //~ERROR\n+\tx / ONE; //~ERROR\n+\t\n+\tx & NEG_ONE; //~ERROR\n+\t-1 & x; //~ERROR\n+}"}]}