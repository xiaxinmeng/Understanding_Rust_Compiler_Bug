{"sha": "460ddde1762a429265445f7bfddc6589d56f48e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGRkZGUxNzYyYTQyOTI2NTQ0NWY3YmZkZGM2NTg5ZDU2ZjQ4ZTY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-09T17:43:47Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-09T18:05:54Z"}, "message": "Add tests", "tree": {"sha": "84974bf5d9439c22ef426f6cdf800dd7749290b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84974bf5d9439c22ef426f6cdf800dd7749290b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460ddde1762a429265445f7bfddc6589d56f48e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460ddde1762a429265445f7bfddc6589d56f48e6", "html_url": "https://github.com/rust-lang/rust/commit/460ddde1762a429265445f7bfddc6589d56f48e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460ddde1762a429265445f7bfddc6589d56f48e6/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5698faf4c3d1964d2a644f7b0856d5b3577df73", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5698faf4c3d1964d2a644f7b0856d5b3577df73", "html_url": "https://github.com/rust-lang/rust/commit/e5698faf4c3d1964d2a644f7b0856d5b3577df73"}], "stats": {"total": 305, "additions": 305, "deletions": 0}, "files": [{"sha": "f695a7f2cb8d489e4d44a1d03ad24ab29c030083", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -1113,6 +1113,7 @@ dependencies = [\n  \"ra_proc_macro\",\n  \"ra_tt\",\n  \"serde_derive\",\n+ \"test_utils\",\n ]\n \n [[package]]"}, {"sha": "1e0f5033920ce9001e8a92207ac2814c8d0f6686", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -14,6 +14,7 @@ ra_mbe = { path = \"../ra_mbe\" }\n ra_proc_macro = { path = \"../ra_proc_macro\" }\n goblin = \"0.2.1\"\n libloading = \"0.6.0\"\n+test_utils = { path = \"../test_utils\" }\n \n [dev-dependencies]\n cargo_metadata = \"0.9.1\""}, {"sha": "59716cbb3b0323bb0d0a7cd44cb3bdb544c20dae", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -52,3 +52,6 @@ pub fn list_macros(task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "24507d98d76f686b9372383c5bafec0eca2e4a32", "filename": "crates/ra_proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -0,0 +1,188 @@\n+SUBTREE $\n+  PUNCH   # [alone] 4294967295\n+  SUBTREE [] 4294967295\n+    IDENT   allow 4294967295\n+    SUBTREE () 4294967295\n+      IDENT   non_upper_case_globals 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   unused_attributes 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   unused_qualifications 4294967295\n+  IDENT   const 4294967295\n+  IDENT   _IMPL_SERIALIZE_FOR_Foo 4294967295\n+  PUNCH   : [alone] 4294967295\n+  SUBTREE () 4294967295\n+  PUNCH   = [alone] 4294967295\n+  SUBTREE {} 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   unknown_lints 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   cfg_attr 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   feature 4294967295\n+        PUNCH   = [alone] 4294967295\n+        SUBTREE $\n+          LITERAL \"cargo-clippy\" 0\n+        PUNCH   , [alone] 4294967295\n+        IDENT   allow 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   useless_attribute 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   rust_2018_idioms 4294967295\n+    IDENT   extern 4294967295\n+    IDENT   crate 4294967295\n+    IDENT   serde 4294967295\n+    IDENT   as 4294967295\n+    IDENT   _serde 4294967295\n+    PUNCH   ; [alone] 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   unused_macros 4294967295\n+    IDENT   macro_rules 4294967295\n+    PUNCH   ! [alone] 4294967295\n+    IDENT   try 4294967295\n+    SUBTREE {} 4294967295\n+      SUBTREE () 4294967295\n+        PUNCH   $ [alone] 4294967295\n+        IDENT   __expr 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   expr 4294967295\n+      PUNCH   = [joint] 4294967295\n+      PUNCH   > [alone] 4294967295\n+      SUBTREE {} 4294967295\n+        IDENT   match 4294967295\n+        PUNCH   $ [alone] 4294967295\n+        IDENT   __expr 4294967295\n+        SUBTREE {} 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   export 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Ok 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __val 4294967295\n+          PUNCH   = [joint] 4294967295\n+          PUNCH   > [alone] 4294967295\n+          IDENT   __val 4294967295\n+          PUNCH   , [alone] 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   export 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Err 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __err 4294967295\n+          PUNCH   = [joint] 4294967295\n+          PUNCH   > [alone] 4294967295\n+          SUBTREE {} 4294967295\n+            IDENT   return 4294967295\n+            IDENT   _serde 4294967295\n+            PUNCH   : [joint] 4294967295\n+            PUNCH   : [alone] 4294967295\n+            IDENT   export 4294967295\n+            PUNCH   : [joint] 4294967295\n+            PUNCH   : [alone] 4294967295\n+            IDENT   Err 4294967295\n+            SUBTREE () 4294967295\n+              IDENT   __err 4294967295\n+            PUNCH   ; [alone] 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   automatically_derived 4294967295\n+    IDENT   impl 4294967295\n+    IDENT   _serde 4294967295\n+    PUNCH   : [joint] 4294967295\n+    PUNCH   : [alone] 4294967295\n+    IDENT   Serialize 4294967295\n+    IDENT   for 4294967295\n+    IDENT   Foo 1\n+    SUBTREE {} 4294967295\n+      IDENT   fn 4294967295\n+      IDENT   serialize 4294967295\n+      PUNCH   < [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   > [alone] 4294967295\n+      SUBTREE () 4294967295\n+        PUNCH   & [alone] 4294967295\n+        IDENT   self 4294967295\n+        PUNCH   , [alone] 4294967295\n+        IDENT   __serializer 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   __S 4294967295\n+      PUNCH   - [joint] 4294967295\n+      PUNCH   > [alone] 4294967295\n+      IDENT   _serde 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   export 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Result 4294967295\n+      PUNCH   < [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Ok 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Error 4294967295\n+      PUNCH   > [alone] 4294967295\n+      IDENT   where 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   _serde 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Serializer 4294967295\n+      PUNCH   , [alone] 4294967295\n+      SUBTREE {} 4294967295\n+        IDENT   let 4294967295\n+        IDENT   __serde_state 4294967295\n+        PUNCH   = [alone] 4294967295\n+        IDENT   try 4294967295\n+        PUNCH   ! [alone] 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Serializer 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   serialize_struct 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __serializer 4294967295\n+            PUNCH   , [alone] 4294967295\n+            LITERAL \"Foo\" 4294967295\n+            PUNCH   , [alone] 4294967295\n+            IDENT   false 4294967295\n+            IDENT   as 4294967295\n+            IDENT   usize 4294967295\n+        PUNCH   ; [alone] 4294967295\n+        IDENT   _serde 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   ser 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   SerializeStruct 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   end 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   __serde_state 4294967295\n+  PUNCH   ; [alone] 4294967295\n\\ No newline at end of file"}, {"sha": "03f79bc5d60f22b3177ea7e7cf46d69e6b171ad0", "filename": "crates/ra_proc_macro_srv/src/tests/mod.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -0,0 +1,47 @@\n+//! proc-macro tests\n+\n+#[macro_use]\n+mod utils;\n+use test_utils::assert_eq_text;\n+use utils::*;\n+\n+#[test]\n+fn test_derive_serialize_proc_macro() {\n+    assert_expand(\n+        \"serde_derive\",\n+        \"Serialize\",\n+        \"1.0.104\",\n+        r##\"struct Foo {}\"##,\n+        include_str!(\"fixtures/test_serialize_proc_macro.txt\"),\n+    );\n+}\n+\n+#[test]\n+fn test_derive_serialize_proc_macro_failed() {\n+    assert_expand(\n+        \"serde_derive\",\n+        \"Serialize\",\n+        \"1.0.104\",\n+        r##\"\n+    struct {}\n+\"##,\n+        r##\"\n+SUBTREE $\n+  IDENT   compile_error 4294967295\n+  PUNCH   ! [alone] 4294967295\n+  SUBTREE {} 4294967295\n+    LITERAL \"expected identifier\" 4294967295\n+\"##,\n+    );\n+}\n+\n+#[test]\n+fn test_derive_proc_macro_list() {\n+    let res = list(\"serde_derive\", \"1.0.104\").join(\"\\n\");\n+\n+    assert_eq_text!(\n+        &res,\n+        r#\"Serialize [CustomDerive]\n+Deserialize [CustomDerive]\"#\n+    );\n+}"}, {"sha": "1ee409449222a2f59d0497c8e04b5307c4ec162b", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ddde1762a429265445f7bfddc6589d56f48e6/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=460ddde1762a429265445f7bfddc6589d56f48e6", "patch": "@@ -0,0 +1,65 @@\n+//! utils used in proc-macro tests\n+\n+use crate::dylib;\n+use crate::list_macros;\n+pub use difference::Changeset as __Changeset;\n+use ra_proc_macro::ListMacrosTask;\n+use std::str::FromStr;\n+use test_utils::assert_eq_text;\n+\n+mod fixtures {\n+    use cargo_metadata::{parse_messages, Message};\n+    use std::process::Command;\n+\n+    // Use current project metadata to get the proc-macro dylib path\n+    pub fn dylib_path(crate_name: &str, version: &str) -> std::path::PathBuf {\n+        let command = Command::new(\"cargo\")\n+            .args(&[\"check\", \"--message-format\", \"json\"])\n+            .output()\n+            .unwrap()\n+            .stdout;\n+\n+        for message in parse_messages(command.as_slice()) {\n+            match message.unwrap() {\n+                Message::CompilerArtifact(artifact) => {\n+                    if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n+                        let repr = format!(\"{} {}\", crate_name, version);\n+                        if artifact.package_id.repr.starts_with(&repr) {\n+                            return artifact.filenames[0].clone();\n+                        }\n+                    }\n+                }\n+                _ => (), // Unknown message\n+            }\n+        }\n+\n+        panic!(\"No proc-macro dylib for {} found!\", crate_name);\n+    }\n+}\n+\n+fn parse_string(code: &str) -> Option<crate::rustc_server::TokenStream> {\n+    Some(crate::rustc_server::TokenStream::from_str(code).unwrap())\n+}\n+\n+pub fn assert_expand(\n+    crate_name: &str,\n+    macro_name: &str,\n+    version: &str,\n+    fixture: &str,\n+    expect: &str,\n+) {\n+    let path = fixtures::dylib_path(crate_name, version);\n+    let expander = dylib::Expander::new(&path).unwrap();\n+    let fixture = parse_string(fixture).unwrap();\n+\n+    let res = expander.expand(macro_name, &fixture.subtree, None).unwrap();\n+    assert_eq_text!(&format!(\"{:?}\", res), &expect.trim());\n+}\n+\n+pub fn list(crate_name: &str, version: &str) -> Vec<String> {\n+    let path = fixtures::dylib_path(crate_name, version);\n+    let task = ListMacrosTask { lib: path };\n+\n+    let res = list_macros(&task).unwrap();\n+    res.macros.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n+}"}]}