{"sha": "b5020648fe294a1f139586e4243903d8c1a105b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MDIwNjQ4ZmUyOTRhMWYxMzk1ODZlNDI0MzkwM2Q4YzFhMTA1Yjg=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-10-23T06:11:38Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-06T02:24:13Z"}, "message": "Implemented CoverageGraph of BasicCoverageBlocks", "tree": {"sha": "e3dbb52086281fac3491100066e8d3fb98367a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3dbb52086281fac3491100066e8d3fb98367a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5020648fe294a1f139586e4243903d8c1a105b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5020648fe294a1f139586e4243903d8c1a105b8", "html_url": "https://github.com/rust-lang/rust/commit/b5020648fe294a1f139586e4243903d8c1a105b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5020648fe294a1f139586e4243903d8c1a105b8/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ae4c2cb6d7e58ad0f9c12047e3d747c26a9d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ae4c2cb6d7e58ad0f9c12047e3d747c26a9d71", "html_url": "https://github.com/rust-lang/rust/commit/c7ae4c2cb6d7e58ad0f9c12047e3d747c26a9d71"}], "stats": {"total": 1056, "additions": 563, "deletions": 493}, "files": [{"sha": "7eb2d33453c3e9e50b17725a520c2301b2393c57", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -1,4 +1,4 @@\n-use super::graph::BasicCoverageBlocks;\n+use super::graph::CoverageGraph;\n use super::spans::CoverageSpan;\n \n use crate::util::pretty;\n@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n pub(crate) fn dump_coverage_spanview(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n-    basic_coverage_blocks: &BasicCoverageBlocks,\n+    basic_coverage_blocks: &CoverageGraph,\n     pass_name: &str,\n     coverage_spans: &Vec<CoverageSpan>,\n ) {\n@@ -28,20 +28,20 @@ pub(crate) fn dump_coverage_spanview(\n         .expect(\"Unexpected IO error dumping coverage spans as HTML\");\n }\n \n-/// Converts the computed `BasicCoverageBlock`s into `SpanViewable`s.\n+/// Converts the computed `BasicCoverageBlockData`s into `SpanViewable`s.\n fn span_viewables(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n-    basic_coverage_blocks: &BasicCoverageBlocks,\n+    basic_coverage_blocks: &CoverageGraph,\n     coverage_spans: &Vec<CoverageSpan>,\n ) -> Vec<SpanViewable> {\n     let mut span_viewables = Vec::new();\n     for coverage_span in coverage_spans {\n         let tooltip = coverage_span.format_coverage_statements(tcx, mir_body);\n-        let CoverageSpan { span, bcb_leader_bb: bb, .. } = coverage_span;\n-        let bcb = &basic_coverage_blocks[*bb];\n-        let id = bcb.id();\n-        let leader_bb = bcb.leader_bb();\n+        let CoverageSpan { span, bcb, .. } = coverage_span;\n+        let bcb_data = &basic_coverage_blocks[*bcb];\n+        let id = bcb_data.id();\n+        let leader_bb = bcb_data.leader_bb();\n         span_viewables.push(SpanViewable { bb: leader_bb, span: *span, id, tooltip });\n     }\n     span_viewables"}, {"sha": "3d3e76f907b64b23ee655479f32919cee784ec72", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 301, "deletions": 157, "changes": 458, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -1,152 +1,100 @@\n+use rustc_data_structures::graph::dominators::{self, Dominators};\n+use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::{self, BasicBlock, BasicBlockData, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n+\n+use std::ops::{Index, IndexMut};\n \n const ID_SEPARATOR: &str = \",\";\n \n-/// A BasicCoverageBlock (BCB) represents the maximal-length sequence of CFG (MIR) BasicBlocks\n-/// without conditional branches.\n-///\n-/// The BCB allows coverage analysis to be performed on a simplified projection of the underlying\n-/// MIR CFG, without altering the original CFG. Note that running the MIR `SimplifyCfg` transform,\n-/// is not sufficient, and therefore not necessary, since the BCB-based CFG projection is a more\n-/// aggressive simplification. For example:\n-///\n-///   * The BCB CFG projection ignores (trims) branches not relevant to coverage, such as unwind-\n-///     related code that is injected by the Rust compiler but has no physical source code to\n-///     count. This also means a BasicBlock with a `Call` terminator can be merged into its\n-///     primary successor target block, in the same BCB.\n-///   * Some BasicBlock terminators support Rust-specific concerns--like borrow-checking--that are\n-///     not relevant to coverage analysis. `FalseUnwind`, for example, can be treated the same as\n-///     a `Goto`, and merged with its successor into the same BCB.\n-///\n-/// Each BCB with at least one computed `CoverageSpan` will have no more than one `Counter`.\n-/// In some cases, a BCB's execution count can be computed by `CounterExpression`. Additional\n-/// disjoint `CoverageSpan`s in a BCB can also be counted by `CounterExpression` (by adding `ZERO`\n-/// to the BCB's primary counter or expression).\n-///\n-/// Dominator/dominated relationships (which are fundamental to the coverage analysis algorithm)\n-/// between two BCBs can be computed using the `mir::Body` `dominators()` with any `BasicBlock`\n-/// member of each BCB. (For consistency, BCB's use the first `BasicBlock`, also referred to as the\n-/// `bcb_leader_bb`.)\n-///\n-/// The BCB CFG projection is critical to simplifying the coverage analysis by ensuring graph\n-/// path-based queries (`is_dominated_by()`, `predecessors`, `successors`, etc.) have branch\n-/// (control flow) significance.\n-#[derive(Debug, Clone)]\n-pub(crate) struct BasicCoverageBlock {\n-    pub blocks: Vec<BasicBlock>,\n+/// A coverage-specific simplification of the MIR control flow graph (CFG). The `CoverageGraph`s\n+/// nodes are `BasicCoverageBlock`s, which encompass one or more MIR `BasicBlock`s, plus a\n+/// `CoverageKind` counter (to be added by `CoverageCounters::make_bcb_counters`), and an optional\n+/// set of additional counters--if needed--to count incoming edges, if there are more than one.\n+/// (These \"edge counters\" are eventually converted into new MIR `BasicBlock`s.)\n+pub(crate) struct CoverageGraph {\n+    bcbs: IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+    bb_to_bcb: IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+    pub successors: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    pub predecessors: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    dominators: Option<Dominators<BasicCoverageBlock>>,\n }\n \n-impl BasicCoverageBlock {\n-    pub fn leader_bb(&self) -> BasicBlock {\n-        self.blocks[0]\n-    }\n+impl CoverageGraph {\n+    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n+        let (bcbs, bb_to_bcb) = Self::compute_basic_coverage_blocks(mir_body);\n \n-    pub fn id(&self) -> String {\n-        format!(\n-            \"@{}\",\n-            self.blocks\n-                .iter()\n-                .map(|bb| bb.index().to_string())\n-                .collect::<Vec<_>>()\n-                .join(ID_SEPARATOR)\n-        )\n-    }\n-}\n+        // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n+        // equivalents. Note that since the BasicCoverageBlock graph has been fully simplified, the\n+        // each predecessor of a BCB leader_bb should be in a unique BCB, and each successor of a\n+        // BCB last_bb should bin in its own unique BCB. Therefore, collecting the BCBs using\n+        // `bb_to_bcb` should work without requiring a deduplication step.\n \n-pub(crate) struct BasicCoverageBlocks {\n-    vec: IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n-}\n+        let successors = IndexVec::from_fn_n(\n+            |bcb| {\n+                let bcb_data = &bcbs[bcb];\n+                let bcb_successors =\n+                    bcb_filtered_successors(&mir_body, &bcb_data.terminator(mir_body).kind)\n+                        .filter_map(|&successor_bb| bb_to_bcb[successor_bb])\n+                        .collect::<Vec<_>>();\n+                debug_assert!({\n+                    let mut sorted = bcb_successors.clone();\n+                    sorted.sort_unstable();\n+                    let initial_len = sorted.len();\n+                    sorted.dedup();\n+                    sorted.len() == initial_len\n+                });\n+                bcb_successors\n+            },\n+            bcbs.len(),\n+        );\n+\n+        let mut predecessors = IndexVec::from_elem_n(Vec::new(), bcbs.len());\n+        for (bcb, bcb_successors) in successors.iter_enumerated() {\n+            for &successor in bcb_successors {\n+                predecessors[successor].push(bcb);\n+            }\n+        }\n \n-impl BasicCoverageBlocks {\n-    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n         let mut basic_coverage_blocks =\n-            BasicCoverageBlocks { vec: IndexVec::from_elem_n(None, mir_body.basic_blocks().len()) };\n-        basic_coverage_blocks.extract_from_mir(mir_body);\n+            Self { bcbs, bb_to_bcb, successors, predecessors, dominators: None };\n+        let dominators = dominators::dominators(&basic_coverage_blocks);\n+        basic_coverage_blocks.dominators = Some(dominators);\n         basic_coverage_blocks\n     }\n \n-    pub fn iter(&self) -> impl Iterator<Item = &BasicCoverageBlock> {\n-        self.vec.iter().filter_map(|bcb| bcb.as_ref())\n-    }\n-\n-    pub fn num_nodes(&self) -> usize {\n-        self.vec.len()\n-    }\n-\n-    pub fn extract_from_mir(&mut self, mir_body: &mir::Body<'tcx>) {\n-        // Traverse the CFG but ignore anything following an `unwind`\n-        let cfg_without_unwind = ShortCircuitPreorder::new(&mir_body, |term_kind| {\n-            let mut successors = term_kind.successors();\n-            match &term_kind {\n-                // SwitchInt successors are never unwind, and all of them should be traversed.\n-\n-                // NOTE: TerminatorKind::FalseEdge targets from SwitchInt don't appear to be\n-                // helpful in identifying unreachable code. I did test the theory, but the following\n-                // changes were not beneficial. (I assumed that replacing some constants with\n-                // non-deterministic variables might effect which blocks were targeted by a\n-                // `FalseEdge` `imaginary_target`. It did not.)\n-                //\n-                // Also note that, if there is a way to identify BasicBlocks that are part of the\n-                // MIR CFG, but not actually reachable, here are some other things to consider:\n-                //\n-                // Injecting unreachable code regions will probably require computing the set\n-                // difference between the basic blocks found without filtering out unreachable\n-                // blocks, and the basic blocks found with the filter; then computing the\n-                // `CoverageSpans` without the filter; and then injecting `Counter`s or\n-                // `CounterExpression`s for blocks that are not unreachable, or injecting\n-                // `Unreachable` code regions otherwise. This seems straightforward, but not\n-                // trivial.\n-                //\n-                // Alternatively, we might instead want to leave the unreachable blocks in\n-                // (bypass the filter here), and inject the counters. This will result in counter\n-                // values of zero (0) for unreachable code (and, notably, the code will be displayed\n-                // with a red background by `llvm-cov show`).\n-                //\n-                // TerminatorKind::SwitchInt { .. } => {\n-                //     let some_imaginary_target = successors.clone().find_map(|&successor| {\n-                //         let term = mir_body.basic_blocks()[successor].terminator();\n-                //         if let TerminatorKind::FalseEdge { imaginary_target, .. } = term.kind {\n-                //             if mir_body.predecessors()[imaginary_target].len() == 1 {\n-                //                 return Some(imaginary_target);\n-                //             }\n-                //         }\n-                //         None\n-                //     });\n-                //     if let Some(imaginary_target) = some_imaginary_target {\n-                //         box successors.filter(move |&&successor| successor != imaginary_target)\n-                //     } else {\n-                //         box successors\n-                //     }\n-                // }\n-                //\n-                // Note this also required changing the closure signature for the\n-                // `ShortCurcuitPreorder` to:\n-                //\n-                // F: Fn(&'tcx TerminatorKind<'tcx>) -> Box<dyn Iterator<Item = &BasicBlock> + 'a>,\n-                TerminatorKind::SwitchInt { .. } => successors,\n-\n-                // For all other kinds, return only the first successor, if any, and ignore unwinds\n-                _ => successors.next().into_iter().chain(&[]),\n-            }\n-        });\n+    fn compute_basic_coverage_blocks(\n+        mir_body: &mir::Body<'tcx>,\n+    ) -> (\n+        IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+        IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+    ) {\n+        let num_basic_blocks = mir_body.num_nodes();\n+        let mut bcbs = IndexVec::with_capacity(num_basic_blocks);\n+        let mut bb_to_bcb = IndexVec::from_elem_n(None, num_basic_blocks);\n \n-        // Walk the CFG using a Preorder traversal, which starts from `START_BLOCK` and follows\n+        // Walk the MIR CFG using a Preorder traversal, which starts from `START_BLOCK` and follows\n         // each block terminator's `successors()`. Coverage spans must map to actual source code,\n-        // so compiler generated blocks and paths can be ignored. To that end the CFG traversal\n+        // so compiler generated blocks and paths can be ignored. To that end, the CFG traversal\n         // intentionally omits unwind paths.\n-        let mut blocks = Vec::new();\n-        for (bb, data) in cfg_without_unwind {\n-            if let Some(last) = blocks.last() {\n+        let mir_cfg_without_unwind = ShortCircuitPreorder::new(&mir_body, bcb_filtered_successors);\n+\n+        let mut basic_blocks = Vec::new();\n+        for (bb, data) in mir_cfg_without_unwind {\n+            if let Some(last) = basic_blocks.last() {\n                 let predecessors = &mir_body.predecessors()[bb];\n                 if predecessors.len() > 1 || !predecessors.contains(last) {\n                     // The `bb` has more than one _incoming_ edge, and should start its own\n-                    // `BasicCoverageBlock`. (Note, the `blocks` vector does not yet include `bb`;\n-                    // it contains a sequence of one or more sequential blocks with no intermediate\n-                    // branches in or out. Save these as a new `BasicCoverageBlock` before starting\n-                    // the new one.)\n-                    self.add_basic_coverage_block(blocks.split_off(0));\n+                    // `BasicCoverageBlockData`. (Note, the `basic_blocks` vector does not yet\n+                    // include `bb`; it contains a sequence of one or more sequential basic_blocks\n+                    // with no intermediate branches in or out. Save these as a new\n+                    // `BasicCoverageBlockData` before starting the new one.)\n+                    Self::add_basic_coverage_block(\n+                        &mut bcbs,\n+                        &mut bb_to_bcb,\n+                        basic_blocks.split_off(0),\n+                    );\n                     debug!(\n                         \"  because {}\",\n                         if predecessors.len() > 1 {\n@@ -157,27 +105,40 @@ impl BasicCoverageBlocks {\n                     );\n                 }\n             }\n-            blocks.push(bb);\n+            basic_blocks.push(bb);\n \n             let term = data.terminator();\n \n             match term.kind {\n                 TerminatorKind::Return { .. }\n+                // FIXME(richkadel): Add test(s) for `Abort` coverage.\n                 | TerminatorKind::Abort\n+                // FIXME(richkadel): Add test(s) for `Assert` coverage.\n+                // Should `Assert` be handled like `FalseUnwind` instead? Since we filter out unwind\n+                // branches when creating the BCB CFG, aren't `Assert`s (without unwinds) just like\n+                // `FalseUnwinds` (which are kind of like `Goto`s)?\n                 | TerminatorKind::Assert { .. }\n+                // FIXME(richkadel): Add test(s) for `Yield` coverage, and confirm coverage is\n+                // sensible for code using the `yield` keyword.\n                 | TerminatorKind::Yield { .. }\n+                // FIXME(richkadel): Also add coverage tests using async/await, and threading.\n+\n                 | TerminatorKind::SwitchInt { .. } => {\n                     // The `bb` has more than one _outgoing_ edge, or exits the function. Save the\n-                    // current sequence of `blocks` gathered to this point, as a new\n-                    // `BasicCoverageBlock`.\n-                    self.add_basic_coverage_block(blocks.split_off(0));\n+                    // current sequence of `basic_blocks` gathered to this point, as a new\n+                    // `BasicCoverageBlockData`.\n+                    Self::add_basic_coverage_block(\n+                        &mut bcbs,\n+                        &mut bb_to_bcb,\n+                        basic_blocks.split_off(0),\n+                    );\n                     debug!(\"  because term.kind = {:?}\", term.kind);\n                     // Note that this condition is based on `TerminatorKind`, even though it\n                     // theoretically boils down to `successors().len() != 1`; that is, either zero\n                     // (e.g., `Return`, `Abort`) or multiple successors (e.g., `SwitchInt`), but\n-                    // since the Coverage graph (the BCB CFG projection) ignores things like unwind\n-                    // branches (which exist in the `Terminator`s `successors()` list) checking the\n-                    // number of successors won't work.\n+                    // since the BCB CFG ignores things like unwind branches (which exist in the\n+                    // `Terminator`s `successors()` list) checking the number of successors won't\n+                    // work.\n                 }\n                 TerminatorKind::Goto { .. }\n                 | TerminatorKind::Resume\n@@ -192,45 +153,222 @@ impl BasicCoverageBlocks {\n             }\n         }\n \n-        if !blocks.is_empty() {\n-            // process any remaining blocks into a final `BasicCoverageBlock`\n-            self.add_basic_coverage_block(blocks.split_off(0));\n-            debug!(\"  because the end of the CFG was reached while traversing\");\n+        if !basic_blocks.is_empty() {\n+            // process any remaining basic_blocks into a final `BasicCoverageBlockData`\n+            Self::add_basic_coverage_block(&mut bcbs, &mut bb_to_bcb, basic_blocks.split_off(0));\n+            debug!(\"  because the end of the MIR CFG was reached while traversing\");\n+        }\n+\n+        (bcbs, bb_to_bcb)\n+    }\n+\n+    fn add_basic_coverage_block(\n+        bcbs: &mut IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+        bb_to_bcb: &mut IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+        basic_blocks: Vec<BasicBlock>,\n+    ) {\n+        let bcb = BasicCoverageBlock::from_usize(bcbs.len());\n+        for &bb in basic_blocks.iter() {\n+            bb_to_bcb[bb] = Some(bcb);\n         }\n+        let bcb_data = BasicCoverageBlockData::from(basic_blocks);\n+        debug!(\"adding bcb{}: {:?}\", bcb.index(), bcb_data);\n+        bcbs.push(bcb_data);\n+    }\n+\n+    #[inline(always)]\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl Iterator<Item = (BasicCoverageBlock, &BasicCoverageBlockData)> {\n+        self.bcbs.iter_enumerated()\n+    }\n+\n+    #[inline(always)]\n+    pub fn bcb_from_bb(&self, bb: BasicBlock) -> Option<BasicCoverageBlock> {\n+        if bb.index() < self.bb_to_bcb.len() { self.bb_to_bcb[bb] } else { None }\n+    }\n+\n+    #[inline(always)]\n+    pub fn is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n+        self.dominators.as_ref().unwrap().is_dominated_by(node, dom)\n+    }\n+\n+    #[inline(always)]\n+    pub fn dominators(&self) -> &Dominators<BasicCoverageBlock> {\n+        self.dominators.as_ref().unwrap()\n+    }\n+}\n+\n+impl Index<BasicCoverageBlock> for CoverageGraph {\n+    type Output = BasicCoverageBlockData;\n+\n+    #[inline]\n+    fn index(&self, index: BasicCoverageBlock) -> &BasicCoverageBlockData {\n+        &self.bcbs[index]\n+    }\n+}\n+\n+impl IndexMut<BasicCoverageBlock> for CoverageGraph {\n+    #[inline]\n+    fn index_mut(&mut self, index: BasicCoverageBlock) -> &mut BasicCoverageBlockData {\n+        &mut self.bcbs[index]\n+    }\n+}\n+\n+impl graph::DirectedGraph for CoverageGraph {\n+    type Node = BasicCoverageBlock;\n+}\n+\n+impl graph::WithNumNodes for CoverageGraph {\n+    #[inline]\n+    fn num_nodes(&self) -> usize {\n+        self.bcbs.len()\n+    }\n+}\n+\n+impl graph::WithStartNode for CoverageGraph {\n+    #[inline]\n+    fn start_node(&self) -> Self::Node {\n+        self.bcb_from_bb(mir::START_BLOCK)\n+            .expect(\"mir::START_BLOCK should be in a BasicCoverageBlock\")\n+    }\n+}\n+\n+type BcbSuccessors<'graph> = std::slice::Iter<'graph, BasicCoverageBlock>;\n+\n+impl<'graph> graph::GraphSuccessors<'graph> for CoverageGraph {\n+    type Item = BasicCoverageBlock;\n+    type Iter = std::iter::Cloned<BcbSuccessors<'graph>>;\n+}\n+\n+impl graph::WithSuccessors for CoverageGraph {\n+    #[inline]\n+    fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n+        self.successors[node].iter().cloned()\n+    }\n+}\n+\n+impl graph::GraphPredecessors<'graph> for CoverageGraph {\n+    type Item = BasicCoverageBlock;\n+    type Iter = std::vec::IntoIter<BasicCoverageBlock>;\n+}\n+\n+impl graph::WithPredecessors for CoverageGraph {\n+    #[inline]\n+    fn predecessors(&self, node: Self::Node) -> <Self as graph::GraphPredecessors<'_>>::Iter {\n+        self.predecessors[node].clone().into_iter()\n     }\n+}\n \n-    fn add_basic_coverage_block(&mut self, blocks: Vec<BasicBlock>) {\n-        let leader_bb = blocks[0];\n-        let bcb = BasicCoverageBlock { blocks };\n-        debug!(\"adding BCB: {:?}\", bcb);\n-        self.vec[leader_bb] = Some(bcb);\n+rustc_index::newtype_index! {\n+    /// A node in the [control-flow graph][CFG] of CoverageGraph.\n+    pub(crate) struct BasicCoverageBlock {\n+        DEBUG_FORMAT = \"bcb{}\",\n     }\n }\n \n-impl std::ops::Index<BasicBlock> for BasicCoverageBlocks {\n-    type Output = BasicCoverageBlock;\n+/// A BasicCoverageBlockData (BCB) represents the maximal-length sequence of MIR BasicBlocks without\n+/// conditional branches, and form a new, simplified, coverage-specific Control Flow Graph, without\n+/// altering the original MIR CFG.\n+///\n+/// Note that running the MIR `SimplifyCfg` transform is not sufficient (and therefore not\n+/// necessary). The BCB-based CFG is a more aggressive simplification. For example:\n+///\n+///   * The BCB CFG ignores (trims) branches not relevant to coverage, such as unwind-related code,\n+///     that is injected by the Rust compiler but has no physical source code to count. This also\n+///     means a BasicBlock with a `Call` terminator can be merged into its primary successor target\n+///     block, in the same BCB.\n+///   * Some BasicBlock terminators support Rust-specific concerns--like borrow-checking--that are\n+///     not relevant to coverage analysis. `FalseUnwind`, for example, can be treated the same as\n+///     a `Goto`, and merged with its successor into the same BCB.\n+///\n+/// Each BCB with at least one computed `CoverageSpan` will have no more than one `Counter`.\n+/// In some cases, a BCB's execution count can be computed by `Expression`. Additional\n+/// disjoint `CoverageSpan`s in a BCB can also be counted by `Expression` (by adding `ZERO`\n+/// to the BCB's primary counter or expression).\n+///\n+/// The BCB CFG is critical to simplifying the coverage analysis by ensuring graph path-based\n+/// queries (`is_dominated_by()`, `predecessors`, `successors`, etc.) have branch (control flow)\n+/// significance.\n+#[derive(Debug, Clone)]\n+pub(crate) struct BasicCoverageBlockData {\n+    pub basic_blocks: Vec<BasicBlock>,\n+}\n+\n+impl BasicCoverageBlockData {\n+    pub fn from(basic_blocks: Vec<BasicBlock>) -> Self {\n+        assert!(basic_blocks.len() > 0);\n+        Self { basic_blocks }\n+    }\n+\n+    #[inline(always)]\n+    pub fn leader_bb(&self) -> BasicBlock {\n+        self.basic_blocks[0]\n+    }\n+\n+    #[inline(always)]\n+    pub fn last_bb(&self) -> BasicBlock {\n+        *self.basic_blocks.last().unwrap()\n+    }\n+\n+    #[inline(always)]\n+    pub fn terminator<'a, 'tcx>(&self, mir_body: &'a mir::Body<'tcx>) -> &'a Terminator<'tcx> {\n+        &mir_body[self.last_bb()].terminator()\n+    }\n+\n+    pub fn id(&self) -> String {\n+        format!(\n+            \"@{}\",\n+            self.basic_blocks\n+                .iter()\n+                .map(|bb| bb.index().to_string())\n+                .collect::<Vec<_>>()\n+                .join(ID_SEPARATOR)\n+        )\n+    }\n+}\n \n-    fn index(&self, index: BasicBlock) -> &Self::Output {\n-        self.vec[index].as_ref().expect(\"is_some if BasicBlock is a BasicCoverageBlock leader\")\n+fn bcb_filtered_successors<'a, 'tcx>(\n+    body: &'tcx &'a mir::Body<'tcx>,\n+    term_kind: &'tcx TerminatorKind<'tcx>,\n+) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a> {\n+    let mut successors = term_kind.successors();\n+    box match &term_kind {\n+        // SwitchInt successors are never unwind, and all of them should be traversed.\n+        TerminatorKind::SwitchInt { .. } => successors,\n+        // For all other kinds, return only the first successor, if any, and ignore unwinds.\n+        // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n+        // `next().into_iter()`) into the `mir::Successors` aliased type.\n+        _ => successors.next().into_iter().chain(&[]),\n     }\n+    .filter(move |&&successor| body[successor].terminator().kind != TerminatorKind::Unreachable)\n }\n \n pub struct ShortCircuitPreorder<\n     'a,\n     'tcx,\n-    F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n > {\n-    body: &'a mir::Body<'tcx>,\n+    body: &'tcx &'a mir::Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n     filtered_successors: F,\n }\n \n-impl<'a, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>>\n-    ShortCircuitPreorder<'a, 'tcx, F>\n+impl<\n+    'a,\n+    'tcx,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n+> ShortCircuitPreorder<'a, 'tcx, F>\n {\n     pub fn new(\n-        body: &'a mir::Body<'tcx>,\n+        body: &'tcx &'a mir::Body<'tcx>,\n         filtered_successors: F,\n     ) -> ShortCircuitPreorder<'a, 'tcx, F> {\n         let worklist = vec![mir::START_BLOCK];\n@@ -244,8 +382,14 @@ impl<'a, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>>\n     }\n }\n \n-impl<'a: 'tcx, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>> Iterator\n-    for ShortCircuitPreorder<'a, 'tcx, F>\n+impl<\n+    'a: 'tcx,\n+    'tcx,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n+> Iterator for ShortCircuitPreorder<'a, 'tcx, F>\n {\n     type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n \n@@ -258,7 +402,7 @@ impl<'a: 'tcx, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>>\n             let data = &self.body[idx];\n \n             if let Some(ref term) = data.terminator {\n-                self.worklist.extend((self.filtered_successors)(&term.kind));\n+                self.worklist.extend((self.filtered_successors)(&self.body, &term.kind));\n             }\n \n             return Some((idx, data));"}, {"sha": "aa5771cfad4e2a9252c987a16d97d6e9881e883b", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -6,13 +6,14 @@ mod graph;\n mod spans;\n \n use counters::CoverageCounters;\n-use graph::BasicCoverageBlocks;\n+use graph::CoverageGraph;\n use spans::{CoverageSpan, CoverageSpans};\n \n use crate::transform::MirPass;\n use crate::util::pretty;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::graph::WithNumNodes;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_index::vec::IndexVec;\n@@ -73,7 +74,7 @@ struct Instrumentor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     mir_body: &'a mut mir::Body<'tcx>,\n     body_span: Span,\n-    basic_coverage_blocks: BasicCoverageBlocks,\n+    basic_coverage_blocks: CoverageGraph,\n     coverage_counters: CoverageCounters,\n }\n \n@@ -82,7 +83,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let hir_body = hir_body(tcx, mir_body.source.def_id());\n         let body_span = hir_body.value.span;\n         let function_source_hash = hash_mir_source(tcx, hir_body);\n-        let basic_coverage_blocks = BasicCoverageBlocks::from_mir(mir_body);\n+        let basic_coverage_blocks = CoverageGraph::from_mir(mir_body);\n         Self {\n             pass_name,\n             tcx,\n@@ -103,7 +104,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n \n         ////////////////////////////////////////////////////\n-        // Compute `CoverageSpan`s from the `BasicCoverageBlocks`.\n+        // Compute `CoverageSpan`s from the `CoverageGraph`.\n         let coverage_spans = CoverageSpans::generate_coverage_spans(\n             &self.mir_body,\n             body_span,\n@@ -135,9 +136,11 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let source_file = source_map.lookup_source_file(body_span.lo());\n         let file_name = Symbol::intern(&source_file.name.to_string());\n \n-        let mut bb_counters = IndexVec::from_elem_n(None, self.mir_body.basic_blocks().len());\n-        for CoverageSpan { span, bcb_leader_bb: bb, .. } in coverage_spans {\n-            if let Some(&counter_operand) = bb_counters[bb].as_ref() {\n+        let mut bcb_counters = IndexVec::from_elem_n(None, self.basic_coverage_blocks.num_nodes());\n+        for covspan in coverage_spans {\n+            let bcb = covspan.bcb;\n+            let span = covspan.span;\n+            if let Some(&counter_operand) = bcb_counters[bcb].as_ref() {\n                 let expression = self.coverage_counters.make_expression(\n                     counter_operand,\n                     Op::Add,\n@@ -149,6 +152,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                     span,\n                     source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n                 );\n+                let bb = self.basic_coverage_blocks[bcb].leader_bb();\n                 let code_region = make_code_region(file_name, &source_file, span, body_span);\n                 inject_statement(self.mir_body, expression, bb, Some(code_region));\n             } else {\n@@ -160,7 +164,8 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                     source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n                 );\n                 let counter_operand = counter.as_operand_id();\n-                bb_counters[bb] = Some(counter_operand);\n+                bcb_counters[bcb] = Some(counter_operand);\n+                let bb = self.basic_coverage_blocks[bcb].leader_bb();\n                 let code_region = make_code_region(file_name, &source_file, span, body_span);\n                 inject_statement(self.mir_body, counter, bb, Some(code_region));\n             }"}, {"sha": "23531ecf22931f9e5f9b039125723bf5f55921f6", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -1,9 +1,8 @@\n use super::debug::term_type;\n-use super::graph::{BasicCoverageBlock, BasicCoverageBlocks};\n+use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n \n use crate::util::spanview::source_range_no_file;\n \n-use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::graph::WithNumNodes;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{\n@@ -69,7 +68,7 @@ impl CoverageStatement {\n #[derive(Debug, Clone)]\n pub(crate) struct CoverageSpan {\n     pub span: Span,\n-    pub bcb_leader_bb: BasicBlock,\n+    pub bcb: BasicCoverageBlock,\n     pub coverage_statements: Vec<CoverageStatement>,\n     pub is_closure: bool,\n }\n@@ -78,7 +77,7 @@ impl CoverageSpan {\n     pub fn for_statement(\n         statement: &Statement<'tcx>,\n         span: Span,\n-        bcb: &BasicCoverageBlock,\n+        bcb: BasicCoverageBlock,\n         bb: BasicBlock,\n         stmt_index: usize,\n     ) -> Self {\n@@ -92,16 +91,16 @@ impl CoverageSpan {\n \n         Self {\n             span,\n-            bcb_leader_bb: bcb.leader_bb(),\n+            bcb,\n             coverage_statements: vec![CoverageStatement::Statement(bb, span, stmt_index)],\n             is_closure,\n         }\n     }\n \n-    pub fn for_terminator(span: Span, bcb: &BasicCoverageBlock, bb: BasicBlock) -> Self {\n+    pub fn for_terminator(span: Span, bcb: BasicCoverageBlock, bb: BasicBlock) -> Self {\n         Self {\n             span,\n-            bcb_leader_bb: bcb.leader_bb(),\n+            bcb,\n             coverage_statements: vec![CoverageStatement::Terminator(bb, span)],\n             is_closure: false,\n         }\n@@ -132,7 +131,7 @@ impl CoverageSpan {\n \n     #[inline]\n     pub fn is_in_same_bcb(&self, other: &Self) -> bool {\n-        self.bcb_leader_bb == other.bcb_leader_bb\n+        self.bcb == other.bcb\n     }\n \n     pub fn format_coverage_statements(\n@@ -164,15 +163,12 @@ pub struct CoverageSpans<'a, 'tcx> {\n     /// The MIR, used to look up `BasicBlockData`.\n     mir_body: &'a mir::Body<'tcx>,\n \n-    /// A snapshot of the MIR CFG dominators before injecting any coverage statements.\n-    dominators: Dominators<BasicBlock>,\n-\n     /// A `Span` covering the function body of the MIR (typically from left curly brace to right\n     /// curly brace).\n     body_span: Span,\n \n     /// The BasicCoverageBlock Control Flow Graph (BCB CFG).\n-    basic_coverage_blocks: &'a BasicCoverageBlocks,\n+    basic_coverage_blocks: &'a CoverageGraph,\n \n     /// The initial set of `CoverageSpan`s, sorted by `Span` (`lo` and `hi`) and by relative\n     /// dominance between the `BasicCoverageBlock`s of equal `Span`s.\n@@ -213,12 +209,10 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     pub(crate) fn generate_coverage_spans(\n         mir_body: &'a mir::Body<'tcx>,\n         body_span: Span,\n-        basic_coverage_blocks: &'a BasicCoverageBlocks,\n+        basic_coverage_blocks: &'a CoverageGraph,\n     ) -> Vec<CoverageSpan> {\n-        let dominators = mir_body.dominators();\n         let mut coverage_spans = CoverageSpans {\n             mir_body,\n-            dominators,\n             body_span,\n             basic_coverage_blocks,\n             sorted_spans_iter: None,\n@@ -246,7 +240,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     /// The basic steps are:\n     ///\n     /// 1. Extract an initial set of spans from the `Statement`s and `Terminator`s of each\n-    ///    `BasicCoverageBlock`.\n+    ///    `BasicCoverageBlockData`.\n     /// 2. Sort the spans by span.lo() (starting position). Spans that start at the same position\n     ///    are sorted with longer spans before shorter spans; and equal spans are sorted\n     ///    (deterministically) based on \"dominator\" relationship (if any).\n@@ -263,8 +257,8 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     /// to be).\n     fn mir_to_initial_sorted_coverage_spans(&self) -> Vec<CoverageSpan> {\n         let mut initial_spans = Vec::<CoverageSpan>::with_capacity(self.mir_body.num_nodes() * 2);\n-        for bcb in self.basic_coverage_blocks.iter() {\n-            for coverage_span in self.bcb_to_initial_coverage_spans(bcb) {\n+        for (bcb, bcb_data) in self.basic_coverage_blocks.iter_enumerated() {\n+            for coverage_span in self.bcb_to_initial_coverage_spans(bcb, bcb_data) {\n                 initial_spans.push(coverage_span);\n             }\n         }\n@@ -285,7 +279,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n                         // dominators always come after the dominated equal spans). When later\n                         // comparing two spans in order, the first will either dominate the second,\n                         // or they will have no dominator relationship.\n-                        self.dominators.rank_partial_cmp(b.bcb_leader_bb, a.bcb_leader_bb)\n+                        self.basic_coverage_blocks.dominators().rank_partial_cmp(b.bcb, a.bcb)\n                     }\n                 } else {\n                     // Sort hi() in reverse order so shorter spans are attempted after longer spans.\n@@ -357,13 +351,13 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n         let mut has_coverage = BitSet::new_empty(basic_coverage_blocks.num_nodes());\n         for covspan in &refined_spans {\n             if !covspan.span.is_empty() {\n-                has_coverage.insert(covspan.bcb_leader_bb);\n+                has_coverage.insert(covspan.bcb);\n             }\n         }\n         refined_spans.retain(|covspan| {\n             !(covspan.span.is_empty()\n-                && is_goto(&mir_body[covspan.bcb_leader_bb].terminator().kind)\n-                && has_coverage.contains(covspan.bcb_leader_bb))\n+                && is_goto(&basic_coverage_blocks[covspan.bcb].terminator(mir_body).kind)\n+                && has_coverage.contains(covspan.bcb))\n         });\n \n         // Remove `CoverageSpan`s derived from closures, originally added to ensure the coverage\n@@ -374,12 +368,17 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     }\n \n     // Generate a set of `CoverageSpan`s from the filtered set of `Statement`s and `Terminator`s of\n-    // the `BasicBlock`(s) in the given `BasicCoverageBlock`. One `CoverageSpan` is generated\n+    // the `BasicBlock`(s) in the given `BasicCoverageBlockData`. One `CoverageSpan` is generated\n     // for each `Statement` and `Terminator`. (Note that subsequent stages of coverage analysis will\n     // merge some `CoverageSpan`s, at which point a `CoverageSpan` may represent multiple\n     // `Statement`s and/or `Terminator`s.)\n-    fn bcb_to_initial_coverage_spans(&self, bcb: &BasicCoverageBlock) -> Vec<CoverageSpan> {\n-        bcb.blocks\n+    fn bcb_to_initial_coverage_spans(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+        bcb_data: &'a BasicCoverageBlockData,\n+    ) -> Vec<CoverageSpan> {\n+        bcb_data\n+            .basic_blocks\n             .iter()\n             .map(|bbref| {\n                 let bb = *bbref;\n@@ -636,7 +635,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     }\n \n     fn span_bcb_is_dominated_by(&self, covspan: &CoverageSpan, dom_covspan: &CoverageSpan) -> bool {\n-        self.dominators.is_dominated_by(covspan.bcb_leader_bb, dom_covspan.bcb_leader_bb)\n+        self.basic_coverage_blocks.is_dominated_by(covspan.bcb, dom_covspan.bcb)\n     }\n }\n "}, {"sha": "5a953b90b423f2ebde0dc68a0c2ef12ea4ac136a", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.lazy_boolean.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 40,\n-              \"covered\": 32,\n-              \"percent\": 80\n+              \"covered\": 30,\n+              \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 39,\n-              \"covered\": 28,\n+              \"count\": 37,\n+              \"covered\": 26,\n               \"notcovered\": 11,\n-              \"percent\": 71.7948717948718\n+              \"percent\": 70.27027027027027\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 40,\n-          \"covered\": 32,\n-          \"percent\": 80\n+          \"covered\": 30,\n+          \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 39,\n-          \"covered\": 28,\n+          \"count\": 37,\n+          \"covered\": 26,\n           \"notcovered\": 11,\n-          \"percent\": 71.7948717948718\n+          \"percent\": 70.27027027027027\n         }\n       }\n     }"}, {"sha": "cb74a1b7e2716ee1a00c22a8cdff7b17d8b38bfa", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.loops_and_branches.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_and_branches.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_and_branches.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_and_branches.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 10,\n+              \"count\": 9,\n               \"covered\": 8,\n-              \"notcovered\": 2,\n-              \"percent\": 80\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 10,\n+          \"count\": 9,\n           \"covered\": 8,\n-          \"notcovered\": 2,\n-          \"percent\": 80\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n         }\n       }\n     }"}, {"sha": "68163eb7636195b9855905e2d5139014c9efefac", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.nested_loops.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 21,\n-              \"covered\": 17,\n-              \"percent\": 80.95238095238095\n+              \"covered\": 16,\n+              \"percent\": 76.19047619047619\n             },\n             \"regions\": {\n-              \"count\": 20,\n-              \"covered\": 16,\n+              \"count\": 18,\n+              \"covered\": 14,\n               \"notcovered\": 4,\n-              \"percent\": 80\n+              \"percent\": 77.77777777777779\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 21,\n-          \"covered\": 17,\n-          \"percent\": 80.95238095238095\n+          \"covered\": 16,\n+          \"percent\": 76.19047619047619\n         },\n         \"regions\": {\n-          \"count\": 20,\n-          \"covered\": 16,\n+          \"count\": 18,\n+          \"covered\": 14,\n           \"notcovered\": 4,\n-          \"percent\": 80\n+          \"percent\": 77.77777777777779\n         }\n       }\n     }"}, {"sha": "39e17359eee76c2a51d7e734a07669545d26d91c", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 20,\n-              \"covered\": 19,\n-              \"percent\": 95\n+              \"count\": 19,\n+              \"covered\": 18,\n+              \"percent\": 94.73684210526315\n             },\n             \"regions\": {\n-              \"count\": 20,\n-              \"covered\": 17,\n+              \"count\": 18,\n+              \"covered\": 15,\n               \"notcovered\": 3,\n-              \"percent\": 85\n+              \"percent\": 83.33333333333334\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 20,\n-          \"covered\": 19,\n-          \"percent\": 95\n+          \"count\": 19,\n+          \"covered\": 18,\n+          \"percent\": 94.73684210526315\n         },\n         \"regions\": {\n-          \"count\": 20,\n-          \"covered\": 17,\n+          \"count\": 18,\n+          \"covered\": 15,\n           \"notcovered\": 3,\n-          \"percent\": 85\n+          \"percent\": 83.33333333333334\n         }\n       }\n     }"}, {"sha": "339c65556682a536269f2572466f8e9c4bc91e8a", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 5,\n+              \"count\": 4,\n               \"covered\": 3,\n-              \"notcovered\": 2,\n-              \"percent\": 60\n+              \"notcovered\": 1,\n+              \"percent\": 75\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 5,\n+          \"count\": 4,\n           \"covered\": 3,\n-          \"notcovered\": 2,\n-          \"percent\": 60\n+          \"notcovered\": 1,\n+          \"percent\": 75\n         }\n       }\n     }"}, {"sha": "a116a91a60aae0298cfe09e8b15cd02f1a3a61f7", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while_early_return.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n+              \"count\": 17,\n               \"covered\": 15,\n-              \"percent\": 83.33333333333334\n+              \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n-              \"count\": 11,\n+              \"count\": 10,\n               \"covered\": 8,\n-              \"notcovered\": 3,\n-              \"percent\": 72.72727272727273\n+              \"notcovered\": 2,\n+              \"percent\": 80\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n+          \"count\": 17,\n           \"covered\": 15,\n-          \"percent\": 83.33333333333334\n+          \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n-          \"count\": 11,\n+          \"count\": 10,\n           \"covered\": 8,\n-          \"notcovered\": 3,\n-          \"percent\": 72.72727272727273\n+          \"notcovered\": 2,\n+          \"percent\": 80\n         }\n       }\n     }"}, {"sha": "1b503033911c5a4061e43b22c12e8e0dce4d6951", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.lazy_boolean.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -50,7 +50,7 @@\n    47|      0|    {\n    48|      0|        c = 400\n    49|      0|        ;\n-   50|      1|    }\n+   50|      0|    }\n    51|       |\n    52|      1|    if !is_true {\n    53|      0|        a = 2;\n@@ -60,6 +60,6 @@\n    57|      1|        b = 30;\n    58|      1|    } else {\n    59|      0|        c = 400;\n-   60|      1|    }\n+   60|      0|    }\n    61|      1|}\n "}, {"sha": "c9f373bf6a7c07b1c949e8eb03f25ba4ffbefc9b", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.nested_loops.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -19,8 +19,8 @@\n    19|      0|                    a -= 2;\n    20|      0|                }\n    21|      2|            }\n-   22|      3|        }\n+   22|      2|        }\n    23|      0|        countdown -= 1;\n-   24|      1|    }\n+   24|      0|    }\n    25|      1|}\n "}, {"sha": "c43b492db6057f9edab5439b30c9c3bbecdbd792", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -6,7 +6,7 @@\n     6|      1|        Err(())\n     7|       |    } else {\n     8|      5|        Ok(())\n-    9|      1|    }\n+    9|       |    }\n    10|      6|}\n    11|       |\n    12|       |fn main() -> Result<(),()> {\n@@ -31,7 +31,7 @@\n    31|      5|            call(/*return_error=*/ false)?;\n                                                        ^0\n    32|      5|        }\n-   33|      6|    }\n+   33|      5|    }\n    34|      0|    Ok(())\n    35|      2|}\n "}, {"sha": "e5c5b05a6fc8028154572b520d5e5dc59e8d9ce6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.while_early_return.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -24,7 +24,7 @@\n    24|       |                else\n    25|       |                {\n    26|      1|                    Err(1)\n-   27|      0|                }\n+   27|       |                }\n    28|       |                ;\n    29|       |        }\n    30|      6|        countdown"}, {"sha": "2bafe7d88e24cb909224fe66d670b6b162b9fea4", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.drop_trait.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -4,14 +4,13 @@ Counter in file 0 15:9 -> 17:42, #1\n Counter in file 0 19:8 -> 19:12, (#1 + 0)\n Counter in file 0 20:9 -> 21:22, #2\n Counter in file 0 27:1 -> 27:2, #4\n-Counter in file 0 27:1 -> 27:2, (#2 + 0)\n Emitting segments for file: ../coverage/drop_trait.rs\n Combined regions:\n   9:24 -> 11:6 (count=2)\n   15:9 -> 17:42 (count=1)\n   19:8 -> 19:12 (count=1)\n   20:9 -> 21:22 (count=1)\n-  27:1 -> 27:2 (count=2)\n+  27:1 -> 27:2 (count=1)\n Segment at 9:24 (count = 2), RegionEntry\n Segment at 11:6 (count = 0), Skipped\n Segment at 15:9 (count = 1), RegionEntry\n@@ -20,5 +19,5 @@ Segment at 19:8 (count = 1), RegionEntry\n Segment at 19:12 (count = 0), Skipped\n Segment at 20:9 (count = 1), RegionEntry\n Segment at 21:22 (count = 0), Skipped\n-Segment at 27:1 (count = 2), RegionEntry\n+Segment at 27:1 (count = 1), RegionEntry\n Segment at 27:2 (count = 0), Skipped"}, {"sha": "a13b1f3d7861495f772d34bf4430d981679808bd", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.generics.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -5,7 +5,6 @@ Counter in file 0 23:9 -> 28:28, #1\n Counter in file 0 30:8 -> 30:12, (#1 + 0)\n Counter in file 0 31:9 -> 32:22, #2\n Counter in file 0 38:1 -> 38:2, #4\n-Counter in file 0 38:1 -> 38:2, (#2 + 0)\n Counter in file 0 10:49 -> 12:6, #1\n Counter in file 0 10:49 -> 12:6, #1\n Emitting segments for file: ../coverage/generics.rs\n@@ -15,7 +14,7 @@ Combined regions:\n   23:9 -> 28:28 (count=1)\n   30:8 -> 30:12 (count=1)\n   31:9 -> 32:22 (count=1)\n-  38:1 -> 38:2 (count=2)\n+  38:1 -> 38:2 (count=1)\n Segment at 10:49 (count = 3), RegionEntry\n Segment at 12:6 (count = 0), Skipped\n Segment at 17:24 (count = 2), RegionEntry\n@@ -26,7 +25,7 @@ Segment at 30:8 (count = 1), RegionEntry\n Segment at 30:12 (count = 0), Skipped\n Segment at 31:9 (count = 1), RegionEntry\n Segment at 32:22 (count = 0), Skipped\n-Segment at 38:1 (count = 2), RegionEntry\n+Segment at 38:1 (count = 1), RegionEntry\n Segment at 38:2 (count = 0), Skipped\n Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworkdE12set_strengthB2_\n Combined regions:"}, {"sha": "270a6f2b14a342e482133fb346b285d68d1e0253", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.if_else.txt", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -2,37 +2,30 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 11:16, #1\n Counter in file 0 12:5 -> 17:6, #2\n Counter in file 0 20:9 -> 22:16, #3\n-Counter in file 0 23:6 -> 23:7, (#2 + 0)\n Counter in file 0 26:9 -> 26:16, #4\n Counter in file 0 27:5 -> 32:6, #5\n Counter in file 0 34:5 -> 39:6, #6\n-Counter in file 0 39:6 -> 39:7, (#5 + 0)\n Counter in file 0 40:1 -> 40:2, #7\n Emitting segments for file: ../coverage/if_else.rs\n Combined regions:\n   7:9 -> 11:16 (count=1)\n   12:5 -> 17:6 (count=1)\n   20:9 -> 22:16 (count=0)\n-  23:6 -> 23:7 (count=1)\n   26:9 -> 26:16 (count=1)\n   27:5 -> 32:6 (count=1)\n   34:5 -> 39:6 (count=0)\n-  39:6 -> 39:7 (count=1)\n   40:1 -> 40:2 (count=1)\n Segment at 7:9 (count = 1), RegionEntry\n Segment at 11:16 (count = 0), Skipped\n Segment at 12:5 (count = 1), RegionEntry\n Segment at 17:6 (count = 0), Skipped\n Segment at 20:9 (count = 0), RegionEntry\n Segment at 22:16 (count = 0), Skipped\n-Segment at 23:6 (count = 1), RegionEntry\n-Segment at 23:7 (count = 0), Skipped\n Segment at 26:9 (count = 1), RegionEntry\n Segment at 26:16 (count = 0), Skipped\n Segment at 27:5 (count = 1), RegionEntry\n Segment at 32:6 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n-Segment at 39:6 (count = 1), RegionEntry\n-Segment at 39:7 (count = 0), Skipped\n+Segment at 39:6 (count = 0), Skipped\n Segment at 40:1 (count = 1), RegionEntry\n Segment at 40:2 (count = 0), Skipped"}, {"sha": "4561fcc5b36a55782d7197d78d29cd1ceef570a8", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.lazy_boolean.txt", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -29,14 +29,12 @@ Counter in file 0 38:6 -> 38:7, #22\n Counter in file 0 41:9 -> 41:16, #23\n Counter in file 0 42:5 -> 45:6, #24\n Counter in file 0 47:5 -> 50:6, #25\n-Counter in file 0 50:6 -> 50:7, (#24 + 0)\n Counter in file 0 52:8 -> 52:16, #26\n Counter in file 0 52:17 -> 54:6, #27\n Counter in file 0 54:6 -> 54:7, #28\n Counter in file 0 56:8 -> 56:15, #29\n Counter in file 0 56:16 -> 58:6, #30\n Counter in file 0 58:12 -> 60:6, #31\n-Counter in file 0 60:6 -> 60:7, (#30 + 0)\n Counter in file 0 61:1 -> 61:2, #32\n Emitting segments for file: ../coverage/lazy_boolean.rs\n Combined regions:\n@@ -66,14 +64,12 @@ Combined regions:\n   41:9 -> 41:16 (count=1)\n   42:5 -> 45:6 (count=1)\n   47:5 -> 50:6 (count=0)\n-  50:6 -> 50:7 (count=1)\n   52:8 -> 52:16 (count=1)\n   52:17 -> 54:6 (count=0)\n   54:6 -> 54:7 (count=1)\n   56:8 -> 56:15 (count=1)\n   56:16 -> 58:6 (count=1)\n   58:12 -> 60:6 (count=0)\n-  60:6 -> 60:7 (count=1)\n   61:1 -> 61:2 (count=1)\n Segment at 7:9 (count = 1), RegionEntry\n Segment at 9:42 (count = 0), Skipped\n@@ -120,8 +116,7 @@ Segment at 41:16 (count = 0), Skipped\n Segment at 42:5 (count = 1), RegionEntry\n Segment at 45:6 (count = 0), Skipped\n Segment at 47:5 (count = 0), RegionEntry\n-Segment at 50:6 (count = 1), RegionEntry\n-Segment at 50:7 (count = 0), Skipped\n+Segment at 50:6 (count = 0), Skipped\n Segment at 52:8 (count = 1), RegionEntry\n Segment at 52:16 (count = 0), Skipped\n Segment at 52:17 (count = 0), RegionEntry\n@@ -132,7 +127,6 @@ Segment at 56:15 (count = 0), Skipped\n Segment at 56:16 (count = 1), RegionEntry\n Segment at 58:6 (count = 0), Skipped\n Segment at 58:12 (count = 0), RegionEntry\n-Segment at 60:6 (count = 1), RegionEntry\n-Segment at 60:7 (count = 0), Skipped\n+Segment at 60:6 (count = 0), Skipped\n Segment at 61:1 (count = 1), RegionEntry\n Segment at 61:2 (count = 0), Skipped"}, {"sha": "7cde2205cbfd4802fc0bbf2ac3fbaf33958a91de", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.loops_and_branches.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -7,7 +7,6 @@ Counter in file 0 15:31 -> 15:32, #8\n Counter in file 0 17:10 -> 17:11, #10\n Counter in file 0 18:9 -> 18:15, #11\n Counter in file 0 19:5 -> 19:6, #12\n-Counter in file 0 19:5 -> 19:6, (#8 + 0)\n Counter in file 0 22:11 -> 25:2, #1\n Emitting segments for file: ../coverage/loops_and_branches.rs\n Combined regions:"}, {"sha": "59fb5c366f2cb9e89308d5a66a3c7705621893a0", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.nested_loops.txt", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -14,10 +14,8 @@ Counter in file 0 17:21 -> 17:33, #10\n Counter in file 0 19:21 -> 21:14, #11\n Counter in file 0 21:14 -> 21:15, #12\n Counter in file 0 22:10 -> 22:11, #13\n-Counter in file 0 22:10 -> 22:11, (#3 + 0)\n Counter in file 0 23:9 -> 23:23, #14\n Counter in file 0 24:6 -> 24:7, #15\n-Counter in file 0 24:6 -> 24:7, (#1 + 0)\n Counter in file 0 25:1 -> 25:2, #16\n Emitting segments for file: ../coverage/nested_loops.rs\n Combined regions:\n@@ -35,9 +33,9 @@ Combined regions:\n   17:21 -> 17:33 (count=1)\n   19:21 -> 21:14 (count=0)\n   21:14 -> 21:15 (count=2)\n-  22:10 -> 22:11 (count=3)\n+  22:10 -> 22:11 (count=2)\n   23:9 -> 23:23 (count=0)\n-  24:6 -> 24:7 (count=1)\n+  24:6 -> 24:7 (count=0)\n   25:1 -> 25:2 (count=1)\n Segment at 2:9 (count = 1), RegionEntry\n Segment at 3:27 (count = 0), Skipped\n@@ -66,11 +64,11 @@ Segment at 17:33 (count = 0), Skipped\n Segment at 19:21 (count = 0), RegionEntry\n Segment at 21:14 (count = 2), RegionEntry\n Segment at 21:15 (count = 0), Skipped\n-Segment at 22:10 (count = 3), RegionEntry\n+Segment at 22:10 (count = 2), RegionEntry\n Segment at 22:11 (count = 0), Skipped\n Segment at 23:9 (count = 0), RegionEntry\n Segment at 23:23 (count = 0), Skipped\n-Segment at 24:6 (count = 1), RegionEntry\n+Segment at 24:6 (count = 0), RegionEntry\n Segment at 24:7 (count = 0), Skipped\n Segment at 25:1 (count = 1), RegionEntry\n Segment at 25:2 (count = 0), Skipped"}, {"sha": "7dea637551db47282f99cb18f86f74979db41b82", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.try_error_result.txt", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -10,21 +10,18 @@ Counter in file 0 31:42 -> 31:43, #8\n Counter in file 0 32:10 -> 32:11, #9\n Counter in file 0 32:10 -> 32:11, #10\n Counter in file 0 33:6 -> 33:7, #11\n-Counter in file 0 33:6 -> 33:7, (#1 + 0)\n Counter in file 0 34:5 -> 34:11, #12\n Counter in file 0 35:1 -> 35:2, #13\n Counter in file 0 35:1 -> 35:2, #14\n Counter in file 0 5:8 -> 5:20, #1\n Counter in file 0 6:9 -> 6:16, #2\n Counter in file 0 8:9 -> 8:15, #3\n-Counter in file 0 9:6 -> 9:7, (#2 + 0)\n Counter in file 0 10:1 -> 10:2, #4\n Emitting segments for file: ../coverage/try_error_result.rs\n Combined regions:\n   5:8 -> 5:20 (count=6)\n   6:9 -> 6:16 (count=1)\n   8:9 -> 8:15 (count=5)\n-  9:6 -> 9:7 (count=1)\n   10:1 -> 10:2 (count=6)\n   13:9 -> 14:23 (count=1)\n   17:9 -> 17:10 (count=6)\n@@ -35,7 +32,7 @@ Combined regions:\n   31:13 -> 31:42 (count=5)\n   31:42 -> 31:43 (count=0)\n   32:10 -> 32:11 (count=5)\n-  33:6 -> 33:7 (count=6)\n+  33:6 -> 33:7 (count=5)\n   34:5 -> 34:11 (count=0)\n   35:1 -> 35:2 (count=2)\n Segment at 5:8 (count = 6), RegionEntry\n@@ -44,8 +41,6 @@ Segment at 6:9 (count = 1), RegionEntry\n Segment at 6:16 (count = 0), Skipped\n Segment at 8:9 (count = 5), RegionEntry\n Segment at 8:15 (count = 0), Skipped\n-Segment at 9:6 (count = 1), RegionEntry\n-Segment at 9:7 (count = 0), Skipped\n Segment at 10:1 (count = 6), RegionEntry\n Segment at 10:2 (count = 0), Skipped\n Segment at 13:9 (count = 1), RegionEntry\n@@ -64,7 +59,7 @@ Segment at 31:42 (count = 0), RegionEntry\n Segment at 31:43 (count = 0), Skipped\n Segment at 32:10 (count = 5), RegionEntry\n Segment at 32:11 (count = 0), Skipped\n-Segment at 33:6 (count = 6), RegionEntry\n+Segment at 33:6 (count = 5), RegionEntry\n Segment at 33:7 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n Segment at 34:11 (count = 0), Skipped"}, {"sha": "a2be958660eda7397ccbc6deb9c7c622d4372a5e", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while.txt", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -2,21 +2,18 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 2:9 -> 2:16, #1\n Counter in file 0 3:11 -> 3:20, #2\n Counter in file 0 3:21 -> 4:6, #3\n-Counter in file 0 4:6 -> 4:7, (#3 + 0)\n Counter in file 0 5:1 -> 5:2, #4\n Emitting segments for file: ../coverage/while.rs\n Combined regions:\n   2:9 -> 2:16 (count=1)\n   3:11 -> 3:20 (count=1)\n   3:21 -> 4:6 (count=0)\n-  4:6 -> 4:7 (count=0)\n   5:1 -> 5:2 (count=1)\n Segment at 2:9 (count = 1), RegionEntry\n Segment at 2:16 (count = 0), Skipped\n Segment at 3:11 (count = 1), RegionEntry\n Segment at 3:20 (count = 0), Skipped\n Segment at 3:21 (count = 0), RegionEntry\n-Segment at 4:6 (count = 0), RegionEntry\n-Segment at 4:7 (count = 0), Skipped\n+Segment at 4:6 (count = 0), Skipped\n Segment at 5:1 (count = 1), RegionEntry\n Segment at 5:2 (count = 0), Skipped"}, {"sha": "02ab24050bad55595af2a5acceae3f5d8705d385", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while_early_return.txt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -5,7 +5,6 @@ Counter in file 0 12:13 -> 14:14, #3\n Counter in file 0 18:21 -> 20:22, #4\n Counter in file 0 22:21 -> 22:27, #5\n Counter in file 0 26:21 -> 26:27, #6\n-Counter in file 0 27:18 -> 27:19, (#5 + 0)\n Counter in file 0 30:9 -> 32:10, #7\n Counter in file 0 35:5 -> 35:11, #8\n Counter in file 0 36:1 -> 36:2, #9\n@@ -18,7 +17,6 @@ Combined regions:\n   18:21 -> 20:22 (count=1)\n   22:21 -> 22:27 (count=0)\n   26:21 -> 26:27 (count=1)\n-  27:18 -> 27:19 (count=0)\n   30:9 -> 32:10 (count=6)\n   35:5 -> 35:11 (count=0)\n   36:1 -> 36:2 (count=2)\n@@ -34,8 +32,6 @@ Segment at 22:21 (count = 0), RegionEntry\n Segment at 22:27 (count = 0), Skipped\n Segment at 26:21 (count = 1), RegionEntry\n Segment at 26:27 (count = 0), Skipped\n-Segment at 27:18 (count = 0), RegionEntry\n-Segment at 27:19 (count = 0), Skipped\n Segment at 30:9 (count = 6), RegionEntry\n Segment at 32:10 (count = 0), Skipped\n Segment at 35:5 (count = 0), RegionEntry"}, {"sha": "5a953b90b423f2ebde0dc68a0c2ef12ea4ac136a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.lazy_boolean.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 40,\n-              \"covered\": 32,\n-              \"percent\": 80\n+              \"covered\": 30,\n+              \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 39,\n-              \"covered\": 28,\n+              \"count\": 37,\n+              \"covered\": 26,\n               \"notcovered\": 11,\n-              \"percent\": 71.7948717948718\n+              \"percent\": 70.27027027027027\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 40,\n-          \"covered\": 32,\n-          \"percent\": 80\n+          \"covered\": 30,\n+          \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 39,\n-          \"covered\": 28,\n+          \"count\": 37,\n+          \"covered\": 26,\n           \"notcovered\": 11,\n-          \"percent\": 71.7948717948718\n+          \"percent\": 70.27027027027027\n         }\n       }\n     }"}, {"sha": "cb74a1b7e2716ee1a00c22a8cdff7b17d8b38bfa", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.loops_and_branches.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_and_branches.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_and_branches.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_and_branches.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 10,\n+              \"count\": 9,\n               \"covered\": 8,\n-              \"notcovered\": 2,\n-              \"percent\": 80\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 10,\n+          \"count\": 9,\n           \"covered\": 8,\n-          \"notcovered\": 2,\n-          \"percent\": 80\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n         }\n       }\n     }"}, {"sha": "68163eb7636195b9855905e2d5139014c9efefac", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.nested_loops.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 21,\n-              \"covered\": 17,\n-              \"percent\": 80.95238095238095\n+              \"covered\": 16,\n+              \"percent\": 76.19047619047619\n             },\n             \"regions\": {\n-              \"count\": 20,\n-              \"covered\": 16,\n+              \"count\": 18,\n+              \"covered\": 14,\n               \"notcovered\": 4,\n-              \"percent\": 80\n+              \"percent\": 77.77777777777779\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 21,\n-          \"covered\": 17,\n-          \"percent\": 80.95238095238095\n+          \"covered\": 16,\n+          \"percent\": 76.19047619047619\n         },\n         \"regions\": {\n-          \"count\": 20,\n-          \"covered\": 16,\n+          \"count\": 18,\n+          \"covered\": 14,\n           \"notcovered\": 4,\n-          \"percent\": 80\n+          \"percent\": 77.77777777777779\n         }\n       }\n     }"}, {"sha": "39e17359eee76c2a51d7e734a07669545d26d91c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 20,\n-              \"covered\": 19,\n-              \"percent\": 95\n+              \"count\": 19,\n+              \"covered\": 18,\n+              \"percent\": 94.73684210526315\n             },\n             \"regions\": {\n-              \"count\": 20,\n-              \"covered\": 17,\n+              \"count\": 18,\n+              \"covered\": 15,\n               \"notcovered\": 3,\n-              \"percent\": 85\n+              \"percent\": 83.33333333333334\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 20,\n-          \"covered\": 19,\n-          \"percent\": 95\n+          \"count\": 19,\n+          \"covered\": 18,\n+          \"percent\": 94.73684210526315\n         },\n         \"regions\": {\n-          \"count\": 20,\n-          \"covered\": 17,\n+          \"count\": 18,\n+          \"covered\": 15,\n           \"notcovered\": 3,\n-          \"percent\": 85\n+          \"percent\": 83.33333333333334\n         }\n       }\n     }"}, {"sha": "339c65556682a536269f2572466f8e9c4bc91e8a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 5,\n+              \"count\": 4,\n               \"covered\": 3,\n-              \"notcovered\": 2,\n-              \"percent\": 60\n+              \"notcovered\": 1,\n+              \"percent\": 75\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 5,\n+          \"count\": 4,\n           \"covered\": 3,\n-          \"notcovered\": 2,\n-          \"percent\": 60\n+          \"notcovered\": 1,\n+          \"percent\": 75\n         }\n       }\n     }"}, {"sha": "a116a91a60aae0298cfe09e8b15cd02f1a3a61f7", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while_early_return.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n+              \"count\": 17,\n               \"covered\": 15,\n-              \"percent\": 83.33333333333334\n+              \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n-              \"count\": 11,\n+              \"count\": 10,\n               \"covered\": 8,\n-              \"notcovered\": 3,\n-              \"percent\": 72.72727272727273\n+              \"notcovered\": 2,\n+              \"percent\": 80\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n+          \"count\": 17,\n           \"covered\": 15,\n-          \"percent\": 83.33333333333334\n+          \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n-          \"count\": 11,\n+          \"count\": 10,\n           \"covered\": 8,\n-          \"notcovered\": 3,\n-          \"percent\": 72.72727272727273\n+          \"notcovered\": 2,\n+          \"percent\": 80\n         }\n       }\n     }"}, {"sha": "1b503033911c5a4061e43b22c12e8e0dce4d6951", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.lazy_boolean.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -50,7 +50,7 @@\n    47|      0|    {\n    48|      0|        c = 400\n    49|      0|        ;\n-   50|      1|    }\n+   50|      0|    }\n    51|       |\n    52|      1|    if !is_true {\n    53|      0|        a = 2;\n@@ -60,6 +60,6 @@\n    57|      1|        b = 30;\n    58|      1|    } else {\n    59|      0|        c = 400;\n-   60|      1|    }\n+   60|      0|    }\n    61|      1|}\n "}, {"sha": "c9f373bf6a7c07b1c949e8eb03f25ba4ffbefc9b", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.nested_loops.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -19,8 +19,8 @@\n    19|      0|                    a -= 2;\n    20|      0|                }\n    21|      2|            }\n-   22|      3|        }\n+   22|      2|        }\n    23|      0|        countdown -= 1;\n-   24|      1|    }\n+   24|      0|    }\n    25|      1|}\n "}, {"sha": "c43b492db6057f9edab5439b30c9c3bbecdbd792", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -6,7 +6,7 @@\n     6|      1|        Err(())\n     7|       |    } else {\n     8|      5|        Ok(())\n-    9|      1|    }\n+    9|       |    }\n    10|      6|}\n    11|       |\n    12|       |fn main() -> Result<(),()> {\n@@ -31,7 +31,7 @@\n    31|      5|            call(/*return_error=*/ false)?;\n                                                        ^0\n    32|      5|        }\n-   33|      6|    }\n+   33|      5|    }\n    34|      0|    Ok(())\n    35|      2|}\n "}, {"sha": "e5c5b05a6fc8028154572b520d5e5dc59e8d9ce6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.while_early_return.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -24,7 +24,7 @@\n    24|       |                else\n    25|       |                {\n    26|      1|                    Err(1)\n-   27|      0|                }\n+   27|       |                }\n    28|       |                ;\n    29|       |        }\n    30|      6|        countdown"}, {"sha": "124a01af34212cbe5ee6a75733afe332158e3f05", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.drop_trait.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -4,14 +4,13 @@ Counter in file 0 15:9 -> 17:42, #1\n Counter in file 0 19:8 -> 19:12, (#1 + 0)\n Counter in file 0 20:9 -> 21:22, #2\n Counter in file 0 27:1 -> 27:2, #4\n-Counter in file 0 27:1 -> 27:2, (#2 + 0)\n Emitting segments for file: ../coverage/drop_trait.rs\n Combined regions:\n   9:24 -> 11:6 (count=2)\n   15:9 -> 17:42 (count=1)\n   19:8 -> 19:12 (count=1)\n   20:9 -> 21:22 (count=1)\n-  27:1 -> 27:2 (count=2)\n+  27:1 -> 27:2 (count=1)\n Segment at 9:24 (count = 2), RegionEntry\n Segment at 11:6 (count = 0), Skipped\n Segment at 15:9 (count = 1), RegionEntry\n@@ -20,5 +19,5 @@ Segment at 19:8 (count = 1), RegionEntry\n Segment at 19:12 (count = 0), Skipped\n Segment at 20:9 (count = 1), RegionEntry\n Segment at 21:22 (count = 0), Skipped\n-Segment at 27:1 (count = 2), RegionEntry\n+Segment at 27:1 (count = 1), RegionEntry\n Segment at 27:2 (count = 0), Skipped"}, {"sha": "a0e9146035eec76bb07b8a43cf7e6fdc75232df8", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.generics.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -5,7 +5,6 @@ Counter in file 0 23:9 -> 28:28, #1\n Counter in file 0 30:8 -> 30:12, (#1 + 0)\n Counter in file 0 31:9 -> 32:22, #2\n Counter in file 0 38:1 -> 38:2, #4\n-Counter in file 0 38:1 -> 38:2, (#2 + 0)\n Counter in file 0 10:49 -> 12:6, #1\n Counter in file 0 10:49 -> 12:6, #1\n Emitting segments for file: ../coverage/generics.rs\n@@ -15,7 +14,7 @@ Combined regions:\n   23:9 -> 28:28 (count=1)\n   30:8 -> 30:12 (count=1)\n   31:9 -> 32:22 (count=1)\n-  38:1 -> 38:2 (count=2)\n+  38:1 -> 38:2 (count=1)\n Segment at 10:49 (count = 3), RegionEntry\n Segment at 12:6 (count = 0), Skipped\n Segment at 17:24 (count = 2), RegionEntry\n@@ -26,7 +25,7 @@ Segment at 30:8 (count = 1), RegionEntry\n Segment at 30:12 (count = 0), Skipped\n Segment at 31:9 (count = 1), RegionEntry\n Segment at 32:22 (count = 0), Skipped\n-Segment at 38:1 (count = 2), RegionEntry\n+Segment at 38:1 (count = 1), RegionEntry\n Segment at 38:2 (count = 0), Skipped\n Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworkdE12set_strengthB2_\n Combined regions:"}, {"sha": "9406b6a269d4a7a8d0623b13fea44756492c88dd", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.if_else.txt", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -2,37 +2,30 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 11:16, #1\n Counter in file 0 12:5 -> 17:6, #2\n Counter in file 0 20:9 -> 22:16, #3\n-Counter in file 0 23:6 -> 23:7, (#2 + 0)\n Counter in file 0 26:9 -> 26:16, #4\n Counter in file 0 27:5 -> 32:6, #5\n Counter in file 0 34:5 -> 39:6, #6\n-Counter in file 0 39:6 -> 39:7, (#5 + 0)\n Counter in file 0 40:1 -> 40:2, #7\n Emitting segments for file: ../coverage/if_else.rs\n Combined regions:\n   7:9 -> 11:16 (count=1)\n   12:5 -> 17:6 (count=1)\n   20:9 -> 22:16 (count=0)\n-  23:6 -> 23:7 (count=1)\n   26:9 -> 26:16 (count=1)\n   27:5 -> 32:6 (count=1)\n   34:5 -> 39:6 (count=0)\n-  39:6 -> 39:7 (count=1)\n   40:1 -> 40:2 (count=1)\n Segment at 7:9 (count = 1), RegionEntry\n Segment at 11:16 (count = 0), Skipped\n Segment at 12:5 (count = 1), RegionEntry\n Segment at 17:6 (count = 0), Skipped\n Segment at 20:9 (count = 0), RegionEntry\n Segment at 22:16 (count = 0), Skipped\n-Segment at 23:6 (count = 1), RegionEntry\n-Segment at 23:7 (count = 0), Skipped\n Segment at 26:9 (count = 1), RegionEntry\n Segment at 26:16 (count = 0), Skipped\n Segment at 27:5 (count = 1), RegionEntry\n Segment at 32:6 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n-Segment at 39:6 (count = 1), RegionEntry\n-Segment at 39:7 (count = 0), Skipped\n+Segment at 39:6 (count = 0), Skipped\n Segment at 40:1 (count = 1), RegionEntry\n Segment at 40:2 (count = 0), Skipped"}, {"sha": "c95275c6223badf8bdecafee96c7da55f54b87fe", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.lazy_boolean.txt", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -29,14 +29,12 @@ Counter in file 0 38:6 -> 38:7, #22\n Counter in file 0 41:9 -> 41:16, #23\n Counter in file 0 42:5 -> 45:6, #24\n Counter in file 0 47:5 -> 50:6, #25\n-Counter in file 0 50:6 -> 50:7, (#24 + 0)\n Counter in file 0 52:8 -> 52:16, #26\n Counter in file 0 52:17 -> 54:6, #27\n Counter in file 0 54:6 -> 54:7, #28\n Counter in file 0 56:8 -> 56:15, #29\n Counter in file 0 56:16 -> 58:6, #30\n Counter in file 0 58:12 -> 60:6, #31\n-Counter in file 0 60:6 -> 60:7, (#30 + 0)\n Counter in file 0 61:1 -> 61:2, #32\n Emitting segments for file: ../coverage/lazy_boolean.rs\n Combined regions:\n@@ -66,14 +64,12 @@ Combined regions:\n   41:9 -> 41:16 (count=1)\n   42:5 -> 45:6 (count=1)\n   47:5 -> 50:6 (count=0)\n-  50:6 -> 50:7 (count=1)\n   52:8 -> 52:16 (count=1)\n   52:17 -> 54:6 (count=0)\n   54:6 -> 54:7 (count=1)\n   56:8 -> 56:15 (count=1)\n   56:16 -> 58:6 (count=1)\n   58:12 -> 60:6 (count=0)\n-  60:6 -> 60:7 (count=1)\n   61:1 -> 61:2 (count=1)\n Segment at 7:9 (count = 1), RegionEntry\n Segment at 9:42 (count = 0), Skipped\n@@ -120,8 +116,7 @@ Segment at 41:16 (count = 0), Skipped\n Segment at 42:5 (count = 1), RegionEntry\n Segment at 45:6 (count = 0), Skipped\n Segment at 47:5 (count = 0), RegionEntry\n-Segment at 50:6 (count = 1), RegionEntry\n-Segment at 50:7 (count = 0), Skipped\n+Segment at 50:6 (count = 0), Skipped\n Segment at 52:8 (count = 1), RegionEntry\n Segment at 52:16 (count = 0), Skipped\n Segment at 52:17 (count = 0), RegionEntry\n@@ -132,7 +127,6 @@ Segment at 56:15 (count = 0), Skipped\n Segment at 56:16 (count = 1), RegionEntry\n Segment at 58:6 (count = 0), Skipped\n Segment at 58:12 (count = 0), RegionEntry\n-Segment at 60:6 (count = 1), RegionEntry\n-Segment at 60:7 (count = 0), Skipped\n+Segment at 60:6 (count = 0), Skipped\n Segment at 61:1 (count = 1), RegionEntry\n Segment at 61:2 (count = 0), Skipped"}, {"sha": "3e0bc6e495929ad6b2fc930a81f1c725b7e2be76", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.loops_and_branches.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -7,7 +7,6 @@ Counter in file 0 15:31 -> 15:32, #8\n Counter in file 0 17:10 -> 17:11, #10\n Counter in file 0 18:9 -> 18:15, #11\n Counter in file 0 19:5 -> 19:6, #12\n-Counter in file 0 19:5 -> 19:6, (#8 + 0)\n Counter in file 0 22:11 -> 25:2, #1\n Emitting segments for file: ../coverage/loops_and_branches.rs\n Combined regions:"}, {"sha": "a19f62533165569e5aea99e74e776016d540ddc4", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.nested_loops.txt", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -14,10 +14,8 @@ Counter in file 0 17:21 -> 17:33, #10\n Counter in file 0 19:21 -> 21:14, #11\n Counter in file 0 21:14 -> 21:15, #12\n Counter in file 0 22:10 -> 22:11, #13\n-Counter in file 0 22:10 -> 22:11, (#3 + 0)\n Counter in file 0 23:9 -> 23:23, #14\n Counter in file 0 24:6 -> 24:7, #15\n-Counter in file 0 24:6 -> 24:7, (#1 + 0)\n Counter in file 0 25:1 -> 25:2, #16\n Emitting segments for file: ../coverage/nested_loops.rs\n Combined regions:\n@@ -35,9 +33,9 @@ Combined regions:\n   17:21 -> 17:33 (count=1)\n   19:21 -> 21:14 (count=0)\n   21:14 -> 21:15 (count=2)\n-  22:10 -> 22:11 (count=3)\n+  22:10 -> 22:11 (count=2)\n   23:9 -> 23:23 (count=0)\n-  24:6 -> 24:7 (count=1)\n+  24:6 -> 24:7 (count=0)\n   25:1 -> 25:2 (count=1)\n Segment at 2:9 (count = 1), RegionEntry\n Segment at 3:27 (count = 0), Skipped\n@@ -66,11 +64,11 @@ Segment at 17:33 (count = 0), Skipped\n Segment at 19:21 (count = 0), RegionEntry\n Segment at 21:14 (count = 2), RegionEntry\n Segment at 21:15 (count = 0), Skipped\n-Segment at 22:10 (count = 3), RegionEntry\n+Segment at 22:10 (count = 2), RegionEntry\n Segment at 22:11 (count = 0), Skipped\n Segment at 23:9 (count = 0), RegionEntry\n Segment at 23:23 (count = 0), Skipped\n-Segment at 24:6 (count = 1), RegionEntry\n+Segment at 24:6 (count = 0), RegionEntry\n Segment at 24:7 (count = 0), Skipped\n Segment at 25:1 (count = 1), RegionEntry\n Segment at 25:2 (count = 0), Skipped"}, {"sha": "a444ea44901754c3c0c064204141daef3791cb8b", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.partial_eq_counter_without_region.txt", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -2,8 +2,7 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 4:39 -> 4:49, #1\n Counter in file 0 4:39 -> 4:49, #2\n Counter in file 0 4:39 -> 4:49, #3\n-Counter in file 0 4:39 -> 4:49, #4\n-Counter in file 0 4:48 -> 4:49, #5\n+Counter in file 0 4:48 -> 4:49, #4\n Counter in file 0 8:5 -> 8:17, #1\n Counter in file 0 21:11 -> 26:2, #1\n Counter in file 0 4:39 -> 4:40, #1\n@@ -20,8 +19,7 @@ Counter in file 0 4:32 -> 4:33, #5\n Counter in file 0 4:51 -> 4:54, #1\n Counter in file 0 4:51 -> 4:54, #2\n Counter in file 0 4:51 -> 4:54, #3\n-Counter in file 0 4:51 -> 4:54, #4\n-Counter in file 0 4:53 -> 4:54, #5\n+Counter in file 0 4:53 -> 4:54, #4\n Counter in file 0 13:9 -> 18:6, #1\n Counter in file 0 7:5 -> 7:6, #1\n Counter in file 0 4:39 -> 4:40, #1"}, {"sha": "25e1c8930bca80740142325dddb3103c26ae1dc2", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.try_error_result.txt", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -10,21 +10,18 @@ Counter in file 0 31:42 -> 31:43, #8\n Counter in file 0 32:10 -> 32:11, #9\n Counter in file 0 32:10 -> 32:11, #10\n Counter in file 0 33:6 -> 33:7, #11\n-Counter in file 0 33:6 -> 33:7, (#1 + 0)\n Counter in file 0 34:5 -> 34:11, #12\n Counter in file 0 35:1 -> 35:2, #13\n Counter in file 0 35:1 -> 35:2, #14\n Counter in file 0 5:8 -> 5:20, #1\n Counter in file 0 6:9 -> 6:16, #2\n Counter in file 0 8:9 -> 8:15, #3\n-Counter in file 0 9:6 -> 9:7, (#2 + 0)\n Counter in file 0 10:1 -> 10:2, #4\n Emitting segments for file: ../coverage/try_error_result.rs\n Combined regions:\n   5:8 -> 5:20 (count=6)\n   6:9 -> 6:16 (count=1)\n   8:9 -> 8:15 (count=5)\n-  9:6 -> 9:7 (count=1)\n   10:1 -> 10:2 (count=6)\n   13:9 -> 14:23 (count=1)\n   17:9 -> 17:10 (count=6)\n@@ -35,7 +32,7 @@ Combined regions:\n   31:13 -> 31:42 (count=5)\n   31:42 -> 31:43 (count=0)\n   32:10 -> 32:11 (count=5)\n-  33:6 -> 33:7 (count=6)\n+  33:6 -> 33:7 (count=5)\n   34:5 -> 34:11 (count=0)\n   35:1 -> 35:2 (count=2)\n Segment at 5:8 (count = 6), RegionEntry\n@@ -44,8 +41,6 @@ Segment at 6:9 (count = 1), RegionEntry\n Segment at 6:16 (count = 0), Skipped\n Segment at 8:9 (count = 5), RegionEntry\n Segment at 8:15 (count = 0), Skipped\n-Segment at 9:6 (count = 1), RegionEntry\n-Segment at 9:7 (count = 0), Skipped\n Segment at 10:1 (count = 6), RegionEntry\n Segment at 10:2 (count = 0), Skipped\n Segment at 13:9 (count = 1), RegionEntry\n@@ -64,7 +59,7 @@ Segment at 31:42 (count = 0), RegionEntry\n Segment at 31:43 (count = 0), Skipped\n Segment at 32:10 (count = 5), RegionEntry\n Segment at 32:11 (count = 0), Skipped\n-Segment at 33:6 (count = 6), RegionEntry\n+Segment at 33:6 (count = 5), RegionEntry\n Segment at 33:7 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n Segment at 34:11 (count = 0), Skipped"}, {"sha": "b75a88b2e929e7b0a0ed61e2bfc4635be97bb314", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while.txt", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -2,21 +2,18 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 2:9 -> 2:16, #1\n Counter in file 0 3:11 -> 3:20, #2\n Counter in file 0 3:21 -> 4:6, #3\n-Counter in file 0 4:6 -> 4:7, (#3 + 0)\n Counter in file 0 5:1 -> 5:2, #4\n Emitting segments for file: ../coverage/while.rs\n Combined regions:\n   2:9 -> 2:16 (count=1)\n   3:11 -> 3:20 (count=1)\n   3:21 -> 4:6 (count=0)\n-  4:6 -> 4:7 (count=0)\n   5:1 -> 5:2 (count=1)\n Segment at 2:9 (count = 1), RegionEntry\n Segment at 2:16 (count = 0), Skipped\n Segment at 3:11 (count = 1), RegionEntry\n Segment at 3:20 (count = 0), Skipped\n Segment at 3:21 (count = 0), RegionEntry\n-Segment at 4:6 (count = 0), RegionEntry\n-Segment at 4:7 (count = 0), Skipped\n+Segment at 4:6 (count = 0), Skipped\n Segment at 5:1 (count = 1), RegionEntry\n Segment at 5:2 (count = 0), Skipped"}, {"sha": "908613018a49aa2c49058741fec2a9124280bfeb", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while_early_return.txt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -5,7 +5,6 @@ Counter in file 0 12:13 -> 14:14, #3\n Counter in file 0 18:21 -> 20:22, #4\n Counter in file 0 22:21 -> 22:27, #5\n Counter in file 0 26:21 -> 26:27, #6\n-Counter in file 0 27:18 -> 27:19, (#5 + 0)\n Counter in file 0 30:9 -> 32:10, #7\n Counter in file 0 35:5 -> 35:11, #8\n Counter in file 0 36:1 -> 36:2, #9\n@@ -18,7 +17,6 @@ Combined regions:\n   18:21 -> 20:22 (count=1)\n   22:21 -> 22:27 (count=0)\n   26:21 -> 26:27 (count=1)\n-  27:18 -> 27:19 (count=0)\n   30:9 -> 32:10 (count=6)\n   35:5 -> 35:11 (count=0)\n   36:1 -> 36:2 (count=2)\n@@ -34,8 +32,6 @@ Segment at 22:21 (count = 0), RegionEntry\n Segment at 22:27 (count = 0), Skipped\n Segment at 26:21 (count = 1), RegionEntry\n Segment at 26:27 (count = 0), Skipped\n-Segment at 27:18 (count = 0), RegionEntry\n-Segment at 27:19 (count = 0), Skipped\n Segment at 30:9 (count = 6), RegionEntry\n Segment at 32:10 (count = 0), Skipped\n Segment at 35:5 (count = 0), RegionEntry"}, {"sha": "cd23e4220cf1754baedf0d1e2bd4bd77591f1342", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -188,32 +188,32 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n 47:5-50:6: @29[1]: _42 = const ()\">        ;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@28,30\u298a</span>\u2038<span class=\"annotation\">\u2989@28,30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n 52:8-52:16: @31[6]: _45 = Not(move _46)\n-52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n 54:6-54:6: @34.Goto: goto -&gt; bb35\"><span class=\"annotation\">@32,34\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n 54:6-54:6: @34.Goto: goto -&gt; bb35\">        a = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n-54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n-56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n+56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n 56:16-58:6: @38[1]: _0 = const ()\"><span class=\"annotation\">@36,38\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n 56:16-58:6: @38[1]: _0 = const ()\">        b = 30;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n-56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n 58:12-60:6: @37[1]: _0 = const ()\"><span class=\"annotation\">@37\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n 58:12-60:6: @37[1]: _0 = const ()\">        c = 400;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n-58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:6-60:6: @38.Goto: goto -&gt; bb39\"><span class=\"annotation\">@36,38\u298a</span>\u2038<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "2164a565e22b73bce1df4cf8835a2e97d36be0aa", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_and_branches/loops_and_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -89,6 +89,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:10-17:10: @15.Goto: goto -&gt; bb21\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @21[3]: _30 = ()\n 18:9-18:15: @21[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@21\u298a</span>Ok(())<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @20.Goto: goto -&gt; bb22\"><span class=\"annotation\">@16,18,19,20\u298a</span>\u2038<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b30a5a9f81e1f7bacd433640de212e3f525e188e", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -117,9 +117,9 @@\n 21:14-21:14: @29.Goto: goto -&gt; bb30\">                }</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n 21:14-21:14: @29.Goto: goto -&gt; bb30\">            }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:14-21:14: @23.Goto: goto -&gt; bb30\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @9.Goto: goto -&gt; bb10\"><span class=\"annotation\">@6,8,9\u298a</span>\u2038<span class=\"annotation\">\u2989@6,8,9</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:2-25:2: @33.Return: return\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "469a00f62060e1a17d9feb3642cecd78a17c851e", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq_counter_without_region/partial_eq_counter_without_region.{impl#1}-cmp.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -60,11 +60,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n-4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @10[1]: _27 = _21\n-4:51-4:54: @10[2]: _0 = _27\n-4:51-4:54: @10.Goto: goto -&gt; bb13\"><span class=\"annotation\">@10\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @10[1]: _27 = _21\n-4:51-4:54: @10[2]: _0 = _27\n-4:51-4:54: @10.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@10</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n 4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:54-4:54: @15.Return: return\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "feae343bbbb8add7ee6846e54d9ac1bf8ed4fd07", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq_counter_without_region/partial_eq_counter_without_region.{impl#2}-partial_cmp.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -61,11 +61,7 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">@17\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n 4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n-4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @12[1]: _31 = _23\n-4:39-4:49: @12[2]: _0 = _31\n-4:39-4:49: @12.Goto: goto -&gt; bb16\"><span class=\"annotation\">@12\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @12[1]: _31 = _23\n-4:39-4:49: @12[2]: _0 = _31\n-4:39-4:49: @12.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@12</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n 4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n 4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">\u2989@17</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:49-4:49: @18.Return: return\"><span class=\"annotation\">@18\u298a</span>\u2038<span class=\"annotation\">\u2989@18</span></span></span></span></div>\n </body>"}, {"sha": "cc5e54f87ce3a99a450edee48cbb5fe81ebd8ca6", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.tight_infinite_loop/tight_infinite_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -63,8 +63,8 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n 2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @4.FalseUnwind: falseUnwind -&gt; [real: bb5, cleanup: bb6]\n-3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:16-3:16: @5.Goto: goto -&gt; bb4\"><span class=\"annotation\">@4,5\u298a</span>\u2038<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "c273c8c88e6f3b0fc0e2b90c754f0f329cad7051", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -107,9 +107,9 @@\n 31:42-31:43: @26[4]: _36 = _33\n 31:42-31:43: @26.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb27, unwind: bb32]\"><span class=\"annotation\">@24,26,27,28\u298a</span>?<span class=\"annotation\">\u2989@24,26,27,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:10-32:10: @15.Goto: goto -&gt; bb29\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:10-32:10: @23.Goto: goto -&gt; bb29\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @1.Goto: goto -&gt; bb2\"><span class=\"annotation\">@0,1\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:6-33:6: @29.Goto: goto -&gt; bb2\"><span class=\"annotation\">@29\u298a</span>\u2038<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @29.Goto: goto -&gt; bb2\"><span class=\"annotation\">@29\u298a</span>\u2038<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n 34:5-34:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _38)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "49b8bb5520d86f93348d211d0ad34c2a28b71423", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -65,7 +65,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:11-3:14: @2[2]: _4 = _1\n 3:11-3:20: @2[3]: _3 = Ge(move _4, const 10_i32)\n 3:11-3:20: @2[5]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@1,2\u298a</span>num &gt;= 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\"><span class=\"annotation\">@3,5\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:6-4:6: @5.Goto: goto -&gt; bb1\"><span class=\"annotation\">@3,5\u298a</span>\u2038<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3d75e61b8005564b51b3e349433e4d2a13c565fa", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while_early_return/while_early_return.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -102,16 +102,16 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @10[0]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@10\u298a</span>Err(1)<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:18-27:18: @11.Goto: goto -&gt; bb13\"><span class=\"annotation\">@9,11\u298a</span>\u2038<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n 35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "cd23e4220cf1754baedf0d1e2bd4bd77591f1342", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -188,32 +188,32 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n 47:5-50:6: @29[1]: _42 = const ()\">        ;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@28,30\u298a</span>\u2038<span class=\"annotation\">\u2989@28,30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n 52:8-52:16: @31[6]: _45 = Not(move _46)\n-52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n 54:6-54:6: @34.Goto: goto -&gt; bb35\"><span class=\"annotation\">@32,34\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n 54:6-54:6: @34.Goto: goto -&gt; bb35\">        a = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n 52:17-54:6: @34[1]: _44 = const ()\n-54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n-56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n+56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n 56:16-58:6: @38[1]: _0 = const ()\"><span class=\"annotation\">@36,38\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n 56:16-58:6: @38[1]: _0 = const ()\">        b = 30;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n-56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n 58:12-60:6: @37[1]: _0 = const ()\"><span class=\"annotation\">@37\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n 58:12-60:6: @37[1]: _0 = const ()\">        c = 400;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n-58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:6-60:6: @38.Goto: goto -&gt; bb39\"><span class=\"annotation\">@36,38\u298a</span>\u2038<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "2164a565e22b73bce1df4cf8835a2e97d36be0aa", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.loops_and_branches/loops_and_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_and_branches%2Floops_and_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -89,6 +89,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:10-17:10: @15.Goto: goto -&gt; bb21\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @21[3]: _30 = ()\n 18:9-18:15: @21[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@21\u298a</span>Ok(())<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @20.Goto: goto -&gt; bb22\"><span class=\"annotation\">@16,18,19,20\u298a</span>\u2038<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b30a5a9f81e1f7bacd433640de212e3f525e188e", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -117,9 +117,9 @@\n 21:14-21:14: @29.Goto: goto -&gt; bb30\">                }</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n 21:14-21:14: @29.Goto: goto -&gt; bb30\">            }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:14-21:14: @23.Goto: goto -&gt; bb30\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @9.Goto: goto -&gt; bb10\"><span class=\"annotation\">@6,8,9\u298a</span>\u2038<span class=\"annotation\">\u2989@6,8,9</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:2-25:2: @33.Return: return\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "469a00f62060e1a17d9feb3642cecd78a17c851e", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq_counter_without_region/partial_eq_counter_without_region.{impl#1}-cmp.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -60,11 +60,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n-4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @10[1]: _27 = _21\n-4:51-4:54: @10[2]: _0 = _27\n-4:51-4:54: @10.Goto: goto -&gt; bb13\"><span class=\"annotation\">@10\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @10[1]: _27 = _21\n-4:51-4:54: @10[2]: _0 = _27\n-4:51-4:54: @10.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@10</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n 4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:54-4:54: @15.Return: return\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "feae343bbbb8add7ee6846e54d9ac1bf8ed4fd07", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq_counter_without_region/partial_eq_counter_without_region.{impl#2}-partial_cmp.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq_counter_without_region%2Fpartial_eq_counter_without_region.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -61,11 +61,7 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">@17\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n 4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n-4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @12[1]: _31 = _23\n-4:39-4:49: @12[2]: _0 = _31\n-4:39-4:49: @12.Goto: goto -&gt; bb16\"><span class=\"annotation\">@12\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @12[1]: _31 = _23\n-4:39-4:49: @12[2]: _0 = _31\n-4:39-4:49: @12.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@12</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n 4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n 4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">\u2989@17</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:49-4:49: @18.Return: return\"><span class=\"annotation\">@18\u298a</span>\u2038<span class=\"annotation\">\u2989@18</span></span></span></span></div>\n </body>"}, {"sha": "cc5e54f87ce3a99a450edee48cbb5fe81ebd8ca6", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.tight_infinite_loop/tight_infinite_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_infinite_loop%2Ftight_infinite_loop.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -63,8 +63,8 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n 2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @4.FalseUnwind: falseUnwind -&gt; [real: bb5, cleanup: bb6]\n-3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:16-3:16: @5.Goto: goto -&gt; bb4\"><span class=\"annotation\">@4,5\u298a</span>\u2038<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "c273c8c88e6f3b0fc0e2b90c754f0f329cad7051", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -107,9 +107,9 @@\n 31:42-31:43: @26[4]: _36 = _33\n 31:42-31:43: @26.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb27, unwind: bb32]\"><span class=\"annotation\">@24,26,27,28\u298a</span>?<span class=\"annotation\">\u2989@24,26,27,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:10-32:10: @15.Goto: goto -&gt; bb29\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:10-32:10: @23.Goto: goto -&gt; bb29\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @1.Goto: goto -&gt; bb2\"><span class=\"annotation\">@0,1\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:6-33:6: @29.Goto: goto -&gt; bb2\"><span class=\"annotation\">@29\u298a</span>\u2038<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @29.Goto: goto -&gt; bb2\"><span class=\"annotation\">@29\u298a</span>\u2038<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n 34:5-34:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _38)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @30.Goto: goto -&gt; bb31\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "49b8bb5520d86f93348d211d0ad34c2a28b71423", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -65,7 +65,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:11-3:14: @2[2]: _4 = _1\n 3:11-3:20: @2[3]: _3 = Ge(move _4, const 10_i32)\n 3:11-3:20: @2[5]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@1,2\u298a</span>num &gt;= 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\"><span class=\"annotation\">@3,5\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:6-4:6: @5.Goto: goto -&gt; bb1\"><span class=\"annotation\">@3,5\u298a</span>\u2038<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3d75e61b8005564b51b3e349433e4d2a13c565fa", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.while_early_return/while_early_return.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b5020648fe294a1f139586e4243903d8c1a105b8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_return%2Fwhile_early_return.main.-------.InstrumentCoverage.0.html?ref=b5020648fe294a1f139586e4243903d8c1a105b8", "patch": "@@ -102,16 +102,16 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @10[0]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@10\u298a</span>Err(1)<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:18-27:18: @11.Goto: goto -&gt; bb13\"><span class=\"annotation\">@9,11\u298a</span>\u2038<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n 35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>"}]}