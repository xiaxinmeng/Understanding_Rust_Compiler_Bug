{"sha": "392d34b5076447d93167384edbb1b5d84b6fec88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MmQzNGI1MDc2NDQ3ZDkzMTY3Mzg0ZWRiYjFiNWQ4NGI2ZmVjODg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-19T01:00:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-19T01:00:27Z"}, "message": "Merge pull request #1711 from topecongiro/combine-control-flow-condition-body\n\nCombine control flow condition and body", "tree": {"sha": "a07a2b3df9958f2b0cf36517e7b59a3c6d8dca94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a07a2b3df9958f2b0cf36517e7b59a3c6d8dca94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392d34b5076447d93167384edbb1b5d84b6fec88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392d34b5076447d93167384edbb1b5d84b6fec88", "html_url": "https://github.com/rust-lang/rust/commit/392d34b5076447d93167384edbb1b5d84b6fec88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392d34b5076447d93167384edbb1b5d84b6fec88/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4368cd391edbe8b73650b39df654de9f61e9c734", "url": "https://api.github.com/repos/rust-lang/rust/commits/4368cd391edbe8b73650b39df654de9f61e9c734", "html_url": "https://github.com/rust-lang/rust/commit/4368cd391edbe8b73650b39df654de9f61e9c734"}, {"sha": "91bd1fdc86f9891d063b11c87cee28aa3728fac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bd1fdc86f9891d063b11c87cee28aa3728fac0", "html_url": "https://github.com/rust-lang/rust/commit/91bd1fdc86f9891d063b11c87cee28aa3728fac0"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "fb26fb2ff7d80a6e28621a9fd0571a35b4150df0", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -78,7 +78,7 @@\n \n use Shape;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, first_line_width, last_line_width, mk_sp};\n+use utils::{wrap_str, first_line_width, last_line_width, mk_sp, last_line_extendable};\n use expr::rewrite_call;\n use config::IndentStyle;\n use macros::convert_try_mac;\n@@ -226,8 +226,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n                         total_span,\n                         context,\n                         shape,\n-                    )\n-                    {\n+                    ) {\n                         // If the first line of the last method does not fit into a single line\n                         // after the others, allow new lines.\n                         almost_total + first_line_width(&last[0]) < context.config.max_width()\n@@ -322,12 +321,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n }\n \n fn is_extendable_parent(context: &RewriteContext, parent_str: &str) -> bool {\n-    context.config.chain_indent() == IndentStyle::Block &&\n-        parent_str.lines().last().map_or(false, |s| {\n-            s.trim()\n-                .chars()\n-                .all(|c| c == ')' || c == ']' || c == '}' || c == '?')\n-        })\n+    context.config.chain_indent() == IndentStyle::Block && last_line_extendable(parent_str)\n }\n \n // True if the chain is only `?`s."}, {"sha": "cba0ef381a03a9ad2e93cec0381a2e71f6ce8bdb", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -21,7 +21,7 @@ use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTacti\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip, mk_sp};\n+            colon_spaces, contains_skip, mk_sp, last_line_extendable};\n use visitor::FmtVisitor;\n use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -1145,7 +1145,8 @@ impl<'a> ControlFlow<'a> {\n         };\n \n         let force_newline_brace = context.config.control_style() == Style::Rfc &&\n-            pat_expr_string.contains('\\n');\n+            pat_expr_string.contains('\\n') &&\n+            !last_line_extendable(&pat_expr_string);\n \n         // Try to format if-else on single line.\n         if self.allow_single_line && context.config.single_line_if_else_max_width() > 0 {"}, {"sha": "b7c265748381da84a5e00f4cd3cf3f04e5619406", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -588,8 +588,7 @@ pub fn format_impl(\n             &result,\n             &where_clause_str,\n             &item,\n-        ))\n-        {\n+        )) {\n             result.push_str(&where_clause_str);\n             if where_clause_str.contains('\\n') {\n                 let white_space = offset.to_string(context.config);\n@@ -736,8 +735,7 @@ fn format_impl_ref_and_type(\n                     true,\n                     polarity_str,\n                     result_len,\n-                )\n-            {\n+                ) {\n                 result.push_str(&trait_ref_str);\n             } else {\n                 let generics_str = try_opt!(rewrite_generics_inner(\n@@ -2114,8 +2112,7 @@ fn rewrite_fn_base(\n                 !has_braces,\n                 put_args_in_block && ret_str.is_empty(),\n                 Some(span.hi),\n-            )\n-        {\n+            ) {\n             if !where_clause_str.contains('\\n') {\n                 if last_line_width(&result) + where_clause_str.len() > context.config.max_width() {\n                     result.push('\\n');"}, {"sha": "ed444210081069f0e145698e0b393a0c0b6b9e3a", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -376,8 +376,7 @@ fn count_wildcard_suffix_len(\n     for item in items.iter().rev().take_while(|i| match i.item {\n         Some(ref internal_string) if internal_string == \"_\" => true,\n         _ => false,\n-    })\n-    {\n+    }) {\n         suffix_len += 1;\n \n         if item.pre_comment.is_some() || item.post_comment.is_some() {"}, {"sha": "1be83d01babacad7726227d67aad20095ae1afb5", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -108,6 +108,15 @@ pub fn trimmed_last_line_width(s: &str) -> usize {\n     }\n }\n \n+#[inline]\n+pub fn last_line_extendable(s: &str) -> bool {\n+    s.lines().last().map_or(false, |s| {\n+        s.trim()\n+            .chars()\n+            .all(|c| c == ')' || c == ']' || c == '}' || c == '?')\n+    })\n+}\n+\n #[inline]\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {"}, {"sha": "b34108800e78046166c353d8cb47a31884397a08", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d34b5076447d93167384edbb1b5d84b6fec88/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=392d34b5076447d93167384edbb1b5d84b6fec88", "patch": "@@ -298,8 +298,7 @@ impl<'a> FmtVisitor<'a> {\n                     item,\n                     self.block_indent,\n                     where_span_end,\n-                )\n-                {\n+                ) {\n                     self.buffer.push_str(&impl_str);\n                     self.last_pos = source!(self, item.span).hi;\n                 }\n@@ -310,8 +309,7 @@ impl<'a> FmtVisitor<'a> {\n                     &self.get_context(),\n                     item,\n                     self.block_indent,\n-                )\n-                {\n+                ) {\n                     self.buffer.push_str(&trait_str);\n                     self.last_pos = source!(self, item.span).hi;\n                 }"}]}