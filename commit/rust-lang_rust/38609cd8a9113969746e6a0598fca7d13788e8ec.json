{"sha": "38609cd8a9113969746e6a0598fca7d13788e8ec", "node_id": "C_kwDOAAsO6NoAKDM4NjA5Y2Q4YTkxMTM5Njk3NDZlNmEwNTk4ZmNhN2QxMzc4OGU4ZWM", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2022-05-27T01:59:01Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2022-05-27T01:59:01Z"}, "message": "fix nanos overflow for f64", "tree": {"sha": "980904fcc9083fc9ae7336f993002cbb2dc854c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980904fcc9083fc9ae7336f993002cbb2dc854c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38609cd8a9113969746e6a0598fca7d13788e8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38609cd8a9113969746e6a0598fca7d13788e8ec", "html_url": "https://github.com/rust-lang/rust/commit/38609cd8a9113969746e6a0598fca7d13788e8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38609cd8a9113969746e6a0598fca7d13788e8ec/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06af3a63a597a40604976666dea19a503557855a", "url": "https://api.github.com/repos/rust-lang/rust/commits/06af3a63a597a40604976666dea19a503557855a", "html_url": "https://github.com/rust-lang/rust/commit/06af3a63a597a40604976666dea19a503557855a"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "6983f10df3f7f2fb40878d6e44089ee2f187d8a7", "filename": "library/core/src/time.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/38609cd8a9113969746e6a0598fca7d13788e8ec/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38609cd8a9113969746e6a0598fca7d13788e8ec/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=38609cd8a9113969746e6a0598fca7d13788e8ec", "patch": "@@ -1288,12 +1288,14 @@ macro_rules! try_from_secs {\n             let rem_msb = nanos_tmp & rem_msb_mask == 0;\n             let add_ns = !(rem_msb || (is_even && is_tie));\n \n-            // note that neither `f32`, nor `f64` can represent\n-            // 0.999_999_999_5 exactly, so the nanos part\n-            // never will be equal to NANOS_PER_SEC\n+            // f32 does not have enough presicion to trigger the second branch\n+            // since it can not represent numbers between 0.999_999_940_395 and 1.0.\n             let nanos = nanos + add_ns as u32;\n-            debug_assert!(nanos < NANOS_PER_SEC);\n-            (0, nanos)\n+            if ($mant_bits == 23) || (nanos != NANOS_PER_SEC) {\n+                (0, nanos)\n+            } else {\n+                (1, 0)\n+            }\n         } else if exp < $mant_bits {\n             let secs = u64::from(mant >> ($mant_bits - exp));\n             let t = <$double_ty>::from((mant << exp) & MANT_MASK);\n@@ -1309,11 +1311,16 @@ macro_rules! try_from_secs {\n             let rem_msb = nanos_tmp & rem_msb_mask == 0;\n             let add_ns = !(rem_msb || (is_even && is_tie));\n \n-            // neither `f32`, nor `f64` can represent x.999_999_999_5 exactly,\n-            // so the nanos part never will be equal to NANOS_PER_SEC\n+            // f32 does not have enough presicion to trigger the second branch.\n+            // For example, it can not represent numbers between 1.999_999_880...\n+            // and 2.0. Bigger values result in even smaller presicion of the\n+            // fractional part.\n             let nanos = nanos + add_ns as u32;\n-            debug_assert!(nanos < NANOS_PER_SEC);\n-            (secs, nanos)\n+            if ($mant_bits == 23) || (nanos != NANOS_PER_SEC) {\n+                (secs, nanos)\n+            } else {\n+                (secs + 1, 0)\n+            }\n         } else if exp < 64 {\n             // the input has no fractional part\n             let secs = u64::from(mant) << (exp - $mant_bits);\n@@ -1433,6 +1440,14 @@ impl Duration {\n     /// // the conversion uses rounding with tie resolution to even\n     /// let res = Duration::try_from_secs_f64(0.999e-9);\n     /// assert_eq!(res, Ok(Duration::new(0, 1)));\n+    /// let res = Duration::try_from_secs_f64(0.999_999_999_499);\n+    /// assert_eq!(res, Ok(Duration::new(0, 999_999_999)));\n+    /// let res = Duration::try_from_secs_f64(0.999_999_999_501);\n+    /// assert_eq!(res, Ok(Duration::new(1, 0)));\n+    /// let res = Duration::try_from_secs_f64(42.999_999_999_499);\n+    /// assert_eq!(res, Ok(Duration::new(42, 999_999_999)));\n+    /// let res = Duration::try_from_secs_f64(42.999_999_999_501);\n+    /// assert_eq!(res, Ok(Duration::new(43, 0)));\n     ///\n     /// // this float represents exactly 976562.5e-9\n     /// let val = f64::from_bits(0x3F50_0000_0000_0000);"}]}