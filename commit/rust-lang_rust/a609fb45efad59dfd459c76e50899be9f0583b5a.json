{"sha": "a609fb45efad59dfd459c76e50899be9f0583b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDlmYjQ1ZWZhZDU5ZGZkNDU5Yzc2ZTUwODk5YmU5ZjA1ODNiNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-01T13:17:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-01T13:17:42Z"}, "message": "Auto merge of #80547 - lqd:const_generics_defaults, r=varkor\n\nIn which we start to parse const generics defaults\n\nAs discussed in this [zulip topic](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/const.20generic.20defaults), this PR extracts the parsing parts from `@JulianKnodt's` PR #75384 for a better user-experience using the newly stabilized `min_const_generics` (albeit temporary) as shown in #80507: trying to use default values on const generics currently results in parse errors, as if the user didn't use the correct syntax (which is somewhat true but also misleading).\n\nThis PR extracts (and slightly modifies in a couple places) `@JulianKnodt's` parsing code (with attribution if I've done everything correctly), AST and HIR changes, and feature gate setup.\n\nThis feature is now marked as \"incomplete\" and thus will also print out the expected \"const generics default values are unstable\" error instead of a syntax error. Note that, as I've only extracted the parsing part, the actual feature will not work at all if enabled. There will be ICEs, and inference errors on the const generics default values themselves.\n\nFixes #80507.\n\nOnce this merges, I'll:\n- modify the const generics tracking issue to refer to the `const_generics_defaults` gate rather than the older temporary name it uses there.\n- create the GH `F-const_generics_defaults` label\n\nr? `@varkor`", "tree": {"sha": "c1fdab60473e830ac13b75ffaa0175c46bb27f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fdab60473e830ac13b75ffaa0175c46bb27f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a609fb45efad59dfd459c76e50899be9f0583b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a609fb45efad59dfd459c76e50899be9f0583b5a", "html_url": "https://github.com/rust-lang/rust/commit/a609fb45efad59dfd459c76e50899be9f0583b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a609fb45efad59dfd459c76e50899be9f0583b5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "html_url": "https://github.com/rust-lang/rust/commit/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6"}, {"sha": "942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "html_url": "https://github.com/rust-lang/rust/commit/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5"}], "stats": {"total": 213, "additions": 160, "deletions": 53}, "files": [{"sha": "8167bde0322f27f4736b5a41c28caa2d58fdd5c2", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -368,6 +368,8 @@ pub enum GenericParamKind {\n         ty: P<Ty>,\n         /// Span of the `const` keyword.\n         kw_span: Span,\n+        /// Optional default value for the const generic param\n+        default: Option<AnonConst>,\n     },\n }\n "}, {"sha": "97966cc326055b62833aa21da843774a23b0a837", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -790,8 +790,9 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n-        GenericParamKind::Const { ty, kw_span: _ } => {\n+        GenericParamKind::Const { ty, kw_span: _, default } => {\n             vis.visit_ty(ty);\n+            visit_opt(default, |default| vis.visit_anon_const(default));\n         }\n     }\n     smallvec![param]"}, {"sha": "a696626f8c419bfcc2cee63c1e4a9b63fe852f8f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -578,7 +578,12 @@ pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Generi\n     match param.kind {\n         GenericParamKind::Lifetime => (),\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n-        GenericParamKind::Const { ref ty, .. } => visitor.visit_ty(ty),\n+        GenericParamKind::Const { ref ty, ref default, .. } => {\n+            visitor.visit_ty(ty);\n+            if let Some(default) = default {\n+                visitor.visit_anon_const(default);\n+            }\n+        }\n     }\n }\n "}, {"sha": "f81dc39842cb9fa10e564c8fae2aadf7ea8a9bc4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -2242,13 +2242,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty, kw_span: _ } => {\n+            GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())\n                     });\n+                let default = default.as_ref().map(|def| self.lower_anon_const(def));\n \n-                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty })\n+                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty, default })\n             }\n         };\n "}, {"sha": "e172f9d71ffbcf0bdce31480b03963657a24aeb2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -733,7 +733,7 @@ fn validate_generic_param_order(\n         let (ord_kind, ident) = match &param.kind {\n             GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n-            GenericParamKind::Const { ref ty, kw_span: _ } => {\n+            GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n                 let unordered = sess.features_untracked().const_generics;\n                 (ParamKindOrd::Const { unordered }, Some(format!(\"const {}: {}\", param.ident, ty)))\n@@ -774,8 +774,8 @@ fn validate_generic_param_order(\n                 }\n                 GenericParamKind::Type { default: None } => (),\n                 GenericParamKind::Lifetime => (),\n-                // FIXME(const_generics:defaults)\n-                GenericParamKind::Const { ty: _, kw_span: _ } => (),\n+                // FIXME(const_generics_defaults)\n+                GenericParamKind::Const { ty: _, kw_span: _, default: _ } => (),\n             }\n             first = false;\n         }"}, {"sha": "435f32535b6d4d5a383652a93f97bac9e0346568", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -619,6 +619,10 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         extended_key_value_attributes,\n         \"arbitrary expressions in key-value attributes are unstable\"\n     );\n+    gate_all!(\n+        const_generics_defaults,\n+        \"default values for const generic parameters are experimental\"\n+    );\n     if sess.parse_sess.span_diagnostic.err_count() == 0 {\n         // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n         // involved, so we only emit errors where there are no other parsing errors."}, {"sha": "bdd378b34e144829e81d1bfb7ce9e6e5f5bc018e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -2668,13 +2668,17 @@ impl<'a> State<'a> {\n                         s.print_type(default)\n                     }\n                 }\n-                ast::GenericParamKind::Const { ref ty, kw_span: _ } => {\n+                ast::GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();\n                     s.word_space(\":\");\n                     s.print_type(ty);\n-                    s.print_type_bounds(\":\", &param.bounds)\n+                    s.print_type_bounds(\":\", &param.bounds);\n+                    if let Some(ref _default) = default {\n+                        // FIXME(const_generics_defaults): print the `default` value here\n+                        todo!();\n+                    }\n                 }\n             }\n         });"}, {"sha": "3c8bf12b3d415879bb17a4c4bf66b23a55e41b77", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -145,7 +145,8 @@ fn inject_impl_of_structural_trait(\n                 *default = None;\n                 ast::GenericArg::Type(cx.ty_ident(span, param.ident))\n             }\n-            ast::GenericParamKind::Const { ty: _, kw_span: _ } => {\n+            ast::GenericParamKind::Const { ty: _, kw_span: _, default } => {\n+                *default = None;\n                 ast::GenericArg::Const(cx.const_ident(span, param.ident))\n             }\n         })"}, {"sha": "252e96b47c664bf938ab9a4e442bb9402b797c84", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -581,7 +581,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n-    /// Allows non-trivial generic constants which have to be manually propageted upwards.\n+    /// Allows non-trivial generic constants which have to be manually propagated upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n     /// Allows basic arithmetic on floating point types in a `const fn`.\n@@ -623,6 +623,9 @@ declare_features! (\n     /// `:pat2018` and `:pat2021` macro matchers.\n     (active, edition_macro_pats, \"1.51.0\", Some(54883), None),\n \n+    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n+    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -647,6 +650,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::repr128,\n     sym::unsized_locals,\n     sym::capture_disjoint_fields,\n+    sym::const_generics_defaults,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "ebeb1bae2a314396ebdc5219bf97f28121e47e90", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -418,6 +418,8 @@ pub enum GenericParamKind<'hir> {\n     },\n     Const {\n         ty: &'hir Ty<'hir>,\n+        /// Optional default value for the const generic param\n+        default: Option<AnonConst>,\n     },\n }\n "}, {"sha": "87a2434152fcf20f4446b55ca86ebd16f21e22a0", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -877,7 +877,12 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     match param.kind {\n         GenericParamKind::Lifetime { .. } => {}\n         GenericParamKind::Type { ref default, .. } => walk_list!(visitor, visit_ty, default),\n-        GenericParamKind::Const { ref ty } => visitor.visit_ty(ty),\n+        GenericParamKind::Const { ref ty, ref default } => {\n+            visitor.visit_ty(ty);\n+            if let Some(ref default) = default {\n+                visitor.visit_anon_const(default);\n+            }\n+        }\n     }\n     walk_list!(visitor, visit_param_bound, param.bounds);\n }"}, {"sha": "85bc38daa3d2804800b55fa8b87055b035a854f9", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -2205,9 +2205,13 @@ impl<'a> State<'a> {\n                     self.print_type(&default)\n                 }\n             }\n-            GenericParamKind::Const { ref ty } => {\n+            GenericParamKind::Const { ref ty, ref default } => {\n                 self.word_space(\":\");\n-                self.print_type(ty)\n+                self.print_type(ty);\n+                if let Some(ref _default) = default {\n+                    // FIXME(const_generics_defaults): print the `default` value here\n+                    todo!();\n+                }\n             }\n         }\n     }"}, {"sha": "14a56119f21e31ef8ca08020a0b567e871a58a9a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -958,7 +958,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 ty::GenericParamDefKind::Type { has_default, .. } => {\n                     Some((param.def_id, has_default))\n                 }\n-                ty::GenericParamDefKind::Const => None, // FIXME(const_generics:defaults)\n+                ty::GenericParamDefKind::Const => None, // FIXME(const_generics_defaults)\n             })\n             .peekable();\n         let has_default = {"}, {"sha": "ac6ceafaba8c7c050fbb9fbeccab90259dcae18c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1834,7 +1834,7 @@ impl EncodeContext<'a, 'tcx> {\n                         EntryKind::ConstParam,\n                         true,\n                     );\n-                    // FIXME(const_generics:defaults)\n+                    // FIXME(const_generics_defaults)\n                 }\n             }\n         }"}, {"sha": "77f166889378202c3021ac9a8a30271cdda7b61a", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -203,7 +203,7 @@ pub trait Printer<'tcx>: Sized {\n                                     self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n                                 )\n                     }\n-                    ty::GenericParamDefKind::Const => false, // FIXME(const_generics:defaults)\n+                    ty::GenericParamDefKind::Const => false, // FIXME(const_generics_defaults)\n                 }\n             })\n             .count();"}, {"sha": "42a13376863216cbd8ec053a902bf4b3793ba9c4", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n use rustc_errors::PResult;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, sym};\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -56,12 +56,26 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n+        // Parse optional const generics default value, taking care of feature gating the spans\n+        // with the unstable syntax mechanism.\n+        let default = if self.eat(&token::Eq) {\n+            // The gated span goes from the `=` to the end of the const argument that follows (and\n+            // which could be a block expression).\n+            let start = self.prev_token.span;\n+            let const_arg = self.parse_const_arg()?;\n+            let span = start.to(const_arg.value.span);\n+            self.sess.gated_spans.gate(sym::const_generics_defaults, span);\n+            Some(const_arg)\n+        } else {\n+            None\n+        };\n+\n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,\n             attrs: preceding_attrs.into(),\n             bounds: Vec::new(),\n-            kind: GenericParamKind::Const { ty, kw_span: const_span },\n+            kind: GenericParamKind::Const { ty, kw_span: const_span, default },\n             is_placeholder: false,\n         })\n     }"}, {"sha": "43dee391c171aaf5e529dd7ce2da95aa585b0928", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -515,6 +515,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse a const argument, e.g. `<3>`. It is assumed the angle brackets will be parsed by\n+    /// the caller.\n+    pub(super) fn parse_const_arg(&mut self) -> PResult<'a, AnonConst> {\n+        // Parse const argument.\n+        let value = if let token::OpenDelim(token::Brace) = self.token.kind {\n+            self.parse_block_expr(\n+                None,\n+                self.token.span,\n+                BlockCheckMode::Default,\n+                ast::AttrVec::new(),\n+            )?\n+        } else {\n+            self.handle_unambiguous_unbraced_const_arg()?\n+        };\n+        Ok(AnonConst { id: ast::DUMMY_NODE_ID, value })\n+    }\n+\n     /// Parse a generic argument in a path segment.\n     /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n     fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n@@ -524,17 +541,7 @@ impl<'a> Parser<'a> {\n             GenericArg::Lifetime(self.expect_lifetime())\n         } else if self.check_const_arg() {\n             // Parse const argument.\n-            let value = if let token::OpenDelim(token::Brace) = self.token.kind {\n-                self.parse_block_expr(\n-                    None,\n-                    self.token.span,\n-                    BlockCheckMode::Default,\n-                    ast::AttrVec::new(),\n-                )?\n-            } else {\n-                self.handle_unambiguous_unbraced_const_arg()?\n-            };\n-            GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value })\n+            GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n             match self.parse_ty() {"}, {"sha": "def2a501cf475af82f57ca5805a722c5c5a8c7a7", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n         let kind = match &p.kind {\n-            // FIXME(const_generics:defaults)\n+            // FIXME(const_generics_defaults)\n             hir::GenericParamKind::Type { default, .. } if default.is_some() => {\n                 AnnotationKind::Container\n             }"}, {"sha": "fbe99a31150549a356f88a4ba39e894bd7ac34ba", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -586,7 +586,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty, kw_span: _ } => {\n+                GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n+                    // FIXME(const_generics_defaults): handle `default` value here\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }"}, {"sha": "0de732b2cf97e9837f48c31c64e9d7f04230c297", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -214,7 +214,7 @@ enum ResolutionError<'a> {\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n-    ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters."}, {"sha": "987badcedde4cb375214b2d13726c212dd8547f4", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1343,9 +1343,12 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                         self.visit_ty(ty);\n                     }\n                 }\n-                hir::GenericParamKind::Const { ref ty } => {\n+                hir::GenericParamKind::Const { ref ty, ref default } => {\n                     self.process_bounds(param.bounds);\n                     self.visit_ty(ty);\n+                    if let Some(default) = default {\n+                        self.visit_anon_const(default);\n+                    }\n                 }\n             }\n         }"}, {"sha": "e7d1c9d3bbe581f276f375a3ad539d8b69d1c1d1", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -614,9 +614,13 @@ impl<'hir> Sig for hir::Generics<'hir> {\n                 start: offset + text.len(),\n                 end: offset + text.len() + param_text.as_str().len(),\n             });\n-            if let hir::GenericParamKind::Const { ref ty } = param.kind {\n+            if let hir::GenericParamKind::Const { ref ty, ref default } = param.kind {\n                 param_text.push_str(\": \");\n                 param_text.push_str(&ty_to_string(&ty));\n+                if let Some(ref _default) = default {\n+                    // FIXME(const_generics_defaults): push the `default` value here\n+                    todo!();\n+                }\n             }\n             if !param.bounds.is_empty() {\n                 param_text.push_str(\": \");"}, {"sha": "64b50a9b70a7028111bb16652c8748f4ed222ce3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -368,6 +368,7 @@ symbols! {\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,\n+        const_generics_defaults,\n         const_if_match,\n         const_impl_trait,\n         const_in_array_repeat_expressions,"}, {"sha": "a3a2b8967c6062f8bea0b06526dffd45cd36a025", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -387,7 +387,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     defaults.types += has_default as usize\n                 }\n                 GenericParamDefKind::Const => {\n-                    // FIXME(const_generics:defaults)\n+                    // FIXME(const_generics_defaults)\n                 }\n             };\n         }"}, {"sha": "9a2210e4f0e8019cb0cd5b15c5fbeac4cac3906f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -486,7 +486,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                     GenericParamDefKind::Const => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n-                        // FIXME(const_generics:defaults)\n+                        // FIXME(const_generics_defaults)\n                         if infer_args {\n                             // No const parameters were provided, we can infer all.\n                             self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "7126b62405968fac1f7b3cecc6000f3ddb48c894", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1376,7 +1376,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     GenericParamDefKind::Const => {\n-                        // FIXME(const_generics:defaults)\n+                        // FIXME(const_generics_defaults)\n                         // No const parameters were provided, we have to infer them.\n                         self.fcx.var_for_def(self.span, param)\n                     }"}, {"sha": "ab41ff372e23feaa8c8ceffb87f80b1c3cdb20e4", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -286,9 +286,9 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n         // We currently only check wf of const params here.\n         hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => (),\n \n-        // Const parameters are well formed if their\n-        // type is structural match.\n-        hir::GenericParamKind::Const { ty: hir_ty } => {\n+        // Const parameters are well formed if their type is structural match.\n+        // FIXME(const_generics_defaults): we also need to check that the `default` is wf.\n+        hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n \n             let err_ty_str;\n@@ -785,7 +785,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n \n             GenericParamDefKind::Const => {\n-                // FIXME(const_generics:defaults)\n+                // FIXME(const_generics_defaults)\n                 fcx.tcx.mk_param_from_def(param)\n             }\n         }"}, {"sha": "2ebb1a3be4e44b5655a8ab8a9eb8790ba00c8195", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -228,7 +228,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Const { .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n-                    // FIXME(const_generics:defaults)\n+                    // FIXME(const_generics_defaults)\n                 }\n             }\n         }"}, {"sha": "2f430842f9d8e958fd8ded11085579b4557b7e64", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -607,11 +607,12 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     synthetic,\n                 },\n             ),\n-            hir::GenericParamKind::Const { ref ty } => (\n+            hir::GenericParamKind::Const { ref ty, default: _ } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     ty: ty.clean(cx),\n+                    // FIXME(const_generics_defaults): add `default` field here for docs\n                 },\n             ),\n         };\n@@ -1385,7 +1386,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &DocContext<'_>) -> Type {\n                                 if let Some(ct) = const_ {\n                                     ct_substs.insert(const_param_def_id.to_def_id(), ct.clean(cx));\n                                 }\n-                                // FIXME(const_generics:defaults)\n+                                // FIXME(const_generics_defaults)\n                                 indices.consts += 1;\n                             }\n                         }"}, {"sha": "5b0a42a45565cff2d9fd7b69100095bbd591ed3f", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1,4 +1,4 @@\n fn foo<const SIZE: usize = 5>() {}\n-                      //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n+//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "31b5ad5123ed2bf175bb92a04d70a90e40fa0539", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1,8 +1,12 @@\n-error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n+error[E0658]: default values for const generic parameters are experimental\n   --> $DIR/default_function_param.rs:1:26\n    |\n LL | fn foo<const SIZE: usize = 5>() {}\n-   |                          ^ expected one of 7 possible tokens\n+   |                          ^^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "14bac473ed9a08a8d1dc537e95cd98797e13c40b", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1,4 +1,4 @@\n trait Foo<const KIND: bool = true> {}\n-                        //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n+//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "5617b35ad013afc2510f5c87109d8886a42d57fc", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -1,8 +1,12 @@\n-error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n+error[E0658]: default values for const generic parameters are experimental\n   --> $DIR/default_trait_param.rs:1:28\n    |\n LL | trait Foo<const KIND: bool = true> {}\n-   |                            ^ expected one of 7 possible tokens\n+   |                            ^^^^^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a85e2a2f2c4f18b46383dc28672a8e998079dc32", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -7,7 +7,7 @@ struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n //[min]~^^ ERROR generic parameters may not be used in const operations\n \n-// FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n+// FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n //~^ ERROR constant values inside of type parameter defaults\n //~| ERROR type parameters with a default"}, {"sha": "5b5ccc888732242ddfd158596d83a27a0c8b775c", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -0,0 +1,9 @@\n+#[cfg(FALSE)]\n+struct A<const N: usize = 3>;\n+//~^ ERROR default values for const generic parameters are experimental\n+\n+#[cfg(FALSE)]\n+fn foo<const B: bool = false>() {}\n+//~^ ERROR default values for const generic parameters are experimental\n+\n+fn main() {}"}, {"sha": "e2b48d793fdfffdd6b8f072744e6ca81183248c3", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/feature-gate-const_generics_defaults.rs:2:25\n+   |\n+LL | struct A<const N: usize = 3>;\n+   |                         ^^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n+\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/feature-gate-const_generics_defaults.rs:6:22\n+   |\n+LL | fn foo<const B: bool = false>() {}\n+   |                      ^^^^^^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "940573e4caa69799c64ee4d874586780f0ff7b7d", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a609fb45efad59dfd459c76e50899be9f0583b5a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=a609fb45efad59dfd459c76e50899be9f0583b5a", "patch": "@@ -407,6 +407,10 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     }\n }\n \n+pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n+    eq_expr(&l.value, &r.value)\n+}\n+\n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n     matches!(\n         (l, r),\n@@ -497,7 +501,8 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: l, kw_span: _ }, Const { ty: r, kw_span: _ }) => eq_ty(l, r),\n+            (Const { ty: lt, kw_span: _ , default: ld}, Const { ty: rt, kw_span: _, default: rd }) =>\n+                eq_ty(lt, rt) && both(ld, rd, |ld, rd| eq_anon_const(ld, rd)),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}]}