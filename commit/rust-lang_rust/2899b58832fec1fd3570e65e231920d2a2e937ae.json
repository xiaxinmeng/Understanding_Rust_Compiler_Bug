{"sha": "2899b58832fec1fd3570e65e231920d2a2e937ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTliNTg4MzJmZWMxZmQzNTcwZTY1ZTIzMTkyMGQyYTJlOTM3YWU=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-04-15T21:17:15Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-04-15T21:49:42Z"}, "message": "Add suggestion to borrow when casting T to *const/mut T", "tree": {"sha": "3f73ed854439f520b92dc16bfdfe2ba82ed04b18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f73ed854439f520b92dc16bfdfe2ba82ed04b18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2899b58832fec1fd3570e65e231920d2a2e937ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2899b58832fec1fd3570e65e231920d2a2e937ae", "html_url": "https://github.com/rust-lang/rust/commit/2899b58832fec1fd3570e65e231920d2a2e937ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2899b58832fec1fd3570e65e231920d2a2e937ae/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60158f4a7cf3e3063df6127d3f0d206921d285b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/60158f4a7cf3e3063df6127d3f0d206921d285b0", "html_url": "https://github.com/rust-lang/rust/commit/60158f4a7cf3e3063df6127d3f0d206921d285b0"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "b760a54f08c76f1e2f979468ca87f0ca993cd987", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2899b58832fec1fd3570e65e231920d2a2e937ae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2899b58832fec1fd3570e65e231920d2a2e937ae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=2899b58832fec1fd3570e65e231920d2a2e937ae", "patch": "@@ -359,6 +359,21 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     {\n                         sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n                     }\n+                } else if let ty::RawPtr(TypeAndMut { mutbl, .. }) = *self.cast_ty.kind() {\n+                    if fcx\n+                        .try_coerce(\n+                            self.expr,\n+                            fcx.tcx.mk_ref(\n+                                &ty::RegionKind::ReErased,\n+                                TypeAndMut { ty: self.expr_ty, mutbl },\n+                            ),\n+                            self.cast_ty,\n+                            AllowTwoPhase::No,\n+                        )\n+                        .is_ok()\n+                    {\n+                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                    }\n                 }\n                 if let Some(sugg) = sugg {\n                     err.span_label(self.span, \"invalid cast\");"}]}