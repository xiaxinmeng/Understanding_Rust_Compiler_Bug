{"sha": "c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjJmMmIwYzZmMDc0ZmI5OGFkZDU2YTE5NzdkNDA3ZTI5NGM5ZWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-03T00:53:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-23T00:30:58Z"}, "message": "Add a span to ast::TyParam", "tree": {"sha": "7eb3393df546f2c5b95d97dd3fc4c3cc73984783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb3393df546f2c5b95d97dd3fc4c3cc73984783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "html_url": "https://github.com/rust-lang/rust/commit/c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "html_url": "https://github.com/rust-lang/rust/commit/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "5d0b24fdb3ec3abf0d7bceb17c18b291276ec6f5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -181,7 +181,8 @@ pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n     pub bounds: OwnedSlice<TyParamBound>,\n-    pub default: Option<P<Ty>>\n+    pub default: Option<P<Ty>>,\n+    pub span: Span\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]"}, {"sha": "c1289ef98588a038875a1f0bf0441b0241216fd8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -66,6 +66,7 @@ pub trait AstBuilder {\n     fn strip_bounds(&self, bounds: &Generics) -> Generics;\n \n     fn typaram(&self,\n+               span: Span,\n                id: ast::Ident,\n                bounds: OwnedSlice<ast::TyParamBound>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n@@ -368,14 +369,16 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn typaram(&self,\n+               span: Span,\n                id: ast::Ident,\n                bounds: OwnedSlice<ast::TyParamBound>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n-            default: default\n+            default: default,\n+            span: span\n         }\n     }\n "}, {"sha": "c040361a8ebb282366dfb8be932b672faa87d3ea", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -380,7 +380,7 @@ impl<'a> TraitDef<'a> {\n             // require the current trait\n             bounds.push(cx.typarambound(trait_path.clone()));\n \n-            cx.typaram(ty_param.ident, OwnedSlice::from_vec(bounds), None)\n+            cx.typaram(self.span, ty_param.ident, OwnedSlice::from_vec(bounds), None)\n         }));\n         let trait_generics = Generics {\n             lifetimes: lifetimes,"}, {"sha": "a6bbad62b8e795f7818fc798b46e6d71e0b010c4", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -193,7 +193,7 @@ fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str, bounds: &[Path],\n             let path = b.to_path(cx, span, self_ident, self_generics);\n             cx.typarambound(path)\n         }).collect();\n-    cx.typaram(cx.ident_of(name), bounds, None)\n+    cx.typaram(span, cx.ident_of(name), bounds, None)\n }\n \n fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -> Generics {"}, {"sha": "72be633d456ad4dd51f6d5f749d667a4abb86a71", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -448,7 +448,8 @@ pub fn fold_ty_param<T: Folder>(tp: &TyParam, fld: &mut T) -> TyParam {\n         ident: tp.ident,\n         id: id,\n         bounds: tp.bounds.map(|x| fold_ty_param_bound(x, fld)),\n-        default: tp.default.map(|x| fld.fold_ty(x))\n+        default: tp.default.map(|x| fld.fold_ty(x)),\n+        span: tp.span\n     }\n }\n "}, {"sha": "85480bebc90ef95ab8dee94ec2634f2f60b5c30e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b2f2b0c6f074fb98add56a1977d407e294c9ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c3b2f2b0c6f074fb98add56a1977d407e294c9ed", "patch": "@@ -3393,6 +3393,7 @@ impl<'a> Parser<'a> {\n     // matches typaram = IDENT optbounds ( EQ ty )?\n     fn parse_ty_param(&mut self) -> TyParam {\n         let ident = self.parse_ident();\n+        let span = self.span;\n         let (_, opt_bounds) = self.parse_optional_ty_param_bounds(false);\n         // For typarams we don't care about the difference b/w \"<T>\" and \"<T:>\".\n         let bounds = opt_bounds.unwrap_or_default();\n@@ -3407,7 +3408,8 @@ impl<'a> Parser<'a> {\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n-            default: default\n+            default: default,\n+            span: span,\n         }\n     }\n "}]}