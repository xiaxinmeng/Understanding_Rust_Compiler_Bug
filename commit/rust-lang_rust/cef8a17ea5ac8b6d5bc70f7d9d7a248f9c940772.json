{"sha": "cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "node_id": "C_kwDOAAsO6NoAKGNlZjhhMTdlYTVhYzhiNmQ1YmM3MGY3ZDlkN2EyNDhmOWM5NDA3NzI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-11T21:06:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-11T21:06:03Z"}, "message": "Handle proc-macro functions as the proc-macro they resolve to", "tree": {"sha": "abae4b4b4d084176346446e51c1b7b797d6d3510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abae4b4b4d084176346446e51c1b7b797d6d3510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "html_url": "https://github.com/rust-lang/rust/commit/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dee488a68289c8f4e83a06f319a63c6932000ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dee488a68289c8f4e83a06f319a63c6932000ab", "html_url": "https://github.com/rust-lang/rust/commit/1dee488a68289c8f4e83a06f319a63c6932000ab"}], "stats": {"total": 93, "additions": 78, "deletions": 15}, "files": [{"sha": "aeb9f2b0ca1f772f066af24b051d783c0c26faef", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -1380,6 +1380,23 @@ impl Function {\n         db.function_data(self.id).has_body()\n     }\n \n+    pub fn as_proc_macro(self, db: &dyn HirDatabase) -> Option<MacroDef> {\n+        let function_data = db.function_data(self.id);\n+        let attrs = &function_data.attrs;\n+        if !(attrs.is_proc_macro()\n+            || attrs.is_proc_macro_attribute()\n+            || attrs.is_proc_macro_derive())\n+        {\n+            return None;\n+        }\n+        let loc = self.id.lookup(db.upcast());\n+        let krate = loc.krate(db);\n+        let def_map = db.crate_def_map(krate.into());\n+        let name = &function_data.name;\n+        let mut exported_proc_macros = def_map.exported_proc_macros();\n+        exported_proc_macros.find(|(_, mac_name)| mac_name == name).map(|(id, _)| MacroDef { id })\n+    }\n+\n     /// A textual representation of the HIR of this function for debugging purposes.\n     pub fn debug_hir(self, db: &dyn HirDatabase) -> String {\n         let body = db.body(self.id.into());"}, {"sha": "3ff2d7b915ed291af77f7815475c422a6fe22546", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -236,7 +236,9 @@ impl Attrs {\n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n         AttrQuery { attrs: self, key }\n     }\n+}\n \n+impl Attrs {\n     pub fn cfg(&self) -> Option<CfgExpr> {\n         let mut cfgs = self.by_key(\"cfg\").tt_values().map(CfgExpr::parse).collect::<Vec<_>>();\n         match cfgs.len() {\n@@ -298,6 +300,18 @@ impl Attrs {\n                 matches!(&*tt.token_trees, [tt::TokenTree::Leaf(tt::Leaf::Ident(ident))] if ident.text == \"hidden\")\n         })\n     }\n+\n+    pub fn is_proc_macro(&self) -> bool {\n+        self.by_key(\"proc_macro\").exists()\n+    }\n+\n+    pub fn is_proc_macro_attribute(&self) -> bool {\n+        self.by_key(\"proc_macro_attribute\").exists()\n+    }\n+\n+    pub fn is_proc_macro_derive(&self) -> bool {\n+        self.by_key(\"proc_macro_derive\").exists()\n+    }\n }\n \n impl AttrsWithOwner {"}, {"sha": "920df7cec205697492d039c6ecc952f6400b6051", "filename": "crates/hir_def/src/nameres/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -31,12 +31,12 @@ impl ProcMacroKind {\n impl Attrs {\n     #[rustfmt::skip]\n     pub(super) fn parse_proc_macro_decl(&self, func_name: &Name) -> Option<ProcMacroDef> {\n-        if self.by_key(\"proc_macro\").exists() {\n+        if self.is_proc_macro() {\n             Some(ProcMacroDef { name: func_name.clone(), kind: ProcMacroKind::FnLike })\n-        } else if self.by_key(\"proc_macro_attribute\").exists() {\n+        } else if self.is_proc_macro_attribute() {\n             Some(ProcMacroDef { name: func_name.clone(), kind: ProcMacroKind::Attr })\n         } else if self.by_key(\"proc_macro_derive\").exists() {\n-            let derive = self.by_key(\"proc_macro_derive\").tt_values().next().unwrap();\n+            let derive = self.by_key(\"proc_macro_derive\").tt_values().next()?;\n \n             match &*derive.token_trees {\n                 // `#[proc_macro_derive(Trait)]`"}, {"sha": "4ef9e3d45928290512d0fb22be75de9cded72cbc", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -57,8 +57,6 @@ pub(crate) fn find_all_refs(\n     let syntax = sema.parse(position.file_id).syntax().clone();\n     let make_searcher = |literal_search: bool| {\n         move |def: Definition| {\n-            let mut usages =\n-                def.usages(sema).set_scope(search_scope.clone()).include_self_refs().all();\n             let declaration = match def {\n                 Definition::Module(module) => {\n                     Some(NavigationTarget::from_module_to_decl(sema.db, module))\n@@ -72,6 +70,8 @@ pub(crate) fn find_all_refs(\n                     nav,\n                 }\n             });\n+            let mut usages =\n+                def.usages(sema).set_scope(search_scope.clone()).include_self_refs().all();\n             if literal_search {\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n@@ -1535,4 +1535,34 @@ trait Trait {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn attr() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+\n+#[proc_macros::$0identity]\n+fn func() {}\n+\"#,\n+            expect![[r#\"\n+                identity Attribute FileId(1) 1..107 32..40\n+\n+                FileId(0) 16..24\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn derive() {\n+        check(\n+            r#\"\n+//- proc_macros: derive_identity\n+\n+#[derive(proc_macros::DeriveIdentity$0)]\n+struct Foo;\n+\"#,\n+            expect![[r#\"\"#]],\n+        )\n+    }\n }"}, {"sha": "2c1545e1a94e9c81ec37815d9bee13bbff996aab", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -82,6 +82,9 @@ pub fn pick_best_token(\n ) -> Option<SyntaxToken> {\n     tokens.max_by_key(move |t| f(t.kind()))\n }\n+pub fn pick_token<T: AstToken>(mut tokens: TokenAtOffset<SyntaxToken>) -> Option<T> {\n+    tokens.find_map(T::cast)\n+}\n \n /// Converts the mod path struct into its ast representation.\n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {"}, {"sha": "b7db96e9341ca9d6ef13bf96ab0995fa87dff18e", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -309,13 +309,14 @@ impl Definition {\n     }\n \n     pub fn usages<'a>(self, sema: &'a Semantics<RootDatabase>) -> FindUsages<'a> {\n-        FindUsages {\n-            def: self,\n-            sema,\n-            scope: None,\n-            include_self_kw_refs: None,\n-            search_self_mod: false,\n-        }\n+        let def = match self {\n+            def @ Definition::Function(f) => {\n+                // search for proc-macro usages if this function describes a proc macro\n+                f.as_proc_macro(sema.db).map(Definition::Macro).unwrap_or(def)\n+            }\n+            def => def,\n+        };\n+        FindUsages { def, sema, scope: None, include_self_kw_refs: None, search_self_mod: false }\n     }\n }\n "}, {"sha": "b45fbe698c99daa717eb77d59c13e8cc8ca06fae", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=cef8a17ea5ac8b6d5bc70f7d9d7a248f9c940772", "patch": "@@ -275,9 +275,7 @@ pub(crate) fn handle_on_type_formatting(\n     let char_typed = params.ch.chars().next().unwrap_or('\\0');\n \n     let text = snap.analysis.file_text(position.file_id)?;\n-    if !text[usize::from(position.offset)..].starts_with(char_typed) {\n-        // Add `always!` here once VS Code bug is fixed:\n-        //   https://github.com/rust-analyzer/rust-analyzer/issues/10002\n+    if stdx::never!(!text[usize::from(position.offset)..].starts_with(char_typed)) {\n         return Ok(None);\n     }\n "}]}