{"sha": "12cb128a0a8cfffeccae910c72831562bd9c3b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2IxMjhhMGE4Y2ZmZmVjY2FlOTEwYzcyODMxNTYyYmQ5YzNiOTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-01T12:05:54Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T11:53:50Z"}, "message": "Move visit to newtype-style nominal type\n\nThis makes getting the function fields out of the visitor less\ncumbersome and more efficient (no take/drop).", "tree": {"sha": "ad4e8ddeaa65160961ef61d87edfa7306f2480b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4e8ddeaa65160961ef61d87edfa7306f2480b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12cb128a0a8cfffeccae910c72831562bd9c3b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb128a0a8cfffeccae910c72831562bd9c3b93", "html_url": "https://github.com/rust-lang/rust/commit/12cb128a0a8cfffeccae910c72831562bd9c3b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12cb128a0a8cfffeccae910c72831562bd9c3b93/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f544b1366071a589e758ee73b5fd4c45db52a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f544b1366071a589e758ee73b5fd4c45db52a19", "html_url": "https://github.com/rust-lang/rust/commit/5f544b1366071a589e758ee73b5fd4c45db52a19"}], "stats": {"total": 255, "additions": 126, "deletions": 129}, "files": [{"sha": "6742c00ccfe4855cc0322f010aee2a56e91238c0", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -49,7 +49,7 @@ fn check_crate(@ty::ctxt tcx, &@ast::crate crate) {\n              visit_item=bind visit_item(cx, _, _, _),\n              visit_expr=bind visit_expr(cx, _, _, _)\n              with *visit::default_visitor[scope]());\n-    visit::visit_crate(*crate, [], visit::vtor(v));\n+    visit::visit_crate(*crate, [], visit::mk_vt(v));\n     tcx.sess.abort_if_errors();\n }\n \n@@ -59,7 +59,7 @@ fn visit_fn(@ctx cx, &ast::_fn f, &ast::ty_param[] tp, &span sp,\n     for (ast::arg arg_ in f.decl.inputs) {\n         cx.local_map.insert(arg_.id, arg(arg_.mode));\n     }\n-    vt(v).visit_block(f.body, [], v);\n+    v.visit_block(f.body, [], v);\n }\n \n fn visit_item(@ctx cx, &@ast::item i, &scope sc, &vt[scope] v) {"}, {"sha": "aa71242f9c84e17515796b229747808bcc7d8cbf", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -23,7 +23,7 @@ fn map_crate(&crate c) -> map {\n                       visit_native_item=bind map_native_item(map, _, _, _),\n                       visit_expr=bind map_expr(map, _, _, _)\n                       with *visit::default_visitor[()]());\n-    visit::visit_crate(c, (), visit::vtor(v_map));\n+    visit::visit_crate(c, (), visit::mk_vt(v_map));\n     ret map;\n }\n "}, {"sha": "5de67552e7fdbdc4f5fc6cc683bf3223c5899f1b", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -155,7 +155,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n              visit_item=bind index_i(e, _, _, _)\n              with *visit::default_visitor[scopes]());\n     visit::visit_crate(*c, cons(scope_crate(c), @nil),\n-                       visit::vtor(v_map_mod));\n+                       visit::mk_vt(v_map_mod));\n     // Register the top-level mod \n \n     e.mod_map.insert(-1,\n@@ -200,7 +200,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n              visit_item=visit_item_with_scope\n              with *visit::default_visitor[scopes]());\n     visit::visit_crate(*c, cons(scope_crate(c), @nil),\n-                       visit::vtor(v_link_glob));\n+                       visit::mk_vt(v_link_glob));\n     fn link_glob(@env e, &@ast::view_item vi, &scopes sc, &vt[scopes] v) {\n         fn find_mod(@env e, scopes sc) -> @indexed_mod {\n             alt (sc) {\n@@ -257,7 +257,7 @@ fn resolve_names(&@env e, &@ast::crate c) {\n              visit_constr=bind walk_constr(e, _, _, _),\n              visit_fn=bind visit_fn_with_scope(e, _, _, _, _, _, _, _)\n              with *visit::default_visitor());\n-    visit::visit_crate(*c, cons(scope_crate(c), @nil), visit::vtor(v));\n+    visit::visit_crate(*c, cons(scope_crate(c), @nil), visit::mk_vt(v));\n     e.sess.abort_if_errors();\n \n     fn walk_expr(@env e, &@ast::expr exp, &scopes sc, &vt[scopes] v) {\n@@ -1183,7 +1183,7 @@ fn check_for_collisions(&@env e, &ast::crate c) {\n              visit_block=bind check_block(e, _, _, _),\n              visit_arm=bind check_arm(e, _, _, _)\n              with *visit::default_visitor());\n-    visit::visit_crate(c, (), visit::vtor(v));\n+    visit::visit_crate(c, (), visit::mk_vt(v));\n }\n \n fn check_mod_name(&env e, &ident name, list[mod_index_entry] entries) {"}, {"sha": "461a42ebc42ef713ce7be9ec276e899b8e13fa79", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -9108,8 +9108,8 @@ fn collect_items(&@crate_ctxt ccx, @ast::crate crate) {\n              visit_item=bind collect_item_1(ccx, _, _, _) with *visitor0);\n     auto visitor2 =\n         @rec(visit_item=bind collect_item_2(ccx, _, _, _) with *visitor0);\n-    visit::visit_crate(*crate, ~[], visit::vtor(visitor1));\n-    visit::visit_crate(*crate, ~[], visit::vtor(visitor2));\n+    visit::visit_crate(*crate, ~[], visit::mk_vt(visitor1));\n+    visit::visit_crate(*crate, ~[], visit::mk_vt(visitor2));\n }\n \n fn collect_tag_ctor(@crate_ctxt ccx, &@ast::item i, &str[] pt, &vt[str[]] v) {\n@@ -9133,7 +9133,7 @@ fn collect_tag_ctors(&@crate_ctxt ccx, @ast::crate crate) {\n     auto visitor =\n         @rec(visit_item=bind collect_tag_ctor(ccx, _, _, _)\n              with *visit::default_visitor());\n-    visit::visit_crate(*crate, ~[], visit::vtor(visitor));\n+    visit::visit_crate(*crate, ~[], visit::mk_vt(visitor));\n }\n \n \n@@ -9178,7 +9178,7 @@ fn trans_constants(&@crate_ctxt ccx, @ast::crate crate) {\n     auto visitor =\n         @rec(visit_item=bind trans_constant(ccx, _, _, _)\n              with *visit::default_visitor());\n-    visit::visit_crate(*crate, ~[], visit::vtor(visitor));\n+    visit::visit_crate(*crate, ~[], visit::mk_vt(visitor));\n }\n \n fn vp2i(&@block_ctxt cx, ValueRef v) -> ValueRef {"}, {"sha": "61fb3541a730a76dd08a095d159c7408391b5ea8", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -73,12 +73,11 @@ fn find_locals(&ty::ctxt tcx, &_fn f, &ty_param[] tps, &span sp, &fn_ident i,\n     let ctxt cx = rec(cs=@mutable ~[], tcx=tcx);\n     auto visitor = visit::default_visitor[ctxt]();\n \n-    visitor =\n-        @rec(visit_local=collect_local,\n-             visit_expr=collect_pred,\n-             visit_fn=do_nothing\n-             with *visitor);\n-    visit::visit_fn(f, tps, sp, i, id, cx, visit::vtor(visitor));\n+    visitor = @rec(visit_local=collect_local,\n+                   visit_expr=collect_pred,\n+                   visit_fn=do_nothing\n+                   with *visitor);\n+    visit::visit_fn(f, tps, sp, i, id, cx, visit::mk_vt(visitor));\n     ret cx;\n }\n "}, {"sha": "c6e4d1911d402c266e5497085083ba21f54ede13", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 110, "deletions": 112, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cb128a0a8cfffeccae910c72831562bd9c3b93/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=12cb128a0a8cfffeccae910c72831562bd9c3b93", "patch": "@@ -15,9 +15,7 @@ import codemap::span;\n // Lots of redundant indirection and refcounting. Our typesystem doesn't do\n // circular types, so the visitor record can not hold functions that take\n // visitors. A vt tag is used to break the cycle.\n-tag vt[E] { vtor(visitor[E]); }\n-\n-fn vt[E](&vt[E] x) -> visitor[E] { alt (x) { case (vtor(?v)) { ret v; } } }\n+tag vt[E] { mk_vt(visitor[E]); }\n \n type visitor[E] =\n     @rec(fn(&_mod, &span, &E, &vt[E])  visit_mod,\n@@ -54,7 +52,7 @@ fn default_visitor[E]() -> visitor[E] {\n }\n \n fn visit_crate[E](&crate c, &E e, &vt[E] v) {\n-    vt(v).visit_mod(c.node.module, c.span, e, v);\n+    v.visit_mod(c.node.module, c.span, e, v);\n }\n \n fn visit_crate_directive[E](&@crate_directive cd, &E e, &vt[E] v) {\n@@ -65,71 +63,70 @@ fn visit_crate_directive[E](&@crate_directive cd, &E e, &vt[E] v) {\n                 visit_crate_directive(cdir, e, v);\n             }\n         }\n-        case (cdir_view_item(?vi)) { vt(v).visit_view_item(vi, e, v); }\n+        case (cdir_view_item(?vi)) { v.visit_view_item(vi, e, v); }\n         case (cdir_syntax(_)) { }\n         case (cdir_auth(_, _)) { }\n     }\n }\n \n fn visit_mod[E](&_mod m, &span sp, &E e, &vt[E] v) {\n-    for (@view_item vi in m.view_items) { vt(v).visit_view_item(vi, e, v); }\n-    for (@item i in m.items) { vt(v).visit_item(i, e, v); }\n+    for (@view_item vi in m.view_items) { v.visit_view_item(vi, e, v); }\n+    for (@item i in m.items) { v.visit_item(i, e, v); }\n }\n \n fn visit_view_item[E](&@view_item vi, &E e, &vt[E] v) { }\n \n fn visit_local[E](&@local loc, &E e, &vt[E] v) {\n     alt (loc.node.ty) {\n         case (none) { }\n-        case (some(?t)) { vt(v).visit_ty(t, e, v); }\n+        case (some(?t)) { v.visit_ty(t, e, v); }\n     }\n     alt (loc.node.init) {\n         case (none) { }\n-        case (some(?i)) { vt(v).visit_expr(i.expr, e, v); }\n+        case (some(?i)) { v.visit_expr(i.expr, e, v); }\n     }\n }\n \n fn visit_item[E](&@item i, &E e, &vt[E] v) {\n     alt (i.node) {\n         case (item_const(?t, ?ex)) {\n-            vt(v).visit_ty(t, e, v);\n-            vt(v).visit_expr(ex, e, v);\n+            v.visit_ty(t, e, v);\n+            v.visit_expr(ex, e, v);\n         }\n         case (item_fn(?f, ?tp)) {\n-            vt(v).visit_fn(f, tp, i.span, some(i.ident), i.id, e, v);\n+            v.visit_fn(f, tp, i.span, some(i.ident), i.id, e, v);\n         }\n-        case (item_mod(?m)) { vt(v).visit_mod(m, i.span, e, v); }\n+        case (item_mod(?m)) { v.visit_mod(m, i.span, e, v); }\n         case (item_native_mod(?nm)) {\n             for (@view_item vi in nm.view_items) {\n-                vt(v).visit_view_item(vi, e, v);\n+                v.visit_view_item(vi, e, v);\n             }\n             for (@native_item ni in nm.items) {\n-                vt(v).visit_native_item(ni, e, v);\n+                v.visit_native_item(ni, e, v);\n             }\n         }\n-        case (item_ty(?t, _)) { vt(v).visit_ty(t, e, v); }\n+        case (item_ty(?t, _)) { v.visit_ty(t, e, v); }\n         case (item_res(?f, ?dtor_id, ?tps, _)) {\n-            vt(v).visit_fn(f, tps, i.span, some(i.ident), dtor_id, e, v);\n+            v.visit_fn(f, tps, i.span, some(i.ident), dtor_id, e, v);\n         }\n         case (item_tag(?variants, _)) {\n             for (variant vr in variants) {\n                 for (variant_arg va in vr.node.args) {\n-                    vt(v).visit_ty(va.ty, e, v);\n+                    v.visit_ty(va.ty, e, v);\n                 }\n             }\n         }\n         case (item_obj(?ob, _, _)) {\n-            for (obj_field f in ob.fields) { vt(v).visit_ty(f.ty, e, v); }\n+            for (obj_field f in ob.fields) { v.visit_ty(f.ty, e, v); }\n             for (@method m in ob.methods) {\n-                vt(v).visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n-                               m.node.id, e, v);\n+                v.visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n+                           m.node.id, e, v);\n             }\n             alt (ob.dtor) {\n                 case (none) { }\n                 case (some(?m)) {\n-                    vt(v).visit_fn(m.node.meth, ~[], m.span,\n-                                   some(m.node.ident),\n-                                   m.node.id, e, v);\n+                    v.visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n+                               m.node.id, e, v);\n                 }\n             }\n         }\n@@ -148,37 +145,37 @@ fn visit_ty[E](&@ty t, &E e, &vt[E] v) {\n         case (ty_char)          { /* no-op */ }\n         case (ty_str)           { /* no-op */ }\n         case (ty_istr)          { /* no-op */ }\n-        case (ty_box(?mt))      { vt(v).visit_ty(mt.ty, e, v); }\n-        case (ty_vec(?mt))      { vt(v).visit_ty(mt.ty, e, v); }\n-        case (ty_ivec(?mt))     { vt(v).visit_ty(mt.ty, e, v); }\n-        case (ty_ptr(?mt))      { vt(v).visit_ty(mt.ty, e, v); }\n-        case (ty_port(?t))      { vt(v).visit_ty(t, e, v); }\n-        case (ty_chan(?t))      { vt(v).visit_ty(t, e, v); }\n+        case (ty_box(?mt))      { v.visit_ty(mt.ty, e, v); }\n+        case (ty_vec(?mt))      { v.visit_ty(mt.ty, e, v); }\n+        case (ty_ivec(?mt))     { v.visit_ty(mt.ty, e, v); }\n+        case (ty_ptr(?mt))      { v.visit_ty(mt.ty, e, v); }\n+        case (ty_port(?t))      { v.visit_ty(t, e, v); }\n+        case (ty_chan(?t))      { v.visit_ty(t, e, v); }\n         case (ty_task)          { /* no-op */ }\n         case (ty_tup(?mts)) {\n-            for (mt mt in mts) { vt(v).visit_ty(mt.ty, e, v); }\n+            for (mt mt in mts) { v.visit_ty(mt.ty, e, v); }\n         }\n         case (ty_rec(?flds)) {\n-            for (ty_field f in flds) { vt(v).visit_ty(f.node.mt.ty, e, v); }\n+            for (ty_field f in flds) { v.visit_ty(f.node.mt.ty, e, v); }\n         }\n         case (ty_fn(_, ?args, ?out, _, ?constrs)) {\n-            for (ty_arg a in args) { vt(v).visit_ty(a.node.ty, e, v); }\n-            for (@constr c in constrs) { vt(v).visit_constr(c, e, v); }\n-            vt(v).visit_ty(out, e, v);\n+            for (ty_arg a in args) { v.visit_ty(a.node.ty, e, v); }\n+            for (@constr c in constrs) { v.visit_constr(c, e, v); }\n+            v.visit_ty(out, e, v);\n         }\n         case (ty_obj(?tmeths)) {\n             for (ty_method m in tmeths) {\n                 for (ty_arg a in m.node.inputs) {\n-                    vt(v).visit_ty(a.node.ty, e, v);\n+                    v.visit_ty(a.node.ty, e, v);\n                 }\n-                vt(v).visit_ty(m.node.output, e, v);\n+                v.visit_ty(m.node.output, e, v);\n             }\n         }\n         case (ty_path(?p, _)) {\n-            for (@ty tp in p.node.types) { vt(v).visit_ty(tp, e, v); }\n+            for (@ty tp in p.node.types) { v.visit_ty(tp, e, v); }\n         }\n         case (ty_type)          { /* no-op */ }\n-        case (ty_constr(?t, _)) { vt(v).visit_ty(t, e, v); }\n+        case (ty_constr(?t, _)) { v.visit_ty(t, e, v); }\n     }\n }\n \n@@ -190,8 +187,8 @@ fn visit_constr[E](&@constr c, &E e, &vt[E] v) {\n fn visit_pat[E](&@pat p, &E e, &vt[E] v) {\n     alt (p.node) {\n         case (pat_tag(?path, ?children)) {\n-            for (@ty tp in path.node.types) { vt(v).visit_ty(tp, e, v); }\n-            for (@pat child in children) { vt(v).visit_pat(child, e, v); }\n+            for (@ty tp in path.node.types) { v.visit_ty(tp, e, v); }\n+            for (@pat child in children) { v.visit_pat(child, e, v); }\n         }\n         case (_) { }\n     }\n@@ -205,158 +202,158 @@ fn visit_native_item[E](&@native_item ni, &E e, &vt[E] v) {\n }\n \n fn visit_fn_decl[E](&fn_decl fd, &E e, &vt[E] v) {\n-    for (arg a in fd.inputs) { vt(v).visit_ty(a.ty, e, v); }\n-    for (@constr c in fd.constraints) { vt(v).visit_constr(c, e, v); }\n-    vt(v).visit_ty(fd.output, e, v);\n+    for (arg a in fd.inputs) { v.visit_ty(a.ty, e, v); }\n+    for (@constr c in fd.constraints) { v.visit_constr(c, e, v); }\n+    v.visit_ty(fd.output, e, v);\n }\n \n fn visit_fn[E](&_fn f, &ty_param[] tp, &span sp, &fn_ident i,\n                node_id id, &E e, &vt[E] v) {\n     visit_fn_decl(f.decl, e, v);\n-    vt(v).visit_block(f.body, e, v);\n+    v.visit_block(f.body, e, v);\n }\n \n fn visit_block[E](&block b, &E e, &vt[E] v) {\n-    for (@stmt s in b.node.stmts) { vt(v).visit_stmt(s, e, v); }\n+    for (@stmt s in b.node.stmts) { v.visit_stmt(s, e, v); }\n     visit_expr_opt(b.node.expr, e, v);\n }\n \n fn visit_stmt[E](&@stmt s, &E e, &vt[E] v) {\n     alt (s.node) {\n-        case (stmt_decl(?d, _)) { vt(v).visit_decl(d, e, v); }\n-        case (stmt_expr(?ex, _)) { vt(v).visit_expr(ex, e, v); }\n+        case (stmt_decl(?d, _)) { v.visit_decl(d, e, v); }\n+        case (stmt_expr(?ex, _)) { v.visit_expr(ex, e, v); }\n         case (stmt_crate_directive(?cd)) { visit_crate_directive(cd, e, v); }\n     }\n }\n \n fn visit_decl[E](&@decl d, &E e, &vt[E] v) {\n     alt (d.node) {\n         case (decl_local(?loc)) {\n-            vt(v).visit_local(loc, e, v);\n+            v.visit_local(loc, e, v);\n         }\n-        case (decl_item(?it)) { vt(v).visit_item(it, e, v); }\n+        case (decl_item(?it)) { v.visit_item(it, e, v); }\n     }\n }\n \n fn visit_expr_opt[E](option::t[@expr] eo, &E e, &vt[E] v) {\n     alt (eo) {\n         case (none) { }\n-        case (some(?ex)) { vt(v).visit_expr(ex, e, v); }\n+        case (some(?ex)) { v.visit_expr(ex, e, v); }\n     }\n }\n \n fn visit_exprs[E](&(@expr)[] exprs, &E e, &vt[E] v) {\n-    for (@expr ex in exprs) { vt(v).visit_expr(ex, e, v); }\n+    for (@expr ex in exprs) { v.visit_expr(ex, e, v); }\n }\n \n fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n     alt (ex.node) {\n         case (expr_vec(?es, _, _)) { visit_exprs(es, e, v); }\n         case (expr_tup(?elts)) {\n-            for (elt el in elts) { vt(v).visit_expr(el.expr, e, v); }\n+            for (elt el in elts) { v.visit_expr(el.expr, e, v); }\n         }\n         case (expr_rec(?flds, ?base)) {\n-            for (field f in flds) { vt(v).visit_expr(f.node.expr, e, v); }\n+            for (field f in flds) { v.visit_expr(f.node.expr, e, v); }\n             visit_expr_opt(base, e, v);\n         }\n         case (expr_call(?callee, ?args)) {\n-            vt(v).visit_expr(callee, e, v);\n+            v.visit_expr(callee, e, v);\n             visit_exprs(args, e, v);\n         }\n         case (expr_self_method(_)) { }\n         case (expr_bind(?callee, ?args)) {\n-            vt(v).visit_expr(callee, e, v);\n+            v.visit_expr(callee, e, v);\n             for (option::t[@expr] eo in args) { visit_expr_opt(eo, e, v); }\n         }\n         case (expr_spawn(_, _, ?callee, ?args)) {\n-            vt(v).visit_expr(callee, e, v);\n+            v.visit_expr(callee, e, v);\n             visit_exprs(args, e, v);\n         }\n         case (expr_binary(_, ?a, ?b)) {\n-            vt(v).visit_expr(a, e, v);\n-            vt(v).visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n         }\n-        case (expr_unary(_, ?a)) { vt(v).visit_expr(a, e, v); }\n+        case (expr_unary(_, ?a)) { v.visit_expr(a, e, v); }\n         case (expr_lit(_)) { }\n         case (expr_cast(?x, ?t)) {\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_ty(t, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_ty(t, e, v);\n         }\n         case (expr_if(?x, ?b, ?eo)) {\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_block(b, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n             visit_expr_opt(eo, e, v);\n         }\n         case (expr_if_check(?x, ?b, ?eo)) {\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_block(b, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n             visit_expr_opt(eo, e, v);\n         }\n         case (expr_ternary(?c, ?t, ?el)) {\n-            vt(v).visit_expr(c, e, v);\n-            vt(v).visit_expr(t, e, v);\n-            vt(v).visit_expr(el, e, v);\n+            v.visit_expr(c, e, v);\n+            v.visit_expr(t, e, v);\n+            v.visit_expr(el, e, v);\n         }\n         case (expr_while(?x, ?b)) {\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_block(b, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n         }\n         case (expr_for(?dcl, ?x, ?b)) {\n-            vt(v).visit_local(dcl, e, v);\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_block(b, e, v);\n+            v.visit_local(dcl, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n         }\n         case (expr_for_each(?dcl, ?x, ?b)) {\n-            vt(v).visit_local(dcl, e, v);\n-            vt(v).visit_expr(x, e, v);\n-            vt(v).visit_block(b, e, v);\n+            v.visit_local(dcl, e, v);\n+            v.visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n         }\n         case (expr_do_while(?b, ?x)) {\n-            vt(v).visit_block(b, e, v);\n-            vt(v).visit_expr(x, e, v);\n+            v.visit_block(b, e, v);\n+            v.visit_expr(x, e, v);\n         }\n         case (expr_alt(?x, ?arms)) {\n-            vt(v).visit_expr(x, e, v);\n-            for (arm a in arms) { vt(v).visit_arm(a, e, v); }\n+            v.visit_expr(x, e, v);\n+            for (arm a in arms) { v.visit_arm(a, e, v); }\n         }\n         case (expr_fn(?f)) {\n-            vt(v).visit_fn(f, ~[], ex.span, none, ex.id, e, v);\n+            v.visit_fn(f, ~[], ex.span, none, ex.id, e, v);\n         }\n-        case (expr_block(?b)) { vt(v).visit_block(b, e, v); }\n+        case (expr_block(?b)) { v.visit_block(b, e, v); }\n         case (expr_assign(?a, ?b)) {\n-            vt(v).visit_expr(b, e, v);\n-            vt(v).visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n         }\n         case (expr_move(?a, ?b)) {\n-            vt(v).visit_expr(b, e, v);\n-            vt(v).visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n         }\n         case (expr_swap(?a, ?b)) {\n-            vt(v).visit_expr(a, e, v);\n-            vt(v).visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n         }\n         case (expr_assign_op(_, ?a, ?b)) {\n-            vt(v).visit_expr(b, e, v);\n-            vt(v).visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n         }\n         case (expr_send(?a, ?b)) {\n-            vt(v).visit_expr(a, e, v);\n-            vt(v).visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n         }\n         case (expr_recv(?a, ?b)) {\n-            vt(v).visit_expr(a, e, v);\n-            vt(v).visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n         }\n-        case (expr_field(?x, _)) { vt(v).visit_expr(x, e, v); }\n+        case (expr_field(?x, _)) { v.visit_expr(x, e, v); }\n         case (expr_index(?a, ?b)) {\n-            vt(v).visit_expr(a, e, v);\n-            vt(v).visit_expr(b, e, v);\n+            v.visit_expr(a, e, v);\n+            v.visit_expr(b, e, v);\n         }\n         case (expr_path(?p)) {\n-            for (@ty tp in p.node.types) { vt(v).visit_ty(tp, e, v); }\n+            for (@ty tp in p.node.types) { v.visit_ty(tp, e, v); }\n         }\n         case (expr_ext(_, _, _, ?expansion)) {\n-            vt(v).visit_expr(expansion, e, v);\n+            v.visit_expr(expansion, e, v);\n         }\n         case (expr_fail(?eo)) {\n             visit_expr_opt(eo, e, v);\n@@ -365,38 +362,39 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n         case (expr_cont) { }\n         case (expr_ret(?eo)) { visit_expr_opt(eo, e, v); }\n         case (expr_put(?eo)) { visit_expr_opt(eo, e, v); }\n-        case (expr_be(?x)) { vt(v).visit_expr(x, e, v); }\n-        case (expr_log(_, ?x)) { vt(v).visit_expr(x, e, v); }\n-        case (expr_check(_, ?x)) { vt(v).visit_expr(x, e, v); }\n-        case (expr_assert(?x)) { vt(v).visit_expr(x, e, v); }\n+        case (expr_be(?x)) { v.visit_expr(x, e, v); }\n+        case (expr_log(_, ?x)) { v.visit_expr(x, e, v); }\n+        case (expr_check(_, ?x)) { v.visit_expr(x, e, v); }\n+        case (expr_assert(?x)) { v.visit_expr(x, e, v); }\n         case (expr_port(_)) { }\n-        case (expr_chan(?x)) { vt(v).visit_expr(x, e, v); }\n+        case (expr_chan(?x)) { v.visit_expr(x, e, v); }\n         case (expr_anon_obj(?anon_obj, _)) {\n             alt (anon_obj.fields) {\n                 case (none) { }\n                 case (some(?fields)) {\n                     for (anon_obj_field f in fields) {\n-                        vt(v).visit_ty(f.ty, e, v);\n-                        vt(v).visit_expr(f.expr, e, v);\n+                        v.visit_ty(f.ty, e, v);\n+                        v.visit_expr(f.expr, e, v);\n                     }\n                 }\n             }\n             alt (anon_obj.with_obj) {\n                 case (none) { }\n-                case (some(?ex)) { vt(v).visit_expr(ex, e, v); }\n+                case (some(?ex)) { v.visit_expr(ex, e, v); }\n             }\n             for (@method m in anon_obj.methods) {\n-                vt(v).visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n-                               m.node.id, e, v);\n+                v.visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n+                           m.node.id, e, v);\n             }\n         }\n     }\n }\n \n fn visit_arm[E](&arm a, &E e, &vt[E] v) {\n-    for (@pat p in a.pats) { vt(v).visit_pat(p, e, v); }\n-    vt(v).visit_block(a.block, e, v);\n+    for (@pat p in a.pats) { v.visit_pat(p, e, v); }\n+    v.visit_block(a.block, e, v);\n }\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}