{"sha": "25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTZiNmVmOGI0YTI4NTJjOTg1ODU0OTYxNDZjYTlkM2RhMzdiMWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T17:06:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:22:00Z"}, "message": "rustc: Add a realpath utility function\n\nThis is required in rustc to resolve symlinks for utilities such as the sysroot\nand the rpath values which are encoded into binaries.", "tree": {"sha": "51aa86670f4f2f3e9469fa8a417d12832b6ca626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51aa86670f4f2f3e9469fa8a417d12832b6ca626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "html_url": "https://github.com/rust-lang/rust/commit/25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a6b6ef8b4a2852c98585496146ca9d3da37b1b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e17e1d336f2988f6cf27db95924dd462f66e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e17e1d336f2988f6cf27db95924dd462f66e0d", "html_url": "https://github.com/rust-lang/rust/commit/f9e17e1d336f2988f6cf27db95924dd462f66e0d"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "b9acd4132152060cd31bcf69a850bfa22a9729a2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a6b6ef8b4a2852c98585496146ca9d3da37b1b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a6b6ef8b4a2852c98585496146ca9d3da37b1b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "patch": "@@ -127,6 +127,7 @@ pub mod util {\n     pub mod ppaux;\n     pub mod sha2;\n     pub mod nodemap;\n+    pub mod fs;\n }\n \n pub mod lib {"}, {"sha": "c051b8e60cd80ef0cbdf46f83b0b620ab6350e21", "filename": "src/librustc/util/fs.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/25a6b6ef8b4a2852c98585496146ca9d3da37b1b/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a6b6ef8b4a2852c98585496146ca9d3da37b1b/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "patch": "@@ -0,0 +1,103 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io;\n+use std::io::fs;\n+use std::os;\n+\n+/// Returns an absolute path in the filesystem that `path` points to. The\n+/// returned path does not contain any symlinks in its hierarchy.\n+pub fn realpath(original: &Path) -> io::IoResult<Path> {\n+    static MAX_LINKS_FOLLOWED: uint = 256;\n+    let original = os::make_absolute(original);\n+\n+    // Right now lstat on windows doesn't work quite well\n+    if cfg!(windows) {\n+        return Ok(original)\n+    }\n+\n+    let result = original.root_path();\n+    let mut result = result.expect(\"make_absolute has no root_path\");\n+    let mut followed = 0;\n+\n+    for part in original.components() {\n+        result.push(part);\n+\n+        loop {\n+            if followed == MAX_LINKS_FOLLOWED {\n+                return Err(io::standard_error(io::InvalidInput))\n+            }\n+\n+            match fs::lstat(&result) {\n+                Err(..) => break,\n+                Ok(ref stat) if stat.kind != io::TypeSymlink => break,\n+                Ok(..) => {\n+                    followed += 1;\n+                    let path = try!(fs::readlink(&result));\n+                    result.pop();\n+                    result.push(path);\n+                }\n+            }\n+        }\n+    }\n+\n+    return Ok(result);\n+}\n+\n+#[cfg(not(windows), test)]\n+mod test {\n+    use std::io;\n+    use std::io::fs::{File, symlink, mkdir, mkdir_recursive};\n+    use super::realpath;\n+    use std::io::TempDir;\n+\n+    #[test]\n+    fn realpath_works() {\n+        let tmpdir = TempDir::new(\"rustc-fs\").unwrap();\n+        let tmpdir = realpath(tmpdir.path()).unwrap();\n+        let file = tmpdir.join(\"test\");\n+        let dir = tmpdir.join(\"test2\");\n+        let link = dir.join(\"link\");\n+        let linkdir = tmpdir.join(\"test3\");\n+\n+        File::create(&file).unwrap();\n+        mkdir(&dir, io::UserRWX).unwrap();\n+        symlink(&file, &link).unwrap();\n+        symlink(&dir, &linkdir).unwrap();\n+\n+        assert!(realpath(&tmpdir).unwrap() == tmpdir);\n+        assert!(realpath(&file).unwrap() == file);\n+        assert!(realpath(&link).unwrap() == file);\n+        assert!(realpath(&linkdir).unwrap() == dir);\n+        assert!(realpath(&linkdir.join(\"link\")).unwrap() == file);\n+    }\n+\n+    #[test]\n+    fn realpath_works_tricky() {\n+        let tmpdir = TempDir::new(\"rustc-fs\").unwrap();\n+        let tmpdir = realpath(tmpdir.path()).unwrap();\n+\n+        let a = tmpdir.join(\"a\");\n+        let b = a.join(\"b\");\n+        let c = b.join(\"c\");\n+        let d = a.join(\"d\");\n+        let e = d.join(\"e\");\n+        let f = a.join(\"f\");\n+\n+        mkdir_recursive(&b, io::UserRWX).unwrap();\n+        mkdir_recursive(&d, io::UserRWX).unwrap();\n+        File::create(&f).unwrap();\n+        symlink(&Path::new(\"../d/e\"), &c).unwrap();\n+        symlink(&Path::new(\"../f\"), &e).unwrap();\n+\n+        assert!(realpath(&c).unwrap() == f);\n+        assert!(realpath(&e).unwrap() == f);\n+    }\n+}"}]}