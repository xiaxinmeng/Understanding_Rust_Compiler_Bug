{"sha": "b7d80e7d65d40eb1901d1e1c342854db91e263be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZDgwZTdkNjVkNDBlYjE5MDFkMWUxYzM0Mjg1NGRiOTFlMjYzYmU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-02T15:25:58Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-02T15:56:09Z"}, "message": "Updated `define_Conf!` to support multi-line doc comments", "tree": {"sha": "5491cce545735699679e6c2925124be733913dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5491cce545735699679e6c2925124be733913dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d80e7d65d40eb1901d1e1c342854db91e263be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d80e7d65d40eb1901d1e1c342854db91e263be", "html_url": "https://github.com/rust-lang/rust/commit/b7d80e7d65d40eb1901d1e1c342854db91e263be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d80e7d65d40eb1901d1e1c342854db91e263be/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e760b675cf43f22c889943834851d9955a25a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e760b675cf43f22c889943834851d9955a25a19", "html_url": "https://github.com/rust-lang/rust/commit/4e760b675cf43f22c889943834851d9955a25a19"}], "stats": {"total": 143, "additions": 107, "deletions": 36}, "files": [{"sha": "a28b1d78f7d463a90f593306b1343ea0dc417bec", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 100, "deletions": 34, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/b7d80e7d65d40eb1901d1e1c342854db91e263be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d80e7d65d40eb1901d1e1c342854db91e263be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=b7d80e7d65d40eb1901d1e1c342854db91e263be", "patch": "@@ -36,13 +36,13 @@ impl TryConf {\n /// See (rust-clippy#7172)\n macro_rules! define_Conf {\n     ($(\n-        #[doc = $doc:literal]\n+        $(#[doc = $doc:literal])+\n         $(#[conf_deprecated($dep:literal)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n-            $(#[doc = $doc] pub $name: $ty,)*\n+            $($(#[doc = $doc])+ pub $name: $ty,)*\n         }\n \n         mod defaults {\n@@ -119,7 +119,7 @@ macro_rules! define_Conf {\n                                 stringify!($name),\n                                 stringify!($ty),\n                                 format!(\"{:?}\", super::defaults::$name()),\n-                                $doc,\n+                                concat!($($doc, '\\n',)*),\n                                 deprecation_reason,\n                             )\n                         },\n@@ -132,18 +132,30 @@ macro_rules! define_Conf {\n \n // N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION. Suppress lints whenever the suggested change would cause breakage for other crates.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION.\n+    ///\n+    /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE. The minimum rust version that the project supports\n+    /// Lint: MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE.\n+    ///\n+    /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),\n-    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n+    /// Lint: BLACKLISTED_NAME.\n+    ///\n+    /// The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names: Vec<String> = [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n-    /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n+    /// Lint: COGNITIVE_COMPLEXITY.\n+    ///\n+    /// The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold: u64 = 25),\n-    /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead.\n+    /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY.\n+    ///\n+    /// Use the Cognitive Complexity lint instead.\n     #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\")]\n     (cyclomatic_complexity_threshold: Option<u64> = None),\n-    /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n+    /// Lint: DOC_MARKDOWN.\n+    ///\n+    /// The list of words this lint should not consider as identifiers needing ticks\n     (doc_valid_idents: Vec<String> = [\n         \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n         \"DirectX\",\n@@ -164,55 +176,109 @@ define_Conf! {\n         \"MinGW\",\n         \"CamelCase\",\n     ].iter().map(ToString::to_string).collect()),\n-    /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n+    /// Lint: TOO_MANY_ARGUMENTS.\n+    ///\n+    /// The maximum number of argument a function or method can have\n     (too_many_arguments_threshold: u64 = 7),\n-    /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have\n+    /// Lint: TYPE_COMPLEXITY.\n+    ///\n+    /// The maximum complexity a type can have\n     (type_complexity_threshold: u64 = 250),\n-    /// Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have\n+    /// Lint: MANY_SINGLE_CHAR_NAMES.\n+    ///\n+    /// The maximum number of single char bindings a scope may have\n     (single_char_binding_names_threshold: u64 = 4),\n-    /// Lint: BOXED_LOCAL, USELESS_VEC. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n+    /// Lint: BOXED_LOCAL, USELESS_VEC.\n+    ///\n+    /// The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n     (too_large_for_stack: u64 = 200),\n-    /// Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger\n+    /// Lint: ENUM_VARIANT_NAMES.\n+    ///\n+    /// The minimum number of enum variants for the lints about variant names to trigger\n     (enum_variant_name_threshold: u64 = 3),\n-    /// Lint: LARGE_ENUM_VARIANT. The maximum size of a enum's variant to avoid box suggestion\n+    /// Lint: LARGE_ENUM_VARIANT.\n+    ///\n+    /// The maximum size of a enum's variant to avoid box suggestion\n     (enum_variant_size_threshold: u64 = 200),\n-    /// Lint: VERBOSE_BIT_MASK. The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n+    /// Lint: VERBOSE_BIT_MASK.\n+    ///\n+    /// The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n     (verbose_bit_mask_threshold: u64 = 1),\n-    /// Lint: DECIMAL_LITERAL_REPRESENTATION. The lower bound for linting decimal literals\n+    /// Lint: DECIMAL_LITERAL_REPRESENTATION.\n+    ///\n+    /// The lower bound for linting decimal literals\n     (literal_representation_threshold: u64 = 16384),\n-    /// Lint: TRIVIALLY_COPY_PASS_BY_REF. The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n+    /// Lint: TRIVIALLY_COPY_PASS_BY_REF.\n+    ///\n+    /// The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n     (trivial_copy_size_limit: Option<u64> = None),\n-    /// Lint: LARGE_TYPE_PASS_BY_MOVE. The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n+    /// Lint: LARGE_TYPE_PASS_BY_MOVE.\n+    ///\n+    /// The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n     (pass_by_value_size_limit: u64 = 256),\n-    /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n+    /// Lint: TOO_MANY_LINES.\n+    ///\n+    /// The maximum number of lines a function or method can have\n     (too_many_lines_threshold: u64 = 100),\n-    /// Lint: LARGE_STACK_ARRAYS, LARGE_CONST_ARRAYS. The maximum allowed size for arrays on the stack\n+    /// Lint: LARGE_STACK_ARRAYS, LARGE_CONST_ARRAYS.\n+    ///\n+    /// The maximum allowed size for arrays on the stack\n     (array_size_threshold: u64 = 512_000),\n-    /// Lint: VEC_BOX. The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n+    /// Lint: VEC_BOX.\n+    ///\n+    /// The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n     (vec_box_size_threshold: u64 = 4096),\n-    /// Lint: TYPE_REPETITION_IN_BOUNDS. The maximum number of bounds a trait can have to be linted\n+    /// Lint: TYPE_REPETITION_IN_BOUNDS.\n+    ///\n+    /// The maximum number of bounds a trait can have to be linted\n     (max_trait_bounds: u64 = 3),\n-    /// Lint: STRUCT_EXCESSIVE_BOOLS. The maximum number of bool fields a struct can have\n+    /// Lint: STRUCT_EXCESSIVE_BOOLS.\n+    ///\n+    /// The maximum number of bool fields a struct can have\n     (max_struct_bools: u64 = 3),\n-    /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bool parameters a function can have\n+    /// Lint: FN_PARAMS_EXCESSIVE_BOOLS.\n+    ///\n+    /// The maximum number of bool parameters a function can have\n     (max_fn_params_bools: u64 = 3),\n-    /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n+    /// Lint: WILDCARD_IMPORTS.\n+    ///\n+    /// Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports: bool = false),\n-    /// Lint: DISALLOWED_METHOD. The list of disallowed methods, written as fully qualified paths.\n+    /// Lint: DISALLOWED_METHOD.\n+    ///\n+    /// The list of disallowed methods, written as fully qualified paths.\n     (disallowed_methods: Vec<String> = Vec::new()),\n-    /// Lint: DISALLOWED_TYPE. The list of disallowed types, written as fully qualified paths.\n+    /// Lint: DISALLOWED_TYPE.\n+    ///\n+    /// The list of disallowed types, written as fully qualified paths.\n     (disallowed_types: Vec<String> = Vec::new()),\n-    /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n+    /// Lint: UNREADABLE_LITERAL.\n+    ///\n+    /// Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions: bool = true),\n-    /// Lint: UPPER_CASE_ACRONYMS. Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n+    /// Lint: UPPER_CASE_ACRONYMS.\n+    ///\n+    /// Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n     (upper_case_acronyms_aggressive: bool = false),\n-    /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n+    /// Lint: _CARGO_COMMON_METADATA.\n+    ///\n+    /// For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n     (cargo_ignore_publish: bool = false),\n-    /// Lint: NONSTANDARD_MACRO_BRACES. Enforce the named macros always use the braces specified. <br> A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro is could be used with a full path two `MacroMatcher`s have to be added one with the full path `crate_name::macro_name` and one with just the macro name.\n+    /// Lint: NONSTANDARD_MACRO_BRACES.\n+    ///\n+    /// Enforce the named macros always use the braces specified.\n+    ///\n+    /// A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro\n+    /// is could be used with a full path two `MacroMatcher`s have to be added one with the full path\n+    /// `crate_name::macro_name` and one with just the macro name.\n     (standard_macro_braces: Vec<crate::nonstandard_macro_braces::MacroMatcher> = Vec::new()),\n-    /// Lint: MISSING_ENFORCED_IMPORT_RENAMES. The list of imports to always rename, a fully qualified path followed by the rename.\n+    /// Lint: MISSING_ENFORCED_IMPORT_RENAMES.\n+    ///\n+    /// The list of imports to always rename, a fully qualified path followed by the rename.\n     (enforced_import_renames: Vec<crate::utils::conf::Rename> = Vec::new()),\n-    /// Lint: RESTRICTED_SCRIPTS. The list of unicode scripts allowed to be used in the scope.\n+    /// Lint: RESTRICTED_SCRIPTS.\n+    ///\n+    /// The list of unicode scripts allowed to be used in the scope.\n     (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n }\n "}, {"sha": "a48a53850830f3e41dbd6f61a3ab59a66bab8ff2", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7d80e7d65d40eb1901d1e1c342854db91e263be/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d80e7d65d40eb1901d1e1c342854db91e263be/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=b7d80e7d65d40eb1901d1e1c342854db91e263be", "patch": "@@ -82,7 +82,7 @@ This lint has the following configuration variables:\n /// `default`\n macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n     () => {\n-        \"* {name}: {ty}: {doc} (defaults to `{default}`)\\n\"\n+        \"* {name}: `{ty}`: {doc} (defaults to `{default}`)\\n\"\n     };\n }\n \n@@ -344,11 +344,16 @@ fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n         if let Some(split_pos) = doc_comment.find('.');\n         then {\n             let mut doc_comment = doc_comment.to_string();\n-            let documentation = doc_comment.split_off(split_pos);\n+            let mut documentation = doc_comment.split_off(split_pos);\n \n+            // Extract lints\n             doc_comment.make_ascii_lowercase();\n             let lints: Vec<String> = doc_comment.split_off(DOC_START.len()).split(\", \").map(str::to_string).collect();\n \n+            // Format documentation correctly\n+            // split off leading `.` from lint name list and indent for correct formatting\n+            documentation = documentation.trim_start_matches('.').trim().replace(\"\\n \", \"\\n    \");\n+\n             Some((lints, documentation))\n         } else {\n             None"}]}