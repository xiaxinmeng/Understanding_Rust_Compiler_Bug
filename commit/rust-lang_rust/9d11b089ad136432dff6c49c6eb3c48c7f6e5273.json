{"sha": "9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTFiMDg5YWQxMzY0MzJkZmY2YzQ5YzZlYjNjNDhjN2Y2ZTUyNzM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-02-21T19:47:15Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-07T15:52:42Z"}, "message": "-Z linker-flavor\n\nThis patch adds a `-Z linker-flavor` flag to rustc which can be used to invoke\nthe linker using a different interface.\n\nFor example, by default rustc assumes that all the Linux targets will be linked\nusing GCC. This makes it impossible to use LLD as a linker using just `-C\nlinker=ld.lld` because that will invoke LLD with invalid command line\narguments. (e.g. rustc will pass -Wl,--gc-sections to LLD but LLD doesn't\nunderstand that; --gc-sections would be the right argument)\n\nWith this patch one can pass `-Z linker-flavor=ld` to rustc to invoke the linker\nusing a LD-like interface. This way, `rustc -C linker=ld.lld -Z\nlinker-flavor=ld` will invoke LLD with the right arguments.\n\n`-Z linker-flavor` accepts 4 different arguments: `em` (emcc), `ld`,\n`gcc`, `msvc` (link.exe). `em`, `gnu` and `msvc` cover all the existing linker\ninterfaces. `ld` is a new flavor for interfacing GNU's ld and LLD.\n\nThis patch also changes target specifications. `linker-flavor` is now a\nmandatory field that specifies the *default* linker flavor that the target will\nuse. This change also makes the linker interface *explicit*; before, it used to\nbe derived from other fields like linker-is-gnu, is-like-msvc,\nis-like-emscripten, etc.\n\nAnother change to target specifications is that the fields `pre-link-args`,\n`post-link-args` and `late-link-args` now expect a map from flavor to linker\narguments.\n\n``` diff\n-    \"pre-link-args\": [\"-Wl,--as-needed\", \"-Wl,-z,-noexecstack\"],\n+    \"pre-link-args\": {\n+        \"gcc\": [\"-Wl,--as-needed\", \"-Wl,-z,-noexecstack\"],\n+        \"ld\": [\"--as-needed\", \"-z,-noexecstack\"],\n+    },\n```\n\n[breaking-change]  for users of custom targets specifications", "tree": {"sha": "089d832161196cfcaa2cc681dcad636e37fb8407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089d832161196cfcaa2cc681dcad636e37fb8407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "html_url": "https://github.com/rust-lang/rust/commit/9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/comments", "author": null, "committer": null, "parents": [{"sha": "c438c1fb39337b7712afc58df4f1f9c5112e5cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c438c1fb39337b7712afc58df4f1f9c5112e5cc1", "html_url": "https://github.com/rust-lang/rust/commit/c438c1fb39337b7712afc58df4f1f9c5112e5cc1"}], "stats": {"total": 838, "additions": 598, "deletions": 240}, "files": [{"sha": "ef825a6854cec9b4ad7ea1f30e8c66206f05a2ec", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -19,7 +19,7 @@ pub use self::DebugInfoLevel::*;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n-use rustc_back::PanicStrategy;\n+use rustc_back::{LinkerFlavor, PanicStrategy};\n use rustc_back::target::Target;\n use lint;\n use middle::cstore;\n@@ -641,12 +641,14 @@ macro_rules! options {\n             Some(\"either `panic` or `abort`\");\n         pub const parse_sanitizer: Option<&'static str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n+        pub const parse_linker_flavor: Option<&'static str> =\n+            Some(::rustc_back::LinkerFlavor::one_of());\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n-        use rustc_back::PanicStrategy;\n+        use rustc_back::{LinkerFlavor, PanicStrategy};\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -777,6 +779,14 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_linker_flavor(slote: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n+            match v.and_then(LinkerFlavor::from_str) {\n+                Some(lf) => *slote = Some(lf),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -979,6 +989,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n                                    \"Use a sanitizer\"),\n+    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n+                                           \"Linker flavor\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "70b2809ccbed2ba0ada1744a840cb35605350101", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -36,7 +36,7 @@ use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n use syntax_pos::{Span, MultiSpan};\n \n-use rustc_back::PanicStrategy;\n+use rustc_back::{LinkerFlavor, PanicStrategy};\n use rustc_back::target::Target;\n use rustc_data_structures::flock;\n use llvm;\n@@ -363,6 +363,9 @@ impl Session {\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         self.opts.cg.panic.unwrap_or(self.target.target.options.panic_strategy)\n     }\n+    pub fn linker_flavor(&self) -> LinkerFlavor {\n+        self.opts.debugging_opts.linker_flavor.unwrap_or(self.target.target.linker_flavor)\n+    }\n     pub fn no_landing_pads(&self) -> bool {\n         self.opts.debugging_opts.no_landing_pads || self.panic_strategy() == PanicStrategy::Abort\n     }"}, {"sha": "6679cc73029c7e119edd15ff81fdb00f36d5c52d", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -52,6 +52,48 @@ pub mod dynamic_lib;\n \n use serialize::json::{Json, ToJson};\n \n+macro_rules! linker_flavor {\n+    ($(($variant:ident, $string:expr),)+) => {\n+        #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n+                 RustcEncodable, RustcDecodable)]\n+        pub enum LinkerFlavor {\n+            $($variant,)+\n+        }\n+\n+        impl LinkerFlavor {\n+            pub const fn one_of() -> &'static str {\n+                concat!(\"one of: \", $($string, \" \",)+)\n+            }\n+\n+            pub fn from_str(s: &str) -> Option<Self> {\n+                Some(match s {\n+                    $($string => LinkerFlavor::$variant,)+\n+                    _ => return None,\n+                })\n+            }\n+\n+            pub fn desc(&self) -> &str {\n+                match *self {\n+                    $(LinkerFlavor::$variant => $string,)+\n+                }\n+            }\n+        }\n+\n+        impl ToJson for LinkerFlavor {\n+            fn to_json(&self) -> Json {\n+                self.desc().to_json()\n+            }\n+        }\n+    }\n+}\n+\n+linker_flavor! {\n+    (Em, \"em\"),\n+    (Gcc, \"gcc\"),\n+    (Ld, \"ld\"),\n+    (Msvc, \"msvc\"),\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub enum PanicStrategy {\n     Unwind,"}, {"sha": "802a8c77db05bc3c77cad41642f91dfece4b24ff", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"ios\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n             eliminate_frame_pointer: false,"}, {"sha": "7d8610b4a36841bc277d218bfd1e31c6c3ca610e", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n@@ -28,6 +29,7 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "c5cfff0be03ad05851fb1461454492a264dc0b7b", "filename": "src/librustc_back/target/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_freebsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -26,6 +27,7 @@ pub fn target() -> TargetResult {\n         target_os: \"freebsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "5d680504a02d00bff5bb9f1391977cdc4cf1447c", "filename": "src/librustc_back/target/aarch64_unknown_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_fuchsia.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -23,6 +24,7 @@ pub fn target() -> TargetResult {\n         target_os: \"fuchsia\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "043bd881c7290c6062cde4331f495641e9b10b45", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -26,6 +27,7 @@ pub fn target() -> TargetResult {\n         arch: \"aarch64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "49baa1b96cee3b4bdf61dec87801898f386f7ea1", "filename": "src/librustc_back/target/android_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fandroid_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n     // Many of the symbols defined in compiler-rt are also defined in libgcc.\n     // Android's linker doesn't like that by default.\n-    base.pre_link_args.push(\"-Wl,--allow-multiple-definition\".to_string());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--allow-multiple-definition\".to_string());\n     base.is_like_android = true;\n     base.position_independent_executables = true;\n     base.has_elf_tls = false;"}, {"sha": "159f93a74c68352276ec630b8a2d9b6b05259c9d", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -10,7 +10,7 @@\n \n use std::env;\n \n-use target::TargetOptions;\n+use target::{LinkArgs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n@@ -43,7 +43,7 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: \"lib\".to_string(),\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"bsd\".to_string(),\n-        pre_link_args: Vec::new(),\n+        pre_link_args: LinkArgs::new(),\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: version >= (10, 7),\n         .. Default::default()"}, {"sha": "2e7d30d969ec4b140c773d744f0e41ca0d9a161f", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use std::io;\n use std::process::Command;\n-use target::TargetOptions;\n+use target::{LinkArgs, TargetOptions};\n \n use self::Arch::*;\n \n@@ -60,7 +61,7 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n     }\n }\n \n-fn build_pre_link_args(arch: Arch) -> Result<Vec<String>, String> {\n+fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n     let sdk_name = match arch {\n         Armv7 | Armv7s | Arm64 => \"iphoneos\",\n         I386 | X86_64 => \"iphonesimulator\"\n@@ -70,8 +71,14 @@ fn build_pre_link_args(arch: Arch) -> Result<Vec<String>, String> {\n \n     let sdk_root = get_sdk_root(sdk_name)?;\n \n-    Ok(vec![\"-arch\".to_string(), arch_name.to_string(),\n-         \"-Wl,-syslibroot\".to_string(), sdk_root])\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc,\n+                vec![\"-arch\".to_string(),\n+                     arch_name.to_string(),\n+                     \"-Wl,-syslibroot\".to_string(),\n+                     sdk_root]);\n+\n+    Ok(args)\n }\n \n fn target_cpu(arch: Arch) -> String {"}, {"sha": "bccd5a41ab1155b64d7c5cb9baf1e17b4434613f", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -24,6 +25,7 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "165d34fe6c7cee980c32489f0e8eec8ecfd35bf1", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+v6\".to_string(),"}, {"sha": "731021d979bc4158db8115bcf560a20f9b569f8e", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+v6,+vfp2\".to_string(),"}, {"sha": "f81bcd78b03aada993d5d78bb13b759df4685a9e", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -29,6 +30,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "6c47678ede6adb4067417f33a56504dbc4c57e6d", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -29,6 +30,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "200c6ab74cc6db2a6c9dadd977b908a3a5aafe62", "filename": "src/librustc_back/target/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -21,6 +22,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+soft-float\".to_string(),\n@@ -31,4 +33,3 @@ pub fn target() -> TargetResult {\n         }\n     })\n }\n-"}, {"sha": "4d8745828329431459dee1f0120ffff270a92bbf", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"ios\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "0c90e834006f16734761a850aa3fc694abdaf832", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#v7a\n@@ -27,6 +28,7 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "d3a6a68449c39f0ad217d7ed4108bbd4bf3e7538", "filename": "src/librustc_back/target/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -21,6 +22,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n@@ -32,4 +34,3 @@ pub fn target() -> TargetResult {\n         }\n     })\n }\n-"}, {"sha": "5086cd44f7ac947522ba5688231a3e095c1fee24", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -30,6 +31,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base"}, {"sha": "96c89a7ed3bd58e21caebb77511832f1f1e35468", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"ios\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "b884d4e54101e8ef6eac7705b1f4048b2d99173a", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,10 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Target, TargetOptions};\n+use LinkerFlavor;\n+use super::{LinkArgs, Target, TargetOptions};\n use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Em,\n+                vec![\"-s\".to_string(),\n+                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n+\n     let opts = TargetOptions {\n         linker: cmd(\"emcc\"),\n         ar: cmd(\"emar\"),\n@@ -24,7 +30,7 @@ pub fn target() -> Result<Target, String> {\n         obj_is_bitcode: true,\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n-        post_link_args: vec![\"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n+        post_link_args: args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     };\n@@ -37,6 +43,7 @@ pub fn target() -> Result<Target, String> {\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"asmjs\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n         options: opts,\n     })\n }"}, {"sha": "e44cd393289be3a23afdd0911c4b2e5e5c7dcb6f", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // GNU-style linkers will use this to omit linking to libraries\n+        // which don't actually fulfill any relocations, but only for\n+        // libraries which follow this flag.  Thus, use it before\n+        // specifying libraries to link to.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()"}, {"sha": "e44cd393289be3a23afdd0911c4b2e5e5c7dcb6f", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // GNU-style linkers will use this to omit linking to libraries\n+        // which don't actually fulfill any relocations, but only for\n+        // libraries which follow this flag.  Thus, use it before\n+        // specifying libraries to link to.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()"}, {"sha": "c6207cdc4d9c18efa6a76a1102af11b7bb897024", "filename": "src/librustc_back/target/fuchsia_base.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,30 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // We want to be able to strip as much executable code as possible\n+        // from the linker command line, and this flag indicates to the\n+        // linker that it can avoid linking in dynamic libraries that don't\n+        // actually satisfy any symbols up to that point (as with many other\n+        // resolutions the linker does). This option only applies to all\n+        // following libraries so we're sure to pass it as one of the first\n+        // arguments.\n+        // FIXME: figure out whether these linker args are desirable\n+        //\"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        //\"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            // FIXME: figure out whether these linker args are desirable\n-            //\"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            //\"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         exe_allocation_crate: \"alloc_system\".to_string(),\n         has_elf_tls: true,"}, {"sha": "a6383179f3ae60292fb2b9baf7d38430a6002a71", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"ios\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             .. base"}, {"sha": "6b14972e9f7543d3613b8f0c8e16071c4f4b00ab", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n \n     Ok(Target {\n         llvm_target: \"i686-apple-darwin\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"macos\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "a5390cbfb725803f68587dd303e2e664da7e9dff", "filename": "src/librustc_back/target/i686_linux_android.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n@@ -31,6 +32,7 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "4a736a93be7d7867fc9dd60d69c1e65cb72505ff", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -18,7 +19,8 @@ pub fn target() -> TargetResult {\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args.push(\"-Wl,--large-address-aware\".to_string());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--large-address-aware\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n@@ -29,6 +31,7 @@ pub fn target() -> TargetResult {\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "17fe306804f4a673abfe39d48dc16de527c1ca43", "filename": "src/librustc_back/target/i686_pc_windows_msvc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -17,12 +18,13 @@ pub fn target() -> TargetResult {\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args.push(\"/LARGEADDRESSAWARE\".to_string());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/LARGEADDRESSAWARE\".to_string());\n \n     // Ensure the linker will only produce an image if it can also produce a table of\n     // the image's safe exception handlers.\n     // https://msdn.microsoft.com/en-us/library/9a89h429.aspx\n-    base.pre_link_args.push(\"/SAFESEH\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/SAFESEH\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n@@ -33,6 +35,7 @@ pub fn target() -> TargetResult {\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),\n         target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     })\n }"}, {"sha": "052bc23c119ea0a85e013153411d2aae42b69ff6", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"dragonfly\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "d77a9cca2683d9904f50a90320b1093cf34ba035", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"freebsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "b0e67bd90ddde351fbc689c37d2b61d69b34912f", "filename": "src/librustc_back/target/i686_unknown_haiku.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"haiku\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "3c5c10676260ef9dd847589abd383bdfd51c17c0", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "3ed8c94d0bf2a834c3798fe1897e5c00736ec04a", "filename": "src/librustc_back/target/i686_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n-    base.pre_link_args.push(\"-Wl,-melf_i386\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-melf_i386\".to_string());\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind\n     // implementation, apparently relies on frame pointers existing... somehow.\n@@ -40,6 +41,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "fc92e5aee6af1857bb603bbf65fa460eca8b54c6", "filename": "src/librustc_back/target/i686_unknown_netbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"netbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "7ef68bd6d9c3a3164c83a6817ca4fe863a0d2127", "filename": "src/librustc_back/target/i686_unknown_openbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"openbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "f4265e0eb1462d2bd7bc5abf466088aa369ad869", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,17 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Target, TargetOptions, TargetResult};\n+use LinkerFlavor;\n+use super::{LinkArgs, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Gcc,\n+                         vec![\"--pnacl-exceptions=sjlj\".to_string(),\n+                              \"--target=le32-unknown-nacl\".to_string(),\n+                              \"-Wl,--start-group\".to_string()]);\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Gcc,\n+                          vec![\"-Wl,--end-group\".to_string()]);\n+\n     let opts = TargetOptions {\n         linker: \"pnacl-clang\".to_string(),\n         ar: \"pnacl-ar\".to_string(),\n \n-        pre_link_args: vec![\"--pnacl-exceptions=sjlj\".to_string(),\n-                            \"--target=le32-unknown-nacl\".to_string(),\n-                            \"-Wl,--start-group\".to_string()],\n-        post_link_args: vec![\"-Wl,--end-group\".to_string()],\n+        pre_link_args: pre_link_args,\n+        post_link_args: post_link_args,\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".pexe\".to_string(),\n@@ -36,6 +44,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-i64:64:64-p:32:32:32-v128:32:32\".to_string(),\n         arch: \"le32\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: opts,\n     })\n }"}, {"sha": "722d2fa16ef7a06a23689366bbf3af017cc0984f", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,29 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // We want to be able to strip as much executable code as possible\n+        // from the linker command line, and this flag indicates to the\n+        // linker that it can avoid linking in dynamic libraries that don't\n+        // actually satisfy any symbols up to that point (as with many other\n+        // resolutions the linker does). This option only applies to all\n+        // following libraries so we're sure to pass it as one of the first\n+        // arguments.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: true,"}, {"sha": "236f2c1ef0aa3a983b1b3df47eca904fa8264d22", "filename": "src/librustc_back/target/linux_musl_base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,20 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args.push(\"-nostdlib\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n     // when unwinding to locate the unwinding information. I'm not sure why this\n     // argument is *not* necessary for normal builds, but it can't hurt!\n-    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--eh-frame-hdr\".to_string());\n \n     // There's a whole bunch of circular dependencies when dealing with MUSL\n     // unfortunately. To put this in perspective libc is statically linked to\n@@ -45,8 +46,8 @@ pub fn opts() -> TargetOptions {\n     // link everything as a group, not stripping anything out until everything\n     // is processed. The linker will still perform a pass to strip out object\n     // files but it won't do so until all objects/archives have been processed.\n-    base.pre_link_args.push(\"-Wl,-(\".to_string());\n-    base.post_link_args.push(\"-Wl,-)\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-(\".to_string());\n+    base.post_link_args.insert(LinkerFlavor::Gcc, vec![\"-Wl,-)\".to_string()]);\n \n     // When generating a statically linked executable there's generally some\n     // small setup needed which is listed in these files. These are provided by"}, {"sha": "038a70ed6b17ee3e700405f71d6a988e8f9b094a", "filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),"}, {"sha": "aed4c4fbb08deb90479fac1533c2d6e848b90847", "filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),"}, {"sha": "9ef61f9caddcdbaf6bd59001ca142f3e340f8d2b", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2\".to_string(),"}, {"sha": "f54790bab970b85b0c67d39b22386db08fca0e80", "filename": "src/librustc_back/target/mips_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),"}, {"sha": "59c07efe0fdc1818fe7125413d9dceecf0a89c3d", "filename": "src/librustc_back/target/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"uclibc\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),"}, {"sha": "ec19cc1a536ad7f45a5b9efffdd6a8ec8630c291", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),"}, {"sha": "00085d18e6d09eb7f8953993d866fc25e5b41a0d", "filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32,+soft-float\".to_string(),"}, {"sha": "b3ca2edec1eda57d60122665c2b3d6654d8e3fe7", "filename": "src/librustc_back/target/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -20,6 +21,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"uclibc\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),"}, {"sha": "ca6894a7b70411ae74cb94db2d386f09bc0aa3ae", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 63, "deletions": 14, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -50,7 +50,7 @@ use std::default::Default;\n use std::io::prelude::*;\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n-use PanicStrategy;\n+use {LinkerFlavor, PanicStrategy};\n \n mod android_base;\n mod apple_base;\n@@ -72,6 +72,7 @@ mod thumb_base;\n mod fuchsia_base;\n mod redox_base;\n \n+pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n pub type TargetResult = Result<Target, String>;\n \n macro_rules! supported_targets {\n@@ -241,6 +242,8 @@ pub struct Target {\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n+    /// Linker flavor\n+    pub linker_flavor: LinkerFlavor,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n }\n@@ -261,21 +264,21 @@ pub struct TargetOptions {\n \n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n-    pub pre_link_args: Vec<String>,\n+    pub pre_link_args: LinkArgs,\n     /// Objects to link before all others, always found within the\n     /// sysroot folder.\n     pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n-    pub late_link_args: Vec<String>,\n+    pub late_link_args: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n     pub post_link_objects: Vec<String>,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n-    pub post_link_args: Vec<String>,\n+    pub post_link_args: LinkArgs,\n \n     /// Extra arguments to pass to the external assembler (when used)\n     pub asm_args: Vec<String>,\n@@ -412,8 +415,8 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").unwrap_or(\"cc\").to_string(),\n             ar: option_env!(\"CFG_DEFAULT_AR\").unwrap_or(\"ar\").to_string(),\n-            pre_link_args: Vec::new(),\n-            post_link_args: Vec::new(),\n+            pre_link_args: LinkArgs::new(),\n+            post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: \"\".to_string(),\n@@ -445,7 +448,7 @@ impl Default for TargetOptions {\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n-            late_link_args: Vec::new(),\n+            late_link_args: LinkArgs::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n             lib_allocation_crate: \"alloc_system\".to_string(),\n@@ -529,6 +532,10 @@ impl Target {\n             target_os: get_req_field(\"os\")?,\n             target_env: get_opt_field(\"env\", \"\"),\n             target_vendor: get_opt_field(\"vendor\", \"unknown\"),\n+            linker_flavor: LinkerFlavor::from_str(&*get_req_field(\"linker-flavor\")?)\n+                .ok_or_else(|| {\n+                    format!(\"linker flavor must be {}\", LinkerFlavor::one_of())\n+                })?,\n             options: Default::default(),\n         };\n \n@@ -579,17 +586,49 @@ impl Target {\n                         .map(|s| s.to_string() );\n                 }\n             } );\n+            ($key_name:ident, LinkerFlavor) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().map(|s| {\n+                    LinkerFlavor::from_str(&s).ok_or_else(|| {\n+                        Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n+                                     Use 'em', 'gcc', 'ld' or 'msvc.\", s))\n+                    })\n+                })).unwrap_or(Ok(()))\n+            } );\n+            ($key_name:ident, link_args) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(obj) = obj.find(&name[..]).and_then(|o| o.as_object()) {\n+                    let mut args = LinkArgs::new();\n+                    for (k, v) in obj {\n+                        let k = LinkerFlavor::from_str(&k).ok_or_else(|| {\n+                            format!(\"{}: '{}' is not a valid value for linker-flavor. \\\n+                                     Use 'em', 'gcc', 'ld' or 'msvc'\", name, k)\n+                        })?;\n+\n+                        let v = v.as_array().map(|a| {\n+                            a\n+                                .iter()\n+                                .filter_map(|o| o.as_string())\n+                                .map(|s| s.to_owned())\n+                                .collect::<Vec<_>>()\n+                        }).unwrap_or(vec![]);\n+\n+                        args.insert(k, v);\n+                    }\n+                    base.options.$key_name = args;\n+                }\n+            } );\n         }\n \n         key!(is_builtin, bool);\n         key!(linker);\n         key!(ar);\n-        key!(pre_link_args, list);\n+        key!(pre_link_args, link_args);\n         key!(pre_link_objects_exe, list);\n         key!(pre_link_objects_dll, list);\n-        key!(late_link_args, list);\n+        key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n-        key!(post_link_args, list);\n+        key!(post_link_args, link_args);\n         key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n@@ -734,6 +773,16 @@ impl ToJson for Target {\n                     d.insert(name.to_string(), self.options.$attr.to_json());\n                 }\n             } );\n+            (link_args - $attr:ident) => ( {\n+                let name = (stringify!($attr)).replace(\"_\", \"-\");\n+                if default.$attr != self.options.$attr {\n+                    let obj = self.options.$attr\n+                        .iter()\n+                        .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n+                        .collect::<BTreeMap<_, _>>();\n+                    d.insert(name.to_string(), obj.to_json());\n+                }\n+            } );\n         }\n \n         target_val!(llvm_target);\n@@ -743,18 +792,18 @@ impl ToJson for Target {\n         target_val!(target_os, \"os\");\n         target_val!(target_env, \"env\");\n         target_val!(target_vendor, \"vendor\");\n-        target_val!(arch);\n         target_val!(data_layout);\n+        target_val!(linker_flavor);\n \n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(ar);\n-        target_option_val!(pre_link_args);\n+        target_option_val!(link_args - pre_link_args);\n         target_option_val!(pre_link_objects_exe);\n         target_option_val!(pre_link_objects_dll);\n-        target_option_val!(late_link_args);\n+        target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n-        target_option_val!(post_link_args);\n+        target_option_val!(link_args - post_link_args);\n         target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);"}, {"sha": "63245fcae767b34841a6cf9448b21c2518ef1a6c", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // GNU-style linkers will use this to omit linking to libraries\n+        // which don't actually fulfill any relocations, but only for\n+        // libraries which follow this flag.  Thus, use it before\n+        // specifying libraries to link to.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         .. Default::default()\n     }"}, {"sha": "2df9b8e03ff535866f8428d5ac9aa88f23693ba4", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,27 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // GNU-style linkers will use this to omit linking to libraries\n+        // which don't actually fulfill any relocations, but only for\n+        // libraries which follow this flag.  Thus, use it before\n+        // specifying libraries to link to.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string(),\n+    ]);\n+\n     TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         is_like_openbsd: true,\n-        pre_link_args: vec![\n-            // GNU-style linkers will use this to omit linking to libraries\n-            // which don't actually fulfill any relocations, but only for\n-            // libraries which follow this flag.  Thus, use it before\n-            // specifying libraries to link to.\n-            \"-Wl,--as-needed\".to_string(),\n-\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n+        pre_link_args: args,\n         position_independent_executables: true,\n         exe_allocation_crate: \"alloc_system\".to_string(),\n         .. Default::default()"}, {"sha": "55a5bfd1e674621bf02d294439bba4c10a1485a3", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     // see #36994\n@@ -28,6 +29,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "c22bc3b041a4ee2d41dd0903347015dbab12546b", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     // see #36994\n@@ -28,6 +29,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "677d198b1a379a315158c8d13428fe5401ca4665", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n-    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n     // see #36994\n@@ -27,6 +28,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "f26a86d4bdc0f13c4bc60de2626eaf442e3e882b", "filename": "src/librustc_back/target/redox_base.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,25 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use PanicStrategy;\n-use target::TargetOptions;\n+use {LinkerFlavor, PanicStrategy};\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions {\n-        pre_link_args: vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        // We want to be able to strip as much executable code as possible\n+        // from the linker command line, and this flag indicates to the\n+        // linker that it can avoid linking in dynamic libraries that don't\n+        // actually satisfy any symbols up to that point (as with many other\n+        // resolutions the linker does). This option only applies to all\n+        // following libraries so we're sure to pass it as one of the first\n+        // arguments.\n+        \"-Wl,--as-needed\".to_string(),\n+\n+        // Always enable NX protection when it is available\n+        \"-Wl,-z,noexecstack\".to_string()\n+    ]);\n \n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string()\n-        ],\n+    TargetOptions {\n+        pre_link_args: args,\n         executables: true,\n         relocation_model: \"static\".to_string(),\n         disable_redzone: true,"}, {"sha": "cc8eb7c4e84243e281e54086220474d7f22c0366", "filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -31,6 +32,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "1bd51ac62581f06ee4e5104607376285694473e5", "filename": "src/librustc_back/target/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "bc65a17ce6ea93063743a2d44646133437201150", "filename": "src/librustc_back/target/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".to_string();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Ok(Target {\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"netbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "122b38968a9c0355e74e258c11084408102be7fc", "filename": "src/librustc_back/target/sparcv9_sun_solaris.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -30,6 +31,7 @@ pub fn target() -> TargetResult {\n         target_os: \"solaris\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"sun\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "08bf145e5518ac8911a5ae34c676565437aaea80", "filename": "src/librustc_back/target/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -10,6 +10,7 @@\n \n // Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them"}, {"sha": "13f9cc5f65fb9bd3db0f2ba1fdd66b5a48e0a5c5", "filename": "src/librustc_back/target/thumbv7em_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -19,6 +19,7 @@\n // To opt-in to hardware accelerated floating point operations, you can use, for example,\n // `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -31,6 +32,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             max_atomic_width: Some(32),"}, {"sha": "929b6db6fb2c60b7914139ddd3f80776c7d0d37e", "filename": "src/librustc_back/target/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -18,6 +18,7 @@\n //\n // To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -30,6 +31,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the"}, {"sha": "8d46e7cb90760bb5903a9b6dc29814edd8a18f91", "filename": "src/librustc_back/target/thumbv7m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -10,6 +10,7 @@\n \n // Targets the Cortex-M3 processor (ARMv7-M)\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             max_atomic_width: Some(32),"}, {"sha": "a51f59d6ff1925e9222fce68a01ef378c92dec12", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,10 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Target, TargetOptions};\n+use LinkerFlavor;\n+use super::{LinkArgs, Target, TargetOptions};\n use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Gcc,\n+                          vec![\"-s\".to_string(),\n+                               \"BINARYEN=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n+\n     let opts = TargetOptions {\n         linker: cmd(\"emcc\"),\n         ar: cmd(\"emar\"),\n@@ -26,8 +34,7 @@ pub fn target() -> Result<Target, String> {\n         obj_is_bitcode: true,\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n-        post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string(),\n-                             \"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n+        post_link_args: post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     };\n@@ -40,6 +47,7 @@ pub fn target() -> Result<Target, String> {\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n         options: opts,\n     })\n }"}, {"sha": "9bde24a28dd9b253ed14c0a1a5f8e3fe4d244921", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,26 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions {\n-        // FIXME(#13846) this should be enabled for windows\n-        function_sections: false,\n-        linker: \"gcc\".to_string(),\n-        dynamic_linking: true,\n-        executables: true,\n-        dll_prefix: \"\".to_string(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"\".to_string(),\n-        staticlib_suffix: \".lib\".to_string(),\n-        no_default_libraries: true,\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        allows_weak_linkage: false,\n-        pre_link_args: vec![\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Gcc, vec![\n             // And here, we see obscure linker flags #45. On windows, it has been\n             // found to be necessary to have this flag to compile liblibc.\n             //\n@@ -64,7 +51,34 @@ pub fn opts() -> TargetOptions {\n \n             // Do not use the standard system startup files or libraries when linking\n             \"-nostdlib\".to_string(),\n-        ],\n+        ]);\n+\n+    let mut late_link_args = LinkArgs::new();\n+    late_link_args.insert(LinkerFlavor::Gcc, vec![\n+        \"-lmingwex\".to_string(),\n+        \"-lmingw32\".to_string(),\n+        \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n+        \"-lmsvcrt\".to_string(),\n+        \"-luser32\".to_string(),\n+        \"-lkernel32\".to_string(),\n+    ]);\n+\n+    TargetOptions {\n+        // FIXME(#13846) this should be enabled for windows\n+        function_sections: false,\n+        linker: \"gcc\".to_string(),\n+        dynamic_linking: true,\n+        executables: true,\n+        dll_prefix: \"\".to_string(),\n+        dll_suffix: \".dll\".to_string(),\n+        exe_suffix: \".exe\".to_string(),\n+        staticlib_prefix: \"\".to_string(),\n+        staticlib_suffix: \".lib\".to_string(),\n+        no_default_libraries: true,\n+        target_family: Some(\"windows\".to_string()),\n+        is_like_windows: true,\n+        allows_weak_linkage: false,\n+        pre_link_args: pre_link_args,\n         pre_link_objects_exe: vec![\n             \"crt2.o\".to_string(),    // mingw C runtime initialization for executables\n             \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n@@ -73,14 +87,7 @@ pub fn opts() -> TargetOptions {\n             \"dllcrt2.o\".to_string(), // mingw C runtime initialization for dlls\n             \"rsbegin.o\".to_string(),\n         ],\n-        late_link_args: vec![\n-            \"-lmingwex\".to_string(),\n-            \"-lmingw32\".to_string(),\n-            \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n-            \"-lmsvcrt\".to_string(),\n-            \"-luser32\".to_string(),\n-            \"-lkernel32\".to_string(),\n-        ],\n+        late_link_args: late_link_args,\n         post_link_objects: vec![\n             \"rsend.o\".to_string()\n         ],"}, {"sha": "421f59aea93bf4acba458dd5622be1641f832746", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,10 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use LinkerFlavor;\n+use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Msvc,\n+                vec![\"/NOLOGO\".to_string(),\n+                     \"/NXCOMPAT\".to_string()]);\n+\n     TargetOptions {\n         function_sections: true,\n         linker: \"link.exe\".to_string(),\n@@ -56,10 +62,7 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         is_like_msvc: true,\n-        pre_link_args: vec![\n-            \"/NOLOGO\".to_string(),\n-            \"/NXCOMPAT\".to_string(),\n-        ],\n+        pre_link_args: args,\n         exe_allocation_crate: \"alloc_system\".to_string(),\n \n         .. Default::default()"}, {"sha": "8fd1b80430f44795aa62ff0749cc301988abfed3", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n \n     Ok(Target {\n         llvm_target: \"x86_64-apple-darwin\".to_string(),\n@@ -26,6 +27,7 @@ pub fn target() -> TargetResult {\n         target_os: \"macos\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "bbd81fd86ff578e2e2f9e4cb6576277f21879eb3", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n@@ -22,6 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"ios\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             .. base"}, {"sha": "10e88d88ee372c97fdb3b27c2479723cf1fa244c", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Ok(Target {\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "b07031c4bf1a3de5b13ba9d196a50b1d17860c8a", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -24,6 +25,7 @@ pub fn target() -> TargetResult {\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),\n         target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     })\n }"}, {"sha": "eea4389cfd64eaee7e5f8bfd79166ca552e470f6", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n     base.ar = \"x86_64-rumprun-netbsd-ar\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -34,6 +35,7 @@ pub fn target() -> TargetResult {\n         target_os: \"netbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"rumprun\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "fe8691f36950dc5aa31807daf3de80a7e6eaaf7b", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"solaris\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"sun\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "5f87fe177a98c04dfc21c04e5cfff594d06ff175", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::bitrig_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"bitrig\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "96f608409ffa7610ed9c28a3619f35b2b26e646c", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"dragonfly\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "500629a16808dd3f88125ec53dfd376bfb36c637", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"freebsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "6e37896d4148bd1790d10fc41b16f5a713db7b91", "filename": "src/librustc_back/target/x86_64_unknown_fuchsia.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-fuchsia\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"fuchsia\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "7fab9128b2952f538569539b637dafee5daf1d5c", "filename": "src/librustc_back/target/x86_64_unknown_haiku.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-haiku\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"haiku\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "f73055cebaa2e2ff0f94a3cb2ce6eee402501989", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "38b9c0bace52b1fe73530d66ab0f86549196706f", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "6fe2e3fc08e23e30de5bb716949d8d8d0a70c775", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"netbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "b292b5fc1e4e4720f6a771088509555b33299b4c", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"openbsd\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "a693e76099bdafa27b8f013d58e56bd438cc50ac", "filename": "src/librustc_back/target/x86_64_unknown_redox.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),\n@@ -25,6 +26,7 @@ pub fn target() -> TargetResult {\n         target_os: \"redox\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })\n }"}, {"sha": "6e34f551f5df7f669033345856bf468d6e845594", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -422,3 +422,4 @@ impl Drop for OperandBundleDef {\n         }\n     }\n }\n+#[link(name = \"ffi\")] extern {}"}, {"sha": "66380079a8b29038538e18324455f68bce83deb4", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -707,13 +707,16 @@ fn link_natively(sess: &Session,\n                  outputs: &OutputFilenames,\n                  tmpdir: &Path) {\n     info!(\"preparing {:?} from {:?} to {:?}\", crate_type, objects, out_filename);\n+    let flavor = sess.linker_flavor();\n \n     // The invocations of cc share some flags across platforms\n     let (pname, mut cmd, extra) = get_linker(sess);\n     cmd.env(\"PATH\", command_path(sess, extra));\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n-    cmd.args(&sess.target.target.options.pre_link_args);\n+    if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n \n     let pre_link_objects = if crate_type == config::CrateTypeExecutable {\n         &sess.target.target.options.pre_link_objects_exe\n@@ -739,11 +742,15 @@ fn link_natively(sess: &Session,\n                   objects, out_filename, outputs, trans);\n         cmd = linker.finalize();\n     }\n-    cmd.args(&sess.target.target.options.late_link_args);\n+    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n-    cmd.args(&sess.target.target.options.post_link_args);\n+    if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "48e469e28ee31046021b92b839f2a27a95d6db98", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 91, "deletions": 47, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter};\n@@ -22,6 +22,7 @@ use back::archive;\n use back::symbol_export::{self, ExportedSymbols};\n use middle::dependency_format::Linkage;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n+use rustc_back::LinkerFlavor;\n use session::Session;\n use session::config::{self, CrateType, OptLevel, DebugInfoLevel};\n use serialize::{json, Encoder};\n@@ -45,25 +46,39 @@ impl<'a, 'tcx> LinkerInfo {\n     pub fn to_linker(&'a self,\n                      cmd: Command,\n                      sess: &'a Session) -> Box<Linker+'a> {\n-        if sess.target.target.options.is_like_msvc {\n-            Box::new(MsvcLinker {\n-                cmd: cmd,\n-                sess: sess,\n-                info: self\n-            }) as Box<Linker>\n-        } else if sess.target.target.options.is_like_emscripten {\n-            Box::new(EmLinker {\n-                cmd: cmd,\n-                sess: sess,\n-                info: self\n-            }) as Box<Linker>\n-        } else {\n-            Box::new(GnuLinker {\n-                cmd: cmd,\n-                sess: sess,\n-                info: self,\n-                hinted_static: false,\n-            }) as Box<Linker>\n+        match sess.linker_flavor() {\n+            LinkerFlavor::Msvc => {\n+                Box::new(MsvcLinker {\n+                    cmd: cmd,\n+                    sess: sess,\n+                    info: self\n+                }) as Box<Linker>\n+            }\n+            LinkerFlavor::Em =>  {\n+                Box::new(EmLinker {\n+                    cmd: cmd,\n+                    sess: sess,\n+                    info: self\n+                }) as Box<Linker>\n+            }\n+            LinkerFlavor::Gcc =>  {\n+                Box::new(GccLinker {\n+                    cmd: cmd,\n+                    sess: sess,\n+                    info: self,\n+                    hinted_static: false,\n+                    is_ld: false,\n+                }) as Box<Linker>\n+            }\n+            LinkerFlavor::Ld => {\n+                Box::new(GccLinker {\n+                    cmd: cmd,\n+                    sess: sess,\n+                    info: self,\n+                    hinted_static: false,\n+                    is_ld: true,\n+                }) as Box<Linker>\n+            }\n         }\n     }\n }\n@@ -100,14 +115,32 @@ pub trait Linker {\n     fn finalize(&mut self) -> Command;\n }\n \n-pub struct GnuLinker<'a> {\n+pub struct GccLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n     info: &'a LinkerInfo,\n     hinted_static: bool, // Keeps track of the current hinting mode.\n+    // Link as ld\n+    is_ld: bool,\n }\n \n-impl<'a> GnuLinker<'a> {\n+impl<'a> GccLinker<'a> {\n+    /// Argument that must be passed *directly* to the linker\n+    ///\n+    /// These arguments need to be prepended with '-Wl,' when a gcc-style linker is used\n+    fn linker_arg<S>(&mut self, arg: S) -> &mut Self\n+        where S: AsRef<OsStr>\n+    {\n+        if !self.is_ld {\n+            let mut os = OsString::from(\"-Wl,\");\n+            os.push(arg.as_ref());\n+            self.cmd.arg(os);\n+        } else {\n+            self.cmd.arg(arg);\n+        }\n+        self\n+    }\n+\n     fn takes_hints(&self) -> bool {\n         !self.sess.target.target.options.is_like_osx\n     }\n@@ -119,21 +152,21 @@ impl<'a> GnuLinker<'a> {\n     fn hint_static(&mut self) {\n         if !self.takes_hints() { return }\n         if !self.hinted_static {\n-            self.cmd.arg(\"-Wl,-Bstatic\");\n+            self.linker_arg(\"-Bstatic\");\n             self.hinted_static = true;\n         }\n     }\n \n     fn hint_dynamic(&mut self) {\n         if !self.takes_hints() { return }\n         if self.hinted_static {\n-            self.cmd.arg(\"-Wl,-Bdynamic\");\n+            self.linker_arg(\"-Bdynamic\");\n             self.hinted_static = false;\n         }\n     }\n }\n \n-impl<'a> Linker for GnuLinker<'a> {\n+impl<'a> Linker for GccLinker<'a> {\n     fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(\"-l\").arg(lib); }\n     fn link_staticlib(&mut self, lib: &str) { self.hint_static(); self.cmd.arg(\"-l\").arg(lib); }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n@@ -164,27 +197,26 @@ impl<'a> Linker for GnuLinker<'a> {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n-            self.cmd.arg(\"-Wl,--whole-archive\")\n-                    .arg(\"-l\").arg(lib)\n-                    .arg(\"-Wl,--no-whole-archive\");\n+            self.linker_arg(\"--whole-archive\").cmd.arg(\"-l\").arg(lib);\n+            self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n-            let mut v = OsString::from(\"-Wl,-force_load,\");\n+            let mut v = OsString::from(\"-force_load,\");\n             v.push(&archive::find_library(lib, search_path, &self.sess));\n-            self.cmd.arg(&v);\n+            self.linker_arg(&v);\n         }\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n         if self.sess.target.target.options.is_like_osx {\n-            let mut v = OsString::from(\"-Wl,-force_load,\");\n+            let mut v = OsString::from(\"-force_load,\");\n             v.push(lib);\n-            self.cmd.arg(&v);\n+            self.linker_arg(&v);\n         } else {\n-            self.cmd.arg(\"-Wl,--whole-archive\").arg(lib)\n-                    .arg(\"-Wl,--no-whole-archive\");\n+            self.linker_arg(\"--whole-archive\").cmd.arg(lib);\n+            self.linker_arg(\"--no-whole-archive\");\n         }\n     }\n \n@@ -204,18 +236,18 @@ impl<'a> Linker for GnuLinker<'a> {\n         // for partial linking when using multiple codegen units (-r).  So we\n         // insert it here.\n         if self.sess.target.target.options.is_like_osx {\n-            self.cmd.arg(\"-Wl,-dead_strip\");\n+            self.linker_arg(\"-dead_strip\");\n         } else if self.sess.target.target.options.is_like_solaris {\n-            self.cmd.arg(\"-Wl,-z\");\n-            self.cmd.arg(\"-Wl,ignore\");\n+            self.linker_arg(\"-z\");\n+            self.linker_arg(\"ignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to\n         // eliminate the metadata. If we're building an executable, however,\n         // --gc-sections drops the size of hello world from 1.8MB to 597K, a 67%\n         // reduction.\n         } else if !keep_metadata {\n-            self.cmd.arg(\"-Wl,--gc-sections\");\n+            self.linker_arg(\"--gc-sections\");\n         }\n     }\n \n@@ -226,7 +258,7 @@ impl<'a> Linker for GnuLinker<'a> {\n         // need a numeric argument, but other linkers do.\n         if self.sess.opts.optimize == config::OptLevel::Default ||\n            self.sess.opts.optimize == config::OptLevel::Aggressive {\n-            self.cmd.arg(\"-Wl,-O1\");\n+            self.linker_arg(\"-O1\");\n         }\n     }\n \n@@ -235,23 +267,26 @@ impl<'a> Linker for GnuLinker<'a> {\n     }\n \n     fn no_default_libraries(&mut self) {\n-        self.cmd.arg(\"-nodefaultlibs\");\n+        if !self.is_ld {\n+            self.cmd.arg(\"-nodefaultlibs\");\n+        }\n     }\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n         // On mac we need to tell the linker to let this library be rpathed\n         if self.sess.target.target.options.is_like_osx {\n-            self.cmd.args(&[\"-dynamiclib\", \"-Wl,-dylib\"]);\n+            self.cmd.arg(\"-dynamiclib\");\n+            self.linker_arg(\"-dylib\");\n \n             // Note that the `osx_rpath_install_name` option here is a hack\n             // purely to support rustbuild right now, we should get a more\n             // principled solution at some point to force the compiler to pass\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n             if self.sess.opts.cg.rpath ||\n                self.sess.opts.debugging_opts.osx_rpath_install_name {\n-                let mut v = OsString::from(\"-Wl,-install_name,@rpath/\");\n+                let mut v = OsString::from(\"-install_name,@rpath/\");\n                 v.push(out_filename.file_name().unwrap());\n-                self.cmd.arg(&v);\n+                self.linker_arg(&v);\n             }\n         } else {\n             self.cmd.arg(\"-shared\");\n@@ -307,19 +342,28 @@ impl<'a> Linker for GnuLinker<'a> {\n         }\n \n         if self.sess.target.target.options.is_like_osx {\n-            arg.push(\"-Wl,-exported_symbols_list,\");\n+            if !self.is_ld {\n+                arg.push(\"-Wl,\")\n+            }\n+            arg.push(\"-exported_symbols_list,\");\n         } else if self.sess.target.target.options.is_like_solaris {\n-            arg.push(\"-Wl,-M,\");\n+            if !self.is_ld {\n+                arg.push(\"-Wl,\")\n+            }\n+            arg.push(\"-M,\");\n         } else {\n-            arg.push(\"-Wl,--version-script=\");\n+            if !self.is_ld {\n+                arg.push(\"-Wl,\")\n+            }\n+            arg.push(\"--version-script=\");\n         }\n \n         arg.push(&path);\n         self.cmd.arg(arg);\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n-        self.cmd.arg(&format!(\"-Wl,--subsystem,{}\", subsystem));\n+        self.cmd.arg(&format!(\"--subsystem,{}\", subsystem));\n     }\n \n     fn finalize(&mut self) -> Command {"}, {"sha": "14515ad7f00b91f9c4c140b6e5e15351d25968d2", "filename": "src/test/run-make/target-specs/my-awesome-platform.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-awesome-platform.json", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-awesome-platform.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-awesome-platform.json?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -1,5 +1,6 @@\n {\n     \"data-layout\": \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\",\n+    \"linker-flavor\": \"gcc\",\n     \"llvm-target\": \"i686-unknown-linux-gnu\",\n     \"target-endian\": \"little\",\n     \"target-pointer-width\": \"32\","}, {"sha": "74787b28d2233905382e8960af5b8ee003299867", "filename": "src/test/run-make/target-specs/my-incomplete-platform.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-incomplete-platform.json", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-incomplete-platform.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-incomplete-platform.json?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -1,5 +1,6 @@\n {\n     \"data-layout\": \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\",\n+    \"linker-flavor\": \"gcc\",\n     \"target-endian\": \"little\",\n     \"target-pointer-width\": \"32\",\n     \"arch\": \"x86\","}, {"sha": "cfe152f9e8728c0a3fb294de11c324d4210b9895", "filename": "src/test/run-make/target-specs/x86_64-unknown-linux-gnu.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fx86_64-unknown-linux-gnu.json", "raw_url": "https://github.com/rust-lang/rust/raw/9d11b089ad136432dff6c49c6eb3c48c7f6e5273/src%2Ftest%2Frun-make%2Ftarget-specs%2Fx86_64-unknown-linux-gnu.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Fx86_64-unknown-linux-gnu.json?ref=9d11b089ad136432dff6c49c6eb3c48c7f6e5273", "patch": "@@ -1,6 +1,7 @@\n {\n     \"pre-link-args\": [\"-m64\"],\n     \"data-layout\": \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\",\n+    \"linker-flavor\": \"gcc\",\n     \"llvm-target\": \"x86_64-unknown-linux-gnu\",\n     \"target-endian\": \"little\",\n     \"target-pointer-width\": \"64\","}]}