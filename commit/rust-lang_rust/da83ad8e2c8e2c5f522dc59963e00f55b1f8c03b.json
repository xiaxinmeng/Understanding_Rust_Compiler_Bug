{"sha": "da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODNhZDhlMmM4ZTJjNWY1MjJkYzU5OTYzZTAwZjU1YjFmOGMwM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-12T02:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-12T02:56:53Z"}, "message": "auto merge of #19514 : jbranchaud/rust/add-btree-set-bitor, r=Gankro\n\nI am trying to add an implementation of `bitor` for `BTreeSet`. I think I am most of the way there, but I am going to need some guidance to take it all the way.\r\n\r\nWhen I run `make check`, I get:\r\n\r\n```\r\nerror: cannot move out of dereference of `&`-pointer\r\nself.union(_rhs).map(|&i| i).collect::<BTreeSet<T>>()\r\n                      ^~\r\n```\r\n\r\nI'd appreciate any nudges in the right direction. If I can figure this one out, I am sure I will be able to implement `bitand`, `bitxor`, and `sub` as well.\r\n\r\n/cc @Gankro \r\n\r\n---\r\n\r\n**Update**\r\n\r\nI have added implementations for `BitOr`, `BitAnd`, `BitXor`, and `Sub` for `BTreeSet`.", "tree": {"sha": "43f7f66771f888b430d1b8f6bd9e240658ead9a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f7f66771f888b430d1b8f6bd9e240658ead9a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "html_url": "https://github.com/rust-lang/rust/commit/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "193390d0e48f6d8fb58acb7d0460c14acf907322", "url": "https://api.github.com/repos/rust-lang/rust/commits/193390d0e48f6d8fb58acb7d0460c14acf907322", "html_url": "https://github.com/rust-lang/rust/commit/193390d0e48f6d8fb58acb7d0460c14acf907322"}, {"sha": "cd008c412770d053a020ea1cf3ce02eae35623a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd008c412770d053a020ea1cf3ce02eae35623a7", "html_url": "https://github.com/rust-lang/rust/commit/cd008c412770d053a020ea1cf3ce02eae35623a7"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "0fbc319f4ff645f18e610600fd156f768b50c03b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "patch": "@@ -22,7 +22,6 @@ use core::iter::Peekable;\n use core::fmt::Show;\n \n // FIXME(conventions): implement bounded iterators\n-// FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n \n /// A set based on a B-Tree.\n ///\n@@ -406,6 +405,90 @@ impl<T: Ord> Default for BTreeSet<T> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> Sub<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3,4,5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a - b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,2]);\n+    /// ```\n+    fn sub(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitXor<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2,3,4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a ^ b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,4]);\n+    /// ```\n+    fn bitxor(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitAnd<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2,3,4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a & b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![2,3]);\n+    /// ```\n+    fn bitand(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitOr<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3,4,5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a | b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,2,3,4,5]);\n+    /// ```\n+    fn bitor(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n impl<T: Show> Show for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}]}