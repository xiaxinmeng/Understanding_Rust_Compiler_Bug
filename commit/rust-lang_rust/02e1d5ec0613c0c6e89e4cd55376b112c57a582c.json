{"sha": "02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTFkNWVjMDYxM2MwYzZlODllNGNkNTUzNzZiMTEyYzU3YTU4MmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T15:56:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T16:21:52Z"}, "message": "When converting parameters for an object type, be careful of defaults that reference `Self`.\nFixes #18956.", "tree": {"sha": "da2eb30831f27ac5c97b507b22e4da04a0182684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2eb30831f27ac5c97b507b22e4da04a0182684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "html_url": "https://github.com/rust-lang/rust/commit/02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "html_url": "https://github.com/rust-lang/rust/commit/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "cb928ce64bc5c9cbc3ea24fb385f5a3c2980bd5f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "patch": "@@ -508,13 +508,26 @@ pub fn parameterized<'tcx,GG>(cx: &ctxt<'tcx>,\n     // avoid those ICEs.\n     let generics = get_generics();\n \n+    let has_self = substs.self_ty().is_some();\n     let tps = substs.types.get_slice(subst::TypeSpace);\n     let ty_params = generics.types.get_slice(subst::TypeSpace);\n     let has_defaults = ty_params.last().map_or(false, |def| def.default.is_some());\n     let num_defaults = if has_defaults {\n         ty_params.iter().zip(tps.iter()).rev().take_while(|&(def, &actual)| {\n             match def.default {\n-                Some(default) => default.subst(cx, substs) == actual,\n+                Some(default) => {\n+                    if !has_self && ty::type_has_self(default) {\n+                        // In an object type, there is no `Self`, and\n+                        // thus if the default value references Self,\n+                        // the user will be required to give an\n+                        // explicit value. We can't even do the\n+                        // substitution below to check without causing\n+                        // an ICE. (#18956).\n+                        false\n+                    } else {\n+                        default.subst(cx, substs) == actual\n+                    }\n+                }\n                 None => false\n             }\n         }).count()"}, {"sha": "19cf3bb93ea1706a7cdd8821067ac97b77bf1cfd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "patch": "@@ -404,17 +404,30 @@ fn create_substs_for_ast_path<'tcx>(\n \n     let actual_supplied_ty_param_count = substs.types.len(TypeSpace);\n     for param in &ty_param_defs[actual_supplied_ty_param_count..] {\n-        match param.default {\n-            Some(default) => {\n+        if let Some(default) = param.default {\n+            // If we are converting an object type, then the\n+            // `Self` parameter is unknown. However, some of the\n+            // other type parameters may reference `Self` in their\n+            // defaults. This will lead to an ICE if we are not\n+            // careful!\n+            if self_ty.is_none() && ty::type_has_self(default) {\n+                tcx.sess.span_err(\n+                    span,\n+                    &format!(\"the type parameter `{}` must be explicitly specified \\\n+                              in an object type because its default value `{}` references \\\n+                              the type `Self`\",\n+                             param.name.user_string(tcx),\n+                             default.user_string(tcx)));\n+                substs.types.push(TypeSpace, tcx.types.err);\n+            } else {\n                 // This is a default type parameter.\n                 let default = default.subst_spanned(tcx,\n                                                     &substs,\n                                                     Some(span));\n                 substs.types.push(TypeSpace, default);\n             }\n-            None => {\n-                tcx.sess.span_bug(span, \"extra parameter without default\");\n-            }\n+        } else {\n+            tcx.sess.span_bug(span, \"extra parameter without default\");\n         }\n     }\n "}, {"sha": "8ff514e04e360fbcef36cf6b39a4d61089b44214", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a default that references `Self` which is then used in an\n+// object type. Issue #18956. In this case, the value is supplied by\n+// the user, but pretty-printing the type during the error message\n+// caused an ICE.\n+\n+trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+\n+impl MyAdd for i32 {\n+    fn add(&self, other: &i32) -> i32 { *self + *other }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = x as MyAdd<i32>;\n+    //~^ ERROR as `MyAdd<i32>`\n+}"}, {"sha": "9982d4850248bb5851150ed0779dce5eacbd908f", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e1d5ec0613c0c6e89e4cd55376b112c57a582c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs?ref=02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a default that references `Self` which is then used in an object type.\n+// Issue #18956.\n+\n+#![feature(default_type_params)]\n+\n+trait Foo<T=Self> {\n+    fn method(&self);\n+}\n+\n+fn foo(x: &Foo) { }\n+//~^ ERROR the type parameter `T` must be explicitly specified\n+\n+fn main() { }"}]}