{"sha": "35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZjMzYzE3ZjdkMjQyYmNlMDMxYTllNjQ4ZTZjM2YzMWRkNTllZjY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-27T00:34:29Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-27T00:34:29Z"}, "message": "Remove unnecessary fallbacks\n\nThe `target_word_size` attribute is always available at compile time, so there is no need for a fallback.", "tree": {"sha": "bf99eefd5487a43725f61883bd255b1adfb8971c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf99eefd5487a43725f61883bd255b1adfb8971c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "html_url": "https://github.com/rust-lang/rust/commit/35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35f33c17f7d242bce031a9e648e6c3f31dd59ef6/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32df8ed877e6ec73eb787798384e114182caf08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32df8ed877e6ec73eb787798384e114182caf08c", "html_url": "https://github.com/rust-lang/rust/commit/32df8ed877e6ec73eb787798384e114182caf08c"}], "stats": {"total": 82, "additions": 0, "deletions": 82}, "files": [{"sha": "c04e2a2e70d38eac5a678c2c0fd6befc0b4ec314", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/35f33c17f7d242bce031a9e648e6c3f31dd59ef6/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f33c17f7d242bce031a9e648e6c3f31dd59ef6/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "patch": "@@ -27,12 +27,6 @@ mod inst {\n         #[inline(always)]\n         fn bits() -> uint { 64 }\n \n-        // fallback if we don't have access to the current word size\n-        #[cfg(not(target_word_size = \"32\"),\n-              not(target_word_size = \"64\"))]\n-        #[inline(always)]\n-        fn bits() -> uint { ::sys::size_of::<int>() * 8 }\n-\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<int>() / 8 }\n     }\n@@ -69,41 +63,6 @@ mod inst {\n         fn trailing_zeros(&self) -> int { (*self as i32).trailing_zeros() as int }\n     }\n \n-    // fallback if we don't have access to the current word size\n-    #[cfg(not(target_word_size = \"32\"),\n-          not(target_word_size = \"64\"))]\n-    impl BitCount for int {\n-        /// Counts the number of bits set.\n-        #[inline(always)]\n-        fn population_count(&self) -> int {\n-            match ::sys::size_of::<int>() {\n-                8 => (*self as i64).population_count() as int,\n-                4 => (*self as i32).population_count() as int,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-\n-        /// Counts the number of leading zeros.\n-        #[inline(always)]\n-        fn leading_zeros(&self) -> int {\n-            match ::sys::size_of::<int>() {\n-                8 => (*self as i64).leading_zeros() as int,\n-                4 => (*self as i32).leading_zeros() as int,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-\n-        /// Counts the number of trailing zeros.\n-        #[inline(always)]\n-        fn trailing_zeros(&self) -> int {\n-            match ::sys::size_of::<int>() {\n-                8 => (*self as i64).trailing_zeros() as int,\n-                4 => (*self as i32).trailing_zeros() as int,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-    }\n-\n     /// Returns `base` raised to the power of `exponent`\n     pub fn pow(base: int, exponent: uint) -> int {\n         if exponent == 0u {"}, {"sha": "d333b0b58e1dfd0dae6bdfb653c1caa8a1c57dca", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/35f33c17f7d242bce031a9e648e6c3f31dd59ef6/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f33c17f7d242bce031a9e648e6c3f31dd59ef6/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=35f33c17f7d242bce031a9e648e6c3f31dd59ef6", "patch": "@@ -41,12 +41,6 @@ pub mod inst {\n         #[inline(always)]\n         fn bits() -> uint { 64 }\n \n-        // fallback if we don't have access to the current word size\n-        #[cfg(not(target_word_size = \"32\"),\n-              not(target_word_size = \"64\"))]\n-        #[inline(always)]\n-        fn bits() -> uint { sys::size_of::<uint>() * 8 }\n-\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<uint>() / 8 }\n     }\n@@ -83,41 +77,6 @@ pub mod inst {\n         fn trailing_zeros(&self) -> uint { (*self as i32).trailing_zeros() as uint }\n     }\n \n-    // fallback if we don't have access to the current word size\n-    #[cfg(not(target_word_size = \"32\"),\n-          not(target_word_size = \"64\"))]\n-    impl BitCount for uint {\n-        /// Counts the number of bits set.\n-        #[inline(always)]\n-        fn population_count(&self) -> uint {\n-            match sys::size_of::<uint>() {\n-                8 => (*self as i64).population_count() as uint,\n-                4 => (*self as i32).population_count() as uint,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-\n-        /// Counts the number of leading zeros.\n-        #[inline(always)]\n-        fn leading_zeros(&self) -> uint {\n-            match sys::size_of::<uint>() {\n-                8 => (*self as i64).leading_zeros() as uint,\n-                4 => (*self as i32).leading_zeros() as uint,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-\n-        /// Counts the number of trailing zeros.\n-        #[inline(always)]\n-        fn trailing_zeros(&self) -> uint {\n-            match sys::size_of::<uint>() {\n-                8 => (*self as i64).trailing_zeros() as uint,\n-                4 => (*self as i32).trailing_zeros() as uint,\n-                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n-            }\n-        }\n-    }\n-\n     ///\n     /// Divide two numbers, return the result, rounded up.\n     ///"}]}