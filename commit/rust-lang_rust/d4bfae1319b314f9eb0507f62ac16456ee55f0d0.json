{"sha": "d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmZhZTEzMTliMzE0ZjllYjA1MDdmNjJhYzE2NDU2ZWU1NWYwZDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-19T22:53:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-20T00:32:33Z"}, "message": "Update message for `!Sized` types", "tree": {"sha": "f8d81e837e981edbbbd2852d458fb4b3f6e6ef60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d81e837e981edbbbd2852d458fb4b3f6e6ef60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "html_url": "https://github.com/rust-lang/rust/commit/d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a49524bd25804794f180b8905718a35cb113d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a49524bd25804794f180b8905718a35cb113d8", "html_url": "https://github.com/rust-lang/rust/commit/76a49524bd25804794f180b8905718a35cb113d8"}], "stats": {"total": 416, "additions": 209, "deletions": 207}, "files": [{"sha": "5db5d88d4a5ff9bc2e3036ba5e9d1ecb46ed7c7b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -92,8 +92,8 @@ impl<T: ?Sized> !Send for *mut T { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented(\n-    message=\"`{Self}` does not have a constant size known at compile-time\",\n-    label=\"`{Self}` does not have a constant size known at compile-time\",\n+    message=\"the size for value values of type `{Self}` cannot be known at compilation time\",\n+    label=\"doesn't have a size known at compile-time\",\n     note=\"to learn more, visit <https://doc.rust-lang.org/book/second-edition/\\\n           ch19-04-advanced-types.html#dynamically-sized-types--sized>\",\n )]"}, {"sha": "3bb0382ef037be8299c335d675a14253ca13d9b1", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR `<T as Get>::Value` does not have a constant size known at\n+    let x = t.get(); //~ ERROR the size for value values of type\n }\n \n fn main() {"}, {"sha": "9b87ec4d446cd155bf5ce4f2a8b18317973b20fb", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -13,6 +13,6 @@ trait Trait {}\n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR `Trait` does not have a constant size known at compile-time\n-    //~| ERROR `Trait` does not have a constant size known at compile-time\n+    //~| ERROR the size for value values of type\n+    //~| ERROR the size for value values of type\n }"}, {"sha": "1dbdd42ca36e267e8e32f9bdcefe0cc9f54b9431", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -43,5 +43,6 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR `ToBar` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n+\n }"}, {"sha": "5bc6c6cda263afe3ca4762d48c83bd742198d714", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -45,5 +45,5 @@ pub fn main() {\n     //~| expected type `ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR `ToBar` does not have a constant size known at compile-time\n+    //~| ERROR the size for value values of type\n }"}, {"sha": "37b6056d1a762328eea2d61e52f245bdbd109547", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -47,5 +47,5 @@ pub fn main() {\n     //~| expected type `ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR `ToBar` does not have a constant size known at compile-time\n+    //~| ERROR the size for value values of type\n }"}, {"sha": "82d81913cd3a3dbd6a290bc52ccb72c742d61459", "filename": "src/test/compile-fail/dst-bad-deep-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     let f: ([isize; 3],) = ([5, 6, 7],);\n     let g: &([isize],) = &f;\n     let h: &(([isize],),) = &(*g,);\n-    //~^ ERROR `[isize]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "b8ca22185bc3c9dd33e4ca8f7c5833e2bb997eb1", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR `[isize]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "4a892753595a72cb4f3c7a76550878aa8848cd05", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `T` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `T` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "0679556743228c28af4c363ed92fb6b08e72ddc1", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR `[isize]` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR `[usize]` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n pub fn main() { }"}, {"sha": "135b466161d77a0cbe88c62d9314bf9da04eebcd", "filename": "src/test/compile-fail/extern-types-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -30,14 +30,14 @@ fn assert_sized<T>() { }\n \n fn main() {\n     assert_sized::<A>();\n-    //~^ ERROR `A` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     assert_sized::<Foo>();\n-    //~^ ERROR `A` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     assert_sized::<Bar<A>>();\n-    //~^ ERROR `A` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     assert_sized::<Bar<Bar<A>>>();\n-    //~^ ERROR `A` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "5212cbb004efadffd955977b1e68fd8367cf749e", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "4756099ab95689c954112855ecfba28136c177e0", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-    //~^ ERROR `[T]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     in arg2\n     {\n     }"}, {"sha": "e7019ff7c0d21193caaa0a91119a31596622cdc1", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR `[{integer}]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "9239ceb341fc6da523732dbd941e7ccf80195488", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: `AbstractRenderer + 'static` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "0b717ec641375d8a27af24804aef5a8ebf91263b", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR: `for<'r> std::ops::Fn(&'r isize) -> isize` does not have a constant size known at\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "426657ac92e2c868a902d9edec48f5701ce410e4", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR `Self` does not have a constant size known at compile-time\n+    fn to<Dst>(  //~ ERROR the size for value values of type\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "8b7f2d5a4588e3334ce464e0959643bf2cc52a19", "filename": "src/test/compile-fail/issue-20433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -14,5 +14,5 @@ struct The;\n \n impl The {\n     fn iceman(c: Vec<[i32]>) {}\n-    //~^ ERROR `[i32]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "2d8d9c6565532c84ed65e24bb2b07a9e41c627f9", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR `std::iter::Iterator<Item=&mut u8>` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "cb199580b10dd182137a89de62dd8404dea87a63", "filename": "src/test/compile-fail/issue-22874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,7 +10,7 @@\n \n struct Table {\n     rows: [[String]],\n-    //~^ ERROR `[std::string::String]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn f(table: &Table) -> &[String] {"}, {"sha": "d6b5c32982554a3055ff4e911552bc4cd994fc6b", "filename": "src/test/compile-fail/issue-23281.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -14,7 +14,7 @@ pub struct Struct;\n \n impl Struct {\n     pub fn function(funs: Vec<Fn() -> ()>) {}\n-    //~^ ERROR `std::ops::Fn() + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "74c68c50ae35aee6b8a773654d14a81c254f35d9", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,8 +10,8 @@\n \n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n-        //~^ ERROR: mismatched types\n-        //~| ERROR: `std::ops::Fn() -> u32 + 'static` does not have a constant size known at\n+        //~^ ERROR mismatched types\n+        //~| ERROR the size for value values of type\n         0\n     };\n }"}, {"sha": "bc5567e1686d3ac16b35849c5d07f26cf8860c06", "filename": "src/test/compile-fail/issue-27060-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,7 +10,7 @@\n \n #[repr(packed)]\n pub struct Bad<T: ?Sized> {\n-    data: T, //~ ERROR `T` does not have a constant size known at compile-time\n+    data: T, //~ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "6efc1f1024317ff8853c46faf4939921b845fb1f", "filename": "src/test/compile-fail/issue-27078.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -13,7 +13,7 @@\n trait Foo {\n     const BAR: i32;\n     fn foo(self) -> &'static i32 {\n-        //~^ ERROR `Self` does not have a constant size known at compile-time\n+        //~^ ERROR the size for value values of type\n         &<Self>::BAR\n     }\n }"}, {"sha": "805b1a48a038012a67f2be38acb4ec080bcce1c3", "filename": "src/test/compile-fail/issue-35988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,7 +10,7 @@\n \n enum E {\n     V([Box<E>]),\n-    //~^ ERROR `[std::boxed::Box<E>]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "1b64d17bbeffe4b1de41f6c66aacbf2c465f68c1", "filename": "src/test/compile-fail/issue-38954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn _test(ref _p: str) {}\n-//~^ ERROR `str` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() { }"}, {"sha": "6207e669d0092ad790c994b743d3714bbe805a34", "filename": "src/test/compile-fail/issue-41229-ref-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn example(ref s: str) {}\n-//~^ ERROR `str` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() {}"}, {"sha": "2ab44433ede82151cd1e97320ad70b2127a26807", "filename": "src/test/compile-fail/issue-42312.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,10 +12,10 @@ use std::ops::Deref;\n \n pub trait Foo {\n     fn baz(_: Self::Target) where Self: Deref {}\n-    //~^ ERROR `<Self as std::ops::Deref>::Target` does not have a constant size known at\n+    //~^ ERROR the size for value values of type\n }\n \n pub fn f(_: ToString) {}\n-//~^ ERROR `std::string::ToString + 'static` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() { }"}, {"sha": "82d4666ce549ca1a68de9c2fb58ba98a40e995b4", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR `A + 'static` does not have a constant size known at compile-time\n-    //~^ ERROR `A + 'static` does not have a constant size known at compile-time\n+    -> Struct { //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for value values of type\n     Struct { r: r }\n }\n "}, {"sha": "ed26204bbe10920d39a5896ae8c9d0e9a949ed03", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -22,5 +22,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR `[{integer}]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }"}, {"sha": "cc5fd7e3f24d82fd64dcd99b7ec1a35810b90463", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,8 +12,8 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n-    //~| ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n+    //~| ERROR the size for value values of type\n     s[1usize] = bot();\n     //~^ ERROR the type `str` cannot be mutably indexed by `usize`\n }"}, {"sha": "b8557cb79e38743d5008faa28819f2cc39ac122c", "filename": "src/test/compile-fail/substs-ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -56,6 +56,6 @@ fn foo<'z>() where &'z (): Sized {\n     //[normal]~| found type `fn() {foo::<'static>}`\n \n     <str as Foo<u8>>::bar;\n-    //[verbose]~^ ERROR `str` does not have a constant size known at compile-time\n-    //[normal]~^^ ERROR `str` does not have a constant size known at compile-time\n+    //[verbose]~^ ERROR the size for value values of type\n+    //[normal]~^^ ERROR the size for value values of type\n }"}, {"sha": "89fddf1f65f0240ea7f391358ea8d43ffc98d866", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR `Foo + std::marker::Send + 'static` does not have a constant size known at\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "a9a2a3c4c92a11064698d939d08873d183f41f8b", "filename": "src/test/compile-fail/union/union-unsized.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,14 +12,15 @@\n \n union U {\n     a: str,\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n+\n     b: u8,\n }\n \n union W {\n     a: u8,\n     b: str,\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "736794ac5384e0c768404c791b9ce6b2dcfaf34c", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -10,5 +10,5 @@\n \n fn bar<T: Sized>() { }\n fn foo<T: ?Sized>() { bar::<T>() }\n-//~^ ERROR `T` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n fn main() { }"}, {"sha": "f9702e29f1dc36ea44cc03fda326ca6859c58523", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR `T` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n //\n // Not OK: `T` is not sized.\n "}, {"sha": "03d3d98b59f012d62b54c16c73817128db8da673", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@\n struct S5<Y>(Y);\n \n impl<X: ?Sized> S5<X> {\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "8cb1f760664de469aec6c0572f6ab7086c1d619e", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR `T` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR `T` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "b3610a4c9b9b64b8f0ddd5921e3e181fa9649ec7", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -18,7 +18,7 @@ trait T3<Z: ?Sized> {\n struct S5<Y>(Y);\n \n impl<X: ?Sized> T3<X> for S5<X> {\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "50a058a4338d8d56f9813d32dbedddce449a2cb9", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "945f20b28779ed9963fd552ca7c47a28683f830f", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -41,20 +41,20 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n-    //~| ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n+    //~| ERROR the size for value values of type\n }\n \n pub fn main() {"}, {"sha": "e04aa3599e9b5805e47af228ffcdf65d3287d1c5", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,32 +12,32 @@\n \n struct S1<X: ?Sized> {\n     f1: X,\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n     g: X,\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     h: isize,\n }\n struct S3 {\n     f: str,\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     g: [usize]\n }\n struct S4 {\n     f: [u8],\n-    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     g: usize\n }\n enum E<X: ?Sized> {\n     V1(X, isize),\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n enum F<X: ?Sized> {\n     V2{f1: X, f: isize},\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n pub fn main() {"}, {"sha": "8ac9fe4c58787b1a54cd78cb0bd4acafd4dbf2e7", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,40 +15,40 @@ trait T {}\n fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n     let _: W; // <-- this is OK, no bindings created, no initializer.\n     let _: (isize, (X, isize));\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let y: Y;\n-    //~^ ERROR `Y` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let y: (isize, (Z, usize));\n-    //~^ ERROR `Z` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n     let y: X;\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let y: (isize, (Y, isize));\n-    //~^ ERROR `Y` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let y = *x2;\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let (y, z) = (*x3, 4);\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let y = *x2;\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     let (y, z) = (*x3, 4);\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn g1<X: ?Sized>(x: X) {}\n-//~^ ERROR `X` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n fn g2<X: ?Sized + T>(x: X) {}\n-//~^ ERROR `X` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n pub fn main() {\n }"}, {"sha": "44d7df35680ce3bee8d5a6c7ea416d38514ce537", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() { }"}, {"sha": "c0a367604c374be88f353433d4c2b54b5b47420d", "filename": "src/test/ui/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -11,16 +11,16 @@\n use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at\n+//~^ ERROR the size for value values of type\n \n const CONST_FOO: str = *\"foo\";\n-//~^ ERROR `str` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at\n+//~^ ERROR the size for value values of type\n \n static STATIC_BAR: str = *\"bar\";\n-//~^ ERROR `str` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() {\n     println!(\"{:?} {:?} {:?} {:?}\", &CONST_0, &CONST_FOO, &STATIC_1, &STATIC_BAR);"}, {"sha": "2cde4aec2b5d47b84e1fb8cc67a1264fbe88394f", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,38 +1,38 @@\n-error[E0277]: `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:13:29\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:16:24\n    |\n LL | const CONST_FOO: str = *\"foo\";\n-   |                        ^^^^^^ `str` does not have a constant size known at compile-time\n+   |                        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:19:31\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:22:26\n    |\n LL | static STATIC_BAR: str = *\"bar\";\n-   |                          ^^^^^^ `str` does not have a constant size known at compile-time\n+   |                          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "95f10e7206f92ec7816fbe2d564f9f4d88bd7333", "filename": "src/test/ui/error-codes/E0277.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -21,7 +21,7 @@ fn some_func<T: Foo>(foo: T) {\n }\n \n fn f(p: Path) { }\n-//~^ ERROR `[u8]` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() {\n     some_func(5i32);"}, {"sha": "ca5b0d2b987d6ac2c06c43c844ba070acd334c71", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `[u8]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n   --> $DIR/E0277.rs:23:6\n    |\n LL | fn f(p: Path) { }\n-   |      ^ `[u8]` does not have a constant size known at compile-time\n+   |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "db280f2d1f763540068c4d73fd5712b36ba610e8", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -87,38 +87,38 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:62:1\n    |\n LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `str` does not have a constant size known at compile-time\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: `A + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `A + 'static` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n LL | | }\n-   | |_^ `A + 'static` does not have a constant size known at compile-time\n+   | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<A + 'static>`, the trait `std::marker::Sized` is not implemented for `A + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Dst<A + 'static>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:69:1\n    |\n LL | / fn return_str() -> str where str: Sized { //~ ERROR\n LL | |     *\"Sized\".to_string().into_boxed_str()\n LL | | }\n-   | |_^ `str` does not have a constant size known at compile-time\n+   | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "efaee4095c1487a925c9437c992776004632c9a4", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,9 +15,9 @@ use std::ops::Generator;\n fn main() {\n    let s = String::from(\"foo\");\n    let mut gen = move || {\n-   //~^ ERROR `str` does not have a constant size known at compile-time\n+   //~^ ERROR the size for value values of type\n        yield s[..];\n    };\n    unsafe { gen.resume(); }\n-   //~^ ERROR `str` does not have a constant size known at compile-time\n+   //~^ ERROR the size for value values of type\n }"}, {"sha": "2938268a804ae1dfeb598a8dfbc6fa506920ed3e", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,22 +1,22 @@\n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:17:26\n    |\n LL |      let mut gen = move || {\n    |  __________________________^\n-LL | |    //~^ ERROR `str` does not have a constant size known at compile-time\n+LL | |    //~^ ERROR the size for value values of type\n LL | |        yield s[..];\n LL | |    };\n-   | |____^ `str` does not have a constant size known at compile-time\n+   | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: the yield type of a generator must have a statically known size\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:21:17\n    |\n LL |    unsafe { gen.resume(); }\n-   |                 ^^^^^^ `str` does not have a constant size known at compile-time\n+   |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "d76c4a015a2c2f5236ee0b5598f54d28d4110dba", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -60,7 +60,7 @@ fn main()\n \n     let _ = 42usize as *const [u8]; //~ ERROR is invalid\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n-    let _ = fat_v as *const Foo; //~ ERROR `[u8]` does not have a constant size known at\n+    let _ = fat_v as *const Foo; //~ ERROR the size for value values of type\n     let _ = foo as *const str; //~ ERROR is invalid\n     let _ = foo as *mut str; //~ ERROR is invalid\n     let _ = main as *mut str; //~ ERROR is invalid\n@@ -69,7 +69,7 @@ fn main()\n     let _ = fat_sv as usize; //~ ERROR is invalid\n \n     let a : *const str = \"hello\";\n-    let _ = a as *const Foo; //~ ERROR `str` does not have a constant size known at compile-time\n+    let _ = a as *const Foo; //~ ERROR the size for value values of type\n \n     // check no error cascade\n     let _ = main.f as *const u32; //~ ERROR no field"}, {"sha": "feaf492837f7f83b795717934763cd8890f760e8", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -216,21 +216,21 @@ LL |     let _ = cf as *const Bar; //~ ERROR is invalid\n    |\n    = note: vtable kinds may not match\n \n-error[E0277]: `[u8]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:63:13\n    |\n-LL |     let _ = fat_v as *const Foo; //~ ERROR `[u8]` does not have a constant size known at\n-   |             ^^^^^ `[u8]` does not have a constant size known at compile-time\n+LL |     let _ = fat_v as *const Foo; //~ ERROR the size for value values of type\n+   |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required for the cast to the object type `Foo`\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:72:13\n    |\n-LL |     let _ = a as *const Foo; //~ ERROR `str` does not have a constant size known at compile-time\n-   |             ^ `str` does not have a constant size known at compile-time\n+LL |     let _ = a as *const Foo; //~ ERROR the size for value values of type\n+   |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "ca854f9f70122c2b4750bac48c658447f6fa7a13", "filename": "src/test/ui/resolve/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,6 +12,6 @@ trait I {}\n type K = I+'static;\n \n fn foo(_x: K) {}\n-//~^ ERROR `I + 'static` does not have a constant size known at compile-time\n+//~^ ERROR the size for value values of type\n \n fn main() {}"}, {"sha": "efcd0b3624811c76d4db90ee6c2329df367588ef", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `I + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `I + 'static` cannot be known at compilation time\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n LL | fn foo(_x: K) {}\n-   |        ^^ `I + 'static` does not have a constant size known at compile-time\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `I + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "8fbab4022327171feb87ce682c25b0f7d3154273", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,7 +15,7 @@ fn main() {\n   let u: &str = if true { s[..2] } else { s };\n   //~^ ERROR mismatched types\n   let v = s[..2];\n-  //~^ ERROR `str` does not have a constant size known at compile-time\n+  //~^ ERROR the size for value values of type\n   let w: &str = s[..2];\n   //~^ ERROR mismatched types\n }"}, {"sha": "12699d8b25f81750393da26779a59a5d70d020e1", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -19,13 +19,13 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    = note: expected type `&str`\n               found type `str`\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/str-array-assignment.rs:17:7\n    |\n LL |   let v = s[..2];\n    |       ^   ------ help: consider borrowing here: `&s[..2]`\n    |       |\n-   |       `str` does not have a constant size known at compile-time\n+   |       doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "dd74f4f4797272400bc36dd0bd7f6dd9ccee42d0", "filename": "src/test/ui/trait-suggest-where-clause.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -15,10 +15,10 @@ struct Misc<T:?Sized>(T);\n fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n-    //~^ ERROR `U` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     mem::size_of::<Misc<U>>();\n-    //~^ ERROR `U` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     // ... even if T occurs as a type parameter\n \n@@ -36,10 +36,10 @@ fn check<T: Iterator, U: ?Sized>() {\n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n-    //~^ ERROR `[T]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     mem::size_of::<[&U]>();\n-    //~^ ERROR `[&U]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {"}, {"sha": "feb31ae22d8ca9b01fc81c982287d6b0c01ed4a9", "filename": "src/test/ui/trait-suggest-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,19 +1,19 @@\n-error[E0277]: `U` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:17:5\n    |\n LL |     mem::size_of::<U>();\n-   |     ^^^^^^^^^^^^^^^^^ `U` does not have a constant size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: `U` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:20:5\n    |\n LL |     mem::size_of::<Misc<U>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `U` does not have a constant size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n@@ -47,21 +47,21 @@ LL |     <Misc<_> as From<T>>::from;\n    |\n    = note: required by `std::convert::From::from`\n \n-error[E0277]: `[T]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[T]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:38:5\n    |\n LL |     mem::size_of::<[T]>();\n-   |     ^^^^^^^^^^^^^^^^^^^ `[T]` does not have a constant size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: `[&U]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[&U]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:41:5\n    |\n LL |     mem::size_of::<[&U]>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `[&U]` does not have a constant size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "d08574c3d878967d533fd7c36f6a4b5f8e1547fb", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/trivial-bounds-leak.rs:22:25\n    |\n LL | fn cant_return_str() -> str { //~ ERROR\n-   |                         ^^^ `str` does not have a constant size known at compile-time\n+   |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "15822ae42998c5769acd0670067bdaba22396ed1", "filename": "src/test/ui/union/union-sized-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -12,18 +12,18 @@\n \n union Foo<T: ?Sized> {\n     value: T,\n-    //~^ ERROR `T` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n struct Foo2<T: ?Sized> {\n     value: T,\n-    //~^ ERROR `T` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     t: u32,\n }\n \n enum Foo3<T: ?Sized> {\n     Value(T),\n-    //~^ ERROR `T` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n fn main() {}"}, {"sha": "c6b7cf4e078233c5bc6cdb86696ddc5856d01e97", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,30 +1,30 @@\n-error[E0277]: `T` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:14:5\n    |\n LL |     value: T,\n-   |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n+   |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n-error[E0277]: `T` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:19:5\n    |\n LL |     value: T,\n-   |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n+   |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n-error[E0277]: `T` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:25:11\n    |\n LL |     Value(T),\n-   |           ^ `T` does not have a constant size known at compile-time\n+   |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}, {"sha": "9082ea4abddbdd669ad4a3c86539e84c83ee33fd", "filename": "src/test/ui/unsized-enum2.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funsized-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funsized-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.rs?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -31,53 +31,53 @@ struct Path4(PathHelper4);\n enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n     // parameter\n     VA(W),\n-    //~^ ERROR `W` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VB{x: X},\n-    //~^ ERROR `X` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VC(isize, Y),\n-    //~^ ERROR `Y` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VD{u: isize, x: Z},\n-    //~^ ERROR `Z` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     // slice / str\n     VE([u8]),\n-    //~^ ERROR `[u8]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VF{x: str},\n-    //~^ ERROR `str` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VG(isize, [f32]),\n-    //~^ ERROR `[f32]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VH{u: isize, x: [u32]},\n-    //~^ ERROR `[u32]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     // unsized struct\n     VI(Path1),\n-    //~^ ERROR `PathHelper1 + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VJ{x: Path2},\n-    //~^ ERROR `PathHelper2 + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VK(isize, Path3),\n-    //~^ ERROR `PathHelper3 + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VL{u: isize, x: Path4},\n-    //~^ ERROR `PathHelper4 + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     // plain trait\n     VM(Foo),\n-    //~^ ERROR `Foo + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VN{x: Bar},\n-    //~^ ERROR `Bar + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VO(isize, FooBar),\n-    //~^ ERROR `FooBar + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VP{u: isize, x: BarFoo},\n-    //~^ ERROR `BarFoo + 'static` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n \n     // projected\n     VQ(<&'static [i8] as Deref>::Target),\n-    //~^ ERROR `[i8]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VR{x: <&'static [char] as Deref>::Target},\n-    //~^ ERROR `[char]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VS(isize, <&'static [f64] as Deref>::Target),\n-    //~^ ERROR `[f64]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-    //~^ ERROR `[i32]` does not have a constant size known at compile-time\n+    //~^ ERROR the size for value values of type\n }\n \n "}, {"sha": "ff2aa1d1ef91778321049ab8101d545a0732b494", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bfae1319b314f9eb0507f62ac16456ee55f0d0/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=d4bfae1319b314f9eb0507f62ac16456ee55f0d0", "patch": "@@ -1,205 +1,205 @@\n-error[E0277]: `W` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `W` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:33:8\n    |\n LL |     VA(W),\n-   |        ^ `W` does not have a constant size known at compile-time\n+   |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `X` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:35:8\n    |\n LL |     VB{x: X},\n-   |        ^^^^ `X` does not have a constant size known at compile-time\n+   |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `Y` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:37:15\n    |\n LL |     VC(isize, Y),\n-   |               ^ `Y` does not have a constant size known at compile-time\n+   |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `Z` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:39:18\n    |\n LL |     VD{u: isize, x: Z},\n-   |                  ^^^^ `Z` does not have a constant size known at compile-time\n+   |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[u8]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:43:8\n    |\n LL |     VE([u8]),\n-   |        ^^^^ `[u8]` does not have a constant size known at compile-time\n+   |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `str` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:45:8\n    |\n LL |     VF{x: str},\n-   |        ^^^^^^ `str` does not have a constant size known at compile-time\n+   |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[f32]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[f32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:47:15\n    |\n LL |     VG(isize, [f32]),\n-   |               ^^^^^ `[f32]` does not have a constant size known at compile-time\n+   |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[u32]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[u32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:49:18\n    |\n LL |     VH{u: isize, x: [u32]},\n-   |                  ^^^^^^^^ `[u32]` does not have a constant size known at compile-time\n+   |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `Foo + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `Foo + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n    |\n LL |     VM(Foo),\n-   |        ^^^ `Foo + 'static` does not have a constant size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Foo + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `Bar + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `Bar + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:65:8\n    |\n LL |     VN{x: Bar},\n-   |        ^^^^^^ `Bar + 'static` does not have a constant size known at compile-time\n+   |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Bar + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `FooBar + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `FooBar + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n    |\n LL |     VO(isize, FooBar),\n-   |               ^^^^^^ `FooBar + 'static` does not have a constant size known at compile-time\n+   |               ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `FooBar + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `BarFoo + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `BarFoo + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:69:18\n    |\n LL |     VP{u: isize, x: BarFoo},\n-   |                  ^^^^^^^^^ `BarFoo + 'static` does not have a constant size known at compile-time\n+   |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `BarFoo + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[i8]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[i8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:73:8\n    |\n LL |     VQ(<&'static [i8] as Deref>::Target),\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i8]` does not have a constant size known at compile-time\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[char]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[char]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:75:8\n    |\n LL |     VR{x: <&'static [char] as Deref>::Target},\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[char]` does not have a constant size known at compile-time\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[f64]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[f64]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:77:15\n    |\n LL |     VS(isize, <&'static [f64] as Deref>::Target),\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[f64]` does not have a constant size known at compile-time\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `[i32]` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `[i32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:79:18\n    |\n LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i32]` does not have a constant size known at compile-time\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `PathHelper1 + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `PathHelper1 + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n    |\n LL |     VI(Path1),\n-   |        ^^^^^ `PathHelper1 + 'static` does not have a constant size known at compile-time\n+   |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `PathHelper1 + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `PathHelper2 + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `PathHelper2 + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:55:8\n    |\n LL |     VJ{x: Path2},\n-   |        ^^^^^^^^ `PathHelper2 + 'static` does not have a constant size known at compile-time\n+   |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `PathHelper2 + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `PathHelper3 + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `PathHelper3 + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n    |\n LL |     VK(isize, Path3),\n-   |               ^^^^^ `PathHelper3 + 'static` does not have a constant size known at compile-time\n+   |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `PathHelper3 + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: `PathHelper4 + 'static` does not have a constant size known at compile-time\n+error[E0277]: the size for value values of type `PathHelper4 + 'static` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:59:18\n    |\n LL |     VL{u: isize, x: Path4},\n-   |                  ^^^^^^^^ `PathHelper4 + 'static` does not have a constant size known at compile-time\n+   |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `PathHelper4 + 'static`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>"}]}