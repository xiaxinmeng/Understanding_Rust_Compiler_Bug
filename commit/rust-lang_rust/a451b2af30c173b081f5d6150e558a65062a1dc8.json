{"sha": "a451b2af30c173b081f5d6150e558a65062a1dc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NTFiMmFmMzBjMTczYjA4MWY1ZDYxNTBlNTU4YTY1MDYyYTFkYzg=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2020-12-19T14:49:42Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2020-12-19T16:00:40Z"}, "message": "Added from_over_into lint", "tree": {"sha": "d54e3c3950b3e3eceaeb2a10f94e5d29ac830eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54e3c3950b3e3eceaeb2a10f94e5d29ac830eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a451b2af30c173b081f5d6150e558a65062a1dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a451b2af30c173b081f5d6150e558a65062a1dc8", "html_url": "https://github.com/rust-lang/rust/commit/a451b2af30c173b081f5d6150e558a65062a1dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a451b2af30c173b081f5d6150e558a65062a1dc8/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0718eeb64849b00e8f0a5cc4f96603b61ff8c049", "url": "https://api.github.com/repos/rust-lang/rust/commits/0718eeb64849b00e8f0a5cc4f96603b61ff8c049", "html_url": "https://github.com/rust-lang/rust/commit/0718eeb64849b00e8f0a5cc4f96603b61ff8c049"}], "stats": {"total": 145, "additions": 126, "deletions": 19}, "files": [{"sha": "de8da99cdee12385b27570510ace9d77e5c54979", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -1841,6 +1841,7 @@ Released 2018-09-13\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n+[`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"}, {"sha": "fe7120b0f9a25b1d2302ec85891399a95f7eea04", "filename": "clippy_lints/src/from_over_into.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -0,0 +1,63 @@\n+use crate::utils::paths::INTO;\n+use crate::utils::{match_def_path, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n+    ///\n+    /// **Why is this bad?** According the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl Into<StringWrapper> for String {\n+    ///     fn into(self) -> StringWrapper {\n+    ///         StringWrapper(self)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl From<String> for StringWrapper {\n+    ///     fn from(s: String) -> StringWrapper {\n+    ///         StringWrapper(s)\n+    ///     }\n+    /// }\n+    /// ```\n+    pub FROM_OVER_INTO,\n+    style,\n+    \"Warns on implementations of `Into<..>` to use `From<..>`\"\n+}\n+\n+declare_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n+\n+impl LateLintPass<'_> for FromOverInto {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        if_chain! {\n+            if let hir::ItemKind::Impl{ .. } = &item.kind;\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n+\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    FROM_OVER_INTO,\n+                    item.span,\n+                    \"An implementation of From is preferred since it gives you Into<..> for free where the reverse isn't true.\",\n+                    None,\n+                    \"consider implement From instead\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "58587481922cc8126764ac0601c2038899045d7e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -207,6 +207,7 @@ mod float_literal;\n mod floating_point_arithmetic;\n mod format;\n mod formatting;\n+mod from_over_into;\n mod functions;\n mod future_not_send;\n mod get_last_with_len;\n@@ -614,6 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         &formatting::SUSPICIOUS_ELSE_FORMATTING,\n         &formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+        &from_over_into::FROM_OVER_INTO,\n         &functions::DOUBLE_MUST_USE,\n         &functions::MUST_USE_CANDIDATE,\n         &functions::MUST_USE_UNIT,\n@@ -1203,6 +1205,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box from_over_into::FromOverInto);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n@@ -1417,6 +1420,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n@@ -1663,6 +1667,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::RESULT_UNIT_ERR),"}, {"sha": "292d0924fb17a4ca1b32bf0a39fa6a81fdc68e82", "filename": "tests/ui/from_over_into.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::from_over_into)]\n+\n+// this should throw an error\n+struct StringWrapper(String);\n+\n+impl Into<StringWrapper> for String {\n+    fn into(self) -> StringWrapper {\n+        StringWrapper(self)\n+    }\n+}\n+\n+// this is fine\n+struct A(String);\n+\n+impl From<String> for A {\n+    fn from(s: String) -> A {\n+        A(s)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "17f30fa837ec4071b3e34a96401b3123a51d9f70", "filename": "tests/ui/from_over_into.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -0,0 +1,15 @@\n+error: An implementation of From is preferred since it gives you Into<..> for free where the reverse isn't true.\n+  --> $DIR/from_over_into.rs:6:1\n+   |\n+LL | / impl Into<StringWrapper> for String {\n+LL | |     fn into(self) -> StringWrapper {\n+LL | |         StringWrapper(self)\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::from-over-into` implied by `-D warnings`\n+   = help: consider implement From instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "a192ebde3ebf4e73047dde8152c6dee234cf6bfc", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "96041a7dd850e3807504697a84b87026447a5955", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "02038b5fb6b5a7ed56ce688bdf1e01834d0a68c6", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a451b2af30c173b081f5d6150e558a65062a1dc8/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=a451b2af30c173b081f5d6150e558a65062a1dc8", "patch": "@@ -1,5 +1,5 @@\n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:28\n+  --> $DIR/unused_unit.rs:19:28\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                            ^^^^^^ help: remove the `-> ()`\n@@ -11,109 +11,109 @@ LL | #![deny(clippy::unused_unit)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:19:18\n+  --> $DIR/unused_unit.rs:20:18\n    |\n LL |     where G: Fn() -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:58\n+  --> $DIR/unused_unit.rs:19:58\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                                                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:20:26\n+  --> $DIR/unused_unit.rs:21:26\n    |\n LL |         let _y: &dyn Fn() -> () = &f;\n    |                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:27:18\n+  --> $DIR/unused_unit.rs:28:18\n    |\n LL |     fn into(self) -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:28:9\n+  --> $DIR/unused_unit.rs:29:9\n    |\n LL |         ()\n    |         ^^ help: remove the final `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:33:29\n+  --> $DIR/unused_unit.rs:34:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:35:19\n+  --> $DIR/unused_unit.rs:36:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:36:16\n+  --> $DIR/unused_unit.rs:37:16\n    |\n LL |         H: Fn() -> ();\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:40:29\n+  --> $DIR/unused_unit.rs:41:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:42:19\n+  --> $DIR/unused_unit.rs:43:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:43:16\n+  --> $DIR/unused_unit.rs:44:16\n    |\n LL |         H: Fn() -> () {}\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:46:17\n+  --> $DIR/unused_unit.rs:47:17\n    |\n LL | fn return_unit() -> () { () }\n    |                 ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:46:26\n+  --> $DIR/unused_unit.rs:47:26\n    |\n LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:56:14\n+  --> $DIR/unused_unit.rs:57:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:58:11\n+  --> $DIR/unused_unit.rs:59:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:75:10\n+  --> $DIR/unused_unit.rs:76:10\n    |\n LL | fn test()->(){}\n    |          ^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:78:11\n+  --> $DIR/unused_unit.rs:79:11\n    |\n LL | fn test2() ->(){}\n    |           ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:81:11\n+  --> $DIR/unused_unit.rs:82:11\n    |\n LL | fn test3()-> (){}\n    |           ^^^^^ help: remove the `-> ()`"}]}