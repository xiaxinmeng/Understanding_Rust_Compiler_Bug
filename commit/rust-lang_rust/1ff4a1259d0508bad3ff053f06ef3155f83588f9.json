{"sha": "1ff4a1259d0508bad3ff053f06ef3155f83588f9", "node_id": "C_kwDOAAsO6NoAKDFmZjRhMTI1OWQwNTA4YmFkM2ZmMDUzZjA2ZWYzMTU1ZjgzNTg4Zjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-18T10:25:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-18T10:25:38Z"}, "message": "Rollup merge of #106950 - the8472:fix-splice-miri, r=cuviper\n\nDon't do pointer arithmetic on pointers to deallocated memory\n\nvec::Splice can invalidate the slice::Iter inside vec::Drain. So we replace them with dangling pointers which, unlike ones to deallocated memory, are allowed.\n\nFixes miri test failures.\nFixes https://github.com/rust-lang/miri/issues/2759", "tree": {"sha": "f890885fbfe8bcf43874942b07caa165d3ae9522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f890885fbfe8bcf43874942b07caa165d3ae9522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ff4a1259d0508bad3ff053f06ef3155f83588f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjx8kiCRBK7hj4Ov3rIwAAHpsIAJNzZt5OzYG/mU2Hwv9x7/Cz\nofuslnutiHr7lIW6wjzTnKvUCMqwaOBbQsk9bgi5QY8bZviEkpJn5SeO0/ndacBu\n43Ms78ciTF7r9s60duGf/qfh73KYIjaZHT7RVX5AUjGv4S5DNi73GyGctfBAaQra\nvkTVAISagYgTp2E4DAEAIE4lOhN2mTuewGsKXpwAnk14hOctuVsok+QBaXD99g58\nADE3ncmZVhZOnlMJV9EiMK/u0OlUUwBZwrta/jpzEM0IhjX3eJKc5fyGbK2frLUb\n3UdEyuT1zmLcHbByzAnAiQrDjETS/n2CM+ypxEljIUBV/AQs9pFIoxqrQHz9aTg=\n=OxPF\n-----END PGP SIGNATURE-----\n", "payload": "tree f890885fbfe8bcf43874942b07caa165d3ae9522\nparent 6f5c3c9cdb4c5a0e07d21c0aef9216a6f9ff3d5b\nparent 2d54b7ceb2a5c078f019fd2eacf70d59ea37555b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674037538 +0530\ncommitter GitHub <noreply@github.com> 1674037538 +0530\n\nRollup merge of #106950 - the8472:fix-splice-miri, r=cuviper\n\nDon't do pointer arithmetic on pointers to deallocated memory\n\nvec::Splice can invalidate the slice::Iter inside vec::Drain. So we replace them with dangling pointers which, unlike ones to deallocated memory, are allowed.\n\nFixes miri test failures.\nFixes https://github.com/rust-lang/miri/issues/2759\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff4a1259d0508bad3ff053f06ef3155f83588f9", "html_url": "https://github.com/rust-lang/rust/commit/1ff4a1259d0508bad3ff053f06ef3155f83588f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ff4a1259d0508bad3ff053f06ef3155f83588f9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5c3c9cdb4c5a0e07d21c0aef9216a6f9ff3d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5c3c9cdb4c5a0e07d21c0aef9216a6f9ff3d5b", "html_url": "https://github.com/rust-lang/rust/commit/6f5c3c9cdb4c5a0e07d21c0aef9216a6f9ff3d5b"}, {"sha": "2d54b7ceb2a5c078f019fd2eacf70d59ea37555b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d54b7ceb2a5c078f019fd2eacf70d59ea37555b", "html_url": "https://github.com/rust-lang/rust/commit/2d54b7ceb2a5c078f019fd2eacf70d59ea37555b"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "2b1a787cc549929231be0dfe33f1b8b57d1e9441", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ff4a1259d0508bad3ff053f06ef3155f83588f9/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff4a1259d0508bad3ff053f06ef3155f83588f9/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=1ff4a1259d0508bad3ff053f06ef3155f83588f9", "patch": "@@ -223,9 +223,9 @@ impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n         }\n \n         // as_slice() must only be called when iter.len() is > 0 because\n-        // vec::Splice modifies vec::Drain fields and may grow the vec which would invalidate\n-        // the iterator's internal pointers. Creating a reference to deallocated memory\n-        // is invalid even when it is zero-length\n+        // it also gets touched by vec::Splice which may turn it into a dangling pointer\n+        // which would make it and the vec pointer point to different allocations which would\n+        // lead to invalid pointer arithmetic below.\n         let drop_ptr = iter.as_slice().as_ptr();\n \n         unsafe {"}, {"sha": "1861147fe72fb676920d5a8ac8847288253e6797", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ff4a1259d0508bad3ff053f06ef3155f83588f9/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff4a1259d0508bad3ff053f06ef3155f83588f9/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=1ff4a1259d0508bad3ff053f06ef3155f83588f9", "patch": "@@ -54,6 +54,12 @@ impl<I: Iterator, A: Allocator> ExactSizeIterator for Splice<'_, I, A> {}\n impl<I: Iterator, A: Allocator> Drop for Splice<'_, I, A> {\n     fn drop(&mut self) {\n         self.drain.by_ref().for_each(drop);\n+        // At this point draining is done and the only remaining tasks are splicing\n+        // and moving things into the final place.\n+        // Which means we can replace the slice::Iter with pointers that won't point to deallocated\n+        // memory, so that Drain::drop is still allowed to call iter.len(), otherwise it would break\n+        // the ptr.sub_ptr contract.\n+        self.drain.iter = (&[]).iter();\n \n         unsafe {\n             if self.drain.tail_len == 0 {"}, {"sha": "30a28bc5803ddf41f0479606e9e94ca99d06d6c3", "filename": "src/tools/miri/tests/pass/vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ff4a1259d0508bad3ff053f06ef3155f83588f9/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff4a1259d0508bad3ff053f06ef3155f83588f9/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs?ref=1ff4a1259d0508bad3ff053f06ef3155f83588f9", "patch": "@@ -162,6 +162,11 @@ fn reverse() {\n     assert!(v[0].0 == 49);\n }\n \n+fn miri_issue_2759() {\n+    let mut input = \"1\".to_string();\n+    input.replace_range(0..0, \"0\");\n+}\n+\n fn main() {\n     assert_eq!(vec_reallocate().len(), 5);\n \n@@ -191,4 +196,5 @@ fn main() {\n     swap();\n     swap_remove();\n     reverse();\n+    miri_issue_2759();\n }"}]}