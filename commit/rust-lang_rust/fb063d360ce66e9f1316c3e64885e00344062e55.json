{"sha": "fb063d360ce66e9f1316c3e64885e00344062e55", "node_id": "C_kwDOAAsO6NoAKGZiMDYzZDM2MGNlNjZlOWYxMzE2YzNlNjQ4ODVlMDAzNDQwNjJlNTU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-22T09:12:21Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-24T08:10:31Z"}, "message": "Add `ellipsis` to HIR `RecordLit`", "tree": {"sha": "9de6c1774f2f4ce63fb8ba98f32b2d71bded0bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de6c1774f2f4ce63fb8ba98f32b2d71bded0bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb063d360ce66e9f1316c3e64885e00344062e55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLc/ncACgkQ4laYqTBY\nYXEAHg/+PicQH0gkxqAAXEsehiAQBoB/xtMd+Sfrh8vsABMtBJjGB8XNof54OcFb\nMvU64Rx3PiQnd5TUVT0i82T2N0ohy40ju6+5UpMBB/O7HLbhtBk/q8Ia1Eixo9s9\nPy5YCV4FTtvjh5CR7EQUTiYg6xJQndCRNXZnvjAeewe0tBfq9nZ/AIFOQor+gX0A\nU/gcR7JyvSgKUyXSdZdIE+MafXM0NAHtd93IB4zeW2Alcer6MpkvcdhPQ8lExTfS\nKVURp330HBKn85iYZgpuEyk0uuLgvX3f+exvhioS3fQDm9d7FrwJN3R2LZmmrghR\n0FwjofTnWGvj4RycQNHNumAGCM+n00KC4rzewXzMET2smjfDuPr9OjhniYAlZN3n\n3+b25d4XO305HFgwj+5PnPRlgr8vyDm0nOpX2XbI2StJtgk892PJoWSt+Onz9ivL\noyONcFTgfLHP1dxoa0qtKaPxrkmHGFaQPcNYfTaGTuc3t19jUnhISRPaE1l8UOPk\nihn4/MRpdSlA7S4RNRJH2MNMLiDcbpuuGfbAgUqTfiOgVI+/3mFm8z7yBEgo9L3E\nrEezbD42gevzQ7N3gMZj0wl3bEEW7oe4IggHVzQJpKpAvBXRVtZm0LRQy6A2R/TM\nmpFXuYnv9VJtgPSfpU8WerbPDRgaQ1gkGvqzMQUFefe/rs5z4rY=\n=u5TX\n-----END PGP SIGNATURE-----", "payload": "tree 9de6c1774f2f4ce63fb8ba98f32b2d71bded0bc0\nparent 977e12a0bdc3e329af179ef3a9d466af9eb613bb\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1658481141 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1658650231 +0900\n\nAdd `ellipsis` to HIR `RecordLit`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb063d360ce66e9f1316c3e64885e00344062e55", "html_url": "https://github.com/rust-lang/rust/commit/fb063d360ce66e9f1316c3e64885e00344062e55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb063d360ce66e9f1316c3e64885e00344062e55/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977e12a0bdc3e329af179ef3a9d466af9eb613bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/977e12a0bdc3e329af179ef3a9d466af9eb613bb", "html_url": "https://github.com/rust-lang/rust/commit/977e12a0bdc3e329af179ef3a9d466af9eb613bb"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "b43699de120307dd67e20bb9517106b1f84fd12c", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=fb063d360ce66e9f1316c3e64885e00344062e55", "patch": "@@ -378,9 +378,10 @@ impl ExprCollector<'_> {\n                         })\n                         .collect();\n                     let spread = nfl.spread().map(|s| self.collect_expr(s));\n-                    Expr::RecordLit { path, fields, spread }\n+                    let ellipsis = nfl.dotdot_token().is_some();\n+                    Expr::RecordLit { path, fields, spread, ellipsis }\n                 } else {\n-                    Expr::RecordLit { path, fields: Box::default(), spread: None }\n+                    Expr::RecordLit { path, fields: Box::default(), spread: None, ellipsis: false }\n                 };\n \n                 self.alloc_expr(record_lit, syntax_ptr)"}, {"sha": "145fe4c19db40fc256d567445c4206d6279e44ff", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=fb063d360ce66e9f1316c3e64885e00344062e55", "patch": "@@ -138,6 +138,7 @@ pub enum Expr {\n         path: Option<Box<Path>>,\n         fields: Box<[RecordLitField]>,\n         spread: Option<ExprId>,\n+        ellipsis: bool,\n     },\n     Field {\n         expr: ExprId,"}, {"sha": "1fcb4c2976ebccb9d777df2c4297bfe923bf7ab9", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=fb063d360ce66e9f1316c3e64885e00344062e55", "patch": "@@ -305,7 +305,7 @@ pub fn record_literal_missing_fields(\n     expr: &Expr,\n ) -> Option<(VariantId, Vec<LocalFieldId>, /*exhaustive*/ bool)> {\n     let (fields, exhaustive) = match expr {\n-        Expr::RecordLit { path: _, fields, spread } => (fields, spread.is_none()),\n+        Expr::RecordLit { fields, spread, .. } => (fields, spread.is_none()),\n         _ => return None,\n     };\n "}, {"sha": "9debe835473a85314fb33e588c50246edc6c1332", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb063d360ce66e9f1316c3e64885e00344062e55/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fb063d360ce66e9f1316c3e64885e00344062e55", "patch": "@@ -421,7 +421,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 TyKind::Never.intern(Interner)\n             }\n-            Expr::RecordLit { path, fields, spread } => {\n+            Expr::RecordLit { path, fields, spread, .. } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_deref(), false);\n                 if let Some(variant) = def_id {\n                     self.write_variant_resolution(tgt_expr.into(), variant);"}]}