{"sha": "54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWIyMmY2ZGJmYzg0OTNkZmIyY2JjYzUwMzBkNzBjNTc3MDUzMWY=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-16T15:55:53Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-02-26T16:27:40Z"}, "message": "Only suggest map_or for copy types", "tree": {"sha": "3760f34042184125960b517c776a26174d1d745c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3760f34042184125960b517c776a26174d1d745c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJcdWj9AAoJENWyu1zcMzS8DX4IAIb99v4aPtJZwQXngRdn1sWu\nH1hc18SeKdJo543cFqqWSzOreM1elORlT86wZHpieS3lNrEqxhODezeudKEHKjf8\n1gPBfz5wCRaXg3Fc+FBrBG9i1aHqJjsdcKPt5nUFDTMv2+JDvpxtcZKZw/8AjvYa\nA1zs26TxL1rinaf5ChTaMDWwidFJcWcATHpk7bHn8c5sqQK1F/e2lc/T5SI5JKdn\nN+TLN8W0IURjWkPlpaq/XYaqsFTVv/O4MWObRiKS+zYlECD3eQEM/3V9nSWWYdQ1\na7SLuqtwjddt6X/XpUHfKHeqtG4Mb5l3HmbquSzroG2xK0IqEozSRJKNREWQyB8=\n=1CzD\n-----END PGP SIGNATURE-----", "payload": "tree 3760f34042184125960b517c776a26174d1d745c\nparent 412d41ae86bf90af21676af17e24cf745177d903\nauthor Wilco Kusee <wilcokusee@gmail.com> 1547654153 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1551198460 +0100\n\nOnly suggest map_or for copy types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "html_url": "https://github.com/rust-lang/rust/commit/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412d41ae86bf90af21676af17e24cf745177d903", "url": "https://api.github.com/repos/rust-lang/rust/commits/412d41ae86bf90af21676af17e24cf745177d903", "html_url": "https://github.com/rust-lang/rust/commit/412d41ae86bf90af21676af17e24cf745177d903"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "d27383ca332d7037c60d0e58450dd6b7c76cd184", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "patch": "@@ -1772,7 +1772,8 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, ok_args: &[hir::Ex\n /// lint use of `map().unwrap_or()` for `Option`s\n fn lint_map_unwrap_or(cx: &LateContext<'_, '_>, expr: &hir::Expr, map_args: &[hir::Expr], unwrap_args: &[hir::Expr]) {\n     // lint if the caller of `map()` is an `Option`\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+    let unwrap_ty = cx.tables.expr_ty(&unwrap_args[1]);\n+    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) && is_copy(cx, unwrap_ty) {\n         // get snippets for args to map() and unwrap_or()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n         let unwrap_snippet = snippet(cx, unwrap_args[1].span, \"..\");"}, {"sha": "e815668125409d0c72e0710f4148c6f17c8af0a2", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "patch": "@@ -179,6 +179,9 @@ fn option_methods() {\n     // macro case\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or(0); // should not lint\n \n+    let id: String = \"identifier\".to_string();\n+    let _ = Some(\"prefix\").map(|p| format!(\"{}.{}\", p, id)).unwrap_or(id); // Should not lint if not copyable\n+\n     // Check OPTION_MAP_UNWRAP_OR_ELSE\n     // single line case\n     let _ = opt.map(|x| x + 1)"}, {"sha": "0042d4805274929531efae3dfc738197a6f0f292", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54ab22f6dbfc8493dfb2cbcc5030d70c5770531f/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=54ab22f6dbfc8493dfb2cbcc5030d70c5770531f", "patch": "@@ -90,7 +90,7 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:184:13\n+  --> $DIR/methods.rs:187:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -102,7 +102,7 @@ LL | |                .unwrap_or_else(|| 0); // should lint even though this cal\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -112,7 +112,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:192:13\n+  --> $DIR/methods.rs:195:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -122,15 +122,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:201:13\n+  --> $DIR/methods.rs:204:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:203:13\n+  --> $DIR/methods.rs:206:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -146,7 +146,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:229:13\n+  --> $DIR/methods.rs:232:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:232:13\n+  --> $DIR/methods.rs:235:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -165,7 +165,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:248:13\n+  --> $DIR/methods.rs:251:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +174,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:254:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -184,15 +184,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:257:13\n+  --> $DIR/methods.rs:260:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:263:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -202,15 +202,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:266:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:272:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -220,125 +220,125 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:306:22\n+  --> $DIR/methods.rs:309:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:309:5\n+  --> $DIR/methods.rs:312:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:312:21\n+  --> $DIR/methods.rs:315:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:315:14\n+  --> $DIR/methods.rs:318:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:318:19\n+  --> $DIR/methods.rs:321:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:321:5\n+  --> $DIR/methods.rs:324:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:324:5\n+  --> $DIR/methods.rs:327:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:327:14\n+  --> $DIR/methods.rs:330:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:332:21\n+  --> $DIR/methods.rs:335:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:335:19\n+  --> $DIR/methods.rs:338:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:338:21\n+  --> $DIR/methods.rs:341:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:341:21\n+  --> $DIR/methods.rs:344:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:352:23\n+  --> $DIR/methods.rs:355:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:353:26\n+  --> $DIR/methods.rs:356:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:354:31\n+  --> $DIR/methods.rs:357:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:355:29\n+  --> $DIR/methods.rs:358:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:360:23\n+  --> $DIR/methods.rs:363:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:363:26\n+  --> $DIR/methods.rs:366:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:366:29\n+  --> $DIR/methods.rs:369:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:378:13\n+  --> $DIR/methods.rs:381:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}