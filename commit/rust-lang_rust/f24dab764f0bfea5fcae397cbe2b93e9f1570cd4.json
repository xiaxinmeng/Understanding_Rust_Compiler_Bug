{"sha": "f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "node_id": "C_kwDOAAsO6NoAKGYyNGRhYjc2NGYwYmZlYTVmY2FlMzk3Y2JlMmI5M2U5ZjE1NzBjZDQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T01:19:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T01:19:27Z"}, "message": "Rollup merge of #106381 - aDotInTheVoid:jsondoclint-more-options, r=notriddle\n\nJsondoclint: Add `--verbose` and `--json-output` options\n\nThere quite helpful for manually using jsondoclint as a debugging tool, especially on large files (these were written to look into core.json).\n\nr? rustdoc", "tree": {"sha": "52ec9098281e03f9effed79ecf9bf45a49ca8979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ec9098281e03f9effed79ecf9bf45a49ca8979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtNQfCRBK7hj4Ov3rIwAAqEIIALD0ux5TkaBo2yXW+U3XV0L8\nM9gZiA1usY7EVsWYuRM4z4LRx9GLzf1RcvmffIRa9vwD8Jp6D7miwSGhz203gR2u\nAyj2X1rPlPm6EpIfpMlUPGyFkARlxVzdQp250CJZWMVsjPxF86xa/9RCnJJ39DrO\nHYh/y6uT6igA6AAa0SXtxx56fQ7p+XLhxbc6qIejA0e2J+qMEkj7chR91psN9Y9W\nC92SSRrGQjQKrRRaIVudY9PmHtZ0Md22BdQWDR4DSrojOmeRTRs6dK+nHYXR+uyC\nTvnORtMCiTBgFE/4rEwLR3WgC5krM9WkQ6T6mBwAQI1c8DYaWhcy9QQK+D4A+qY=\n=97wr\n-----END PGP SIGNATURE-----\n", "payload": "tree 52ec9098281e03f9effed79ecf9bf45a49ca8979\nparent 5d828d2440ed6cc4c27057fe6aa1d305f7a559cb\nparent 226ab7fd759d94e81d6831f869e41502a7f183c7\nauthor Michael Goulet <michael@errs.io> 1672795167 -0800\ncommitter GitHub <noreply@github.com> 1672795167 -0800\n\nRollup merge of #106381 - aDotInTheVoid:jsondoclint-more-options, r=notriddle\n\nJsondoclint: Add `--verbose` and `--json-output` options\n\nThere quite helpful for manually using jsondoclint as a debugging tool, especially on large files (these were written to look into core.json).\n\nr? rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "html_url": "https://github.com/rust-lang/rust/commit/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d828d2440ed6cc4c27057fe6aa1d305f7a559cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d828d2440ed6cc4c27057fe6aa1d305f7a559cb", "html_url": "https://github.com/rust-lang/rust/commit/5d828d2440ed6cc4c27057fe6aa1d305f7a559cb"}, {"sha": "226ab7fd759d94e81d6831f869e41502a7f183c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/226ab7fd759d94e81d6831f869e41502a7f183c7", "html_url": "https://github.com/rust-lang/rust/commit/226ab7fd759d94e81d6831f869e41502a7f183c7"}], "stats": {"total": 155, "additions": 121, "deletions": 34}, "files": [{"sha": "117295014e6b85d25f7c1f128188abdc7d76f6c5", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -597,7 +597,7 @@ checksum = \"23b71c3ce99b7611011217b366d923f1d0a7e07a92bb2dbf1e84508c673ca3bd\"\n dependencies = [\n  \"atty\",\n  \"bitflags\",\n- \"clap_derive\",\n+ \"clap_derive 3.2.18\",\n  \"clap_lex 0.2.2\",\n  \"indexmap\",\n  \"once_cell\",\n@@ -614,7 +614,9 @@ checksum = \"6bf8832993da70a4c6d13c581f4463c2bdda27b9bf1c5498dc4365543abe6d6f\"\n dependencies = [\n  \"atty\",\n  \"bitflags\",\n+ \"clap_derive 4.0.13\",\n  \"clap_lex 0.3.0\",\n+ \"once_cell\",\n  \"strsim\",\n  \"termcolor\",\n ]\n@@ -641,6 +643,19 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"clap_derive\"\n+version = \"4.0.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c42f169caba89a7d512b5418b09864543eeb4d497416c917d7137863bd2076ad\"\n+dependencies = [\n+ \"heck\",\n+ \"proc-macro-error\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"clap_lex\"\n version = \"0.2.2\"\n@@ -2097,8 +2112,10 @@ name = \"jsondoclint\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n+ \"clap 4.0.15\",\n  \"fs-err\",\n  \"rustdoc-json-types\",\n+ \"serde\",\n  \"serde_json\",\n ]\n "}, {"sha": "8990310a4f474073ad3233a3d5d99773c21c4458", "filename": "src/tools/jsondoclint/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2FCargo.toml?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -7,6 +7,8 @@ edition = \"2021\"\n \n [dependencies]\n anyhow = \"1.0.62\"\n+clap = { version = \"4.0.15\", features = [\"derive\"] }\n fs-err = \"2.8.1\"\n rustdoc-json-types = { version = \"0.1.0\", path = \"../../rustdoc-json-types\" }\n+serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\""}, {"sha": "a183c4068ce85af48f175517fbd9ae56896ef1f2", "filename": "src/tools/jsondoclint/src/json_find.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -1,8 +1,9 @@\n use std::fmt::Write;\n \n+use serde::Serialize;\n use serde_json::Value;\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Serialize)]\n pub enum SelectorPart {\n     Field(String),\n     Index(usize),"}, {"sha": "05e938f4f7df4f906afcb73ac7cdb757c8c33c10", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 71, "deletions": 27, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -1,59 +1,103 @@\n-use std::env;\n+use std::io::{BufWriter, Write};\n \n-use anyhow::{anyhow, bail, Result};\n+use anyhow::{bail, Result};\n+use clap::Parser;\n use fs_err as fs;\n use rustdoc_json_types::{Crate, Id, FORMAT_VERSION};\n+use serde::Serialize;\n use serde_json::Value;\n \n pub(crate) mod item_kind;\n mod json_find;\n mod validator;\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Serialize, Clone)]\n struct Error {\n     kind: ErrorKind,\n     id: Id,\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Serialize, Clone)]\n enum ErrorKind {\n-    NotFound,\n+    NotFound(Vec<json_find::Selector>),\n     Custom(String),\n }\n \n+#[derive(Debug, Serialize)]\n+struct JsonOutput {\n+    path: String,\n+    errors: Vec<Error>,\n+}\n+\n+#[derive(Parser)]\n+struct Cli {\n+    /// The path to the json file to be linted\n+    path: String,\n+\n+    /// Show verbose output\n+    #[arg(long)]\n+    verbose: bool,\n+\n+    #[arg(long)]\n+    json_output: Option<String>,\n+}\n+\n fn main() -> Result<()> {\n-    let path = env::args().nth(1).ok_or_else(|| anyhow!(\"no path given\"))?;\n+    let Cli { path, verbose, json_output } = Cli::parse();\n+\n     let contents = fs::read_to_string(&path)?;\n     let krate: Crate = serde_json::from_str(&contents)?;\n     assert_eq!(krate.format_version, FORMAT_VERSION);\n \n-    let mut validator = validator::Validator::new(&krate);\n+    let krate_json: Value = serde_json::from_str(&contents)?;\n+\n+    let mut validator = validator::Validator::new(&krate, krate_json);\n     validator.check_crate();\n \n+    if let Some(json_output) = json_output {\n+        let output = JsonOutput { path: path.clone(), errors: validator.errs.clone() };\n+        let mut f = BufWriter::new(fs::File::create(json_output)?);\n+        serde_json::to_writer(&mut f, &output)?;\n+        f.flush()?;\n+    }\n+\n     if !validator.errs.is_empty() {\n         for err in validator.errs {\n             match err.kind {\n-                ErrorKind::NotFound => {\n-                    let krate_json: Value = serde_json::from_str(&contents)?;\n-\n-                    let sels =\n-                        json_find::find_selector(&krate_json, &Value::String(err.id.0.clone()));\n-                    match &sels[..] {\n-                        [] => unreachable!(\n-                            \"id must be in crate, or it wouldn't be reported as not found\"\n-                        ),\n-                        [sel] => eprintln!(\n-                            \"{} not in index or paths, but refered to at '{}'\",\n-                            err.id.0,\n-                            json_find::to_jsonpath(&sel)\n-                        ),\n-                        [sel, ..] => eprintln!(\n-                            \"{} not in index or paths, but refered to at '{}' and more\",\n-                            err.id.0,\n-                            json_find::to_jsonpath(&sel)\n-                        ),\n+                ErrorKind::NotFound(sels) => match &sels[..] {\n+                    [] => {\n+                        unreachable!(\n+                            \"id {:?} must be in crate, or it wouldn't be reported as not found\",\n+                            err.id\n+                        )\n+                    }\n+                    [sel] => eprintln!(\n+                        \"{} not in index or paths, but refered to at '{}'\",\n+                        err.id.0,\n+                        json_find::to_jsonpath(&sel)\n+                    ),\n+                    [sel, ..] => {\n+                        if verbose {\n+                            let sels = sels\n+                                .iter()\n+                                .map(json_find::to_jsonpath)\n+                                .map(|i| format!(\"'{i}'\"))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \");\n+                            eprintln!(\n+                                \"{} not in index or paths, but refered to at {sels}\",\n+                                err.id.0\n+                            );\n+                        } else {\n+                            eprintln!(\n+                                \"{} not in index or paths, but refered to at '{}' and {} more\",\n+                                err.id.0,\n+                                json_find::to_jsonpath(&sel),\n+                                sels.len() - 1,\n+                            )\n+                        }\n                     }\n-                }\n+                },\n                 ErrorKind::Custom(msg) => eprintln!(\"{}: {}\", err.id.0, msg),\n             }\n         }"}, {"sha": "f1b9c1acbaec088097ccf45603b9b88557723001", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -7,8 +7,9 @@ use rustdoc_json_types::{\n     Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n     TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n+use serde_json::Value;\n \n-use crate::{item_kind::Kind, Error, ErrorKind};\n+use crate::{item_kind::Kind, json_find, Error, ErrorKind};\n \n /// The Validator walks over the JSON tree, and ensures it is well formed.\n /// It is made of several parts.\n@@ -22,6 +23,7 @@ use crate::{item_kind::Kind, Error, ErrorKind};\n pub struct Validator<'a> {\n     pub(crate) errs: Vec<Error>,\n     krate: &'a Crate,\n+    krate_json: Value,\n     /// Worklist of Ids to check.\n     todo: HashSet<&'a Id>,\n     /// Ids that have already been visited, so don't need to be checked again.\n@@ -39,9 +41,10 @@ enum PathKind {\n }\n \n impl<'a> Validator<'a> {\n-    pub fn new(krate: &'a Crate) -> Self {\n+    pub fn new(krate: &'a Crate, krate_json: Value) -> Self {\n         Self {\n             krate,\n+            krate_json,\n             errs: Vec::new(),\n             seen_ids: HashSet::new(),\n             todo: HashSet::new(),\n@@ -373,7 +376,11 @@ impl<'a> Validator<'a> {\n         } else {\n             if !self.missing_ids.contains(id) {\n                 self.missing_ids.insert(id);\n-                self.fail(id, ErrorKind::NotFound)\n+\n+                let sels = json_find::find_selector(&self.krate_json, &Value::String(id.0.clone()));\n+                assert_ne!(sels.len(), 0);\n+\n+                self.fail(id, ErrorKind::NotFound(sels))\n             }\n         }\n     }"}, {"sha": "37b826153efb16dc09c67227adefebea4b206139", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24dab764f0bfea5fcae397cbe2b93e9f1570cd4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=f24dab764f0bfea5fcae397cbe2b93e9f1570cd4", "patch": "@@ -2,11 +2,16 @@ use std::collections::HashMap;\n \n use rustdoc_json_types::{Crate, Item, Visibility};\n \n+use crate::json_find::SelectorPart;\n+\n use super::*;\n \n #[track_caller]\n fn check(krate: &Crate, errs: &[Error]) {\n-    let mut validator = Validator::new(krate);\n+    let krate_string = serde_json::to_string(krate).unwrap();\n+    let krate_json = serde_json::from_str(&krate_string).unwrap();\n+\n+    let mut validator = Validator::new(krate, krate_json);\n     validator.check_crate();\n \n     assert_eq!(errs, &validator.errs[..]);\n@@ -46,5 +51,16 @@ fn errors_on_missing_links() {\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n-    check(&k, &[Error { kind: ErrorKind::NotFound, id: id(\"1\") }]);\n+    check(\n+        &k,\n+        &[Error {\n+            kind: ErrorKind::NotFound(vec![vec![\n+                SelectorPart::Field(\"index\".to_owned()),\n+                SelectorPart::Field(\"0\".to_owned()),\n+                SelectorPart::Field(\"links\".to_owned()),\n+                SelectorPart::Field(\"Not Found\".to_owned()),\n+            ]]),\n+            id: id(\"1\"),\n+        }],\n+    );\n }"}]}