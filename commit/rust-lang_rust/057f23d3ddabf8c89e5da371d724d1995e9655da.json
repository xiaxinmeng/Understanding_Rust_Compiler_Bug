{"sha": "057f23d3ddabf8c89e5da371d724d1995e9655da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1N2YyM2QzZGRhYmY4Yzg5ZTVkYTM3MWQ3MjRkMTk5NWU5NjU1ZGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-12T12:27:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-09-28T14:39:00Z"}, "message": "rustc_codegen_ssa: remove redundant `va_list_ref` field from `FunctionCx`.", "tree": {"sha": "1d16461db0a791990ebcfd51c0dc7e2c5cc2cf95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d16461db0a791990ebcfd51c0dc7e2c5cc2cf95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/057f23d3ddabf8c89e5da371d724d1995e9655da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/057f23d3ddabf8c89e5da371d724d1995e9655da", "html_url": "https://github.com/rust-lang/rust/commit/057f23d3ddabf8c89e5da371d724d1995e9655da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/057f23d3ddabf8c89e5da371d724d1995e9655da/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88d181a023e804492602a19e6e080b3f762a691", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88d181a023e804492602a19e6e080b3f762a691", "html_url": "https://github.com/rust-lang/rust/commit/a88d181a023e804492602a19e6e080b3f762a691"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "7ebdfbdcdeb2d6340980b1ce1198a1899f484dd4", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/057f23d3ddabf8c89e5da371d724d1995e9655da/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/057f23d3ddabf8c89e5da371d724d1995e9655da/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=057f23d3ddabf8c89e5da371d724d1995e9655da", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n@@ -224,14 +225,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n     fn codegen_return_terminator(&mut self, mut bx: Bx) {\n+        // Call `va_end` if this is the definition of a C-variadic function.\n         if self.fn_ty.c_variadic {\n-            match self.va_list_ref {\n-                Some(va_list) => {\n+            // The `VaList` \"spoofed\" argument is just after all the real arguments.\n+            let va_list_arg_idx = self.fn_ty.args.len();\n+            match self.locals[mir::Local::new(1 + va_list_arg_idx)] {\n+                LocalRef::Place(va_list) => {\n                     bx.va_end(va_list.llval);\n                 }\n-                None => {\n-                    bug!(\"C-variadic function must have a `va_list_ref`\");\n-                }\n+                _ => bug!(\"C-variadic function must have a `VaList` place\"),\n             }\n         }\n         if self.fn_ty.ret.layout.abi.is_uninhabited() {"}, {"sha": "4f3a8bdb540b5d853da642d0424d28e45b697e44", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/057f23d3ddabf8c89e5da371d724d1995e9655da/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/057f23d3ddabf8c89e5da371d724d1995e9655da/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=057f23d3ddabf8c89e5da371d724d1995e9655da", "patch": "@@ -81,10 +81,6 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n \n     /// Debug information for MIR scopes.\n     scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope<Bx::DIScope>>,\n-\n-    /// If this function is a C-variadic function, this contains the `PlaceRef` of the\n-    /// \"spoofed\" `VaListImpl`.\n-    va_list_ref: Option<PlaceRef<'tcx, Bx::Value>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -236,18 +232,13 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         scopes,\n         locals: IndexVec::new(),\n         debug_context,\n-        va_list_ref: None,\n     };\n \n     let memory_locals = analyze::non_ssa_locals(&fx);\n \n     // Allocate variable and temp allocas\n     fx.locals = {\n-        // FIXME(dlrobertson): This is ugly. Find a better way of getting the `PlaceRef` or\n-        // `LocalRef` from `arg_local_refs`\n-        let mut va_list_ref = None;\n-        let args = arg_local_refs(&mut bx, &fx, &memory_locals, &mut va_list_ref);\n-        fx.va_list_ref = va_list_ref;\n+        let args = arg_local_refs(&mut bx, &fx, &memory_locals);\n \n         let mut allocate_local = |local| {\n             let decl = &mir.local_decls[local];\n@@ -426,7 +417,6 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     fx: &FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,\n-    va_list_ref: &mut Option<PlaceRef<'tcx, Bx::Value>>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n     let mir = fx.mir;\n     let tcx = fx.cx.tcx();\n@@ -500,8 +490,6 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let va_list = PlaceRef::alloca(bx, bx.layout_of(arg_ty));\n             bx.set_var_name(va_list.llval, name);\n             bx.va_start(va_list.llval);\n-            // FIXME(eddyb) remove `va_list_ref`.\n-            *va_list_ref = Some(va_list);\n \n             arg_scope.map(|scope| {\n                 let variable_access = VariableAccess::DirectVariable {"}]}