{"sha": "0a2d221d47e1113d8d73bb11d225c347bd83570b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmQyMjFkNDdlMTExM2Q4ZDczYmIxMWQyMjVjMzQ3YmQ4MzU3MGI=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-19T08:28:09Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-19T08:28:09Z"}, "message": "Added arglist mover", "tree": {"sha": "15a6f01efcdf3ddb7f3063ec44471d0d939f51d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a6f01efcdf3ddb7f3063ec44471d0d939f51d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2d221d47e1113d8d73bb11d225c347bd83570b", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBUYJkACgkQ2MS9WuTZ\nzE3gEQf+LNM9onbGq0htFvQoyhST+EJ40qR5kEFFLJsk63BbIAM7YD7edtpkBM7s\nqRQWULDHNJPdQlvh00zm5HmEXCCI++e27onluyvc5M4cO3svUcAx2fZQaPiMOQ0s\nkoNIY66Q7Z57YkjHcEjrc9lwdYped7tl1y/1jFYPhPQ9gwbjVjWFQmLo7Gm7y9MB\nKsWLcM/iH+eSvpYPJjJCN1Ui8U/D4UCWD0+0L5MnRod6ed3B3tIj7orowFVSPTjy\nI+nP9QZnQJrU/LIgg7gtRMfiCkHX37BttzAFSzOgnLRMODlAppSKP0/Ti8v+rhBA\nOn2UFNwnGLCO1GI6jiu2Jt0ZauUoRw==\n=6gNE\n-----END PGP SIGNATURE-----", "payload": "tree 15a6f01efcdf3ddb7f3063ec44471d0d939f51d6\nparent 236abe2e60efd4b50ffe0bd0a9a40d9716c192d5\nauthor ivan770 <leshenko.ivan770@gmail.com> 1616142489 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1616142489 +0200\n\nAdded arglist mover\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d221d47e1113d8d73bb11d225c347bd83570b", "html_url": "https://github.com/rust-lang/rust/commit/0a2d221d47e1113d8d73bb11d225c347bd83570b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d221d47e1113d8d73bb11d225c347bd83570b/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236abe2e60efd4b50ffe0bd0a9a40d9716c192d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/236abe2e60efd4b50ffe0bd0a9a40d9716c192d5", "html_url": "https://github.com/rust-lang/rust/commit/236abe2e60efd4b50ffe0bd0a9a40d9716c192d5"}], "stats": {"total": 114, "additions": 102, "deletions": 12}, "files": [{"sha": "de4e57b6a275620bea949e4a0b26469b4bd0310e", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 102, "deletions": 12, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0a2d221d47e1113d8d73bb11d225c347bd83570b/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2d221d47e1113d8d73bb11d225c347bd83570b/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=0a2d221d47e1113d8d73bb11d225c347bd83570b", "patch": "@@ -2,7 +2,10 @@ use std::iter::once;\n \n use hir::Semantics;\n use ide_db::{base_db::FileRange, RootDatabase};\n-use syntax::{algo, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode};\n+use itertools::Itertools;\n+use syntax::{\n+    algo, ast, match_ast, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n+};\n use text_edit::{TextEdit, TextEditBuilder};\n \n pub enum Direction {\n@@ -29,16 +32,17 @@ pub(crate) fn move_item(\n     let file = sema.parse(range.file_id);\n \n     let item = file.syntax().covering_element(range.range);\n-    find_ancestors(item, direction)\n+    find_ancestors(item, direction, range.range)\n }\n \n-fn find_ancestors(item: SyntaxElement, direction: Direction) -> Option<TextEdit> {\n+fn find_ancestors(item: SyntaxElement, direction: Direction, range: TextRange) -> Option<TextEdit> {\n     let root = match item {\n         NodeOrToken::Node(node) => node,\n         NodeOrToken::Token(token) => token.parent()?,\n     };\n \n     let movable = [\n+        SyntaxKind::ARG_LIST,\n         SyntaxKind::MATCH_ARM,\n         SyntaxKind::PARAM,\n         SyntaxKind::LET_STMT,\n@@ -64,16 +68,39 @@ fn find_ancestors(item: SyntaxElement, direction: Direction) -> Option<TextEdit>\n         .chain(root.ancestors())\n         .find(|ancestor| movable.contains(&ancestor.kind()))?;\n \n-    move_in_direction(&ancestor, direction)\n+    move_in_direction(&ancestor, direction, range)\n }\n \n-fn move_in_direction(node: &SyntaxNode, direction: Direction) -> Option<TextEdit> {\n-    let sibling = match direction {\n-        Direction::Up => node.prev_sibling(),\n-        Direction::Down => node.next_sibling(),\n-    }?;\n+fn move_in_direction(\n+    node: &SyntaxNode,\n+    direction: Direction,\n+    range: TextRange,\n+) -> Option<TextEdit> {\n+    match_ast! {\n+        match node {\n+            ast::ArgList(it) => swap_sibling_in_list(it.args(), range, direction),\n+            _ => Some(replace_nodes(node, &match direction {\n+                Direction::Up => node.prev_sibling(),\n+                Direction::Down => node.next_sibling(),\n+            }?))\n+        }\n+    }\n+}\n \n-    Some(replace_nodes(node, &sibling))\n+fn swap_sibling_in_list<'i, A: AstNode + Clone, I: Iterator<Item = A>>(\n+    list: I,\n+    range: TextRange,\n+    direction: Direction,\n+) -> Option<TextEdit> {\n+    let (l, r) = list\n+        .tuple_windows()\n+        .filter(|(l, r)| match direction {\n+            Direction::Up => r.syntax().text_range().contains_range(range),\n+            Direction::Down => l.syntax().text_range().contains_range(range),\n+        })\n+        .next()?;\n+\n+    Some(replace_nodes(l.syntax(), r.syntax()))\n }\n \n fn replace_nodes(first: &SyntaxNode, second: &SyntaxNode) -> TextEdit {\n@@ -304,7 +331,7 @@ use std::vec::Vec;\n     }\n \n     #[test]\n-    fn moves_match_expr_up() {\n+    fn test_moves_match_expr_up() {\n         check(\n             r#\"\n fn main() {\n@@ -331,7 +358,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn moves_param_up() {\n+    fn test_moves_param_up() {\n         check(\n             r#\"\n fn test(one: i32, two$0$0: u32) {}\n@@ -343,6 +370,69 @@ fn main() {\n             expect![[r#\"\n fn test(two: u32, one: i32) {}\n \n+fn main() {\n+    test(123, 456);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_arg_up() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123, 456$0$0);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(456, 123);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_arg_down() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123$0$0, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(456, 123);\n+}\n+            \"#]],\n+            Direction::Down,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move_arg() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123$0$0, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n fn main() {\n     test(123, 456);\n }"}]}