{"sha": "720735b9430f7ff61761f54587b82dab45317938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDczNWI5NDMwZjdmZjYxNzYxZjU0NTg3YjgyZGFiNDUzMTc5Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-20T06:03:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-20T06:03:58Z"}, "message": "Auto merge of #25588 - bluss:doc-string-from, r=alexcrichton\n\nUse stable code in doc examples (libcollections)\r\n\r\nMain task is to change from String::from_str to String::from in examples for String\r\n(the latter constructor is stable). While I'm at it, also remove redundant feature flags,\r\nfix some other instances of unstable code in examples (in examples for stable\r\nmethods), and remove some use of usize in examples too.", "tree": {"sha": "754ea7e9468553120c3d9665840e165ddac53129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754ea7e9468553120c3d9665840e165ddac53129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720735b9430f7ff61761f54587b82dab45317938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720735b9430f7ff61761f54587b82dab45317938", "html_url": "https://github.com/rust-lang/rust/commit/720735b9430f7ff61761f54587b82dab45317938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720735b9430f7ff61761f54587b82dab45317938/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b446f4a9147cf75a4554bbc1bef22698d8e263", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b446f4a9147cf75a4554bbc1bef22698d8e263", "html_url": "https://github.com/rust-lang/rust/commit/f6b446f4a9147cf75a4554bbc1bef22698d8e263"}, {"sha": "93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "html_url": "https://github.com/rust-lang/rust/commit/93701b399b2d3cbb056c1eaaf1fba421585bb2bd"}], "stats": {"total": 86, "additions": 22, "deletions": 64}, "files": [{"sha": "1d783ed8d36145c3cb161a0e39da9ea36284fee1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -32,7 +32,7 @@\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```rust\n-//! # #![feature(alloc, collections)]\n+//! # #![feature(alloc)]\n //! use std::rc::Rc;\n //!\n //! struct Owner {\n@@ -49,7 +49,7 @@\n //! fn main() {\n //!     // Create a reference counted Owner.\n //!     let gadget_owner : Rc<Owner> = Rc::new(\n-//!             Owner { name: String::from_str(\"Gadget Man\") }\n+//!             Owner { name: String::from(\"Gadget Man\") }\n //!     );\n //!\n //!     // Create Gadgets belonging to gadget_owner. To increment the reference"}, {"sha": "11f16e2f400b4892959c8ff7c93c92a2d884dd9d", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -1291,14 +1291,13 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n     /// a.insert(1, \"a\");\n     /// a.insert(2, \"b\");\n     ///\n-    /// let keys: Vec<usize> = a.keys().cloned().collect();\n+    /// let keys: Vec<_> = a.keys().cloned().collect();\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1314,7 +1313,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1555,7 +1553,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();"}, {"sha": "a3b9320e2b521221d3a16557e0903acbe5c3f81d", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -115,7 +115,6 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -124,7 +123,7 @@ impl<T> BTreeSet<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let v: Vec<usize> = set.iter().cloned().collect();\n+    /// let v: Vec<_> = set.iter().cloned().collect();\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -171,7 +170,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -182,7 +180,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let diff: Vec<usize> = a.difference(&b).cloned().collect();\n+    /// let diff: Vec<_> = a.difference(&b).cloned().collect();\n     /// assert_eq!(diff, [1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -195,7 +193,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -206,7 +203,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let sym_diff: Vec<usize> = a.symmetric_difference(&b).cloned().collect();\n+    /// let sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();\n     /// assert_eq!(sym_diff, [1, 3]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -220,7 +217,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -231,7 +227,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let intersection: Vec<usize> = a.intersection(&b).cloned().collect();\n+    /// let intersection: Vec<_> = a.intersection(&b).cloned().collect();\n     /// assert_eq!(intersection, [2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -245,7 +241,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -254,7 +249,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// let mut b = BTreeSet::new();\n     /// b.insert(2);\n     ///\n-    /// let union: Vec<usize> = a.union(&b).cloned().collect();\n+    /// let union: Vec<_> = a.union(&b).cloned().collect();\n     /// assert_eq!(union, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -318,7 +313,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -336,7 +330,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -358,7 +351,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -401,7 +393,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();\n@@ -483,12 +474,11 @@ impl<T> IntoIterator for BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n     ///\n-    /// let v: Vec<usize> = set.into_iter().collect();\n+    /// let v: Vec<_> = set.into_iter().collect();\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {"}, {"sha": "61ebf7f6df91cabc29f46ae3013115f17763930d", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -230,7 +230,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut a = LinkedList::new();\n@@ -473,7 +472,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut dl = LinkedList::new();\n@@ -521,7 +519,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -540,7 +537,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -566,7 +562,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();"}, {"sha": "c0da6331b22115e0bdf98c96d7bca18d331cdd6a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -529,7 +529,6 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// let seek = 13;\n@@ -865,7 +864,6 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// assert_eq!(s.binary_search(&13),  Ok(9));"}, {"sha": "7563bb76b52f803b7b5321a68bf6cd07e36de1ab", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -121,9 +121,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n-    /// use std::str::Utf8Error;\n-    ///\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n     /// let s = String::from_utf8(hello_vec).unwrap();\n     /// assert_eq!(s, \"hello\");\n@@ -346,8 +343,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let s = String::from_str(\"hello\");\n+    /// let s = String::from(\"hello\");\n     /// let bytes = s.into_bytes();\n     /// assert_eq!(bytes, [104, 101, 108, 108, 111]);\n     /// ```\n@@ -370,8 +366,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// s.push_str(\"bar\");\n     /// assert_eq!(s, \"foobar\");\n     /// ```\n@@ -447,8 +442,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// s.reserve(100);\n     /// assert!(s.capacity() >= 100);\n     /// s.shrink_to_fit();\n@@ -465,8 +459,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"abc\");\n+    /// let mut s = String::from(\"abc\");\n     /// s.push('1');\n     /// s.push('2');\n     /// s.push('3');\n@@ -501,8 +494,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let s = String::from_str(\"hello\");\n+    /// let s = String::from(\"hello\");\n     /// let b: &[_] = &[104, 101, 108, 108, 111];\n     /// assert_eq!(s.as_bytes(), b);\n     /// ```\n@@ -522,8 +514,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"hello\");\n+    /// let mut s = String::from(\"hello\");\n     /// s.truncate(2);\n     /// assert_eq!(s, \"he\");\n     /// ```\n@@ -540,8 +531,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('f'));\n@@ -578,8 +568,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// assert_eq!(s.remove(0), 'f');\n     /// assert_eq!(s.remove(1), 'o');\n     /// assert_eq!(s.remove(0), 'o');\n@@ -641,8 +630,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"hello\");\n+    /// let mut s = String::from(\"hello\");\n     /// unsafe {\n     ///     let vec = s.as_mut_vec();\n     ///     assert!(vec == &[104, 101, 108, 108, 111]);"}, {"sha": "5ec71b7353c3ee2baebd847208caeb175bdafba6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -91,7 +91,6 @@ static MAX_MEMORY_SIZE: usize = isize::MAX as usize;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(collections)]\n /// let mut vec = Vec::new();\n /// vec.push(1);\n /// vec.push(2);\n@@ -105,9 +104,9 @@ static MAX_MEMORY_SIZE: usize = isize::MAX as usize;\n /// vec[0] = 7;\n /// assert_eq!(vec[0], 7);\n ///\n-/// vec.push_all(&[1, 2, 3]);\n+/// vec.extend([1, 2, 3].iter().cloned());\n ///\n-/// for x in vec.iter() {\n+/// for x in &vec {\n ///     println!(\"{}\", x);\n /// }\n /// assert_eq!(vec, [7, 1, 2, 3]);\n@@ -369,9 +368,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.push_all(&[1, 2, 3]);\n+    /// vec.extend([1, 2, 3].iter().cloned());\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n@@ -425,7 +423,6 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, [1, 2]);\n@@ -555,7 +552,6 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// let mut v = vec![1, 2, 3];\n     /// assert_eq!(v.remove(1), 2);\n     /// assert_eq!(v, [1, 3]);\n@@ -743,7 +739,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections_drain, collections_range)]\n+    /// # #![feature(collections_drain)]\n     ///\n     /// // Draining using `..` clears the whole vector.\n     /// let mut v = vec![1, 2, 3];"}, {"sha": "80bbe4681e72822356ab3e19d3b48fb0f9d960c8", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720735b9430f7ff61761f54587b82dab45317938/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=720735b9430f7ff61761f54587b82dab45317938", "patch": "@@ -247,7 +247,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -275,7 +274,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let buf: VecDeque<i32> = VecDeque::with_capacity(10);\n@@ -299,7 +297,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -321,7 +318,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -508,7 +504,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -533,7 +528,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}]}