{"sha": "5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "node_id": "C_kwDOAAsO6NoAKDVlNDgxZDA3ZDJmOTYyY2RhMGJkYjc2YTFlNmMxOWQ5OWMxYmU4NDc", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-13T12:09:10Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-13T12:09:10Z"}, "message": "Provide object files to llvm-dwp instead of .dwo", "tree": {"sha": "79a02d44cb64e229f17b4e5dab19264d93569fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a02d44cb64e229f17b4e5dab19264d93569fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmG3N+YACgkQGBtJ+fOP\nM3Spqwv9GyRL/wbAQe6Fy03MFdFOGtEU7ldddnqNnaMHpLz0qWbVMJabPaGjMOCz\nWfRDGR4favByAhCM2vKyb+AbdLY0rb7loVXxxIjnPjhGhW183JgAGDbRjkwyloeZ\nub0kUmGv5jAGTSCJvXX3mCm7Y6PKtAnVBUcg0ohnnLLwRp3/YlNHrV9di4KYdZl2\nW3QbM8lJn4BgfUmk9elSqBDM0VR0u/eBUQfCbMMBMZI6c+sg66pk3gdlRMGIgpKR\nqVdQma3vmUXStE8xP4ytMb0X/TIqwUqhAfCq11aXQ/J9MaDhCxOWDZN+kC2iMtF2\nbdfLQ0mVltNnkMKTnw7aO8ZbhAcIahxGGcvRgqvrvq+N2wS/PmOIuXFHtcj0OLJF\njiiyWdMSn1ItUKqm4xFJu0AStkjcgu/cOSV5Yh+t4KLeV8tRYysNqgntM/p8XB9+\n+/8DoxEq+BAKVMhBLKRGHnM2seumteMEI6Ck2PkPLLO3uQr3okgrN6OdLhYp9mXP\nW7kpoLOE\n=CciD\n-----END PGP SIGNATURE-----", "payload": "tree 79a02d44cb64e229f17b4e5dab19264d93569fac\nparent 707f72c1dffc33f2980945371aa4fb2d9f77af6d\nauthor Andy Wang <cbeuw.andy@gmail.com> 1639397350 +0000\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1639397350 +0000\n\nProvide object files to llvm-dwp instead of .dwo\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "html_url": "https://github.com/rust-lang/rust/commit/5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e481d07d2f962cda0bdb76a1e6c19d99c1be847/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "707f72c1dffc33f2980945371aa4fb2d9f77af6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/707f72c1dffc33f2980945371aa4fb2d9f77af6d", "html_url": "https://github.com/rust-lang/rust/commit/707f72c1dffc33f2980945371aa4fb2d9f77af6d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "aaecb26f4a031358f8b5a70aa5d0656c75c32998", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e481d07d2f962cda0bdb76a1e6c19d99c1be847/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e481d07d2f962cda0bdb76a1e6c19d99c1be847/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "patch": "@@ -637,9 +637,9 @@ fn escape_stdout_stderr_string(s: &[u8]) -> String {\n \n const LLVM_DWP_EXECUTABLE: &'static str = \"rust-llvm-dwp\";\n \n-/// Invoke `llvm-dwp` (shipped alongside rustc) to link `dwo` files from Split DWARF into a `dwp`\n+/// Invoke `llvm-dwp` (shipped alongside rustc) to link debuginfo in object files into a `dwp`\n /// file.\n-fn link_dwarf_object<'a, I>(sess: &'a Session, executable_out_filename: &Path, dwo_files: I)\n+fn link_dwarf_object<'a, I>(sess: &'a Session, executable_out_filename: &Path, object_files: I)\n where\n     I: IntoIterator<Item: AsRef<OsStr>>,\n {\n@@ -649,7 +649,7 @@ where\n     let mut cmd = Command::new(LLVM_DWP_EXECUTABLE);\n     cmd.arg(\"-o\");\n     cmd.arg(&dwp_out_filename);\n-    cmd.args(dwo_files);\n+    cmd.args(object_files);\n \n     let mut new_path = sess.get_tools_search_paths(false);\n     if let Some(path) = env::var_os(\"PATH\") {\n@@ -1033,13 +1033,13 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         SplitDebuginfo::Packed if sess.target.is_like_msvc => {}\n \n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n-        // We cannot rely on the .dwo paths in the exectuable because they may have been\n+        // We cannot rely on the .o paths in the exectuable because they may have been\n         // remapped by --remap-path-prefix and therefore invalid. So we need to provide\n-        // the .dwo paths explicitly\n+        // the .o paths explicitly\n         SplitDebuginfo::Packed => link_dwarf_object(\n             sess,\n             &out_filename,\n-            codegen_results.modules.iter().filter_map(|m| m.dwarf_object.as_ref()),\n+            codegen_results.modules.iter().filter_map(|m| m.object.as_ref()),\n         ),\n     }\n "}]}