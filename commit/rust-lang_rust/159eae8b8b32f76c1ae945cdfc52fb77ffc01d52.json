{"sha": "159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OWVhZThiOGIzMmY3NmMxYWU5NDVjZGZjNTJmYjc3ZmZjMDFkNTI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2016-03-16T02:42:45Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2016-03-16T03:51:48Z"}, "message": "Rename panic handlers to panic hook", "tree": {"sha": "7f416a442020ae4b981ec1973b1176a443d821c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f416a442020ae4b981ec1973b1176a443d821c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "html_url": "https://github.com/rust-lang/rust/commit/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74dfc1ddd9d6a9f541bc526c3401b92bcd16bd2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dfc1ddd9d6a9f541bc526c3401b92bcd16bd2b", "html_url": "https://github.com/rust-lang/rust/commit/74dfc1ddd9d6a9f541bc526c3401b92bcd16bd2b"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "56d638d9df3b4d0adab4f646461584b0c5bfff12", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "patch": "@@ -23,7 +23,21 @@ use sync::{Arc, Mutex, RwLock};\n use sys_common::unwind;\n use thread::Result;\n \n-pub use panicking::{take_handler, set_handler, PanicInfo, Location};\n+pub use panicking::{take_hook, set_hook, PanicInfo, Location};\n+\n+///\n+#[rustc_deprecated(since = \"1.9.0\", reason = \"renamed to set_hook\")]\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub fn set_handler<F>(handler: F) where F: Fn(&PanicInfo) + 'static + Sync + Send {\n+    set_hook(handler)\n+}\n+\n+///\n+#[rustc_deprecated(since = \"1.9.0\", reason = \"renamed to take_hook\")]\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub fn take_handler() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n+    take_hook()\n+}\n \n /// A marker trait which represents \"panic safe\" types in Rust.\n ///"}, {"sha": "556dddf9387e230bbe60fe225edd7e92f55cbda0", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159eae8b8b32f76c1ae945cdfc52fb77ffc01d52/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=159eae8b8b32f76c1ae945cdfc52fb77ffc01d52", "patch": "@@ -32,73 +32,72 @@ thread_local! {\n }\n \n #[derive(Copy, Clone)]\n-enum Handler {\n+enum Hook {\n     Default,\n     Custom(*mut (Fn(&PanicInfo) + 'static + Sync + Send)),\n }\n \n-static HANDLER_LOCK: StaticRwLock = StaticRwLock::new();\n-static mut HANDLER: Handler = Handler::Default;\n+static HOOK_LOCK: StaticRwLock = StaticRwLock::new();\n+static mut HOOK: Hook = Hook::Default;\n static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n-/// Registers a custom panic handler, replacing any that was previously\n-/// registered.\n+/// Registers a custom panic hook, replacing any that was previously registered.\n ///\n-/// The panic handler is invoked when a thread panics, but before it begins\n-/// unwinding the stack. The default handler prints a message to standard error\n+/// The panic hook is invoked when a thread panics, but before it begins\n+/// unwinding the stack. The default hook prints a message to standard error\n /// and generates a backtrace if requested, but this behavior can be customized\n-/// with the `set_handler` and `take_handler` functions.\n+/// with the `set_hook` and `take_hook` functions.\n ///\n-/// The handler is provided with a `PanicInfo` struct which contains information\n+/// The hook is provided with a `PanicInfo` struct which contains information\n /// about the origin of the panic, including the payload passed to `panic!` and\n /// the source code location from which the panic originated.\n ///\n-/// The panic handler is a global resource.\n+/// The panic hook is a global resource.\n ///\n /// # Panics\n ///\n /// Panics if called from a panicking thread.\n #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n-pub fn set_handler<F>(handler: F) where F: Fn(&PanicInfo) + 'static + Sync + Send {\n+pub fn set_hook<F>(hook: F) where F: Fn(&PanicInfo) + 'static + Sync + Send {\n     if thread::panicking() {\n-        panic!(\"cannot modify the panic handler from a panicking thread\");\n+        panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n \n-    let handler = Box::new(handler);\n+    let hook = Box::new(hook);\n     unsafe {\n-        let lock = HANDLER_LOCK.write();\n-        let old_handler = HANDLER;\n-        HANDLER = Handler::Custom(Box::into_raw(handler));\n+        let lock = HOOK_LOCK.write();\n+        let old_hook = HOOK;\n+        HOOK = Hook::Custom(Box::into_raw(hook));\n         drop(lock);\n \n-        if let Handler::Custom(ptr) = old_handler {\n+        if let Hook::Custom(ptr) = old_hook {\n             Box::from_raw(ptr);\n         }\n     }\n }\n \n-/// Unregisters the current panic handler, returning it.\n+/// Unregisters the current panic hook, returning it.\n ///\n-/// If no custom handler is registered, the default handler will be returned.\n+/// If no custom hook is registered, the default hook will be returned.\n ///\n /// # Panics\n ///\n /// Panics if called from a panicking thread.\n #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n-pub fn take_handler() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n+pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n     if thread::panicking() {\n-        panic!(\"cannot modify the panic handler from a panicking thread\");\n+        panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n \n     unsafe {\n-        let lock = HANDLER_LOCK.write();\n-        let handler = HANDLER;\n-        HANDLER = Handler::Default;\n+        let lock = HOOK_LOCK.write();\n+        let hook = HOOK;\n+        HOOK = Hook::Default;\n         drop(lock);\n \n-        match handler {\n-            Handler::Default => Box::new(default_handler),\n-            Handler::Custom(ptr) => {Box::from_raw(ptr)} // FIXME #30530\n+        match hook {\n+            Hook::Default => Box::new(default_hook),\n+            Hook::Custom(ptr) => {Box::from_raw(ptr)} // FIXME #30530\n         }\n     }\n }\n@@ -151,7 +150,7 @@ impl<'a> Location<'a> {\n     }\n }\n \n-fn default_handler(info: &PanicInfo) {\n+fn default_hook(info: &PanicInfo) {\n     let panics = PANIC_COUNT.with(|s| s.get());\n \n     // If this is a double panic, make sure that we print a backtrace\n@@ -224,10 +223,10 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n     };\n \n     unsafe {\n-        let _lock = HANDLER_LOCK.read();\n-        match HANDLER {\n-            Handler::Default => default_handler(&info),\n-            Handler::Custom(ptr) => (*ptr)(&info),\n+        let _lock = HOOK_LOCK.read();\n+        match HOOK {\n+            Hook::Default => default_hook(&info),\n+            Hook::Custom(ptr) => (*ptr)(&info),\n         }\n     }\n "}]}