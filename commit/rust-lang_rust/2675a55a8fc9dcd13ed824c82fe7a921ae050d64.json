{"sha": "2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzVhNTVhOGZjOWRjZDEzZWQ4MjRjODJmZTdhOTIxYWUwNTBkNjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-15T21:59:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-16T00:39:44Z"}, "message": "Rollup merge of #34268 - zackmdavis:if_let_over_none_unit_arm, r=jseyfried\n\nprefer `if let` to match with `None => ()` arm in some places\n\nCasual grepping revealed some places in the codebase (some of which\nantedated `if let`'s December 2014 stabilization in c200ae5a) where we\nwere using a match with a `None => ()` arm where (in the present\nauthor's opinion) an `if let` conditional would be more readable. (Other\nplaces where matching to the unit value did seem to better express the\nintent were left alone.)\n\nIt's likely that we don't care about making such trivial,\nnon-functional, sheerly \u00e6sthetic changes.\n\nBut if we do, this is a patch.", "tree": {"sha": "b4fa7dad1ada3400b3dd399cb1416bca13b25771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4fa7dad1ada3400b3dd399cb1416bca13b25771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "html_url": "https://github.com/rust-lang/rust/commit/2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84993b054faf9ac73239f73f5edad949f7d5341", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84993b054faf9ac73239f73f5edad949f7d5341", "html_url": "https://github.com/rust-lang/rust/commit/d84993b054faf9ac73239f73f5edad949f7d5341"}, {"sha": "8531d581046ad782e19ee0e877ef3819a7c123ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8531d581046ad782e19ee0e877ef3819a7c123ba", "html_url": "https://github.com/rust-lang/rust/commit/8531d581046ad782e19ee0e877ef3819a7c123ba"}], "stats": {"total": 240, "additions": 101, "deletions": 139}, "files": [{"sha": "b6b7aa6ce7de73b069aac995375723f034f9ffe1", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -1728,12 +1728,9 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.print_name(path1.node)?;\n-                match *sub {\n-                    Some(ref p) => {\n-                        word(&mut self.s, \"@\")?;\n-                        self.print_pat(&p)?;\n-                    }\n-                    None => (),\n+                if let Some(ref p) = *sub {\n+                    word(&mut self.s, \"@\")?;\n+                    self.print_pat(&p)?;\n                 }\n             }\n             PatKind::TupleStruct(ref path, ref elts, ddpos) => {\n@@ -2246,25 +2243,21 @@ impl<'a> State<'a> {\n             Some(cm) => cm,\n             _ => return Ok(()),\n         };\n-        match self.next_comment() {\n-            Some(ref cmnt) => {\n-                if (*cmnt).style != comments::Trailing {\n-                    return Ok(());\n-                }\n-                let span_line = cm.lookup_char_pos(span.hi);\n-                let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-                let mut next = (*cmnt).pos + BytePos(1);\n-                match next_pos {\n-                    None => (),\n-                    Some(p) => next = p,\n-                }\n-                if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n-                   span_line.line == comment_line.line {\n-                    self.print_comment(cmnt)?;\n-                    self.cur_cmnt_and_lit.cur_cmnt += 1;\n-                }\n+        if let Some(ref cmnt) = self.next_comment() {\n+            if (*cmnt).style != comments::Trailing {\n+                return Ok(());\n+            }\n+            let span_line = cm.lookup_char_pos(span.hi);\n+            let comment_line = cm.lookup_char_pos((*cmnt).pos);\n+            let mut next = (*cmnt).pos + BytePos(1);\n+            if let Some(p) = next_pos {\n+                next = p;\n+            }\n+            if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n+               span_line.line == comment_line.line {\n+                self.print_comment(cmnt)?;\n+                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n-            _ => (),\n         }\n         Ok(())\n     }"}, {"sha": "86bc4355b2d3c37ad57ab710a4374332907c7b7e", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -1856,20 +1856,18 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         },\n         None => None\n     };\n-    if method_id_opt.is_some() {\n-        let method_id = method_id_opt.unwrap();\n+    if let Some(method_id) = method_id_opt {\n         let parent = tcx.map.get_parent(method_id);\n-        match tcx.map.find(parent) {\n-            Some(node) => match node {\n+        if let Some(node) = tcx.map.find(parent) {\n+            match node {\n                 ast_map::NodeItem(item) => match item.node {\n                     hir::ItemImpl(_, _, ref gen, _, _, _) => {\n                         taken.extend_from_slice(&gen.lifetimes);\n                     }\n                     _ => ()\n                 },\n                 _ => ()\n-            },\n-            None => ()\n+            }\n         }\n     }\n     return taken;\n@@ -1938,4 +1936,3 @@ fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime {\n                     span: codemap::DUMMY_SP,\n                     name: name }\n }\n-"}, {"sha": "17da8ddbbc30c85f355c688556a04d510d649d0f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -160,12 +160,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             }\n             scanned.insert(id);\n \n-            match self.tcx.map.find(id) {\n-                Some(ref node) => {\n-                    self.live_symbols.insert(id);\n-                    self.visit_node(node);\n-                }\n-                None => (),\n+            if let Some(ref node) = self.tcx.map.find(id) {\n+                self.live_symbols.insert(id);\n+                self.visit_node(node);\n             }\n         }\n     }\n@@ -372,9 +369,8 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // Seed entry point\n-    match *tcx.sess.entry_fn.borrow() {\n-        Some((id, _)) => worklist.push(id),\n-        None => ()\n+    if let Some((id, _)) = *tcx.sess.entry_fn.borrow() {\n+        worklist.push(id);\n     }\n \n     // Seed implemented trait items\n@@ -464,16 +460,14 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         // method of a private type is used, but the type itself is never\n         // called directly.\n         let impl_items = self.tcx.impl_items.borrow();\n-        match self.tcx.inherent_impls.borrow().get(&self.tcx.map.local_def_id(id)) {\n-            None => (),\n-            Some(impl_list) => {\n-                for impl_did in impl_list.iter() {\n-                    for item_did in impl_items.get(impl_did).unwrap().iter() {\n-                        if let Some(item_node_id) =\n-                                self.tcx.map.as_local_node_id(item_did.def_id()) {\n-                            if self.live_symbols.contains(&item_node_id) {\n-                                return true;\n-                            }\n+        if let Some(impl_list) =\n+                self.tcx.inherent_impls.borrow().get(&self.tcx.map.local_def_id(id)) {\n+            for impl_did in impl_list.iter() {\n+                for item_did in impl_items.get(impl_did).unwrap().iter() {\n+                    if let Some(item_node_id) =\n+                            self.tcx.map.as_local_node_id(item_did.def_id()) {\n+                        if self.live_symbols.contains(&item_node_id) {\n+                            return true;\n                         }\n                     }\n                 }"}, {"sha": "64f35aed23f5c05ef4aef758393ee3d0708b6162", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -122,15 +122,12 @@ fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n \n     let potentially_illegal_move =\n                 check_and_get_illegal_move_origin(bccx, &move_info.cmt);\n-    match potentially_illegal_move {\n-        Some(illegal_move_origin) => {\n-            debug!(\"illegal_move_origin={:?}\", illegal_move_origin);\n-            let error = MoveError::with_move_info(illegal_move_origin,\n-                                                  move_info.span_path_opt);\n-            move_error_collector.add_error(error);\n-            return\n-        }\n-        None => ()\n+    if let Some(illegal_move_origin) = potentially_illegal_move {\n+        debug!(\"illegal_move_origin={:?}\", illegal_move_origin);\n+        let error = MoveError::with_move_info(illegal_move_origin,\n+                                              move_info.span_path_opt);\n+        move_error_collector.add_error(error);\n+        return;\n     }\n \n     match opt_loan_path(&move_info.cmt) {"}, {"sha": "8bf057095ac56d6ab7c75fc89288dcbd7d9c53c4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -929,29 +929,26 @@ impl<'a> LocalCrateReader<'a> {\n                     return;\n                 }\n \n-                match self.creader.extract_crate_info(i) {\n-                    Some(info) => {\n-                        let (cnum, _, _) = self.creader.resolve_crate(&None,\n-                                                                      &info.ident,\n-                                                                      &info.name,\n-                                                                      None,\n-                                                                      i.span,\n-                                                                      PathKind::Crate,\n-                                                                      true);\n-\n-                        let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n-                        let len = self.definitions.def_path(def_id.index).data.len();\n-\n-                        self.creader.update_extern_crate(cnum,\n-                                                         ExternCrate {\n-                                                             def_id: def_id,\n-                                                             span: i.span,\n-                                                             direct: true,\n-                                                             path_len: len,\n-                                                         });\n-                        self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n-                    }\n-                    None => ()\n+                if let Some(info) = self.creader.extract_crate_info(i) {\n+                    let (cnum, _, _) = self.creader.resolve_crate(&None,\n+                                                                  &info.ident,\n+                                                                  &info.name,\n+                                                                  None,\n+                                                                  i.span,\n+                                                                  PathKind::Crate,\n+                                                                  true);\n+\n+                    let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n+                    let len = self.definitions.def_path(def_id.index).data.len();\n+\n+                    self.creader.update_extern_crate(cnum,\n+                                                     ExternCrate {\n+                                                         def_id: def_id,\n+                                                         span: i.span,\n+                                                         direct: true,\n+                                                         path_len: len,\n+                                                     });\n+                    self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n                 }\n             }\n             ast::ItemKind::ForeignMod(ref fm) => self.process_foreign_mod(i, fm),"}, {"sha": "5250361cd17aede9221bfd65880e6d4c213917ba", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -2252,17 +2252,14 @@ pub fn update_linkage(ccx: &CrateContext,\n }\n \n fn set_global_section(ccx: &CrateContext, llval: ValueRef, i: &hir::Item) {\n-    match attr::first_attr_value_str_by_name(&i.attrs, \"link_section\") {\n-        Some(sect) => {\n-            if contains_null(&sect) {\n-                ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\", &sect));\n-            }\n-            unsafe {\n-                let buf = CString::new(sect.as_bytes()).unwrap();\n-                llvm::LLVMSetSection(llval, buf.as_ptr());\n-            }\n-        },\n-        None => ()\n+    if let Some(sect) = attr::first_attr_value_str_by_name(&i.attrs, \"link_section\") {\n+        if contains_null(&sect) {\n+            ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\", &sect));\n+        }\n+        unsafe {\n+            let buf = CString::new(sect.as_bytes()).unwrap();\n+            llvm::LLVMSetSection(llval, buf.as_ptr());\n+        }\n     }\n }\n "}, {"sha": "0d13a1377b831c86136289a54ecdd6659d37fcfd", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -874,9 +874,8 @@ pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile {\n }\n \n fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str) -> DIFile {\n-    match debug_context(cx).created_files.borrow().get(key) {\n-        Some(file_metadata) => return *file_metadata,\n-        None => ()\n+    if let Some(file_metadata) = debug_context(cx).created_files.borrow().get(key) {\n+        return *file_metadata;\n     }\n \n     debug!(\"file_metadata: file_name: {}, work_dir: {}\", file_name, work_dir);"}, {"sha": "dad82167a76b32a589fae4922ff2e08166af4380", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -50,12 +50,9 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let mono_ty = apply_param_substs(ccx.tcx(), psubsts, &item_ty);\n     debug!(\"mono_ty = {:?} (post-substitution)\", mono_ty);\n \n-    match ccx.instances().borrow().get(&instance) {\n-        Some(&val) => {\n-            debug!(\"leaving monomorphic fn {:?}\", instance);\n-            return (val, mono_ty);\n-        }\n-        None => ()\n+    if let Some(&val) = ccx.instances().borrow().get(&instance) {\n+        debug!(\"leaving monomorphic fn {:?}\", instance);\n+        return (val, mono_ty);\n     }\n \n     debug!(\"monomorphic_fn({:?})\", instance);"}, {"sha": "341b076e7cf30389ddcfed84f1475f101ce7863d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -5430,18 +5430,15 @@ impl<'a> Parser<'a> {\n                               name: String,\n                               id_sp: Span) -> PResult<'a, (ast::ItemKind, Vec<ast::Attribute> )> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n-        match included_mod_stack.iter().position(|p| *p == path) {\n-            Some(i) => {\n-                let mut err = String::from(\"circular modules: \");\n-                let len = included_mod_stack.len();\n-                for p in &included_mod_stack[i.. len] {\n-                    err.push_str(&p.to_string_lossy());\n-                    err.push_str(\" -> \");\n-                }\n-                err.push_str(&path.to_string_lossy());\n-                return Err(self.span_fatal(id_sp, &err[..]));\n-            }\n-            None => ()\n+        if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n+            let mut err = String::from(\"circular modules: \");\n+            let len = included_mod_stack.len();\n+            for p in &included_mod_stack[i.. len] {\n+                err.push_str(&p.to_string_lossy());\n+                err.push_str(\" -> \");\n+            }\n+            err.push_str(&path.to_string_lossy());\n+            return Err(self.span_fatal(id_sp, &err[..]));\n         }\n         included_mod_stack.push(path.clone());\n         drop(included_mod_stack);"}, {"sha": "8818acf9aeff0967b0fc10c2c7070cfefa308962", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -2459,12 +2459,9 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.print_ident(path1.node)?;\n-                match *sub {\n-                    Some(ref p) => {\n-                        word(&mut self.s, \"@\")?;\n-                        self.print_pat(&p)?;\n-                    }\n-                    None => ()\n+                if let Some(ref p) = *sub {\n+                    word(&mut self.s, \"@\")?;\n+                    self.print_pat(&p)?;\n                 }\n             }\n             PatKind::TupleStruct(ref path, ref elts, ddpos) => {\n@@ -3008,20 +3005,19 @@ impl<'a> State<'a> {\n             Some(cm) => cm,\n             _ => return Ok(())\n         };\n-        match self.next_comment() {\n-            Some(ref cmnt) => {\n-                if (*cmnt).style != comments::Trailing { return Ok(()) }\n-                let span_line = cm.lookup_char_pos(span.hi);\n-                let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-                let mut next = (*cmnt).pos + BytePos(1);\n-                match next_pos { None => (), Some(p) => next = p }\n-                if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n-                    span_line.line == comment_line.line {\n-                        self.print_comment(cmnt)?;\n-                        self.cur_cmnt_and_lit.cur_cmnt += 1;\n-                    }\n+        if let Some(ref cmnt) = self.next_comment() {\n+            if (*cmnt).style != comments::Trailing { return Ok(()) }\n+            let span_line = cm.lookup_char_pos(span.hi);\n+            let comment_line = cm.lookup_char_pos((*cmnt).pos);\n+            let mut next = (*cmnt).pos + BytePos(1);\n+            if let Some(p) = next_pos {\n+                next = p;\n+            }\n+            if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n+               span_line.line == comment_line.line {\n+                self.print_comment(cmnt)?;\n+                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n-            _ => ()\n         }\n         Ok(())\n     }"}, {"sha": "7295b36af0fe9f983ff452b27c8983bd7e1d52a4", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675a55a8fc9dcd13ed824c82fe7a921ae050d64/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=2675a55a8fc9dcd13ed824c82fe7a921ae050d64", "patch": "@@ -47,9 +47,8 @@ impl<T: Eq + Hash + Clone + 'static> Interner<T> {\n \n     pub fn intern(&self, val: T) -> Name {\n         let mut map = self.map.borrow_mut();\n-        match (*map).get(&val) {\n-            Some(&idx) => return idx,\n-            None => (),\n+        if let Some(&idx) = (*map).get(&val) {\n+            return idx;\n         }\n \n         let mut vect = self.vect.borrow_mut();\n@@ -161,9 +160,8 @@ impl StrInterner {\n \n     pub fn intern(&self, val: &str) -> Name {\n         let mut map = self.map.borrow_mut();\n-        match map.get(val) {\n-            Some(&idx) => return idx,\n-            None => (),\n+        if let Some(&idx) = map.get(val) {\n+            return idx;\n         }\n \n         let new_idx = Name(self.len() as u32);"}]}